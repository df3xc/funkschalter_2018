
f:/OneDrive/photon/funkschalter_2018/target/1.4.2/photon/funkschalter_2018.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000083f0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a8410  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000124  20000000  080a8414  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000063c  20000124  20000124  00040124  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a8538  080a8538  00038538  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a8560  080a8560  00038560  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00133c3a  00000000  00000000  00038564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001bfad  00000000  00000000  0016c19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d70c  00000000  00000000  0018814b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002bb8  00000000  00000000  001a5857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000044f8  00000000  00000000  001a840f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003758f  00000000  00000000  001ac907  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00043b60  00000000  00000000  001e3e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b0567  00000000  00000000  002279f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000de90  00000000  00000000  002d7f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 fa2b 	bl	80a648c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 fa30 	bl	80a64a2 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a8414 	.word	0x080a8414
 80a0050:	20000124 	.word	0x20000124
 80a0054:	20000124 	.word	0x20000124
 80a0058:	20000760 	.word	0x20000760
 80a005c:	20000760 	.word	0x20000760

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 f935 	bl	80a42d0 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a83a4 	.word	0x080a83a4
 80a0088:	080a840c 	.word	0x080a840c

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f002 b9b0 	b.w	80a23f0 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f002 faa7 	bl	80a25e4 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f004 b8db 	b.w	80a4254 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f003 bab3 	b.w	80a3608 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f003 bab9 	b.w	80a3618 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN8RCSwitchC1Ev>:
int RCSwitch::nReceiveTolerance = 60;
#endif
unsigned int RCSwitch::timings[RCSWITCH_MAX_CHANGES];

RCSwitch::RCSwitch() {
  this->nTransmitterPin = -1;
 80a00b8:	f04f 32ff 	mov.w	r2, #4294967295
/**
 * Set Receiving Tolerance
 */
#if not defined( RCSwitchDisableReceiving )
void RCSwitch::setReceiveTolerance(int nPercent) {
  RCSwitch::nReceiveTolerance = nPercent;
 80a00bc:	4b07      	ldr	r3, [pc, #28]	; (80a00dc <_ZN8RCSwitchC1Ev+0x24>)
  this->nTransmitterPin = -1;
  this->setPulseLength(350);
  this->setRepeatTransmit(10);
  this->setProtocol(1);
  #if not defined( RCSwitchDisableReceiving )
  this->nReceiverInterrupt = -1;
 80a00be:	6002      	str	r2, [r0, #0]
int RCSwitch::nReceiveTolerance = 60;
#endif
unsigned int RCSwitch::timings[RCSWITCH_MAX_CHANGES];

RCSwitch::RCSwitch() {
  this->nTransmitterPin = -1;
 80a00c0:	6042      	str	r2, [r0, #4]

/**
  * Sets pulse length in microseconds
  */
void RCSwitch::setPulseLength(int nPulseLength) {
  this->nPulseLength = nPulseLength;
 80a00c2:	f44f 71af 	mov.w	r1, #350	; 0x15e
/**
 * Set Receiving Tolerance
 */
#if not defined( RCSwitchDisableReceiving )
void RCSwitch::setReceiveTolerance(int nPercent) {
  RCSwitch::nReceiveTolerance = nPercent;
 80a00c6:	223c      	movs	r2, #60	; 0x3c
 80a00c8:	601a      	str	r2, [r3, #0]

/**
  * Sets pulse length in microseconds
  */
void RCSwitch::setPulseLength(int nPulseLength) {
  this->nPulseLength = nPulseLength;
 80a00ca:	6081      	str	r1, [r0, #8]
  this->setRepeatTransmit(10);
  this->setProtocol(1);
  #if not defined( RCSwitchDisableReceiving )
  this->nReceiverInterrupt = -1;
  this->setReceiveTolerance(60);
  RCSwitch::nReceivedValue = NULL;
 80a00cc:	4b04      	ldr	r3, [pc, #16]	; (80a00e0 <_ZN8RCSwitchC1Ev+0x28>)

/**
 * Sets Repeat Transmits
 */
void RCSwitch::setRepeatTransmit(int nRepeatTransmit) {
  this->nRepeatTransmit = nRepeatTransmit;
 80a00ce:	210a      	movs	r1, #10
 80a00d0:	60c1      	str	r1, [r0, #12]
  this->setRepeatTransmit(10);
  this->setProtocol(1);
  #if not defined( RCSwitchDisableReceiving )
  this->nReceiverInterrupt = -1;
  this->setReceiveTolerance(60);
  RCSwitch::nReceivedValue = NULL;
 80a00d2:	2200      	movs	r2, #0

/**
  * Sets the protocol to send.
  */
void RCSwitch::setProtocol(int nProtocol) {
  this->nProtocol = nProtocol;
 80a00d4:	2101      	movs	r1, #1
 80a00d6:	7401      	strb	r1, [r0, #16]
  this->setRepeatTransmit(10);
  this->setProtocol(1);
  #if not defined( RCSwitchDisableReceiving )
  this->nReceiverInterrupt = -1;
  this->setReceiveTolerance(60);
  RCSwitch::nReceivedValue = NULL;
 80a00d8:	601a      	str	r2, [r3, #0]
  #endif
}
 80a00da:	4770      	bx	lr
 80a00dc:	20000000 	.word	0x20000000
 80a00e0:	20000174 	.word	0x20000174

080a00e4 <_ZN8RCSwitch13enableReceiveEv>:
void RCSwitch::enableReceive(int interrupt) {
  this->nReceiverInterrupt = interrupt;
  this->enableReceive();
}

void RCSwitch::enableReceive() {
 80a00e4:	b507      	push	{r0, r1, r2, lr}
  if (this->nReceiverInterrupt != -1) {
 80a00e6:	6803      	ldr	r3, [r0, #0]
 80a00e8:	3301      	adds	r3, #1
 80a00ea:	d00b      	beq.n	80a0104 <_ZN8RCSwitch13enableReceiveEv+0x20>
    RCSwitch::nReceivedValue = NULL;
 80a00ec:	4b07      	ldr	r3, [pc, #28]	; (80a010c <_ZN8RCSwitch13enableReceiveEv+0x28>)
 80a00ee:	2200      	movs	r2, #0
 80a00f0:	601a      	str	r2, [r3, #0]
    RCSwitch::nReceivedBitlength = NULL;
 80a00f2:	4b07      	ldr	r3, [pc, #28]	; (80a0110 <_ZN8RCSwitch13enableReceiveEv+0x2c>)
    attachInterrupt(this->nReceiverInterrupt, handleInterrupt, CHANGE);
 80a00f4:	4907      	ldr	r1, [pc, #28]	; (80a0114 <_ZN8RCSwitch13enableReceiveEv+0x30>)
}

void RCSwitch::enableReceive() {
  if (this->nReceiverInterrupt != -1) {
    RCSwitch::nReceivedValue = NULL;
    RCSwitch::nReceivedBitlength = NULL;
 80a00f6:	601a      	str	r2, [r3, #0]
    attachInterrupt(this->nReceiverInterrupt, handleInterrupt, CHANGE);
 80a00f8:	8800      	ldrh	r0, [r0, #0]
 80a00fa:	f04f 33ff 	mov.w	r3, #4294967295
 80a00fe:	9200      	str	r2, [sp, #0]
 80a0100:	f004 fd1e 	bl	80a4b40 <_Z15attachInterrupttPFvvE13InterruptModeah>
  }
}
 80a0104:	b003      	add	sp, #12
 80a0106:	f85d fb04 	ldr.w	pc, [sp], #4
 80a010a:	bf00      	nop
 80a010c:	20000174 	.word	0x20000174
 80a0110:	20000170 	.word	0x20000170
 80a0114:	080a0409 	.word	0x080a0409

080a0118 <_ZN8RCSwitch13enableReceiveEi>:
#if not defined( RCSwitchDisableReceiving )
/**
 * Enable receiving data
 */
void RCSwitch::enableReceive(int interrupt) {
  this->nReceiverInterrupt = interrupt;
 80a0118:	6001      	str	r1, [r0, #0]
  this->enableReceive();
 80a011a:	f7ff bfe3 	b.w	80a00e4 <_ZN8RCSwitch13enableReceiveEv>

080a011e <_ZN8RCSwitch14disableReceiveEv>:
}

/**
 * Disable receiving data
 */
void RCSwitch::disableReceive() {
 80a011e:	b510      	push	{r4, lr}
 80a0120:	4604      	mov	r4, r0
  detachInterrupt(this->nReceiverInterrupt);
 80a0122:	8800      	ldrh	r0, [r0, #0]
 80a0124:	f004 fd34 	bl	80a4b90 <_Z15detachInterruptt>
  this->nReceiverInterrupt = -1;
 80a0128:	f04f 33ff 	mov.w	r3, #4294967295
 80a012c:	6023      	str	r3, [r4, #0]
 80a012e:	bd10      	pop	{r4, pc}

080a0130 <_ZN8RCSwitch9availableEv>:
}

bool RCSwitch::available() {
  return RCSwitch::nReceivedValue != NULL;
 80a0130:	4b02      	ldr	r3, [pc, #8]	; (80a013c <_ZN8RCSwitch9availableEv+0xc>)
 80a0132:	6818      	ldr	r0, [r3, #0]
}
 80a0134:	3000      	adds	r0, #0
 80a0136:	bf18      	it	ne
 80a0138:	2001      	movne	r0, #1
 80a013a:	4770      	bx	lr
 80a013c:	20000174 	.word	0x20000174

080a0140 <_ZN8RCSwitch14resetAvailableEv>:

void RCSwitch::resetAvailable() {
  RCSwitch::nReceivedValue = NULL;
 80a0140:	4b01      	ldr	r3, [pc, #4]	; (80a0148 <_ZN8RCSwitch14resetAvailableEv+0x8>)
 80a0142:	2200      	movs	r2, #0
 80a0144:	601a      	str	r2, [r3, #0]
 80a0146:	4770      	bx	lr
 80a0148:	20000174 	.word	0x20000174

080a014c <_ZN8RCSwitch16getReceivedValueEv>:
}

unsigned long RCSwitch::getReceivedValue() {
    return RCSwitch::nReceivedValue;
}
 80a014c:	4b01      	ldr	r3, [pc, #4]	; (80a0154 <_ZN8RCSwitch16getReceivedValueEv+0x8>)
 80a014e:	6818      	ldr	r0, [r3, #0]
 80a0150:	4770      	bx	lr
 80a0152:	bf00      	nop
 80a0154:	20000174 	.word	0x20000174

080a0158 <_ZN8RCSwitch20getReceivedBitlengthEv>:

unsigned int RCSwitch::getReceivedBitlength() {
  return RCSwitch::nReceivedBitlength;
}
 80a0158:	4b01      	ldr	r3, [pc, #4]	; (80a0160 <_ZN8RCSwitch20getReceivedBitlengthEv+0x8>)
 80a015a:	6818      	ldr	r0, [r3, #0]
 80a015c:	4770      	bx	lr
 80a015e:	bf00      	nop
 80a0160:	20000170 	.word	0x20000170

080a0164 <_ZN8RCSwitch16getReceivedDelayEv>:

unsigned int RCSwitch::getReceivedDelay() {
  return RCSwitch::nReceivedDelay;
}
 80a0164:	4b01      	ldr	r3, [pc, #4]	; (80a016c <_ZN8RCSwitch16getReceivedDelayEv+0x8>)
 80a0166:	6818      	ldr	r0, [r3, #0]
 80a0168:	4770      	bx	lr
 80a016a:	bf00      	nop
 80a016c:	20000290 	.word	0x20000290

080a0170 <_ZN8RCSwitch19getReceivedProtocolEv>:

unsigned int RCSwitch::getReceivedProtocol() {
  return RCSwitch::nReceivedProtocol;
}
 80a0170:	4b01      	ldr	r3, [pc, #4]	; (80a0178 <_ZN8RCSwitch19getReceivedProtocolEv+0x8>)
 80a0172:	6818      	ldr	r0, [r3, #0]
 80a0174:	4770      	bx	lr
 80a0176:	bf00      	nop
 80a0178:	20000128 	.word	0x20000128

080a017c <_ZN8RCSwitch18getReceivedRawdataEv>:

unsigned int* RCSwitch::getReceivedRawdata() {
    return RCSwitch::timings;
}
 80a017c:	4800      	ldr	r0, [pc, #0]	; (80a0180 <_ZN8RCSwitch18getReceivedRawdataEv+0x4>)
 80a017e:	4770      	bx	lr
 80a0180:	2000017c 	.word	0x2000017c
 80a0184:	00000000 	.word	0x00000000

080a0188 <_ZN8RCSwitch16receiveProtocol1Ej>:

/**
 *
 */
bool RCSwitch::receiveProtocol1(unsigned int changeCount){
 80a0188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 31;
 80a018c:	4f2a      	ldr	r7, [pc, #168]	; (80a0238 <_ZN8RCSwitch16receiveProtocol1Ej+0xb0>)
 80a018e:	231f      	movs	r3, #31
 80a0190:	683c      	ldr	r4, [r7, #0]
}

/**
 *
 */
bool RCSwitch::receiveProtocol1(unsigned int changeCount){
 80a0192:	4605      	mov	r5, r0

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 31;
 80a0194:	fbb4 f4f3 	udiv	r4, r4, r3
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;
 80a0198:	4b28      	ldr	r3, [pc, #160]	; (80a023c <_ZN8RCSwitch16receiveProtocol1Ej+0xb4>)

      for (int i = 1; i<changeCount ; i=i+2) {

          if (RCSwitch::timings[i] > delay-delayTolerance && RCSwitch::timings[i] < delay+delayTolerance && RCSwitch::timings[i+1] > delay*3-delayTolerance && RCSwitch::timings[i+1] < delay*3+delayTolerance) {
 80a019a:	46b9      	mov	r9, r7
 */
bool RCSwitch::receiveProtocol1(unsigned int changeCount){

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 31;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;
 80a019c:	6818      	ldr	r0, [r3, #0]

      for (int i = 1; i<changeCount ; i=i+2) {

          if (RCSwitch::timings[i] > delay-delayTolerance && RCSwitch::timings[i] < delay+delayTolerance && RCSwitch::timings[i+1] > delay*3-delayTolerance && RCSwitch::timings[i+1] < delay*3+delayTolerance) {
 80a019e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 */
bool RCSwitch::receiveProtocol1(unsigned int changeCount){

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 31;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;
 80a01a2:	4360      	muls	r0, r4
 80a01a4:	f005 fa72 	bl	80a568c <__aeabi_ui2d>
 80a01a8:	a321      	add	r3, pc, #132	; (adr r3, 80a0230 <_ZN8RCSwitch16receiveProtocol1Ej+0xa8>)
 80a01aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01ae:	f005 fae3 	bl	80a5778 <__aeabi_dmul>
 80a01b2:	f005 fcf3 	bl	80a5b9c <__aeabi_d2uiz>

      for (int i = 1; i<changeCount ; i=i+2) {
 80a01b6:	2201      	movs	r2, #1

          if (RCSwitch::timings[i] > delay-delayTolerance && RCSwitch::timings[i] < delay+delayTolerance && RCSwitch::timings[i+1] > delay*3-delayTolerance && RCSwitch::timings[i+1] < delay*3+delayTolerance) {
 80a01b8:	ebc0 0e06 	rsb	lr, r0, r6
 80a01bc:	ebc0 0c04 	rsb	ip, r0, r4
 80a01c0:	4406      	add	r6, r0
/**
 *
 */
bool RCSwitch::receiveProtocol1(unsigned int changeCount){

      unsigned long code = 0;
 80a01c2:	2300      	movs	r3, #0

      for (int i = 1; i<changeCount ; i=i+2) {

          if (RCSwitch::timings[i] > delay-delayTolerance && RCSwitch::timings[i] < delay+delayTolerance && RCSwitch::timings[i+1] > delay*3-delayTolerance && RCSwitch::timings[i+1] < delay*3+delayTolerance) {
            code = code << 1;
          } else if (RCSwitch::timings[i] > delay*3-delayTolerance && RCSwitch::timings[i] < delay*3+delayTolerance && RCSwitch::timings[i+1] > delay-delayTolerance && RCSwitch::timings[i+1] < delay+delayTolerance) {
 80a01c4:	4420      	add	r0, r4

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 31;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {
 80a01c6:	42aa      	cmp	r2, r5
 80a01c8:	d21f      	bcs.n	80a020a <_ZN8RCSwitch16receiveProtocol1Ej+0x82>

          if (RCSwitch::timings[i] > delay-delayTolerance && RCSwitch::timings[i] < delay+delayTolerance && RCSwitch::timings[i+1] > delay*3-delayTolerance && RCSwitch::timings[i+1] < delay*3+delayTolerance) {
 80a01ca:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
 80a01ce:	4561      	cmp	r1, ip
 80a01d0:	d909      	bls.n	80a01e6 <_ZN8RCSwitch16receiveProtocol1Ej+0x5e>
 80a01d2:	4281      	cmp	r1, r0
 80a01d4:	d207      	bcs.n	80a01e6 <_ZN8RCSwitch16receiveProtocol1Ej+0x5e>
 80a01d6:	f102 0801 	add.w	r8, r2, #1
 80a01da:	f859 8028 	ldr.w	r8, [r9, r8, lsl #2]
 80a01de:	45f0      	cmp	r8, lr
 80a01e0:	d901      	bls.n	80a01e6 <_ZN8RCSwitch16receiveProtocol1Ej+0x5e>
 80a01e2:	45b0      	cmp	r8, r6
 80a01e4:	d30b      	bcc.n	80a01fe <_ZN8RCSwitch16receiveProtocol1Ej+0x76>
            code = code << 1;
          } else if (RCSwitch::timings[i] > delay*3-delayTolerance && RCSwitch::timings[i] < delay*3+delayTolerance && RCSwitch::timings[i+1] > delay-delayTolerance && RCSwitch::timings[i+1] < delay+delayTolerance) {
 80a01e6:	4571      	cmp	r1, lr
 80a01e8:	d90b      	bls.n	80a0202 <_ZN8RCSwitch16receiveProtocol1Ej+0x7a>
 80a01ea:	42b1      	cmp	r1, r6
 80a01ec:	d209      	bcs.n	80a0202 <_ZN8RCSwitch16receiveProtocol1Ej+0x7a>
 80a01ee:	1c51      	adds	r1, r2, #1
 80a01f0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80a01f4:	458c      	cmp	ip, r1
 80a01f6:	d204      	bcs.n	80a0202 <_ZN8RCSwitch16receiveProtocol1Ej+0x7a>
 80a01f8:	4281      	cmp	r1, r0
 80a01fa:	d202      	bcs.n	80a0202 <_ZN8RCSwitch16receiveProtocol1Ej+0x7a>
            code+=1;
 80a01fc:	3301      	adds	r3, #1
            code = code << 1;
 80a01fe:	005b      	lsls	r3, r3, #1
 80a0200:	e001      	b.n	80a0206 <_ZN8RCSwitch16receiveProtocol1Ej+0x7e>
          } else {
            // Failed
            i = changeCount;
 80a0202:	462a      	mov	r2, r5
            code = 0;
 80a0204:	2300      	movs	r3, #0

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 31;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {
 80a0206:	3202      	adds	r2, #2
 80a0208:	e7dd      	b.n	80a01c6 <_ZN8RCSwitch16receiveProtocol1Ej+0x3e>
            i = changeCount;
            code = 0;
          }
      }
      code = code >> 1;
    if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
 80a020a:	2d06      	cmp	r5, #6
            // Failed
            i = changeCount;
            code = 0;
          }
      }
      code = code >> 1;
 80a020c:	ea4f 0053 	mov.w	r0, r3, lsr #1
    if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
 80a0210:	d909      	bls.n	80a0226 <_ZN8RCSwitch16receiveProtocol1Ej+0x9e>
      RCSwitch::nReceivedValue = code;
 80a0212:	4b0b      	ldr	r3, [pc, #44]	; (80a0240 <_ZN8RCSwitch16receiveProtocol1Ej+0xb8>)
      RCSwitch::nReceivedBitlength = changeCount / 2;
 80a0214:	4a0b      	ldr	r2, [pc, #44]	; (80a0244 <_ZN8RCSwitch16receiveProtocol1Ej+0xbc>)
            code = 0;
          }
      }
      code = code >> 1;
    if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
      RCSwitch::nReceivedValue = code;
 80a0216:	6018      	str	r0, [r3, #0]
      RCSwitch::nReceivedBitlength = changeCount / 2;
 80a0218:	086b      	lsrs	r3, r5, #1
 80a021a:	6013      	str	r3, [r2, #0]
      RCSwitch::nReceivedDelay = delay;
 80a021c:	4b0a      	ldr	r3, [pc, #40]	; (80a0248 <_ZN8RCSwitch16receiveProtocol1Ej+0xc0>)
      RCSwitch::nReceivedProtocol = 1;
 80a021e:	2201      	movs	r2, #1
      }
      code = code >> 1;
    if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
      RCSwitch::nReceivedValue = code;
      RCSwitch::nReceivedBitlength = changeCount / 2;
      RCSwitch::nReceivedDelay = delay;
 80a0220:	601c      	str	r4, [r3, #0]
      RCSwitch::nReceivedProtocol = 1;
 80a0222:	4b0a      	ldr	r3, [pc, #40]	; (80a024c <_ZN8RCSwitch16receiveProtocol1Ej+0xc4>)
 80a0224:	601a      	str	r2, [r3, #0]
    }else if (code != 0){
        return true;
    }


}
 80a0226:	3000      	adds	r0, #0
 80a0228:	bf18      	it	ne
 80a022a:	2001      	movne	r0, #1
 80a022c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0230:	47ae147b 	.word	0x47ae147b
 80a0234:	3f847ae1 	.word	0x3f847ae1
 80a0238:	2000017c 	.word	0x2000017c
 80a023c:	20000000 	.word	0x20000000
 80a0240:	20000174 	.word	0x20000174
 80a0244:	20000170 	.word	0x20000170
 80a0248:	20000290 	.word	0x20000290
 80a024c:	20000128 	.word	0x20000128

080a0250 <_ZN8RCSwitch16receiveProtocol2Ej>:

bool RCSwitch::receiveProtocol2(unsigned int changeCount){
 80a0250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 10;
 80a0254:	4f2a      	ldr	r7, [pc, #168]	; (80a0300 <_ZN8RCSwitch16receiveProtocol2Ej+0xb0>)
 80a0256:	230a      	movs	r3, #10
 80a0258:	683c      	ldr	r4, [r7, #0]
    }


}

bool RCSwitch::receiveProtocol2(unsigned int changeCount){
 80a025a:	4605      	mov	r5, r0

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 10;
 80a025c:	fbb4 f4f3 	udiv	r4, r4, r3
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;
 80a0260:	4b28      	ldr	r3, [pc, #160]	; (80a0304 <_ZN8RCSwitch16receiveProtocol2Ej+0xb4>)

      for (int i = 1; i<changeCount ; i=i+2) {

          if (RCSwitch::timings[i] > delay-delayTolerance && RCSwitch::timings[i] < delay+delayTolerance && RCSwitch::timings[i+1] > delay*2-delayTolerance && RCSwitch::timings[i+1] < delay*2+delayTolerance) {
 80a0262:	46b9      	mov	r9, r7

bool RCSwitch::receiveProtocol2(unsigned int changeCount){

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 10;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;
 80a0264:	6818      	ldr	r0, [r3, #0]
 80a0266:	4360      	muls	r0, r4
 80a0268:	f005 fa10 	bl	80a568c <__aeabi_ui2d>
 80a026c:	a322      	add	r3, pc, #136	; (adr r3, 80a02f8 <_ZN8RCSwitch16receiveProtocol2Ej+0xa8>)
 80a026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0272:	f005 fa81 	bl	80a5778 <__aeabi_dmul>
 80a0276:	f005 fc91 	bl	80a5b9c <__aeabi_d2uiz>

      for (int i = 1; i<changeCount ; i=i+2) {

          if (RCSwitch::timings[i] > delay-delayTolerance && RCSwitch::timings[i] < delay+delayTolerance && RCSwitch::timings[i+1] > delay*2-delayTolerance && RCSwitch::timings[i+1] < delay*2+delayTolerance) {
 80a027a:	0061      	lsls	r1, r4, #1
 80a027c:	ebc0 0e01 	rsb	lr, r0, r1
 80a0280:	4401      	add	r1, r0

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 10;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {
 80a0282:	2201      	movs	r2, #1

}

bool RCSwitch::receiveProtocol2(unsigned int changeCount){

      unsigned long code = 0;
 80a0284:	2300      	movs	r3, #0
      unsigned long delay = RCSwitch::timings[0] / 10;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {

          if (RCSwitch::timings[i] > delay-delayTolerance && RCSwitch::timings[i] < delay+delayTolerance && RCSwitch::timings[i+1] > delay*2-delayTolerance && RCSwitch::timings[i+1] < delay*2+delayTolerance) {
 80a0286:	1a20      	subs	r0, r4, r0
            code = code << 1;
          } else if (RCSwitch::timings[i] > delay*2-delayTolerance && RCSwitch::timings[i] < delay*2+delayTolerance && RCSwitch::timings[i+1] > delay-delayTolerance && RCSwitch::timings[i+1] < delay+delayTolerance) {
 80a0288:	ebc4 0c01 	rsb	ip, r4, r1

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 10;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {
 80a028c:	42aa      	cmp	r2, r5
 80a028e:	d21f      	bcs.n	80a02d0 <_ZN8RCSwitch16receiveProtocol2Ej+0x80>

          if (RCSwitch::timings[i] > delay-delayTolerance && RCSwitch::timings[i] < delay+delayTolerance && RCSwitch::timings[i+1] > delay*2-delayTolerance && RCSwitch::timings[i+1] < delay*2+delayTolerance) {
 80a0290:	f857 6022 	ldr.w	r6, [r7, r2, lsl #2]
 80a0294:	4286      	cmp	r6, r0
 80a0296:	d909      	bls.n	80a02ac <_ZN8RCSwitch16receiveProtocol2Ej+0x5c>
 80a0298:	4566      	cmp	r6, ip
 80a029a:	d207      	bcs.n	80a02ac <_ZN8RCSwitch16receiveProtocol2Ej+0x5c>
 80a029c:	f102 0801 	add.w	r8, r2, #1
 80a02a0:	f859 8028 	ldr.w	r8, [r9, r8, lsl #2]
 80a02a4:	45f0      	cmp	r8, lr
 80a02a6:	d901      	bls.n	80a02ac <_ZN8RCSwitch16receiveProtocol2Ej+0x5c>
 80a02a8:	4588      	cmp	r8, r1
 80a02aa:	d30b      	bcc.n	80a02c4 <_ZN8RCSwitch16receiveProtocol2Ej+0x74>
            code = code << 1;
          } else if (RCSwitch::timings[i] > delay*2-delayTolerance && RCSwitch::timings[i] < delay*2+delayTolerance && RCSwitch::timings[i+1] > delay-delayTolerance && RCSwitch::timings[i+1] < delay+delayTolerance) {
 80a02ac:	4576      	cmp	r6, lr
 80a02ae:	d90b      	bls.n	80a02c8 <_ZN8RCSwitch16receiveProtocol2Ej+0x78>
 80a02b0:	428e      	cmp	r6, r1
 80a02b2:	d209      	bcs.n	80a02c8 <_ZN8RCSwitch16receiveProtocol2Ej+0x78>
 80a02b4:	1c56      	adds	r6, r2, #1
 80a02b6:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80a02ba:	42b0      	cmp	r0, r6
 80a02bc:	d204      	bcs.n	80a02c8 <_ZN8RCSwitch16receiveProtocol2Ej+0x78>
 80a02be:	4566      	cmp	r6, ip
 80a02c0:	d202      	bcs.n	80a02c8 <_ZN8RCSwitch16receiveProtocol2Ej+0x78>
            code+=1;
 80a02c2:	3301      	adds	r3, #1
            code = code << 1;
 80a02c4:	005b      	lsls	r3, r3, #1
 80a02c6:	e001      	b.n	80a02cc <_ZN8RCSwitch16receiveProtocol2Ej+0x7c>
          } else {
            // Failed
            i = changeCount;
 80a02c8:	462a      	mov	r2, r5
            code = 0;
 80a02ca:	2300      	movs	r3, #0

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / 10;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {
 80a02cc:	3202      	adds	r2, #2
 80a02ce:	e7dd      	b.n	80a028c <_ZN8RCSwitch16receiveProtocol2Ej+0x3c>
            i = changeCount;
            code = 0;
          }
      }
      code = code >> 1;
    if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
 80a02d0:	2d06      	cmp	r5, #6
            // Failed
            i = changeCount;
            code = 0;
          }
      }
      code = code >> 1;
 80a02d2:	ea4f 0053 	mov.w	r0, r3, lsr #1
    if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
 80a02d6:	d909      	bls.n	80a02ec <_ZN8RCSwitch16receiveProtocol2Ej+0x9c>
      RCSwitch::nReceivedValue = code;
 80a02d8:	4b0b      	ldr	r3, [pc, #44]	; (80a0308 <_ZN8RCSwitch16receiveProtocol2Ej+0xb8>)
      RCSwitch::nReceivedBitlength = changeCount / 2;
 80a02da:	086d      	lsrs	r5, r5, #1
            code = 0;
          }
      }
      code = code >> 1;
    if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
      RCSwitch::nReceivedValue = code;
 80a02dc:	6018      	str	r0, [r3, #0]
      RCSwitch::nReceivedBitlength = changeCount / 2;
 80a02de:	4b0b      	ldr	r3, [pc, #44]	; (80a030c <_ZN8RCSwitch16receiveProtocol2Ej+0xbc>)
      RCSwitch::nReceivedDelay = delay;
      RCSwitch::nReceivedProtocol = 2;
 80a02e0:	2202      	movs	r2, #2
          }
      }
      code = code >> 1;
    if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
      RCSwitch::nReceivedValue = code;
      RCSwitch::nReceivedBitlength = changeCount / 2;
 80a02e2:	601d      	str	r5, [r3, #0]
      RCSwitch::nReceivedDelay = delay;
 80a02e4:	4b0a      	ldr	r3, [pc, #40]	; (80a0310 <_ZN8RCSwitch16receiveProtocol2Ej+0xc0>)
 80a02e6:	601c      	str	r4, [r3, #0]
      RCSwitch::nReceivedProtocol = 2;
 80a02e8:	4b0a      	ldr	r3, [pc, #40]	; (80a0314 <_ZN8RCSwitch16receiveProtocol2Ej+0xc4>)
 80a02ea:	601a      	str	r2, [r3, #0]
        return false;
    }else if (code != 0){
        return true;
    }

}
 80a02ec:	3000      	adds	r0, #0
 80a02ee:	bf18      	it	ne
 80a02f0:	2001      	movne	r0, #1
 80a02f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a02f6:	bf00      	nop
 80a02f8:	47ae147b 	.word	0x47ae147b
 80a02fc:	3f847ae1 	.word	0x3f847ae1
 80a0300:	2000017c 	.word	0x2000017c
 80a0304:	20000000 	.word	0x20000000
 80a0308:	20000174 	.word	0x20000174
 80a030c:	20000170 	.word	0x20000170
 80a0310:	20000290 	.word	0x20000290
 80a0314:	20000128 	.word	0x20000128

080a0318 <_ZN8RCSwitch16receiveProtocol3Ej>:

/** Protocol 3 is used by BL35P02.
 *
 */
bool RCSwitch::receiveProtocol3(unsigned int changeCount){
 80a0318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / PROTOCOL3_SYNC_FACTOR;
 80a031c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80a0404 <_ZN8RCSwitch16receiveProtocol3Ej+0xec>
 80a0320:	2347      	movs	r3, #71	; 0x47
 80a0322:	f8d8 4000 	ldr.w	r4, [r8]
}

/** Protocol 3 is used by BL35P02.
 *
 */
bool RCSwitch::receiveProtocol3(unsigned int changeCount){
 80a0326:	4605      	mov	r5, r0

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / PROTOCOL3_SYNC_FACTOR;
 80a0328:	fbb4 f4f3 	udiv	r4, r4, r3
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;
 80a032c:	4b30      	ldr	r3, [pc, #192]	; (80a03f0 <_ZN8RCSwitch16receiveProtocol3Ej+0xd8>)
}

/** Protocol 3 is used by BL35P02.
 *
 */
bool RCSwitch::receiveProtocol3(unsigned int changeCount){
 80a032e:	b085      	sub	sp, #20

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / PROTOCOL3_SYNC_FACTOR;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;
 80a0330:	6818      	ldr	r0, [r3, #0]
            && RCSwitch::timings[i+1] > delay*PROTOCOL3_0_LOW_CYCLES  - delayTolerance
            && RCSwitch::timings[i+1] < delay*PROTOCOL3_0_LOW_CYCLES  + delayTolerance) {
            code = code << 1;
          } else if (RCSwitch::timings[i]   > delay*PROTOCOL3_1_HIGH_CYCLES - delayTolerance
                  && RCSwitch::timings[i]   < delay*PROTOCOL3_1_HIGH_CYCLES + delayTolerance
                  && RCSwitch::timings[i+1] > delay*PROTOCOL3_1_LOW_CYCLES  - delayTolerance
 80a0332:	2606      	movs	r6, #6
 */
bool RCSwitch::receiveProtocol3(unsigned int changeCount){

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / PROTOCOL3_SYNC_FACTOR;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;
 80a0334:	4360      	muls	r0, r4
 80a0336:	f005 f9a9 	bl	80a568c <__aeabi_ui2d>
 80a033a:	a32b      	add	r3, pc, #172	; (adr r3, 80a03e8 <_ZN8RCSwitch16receiveProtocol3Ej+0xd0>)
 80a033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0340:	f005 fa1a 	bl	80a5778 <__aeabi_dmul>
 80a0344:	f005 fc2a 	bl	80a5b9c <__aeabi_d2uiz>

      for (int i = 1; i<changeCount ; i=i+2) {

          if  (RCSwitch::timings[i]   > delay*PROTOCOL3_0_HIGH_CYCLES - delayTolerance
 80a0348:	46c6      	mov	lr, r8
            && RCSwitch::timings[i]   < delay*PROTOCOL3_0_HIGH_CYCLES + delayTolerance
            && RCSwitch::timings[i+1] > delay*PROTOCOL3_0_LOW_CYCLES  - delayTolerance
 80a034a:	210b      	movs	r1, #11
 80a034c:	4361      	muls	r1, r4
            && RCSwitch::timings[i+1] < delay*PROTOCOL3_0_LOW_CYCLES  + delayTolerance) {
            code = code << 1;
          } else if (RCSwitch::timings[i]   > delay*PROTOCOL3_1_HIGH_CYCLES - delayTolerance
                  && RCSwitch::timings[i]   < delay*PROTOCOL3_1_HIGH_CYCLES + delayTolerance
                  && RCSwitch::timings[i+1] > delay*PROTOCOL3_1_LOW_CYCLES  - delayTolerance
 80a034e:	4366      	muls	r6, r4
      unsigned long delay = RCSwitch::timings[0] / PROTOCOL3_SYNC_FACTOR;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {

          if  (RCSwitch::timings[i]   > delay*PROTOCOL3_0_HIGH_CYCLES - delayTolerance
 80a0350:	00a3      	lsls	r3, r4, #2
 80a0352:	1a1a      	subs	r2, r3, r0
            && RCSwitch::timings[i]   < delay*PROTOCOL3_0_HIGH_CYCLES + delayTolerance
 80a0354:	18c3      	adds	r3, r0, r3
            && RCSwitch::timings[i+1] > delay*PROTOCOL3_0_LOW_CYCLES  - delayTolerance
            && RCSwitch::timings[i+1] < delay*PROTOCOL3_0_LOW_CYCLES  + delayTolerance) {
            code = code << 1;
          } else if (RCSwitch::timings[i]   > delay*PROTOCOL3_1_HIGH_CYCLES - delayTolerance
 80a0356:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {

          if  (RCSwitch::timings[i]   > delay*PROTOCOL3_0_HIGH_CYCLES - delayTolerance
            && RCSwitch::timings[i]   < delay*PROTOCOL3_0_HIGH_CYCLES + delayTolerance
 80a035a:	9302      	str	r3, [sp, #8]
            && RCSwitch::timings[i+1] > delay*PROTOCOL3_0_LOW_CYCLES  - delayTolerance
            && RCSwitch::timings[i+1] < delay*PROTOCOL3_0_LOW_CYCLES  + delayTolerance) {
 80a035c:	180b      	adds	r3, r1, r0
      unsigned long delay = RCSwitch::timings[0] / PROTOCOL3_SYNC_FACTOR;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {

          if  (RCSwitch::timings[i]   > delay*PROTOCOL3_0_HIGH_CYCLES - delayTolerance
 80a035e:	9201      	str	r2, [sp, #4]
            && RCSwitch::timings[i]   < delay*PROTOCOL3_0_HIGH_CYCLES + delayTolerance
            && RCSwitch::timings[i+1] > delay*PROTOCOL3_0_LOW_CYCLES  - delayTolerance
            && RCSwitch::timings[i+1] < delay*PROTOCOL3_0_LOW_CYCLES  + delayTolerance) {
 80a0360:	9303      	str	r3, [sp, #12]
            code = code << 1;
          } else if (RCSwitch::timings[i]   > delay*PROTOCOL3_1_HIGH_CYCLES - delayTolerance
 80a0362:	ebc0 0a07 	rsb	sl, r0, r7
                  && RCSwitch::timings[i]   < delay*PROTOCOL3_1_HIGH_CYCLES + delayTolerance
                  && RCSwitch::timings[i+1] > delay*PROTOCOL3_1_LOW_CYCLES  - delayTolerance
 80a0366:	ebc0 0b06 	rsb	fp, r0, r6

      for (int i = 1; i<changeCount ; i=i+2) {

          if  (RCSwitch::timings[i]   > delay*PROTOCOL3_0_HIGH_CYCLES - delayTolerance
            && RCSwitch::timings[i]   < delay*PROTOCOL3_0_HIGH_CYCLES + delayTolerance
            && RCSwitch::timings[i+1] > delay*PROTOCOL3_0_LOW_CYCLES  - delayTolerance
 80a036a:	ebc0 0901 	rsb	r9, r0, r1
            && RCSwitch::timings[i+1] < delay*PROTOCOL3_0_LOW_CYCLES  + delayTolerance) {
            code = code << 1;
          } else if (RCSwitch::timings[i]   > delay*PROTOCOL3_1_HIGH_CYCLES - delayTolerance
                  && RCSwitch::timings[i]   < delay*PROTOCOL3_1_HIGH_CYCLES + delayTolerance
 80a036e:	4407      	add	r7, r0
                  && RCSwitch::timings[i+1] > delay*PROTOCOL3_1_LOW_CYCLES  - delayTolerance
                  && RCSwitch::timings[i+1] < delay*PROTOCOL3_1_LOW_CYCLES  + delayTolerance) {
 80a0370:	4406      	add	r6, r0

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / PROTOCOL3_SYNC_FACTOR;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {
 80a0372:	2201      	movs	r2, #1
/** Protocol 3 is used by BL35P02.
 *
 */
bool RCSwitch::receiveProtocol3(unsigned int changeCount){

      unsigned long code = 0;
 80a0374:	2300      	movs	r3, #0
      unsigned long delay = RCSwitch::timings[0] / PROTOCOL3_SYNC_FACTOR;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {
 80a0376:	42aa      	cmp	r2, r5
 80a0378:	d222      	bcs.n	80a03c0 <_ZN8RCSwitch16receiveProtocol3Ej+0xa8>

          if  (RCSwitch::timings[i]   > delay*PROTOCOL3_0_HIGH_CYCLES - delayTolerance
 80a037a:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80a037e:	9901      	ldr	r1, [sp, #4]
 80a0380:	4288      	cmp	r0, r1
 80a0382:	d90b      	bls.n	80a039c <_ZN8RCSwitch16receiveProtocol3Ej+0x84>
            && RCSwitch::timings[i]   < delay*PROTOCOL3_0_HIGH_CYCLES + delayTolerance
 80a0384:	9902      	ldr	r1, [sp, #8]
 80a0386:	4288      	cmp	r0, r1
 80a0388:	d208      	bcs.n	80a039c <_ZN8RCSwitch16receiveProtocol3Ej+0x84>
            && RCSwitch::timings[i+1] > delay*PROTOCOL3_0_LOW_CYCLES  - delayTolerance
 80a038a:	f102 0c01 	add.w	ip, r2, #1
 80a038e:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 80a0392:	45cc      	cmp	ip, r9
 80a0394:	d902      	bls.n	80a039c <_ZN8RCSwitch16receiveProtocol3Ej+0x84>
            && RCSwitch::timings[i+1] < delay*PROTOCOL3_0_LOW_CYCLES  + delayTolerance) {
 80a0396:	9903      	ldr	r1, [sp, #12]
 80a0398:	458c      	cmp	ip, r1
 80a039a:	d30b      	bcc.n	80a03b4 <_ZN8RCSwitch16receiveProtocol3Ej+0x9c>
            code = code << 1;
          } else if (RCSwitch::timings[i]   > delay*PROTOCOL3_1_HIGH_CYCLES - delayTolerance
 80a039c:	4550      	cmp	r0, sl
 80a039e:	d90b      	bls.n	80a03b8 <_ZN8RCSwitch16receiveProtocol3Ej+0xa0>
                  && RCSwitch::timings[i]   < delay*PROTOCOL3_1_HIGH_CYCLES + delayTolerance
 80a03a0:	42b8      	cmp	r0, r7
 80a03a2:	d209      	bcs.n	80a03b8 <_ZN8RCSwitch16receiveProtocol3Ej+0xa0>
                  && RCSwitch::timings[i+1] > delay*PROTOCOL3_1_LOW_CYCLES  - delayTolerance
 80a03a4:	1c50      	adds	r0, r2, #1
 80a03a6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80a03aa:	4558      	cmp	r0, fp
 80a03ac:	d904      	bls.n	80a03b8 <_ZN8RCSwitch16receiveProtocol3Ej+0xa0>
                  && RCSwitch::timings[i+1] < delay*PROTOCOL3_1_LOW_CYCLES  + delayTolerance) {
 80a03ae:	42b0      	cmp	r0, r6
 80a03b0:	d202      	bcs.n	80a03b8 <_ZN8RCSwitch16receiveProtocol3Ej+0xa0>
            code+=1;
 80a03b2:	3301      	adds	r3, #1
            code = code << 1;
 80a03b4:	005b      	lsls	r3, r3, #1
 80a03b6:	e001      	b.n	80a03bc <_ZN8RCSwitch16receiveProtocol3Ej+0xa4>
          } else {
            // Failed
            i = changeCount;
 80a03b8:	462a      	mov	r2, r5
            code = 0;
 80a03ba:	2300      	movs	r3, #0

      unsigned long code = 0;
      unsigned long delay = RCSwitch::timings[0] / PROTOCOL3_SYNC_FACTOR;
      unsigned long delayTolerance = delay * RCSwitch::nReceiveTolerance * 0.01;

      for (int i = 1; i<changeCount ; i=i+2) {
 80a03bc:	3202      	adds	r2, #2
 80a03be:	e7da      	b.n	80a0376 <_ZN8RCSwitch16receiveProtocol3Ej+0x5e>
            i = changeCount;
            code = 0;
          }
      }
      code = code >> 1;
      if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
 80a03c0:	2d06      	cmp	r5, #6
            // Failed
            i = changeCount;
            code = 0;
          }
      }
      code = code >> 1;
 80a03c2:	ea4f 0053 	mov.w	r0, r3, lsr #1
      if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
 80a03c6:	d909      	bls.n	80a03dc <_ZN8RCSwitch16receiveProtocol3Ej+0xc4>
        RCSwitch::nReceivedValue = code;
 80a03c8:	4b0a      	ldr	r3, [pc, #40]	; (80a03f4 <_ZN8RCSwitch16receiveProtocol3Ej+0xdc>)
        RCSwitch::nReceivedBitlength = changeCount / 2;
 80a03ca:	086d      	lsrs	r5, r5, #1
            code = 0;
          }
      }
      code = code >> 1;
      if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
        RCSwitch::nReceivedValue = code;
 80a03cc:	6018      	str	r0, [r3, #0]
        RCSwitch::nReceivedBitlength = changeCount / 2;
 80a03ce:	4b0a      	ldr	r3, [pc, #40]	; (80a03f8 <_ZN8RCSwitch16receiveProtocol3Ej+0xe0>)
        RCSwitch::nReceivedDelay = delay;
        RCSwitch::nReceivedProtocol = 3;
 80a03d0:	2203      	movs	r2, #3
          }
      }
      code = code >> 1;
      if (changeCount > 6) {    // ignore < 4bit values as there are no devices sending 4bit values => noise
        RCSwitch::nReceivedValue = code;
        RCSwitch::nReceivedBitlength = changeCount / 2;
 80a03d2:	601d      	str	r5, [r3, #0]
        RCSwitch::nReceivedDelay = delay;
 80a03d4:	4b09      	ldr	r3, [pc, #36]	; (80a03fc <_ZN8RCSwitch16receiveProtocol3Ej+0xe4>)
 80a03d6:	601c      	str	r4, [r3, #0]
        RCSwitch::nReceivedProtocol = 3;
 80a03d8:	4b09      	ldr	r3, [pc, #36]	; (80a0400 <_ZN8RCSwitch16receiveProtocol3Ej+0xe8>)
 80a03da:	601a      	str	r2, [r3, #0]
      if (code == 0){
        return false;
      }else if (code != 0){
        return true;
      }
}
 80a03dc:	3000      	adds	r0, #0
 80a03de:	bf18      	it	ne
 80a03e0:	2001      	movne	r0, #1
 80a03e2:	b005      	add	sp, #20
 80a03e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a03e8:	47ae147b 	.word	0x47ae147b
 80a03ec:	3f847ae1 	.word	0x3f847ae1
 80a03f0:	20000000 	.word	0x20000000
 80a03f4:	20000174 	.word	0x20000174
 80a03f8:	20000170 	.word	0x20000170
 80a03fc:	20000290 	.word	0x20000290
 80a0400:	20000128 	.word	0x20000128
 80a0404:	2000017c 	.word	0x2000017c

080a0408 <_ZN8RCSwitch15handleInterruptEv>:

void RCSwitch::handleInterrupt() {
 80a0408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a040c:	f002 fed4 	bl	80a31b8 <HAL_Timer_Get_Micro_Seconds>
  static unsigned int duration;
  static unsigned int changeCount;
  static unsigned long lastTime;
  static unsigned int repeatCount;

  unsigned long time = micros() * 0.983; // Spark Core micros() calibration
 80a0410:	f005 f93c 	bl	80a568c <__aeabi_ui2d>
 80a0414:	a324      	add	r3, pc, #144	; (adr r3, 80a04a8 <_ZN8RCSwitch15handleInterruptEv+0xa0>)
 80a0416:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a041a:	f005 f9ad 	bl	80a5778 <__aeabi_dmul>
 80a041e:	f005 fbbd 	bl	80a5b9c <__aeabi_d2uiz>
  duration = time - lastTime;
 80a0422:	4f23      	ldr	r7, [pc, #140]	; (80a04b0 <_ZN8RCSwitch15handleInterruptEv+0xa8>)
 80a0424:	4b23      	ldr	r3, [pc, #140]	; (80a04b4 <_ZN8RCSwitch15handleInterruptEv+0xac>)
 80a0426:	683c      	ldr	r4, [r7, #0]
  static unsigned int duration;
  static unsigned int changeCount;
  static unsigned long lastTime;
  static unsigned int repeatCount;

  unsigned long time = micros() * 0.983; // Spark Core micros() calibration
 80a0428:	4680      	mov	r8, r0
  duration = time - lastTime;
 80a042a:	1b04      	subs	r4, r0, r4
 80a042c:	601c      	str	r4, [r3, #0]

  if (duration > 5000 && duration > RCSwitch::timings[0] - 200 && duration < RCSwitch::timings[0] + 200) {
 80a042e:	f241 3388 	movw	r3, #5000	; 0x1388
 80a0432:	429c      	cmp	r4, r3
 80a0434:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80a04c0 <_ZN8RCSwitch15handleInterruptEv+0xb8>
 80a0438:	4d1f      	ldr	r5, [pc, #124]	; (80a04b8 <_ZN8RCSwitch15handleInterruptEv+0xb0>)
 80a043a:	d922      	bls.n	80a0482 <_ZN8RCSwitch15handleInterruptEv+0x7a>
 80a043c:	f8d9 3000 	ldr.w	r3, [r9]
 80a0440:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 80a0444:	4294      	cmp	r4, r2
 80a0446:	d91a      	bls.n	80a047e <_ZN8RCSwitch15handleInterruptEv+0x76>
 80a0448:	33c8      	adds	r3, #200	; 0xc8
 80a044a:	429c      	cmp	r4, r3
 80a044c:	d217      	bcs.n	80a047e <_ZN8RCSwitch15handleInterruptEv+0x76>
    repeatCount++;
 80a044e:	4b1b      	ldr	r3, [pc, #108]	; (80a04bc <_ZN8RCSwitch15handleInterruptEv+0xb4>)
    changeCount--;
 80a0450:	682e      	ldr	r6, [r5, #0]

  unsigned long time = micros() * 0.983; // Spark Core micros() calibration
  duration = time - lastTime;

  if (duration > 5000 && duration > RCSwitch::timings[0] - 200 && duration < RCSwitch::timings[0] + 200) {
    repeatCount++;
 80a0452:	681a      	ldr	r2, [r3, #0]
    changeCount--;
 80a0454:	3e01      	subs	r6, #1

  unsigned long time = micros() * 0.983; // Spark Core micros() calibration
  duration = time - lastTime;

  if (duration > 5000 && duration > RCSwitch::timings[0] - 200 && duration < RCSwitch::timings[0] + 200) {
    repeatCount++;
 80a0456:	3201      	adds	r2, #1
    changeCount--;
    if (repeatCount == 2) {
 80a0458:	2a02      	cmp	r2, #2

  unsigned long time = micros() * 0.983; // Spark Core micros() calibration
  duration = time - lastTime;

  if (duration > 5000 && duration > RCSwitch::timings[0] - 200 && duration < RCSwitch::timings[0] + 200) {
    repeatCount++;
 80a045a:	601a      	str	r2, [r3, #0]
    changeCount--;
 80a045c:	602e      	str	r6, [r5, #0]
 80a045e:	469a      	mov	sl, r3
    if (repeatCount == 2) {
 80a0460:	d10d      	bne.n	80a047e <_ZN8RCSwitch15handleInterruptEv+0x76>
      if (receiveProtocol1(changeCount) == false){
 80a0462:	4630      	mov	r0, r6
 80a0464:	f7ff fe90 	bl	80a0188 <_ZN8RCSwitch16receiveProtocol1Ej>
 80a0468:	b930      	cbnz	r0, 80a0478 <_ZN8RCSwitch15handleInterruptEv+0x70>
        if (receiveProtocol2(changeCount) == false){
 80a046a:	4630      	mov	r0, r6
 80a046c:	f7ff fef0 	bl	80a0250 <_ZN8RCSwitch16receiveProtocol2Ej>
 80a0470:	b910      	cbnz	r0, 80a0478 <_ZN8RCSwitch15handleInterruptEv+0x70>
          if (receiveProtocol3(changeCount) == false){
 80a0472:	4630      	mov	r0, r6
 80a0474:	f7ff ff50 	bl	80a0318 <_ZN8RCSwitch16receiveProtocol3Ej>
            //failed
          }
        }
      }
      repeatCount = 0;
 80a0478:	2300      	movs	r3, #0
 80a047a:	f8ca 3000 	str.w	r3, [sl]
    }
    changeCount = 0;
 80a047e:	2300      	movs	r3, #0
 80a0480:	602b      	str	r3, [r5, #0]
  } else if (duration > 5000) {
    changeCount = 0;
  }

  if (changeCount >= RCSWITCH_MAX_CHANGES) {
 80a0482:	682b      	ldr	r3, [r5, #0]
 80a0484:	2b42      	cmp	r3, #66	; 0x42
 80a0486:	d904      	bls.n	80a0492 <_ZN8RCSwitch15handleInterruptEv+0x8a>
    changeCount = 0;
 80a0488:	4a0b      	ldr	r2, [pc, #44]	; (80a04b8 <_ZN8RCSwitch15handleInterruptEv+0xb0>)
 80a048a:	2300      	movs	r3, #0
 80a048c:	6013      	str	r3, [r2, #0]
    repeatCount = 0;
 80a048e:	4a0b      	ldr	r2, [pc, #44]	; (80a04bc <_ZN8RCSwitch15handleInterruptEv+0xb4>)
 80a0490:	6013      	str	r3, [r2, #0]
  }
  RCSwitch::timings[changeCount++] = duration;
 80a0492:	682b      	ldr	r3, [r5, #0]
  lastTime = time;
 80a0494:	f8c7 8000 	str.w	r8, [r7]

  if (changeCount >= RCSWITCH_MAX_CHANGES) {
    changeCount = 0;
    repeatCount = 0;
  }
  RCSwitch::timings[changeCount++] = duration;
 80a0498:	1c5a      	adds	r2, r3, #1
 80a049a:	602a      	str	r2, [r5, #0]
 80a049c:	f849 4023 	str.w	r4, [r9, r3, lsl #2]
  lastTime = time;
 80a04a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a04a4:	f3af 8000 	nop.w
 80a04a8:	6a7ef9db 	.word	0x6a7ef9db
 80a04ac:	3fef74bc 	.word	0x3fef74bc
 80a04b0:	2000028c 	.word	0x2000028c
 80a04b4:	20000288 	.word	0x20000288
 80a04b8:	2000016c 	.word	0x2000016c
 80a04bc:	20000178 	.word	0x20000178
 80a04c0:	2000017c 	.word	0x2000017c

080a04c4 <_ZN8RCSwitch16dec2binWcharfillEmjc>:
  */
char* RCSwitch::dec2binWzerofill(unsigned long Dec, unsigned int bitLength){
    return dec2binWcharfill(Dec, bitLength, '0');
}

char* RCSwitch::dec2binWcharfill(unsigned long Dec, unsigned int bitLength, char fill){
 80a04c4:	b570      	push	{r4, r5, r6, lr}
 80a04c6:	4e11      	ldr	r6, [pc, #68]	; (80a050c <_ZN8RCSwitch16dec2binWcharfillEmjc+0x48>)
  static char bin[64];
  unsigned int i=0;
 80a04c8:	2000      	movs	r0, #0
 80a04ca:	4c10      	ldr	r4, [pc, #64]	; (80a050c <_ZN8RCSwitch16dec2binWcharfillEmjc+0x48>)

  while (Dec > 0) {
 80a04cc:	b909      	cbnz	r1, 80a04d2 <_ZN8RCSwitch16dec2binWcharfillEmjc+0xe>
    bin[32+i++] = ((Dec & 1) > 0) ? '1' : fill;
    Dec = Dec >> 1;
  }

  for (unsigned int j = 0; j< bitLength; j++) {
    if (j >= bitLength - i) {
 80a04ce:	1a10      	subs	r0, r2, r0
 80a04d0:	e00b      	b.n	80a04ea <_ZN8RCSwitch16dec2binWcharfillEmjc+0x26>
char* RCSwitch::dec2binWcharfill(unsigned long Dec, unsigned int bitLength, char fill){
  static char bin[64];
  unsigned int i=0;

  while (Dec > 0) {
    bin[32+i++] = ((Dec & 1) > 0) ? '1' : fill;
 80a04d2:	f011 0f01 	tst.w	r1, #1
 80a04d6:	bf08      	it	eq
 80a04d8:	461d      	moveq	r5, r3
 80a04da:	f100 0001 	add.w	r0, r0, #1
 80a04de:	bf18      	it	ne
 80a04e0:	2531      	movne	r5, #49	; 0x31
 80a04e2:	1834      	adds	r4, r6, r0
 80a04e4:	77e5      	strb	r5, [r4, #31]
    Dec = Dec >> 1;
 80a04e6:	0849      	lsrs	r1, r1, #1

char* RCSwitch::dec2binWcharfill(unsigned long Dec, unsigned int bitLength, char fill){
  static char bin[64];
  unsigned int i=0;

  while (Dec > 0) {
 80a04e8:	e7ef      	b.n	80a04ca <_ZN8RCSwitch16dec2binWcharfillEmjc+0x6>
    bin[32+i++] = ((Dec & 1) > 0) ? '1' : fill;
    Dec = Dec >> 1;
  }

  for (unsigned int j = 0; j< bitLength; j++) {
 80a04ea:	4291      	cmp	r1, r2
 80a04ec:	d009      	beq.n	80a0502 <_ZN8RCSwitch16dec2binWcharfillEmjc+0x3e>
    if (j >= bitLength - i) {
 80a04ee:	4281      	cmp	r1, r0
      bin[j] = bin[ 31 + i - (j - (bitLength - i)) ];
 80a04f0:	bf23      	ittte	cs
 80a04f2:	1a55      	subcs	r5, r2, r1
 80a04f4:	192d      	addcs	r5, r5, r4
 80a04f6:	7fed      	ldrbcs	r5, [r5, #31]
    }else {
      bin[j] = fill;
 80a04f8:	5463      	strbcc	r3, [r4, r1]
    Dec = Dec >> 1;
  }

  for (unsigned int j = 0; j< bitLength; j++) {
    if (j >= bitLength - i) {
      bin[j] = bin[ 31 + i - (j - (bitLength - i)) ];
 80a04fa:	bf28      	it	cs
 80a04fc:	5465      	strbcs	r5, [r4, r1]
  while (Dec > 0) {
    bin[32+i++] = ((Dec & 1) > 0) ? '1' : fill;
    Dec = Dec >> 1;
  }

  for (unsigned int j = 0; j< bitLength; j++) {
 80a04fe:	3101      	adds	r1, #1
 80a0500:	e7f3      	b.n	80a04ea <_ZN8RCSwitch16dec2binWcharfillEmjc+0x26>
      bin[j] = bin[ 31 + i - (j - (bitLength - i)) ];
    }else {
      bin[j] = fill;
    }
  }
  bin[bitLength] = '\0';
 80a0502:	2300      	movs	r3, #0
 80a0504:	5463      	strb	r3, [r4, r1]

  return bin;
}
 80a0506:	4801      	ldr	r0, [pc, #4]	; (80a050c <_ZN8RCSwitch16dec2binWcharfillEmjc+0x48>)
 80a0508:	bd70      	pop	{r4, r5, r6, pc}
 80a050a:	bf00      	nop
 80a050c:	2000012c 	.word	0x2000012c

080a0510 <_ZN8RCSwitch16dec2binWzerofillEmj>:

/**
  * Turns a decimal value to its binary representation
  */
char* RCSwitch::dec2binWzerofill(unsigned long Dec, unsigned int bitLength){
    return dec2binWcharfill(Dec, bitLength, '0');
 80a0510:	2330      	movs	r3, #48	; 0x30
 80a0512:	f7ff bfd7 	b.w	80a04c4 <_ZN8RCSwitch16dec2binWcharfillEmjc>

080a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0516:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0518:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a051a:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a051c:	b17c      	cbz	r4, 80a053e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a051e:	6863      	ldr	r3, [r4, #4]
 80a0520:	3b01      	subs	r3, #1
 80a0522:	6063      	str	r3, [r4, #4]
 80a0524:	b95b      	cbnz	r3, 80a053e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0526:	6823      	ldr	r3, [r4, #0]
 80a0528:	4620      	mov	r0, r4
 80a052a:	689b      	ldr	r3, [r3, #8]
 80a052c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a052e:	68a3      	ldr	r3, [r4, #8]
 80a0530:	3b01      	subs	r3, #1
 80a0532:	60a3      	str	r3, [r4, #8]
 80a0534:	b91b      	cbnz	r3, 80a053e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0536:	6823      	ldr	r3, [r4, #0]
 80a0538:	4620      	mov	r0, r4
 80a053a:	68db      	ldr	r3, [r3, #12]
 80a053c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a053e:	4628      	mov	r0, r5
 80a0540:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0544 <_Z15WriteToDatabasePcS_>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option)
{
 80a0544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0548:	b089      	sub	sp, #36	; 0x24
 80a054a:	460d      	mov	r5, r1
 80a054c:	4606      	mov	r6, r0
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s\"}", \
 80a054e:	f003 fddb 	bl	80a4108 <_ZN9TimeClass4hourEv>
 80a0552:	4607      	mov	r7, r0
 80a0554:	f003 fde2 	bl	80a411c <_ZN9TimeClass6minuteEv>
 80a0558:	4680      	mov	r8, r0
 80a055a:	f003 fde9 	bl	80a4130 <_ZN9TimeClass6secondEv>
 80a055e:	4681      	mov	r9, r0
 80a0560:	f003 fdf0 	bl	80a4144 <_ZN9TimeClass3dayEv>
 80a0564:	4682      	mov	sl, r0
 80a0566:	f003 fdf7 	bl	80a4158 <_ZN9TimeClass5monthEv>
 80a056a:	4683      	mov	fp, r0
 80a056c:	f003 fdfc 	bl	80a4168 <_ZN9TimeClass4yearEv>
                    status,Time.hour(),Time.minute(),Time.second(),Time.day(),Time.month(),Time.year(),option);
 80a0570:	4c11      	ldr	r4, [pc, #68]	; (80a05b8 <_Z15WriteToDatabasePcS_+0x74>)
 80a0572:	463b      	mov	r3, r7
 80a0574:	4632      	mov	r2, r6
 80a0576:	9004      	str	r0, [sp, #16]
 80a0578:	4910      	ldr	r1, [pc, #64]	; (80a05bc <_Z15WriteToDatabasePcS_+0x78>)
 80a057a:	9505      	str	r5, [sp, #20]
 80a057c:	e88d 0f00 	stmia.w	sp, {r8, r9, sl, fp}
 80a0580:	4620      	mov	r0, r4
 80a0582:	f003 f859 	bl	80a3638 <sprintf>

    Serial.printlnf(buffer);
 80a0586:	f004 fa85 	bl	80a4a94 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a058a:	4622      	mov	r2, r4
 80a058c:	2101      	movs	r1, #1
 80a058e:	f003 fcb3 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
 80a0592:	4b0b      	ldr	r3, [pc, #44]	; (80a05c0 <_Z15WriteToDatabasePcS_+0x7c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0594:	4622      	mov	r2, r4
 80a0596:	781b      	ldrb	r3, [r3, #0]
 80a0598:	490a      	ldr	r1, [pc, #40]	; (80a05c4 <_Z15WriteToDatabasePcS_+0x80>)
 80a059a:	f88d 3000 	strb.w	r3, [sp]
 80a059e:	a806      	add	r0, sp, #24
 80a05a0:	233c      	movs	r3, #60	; 0x3c
 80a05a2:	f004 f82f 	bl	80a4604 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a05a6:	a807      	add	r0, sp, #28
 80a05a8:	f7ff ffb5 	bl	80a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("wasserstand", buffer, PRIVATE);
    println(option);
 80a05ac:	4628      	mov	r0, r5
 80a05ae:	f001 faf1 	bl	80a1b94 <_Z7printlnPc>
}
 80a05b2:	b009      	add	sp, #36	; 0x24
 80a05b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a05b8:	20000424 	.word	0x20000424
 80a05bc:	080a6e24 	.word	0x080a6e24
 80a05c0:	20000294 	.word	0x20000294
 80a05c4:	080a6e85 	.word	0x080a6e85

080a05c8 <_Z15WriteToDatabasePcS_i>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option, int data)
{
 80a05c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a05cc:	b08d      	sub	sp, #52	; 0x34
 80a05ce:	460d      	mov	r5, r1
 80a05d0:	4616      	mov	r6, r2
 80a05d2:	4607      	mov	r7, r0
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s %2d\"}", \
 80a05d4:	f003 fd98 	bl	80a4108 <_ZN9TimeClass4hourEv>
 80a05d8:	4680      	mov	r8, r0
 80a05da:	f003 fd9f 	bl	80a411c <_ZN9TimeClass6minuteEv>
 80a05de:	4681      	mov	r9, r0
 80a05e0:	f003 fda6 	bl	80a4130 <_ZN9TimeClass6secondEv>
 80a05e4:	4682      	mov	sl, r0
 80a05e6:	f003 fdad 	bl	80a4144 <_ZN9TimeClass3dayEv>
 80a05ea:	4683      	mov	fp, r0
 80a05ec:	f003 fdb4 	bl	80a4158 <_ZN9TimeClass5monthEv>
 80a05f0:	9009      	str	r0, [sp, #36]	; 0x24
 80a05f2:	f003 fdb9 	bl	80a4168 <_ZN9TimeClass4yearEv>
                    status,Time.hour(),Time.minute(),Time.second(),Time.day(),Time.month(),Time.year(),option,data);
 80a05f6:	4c16      	ldr	r4, [pc, #88]	; (80a0650 <_Z15WriteToDatabasePcS_i+0x88>)
 80a05f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a05fa:	463a      	mov	r2, r7
 80a05fc:	9004      	str	r0, [sp, #16]
 80a05fe:	9303      	str	r3, [sp, #12]
 80a0600:	4914      	ldr	r1, [pc, #80]	; (80a0654 <_Z15WriteToDatabasePcS_i+0x8c>)
 80a0602:	4643      	mov	r3, r8
 80a0604:	9606      	str	r6, [sp, #24]
 80a0606:	9505      	str	r5, [sp, #20]
 80a0608:	e88d 0e00 	stmia.w	sp, {r9, sl, fp}
 80a060c:	4620      	mov	r0, r4
 80a060e:	f003 f813 	bl	80a3638 <sprintf>

    Serial.printlnf(buffer);
 80a0612:	f004 fa3f 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0616:	4622      	mov	r2, r4
 80a0618:	2101      	movs	r1, #1
 80a061a:	f003 fc6d 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
 80a061e:	4b0e      	ldr	r3, [pc, #56]	; (80a0658 <_Z15WriteToDatabasePcS_i+0x90>)
 80a0620:	4622      	mov	r2, r4
 80a0622:	781b      	ldrb	r3, [r3, #0]
 80a0624:	490d      	ldr	r1, [pc, #52]	; (80a065c <_Z15WriteToDatabasePcS_i+0x94>)
 80a0626:	f88d 3000 	strb.w	r3, [sp]
 80a062a:	a80a      	add	r0, sp, #40	; 0x28
 80a062c:	233c      	movs	r3, #60	; 0x3c
 80a062e:	f003 ffe9 	bl	80a4604 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0632:	a80b      	add	r0, sp, #44	; 0x2c
 80a0634:	f7ff ff6f 	bl	80a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("wasserstand", buffer, PRIVATE);

    sprintf(buffer," %s %d ", option, data);
 80a0638:	4633      	mov	r3, r6
 80a063a:	462a      	mov	r2, r5
 80a063c:	4908      	ldr	r1, [pc, #32]	; (80a0660 <_Z15WriteToDatabasePcS_i+0x98>)
 80a063e:	4620      	mov	r0, r4
 80a0640:	f002 fffa 	bl	80a3638 <sprintf>
    println(buffer);
 80a0644:	4620      	mov	r0, r4
 80a0646:	f001 faa5 	bl	80a1b94 <_Z7printlnPc>
}
 80a064a:	b00d      	add	sp, #52	; 0x34
 80a064c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0650:	20000424 	.word	0x20000424
 80a0654:	080a6e91 	.word	0x080a6e91
 80a0658:	20000294 	.word	0x20000294
 80a065c:	080a6e85 	.word	0x080a6e85
 80a0660:	080a6ef6 	.word	0x080a6ef6

080a0664 <_GLOBAL__sub_I__Z15WriteToDatabasePcS_>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0664:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <_GLOBAL__sub_I__Z15WriteToDatabasePcS_+0xc>)
 80a0666:	2201      	movs	r2, #1
 80a0668:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a066a:	f002 bd15 	b.w	80a3098 <HAL_Pin_Map>
 80a066e:	bf00      	nop
 80a0670:	20000294 	.word	0x20000294

080a0674 <_Z10rsl_outputmjjPjj>:
  }
  returnValue[pos2] = '\0';
  return returnValue;
}

void rsl_output(unsigned long decimal, unsigned int length, unsigned int delay, unsigned int* raw, unsigned int protocol) {
 80a0674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80a067c:	460d      	mov	r5, r1
 80a067e:	4691      	mov	r9, r2
 80a0680:	461f      	mov	r7, r3

  if (decimal == 0) {
 80a0682:	4682      	mov	sl, r0
 80a0684:	b928      	cbnz	r0, 80a0692 <_Z10rsl_outputmjjPjj+0x1e>
    Serial.print("Unknown encoding.");
 80a0686:	f004 fa05 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a068a:	4943      	ldr	r1, [pc, #268]	; (80a0798 <_Z10rsl_outputmjjPjj+0x124>)
 80a068c:	f003 fb9f 	bl	80a3dce <_ZN5Print5printEPKc>
 80a0690:	e061      	b.n	80a0756 <_Z10rsl_outputmjjPjj+0xe2>
  } else {
    char* b = mySwitch.dec2binWzerofill(decimal, length);
 80a0692:	460a      	mov	r2, r1
 80a0694:	4601      	mov	r1, r0
 80a0696:	4841      	ldr	r0, [pc, #260]	; (80a079c <_Z10rsl_outputmjjPjj+0x128>)
 80a0698:	f7ff ff3a 	bl	80a0510 <_ZN8RCSwitch16dec2binWzerofillEmj>
 80a069c:	4606      	mov	r6, r0
 80a069e:	4602      	mov	r2, r0
  for (int i=0; i<50; i++) {
    returnValue[i] = '\0';
  }
  int pos = 0;
  int pos2 = 0;
  while (bin[pos]!='\0' && bin[pos+1]!='\0') {
 80a06a0:	7814      	ldrb	r4, [r2, #0]
 80a06a2:	b18c      	cbz	r4, 80a06c8 <_Z10rsl_outputmjjPjj+0x54>
 80a06a4:	7853      	ldrb	r3, [r2, #1]
 80a06a6:	b163      	cbz	r3, 80a06c2 <_Z10rsl_outputmjjPjj+0x4e>
    if (bin[pos]=='0' && bin[pos+1]=='0') {
 80a06a8:	2c30      	cmp	r4, #48	; 0x30
 80a06aa:	d104      	bne.n	80a06b6 <_Z10rsl_outputmjjPjj+0x42>
 80a06ac:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80a06b0:	2c01      	cmp	r4, #1
 80a06b2:	d808      	bhi.n	80a06c6 <_Z10rsl_outputmjjPjj+0x52>
 80a06b4:	e003      	b.n	80a06be <_Z10rsl_outputmjjPjj+0x4a>
      returnValue[pos2] = '0';
    } else if (bin[pos]=='1' && bin[pos+1]=='1') {
 80a06b6:	2c31      	cmp	r4, #49	; 0x31
 80a06b8:	d105      	bne.n	80a06c6 <_Z10rsl_outputmjjPjj+0x52>
 80a06ba:	2b31      	cmp	r3, #49	; 0x31
 80a06bc:	d103      	bne.n	80a06c6 <_Z10rsl_outputmjjPjj+0x52>
 80a06be:	3202      	adds	r2, #2
 80a06c0:	e7ee      	b.n	80a06a0 <_Z10rsl_outputmjjPjj+0x2c>
    }
    pos = pos+2;
    pos2++;
  }
  returnValue[pos2] = '\0';
  return returnValue;
 80a06c2:	461c      	mov	r4, r3
 80a06c4:	e000      	b.n	80a06c8 <_Z10rsl_outputmjjPjj+0x54>
    } else if (bin[pos]=='1' && bin[pos+1]=='1') {
      returnValue[pos2] = '1';
    } else if (bin[pos]=='0' && bin[pos+1]=='1') {
      returnValue[pos2] = 'F';
    } else {
      return "not applicable";
 80a06c6:	4c36      	ldr	r4, [pc, #216]	; (80a07a0 <_Z10rsl_outputmjjPjj+0x12c>)
    Serial.print("Unknown encoding.");
  } else {
    char* b = mySwitch.dec2binWzerofill(decimal, length);
    char* tristate = bin2tristate(b);

    binary_code = b;
 80a06c8:	4b36      	ldr	r3, [pc, #216]	; (80a07a4 <_Z10rsl_outputmjjPjj+0x130>)
 80a06ca:	601e      	str	r6, [r3, #0]

    Serial.print("Decimal: ");
 80a06cc:	f004 f9e2 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a06d0:	4935      	ldr	r1, [pc, #212]	; (80a07a8 <_Z10rsl_outputmjjPjj+0x134>)
 80a06d2:	f003 fb7c 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.print(decimal);
 80a06d6:	f004 f9dd 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a06da:	220a      	movs	r2, #10
 80a06dc:	4651      	mov	r1, sl
 80a06de:	f003 fbb2 	bl	80a3e46 <_ZN5Print5printEmi>
    Serial.print(" (");
 80a06e2:	f004 f9d7 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a06e6:	4931      	ldr	r1, [pc, #196]	; (80a07ac <_Z10rsl_outputmjjPjj+0x138>)
 80a06e8:	f003 fb71 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.print( length );
 80a06ec:	f004 f9d2 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a06f0:	220a      	movs	r2, #10
 80a06f2:	4629      	mov	r1, r5
 80a06f4:	f003 fbbe 	bl	80a3e74 <_ZN5Print5printEji>
    Serial.print("Bit) Binary: ");
 80a06f8:	f004 f9cc 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a06fc:	492c      	ldr	r1, [pc, #176]	; (80a07b0 <_Z10rsl_outputmjjPjj+0x13c>)
 80a06fe:	f003 fb66 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.print( b );
 80a0702:	f004 f9c7 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0706:	4631      	mov	r1, r6
 80a0708:	f003 fb61 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.print(" Tri-State: ");
 80a070c:	f004 f9c2 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0710:	4928      	ldr	r1, [pc, #160]	; (80a07b4 <_Z10rsl_outputmjjPjj+0x140>)
 80a0712:	f003 fb5c 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.print( tristate );
 80a0716:	f004 f9bd 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a071a:	4621      	mov	r1, r4
 80a071c:	f003 fb57 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.print(" PulseLength: ");
 80a0720:	f004 f9b8 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0724:	4924      	ldr	r1, [pc, #144]	; (80a07b8 <_Z10rsl_outputmjjPjj+0x144>)
 80a0726:	f003 fb52 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.print(delay);
 80a072a:	f004 f9b3 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a072e:	220a      	movs	r2, #10
 80a0730:	4649      	mov	r1, r9
 80a0732:	f003 fb9f 	bl	80a3e74 <_ZN5Print5printEji>
    Serial.print(" microseconds");
 80a0736:	f004 f9ad 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a073a:	4920      	ldr	r1, [pc, #128]	; (80a07bc <_Z10rsl_outputmjjPjj+0x148>)
 80a073c:	f003 fb47 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.print(" Protocol: ");
 80a0740:	f004 f9a8 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0744:	491e      	ldr	r1, [pc, #120]	; (80a07c0 <_Z10rsl_outputmjjPjj+0x14c>)
 80a0746:	f003 fb42 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.println(protocol);
 80a074a:	f004 f9a3 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a074e:	220a      	movs	r2, #10
 80a0750:	4641      	mov	r1, r8
 80a0752:	f003 fb91 	bl	80a3e78 <_ZN5Print7printlnEji>

  }

  Serial.print("Raw data: ");
 80a0756:	f004 f99d 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a075a:	491a      	ldr	r1, [pc, #104]	; (80a07c4 <_Z10rsl_outputmjjPjj+0x150>)
 80a075c:	f003 fb37 	bl	80a3dce <_ZN5Print5printEPKc>
  for (int i=0; i<= length*2; i++) {
 80a0760:	006d      	lsls	r5, r5, #1
 80a0762:	2400      	movs	r4, #0
 80a0764:	42a5      	cmp	r5, r4
 80a0766:	d30d      	bcc.n	80a0784 <_Z10rsl_outputmjjPjj+0x110>
    Serial.print(raw[i]);
 80a0768:	f004 f994 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a076c:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80a0770:	220a      	movs	r2, #10
 80a0772:	f003 fb7f 	bl	80a3e74 <_ZN5Print5printEji>
    Serial.print(",");
 80a0776:	f004 f98d 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a077a:	4913      	ldr	r1, [pc, #76]	; (80a07c8 <_Z10rsl_outputmjjPjj+0x154>)
 80a077c:	f003 fb27 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.println(protocol);

  }

  Serial.print("Raw data: ");
  for (int i=0; i<= length*2; i++) {
 80a0780:	3401      	adds	r4, #1
 80a0782:	e7ef      	b.n	80a0764 <_Z10rsl_outputmjjPjj+0xf0>
    Serial.print(raw[i]);
    Serial.print(",");
  }
  Serial.println();
 80a0784:	f004 f986 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0788:	f003 fb28 	bl	80a3ddc <_ZN5Print7printlnEv>
  Serial.println();
 80a078c:	f004 f982 	bl	80a4a94 <_Z16_fetch_usbserialv>
}
 80a0790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (int i=0; i<= length*2; i++) {
    Serial.print(raw[i]);
    Serial.print(",");
  }
  Serial.println();
  Serial.println();
 80a0794:	f003 bb22 	b.w	80a3ddc <_ZN5Print7printlnEv>
 80a0798:	080a6f0d 	.word	0x080a6f0d
 80a079c:	20000298 	.word	0x20000298
 80a07a0:	080a6efe 	.word	0x080a6efe
 80a07a4:	200002ac 	.word	0x200002ac
 80a07a8:	080a6f1f 	.word	0x080a6f1f
 80a07ac:	080a6f29 	.word	0x080a6f29
 80a07b0:	080a6f2c 	.word	0x080a6f2c
 80a07b4:	080a6f3a 	.word	0x080a6f3a
 80a07b8:	080a6f47 	.word	0x080a6f47
 80a07bc:	080a6f56 	.word	0x080a6f56
 80a07c0:	080a6f64 	.word	0x080a6f64
 80a07c4:	080a6f70 	.word	0x080a6f70
 80a07c8:	080a6f7b 	.word	0x080a6f7b

080a07cc <_Z18rsl_enable_receivev>:
}

void rsl_enable_receive() {
 80a07cc:	b5f0      	push	{r4, r5, r6, r7, lr}

  pinMode(RxInputPin, INPUT_PULLDOWN);
  mySwitch = RCSwitch();
 80a07ce:	4e0c      	ldr	r6, [pc, #48]	; (80a0800 <_Z18rsl_enable_receivev+0x34>)
  Serial.println();
}

void rsl_enable_receive() {

  pinMode(RxInputPin, INPUT_PULLDOWN);
 80a07d0:	4f0c      	ldr	r7, [pc, #48]	; (80a0804 <_Z18rsl_enable_receivev+0x38>)
  mySwitch = RCSwitch();
 80a07d2:	4635      	mov	r5, r6
  }
  Serial.println();
  Serial.println();
}

void rsl_enable_receive() {
 80a07d4:	b087      	sub	sp, #28

  pinMode(RxInputPin, INPUT_PULLDOWN);
 80a07d6:	2103      	movs	r1, #3
 80a07d8:	8838      	ldrh	r0, [r7, #0]
 80a07da:	f004 fbd9 	bl	80a4f90 <pinMode>
  mySwitch = RCSwitch();
 80a07de:	ac01      	add	r4, sp, #4
 80a07e0:	a801      	add	r0, sp, #4
 80a07e2:	f7ff fc69 	bl	80a00b8 <_ZN8RCSwitchC1Ev>
 80a07e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a07e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a07ea:	6823      	ldr	r3, [r4, #0]
  mySwitch.enableReceive(RxInputPin);
 80a07ec:	6839      	ldr	r1, [r7, #0]
}

void rsl_enable_receive() {

  pinMode(RxInputPin, INPUT_PULLDOWN);
  mySwitch = RCSwitch();
 80a07ee:	702b      	strb	r3, [r5, #0]
  mySwitch.enableReceive(RxInputPin);
 80a07f0:	4630      	mov	r0, r6
 80a07f2:	f7ff fc91 	bl	80a0118 <_ZN8RCSwitch13enableReceiveEi>
  enabled = 1;
 80a07f6:	4b04      	ldr	r3, [pc, #16]	; (80a0808 <_Z18rsl_enable_receivev+0x3c>)
 80a07f8:	2201      	movs	r2, #1
 80a07fa:	601a      	str	r2, [r3, #0]

}
 80a07fc:	b007      	add	sp, #28
 80a07fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0800:	20000298 	.word	0x20000298
 80a0804:	20000004 	.word	0x20000004
 80a0808:	200002b0 	.word	0x200002b0

080a080c <_Z19rsl_disable_receivev>:

void rsl_disable_receive()
{
 80a080c:	b510      	push	{r4, lr}
  if (enabled==1)
 80a080e:	4c05      	ldr	r4, [pc, #20]	; (80a0824 <_Z19rsl_disable_receivev+0x18>)
 80a0810:	6823      	ldr	r3, [r4, #0]
 80a0812:	2b01      	cmp	r3, #1
 80a0814:	d104      	bne.n	80a0820 <_Z19rsl_disable_receivev+0x14>
  {
  mySwitch.disableReceive();
 80a0816:	4804      	ldr	r0, [pc, #16]	; (80a0828 <_Z19rsl_disable_receivev+0x1c>)
 80a0818:	f7ff fc81 	bl	80a011e <_ZN8RCSwitch14disableReceiveEv>
  enabled = 0;
 80a081c:	2300      	movs	r3, #0
 80a081e:	6023      	str	r3, [r4, #0]
 80a0820:	bd10      	pop	{r4, pc}
 80a0822:	bf00      	nop
 80a0824:	200002b0 	.word	0x200002b0
 80a0828:	20000298 	.word	0x20000298

080a082c <_Z11rsl_receivev>:
  }
}


unsigned long rsl_receive() {
 80a082c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  unsigned long rc = 0;
  if (mySwitch.available()) {
 80a082e:	4815      	ldr	r0, [pc, #84]	; (80a0884 <_Z11rsl_receivev+0x58>)
 80a0830:	f7ff fc7e 	bl	80a0130 <_ZN8RCSwitch9availableEv>
 80a0834:	b308      	cbz	r0, 80a087a <_Z11rsl_receivev+0x4e>
    rsl_output(mySwitch.getReceivedValue(), mySwitch.getReceivedBitlength(), mySwitch.getReceivedDelay(), mySwitch.getReceivedRawdata(), mySwitch.getReceivedProtocol());
 80a0836:	4813      	ldr	r0, [pc, #76]	; (80a0884 <_Z11rsl_receivev+0x58>)
 80a0838:	f7ff fc88 	bl	80a014c <_ZN8RCSwitch16getReceivedValueEv>
 80a083c:	4604      	mov	r4, r0
 80a083e:	4811      	ldr	r0, [pc, #68]	; (80a0884 <_Z11rsl_receivev+0x58>)
 80a0840:	f7ff fc8a 	bl	80a0158 <_ZN8RCSwitch20getReceivedBitlengthEv>
 80a0844:	4605      	mov	r5, r0
 80a0846:	480f      	ldr	r0, [pc, #60]	; (80a0884 <_Z11rsl_receivev+0x58>)
 80a0848:	f7ff fc8c 	bl	80a0164 <_ZN8RCSwitch16getReceivedDelayEv>
 80a084c:	4606      	mov	r6, r0
 80a084e:	480d      	ldr	r0, [pc, #52]	; (80a0884 <_Z11rsl_receivev+0x58>)
 80a0850:	f7ff fc94 	bl	80a017c <_ZN8RCSwitch18getReceivedRawdataEv>
 80a0854:	4607      	mov	r7, r0
 80a0856:	480b      	ldr	r0, [pc, #44]	; (80a0884 <_Z11rsl_receivev+0x58>)
 80a0858:	f7ff fc8a 	bl	80a0170 <_ZN8RCSwitch19getReceivedProtocolEv>
 80a085c:	463b      	mov	r3, r7
 80a085e:	9000      	str	r0, [sp, #0]
 80a0860:	4632      	mov	r2, r6
 80a0862:	4629      	mov	r1, r5
 80a0864:	4620      	mov	r0, r4
 80a0866:	f7ff ff05 	bl	80a0674 <_Z10rsl_outputmjjPjj>
    rc = mySwitch.getReceivedValue();
 80a086a:	4806      	ldr	r0, [pc, #24]	; (80a0884 <_Z11rsl_receivev+0x58>)
 80a086c:	f7ff fc6e 	bl	80a014c <_ZN8RCSwitch16getReceivedValueEv>
 80a0870:	4604      	mov	r4, r0
    mySwitch.resetAvailable();
 80a0872:	4804      	ldr	r0, [pc, #16]	; (80a0884 <_Z11rsl_receivev+0x58>)
 80a0874:	f7ff fc64 	bl	80a0140 <_ZN8RCSwitch14resetAvailableEv>
 80a0878:	e000      	b.n	80a087c <_Z11rsl_receivev+0x50>
}


unsigned long rsl_receive() {

  unsigned long rc = 0;
 80a087a:	4604      	mov	r4, r0
    rsl_output(mySwitch.getReceivedValue(), mySwitch.getReceivedBitlength(), mySwitch.getReceivedDelay(), mySwitch.getReceivedRawdata(), mySwitch.getReceivedProtocol());
    rc = mySwitch.getReceivedValue();
    mySwitch.resetAvailable();
  }
  return(rc);
}
 80a087c:	4620      	mov	r0, r4
 80a087e:	b003      	add	sp, #12
 80a0880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0882:	bf00      	nop
 80a0884:	20000298 	.word	0x20000298

080a0888 <_GLOBAL__sub_I_mySwitch>:
 80a0888:	b508      	push	{r3, lr}
 80a088a:	f002 fc05 	bl	80a3098 <HAL_Pin_Map>
 80a088e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Spark Cloud for "tristate-received" event.
*/

#include "RCSwitch.h"

RCSwitch mySwitch;
 80a0892:	4801      	ldr	r0, [pc, #4]	; (80a0898 <_GLOBAL__sub_I_mySwitch+0x10>)
 80a0894:	f7ff bc10 	b.w	80a00b8 <_ZN8RCSwitchC1Ev>
 80a0898:	20000298 	.word	0x20000298

080a089c <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
 80a089c:	2300      	movs	r3, #0
  _celsius = 0;
 80a089e:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
 80a08a0:	8303      	strh	r3, [r0, #24]
  _celsius = 0;
 80a08a2:	61c2      	str	r2, [r0, #28]
  memset(_addr, 0, sizeof(_addr));
 80a08a4:	6203      	str	r3, [r0, #32]
 80a08a6:	6243      	str	r3, [r0, #36]	; 0x24
  memset(_data, 0, sizeof(_data));
 80a08a8:	6283      	str	r3, [r0, #40]	; 0x28
 80a08aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a08ac:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  _type = WIRE_UNKNOWN;
 80a08b0:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  _searchDone = false;
 80a08b4:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  _crcError = false;
 80a08b8:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 80a08bc:	4770      	bx	lr

080a08be <_ZN4DS18C1Etb>:
#include "ds18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
 80a08be:	b538      	push	{r3, r4, r5, lr}
 80a08c0:	4604      	mov	r4, r0
 80a08c2:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
 80a08c4:	f001 fff5 	bl	80a28b2 <_ZN7OneWireC1Et>
 80a08c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
 80a08cc:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
 80a08ce:	7525      	strb	r5, [r4, #20]
 80a08d0:	82e3      	strh	r3, [r4, #22]
{
  init();
 80a08d2:	f7ff ffe3 	bl	80a089c <_ZN4DS184initEv>
}
 80a08d6:	4620      	mov	r0, r4
 80a08d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a08dc <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80a08dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80a08e0:	680b      	ldr	r3, [r1, #0]
 80a08e2:	f100 0520 	add.w	r5, r0, #32
 80a08e6:	6203      	str	r3, [r0, #32]
 80a08e8:	684b      	ldr	r3, [r1, #4]

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80a08ea:	4604      	mov	r4, r0
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80a08ec:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80a08ee:	780b      	ldrb	r3, [r1, #0]
 80a08f0:	2b22      	cmp	r3, #34	; 0x22
 80a08f2:	d00a      	beq.n	80a090a <_ZN4DS184readEPh+0x2e>
 80a08f4:	d803      	bhi.n	80a08fe <_ZN4DS184readEPh+0x22>
 80a08f6:	2b10      	cmp	r3, #16
 80a08f8:	d142      	bne.n	80a0980 <_ZN4DS184readEPh+0xa4>
    case 0x10: _type = WIRE_DS1820; break;
 80a08fa:	2301      	movs	r3, #1
 80a08fc:	e008      	b.n	80a0910 <_ZN4DS184readEPh+0x34>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80a08fe:	2b26      	cmp	r3, #38	; 0x26
 80a0900:	d005      	beq.n	80a090e <_ZN4DS184readEPh+0x32>
 80a0902:	2b28      	cmp	r3, #40	; 0x28
 80a0904:	d13c      	bne.n	80a0980 <_ZN4DS184readEPh+0xa4>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
 80a0906:	2302      	movs	r3, #2
 80a0908:	e002      	b.n	80a0910 <_ZN4DS184readEPh+0x34>
    case 0x22: _type = WIRE_DS1822; break;
 80a090a:	2303      	movs	r3, #3
 80a090c:	e000      	b.n	80a0910 <_ZN4DS184readEPh+0x34>
    case 0x26: _type = WIRE_DS2438; break;
 80a090e:	2304      	movs	r3, #4
 80a0910:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
 80a0914:	4620      	mov	r0, r4
 80a0916:	f001 ffd9 	bl	80a28cc <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
 80a091a:	4629      	mov	r1, r5
 80a091c:	4620      	mov	r0, r4
 80a091e:	f002 f89c 	bl	80a2a5a <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
 80a0922:	7d22      	ldrb	r2, [r4, #20]
 80a0924:	2144      	movs	r1, #68	; 0x44
 80a0926:	4620      	mov	r0, r4
 80a0928:	f002 f85f 	bl	80a29ea <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
 80a092c:	8ae0      	ldrh	r0, [r4, #22]
 80a092e:	f003 fc2f 	bl	80a4190 <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
 80a0932:	4620      	mov	r0, r4
 80a0934:	f001 ffca 	bl	80a28cc <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a0938:	4629      	mov	r1, r5
 80a093a:	4620      	mov	r0, r4
 80a093c:	f002 f88d 	bl	80a2a5a <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
 80a0940:	2200      	movs	r2, #0
 80a0942:	21b8      	movs	r1, #184	; 0xb8
 80a0944:	4620      	mov	r0, r4
 80a0946:	f002 f850 	bl	80a29ea <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
 80a094a:	2200      	movs	r2, #0
 80a094c:	4611      	mov	r1, r2
 80a094e:	4620      	mov	r0, r4
 80a0950:	f002 f84b 	bl	80a29ea <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
 80a0954:	4620      	mov	r0, r4
 80a0956:	f001 ffb9 	bl	80a28cc <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a095a:	4629      	mov	r1, r5
 80a095c:	4620      	mov	r0, r4
 80a095e:	f002 f87c 	bl	80a2a5a <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
 80a0962:	2200      	movs	r2, #0
 80a0964:	21be      	movs	r1, #190	; 0xbe
 80a0966:	4620      	mov	r0, r4
 80a0968:	f002 f83f 	bl	80a29ea <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
 80a096c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a0970:	2b04      	cmp	r3, #4
 80a0972:	d10a      	bne.n	80a098a <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
 80a0974:	2200      	movs	r2, #0
 80a0976:	4611      	mov	r1, r2
 80a0978:	4620      	mov	r0, r4
 80a097a:	f002 f836 	bl	80a29ea <_ZN7OneWire5writeEhh>
 80a097e:	e004      	b.n	80a098a <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
 80a0980:	2000      	movs	r0, #0
 80a0982:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 80a0986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a098a:	f104 0527 	add.w	r5, r4, #39	; 0x27
 80a098e:	f104 0630 	add.w	r6, r4, #48	; 0x30
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
 80a0992:	4620      	mov	r0, r4
 80a0994:	f002 f851 	bl	80a2a3a <_ZN7OneWire4readEv>
 80a0998:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
 80a099c:	42ae      	cmp	r6, r5
 80a099e:	d1f8      	bne.n	80a0992 <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
 80a09a0:	2108      	movs	r1, #8
 80a09a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a09a6:	f002 f8f1 	bl	80a2b8c <_ZN7OneWire4crc8EPhh>
 80a09aa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a09ae:	4283      	cmp	r3, r0
 80a09b0:	d005      	beq.n	80a09be <_ZN4DS184readEPh+0xe2>
    _crcError = true;
 80a09b2:	2301      	movs	r3, #1
 80a09b4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a09b8:	2000      	movs	r0, #0
 80a09ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 80a09be:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 80a09c2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  if (_type == WIRE_DS2438) {
 80a09c6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 80a09ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (_type == WIRE_DS2438) {
 80a09ce:	2a04      	cmp	r2, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 80a09d0:	8323      	strh	r3, [r4, #24]
  if (_type == WIRE_DS2438) {
 80a09d2:	d120      	bne.n	80a0a16 <_ZN4DS184readEPh+0x13a>
    _raw = (_data[2] << 8) | _data[1];
 80a09d4:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 80a09d8:	ea45 2306 	orr.w	r3, r5, r6, lsl #8
 80a09dc:	8323      	strh	r3, [r4, #24]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a09de:	08ed      	lsrs	r5, r5, #3
      if (_data[2] > 127) {
 80a09e0:	0633      	lsls	r3, r6, #24
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a09e2:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
      if (_data[2] > 127) {
 80a09e6:	d547      	bpl.n	80a0a78 <_ZN4DS184readEPh+0x19c>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a09e8:	4630      	mov	r0, r6
 80a09ea:	f005 f9fd 	bl	80a5de8 <__aeabi_ui2f>
 80a09ee:	f004 fe6f 	bl	80a56d0 <__aeabi_f2d>
 80a09f2:	4606      	mov	r6, r0
 80a09f4:	4628      	mov	r0, r5
 80a09f6:	460f      	mov	r7, r1
 80a09f8:	f005 f9f6 	bl	80a5de8 <__aeabi_ui2f>
 80a09fc:	f004 fe68 	bl	80a56d0 <__aeabi_f2d>
 80a0a00:	2200      	movs	r2, #0
 80a0a02:	4b2b      	ldr	r3, [pc, #172]	; (80a0ab0 <_ZN4DS184readEPh+0x1d4>)
 80a0a04:	f004 feb8 	bl	80a5778 <__aeabi_dmul>
 80a0a08:	4602      	mov	r2, r0
 80a0a0a:	460b      	mov	r3, r1
 80a0a0c:	4630      	mov	r0, r6
 80a0a0e:	4639      	mov	r1, r7
 80a0a10:	f004 fcfe 	bl	80a5410 <__aeabi_dsub>
 80a0a14:	e046      	b.n	80a0aa4 <_ZN4DS184readEPh+0x1c8>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
 80a0a16:	2a01      	cmp	r2, #1
 80a0a18:	d003      	beq.n	80a0a22 <_ZN4DS184readEPh+0x146>
 80a0a1a:	d346      	bcc.n	80a0aaa <_ZN4DS184readEPh+0x1ce>
 80a0a1c:	2a03      	cmp	r2, #3
 80a0a1e:	d910      	bls.n	80a0a42 <_ZN4DS184readEPh+0x166>
 80a0a20:	e043      	b.n	80a0aaa <_ZN4DS184readEPh+0x1ce>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80a0a22:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a0a26:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80a0a2a:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
 80a0a2c:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80a0a2e:	8323      	strh	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a0a30:	d119      	bne.n	80a0a66 <_ZN4DS184readEPh+0x18a>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
 80a0a32:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80a0a36:	f023 030f 	bic.w	r3, r3, #15
 80a0a3a:	f1c2 020c 	rsb	r2, r2, #12
 80a0a3e:	4413      	add	r3, r2
 80a0a40:	e010      	b.n	80a0a64 <_ZN4DS184readEPh+0x188>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
 80a0a42:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
 80a0a46:	f012 0260 	ands.w	r2, r2, #96	; 0x60
 80a0a4a:	d102      	bne.n	80a0a52 <_ZN4DS184readEPh+0x176>
 80a0a4c:	f023 0307 	bic.w	r3, r3, #7
 80a0a50:	e008      	b.n	80a0a64 <_ZN4DS184readEPh+0x188>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a0a52:	2a20      	cmp	r2, #32
 80a0a54:	d102      	bne.n	80a0a5c <_ZN4DS184readEPh+0x180>
 80a0a56:	f023 0303 	bic.w	r3, r3, #3
 80a0a5a:	e003      	b.n	80a0a64 <_ZN4DS184readEPh+0x188>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a0a5c:	2a40      	cmp	r2, #64	; 0x40
 80a0a5e:	d102      	bne.n	80a0a66 <_ZN4DS184readEPh+0x18a>
 80a0a60:	f023 0301 	bic.w	r3, r3, #1
 80a0a64:	8323      	strh	r3, [r4, #24]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
 80a0a66:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 80a0a6a:	f005 f9c1 	bl	80a5df0 <__aeabi_i2f>
 80a0a6e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a0a72:	f005 fa11 	bl	80a5e98 <__aeabi_fmul>
 80a0a76:	e017      	b.n	80a0aa8 <_ZN4DS184readEPh+0x1cc>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a0a78:	4628      	mov	r0, r5
 80a0a7a:	f005 f9b5 	bl	80a5de8 <__aeabi_ui2f>
 80a0a7e:	f004 fe27 	bl	80a56d0 <__aeabi_f2d>
 80a0a82:	2200      	movs	r2, #0
 80a0a84:	4b0a      	ldr	r3, [pc, #40]	; (80a0ab0 <_ZN4DS184readEPh+0x1d4>)
 80a0a86:	f004 fe77 	bl	80a5778 <__aeabi_dmul>
 80a0a8a:	4680      	mov	r8, r0
 80a0a8c:	4630      	mov	r0, r6
 80a0a8e:	4689      	mov	r9, r1
 80a0a90:	f005 f9aa 	bl	80a5de8 <__aeabi_ui2f>
 80a0a94:	f004 fe1c 	bl	80a56d0 <__aeabi_f2d>
 80a0a98:	4602      	mov	r2, r0
 80a0a9a:	460b      	mov	r3, r1
 80a0a9c:	4640      	mov	r0, r8
 80a0a9e:	4649      	mov	r1, r9
 80a0aa0:	f004 fcb8 	bl	80a5414 <__adddf3>
 80a0aa4:	f005 f89a 	bl	80a5bdc <__aeabi_d2f>
 80a0aa8:	61e0      	str	r0, [r4, #28]
      }
  }

  // Got a good reading!
  return true;
 80a0aaa:	2001      	movs	r0, #1
}
 80a0aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0ab0:	3fa00000 	.word	0x3fa00000

080a0ab4 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
 80a0ab4:	b538      	push	{r3, r4, r5, lr}
 80a0ab6:	4604      	mov	r4, r0
  init();
 80a0ab8:	f7ff fef0 	bl	80a089c <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
 80a0abc:	f100 0520 	add.w	r5, r0, #32
 80a0ac0:	4629      	mov	r1, r5
 80a0ac2:	f001 ffe8 	bl	80a2a96 <_ZN7OneWire6searchEPh>
 80a0ac6:	b930      	cbnz	r0, 80a0ad6 <_ZN4DS184readEv+0x22>
    _searchDone = true;
 80a0ac8:	2301      	movs	r3, #1
 80a0aca:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    _wire.reset_search();
 80a0ace:	4620      	mov	r0, r4
 80a0ad0:	f001 ffd5 	bl	80a2a7e <_ZN7OneWire12reset_searchEv>
    return false;
 80a0ad4:	e011      	b.n	80a0afa <_ZN4DS184readEv+0x46>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
 80a0ad6:	2107      	movs	r1, #7
 80a0ad8:	4628      	mov	r0, r5
 80a0ada:	f002 f857 	bl	80a2b8c <_ZN7OneWire4crc8EPhh>
 80a0ade:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80a0ae2:	4283      	cmp	r3, r0
 80a0ae4:	d003      	beq.n	80a0aee <_ZN4DS184readEv+0x3a>
    _crcError = true;
 80a0ae6:	2301      	movs	r3, #1
 80a0ae8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a0aec:	e005      	b.n	80a0afa <_ZN4DS184readEv+0x46>
  }

  // Read the temperature from that chip
  return read(_addr);
 80a0aee:	4629      	mov	r1, r5
 80a0af0:	4620      	mov	r0, r4
}
 80a0af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
 80a0af6:	f7ff bef1 	b.w	80a08dc <_ZN4DS184readEPh>
}
 80a0afa:	2000      	movs	r0, #0
 80a0afc:	bd38      	pop	{r3, r4, r5, pc}

080a0afe <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
 80a0afe:	69c0      	ldr	r0, [r0, #28]
 80a0b00:	4770      	bx	lr

080a0b02 <_ZN4DS184addrEPh>:
float DS18::fahrenheit() {
  return _celsius * 1.8 + 32.0;
}

void DS18::addr(uint8_t dest[8]) {
  memcpy(dest, _addr, sizeof(_addr));
 80a0b02:	f850 3f20 	ldr.w	r3, [r0, #32]!
 80a0b06:	600b      	str	r3, [r1, #0]
 80a0b08:	6843      	ldr	r3, [r0, #4]
 80a0b0a:	604b      	str	r3, [r1, #4]
 80a0b0c:	4770      	bx	lr

080a0b0e <_ZN4DS1810searchDoneEv>:
  return _type;
}

bool DS18::searchDone() {
  return _searchDone;
}
 80a0b0e:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 80a0b12:	4770      	bx	lr

080a0b14 <_ZN4DS188crcErrorEv>:

bool DS18::crcError() {
  return _crcError;
}
 80a0b14:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 80a0b18:	4770      	bx	lr

080a0b1a <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80a0b1a:	f002 babd 	b.w	80a3098 <HAL_Pin_Map>
	...

080a0b20 <_Z19ultra_sonic_measurev>:
/*---------------------------------------------------------------------
Ultrasonic distance measurement (29.07.2017)
---------------------------------------------------------------------*/
int  ultra_sonic_measure()

{
 80a0b20:	b570      	push	{r4, r5, r6, lr}

  int level = 0;
  int error = 0;
  int k = 0;

  Serial.printlnf ( " ultra sonic distance ");
 80a0b22:	f003 ffb7 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0b26:	4a2b      	ldr	r2, [pc, #172]	; (80a0bd4 <_Z19ultra_sonic_measurev+0xb4>)
 80a0b28:	2101      	movs	r1, #1
 80a0b2a:	f003 f9e5 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  for (k=0; k<ULTRA_LOOP; k++)
  {
      time = ultra_sonic_ping();

      dist = uMilli(time);
      hs[k] = dist;
 80a0b2e:	4d2a      	ldr	r5, [pc, #168]	; (80a0bd8 <_Z19ultra_sonic_measurev+0xb8>)
  int error = 0;
  int k = 0;

  Serial.printlnf ( " ultra sonic distance ");

  for (k=0; k<ULTRA_LOOP; k++)
 80a0b30:	2400      	movs	r4, #0
  {
      time = ultra_sonic_ping();
 80a0b32:	f001 fe87 	bl	80a2844 <_Z16ultra_sonic_pingv>

      dist = uMilli(time);
 80a0b36:	f001 fea5 	bl	80a2884 <_Z6uMillim>
      hs[k] = dist;
 80a0b3a:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
 80a0b3e:	f003 ffa9 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0b42:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80a0b46:	4a25      	ldr	r2, [pc, #148]	; (80a0bdc <_Z19ultra_sonic_measurev+0xbc>)
 80a0b48:	2101      	movs	r1, #1
 80a0b4a:	f003 f9d5 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  int error = 0;
  int k = 0;

  Serial.printlnf ( " ultra sonic distance ");

  for (k=0; k<ULTRA_LOOP; k++)
 80a0b4e:	3401      	adds	r4, #1
      time = ultra_sonic_ping();

      dist = uMilli(time);
      hs[k] = dist;
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
      run_blynk();
 80a0b50:	f000 ff26 	bl	80a19a0 <_Z9run_blynkv>
      delay(150);
 80a0b54:	2096      	movs	r0, #150	; 0x96
 80a0b56:	f003 fb1b 	bl	80a4190 <delay>
  int error = 0;
  int k = 0;

  Serial.printlnf ( " ultra sonic distance ");

  for (k=0; k<ULTRA_LOOP; k++)
 80a0b5a:	2c03      	cmp	r4, #3
  {
      time = ultra_sonic_ping();

      dist = uMilli(time);
      hs[k] = dist;
 80a0b5c:	4e1e      	ldr	r6, [pc, #120]	; (80a0bd8 <_Z19ultra_sonic_measurev+0xb8>)
  int error = 0;
  int k = 0;

  Serial.printlnf ( " ultra sonic distance ");

  for (k=0; k<ULTRA_LOOP; k++)
 80a0b5e:	d1e8      	bne.n	80a0b32 <_Z19ultra_sonic_measurev+0x12>
  }

  avg = 0;
  for (k=0; k<ULTRA_LOOP; k++)
  {
    avg = avg + hs[k];
 80a0b60:	e896 0022 	ldmia.w	r6, {r1, r5}
 80a0b64:	68b0      	ldr	r0, [r6, #8]
 80a0b66:	194a      	adds	r2, r1, r5
 80a0b68:	4402      	add	r2, r0
  }
  avg = avg / ULTRA_LOOP;
 80a0b6a:	fbb2 f4f4 	udiv	r4, r2, r4

  for (k=0; k<ULTRA_LOOP; k++)
  {
    error = error + (avg-hs[k]);
 80a0b6e:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
 80a0b72:	1b49      	subs	r1, r1, r5
 80a0b74:	1a25      	subs	r5, r4, r0
 80a0b76:	440d      	add	r5, r1
  }

  if (avg==0)
 80a0b78:	b964      	cbnz	r4, 80a0b94 <_Z19ultra_sonic_measurev+0x74>
  {
    level = 1000; // prevent that the second pump is switched on
    Serial.printlnf ( " WARNING: Failed to read ultrasinic sensor");
 80a0b7a:	f003 ff8b 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0b7e:	4a18      	ldr	r2, [pc, #96]	; (80a0be0 <_Z19ultra_sonic_measurev+0xc0>)
 80a0b80:	2101      	movs	r1, #1
 80a0b82:	f003 f9b9 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
    WriteToDatabase ( "WASSER", "WARNING: Failed to read ultrasonic sensor");  
 80a0b86:	4917      	ldr	r1, [pc, #92]	; (80a0be4 <_Z19ultra_sonic_measurev+0xc4>)
 80a0b88:	4817      	ldr	r0, [pc, #92]	; (80a0be8 <_Z19ultra_sonic_measurev+0xc8>)
 80a0b8a:	f7ff fcdb 	bl	80a0544 <_Z15WriteToDatabasePcS_>
    return(1000);
 80a0b8e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80a0b92:	e01d      	b.n	80a0bd0 <_Z19ultra_sonic_measurev+0xb0>
  }

  Serial.printlnf ( " ultra error : %d ", error);
 80a0b94:	f003 ff7e 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0b98:	462b      	mov	r3, r5
 80a0b9a:	4a14      	ldr	r2, [pc, #80]	; (80a0bec <_Z19ultra_sonic_measurev+0xcc>)
 80a0b9c:	2101      	movs	r1, #1
 80a0b9e:	f003 f9ab 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf ( " ultra distance average : %d mm", avg);
 80a0ba2:	f003 ff77 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0ba6:	4623      	mov	r3, r4
 80a0ba8:	4a11      	ldr	r2, [pc, #68]	; (80a0bf0 <_Z19ultra_sonic_measurev+0xd0>)
 80a0baa:	2101      	movs	r1, #1

  level = TankHoehe - avg;
 80a0bac:	f5c4 74aa 	rsb	r4, r4, #340	; 0x154
 80a0bb0:	f003 f9a2 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf ( " ultra level average : %d mm", level);
 80a0bb4:	f003 ff6e 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0bb8:	4a0e      	ldr	r2, [pc, #56]	; (80a0bf4 <_Z19ultra_sonic_measurev+0xd4>)
 80a0bba:	2101      	movs	r1, #1
 80a0bbc:	4623      	mov	r3, r4
 80a0bbe:	f003 f99b 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  run_blynk();
 80a0bc2:	f000 feed 	bl	80a19a0 <_Z9run_blynkv>

  WriteToDatabase("WASSER","WASSERSTAND : ",level);
 80a0bc6:	4622      	mov	r2, r4
 80a0bc8:	490b      	ldr	r1, [pc, #44]	; (80a0bf8 <_Z19ultra_sonic_measurev+0xd8>)
 80a0bca:	4807      	ldr	r0, [pc, #28]	; (80a0be8 <_Z19ultra_sonic_measurev+0xc8>)
 80a0bcc:	f7ff fcfc 	bl	80a05c8 <_Z15WriteToDatabasePcS_i>

  return(level);

 80a0bd0:	4620      	mov	r0, r4
 80a0bd2:	bd70      	pop	{r4, r5, r6, pc}
 80a0bd4:	080a6f7d 	.word	0x080a6f7d
 80a0bd8:	200002b4 	.word	0x200002b4
 80a0bdc:	080a6f94 	.word	0x080a6f94
 80a0be0:	080a6fac 	.word	0x080a6fac
 80a0be4:	080a6fd7 	.word	0x080a6fd7
 80a0be8:	080a7001 	.word	0x080a7001
 80a0bec:	080a7008 	.word	0x080a7008
 80a0bf0:	080a701b 	.word	0x080a701b
 80a0bf4:	080a703b 	.word	0x080a703b
 80a0bf8:	080a7058 	.word	0x080a7058

080a0bfc <_GLOBAL__sub_I_hs>:
 80a0bfc:	f002 ba4c 	b.w	80a3098 <HAL_Pin_Map>

080a0c00 <_Z6get_IDv>:
}


uint8_t get_ID()
{
  if (sensor.crcError()) {
 80a0c00:	b507      	push	{r0, r1, r2, lr}
    Serial.print(" CRC Error ");
 80a0c02:	480a      	ldr	r0, [pc, #40]	; (80a0c2c <_Z6get_IDv+0x2c>)
 80a0c04:	f7ff ff86 	bl	80a0b14 <_ZN4DS188crcErrorEv>
 80a0c08:	b130      	cbz	r0, 80a0c18 <_Z6get_IDv+0x18>
    return(0);
 80a0c0a:	f003 ff43 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0c0e:	4908      	ldr	r1, [pc, #32]	; (80a0c30 <_Z6get_IDv+0x30>)
 80a0c10:	f003 f8dd 	bl	80a3dce <_ZN5Print5printEPKc>
 80a0c14:	2000      	movs	r0, #0
 80a0c16:	e005      	b.n	80a0c24 <_Z6get_IDv+0x24>

  // Use ROM address 7 as ID
  uint8_t addr[8];
  uint8_t id;
  sensor.addr(addr);
  id = addr[7];
 80a0c18:	4804      	ldr	r0, [pc, #16]	; (80a0c2c <_Z6get_IDv+0x2c>)
 80a0c1a:	4669      	mov	r1, sp
 80a0c1c:	f7ff ff71 	bl	80a0b02 <_ZN4DS184addrEPh>
  //Serial.printf(" ID=%02X",id);
 80a0c20:	f89d 0007 	ldrb.w	r0, [sp, #7]
  return(id);
}

 80a0c24:	b003      	add	sp, #12
 80a0c26:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0c2a:	bf00      	nop
 80a0c2c:	200002c0 	.word	0x200002c0
 80a0c30:	080a7067 	.word	0x080a7067

080a0c34 <_Z15get_Temperaturev>:

/*----------------------------------------------------------------
read all temperature sensors 
-----------------------------------------------------------------*/
int get_Temperature()
{
 80a0c34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  int k = 0;
  int id = 0;

Serial.println(" Get Temperature ");
 80a0c36:	f003 ff2d 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0c3a:	4923      	ldr	r1, [pc, #140]	; (80a0cc8 <_Z15get_Temperaturev+0x94>)
 80a0c3c:	f003 f8da 	bl	80a3df4 <_ZN5Print7printlnEPKc>
/*----------------------------------------------------------------
read all temperature sensors 
-----------------------------------------------------------------*/
int get_Temperature()
{
  int k = 0;
 80a0c40:	2400      	movs	r4, #0

Serial.println(" Get Temperature ");

do
  {
    if (sensor.read()) {
 80a0c42:	4822      	ldr	r0, [pc, #136]	; (80a0ccc <_Z15get_Temperaturev+0x98>)
 80a0c44:	f7ff ff36 	bl	80a0ab4 <_ZN4DS184readEv>
 80a0c48:	b388      	cbz	r0, 80a0cae <_Z15get_Temperaturev+0x7a>
      // Do something cool with the temperature
      id = get_ID();
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
 80a0c4a:	f7ff ffd9 	bl	80a0c00 <_Z6get_IDv>
 80a0c4e:	4605      	mov	r5, r0
      k++;
 80a0c50:	f003 ff20 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0c54:	4606      	mov	r6, r0
 80a0c56:	481d      	ldr	r0, [pc, #116]	; (80a0ccc <_Z15get_Temperaturev+0x98>)
 80a0c58:	f7ff ff51 	bl	80a0afe <_ZN4DS187celsiusEv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a0c5c:	f004 fd38 	bl	80a56d0 <__aeabi_f2d>
 80a0c60:	9400      	str	r4, [sp, #0]
 80a0c62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a0c66:	462b      	mov	r3, r5
 80a0c68:	4a19      	ldr	r2, [pc, #100]	; (80a0cd0 <_Z15get_Temperaturev+0x9c>)
 80a0c6a:	2100      	movs	r1, #0
 80a0c6c:	4630      	mov	r0, r6
 80a0c6e:	f003 f943 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
      Particle.publish("temperature", String(sensor.celsius()), PRIVATE);
      delay(250);

 80a0c72:	20fa      	movs	r0, #250	; 0xfa
 80a0c74:	f003 fa8c 	bl	80a4190 <delay>
      if(id == 79) {
        temp_in = sensor.celsius();
 80a0c78:	2d4f      	cmp	r5, #79	; 0x4f
    if (sensor.read()) {
      // Do something cool with the temperature
      id = get_ID();
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
      k++;
      Particle.publish("temperature", String(sensor.celsius()), PRIVATE);
 80a0c7a:	f104 0401 	add.w	r4, r4, #1
      delay(250);

      if(id == 79) {
        temp_in = sensor.celsius();
 80a0c7e:	d106      	bne.n	80a0c8e <_Z15get_Temperaturev+0x5a>
      }
 80a0c80:	4812      	ldr	r0, [pc, #72]	; (80a0ccc <_Z15get_Temperaturev+0x98>)
 80a0c82:	f7ff ff3c 	bl	80a0afe <_ZN4DS187celsiusEv>
 80a0c86:	f005 facd 	bl	80a6224 <__aeabi_f2iz>
 80a0c8a:	4b12      	ldr	r3, [pc, #72]	; (80a0cd4 <_Z15get_Temperaturev+0xa0>)
 80a0c8c:	e007      	b.n	80a0c9e <_Z15get_Temperaturev+0x6a>

      if(id == 131){
        temp_out = sensor.celsius();
 80a0c8e:	2d83      	cmp	r5, #131	; 0x83
 80a0c90:	d106      	bne.n	80a0ca0 <_Z15get_Temperaturev+0x6c>
      }
 80a0c92:	480e      	ldr	r0, [pc, #56]	; (80a0ccc <_Z15get_Temperaturev+0x98>)
 80a0c94:	f7ff ff33 	bl	80a0afe <_ZN4DS187celsiusEv>
 80a0c98:	f005 fac4 	bl	80a6224 <__aeabi_f2iz>
 80a0c9c:	4b0e      	ldr	r3, [pc, #56]	; (80a0cd8 <_Z15get_Temperaturev+0xa4>)
 80a0c9e:	6018      	str	r0, [r3, #0]

    }
 80a0ca0:	f003 fef8 	bl	80a4a94 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a0ca4:	4623      	mov	r3, r4
 80a0ca6:	4a0d      	ldr	r2, [pc, #52]	; (80a0cdc <_Z15get_Temperaturev+0xa8>)
 80a0ca8:	2101      	movs	r1, #1
 80a0caa:	f003 f925 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>

  } while(sensor.searchDone() == false);

 80a0cae:	4807      	ldr	r0, [pc, #28]	; (80a0ccc <_Z15get_Temperaturev+0x98>)
 80a0cb0:	f7ff ff2d 	bl	80a0b0e <_ZN4DS1810searchDoneEv>
  int k = 0;
  int id = 0;

Serial.println(" Get Temperature ");

do
 80a0cb4:	2800      	cmp	r0, #0
 80a0cb6:	d0c4      	beq.n	80a0c42 <_Z15get_Temperaturev+0xe>
    }

  } while(sensor.searchDone() == false);

return(sensor.celsius());

 80a0cb8:	4804      	ldr	r0, [pc, #16]	; (80a0ccc <_Z15get_Temperaturev+0x98>)
 80a0cba:	f7ff ff20 	bl	80a0afe <_ZN4DS187celsiusEv>
 80a0cbe:	f005 fab1 	bl	80a6224 <__aeabi_f2iz>
}

 80a0cc2:	b004      	add	sp, #16
 80a0cc4:	bd70      	pop	{r4, r5, r6, pc}
 80a0cc6:	bf00      	nop
 80a0cc8:	080a7073 	.word	0x080a7073
 80a0ccc:	200002c0 	.word	0x200002c0
 80a0cd0:	080a7085 	.word	0x080a7085
 80a0cd4:	2000041c 	.word	0x2000041c
 80a0cd8:	200003fc 	.word	0x200003fc
 80a0cdc:	080a70b2 	.word	0x080a70b2

080a0ce0 <_GLOBAL__sub_I_sensor>:
  // Serial.printf(
  //   " data=%02X%02X%02X%02X%02X%02X%02X%02X%02X",
  //   data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8]
  // );
}
 80a0ce0:	b508      	push	{r3, lr}
 80a0ce2:	f002 f9d9 	bl	80a3098 <HAL_Pin_Map>
 80a0ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#define SENSOR_PIN D5  // data line of sensor

uint8_t get_ID();

DS18 sensor(SENSOR_PIN);  // create sensor instance
 80a0cea:	2200      	movs	r2, #0
 80a0cec:	2105      	movs	r1, #5
 80a0cee:	4801      	ldr	r0, [pc, #4]	; (80a0cf4 <_GLOBAL__sub_I_sensor+0x14>)
 80a0cf0:	f7ff bde5 	b.w	80a08be <_ZN4DS18C1Etb>
 80a0cf4:	200002c0 	.word	0x200002c0

080a0cf8 <_ZN14WidgetTerminalD1Ev>:
        // On Particle this is auto-included
        #include <Print.h>
    #endif
#endif

class WidgetTerminal
 80a0cf8:	4770      	bx	lr
	...

080a0cfc <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
 80a0cfc:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
 80a0cfe:	f003 fec9 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0d02:	215b      	movs	r1, #91	; 0x5b
 80a0d04:	f003 f867 	bl	80a3dd6 <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
 80a0d08:	f003 fec4 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0d0c:	4604      	mov	r4, r0
 80a0d0e:	f002 f927 	bl	80a2f60 <_Z11BlynkMillisv>
 80a0d12:	220a      	movs	r2, #10
 80a0d14:	4601      	mov	r1, r0
 80a0d16:	4620      	mov	r0, r4
 80a0d18:	f003 f895 	bl	80a3e46 <_ZN5Print5printEmi>
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a0d1c:	f003 feba 	bl	80a4a94 <_Z16_fetch_usbserialv>
        }
 80a0d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        static
        void BLYNK_LOG_TIME() {
            BLYNK_PRINT.print('[');
            BLYNK_PRINT.print(BlynkMillis());
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a0d24:	4901      	ldr	r1, [pc, #4]	; (80a0d2c <_ZL14BLYNK_LOG_TIMEv+0x30>)
 80a0d26:	f003 b852 	b.w	80a3dce <_ZN5Print5printEPKc>
 80a0d2a:	bf00      	nop
 80a0d2c:	080a7151 	.word	0x080a7151

080a0d30 <_ZN14WidgetTerminalD0Ev>:
 80a0d30:	b510      	push	{r4, lr}
 80a0d32:	4604      	mov	r4, r0
 80a0d34:	214c      	movs	r1, #76	; 0x4c
 80a0d36:	f004 fa1a 	bl	80a516e <_ZdlPvj>
 80a0d3a:	4620      	mov	r0, r4
 80a0d3c:	bd10      	pop	{r4, pc}
	...

080a0d40 <_Z17switch_pumpe_funkii.part.9>:
}

/*---------------------------------------------------------------------
Funk-Pumpe des Wassertanks einschalten bzw. ausschalten
---------------------------------------------------------------------*/
int switch_pumpe_funk (int state, int laufzeit)  // pumpe ein- oder aus
 80a0d40:	b510      	push	{r4, lr}
 80a0d42:	4604      	mov	r4, r0

{
    if (state == ON)
    {
      conrad_rsl_switch_code(4,EIN);
 80a0d44:	2101      	movs	r1, #1
 80a0d46:	2004      	movs	r0, #4
 80a0d48:	f001 ffee 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
      st_funk_pumpe=ON;
 80a0d4c:	4b06      	ldr	r3, [pc, #24]	; (80a0d68 <_Z17switch_pumpe_funkii.part.9+0x28>)
 80a0d4e:	2201      	movs	r2, #1
      WriteToDatabase ( "WASSER", "FUNK-PUMPE EINGESCHALTET ");
 80a0d50:	4806      	ldr	r0, [pc, #24]	; (80a0d6c <_Z17switch_pumpe_funkii.part.9+0x2c>)
 80a0d52:	4907      	ldr	r1, [pc, #28]	; (80a0d70 <_Z17switch_pumpe_funkii.part.9+0x30>)

{
    if (state == ON)
    {
      conrad_rsl_switch_code(4,EIN);
      st_funk_pumpe=ON;
 80a0d54:	601a      	str	r2, [r3, #0]
      WriteToDatabase ( "WASSER", "FUNK-PUMPE EINGESCHALTET ");
 80a0d56:	f7ff fbf5 	bl	80a0544 <_Z15WriteToDatabasePcS_>
      ts_funk_pumpe_off = tnow + laufzeit; // in 3 Minuten Pumpe abschalten
 80a0d5a:	4b06      	ldr	r3, [pc, #24]	; (80a0d74 <_Z17switch_pumpe_funkii.part.9+0x34>)
 80a0d5c:	681b      	ldr	r3, [r3, #0]
 80a0d5e:	441c      	add	r4, r3
 80a0d60:	4b05      	ldr	r3, [pc, #20]	; (80a0d78 <_Z17switch_pumpe_funkii.part.9+0x38>)
 80a0d62:	601c      	str	r4, [r3, #0]
      conrad_rsl_switch_code(4,AUS);
      st_funk_pumpe=OFF;
      WriteToDatabase ( "WASSER", "FUNK-PUMPE AUSGESCHALTET ");      
    }
return(state);
}
 80a0d64:	bd10      	pop	{r4, pc}
 80a0d66:	bf00      	nop
 80a0d68:	20000370 	.word	0x20000370
 80a0d6c:	080a7001 	.word	0x080a7001
 80a0d70:	080a7154 	.word	0x080a7154
 80a0d74:	2000040c 	.word	0x2000040c
 80a0d78:	20000420 	.word	0x20000420

080a0d7c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a0d7c:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0d7e:	f002 fa23 	bl	80a31c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0d82:	4b03      	ldr	r3, [pc, #12]	; (80a0d90 <_ZN10CloudClass7processEv+0x14>)
 80a0d84:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a0d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a0d8a:	f002 bc0d 	b.w	80a35a8 <spark_process>
 80a0d8e:	bf00      	nop
 80a0d90:	2000065c 	.word	0x2000065c

080a0d94 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0d94:	b538      	push	{r3, r4, r5, lr}
 80a0d96:	4b0b      	ldr	r3, [pc, #44]	; (80a0dc4 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0d98:	6984      	ldr	r4, [r0, #24]
 80a0d9a:	4605      	mov	r5, r0
 80a0d9c:	6003      	str	r3, [r0, #0]
 80a0d9e:	b17c      	cbz	r4, 80a0dc0 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0da0:	6863      	ldr	r3, [r4, #4]
 80a0da2:	3b01      	subs	r3, #1
 80a0da4:	6063      	str	r3, [r4, #4]
 80a0da6:	b95b      	cbnz	r3, 80a0dc0 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0da8:	6823      	ldr	r3, [r4, #0]
 80a0daa:	4620      	mov	r0, r4
 80a0dac:	689b      	ldr	r3, [r3, #8]
 80a0dae:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0db0:	68a3      	ldr	r3, [r4, #8]
 80a0db2:	3b01      	subs	r3, #1
 80a0db4:	60a3      	str	r3, [r4, #8]
 80a0db6:	b91b      	cbnz	r3, 80a0dc0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0db8:	6823      	ldr	r3, [r4, #0]
 80a0dba:	4620      	mov	r0, r4
 80a0dbc:	68db      	ldr	r3, [r3, #12]
 80a0dbe:	4798      	blx	r3
 80a0dc0:	4628      	mov	r0, r5
 80a0dc2:	bd38      	pop	{r3, r4, r5, pc}
 80a0dc4:	080a7f20 	.word	0x080a7f20

080a0dc8 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
 80a0dc8:	b510      	push	{r4, lr}
 80a0dca:	4604      	mov	r4, r0
 80a0dcc:	f7ff ffe2 	bl	80a0d94 <_ZN9TCPClientD1Ev>
 80a0dd0:	4620      	mov	r0, r4
 80a0dd2:	bd10      	pop	{r4, pc}

080a0dd4 <_ZN9TCPClientD0Ev>:
 80a0dd4:	b510      	push	{r4, lr}
 80a0dd6:	4604      	mov	r4, r0
 80a0dd8:	f7ff ffdc 	bl	80a0d94 <_ZN9TCPClientD1Ev>
 80a0ddc:	4620      	mov	r0, r4
 80a0dde:	211c      	movs	r1, #28
 80a0de0:	f004 f9c5 	bl	80a516e <_ZdlPvj>
 80a0de4:	4620      	mov	r0, r4
 80a0de6:	bd10      	pop	{r4, pc}

080a0de8 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
 80a0de8:	b538      	push	{r3, r4, r5, lr}
            ptr += strlen(ptr)+1;
 80a0dea:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
 80a0dec:	4604      	mov	r4, r0
            ptr += strlen(ptr)+1;
 80a0dee:	4628      	mov	r0, r5
 80a0df0:	f005 fbb5 	bl	80a655e <strlen>
 80a0df4:	3001      	adds	r0, #1
 80a0df6:	4428      	add	r0, r5
 80a0df8:	6020      	str	r0, [r4, #0]
            return *this;
        }
 80a0dfa:	4620      	mov	r0, r4
 80a0dfc:	bd38      	pop	{r3, r4, r5, pc}

080a0dfe <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
 80a0dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e00:	4604      	mov	r4, r0
    if (str == NULL) {
 80a0e02:	460f      	mov	r7, r1
 80a0e04:	6846      	ldr	r6, [r0, #4]
 80a0e06:	b921      	cbnz	r1, 80a0e12 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
 80a0e08:	6803      	ldr	r3, [r0, #0]
 80a0e0a:	1c72      	adds	r2, r6, #1
 80a0e0c:	6042      	str	r2, [r0, #4]
 80a0e0e:	5599      	strb	r1, [r3, r6]
        return;
 80a0e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
 80a0e12:	4608      	mov	r0, r1
 80a0e14:	f005 fba3 	bl	80a655e <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
 80a0e18:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0e1a:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
 80a0e1c:	19aa      	adds	r2, r5, r6
 80a0e1e:	429a      	cmp	r2, r3
 80a0e20:	d808      	bhi.n	80a0e34 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
 80a0e22:	6820      	ldr	r0, [r4, #0]
 80a0e24:	462a      	mov	r2, r5
 80a0e26:	4639      	mov	r1, r7
 80a0e28:	4430      	add	r0, r6
 80a0e2a:	f005 fb2f 	bl	80a648c <memcpy>
    len += l;
 80a0e2e:	6863      	ldr	r3, [r4, #4]
 80a0e30:	441d      	add	r5, r3
 80a0e32:	6065      	str	r5, [r4, #4]
 80a0e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0e38 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
 80a0e38:	b570      	push	{r4, r5, r6, lr}
 80a0e3a:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a0e3c:	6840      	ldr	r0, [r0, #4]
 80a0e3e:	68a6      	ldr	r6, [r4, #8]
 80a0e40:	6825      	ldr	r5, [r4, #0]
 80a0e42:	460b      	mov	r3, r1
 80a0e44:	4a04      	ldr	r2, [pc, #16]	; (80a0e58 <_ZN10BlynkParam3addEi+0x20>)
 80a0e46:	1a31      	subs	r1, r6, r0
 80a0e48:	4428      	add	r0, r5
 80a0e4a:	f002 fc05 	bl	80a3658 <snprintf>
 80a0e4e:	6863      	ldr	r3, [r4, #4]
 80a0e50:	3001      	adds	r0, #1
 80a0e52:	4418      	add	r0, r3
 80a0e54:	6060      	str	r0, [r4, #4]
 80a0e56:	bd70      	pop	{r4, r5, r6, pc}
 80a0e58:	080a716e 	.word	0x080a716e

080a0e5c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
 80a0e5c:	b570      	push	{r4, r5, r6, lr}
 80a0e5e:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a0e60:	6840      	ldr	r0, [r0, #4]
 80a0e62:	68a6      	ldr	r6, [r4, #8]
 80a0e64:	6825      	ldr	r5, [r4, #0]
 80a0e66:	460b      	mov	r3, r1
 80a0e68:	4a04      	ldr	r2, [pc, #16]	; (80a0e7c <_ZN10BlynkParam3addEl+0x20>)
 80a0e6a:	1a31      	subs	r1, r6, r0
 80a0e6c:	4428      	add	r0, r5
 80a0e6e:	f002 fbf3 	bl	80a3658 <snprintf>
 80a0e72:	6863      	ldr	r3, [r4, #4]
 80a0e74:	3001      	adds	r0, #1
 80a0e76:	4418      	add	r0, r3
 80a0e78:	6060      	str	r0, [r4, #4]
 80a0e7a:	bd70      	pop	{r4, r5, r6, pc}
 80a0e7c:	080a7171 	.word	0x080a7171

080a0e80 <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
 80a0e80:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
 80a0e82:	6b47      	ldr	r7, [r0, #52]	; 0x34
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
 80a0e84:	b087      	sub	sp, #28
 80a0e86:	4604      	mov	r4, r0
        if (domain) {
 80a0e88:	b1ef      	cbz	r7, 80a0ec6 <_ZN22BlynkTransportParticle7connectEv+0x46>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
 80a0e8a:	f7ff ff37 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a0e8e:	f003 fe01 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0e92:	492f      	ldr	r1, [pc, #188]	; (80a0f50 <_ZN22BlynkTransportParticle7connectEv+0xd0>)
 80a0e94:	f002 ff9b 	bl	80a3dce <_ZN5Print5printEPKc>
 80a0e98:	f003 fdfc 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a0e9e:	f002 ff96 	bl	80a3dce <_ZN5Print5printEPKc>
 80a0ea2:	f003 fdf7 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0ea6:	213a      	movs	r1, #58	; 0x3a
 80a0ea8:	f002 ff95 	bl	80a3dd6 <_ZN5Print5printEc>
 80a0eac:	f003 fdf2 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0eb0:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80a0eb2:	220a      	movs	r2, #10
 80a0eb4:	f003 f816 	bl	80a3ee4 <_ZN5Print7printlnEii>
            return (1 == client.connect(domain, port));
 80a0eb8:	2300      	movs	r3, #0
 80a0eba:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a0ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a0ebe:	4620      	mov	r0, r4
 80a0ec0:	f002 fe90 	bl	80a3be4 <_ZN9TCPClient7connectEPKctm>
 80a0ec4:	e03f      	b.n	80a0f46 <_ZN22BlynkTransportParticle7connectEv+0xc6>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
 80a0ec6:	4625      	mov	r5, r4
 80a0ec8:	f7ff ff18 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a0ecc:	f003 fde2 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0ed0:	491f      	ldr	r1, [pc, #124]	; (80a0f50 <_ZN22BlynkTransportParticle7connectEv+0xd0>)
 80a0ed2:	f002 ff7c 	bl	80a3dce <_ZN5Print5printEPKc>
 80a0ed6:	f003 fddd 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0eda:	220a      	movs	r2, #10
 80a0edc:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80a0ee0:	f002 ffbc 	bl	80a3e5c <_ZN5Print5printEhi>
 80a0ee4:	f003 fdd6 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0ee8:	212e      	movs	r1, #46	; 0x2e
 80a0eea:	f002 ff74 	bl	80a3dd6 <_ZN5Print5printEc>
 80a0eee:	f003 fdd1 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0ef2:	220a      	movs	r2, #10
 80a0ef4:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80a0ef8:	f002 ffb0 	bl	80a3e5c <_ZN5Print5printEhi>
 80a0efc:	f003 fdca 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0f00:	212e      	movs	r1, #46	; 0x2e
 80a0f02:	f002 ff68 	bl	80a3dd6 <_ZN5Print5printEc>
 80a0f06:	f003 fdc5 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0f0a:	220a      	movs	r2, #10
 80a0f0c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80a0f10:	f002 ffa4 	bl	80a3e5c <_ZN5Print5printEhi>
 80a0f14:	f003 fdbe 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0f18:	212e      	movs	r1, #46	; 0x2e
 80a0f1a:	f002 ff5c 	bl	80a3dd6 <_ZN5Print5printEc>
 80a0f1e:	f003 fdb9 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0f22:	220a      	movs	r2, #10
 80a0f24:	f815 1f20 	ldrb.w	r1, [r5, #32]!
 80a0f28:	f002 ff9a 	bl	80a3e60 <_ZN5Print7printlnEhi>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0f2c:	4b09      	ldr	r3, [pc, #36]	; (80a0f54 <_ZN22BlynkTransportParticle7connectEv+0xd4>)
 80a0f2e:	ae01      	add	r6, sp, #4
 80a0f30:	9300      	str	r3, [sp, #0]
 80a0f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0f34:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0f36:	682b      	ldr	r3, [r5, #0]
            return (1 == client.connect(addr, port));
 80a0f38:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a0f3a:	7033      	strb	r3, [r6, #0]
 80a0f3c:	4669      	mov	r1, sp
 80a0f3e:	463b      	mov	r3, r7
 80a0f40:	4620      	mov	r0, r4
 80a0f42:	f002 fd17 	bl	80a3974 <_ZN9TCPClient7connectE9IPAddresstm>
 80a0f46:	1e43      	subs	r3, r0, #1
 80a0f48:	4258      	negs	r0, r3
 80a0f4a:	4158      	adcs	r0, r3
        }
        return 0;
    }
 80a0f4c:	b007      	add	sp, #28
 80a0f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0f50:	080a7175 	.word	0x080a7175
 80a0f54:	080a80a4 	.word	0x080a80a4

080a0f58 <_Z7getTimev>:

/*
* Return time as "minutes of day" = 60*hour + minutes
*/ 
int getTime()
{
 80a0f58:	b510      	push	{r4, lr}
  return(Time.hour()*60 + Time.minute());
 80a0f5a:	f003 f8d5 	bl	80a4108 <_ZN9TimeClass4hourEv>
 80a0f5e:	4604      	mov	r4, r0
 80a0f60:	f003 f8dc 	bl	80a411c <_ZN9TimeClass6minuteEv>
}
 80a0f64:	233c      	movs	r3, #60	; 0x3c
 80a0f66:	fb03 0004 	mla	r0, r3, r4, r0
 80a0f6a:	bd10      	pop	{r4, pc}

080a0f6c <_Z9printTnowi>:

/*
* Print "minutes of day " as hour:minutes
 */
void printTnow(int tnow)
{
 80a0f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int hour = 0;
  int min = 0;

  hour = tnow/60;
 80a0f6e:	243c      	movs	r4, #60	; 0x3c
 80a0f70:	fb90 f4f4 	sdiv	r4, r0, r4
  min = tnow - (hour*60);
 80a0f74:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80a0f78:	fb03 0504 	mla	r5, r3, r4, r0
  Serial.printlnf(" (%02d:%02d)",hour,min);
 80a0f7c:	f003 fd8a 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0f80:	9500      	str	r5, [sp, #0]
 80a0f82:	4623      	mov	r3, r4
 80a0f84:	4a02      	ldr	r2, [pc, #8]	; (80a0f90 <_Z9printTnowi+0x24>)
 80a0f86:	2101      	movs	r1, #1
 80a0f88:	f002 ffb6 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
}
 80a0f8c:	b003      	add	sp, #12
 80a0f8e:	bd30      	pop	{r4, r5, pc}
 80a0f90:	080a7184 	.word	0x080a7184

080a0f94 <_Z12getSleepTimei>:

int getSleepTime (int target)

{
 80a0f94:	b510      	push	{r4, lr}
 80a0f96:	4604      	mov	r4, r0
  target = target - Time.minute();
 80a0f98:	f003 f8c0 	bl	80a411c <_ZN9TimeClass6minuteEv>
 80a0f9c:	1a20      	subs	r0, r4, r0
 80a0f9e:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
  if (target<0) target = 0;
  Serial.printlnf(" proposed sleep duration: %d minutes",target);
 80a0fa2:	f003 fd77 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a0fa6:	4623      	mov	r3, r4
 80a0fa8:	4a02      	ldr	r2, [pc, #8]	; (80a0fb4 <_Z12getSleepTimei+0x20>)
 80a0faa:	2101      	movs	r1, #1
 80a0fac:	f002 ffa4 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  return(target);
}
 80a0fb0:	4620      	mov	r0, r4
 80a0fb2:	bd10      	pop	{r4, pc}
 80a0fb4:	080a7191 	.word	0x080a7191

080a0fb8 <_Z9timeStampv>:

// print the timestamp to serial port and to Blynk terminal
void timeStamp()
{
 80a0fb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  sprintf(timebuffer," %.2d-%.2d-%d %.2d:%.2d:%.2d ",
 80a0fbc:	f003 f8c2 	bl	80a4144 <_ZN9TimeClass3dayEv>
 80a0fc0:	4604      	mov	r4, r0
 80a0fc2:	f003 f8c9 	bl	80a4158 <_ZN9TimeClass5monthEv>
 80a0fc6:	4605      	mov	r5, r0
 80a0fc8:	f003 f8ce 	bl	80a4168 <_ZN9TimeClass4yearEv>
 80a0fcc:	4606      	mov	r6, r0
 80a0fce:	f003 f89b 	bl	80a4108 <_ZN9TimeClass4hourEv>
 80a0fd2:	4607      	mov	r7, r0
 80a0fd4:	f003 f8a2 	bl	80a411c <_ZN9TimeClass6minuteEv>
 80a0fd8:	4680      	mov	r8, r0
 80a0fda:	f003 f8a9 	bl	80a4130 <_ZN9TimeClass6secondEv>
  Time.day(),
  Time.month(),
  Time.year(),
  Time.hour(),
  Time.minute(),
  Time.second());
 80a0fde:	462b      	mov	r3, r5
 80a0fe0:	9003      	str	r0, [sp, #12]
 80a0fe2:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 80a0fe6:	4622      	mov	r2, r4
 80a0fe8:	4909      	ldr	r1, [pc, #36]	; (80a1010 <_Z9timeStampv+0x58>)
 80a0fea:	480a      	ldr	r0, [pc, #40]	; (80a1014 <_Z9timeStampv+0x5c>)
 80a0fec:	f002 fb24 	bl	80a3638 <sprintf>

  if (termEnabled==1)
 80a0ff0:	4b09      	ldr	r3, [pc, #36]	; (80a1018 <_Z9timeStampv+0x60>)
 80a0ff2:	681b      	ldr	r3, [r3, #0]
 80a0ff4:	2b01      	cmp	r3, #1
 80a0ff6:	d103      	bne.n	80a1000 <_Z9timeStampv+0x48>
  {
    terminal.println(timebuffer);
 80a0ff8:	4906      	ldr	r1, [pc, #24]	; (80a1014 <_Z9timeStampv+0x5c>)
 80a0ffa:	4808      	ldr	r0, [pc, #32]	; (80a101c <_Z9timeStampv+0x64>)
 80a0ffc:	f002 fefa 	bl	80a3df4 <_ZN5Print7printlnEPKc>
  }
  Serial.print(timebuffer);
 80a1000:	f003 fd48 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1004:	4903      	ldr	r1, [pc, #12]	; (80a1014 <_Z9timeStampv+0x5c>)
}
 80a1006:	b004      	add	sp, #16
 80a1008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  if (termEnabled==1)
  {
    terminal.println(timebuffer);
  }
  Serial.print(timebuffer);
 80a100c:	f002 bedf 	b.w	80a3dce <_ZN5Print5printEPKc>
 80a1010:	080a71b6 	.word	0x080a71b6
 80a1014:	2000030c 	.word	0x2000030c
 80a1018:	2000002c 	.word	0x2000002c
 80a101c:	200003b0 	.word	0x200003b0

080a1020 <_Z11printStatusv>:

/*---------------------------------------------------------------------
print status infos
---------------------------------------------------------------------*/
void printStatus()
{
 80a1020:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1022:	4b33      	ldr	r3, [pc, #204]	; (80a10f0 <_Z11printStatusv+0xd0>)
 80a1024:	2200      	movs	r2, #0
 80a1026:	4611      	mov	r1, r2
 80a1028:	6858      	ldr	r0, [r3, #4]
 80a102a:	f002 fa75 	bl	80a3518 <network_ready>
 80a102e:	4606      	mov	r6, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1030:	f002 fac2 	bl	80a35b8 <spark_cloud_flag_connected>
  bool cloudReady;

  wifiReady = WiFi.ready();
  cloudReady = Particle.connected();

  Serial.printf(" tnow: %d ",tnow);
 80a1034:	4d2f      	ldr	r5, [pc, #188]	; (80a10f4 <_Z11printStatusv+0xd4>)
 80a1036:	4604      	mov	r4, r0
 80a1038:	f003 fd2c 	bl	80a4a94 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a103c:	682b      	ldr	r3, [r5, #0]
 80a103e:	4a2e      	ldr	r2, [pc, #184]	; (80a10f8 <_Z11printStatusv+0xd8>)
 80a1040:	2100      	movs	r1, #0
 80a1042:	f002 ff59 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  printTnow(tnow);
 80a1046:	6828      	ldr	r0, [r5, #0]
  Serial.printf(" ts_giessen: %d ",ts_giessen);
 80a1048:	4d2c      	ldr	r5, [pc, #176]	; (80a10fc <_Z11printStatusv+0xdc>)

  wifiReady = WiFi.ready();
  cloudReady = Particle.connected();

  Serial.printf(" tnow: %d ",tnow);
  printTnow(tnow);
 80a104a:	f7ff ff8f 	bl	80a0f6c <_Z9printTnowi>
  Serial.printf(" ts_giessen: %d ",ts_giessen);
 80a104e:	f003 fd21 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1052:	682b      	ldr	r3, [r5, #0]
 80a1054:	4a2a      	ldr	r2, [pc, #168]	; (80a1100 <_Z11printStatusv+0xe0>)
 80a1056:	2100      	movs	r1, #0
 80a1058:	f002 ff4e 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  printTnow(ts_giessen);
 80a105c:	6828      	ldr	r0, [r5, #0]
  
  Serial.printf(" Funk Pumpe    -> status: %d ts_off: %d ",st_funk_pumpe, ts_funk_pumpe_off);
 80a105e:	4d29      	ldr	r5, [pc, #164]	; (80a1104 <_Z11printStatusv+0xe4>)
  cloudReady = Particle.connected();

  Serial.printf(" tnow: %d ",tnow);
  printTnow(tnow);
  Serial.printf(" ts_giessen: %d ",ts_giessen);
  printTnow(ts_giessen);
 80a1060:	f7ff ff84 	bl	80a0f6c <_Z9printTnowi>
  
  Serial.printf(" Funk Pumpe    -> status: %d ts_off: %d ",st_funk_pumpe, ts_funk_pumpe_off);
 80a1064:	f003 fd16 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1068:	682b      	ldr	r3, [r5, #0]
 80a106a:	4a27      	ldr	r2, [pc, #156]	; (80a1108 <_Z11printStatusv+0xe8>)
 80a106c:	9300      	str	r3, [sp, #0]
 80a106e:	4b27      	ldr	r3, [pc, #156]	; (80a110c <_Z11printStatusv+0xec>)
 80a1070:	2100      	movs	r1, #0
 80a1072:	681b      	ldr	r3, [r3, #0]
 80a1074:	f002 ff40 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  printTnow(ts_funk_pumpe_off);
 80a1078:	6828      	ldr	r0, [r5, #0]
  Serial.printf(" Main Pumpe    -> status: %d ts_off: %d ",st_main_pumpe, ts_main_pumpe_off);
 80a107a:	4d25      	ldr	r5, [pc, #148]	; (80a1110 <_Z11printStatusv+0xf0>)
  printTnow(tnow);
  Serial.printf(" ts_giessen: %d ",ts_giessen);
  printTnow(ts_giessen);
  
  Serial.printf(" Funk Pumpe    -> status: %d ts_off: %d ",st_funk_pumpe, ts_funk_pumpe_off);
  printTnow(ts_funk_pumpe_off);
 80a107c:	f7ff ff76 	bl	80a0f6c <_Z9printTnowi>
  Serial.printf(" Main Pumpe    -> status: %d ts_off: %d ",st_main_pumpe, ts_main_pumpe_off);
 80a1080:	f003 fd08 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1084:	682b      	ldr	r3, [r5, #0]
 80a1086:	4a23      	ldr	r2, [pc, #140]	; (80a1114 <_Z11printStatusv+0xf4>)
 80a1088:	9300      	str	r3, [sp, #0]
 80a108a:	4b23      	ldr	r3, [pc, #140]	; (80a1118 <_Z11printStatusv+0xf8>)
 80a108c:	2100      	movs	r1, #0
 80a108e:	681b      	ldr	r3, [r3, #0]
 80a1090:	f002 ff32 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  printTnow(ts_main_pumpe_off);
 80a1094:	6828      	ldr	r0, [r5, #0]
  Serial.printf(" Reserve Pumpe -> status: %d ts_off: %d ", st_reserve_pumpe, ts_reserve_off);
 80a1096:	4d21      	ldr	r5, [pc, #132]	; (80a111c <_Z11printStatusv+0xfc>)
  printTnow(ts_giessen);
  
  Serial.printf(" Funk Pumpe    -> status: %d ts_off: %d ",st_funk_pumpe, ts_funk_pumpe_off);
  printTnow(ts_funk_pumpe_off);
  Serial.printf(" Main Pumpe    -> status: %d ts_off: %d ",st_main_pumpe, ts_main_pumpe_off);
  printTnow(ts_main_pumpe_off);
 80a1098:	f7ff ff68 	bl	80a0f6c <_Z9printTnowi>
  Serial.printf(" Reserve Pumpe -> status: %d ts_off: %d ", st_reserve_pumpe, ts_reserve_off);
 80a109c:	f003 fcfa 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a10a0:	682b      	ldr	r3, [r5, #0]
 80a10a2:	4a1f      	ldr	r2, [pc, #124]	; (80a1120 <_Z11printStatusv+0x100>)
 80a10a4:	9300      	str	r3, [sp, #0]
 80a10a6:	4b1f      	ldr	r3, [pc, #124]	; (80a1124 <_Z11printStatusv+0x104>)
 80a10a8:	2100      	movs	r1, #0
 80a10aa:	681b      	ldr	r3, [r3, #0]
 80a10ac:	f002 ff24 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  printTnow(ts_reserve_off);
 80a10b0:	6828      	ldr	r0, [r5, #0]
 80a10b2:	f7ff ff5b 	bl	80a0f6c <_Z9printTnowi>

  Serial.printlnf(" waterlevel: %d ", waterlevel);
 80a10b6:	f003 fced 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a10ba:	4b1b      	ldr	r3, [pc, #108]	; (80a1128 <_Z11printStatusv+0x108>)
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a10bc:	4a1b      	ldr	r2, [pc, #108]	; (80a112c <_Z11printStatusv+0x10c>)
 80a10be:	681b      	ldr	r3, [r3, #0]
 80a10c0:	2101      	movs	r1, #1
 80a10c2:	f002 ff19 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf(" wifi=%s cloud=%s slow_counter=%d ", (wifiReady ? "on" : "off"), (cloudReady ? "on" : "off"), slow_counter);
 80a10c6:	f003 fce5 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a10ca:	4a19      	ldr	r2, [pc, #100]	; (80a1130 <_Z11printStatusv+0x110>)
 80a10cc:	4b19      	ldr	r3, [pc, #100]	; (80a1134 <_Z11printStatusv+0x114>)
 80a10ce:	491a      	ldr	r1, [pc, #104]	; (80a1138 <_Z11printStatusv+0x118>)
 80a10d0:	2c00      	cmp	r4, #0
 80a10d2:	bf14      	ite	ne
 80a10d4:	4614      	movne	r4, r2
 80a10d6:	461c      	moveq	r4, r3
 80a10d8:	6809      	ldr	r1, [r1, #0]
 80a10da:	2e00      	cmp	r6, #0
 80a10dc:	bf18      	it	ne
 80a10de:	4613      	movne	r3, r2
 80a10e0:	9101      	str	r1, [sp, #4]
 80a10e2:	9400      	str	r4, [sp, #0]
 80a10e4:	4a15      	ldr	r2, [pc, #84]	; (80a113c <_Z11printStatusv+0x11c>)
 80a10e6:	2101      	movs	r1, #1
 80a10e8:	f002 ff06 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
}
 80a10ec:	b002      	add	sp, #8
 80a10ee:	bd70      	pop	{r4, r5, r6, pc}
 80a10f0:	2000062c 	.word	0x2000062c
 80a10f4:	2000040c 	.word	0x2000040c
 80a10f8:	080a71d4 	.word	0x080a71d4
 80a10fc:	2000034c 	.word	0x2000034c
 80a1100:	080a71df 	.word	0x080a71df
 80a1104:	20000420 	.word	0x20000420
 80a1108:	080a71f0 	.word	0x080a71f0
 80a110c:	20000370 	.word	0x20000370
 80a1110:	20000344 	.word	0x20000344
 80a1114:	080a7219 	.word	0x080a7219
 80a1118:	20000304 	.word	0x20000304
 80a111c:	20000308 	.word	0x20000308
 80a1120:	080a7242 	.word	0x080a7242
 80a1124:	20000400 	.word	0x20000400
 80a1128:	20000030 	.word	0x20000030
 80a112c:	080a726b 	.word	0x080a726b
 80a1130:	080a744f 	.word	0x080a744f
 80a1134:	080a7461 	.word	0x080a7461
 80a1138:	20000408 	.word	0x20000408
 80a113c:	080a727c 	.word	0x080a727c

080a1140 <_Z17switch_pumpe_mainii>:
Pumpe des Wassertanks einschalten bzw. ausschalten
ACHTUNG : GPIO = 0 schaltet das Relais ein
---------------------------------------------------------------------*/
int switch_pumpe_main (int state, int laufzeit)  // pumpe ein- oder aus

{
 80a1140:	b570      	push	{r4, r5, r6, lr}
 80a1142:	4604      	mov	r4, r0
 80a1144:	460d      	mov	r5, r1
    pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a1146:	2000      	movs	r0, #0
 80a1148:	2101      	movs	r1, #1
 80a114a:	f003 ff21 	bl	80a4f90 <pinMode>
    if (state == ON)
 80a114e:	2c01      	cmp	r4, #1
 80a1150:	4e0e      	ldr	r6, [pc, #56]	; (80a118c <_Z17switch_pumpe_mainii+0x4c>)
 80a1152:	d10e      	bne.n	80a1172 <_Z17switch_pumpe_mainii+0x32>
    {
      digitalWrite(DO_PUMPE_MAIN,0);
 80a1154:	2100      	movs	r1, #0
 80a1156:	4608      	mov	r0, r1
 80a1158:	f003 ff2b 	bl	80a4fb2 <digitalWrite>
      st_main_pumpe=ON;
      WriteToDatabase ( "WASSER", "HAUPT-PUMPE EINGESCHALTET ");    
 80a115c:	490c      	ldr	r1, [pc, #48]	; (80a1190 <_Z17switch_pumpe_mainii+0x50>)
 80a115e:	480d      	ldr	r0, [pc, #52]	; (80a1194 <_Z17switch_pumpe_mainii+0x54>)
{
    pinMode(DO_PUMPE_MAIN, OUTPUT);
    if (state == ON)
    {
      digitalWrite(DO_PUMPE_MAIN,0);
      st_main_pumpe=ON;
 80a1160:	6034      	str	r4, [r6, #0]
      WriteToDatabase ( "WASSER", "HAUPT-PUMPE EINGESCHALTET ");    
 80a1162:	f7ff f9ef 	bl	80a0544 <_Z15WriteToDatabasePcS_>
      ts_main_pumpe_off = tnow + laufzeit; // in 3 Minuten Pumpe abschalten
 80a1166:	4b0c      	ldr	r3, [pc, #48]	; (80a1198 <_Z17switch_pumpe_mainii+0x58>)
 80a1168:	681b      	ldr	r3, [r3, #0]
 80a116a:	441d      	add	r5, r3
 80a116c:	4b0b      	ldr	r3, [pc, #44]	; (80a119c <_Z17switch_pumpe_mainii+0x5c>)
 80a116e:	601d      	str	r5, [r3, #0]
 80a1170:	e009      	b.n	80a1186 <_Z17switch_pumpe_mainii+0x46>

    }
    else
    {
      digitalWrite(DO_PUMPE_MAIN,1);
 80a1172:	2101      	movs	r1, #1
 80a1174:	2000      	movs	r0, #0
 80a1176:	f003 ff1c 	bl	80a4fb2 <digitalWrite>
      st_main_pumpe=OFF;
 80a117a:	2300      	movs	r3, #0
      WriteToDatabase ( "WASSER", "HAUPT-PUMPE AUSGESCHALTET ");       
 80a117c:	4908      	ldr	r1, [pc, #32]	; (80a11a0 <_Z17switch_pumpe_mainii+0x60>)
 80a117e:	4805      	ldr	r0, [pc, #20]	; (80a1194 <_Z17switch_pumpe_mainii+0x54>)

    }
    else
    {
      digitalWrite(DO_PUMPE_MAIN,1);
      st_main_pumpe=OFF;
 80a1180:	6033      	str	r3, [r6, #0]
      WriteToDatabase ( "WASSER", "HAUPT-PUMPE AUSGESCHALTET ");       
 80a1182:	f7ff f9df 	bl	80a0544 <_Z15WriteToDatabasePcS_>
    }
return(state);
}
 80a1186:	4620      	mov	r0, r4
 80a1188:	bd70      	pop	{r4, r5, r6, pc}
 80a118a:	bf00      	nop
 80a118c:	20000304 	.word	0x20000304
 80a1190:	080a729f 	.word	0x080a729f
 80a1194:	080a7001 	.word	0x080a7001
 80a1198:	2000040c 	.word	0x2000040c
 80a119c:	20000344 	.word	0x20000344
 80a11a0:	080a72ba 	.word	0x080a72ba

080a11a4 <_Z20switch_pumpe_reserveii>:
Pumpe des zweiten Wassertanks einschalten bzw. ausschalten
ACHTUNG : GPIO = 0 schaltet das Relais ein
---------------------------------------------------------------------*/
int switch_pumpe_reserve (int state, int laufzeit)

{
 80a11a4:	b570      	push	{r4, r5, r6, lr}
 80a11a6:	4604      	mov	r4, r0
 80a11a8:	460d      	mov	r5, r1
    pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a11aa:	2007      	movs	r0, #7
 80a11ac:	2101      	movs	r1, #1
 80a11ae:	f003 feef 	bl	80a4f90 <pinMode>
    if (state == ON)
 80a11b2:	2c01      	cmp	r4, #1
 80a11b4:	4e0e      	ldr	r6, [pc, #56]	; (80a11f0 <_Z20switch_pumpe_reserveii+0x4c>)
 80a11b6:	d10e      	bne.n	80a11d6 <_Z20switch_pumpe_reserveii+0x32>
    {
      digitalWrite(DO_PUMPE_RESERVE,0);
 80a11b8:	2100      	movs	r1, #0
 80a11ba:	2007      	movs	r0, #7
 80a11bc:	f003 fef9 	bl	80a4fb2 <digitalWrite>
      st_reserve_pumpe = ON;
      WriteToDatabase ( "WASSER", "RESERVE-PUMPE EINGESCHALTET ");
 80a11c0:	490c      	ldr	r1, [pc, #48]	; (80a11f4 <_Z20switch_pumpe_reserveii+0x50>)
 80a11c2:	480d      	ldr	r0, [pc, #52]	; (80a11f8 <_Z20switch_pumpe_reserveii+0x54>)
{
    pinMode(DO_PUMPE_RESERVE, OUTPUT);
    if (state == ON)
    {
      digitalWrite(DO_PUMPE_RESERVE,0);
      st_reserve_pumpe = ON;
 80a11c4:	6034      	str	r4, [r6, #0]
      WriteToDatabase ( "WASSER", "RESERVE-PUMPE EINGESCHALTET ");
 80a11c6:	f7ff f9bd 	bl	80a0544 <_Z15WriteToDatabasePcS_>
       ts_reserve_off = tnow +  laufzeit; // in 2 Minuten Pumpe abschalten     
 80a11ca:	4b0c      	ldr	r3, [pc, #48]	; (80a11fc <_Z20switch_pumpe_reserveii+0x58>)
 80a11cc:	681b      	ldr	r3, [r3, #0]
 80a11ce:	441d      	add	r5, r3
 80a11d0:	4b0b      	ldr	r3, [pc, #44]	; (80a1200 <_Z20switch_pumpe_reserveii+0x5c>)
 80a11d2:	601d      	str	r5, [r3, #0]
 80a11d4:	e009      	b.n	80a11ea <_Z20switch_pumpe_reserveii+0x46>
    }
    else
    {
      digitalWrite(DO_PUMPE_RESERVE,1);
 80a11d6:	2101      	movs	r1, #1
 80a11d8:	2007      	movs	r0, #7
 80a11da:	f003 feea 	bl	80a4fb2 <digitalWrite>
      st_reserve_pumpe=OFF;
 80a11de:	2300      	movs	r3, #0
      WriteToDatabase ( "WASSER", "RESERVE-PUMPE AUSGESCHALTET ");      
 80a11e0:	4908      	ldr	r1, [pc, #32]	; (80a1204 <_Z20switch_pumpe_reserveii+0x60>)
 80a11e2:	4805      	ldr	r0, [pc, #20]	; (80a11f8 <_Z20switch_pumpe_reserveii+0x54>)
       ts_reserve_off = tnow +  laufzeit; // in 2 Minuten Pumpe abschalten     
    }
    else
    {
      digitalWrite(DO_PUMPE_RESERVE,1);
      st_reserve_pumpe=OFF;
 80a11e4:	6033      	str	r3, [r6, #0]
      WriteToDatabase ( "WASSER", "RESERVE-PUMPE AUSGESCHALTET ");      
 80a11e6:	f7ff f9ad 	bl	80a0544 <_Z15WriteToDatabasePcS_>
    }
return(state);
}
 80a11ea:	4620      	mov	r0, r4
 80a11ec:	bd70      	pop	{r4, r5, r6, pc}
 80a11ee:	bf00      	nop
 80a11f0:	20000400 	.word	0x20000400
 80a11f4:	080a72d5 	.word	0x080a72d5
 80a11f8:	080a7001 	.word	0x080a7001
 80a11fc:	2000040c 	.word	0x2000040c
 80a1200:	20000308 	.word	0x20000308
 80a1204:	080a72f2 	.word	0x080a72f2

080a1208 <_Z17switch_pumpe_funkii>:
Funk-Pumpe des Wassertanks einschalten bzw. ausschalten
---------------------------------------------------------------------*/
int switch_pumpe_funk (int state, int laufzeit)  // pumpe ein- oder aus

{
    if (state == ON)
 80a1208:	2801      	cmp	r0, #1
/*---------------------------------------------------------------------
Funk-Pumpe des Wassertanks einschalten bzw. ausschalten
---------------------------------------------------------------------*/
int switch_pumpe_funk (int state, int laufzeit)  // pumpe ein- oder aus

{
 80a120a:	b510      	push	{r4, lr}
 80a120c:	4604      	mov	r4, r0
    if (state == ON)
 80a120e:	d103      	bne.n	80a1218 <_Z17switch_pumpe_funkii+0x10>
 80a1210:	4608      	mov	r0, r1
 80a1212:	f7ff fd95 	bl	80a0d40 <_Z17switch_pumpe_funkii.part.9>
 80a1216:	e00a      	b.n	80a122e <_Z17switch_pumpe_funkii+0x26>
      WriteToDatabase ( "WASSER", "FUNK-PUMPE EINGESCHALTET ");
      ts_funk_pumpe_off = tnow + laufzeit; // in 3 Minuten Pumpe abschalten
    }
    else
    {
      conrad_rsl_switch_code(4,AUS);
 80a1218:	2100      	movs	r1, #0
 80a121a:	2004      	movs	r0, #4
 80a121c:	f001 fd84 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
      st_funk_pumpe=OFF;
 80a1220:	4b04      	ldr	r3, [pc, #16]	; (80a1234 <_Z17switch_pumpe_funkii+0x2c>)
 80a1222:	2200      	movs	r2, #0
      WriteToDatabase ( "WASSER", "FUNK-PUMPE AUSGESCHALTET ");      
 80a1224:	4904      	ldr	r1, [pc, #16]	; (80a1238 <_Z17switch_pumpe_funkii+0x30>)
 80a1226:	4805      	ldr	r0, [pc, #20]	; (80a123c <_Z17switch_pumpe_funkii+0x34>)
      ts_funk_pumpe_off = tnow + laufzeit; // in 3 Minuten Pumpe abschalten
    }
    else
    {
      conrad_rsl_switch_code(4,AUS);
      st_funk_pumpe=OFF;
 80a1228:	601a      	str	r2, [r3, #0]
      WriteToDatabase ( "WASSER", "FUNK-PUMPE AUSGESCHALTET ");      
 80a122a:	f7ff f98b 	bl	80a0544 <_Z15WriteToDatabasePcS_>
    }
return(state);
}
 80a122e:	4620      	mov	r0, r4
 80a1230:	bd10      	pop	{r4, pc}
 80a1232:	bf00      	nop
 80a1234:	20000370 	.word	0x20000370
 80a1238:	080a730f 	.word	0x080a730f
 80a123c:	080a7001 	.word	0x080a7001

080a1240 <_Z18reportDontSleepPinv>:
/*---------------------------------------------------------------------
report to database if DontSleepPin is set
---------------------------------------------------------------------*/
int reportDontSleepPin()

{
 80a1240:	b510      	push	{r4, lr}
  if (digitalRead(DONT_SLEEP_PIN)==HIGH)
 80a1242:	2006      	movs	r0, #6
 80a1244:	f003 fece 	bl	80a4fe4 <digitalRead>
 80a1248:	2801      	cmp	r0, #1
 80a124a:	4c08      	ldr	r4, [pc, #32]	; (80a126c <_Z18reportDontSleepPinv+0x2c>)
 80a124c:	d104      	bne.n	80a1258 <_Z18reportDontSleepPinv+0x18>
  {
    dontSleepHW = 1;
 80a124e:	6020      	str	r0, [r4, #0]
    WriteToDatabase ( "CONTROL", "SLEEP disabled by HW pin ");
 80a1250:	4907      	ldr	r1, [pc, #28]	; (80a1270 <_Z18reportDontSleepPinv+0x30>)
 80a1252:	4808      	ldr	r0, [pc, #32]	; (80a1274 <_Z18reportDontSleepPinv+0x34>)
 80a1254:	f7ff f976 	bl	80a0544 <_Z15WriteToDatabasePcS_>
  }

  if(control.dontSleepSW == 1)
 80a1258:	4b07      	ldr	r3, [pc, #28]	; (80a1278 <_Z18reportDontSleepPinv+0x38>)
 80a125a:	685b      	ldr	r3, [r3, #4]
 80a125c:	2b01      	cmp	r3, #1
 80a125e:	d103      	bne.n	80a1268 <_Z18reportDontSleepPinv+0x28>
  {
    WriteToDatabase ( "CONTROL", "SLEEP disabled by SW ");
 80a1260:	4906      	ldr	r1, [pc, #24]	; (80a127c <_Z18reportDontSleepPinv+0x3c>)
 80a1262:	4804      	ldr	r0, [pc, #16]	; (80a1274 <_Z18reportDontSleepPinv+0x34>)
 80a1264:	f7ff f96e 	bl	80a0544 <_Z15WriteToDatabasePcS_>
  }
return(dontSleepHW);
}
 80a1268:	6820      	ldr	r0, [r4, #0]
 80a126a:	bd10      	pop	{r4, pc}
 80a126c:	20000348 	.word	0x20000348
 80a1270:	080a7329 	.word	0x080a7329
 80a1274:	080a7343 	.word	0x080a7343
 80a1278:	20000410 	.word	0x20000410
 80a127c:	080a734b 	.word	0x080a734b

080a1280 <_ZN5Print8printlnfIIEEEjPKcDpT_>:
 80a1280:	460a      	mov	r2, r1
 80a1282:	2101      	movs	r1, #1
 80a1284:	f002 be38 	b.w	80a3ef8 <_ZN5Print11printf_implEbPKcz>

080a1288 <_ZN5Print8printlnfIImEEEjPKcDpT_>:
 80a1288:	4613      	mov	r3, r2
 80a128a:	460a      	mov	r2, r1
 80a128c:	2101      	movs	r1, #1
 80a128e:	f002 be33 	b.w	80a3ef8 <_ZN5Print11printf_implEbPKcz>
	...

080a1294 <_Z17checkDontSleepPinv>:
/*---------------------------------------------------------------------
check if DontSleepPin is set
---------------------------------------------------------------------*/
int checkDontSleepPin()

{
 80a1294:	b510      	push	{r4, lr}
  if (digitalRead(DONT_SLEEP_PIN)==HIGH)
 80a1296:	2006      	movs	r0, #6
 80a1298:	f003 fea4 	bl	80a4fe4 <digitalRead>
 80a129c:	4c06      	ldr	r4, [pc, #24]	; (80a12b8 <_Z17checkDontSleepPinv+0x24>)
 80a129e:	2801      	cmp	r0, #1
  {
    dontSleepHW = 1;
  }
  else
  {
    dontSleepHW = 0;
 80a12a0:	bf16      	itet	ne
 80a12a2:	2300      	movne	r3, #0
int checkDontSleepPin()

{
  if (digitalRead(DONT_SLEEP_PIN)==HIGH)
  {
    dontSleepHW = 1;
 80a12a4:	6020      	streq	r0, [r4, #0]
  }
  else
  {
    dontSleepHW = 0;
 80a12a6:	6023      	strne	r3, [r4, #0]
  }

  Serial.printlnf(" dontSleep pin : %d ",dontSleepHW);
 80a12a8:	f003 fbf4 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a12ac:	6822      	ldr	r2, [r4, #0]
 80a12ae:	4903      	ldr	r1, [pc, #12]	; (80a12bc <_Z17checkDontSleepPinv+0x28>)
 80a12b0:	f7ff ffea 	bl	80a1288 <_ZN5Print8printlnfIImEEEjPKcDpT_>

return(dontSleepHW);  
}
 80a12b4:	6820      	ldr	r0, [r4, #0]
 80a12b6:	bd10      	pop	{r4, pc}
 80a12b8:	20000348 	.word	0x20000348
 80a12bc:	080a7361 	.word	0x080a7361

080a12c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:

    void sendCmd(uint8_t cmd, uint16_t id = 0, const void* data = NULL, size_t length = 0, const void* data2 = NULL, size_t length2 = 0);

private:

    void internalReconnect() {
 80a12c0:	b508      	push	{r3, lr}
        state = CONNECTING;
 80a12c2:	2300      	movs	r3, #0
 80a12c4:	7743      	strb	r3, [r0, #29]

    void disconnect() { client.stop(); }
 80a12c6:	6800      	ldr	r0, [r0, #0]
 80a12c8:	f002 fb3a 	bl	80a3940 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
 80a12cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
 80a12d0:	f001 be4c 	b.w	80a2f6c <BlynkNoOpCbk>

080a12d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a12d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff); }
    iterator end() const   { return iterator(buff+len); }
 80a12d8:	188e      	adds	r6, r1, r2
 80a12da:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a12dc:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a12de:	4607      	mov	r7, r0
 80a12e0:	460d      	mov	r5, r1
 80a12e2:	4690      	mov	r8, r2
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
 80a12e4:	9106      	str	r1, [sp, #24]
    if (it >= param.end())
 80a12e6:	f080 80f8 	bcs.w	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
 80a12ea:	880b      	ldrh	r3, [r1, #0]
    if (++it >= param.end())
 80a12ec:	a806      	add	r0, sp, #24
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
 80a12ee:	f8ad 3016 	strh.w	r3, [sp, #22]
    if (++it >= param.end())
 80a12f2:	f7ff fd79 	bl	80a0de8 <_ZN10BlynkParam8iteratorppEv>
 80a12f6:	6803      	ldr	r3, [r0, #0]
 80a12f8:	42b3      	cmp	r3, r6
 80a12fa:	f080 80ee 	bcs.w	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { return atoi(ptr); }
 80a12fe:	9806      	ldr	r0, [sp, #24]
 80a1300:	f004 ffb6 	bl	80a6270 <atoi>
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);

    switch(cmd16) {
 80a1304:	f247 2276 	movw	r2, #29302	; 0x7276
 80a1308:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
 80a130c:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
 80a130e:	4293      	cmp	r3, r2
 80a1310:	f000 809e 	beq.w	80a1450 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x17c>
 80a1314:	d80d      	bhi.n	80a1332 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
 80a1316:	f247 2261 	movw	r2, #29281	; 0x7261
 80a131a:	4293      	cmp	r3, r2
 80a131c:	d064      	beq.n	80a13e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x114>
 80a131e:	f247 2264 	movw	r2, #29284	; 0x7264
 80a1322:	4293      	cmp	r3, r2
 80a1324:	d038      	beq.n	80a1398 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
 80a1326:	f646 5270 	movw	r2, #28016	; 0x6d70
 80a132a:	4293      	cmp	r3, r2
 80a132c:	f040 80bc 	bne.w	80a14a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d4>
 80a1330:	e02e      	b.n	80a1390 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbc>
 80a1332:	f247 7264 	movw	r2, #30564	; 0x7764
 80a1336:	4293      	cmp	r3, r2
 80a1338:	d040      	beq.n	80a13bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe8>
 80a133a:	f247 7276 	movw	r2, #30582	; 0x7776
 80a133e:	4293      	cmp	r3, r2
 80a1340:	f000 8097 	beq.w	80a1472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19e>
 80a1344:	f247 7261 	movw	r2, #30561	; 0x7761
 80a1348:	4293      	cmp	r3, r2
 80a134a:	f040 80ad 	bne.w	80a14a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d4>
 80a134e:	e06c      	b.n	80a142a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
 80a1350:	f004 ff8e 	bl	80a6270 <atoi>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
 80a1354:	b2c5      	uxtb	r5, r0
            ++it;
 80a1356:	a806      	add	r0, sp, #24
 80a1358:	f7ff fd46 	bl	80a0de8 <_ZN10BlynkParam8iteratorppEv>
        iterator(char* c) : ptr(c) {}
        static iterator invalid() { return iterator(NULL); }

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
 80a135c:	9c06      	ldr	r4, [sp, #24]
            if (!strcmp(it.asStr(), "in")) {
 80a135e:	4960      	ldr	r1, [pc, #384]	; (80a14e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
 80a1360:	4620      	mov	r0, r4
 80a1362:	f005 f8cf 	bl	80a6504 <strcmp>
 80a1366:	4601      	mov	r1, r0
 80a1368:	2800      	cmp	r0, #0
 80a136a:	f000 80b2 	beq.w	80a14d2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fe>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a136e:	495d      	ldr	r1, [pc, #372]	; (80a14e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
 80a1370:	4620      	mov	r0, r4
 80a1372:	f005 f8c7 	bl	80a6504 <strcmp>
 80a1376:	2800      	cmp	r0, #0
 80a1378:	f000 80aa 	beq.w	80a14d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
 80a137c:	495a      	ldr	r1, [pc, #360]	; (80a14e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x214>)
 80a137e:	4620      	mov	r0, r4
 80a1380:	f005 f8c0 	bl	80a6504 <strcmp>
 80a1384:	2800      	cmp	r0, #0
 80a1386:	f000 80a3 	beq.w	80a14d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
 80a138a:	a806      	add	r0, sp, #24
 80a138c:	f7ff fd2c 	bl	80a0de8 <_ZN10BlynkParam8iteratorppEv>
        float       asFloat() const     { return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL; }
        bool isEmpty() const            { return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
 80a1390:	9806      	ldr	r0, [sp, #24]
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
 80a1392:	42b0      	cmp	r0, r6
 80a1394:	d3dc      	bcc.n	80a1350 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x7c>
 80a1396:	e0a0      	b.n	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a1398:	ab0a      	add	r3, sp, #40	; 0x28
 80a139a:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
 80a139c:	a807      	add	r0, sp, #28
 80a139e:	2310      	movs	r3, #16
 80a13a0:	2500      	movs	r5, #0
 80a13a2:	4952      	ldr	r1, [pc, #328]	; (80a14ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x218>)
 80a13a4:	9309      	str	r3, [sp, #36]	; 0x24
 80a13a6:	9508      	str	r5, [sp, #32]
 80a13a8:	f7ff fd29 	bl	80a0dfe <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
 80a13ac:	a807      	add	r0, sp, #28
 80a13ae:	4621      	mov	r1, r4
 80a13b0:	f7ff fd42 	bl	80a0e38 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
 80a13b4:	4620      	mov	r0, r4
 80a13b6:	f003 fe15 	bl	80a4fe4 <digitalRead>
 80a13ba:	e026      	b.n	80a140a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x136>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
 80a13bc:	a806      	add	r0, sp, #24
 80a13be:	f7ff fd13 	bl	80a0de8 <_ZN10BlynkParam8iteratorppEv>
 80a13c2:	6803      	ldr	r3, [r0, #0]
 80a13c4:	42b3      	cmp	r3, r6
 80a13c6:	f080 8088 	bcs.w	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
 80a13ca:	b2a4      	uxth	r4, r4
 80a13cc:	2101      	movs	r1, #1
 80a13ce:	4620      	mov	r0, r4
 80a13d0:	f003 fdde 	bl	80a4f90 <pinMode>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { return atoi(ptr); }
 80a13d4:	9806      	ldr	r0, [sp, #24]
 80a13d6:	f004 ff4b 	bl	80a6270 <atoi>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
 80a13da:	1c01      	adds	r1, r0, #0
 80a13dc:	bf18      	it	ne
 80a13de:	2101      	movne	r1, #1
 80a13e0:	4620      	mov	r0, r4
 80a13e2:	f003 fde6 	bl	80a4fb2 <digitalWrite>
    } break;
 80a13e6:	e078      	b.n	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a13e8:	ab0a      	add	r3, sp, #40	; 0x28
 80a13ea:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
 80a13ec:	4940      	ldr	r1, [pc, #256]	; (80a14f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x21c>)
 80a13ee:	2310      	movs	r3, #16
 80a13f0:	a807      	add	r0, sp, #28
 80a13f2:	2500      	movs	r5, #0
 80a13f4:	9309      	str	r3, [sp, #36]	; 0x24
 80a13f6:	9508      	str	r5, [sp, #32]
 80a13f8:	f7ff fd01 	bl	80a0dfe <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
 80a13fc:	a807      	add	r0, sp, #28
 80a13fe:	4621      	mov	r1, r4
 80a1400:	f7ff fd1a 	bl	80a0e38 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
 80a1404:	4620      	mov	r0, r4
 80a1406:	f003 fe00 	bl	80a500a <analogRead>
 80a140a:	4601      	mov	r1, r0
 80a140c:	a807      	add	r0, sp, #28
 80a140e:	f7ff fd25 	bl	80a0e5c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
 80a1412:	462a      	mov	r2, r5
 80a1414:	9b08      	ldr	r3, [sp, #32]
 80a1416:	9502      	str	r5, [sp, #8]
 80a1418:	3b01      	subs	r3, #1
 80a141a:	9300      	str	r3, [sp, #0]
 80a141c:	9b07      	ldr	r3, [sp, #28]
 80a141e:	9501      	str	r5, [sp, #4]
 80a1420:	2114      	movs	r1, #20
 80a1422:	4638      	mov	r0, r7
 80a1424:	f000 fac4 	bl	80a19b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
 80a1428:	e057      	b.n	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
 80a142a:	a806      	add	r0, sp, #24
 80a142c:	f7ff fcdc 	bl	80a0de8 <_ZN10BlynkParam8iteratorppEv>
 80a1430:	6803      	ldr	r3, [r0, #0]
 80a1432:	429e      	cmp	r6, r3
 80a1434:	d951      	bls.n	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
 80a1436:	b2a4      	uxth	r4, r4
 80a1438:	2101      	movs	r1, #1
 80a143a:	4620      	mov	r0, r4
 80a143c:	f003 fda8 	bl	80a4f90 <pinMode>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { return atoi(ptr); }
 80a1440:	9806      	ldr	r0, [sp, #24]
 80a1442:	f004 ff15 	bl	80a6270 <atoi>
#endif
        analogWrite(pin, it.asInt());
 80a1446:	4601      	mov	r1, r0
 80a1448:	4620      	mov	r0, r4
 80a144a:	f003 fdf5 	bl	80a5038 <_Z11analogWritetm>
    } break;
 80a144e:	e044      	b.n	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
 80a1450:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
 80a1452:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
 80a1454:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
 80a1458:	f001 fd8a 	bl	80a2f70 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
 80a145c:	4603      	mov	r3, r0
            handler(req);
 80a145e:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
 80a1460:	b123      	cbz	r3, 80a146c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x198>
 80a1462:	4a24      	ldr	r2, [pc, #144]	; (80a14f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x220>)
 80a1464:	4293      	cmp	r3, r2
 80a1466:	d001      	beq.n	80a146c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x198>
            handler(req);
 80a1468:	4798      	blx	r3
 80a146a:	e036      	b.n	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
        } else {
            BlynkWidgetReadDefault(req);
 80a146c:	f001 fd7c 	bl	80a2f68 <BlynkWidgetRead>
        }
    } break;
 80a1470:	e033      	b.n	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
    case BLYNK_HW_VW: {
        ++it;
 80a1472:	a806      	add	r0, sp, #24
 80a1474:	f7ff fcb8 	bl	80a0de8 <_ZN10BlynkParam8iteratorppEv>
        iterator(char* c) : ptr(c) {}
        static iterator invalid() { return iterator(NULL); }

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
 80a1478:	9b06      	ldr	r3, [sp, #24]
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a147a:	4620      	mov	r0, r4
        }
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
 80a147c:	1b5d      	subs	r5, r3, r5
 80a147e:	ebc5 0508 	rsb	r5, r5, r8
    };

public:
    explicit
    BlynkParam(void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
 80a1482:	930a      	str	r3, [sp, #40]	; 0x28
 80a1484:	950b      	str	r5, [sp, #44]	; 0x2c
 80a1486:	950c      	str	r5, [sp, #48]	; 0x30
        BlynkReq req = { pin };
 80a1488:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a148c:	f001 fd7a 	bl	80a2f84 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
 80a1490:	4603      	mov	r3, r0
            handler(req, param2);
 80a1492:	a90a      	add	r1, sp, #40	; 0x28
 80a1494:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
 80a1496:	b123      	cbz	r3, 80a14a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ce>
 80a1498:	4a17      	ldr	r2, [pc, #92]	; (80a14f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x224>)
 80a149a:	4293      	cmp	r3, r2
 80a149c:	d001      	beq.n	80a14a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ce>
            handler(req, param2);
 80a149e:	4798      	blx	r3
 80a14a0:	e01b      	b.n	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
        } else {
            BlynkWidgetWriteDefault(req, param2);
 80a14a2:	f001 fd62 	bl	80a2f6a <BlynkWidgetWrite>
        }
    } break;
 80a14a6:	e018      	b.n	80a14da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
 80a14a8:	f7ff fc28 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a14ac:	f003 faf2 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a14b0:	4912      	ldr	r1, [pc, #72]	; (80a14fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x228>)
 80a14b2:	f002 fc8c 	bl	80a3dce <_ZN5Print5printEPKc>
 80a14b6:	f003 faed 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a14ba:	4629      	mov	r1, r5
 80a14bc:	f002 fc9a 	bl	80a3df4 <_ZN5Print7printlnEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a14c0:	2300      	movs	r3, #0
 80a14c2:	2102      	movs	r1, #2
 80a14c4:	8b7a      	ldrh	r2, [r7, #26]
 80a14c6:	9100      	str	r1, [sp, #0]
 80a14c8:	9302      	str	r3, [sp, #8]
 80a14ca:	9301      	str	r3, [sp, #4]
 80a14cc:	4619      	mov	r1, r3
 80a14ce:	e7a8      	b.n	80a1422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x14e>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
 80a14d0:	2101      	movs	r1, #1
 80a14d2:	4628      	mov	r0, r5
 80a14d4:	f003 fd5c 	bl	80a4f90 <pinMode>
 80a14d8:	e757      	b.n	80a138a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xb6>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
 80a14da:	b00e      	add	sp, #56	; 0x38
 80a14dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a14e0:	080a7376 	.word	0x080a7376
 80a14e4:	080a741d 	.word	0x080a741d
 80a14e8:	080a7379 	.word	0x080a7379
 80a14ec:	080a737d 	.word	0x080a737d
 80a14f0:	080a7380 	.word	0x080a7380
 80a14f4:	080a2f69 	.word	0x080a2f69
 80a14f8:	080a2f6b 	.word	0x080a2f6b
 80a14fc:	080a7383 	.word	0x080a7383

080a1500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
 80a1500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1504:	b08c      	sub	sp, #48	; 0x30
 80a1506:	af04      	add	r7, sp, #16
 80a1508:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
 80a150a:	2205      	movs	r2, #5
 80a150c:	f107 010c 	add.w	r1, r7, #12
 80a1510:	6800      	ldr	r0, [r0, #0]
 80a1512:	f002 fd40 	bl	80a3f96 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
 80a1516:	2800      	cmp	r0, #0
 80a1518:	f000 8180 	beq.w	80a181c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31c>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
 80a151c:	2805      	cmp	r0, #5
 80a151e:	d001      	beq.n	80a1524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
 80a1520:	2000      	movs	r0, #0
 80a1522:	e17c      	b.n	80a181e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31e>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a1524:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
 80a1528:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a152c:	0a13      	lsrs	r3, r2, #8
 80a152e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
 80a1532:	0a23      	lsrs	r3, r4, #8
 80a1534:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a1538:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
 80a153a:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a153c:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
 80a1540:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
 80a1544:	2a00      	cmp	r2, #0
 80a1546:	d0eb      	beq.n	80a1520 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
 80a1548:	7b3b      	ldrb	r3, [r7, #12]
 80a154a:	2b00      	cmp	r3, #0
 80a154c:	d14d      	bne.n	80a15ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        lastActivityIn = BlynkMillis();
 80a154e:	f001 fd07 	bl	80a2f60 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a1552:	7f6c      	ldrb	r4, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
 80a1554:	60e8      	str	r0, [r5, #12]
 80a1556:	f8b7 000f 	ldrh.w	r0, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a155a:	2c00      	cmp	r4, #0
 80a155c:	d141      	bne.n	80a15e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe2>
 80a155e:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80a1562:	2b01      	cmp	r3, #1
 80a1564:	d13d      	bne.n	80a15e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe2>
            switch (hdr.length) {
 80a1566:	2809      	cmp	r0, #9
 80a1568:	d024      	beq.n	80a15b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xb4>
 80a156a:	28c8      	cmp	r0, #200	; 0xc8
 80a156c:	d001      	beq.n	80a1572 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
 80a156e:	2804      	cmp	r0, #4
 80a1570:	d128      	bne.n	80a15c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xc4>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
 80a1572:	f7ff fbc3 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a1576:	f003 fa8d 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a157a:	49ab      	ldr	r1, [pc, #684]	; (80a1828 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x328>)
 80a157c:	f002 fc27 	bl	80a3dce <_ZN5Print5printEPKc>
 80a1580:	f003 fa88 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1584:	696b      	ldr	r3, [r5, #20]
 80a1586:	68e9      	ldr	r1, [r5, #12]
 80a1588:	220a      	movs	r2, #10
 80a158a:	1ac9      	subs	r1, r1, r3
 80a158c:	f002 fc5b 	bl	80a3e46 <_ZN5Print5printEmi>
 80a1590:	f003 fa80 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1594:	49a5      	ldr	r1, [pc, #660]	; (80a182c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x32c>)
 80a1596:	f002 fc2d 	bl	80a3df4 <_ZN5Print7printlnEPKc>
                lastHeartbeat = lastActivityIn;
 80a159a:	68eb      	ldr	r3, [r5, #12]
                state = CONNECTED;
 80a159c:	2401      	movs	r4, #1
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
 80a159e:	4628      	mov	r0, r5
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
 80a15a0:	616b      	str	r3, [r5, #20]
                state = CONNECTED;
 80a15a2:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
 80a15a4:	f000 fabc 	bl	80a1b20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
 80a15a8:	f7ff fbe8 	bl	80a0d7c <_ZN10CloudClass7processEv>
                BlynkOnConnected();
 80a15ac:	f001 fcde 	bl	80a2f6c <BlynkNoOpCbk>
 80a15b0:	4620      	mov	r0, r4
 80a15b2:	e134      	b.n	80a181e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31e>
                return true;
            case BLYNK_INVALID_TOKEN:
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
 80a15b4:	f7ff fba2 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a15b8:	f003 fa6c 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a15bc:	499c      	ldr	r1, [pc, #624]	; (80a1830 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x330>)
 80a15be:	f002 fc19 	bl	80a3df4 <_ZN5Print7printlnEPKc>
 80a15c2:	e7ad      	b.n	80a1520 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
                break;
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
 80a15c4:	f7ff fb9a 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a15c8:	f003 fa64 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a15cc:	4999      	ldr	r1, [pc, #612]	; (80a1834 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x334>)
 80a15ce:	f002 fbfe 	bl	80a3dce <_ZN5Print5printEPKc>
 80a15d2:	f003 fa5f 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a15d6:	220a      	movs	r2, #10
 80a15d8:	f8b7 100f 	ldrh.w	r1, [r7, #15]
 80a15dc:	f002 fc82 	bl	80a3ee4 <_ZN5Print7printlnEii>
 80a15e0:	e79e      	b.n	80a1520 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
 80a15e2:	3805      	subs	r0, #5
 80a15e4:	bf18      	it	ne
 80a15e6:	2001      	movne	r0, #1
 80a15e8:	e119      	b.n	80a181e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31e>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
 80a15ea:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80a15ee:	d911      	bls.n	80a1614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x114>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
 80a15f0:	f7ff fb84 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a15f4:	f003 fa4e 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a15f8:	498f      	ldr	r1, [pc, #572]	; (80a1838 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x338>)
 80a15fa:	f002 fbe8 	bl	80a3dce <_ZN5Print5printEPKc>
 80a15fe:	f003 fa49 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1602:	220a      	movs	r2, #10
 80a1604:	f8b7 100f 	ldrh.w	r1, [r7, #15]
 80a1608:	f002 fc6c 	bl	80a3ee4 <_ZN5Print7printlnEii>
        // TODO: Flush
        internalReconnect();
 80a160c:	4628      	mov	r0, r5
 80a160e:	f7ff fe57 	bl	80a12c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a1612:	e103      	b.n	80a181c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31c>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
 80a1614:	f104 0308 	add.w	r3, r4, #8
 80a1618:	f023 0307 	bic.w	r3, r3, #7
 80a161c:	46e8      	mov	r8, sp
 80a161e:	ebad 0d03 	sub.w	sp, sp, r3
 80a1622:	ae04      	add	r6, sp, #16
 80a1624:	4622      	mov	r2, r4
 80a1626:	4631      	mov	r1, r6
 80a1628:	6828      	ldr	r0, [r5, #0]
 80a162a:	f002 fcb4 	bl	80a3f96 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
 80a162e:	4284      	cmp	r4, r0
 80a1630:	f04f 0400 	mov.w	r4, #0
 80a1634:	f040 80ed 	bne.w	80a1812 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x312>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
 80a1638:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a163c:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
 80a163e:	f001 fc8f 	bl	80a2f60 <_Z11BlynkMillisv>

    switch (hdr.type)
 80a1642:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
 80a1644:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
 80a1646:	2b11      	cmp	r3, #17
 80a1648:	f000 808d 	beq.w	80a1766 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x266>
 80a164c:	d806      	bhi.n	80a165c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x15c>
 80a164e:	2b06      	cmp	r3, #6
 80a1650:	d027      	beq.n	80a16a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a2>
 80a1652:	2b0f      	cmp	r3, #15
 80a1654:	d07a      	beq.n	80a174c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
 80a1656:	2b02      	cmp	r3, #2
 80a1658:	d009      	beq.n	80a166e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16e>
 80a165a:	e0d6      	b.n	80a180a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x30a>
 80a165c:	2b29      	cmp	r3, #41	; 0x29
 80a165e:	d02c      	beq.n	80a16ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ba>
 80a1660:	2b37      	cmp	r3, #55	; 0x37
 80a1662:	f000 80c2 	beq.w	80a17ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ea>
 80a1666:	2b14      	cmp	r3, #20
 80a1668:	f040 80cf 	bne.w	80a180a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x30a>
 80a166c:	e06e      	b.n	80a174c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
 80a166e:	7f6b      	ldrb	r3, [r5, #29]
 80a1670:	b97b      	cbnz	r3, 80a1692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            BLYNK_LOG1(BLYNK_F("Ready"));
 80a1672:	f7ff fb43 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a1676:	f003 fa0d 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a167a:	4970      	ldr	r1, [pc, #448]	; (80a183c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x33c>)
 80a167c:	f002 fbba 	bl	80a3df4 <_ZN5Print7printlnEPKc>
            state = CONNECTED;
 80a1680:	2301      	movs	r3, #1
 80a1682:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
 80a1684:	4628      	mov	r0, r5
 80a1686:	f000 fa4b 	bl	80a1b20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
 80a168a:	f7ff fb77 	bl	80a0d7c <_ZN10CloudClass7processEv>
            BlynkOnConnected();
 80a168e:	f001 fc6d 	bl	80a2f6c <BlynkNoOpCbk>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a1692:	2300      	movs	r3, #0
 80a1694:	21c8      	movs	r1, #200	; 0xc8
 80a1696:	f8b7 200d 	ldrh.w	r2, [r7, #13]
 80a169a:	9302      	str	r3, [sp, #8]
 80a169c:	9301      	str	r3, [sp, #4]
 80a169e:	9100      	str	r1, [sp, #0]
 80a16a0:	e006      	b.n	80a16b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a16a2:	23c8      	movs	r3, #200	; 0xc8
 80a16a4:	f8b7 200d 	ldrh.w	r2, [r7, #13]
 80a16a8:	9300      	str	r3, [sp, #0]
 80a16aa:	4623      	mov	r3, r4
 80a16ac:	9402      	str	r4, [sp, #8]
 80a16ae:	9401      	str	r4, [sp, #4]
 80a16b0:	4619      	mov	r1, r3
 80a16b2:	4628      	mov	r0, r5
 80a16b4:	f000 f97c 	bl	80a19b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
 80a16b8:	e0ad      	b.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
 80a16ba:	68ab      	ldr	r3, [r5, #8]
 80a16bc:	b91b      	cbnz	r3, 80a16c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c6>
             redir_serv = (char*)malloc(32);
 80a16be:	2020      	movs	r0, #32
 80a16c0:	f001 ffa2 	bl	80a3608 <malloc>
 80a16c4:	60a8      	str	r0, [r5, #8]
        }
        BlynkParam param(inputBuffer, hdr.length);
 80a16c6:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
 80a16ca:	617e      	str	r6, [r7, #20]
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff); }
    iterator end() const   { return iterator(buff+len); }
 80a16cc:	4434      	add	r4, r6
        if (it >= param.end())
 80a16ce:	42a6      	cmp	r6, r4
 80a16d0:	d301      	bcc.n	80a16d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1d6>
            return false;
 80a16d2:	2000      	movs	r0, #0
 80a16d4:	e0a0      	b.n	80a1818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x318>
        strncpy(redir_serv, it.asStr(), 32);
 80a16d6:	2220      	movs	r2, #32
 80a16d8:	4631      	mov	r1, r6
 80a16da:	68a8      	ldr	r0, [r5, #8]
 80a16dc:	f004 ff5c 	bl	80a6598 <strncpy>
        if (++it < param.end())
 80a16e0:	f107 0014 	add.w	r0, r7, #20
 80a16e4:	f7ff fb80 	bl	80a0de8 <_ZN10BlynkParam8iteratorppEv>
 80a16e8:	6803      	ldr	r3, [r0, #0]
 80a16ea:	42a3      	cmp	r3, r4
 80a16ec:	d204      	bcs.n	80a16f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { return atoi(ptr); }
        long        asLong() const      { return atol(ptr); }
 80a16ee:	6978      	ldr	r0, [r7, #20]
 80a16f0:	f004 fdc2 	bl	80a6278 <atol>
            redir_port = it.asLong();
 80a16f4:	b284      	uxth	r4, r0
 80a16f6:	e000      	b.n	80a16fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
 80a16f8:	2450      	movs	r4, #80	; 0x50
        if (it >= param.end())
            return false;
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
 80a16fa:	f7ff faff 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a16fe:	f003 f9c9 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1702:	494f      	ldr	r1, [pc, #316]	; (80a1840 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x340>)
 80a1704:	f002 fb63 	bl	80a3dce <_ZN5Print5printEPKc>
 80a1708:	f003 f9c4 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a170c:	68a9      	ldr	r1, [r5, #8]
 80a170e:	f002 fb5e 	bl	80a3dce <_ZN5Print5printEPKc>
 80a1712:	f003 f9bf 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1716:	213a      	movs	r1, #58	; 0x3a
 80a1718:	f002 fb5d 	bl	80a3dd6 <_ZN5Print5printEc>
 80a171c:	f003 f9ba 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1720:	220a      	movs	r2, #10
 80a1722:	4621      	mov	r1, r4
 80a1724:	f002 fbde 	bl	80a3ee4 <_ZN5Print7printlnEii>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a1728:	6828      	ldr	r0, [r5, #0]
 80a172a:	f002 f909 	bl	80a3940 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
 80a172e:	682b      	ldr	r3, [r5, #0]
 80a1730:	68aa      	ldr	r2, [r5, #8]
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
 80a1732:	871c      	strh	r4, [r3, #56]	; 0x38
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
 80a1734:	635a      	str	r2, [r3, #52]	; 0x34
        state = CONNECTING;
 80a1736:	2300      	movs	r3, #0
 80a1738:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a173a:	f001 fc11 	bl	80a2f60 <_Z11BlynkMillisv>
 80a173e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a1742:	3808      	subs	r0, #8
 80a1744:	6128      	str	r0, [r5, #16]
 80a1746:	60e8      	str	r0, [r5, #12]
 80a1748:	6168      	str	r0, [r5, #20]
 80a174a:	e064      	b.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
 80a174c:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
 80a174e:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
 80a1752:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80a1756:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
 80a1758:	4631      	mov	r1, r6
 80a175a:	4628      	mov	r0, r5
 80a175c:	f7ff fdba 	bl	80a12d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
 80a1760:	2300      	movs	r3, #0
 80a1762:	836b      	strh	r3, [r5, #26]
 80a1764:	e057      	b.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
        BlynkParam param(inputBuffer, hdr.length);
 80a1766:	f8b7 300f 	ldrh.w	r3, [r7, #15]
        msgIdOutOverride = hdr.msg_id;
        this->processCmd(inputBuffer, hdr.length);
        msgIdOutOverride = 0;
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
 80a176a:	703c      	strb	r4, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
 80a176c:	4433      	add	r3, r6
 80a176e:	429e      	cmp	r6, r3
        msgIdOutOverride = 0;
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
 80a1770:	607e      	str	r6, [r7, #4]
        if (it >= param.end())
 80a1772:	d250      	bcs.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
 80a1774:	6830      	ldr	r0, [r6, #0]
 80a1776:	60b8      	str	r0, [r7, #8]

        ++it;
 80a1778:	1d38      	adds	r0, r7, #4
 80a177a:	f7ff fb35 	bl	80a0de8 <_ZN10BlynkParam8iteratorppEv>
        iterator(char* c) : ptr(c) {}
        static iterator invalid() { return iterator(NULL); }

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
 80a177e:	687a      	ldr	r2, [r7, #4]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
 80a1780:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a1784:	1b96      	subs	r6, r2, r6
 80a1786:	1b9e      	subs	r6, r3, r6
    };

public:
    explicit
    BlynkParam(void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
 80a1788:	617a      	str	r2, [r7, #20]
        BlynkParam param2(start, length);

        switch (cmd32) {
 80a178a:	68bb      	ldr	r3, [r7, #8]
 80a178c:	4a2d      	ldr	r2, [pc, #180]	; (80a1844 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x344>)
 80a178e:	61be      	str	r6, [r7, #24]
 80a1790:	4293      	cmp	r3, r2
 80a1792:	61fe      	str	r6, [r7, #28]
 80a1794:	d01d      	beq.n	80a17d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2d2>
 80a1796:	d80b      	bhi.n	80a17b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b0>
 80a1798:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
 80a179c:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
 80a17a0:	4293      	cmp	r3, r2
 80a17a2:	d138      	bne.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
 80a17a4:	f107 0114 	add.w	r1, r7, #20
 80a17a8:	4638      	mov	r0, r7
 80a17aa:	f001 fbde 	bl	80a2f6a <BlynkWidgetWrite>
 80a17ae:	e032      	b.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
 80a17b0:	4a25      	ldr	r2, [pc, #148]	; (80a1848 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x348>)
 80a17b2:	4293      	cmp	r3, r2
 80a17b4:	d013      	beq.n	80a17de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2de>
 80a17b6:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
 80a17ba:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 80a17be:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80a17c2:	4293      	cmp	r3, r2
 80a17c4:	d127      	bne.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
 80a17c6:	f107 0114 	add.w	r1, r7, #20
 80a17ca:	4638      	mov	r0, r7
 80a17cc:	f001 fbcd 	bl	80a2f6a <BlynkWidgetWrite>
 80a17d0:	e021      	b.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
 80a17d2:	f107 0114 	add.w	r1, r7, #20
 80a17d6:	4638      	mov	r0, r7
 80a17d8:	f001 fbc7 	bl	80a2f6a <BlynkWidgetWrite>
 80a17dc:	e01b      	b.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
 80a17de:	f107 0114 	add.w	r1, r7, #20
 80a17e2:	4638      	mov	r0, r7
 80a17e4:	f001 fbc1 	bl	80a2f6a <BlynkWidgetWrite>
 80a17e8:	e015      	b.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
        default:             BLYNK_LOG2(BLYNK_F("Invalid internal cmd:"), param.asStr());
#endif
        }
    } break;
    case BLYNK_CMD_DEBUG_PRINT: {
        if (hdr.length) {
 80a17ea:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a17ee:	b193      	cbz	r3, 80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
 80a17f0:	f7ff fa84 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a17f4:	f003 f94e 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a17f8:	4914      	ldr	r1, [pc, #80]	; (80a184c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34c>)
 80a17fa:	f002 fae8 	bl	80a3dce <_ZN5Print5printEPKc>
 80a17fe:	f003 f949 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1802:	4631      	mov	r1, r6
 80a1804:	f002 faf6 	bl	80a3df4 <_ZN5Print7printlnEPKc>
 80a1808:	e005      	b.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
 80a180a:	4628      	mov	r0, r5
 80a180c:	f7ff fd58 	bl	80a12c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a1810:	e001      	b.n	80a1816 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x316>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
 80a1812:	4620      	mov	r0, r4
 80a1814:	e000      	b.n	80a1818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x318>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
 80a1816:	2001      	movs	r0, #1
 80a1818:	46c5      	mov	sp, r8
 80a181a:	e000      	b.n	80a181e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31e>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
 80a181c:	2001      	movs	r0, #1
        internalReconnect();
    } break;
    }

    return true;
}
 80a181e:	3720      	adds	r7, #32
 80a1820:	46bd      	mov	sp, r7
 80a1822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1826:	bf00      	nop
 80a1828:	080a7394 	.word	0x080a7394
 80a182c:	080a73a2 	.word	0x080a73a2
 80a1830:	080a73a7 	.word	0x080a73a7
 80a1834:	080a73ba 	.word	0x080a73ba
 80a1838:	080a73d1 	.word	0x080a73d1
 80a183c:	080a73e2 	.word	0x080a73e2
 80a1840:	080a73e8 	.word	0x080a73e8
 80a1844:	00637472 	.word	0x00637472
 80a1848:	6e6f6361 	.word	0x6e6f6361
 80a184c:	080a73f8 	.word	0x080a73f8

080a1850 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
 80a1850:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a1854:	4604      	mov	r4, r0
 80a1856:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
 80a1858:	f7ff fa90 	bl	80a0d7c <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
 80a185c:	7f63      	ldrb	r3, [r4, #29]
 80a185e:	2b02      	cmp	r3, #2
 80a1860:	f000 8087 	beq.w	80a1972 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x122>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
 80a1864:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
 80a1866:	8b62      	ldrh	r2, [r4, #26]
 80a1868:	3301      	adds	r3, #1
 80a186a:	b2db      	uxtb	r3, r3
 80a186c:	7723      	strb	r3, [r4, #28]
 80a186e:	2a00      	cmp	r2, #0
 80a1870:	d145      	bne.n	80a18fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xae>
 80a1872:	2b02      	cmp	r3, #2
 80a1874:	d843      	bhi.n	80a18fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xae>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a1876:	6820      	ldr	r0, [r4, #0]
 80a1878:	f002 f923 	bl	80a3ac2 <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
 80a187c:	b130      	cbz	r0, 80a188c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3c>
        while (avail || conn.available() > 0) {
 80a187e:	2d00      	cmp	r5, #0
 80a1880:	d179      	bne.n	80a1976 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x126>
    int available() { return client.available(); }
 80a1882:	6820      	ldr	r0, [r4, #0]
 80a1884:	f002 f820 	bl	80a38c8 <_ZN9TCPClient9availableEv>
 80a1888:	2800      	cmp	r0, #0
 80a188a:	dc74      	bgt.n	80a1976 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x126>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
 80a188c:	f001 fb68 	bl	80a2f60 <_Z11BlynkMillisv>
 80a1890:	4607      	mov	r7, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a1892:	6820      	ldr	r0, [r4, #0]
 80a1894:	f002 f915 	bl	80a3ac2 <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
 80a1898:	7f65      	ldrb	r5, [r4, #29]
 80a189a:	4606      	mov	r6, r0
 80a189c:	2d01      	cmp	r5, #1
 80a189e:	d130      	bne.n	80a1902 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xb2>
        if (!tconn) {
 80a18a0:	b928      	cbnz	r0, 80a18ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5e>
            lastHeartbeat = t;
 80a18a2:	6167      	str	r7, [r4, #20]
            internalReconnect();
 80a18a4:	4620      	mov	r0, r4
 80a18a6:	f7ff fd0b 	bl	80a12c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a18aa:	4635      	mov	r5, r6
 80a18ac:	e05d      	b.n	80a196a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
 80a18ae:	68e3      	ldr	r3, [r4, #12]
 80a18b0:	1afb      	subs	r3, r7, r3
 80a18b2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80a18b6:	d90b      	bls.n	80a18d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x80>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
 80a18b8:	f7ff fa20 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a18bc:	f003 f8ea 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a18c0:	4935      	ldr	r1, [pc, #212]	; (80a1998 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>)
 80a18c2:	f002 fa97 	bl	80a3df4 <_ZN5Print7printlnEPKc>
#endif
            internalReconnect();
 80a18c6:	4620      	mov	r0, r4
 80a18c8:	f7ff fcfa 	bl	80a12c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a18cc:	2500      	movs	r5, #0
 80a18ce:	e04c      	b.n	80a196a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a18d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80a18d4:	4293      	cmp	r3, r2
 80a18d6:	d803      	bhi.n	80a18e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x90>
 80a18d8:	6923      	ldr	r3, [r4, #16]
 80a18da:	1afb      	subs	r3, r7, r3
 80a18dc:	4293      	cmp	r3, r2
 80a18de:	d90e      	bls.n	80a18fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xae>
 80a18e0:	6963      	ldr	r3, [r4, #20]
 80a18e2:	1afb      	subs	r3, r7, r3
 80a18e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a18e8:	d909      	bls.n	80a18fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xae>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
 80a18ea:	2300      	movs	r3, #0
 80a18ec:	9302      	str	r3, [sp, #8]
 80a18ee:	9301      	str	r3, [sp, #4]
 80a18f0:	9300      	str	r3, [sp, #0]
 80a18f2:	461a      	mov	r2, r3
 80a18f4:	2106      	movs	r1, #6
 80a18f6:	4620      	mov	r0, r4
 80a18f8:	f000 f85a 	bl	80a19b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
 80a18fc:	6167      	str	r7, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
 80a18fe:	2501      	movs	r5, #1
 80a1900:	e033      	b.n	80a196a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
 80a1902:	2d00      	cmp	r5, #0
 80a1904:	d1fb      	bne.n	80a18fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xae>
 80a1906:	6960      	ldr	r0, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
 80a1908:	1a38      	subs	r0, r7, r0
 80a190a:	b176      	cbz	r6, 80a192a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xda>
 80a190c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80a1910:	d9f5      	bls.n	80a18fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xae>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
 80a1912:	f7ff f9f3 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a1916:	f003 f8bd 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a191a:	4920      	ldr	r1, [pc, #128]	; (80a199c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x14c>)
 80a191c:	f002 fa6a 	bl	80a3df4 <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a1920:	6820      	ldr	r0, [r4, #0]
 80a1922:	f002 f80d 	bl	80a3940 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            state = CONNECTING;
 80a1926:	7765      	strb	r5, [r4, #29]
            return false;
 80a1928:	e01f      	b.n	80a196a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
 80a192a:	f241 3388 	movw	r3, #5000	; 0x1388
 80a192e:	4298      	cmp	r0, r3
 80a1930:	d9e5      	bls.n	80a18fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xae>
 80a1932:	6820      	ldr	r0, [r4, #0]
 80a1934:	f002 f804 	bl	80a3940 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
 80a1938:	6820      	ldr	r0, [r4, #0]
 80a193a:	f7ff faa1 	bl	80a0e80 <_ZN22BlynkTransportParticle7connectEv>
 80a193e:	4605      	mov	r5, r0
 80a1940:	b908      	cbnz	r0, 80a1946 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xf6>
                lastLogin = t;
 80a1942:	6167      	str	r7, [r4, #20]
                return false;
 80a1944:	e011      	b.n	80a196a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
 80a1946:	f8d4 8004 	ldr.w	r8, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
 80a194a:	2701      	movs	r7, #1
 80a194c:	8327      	strh	r7, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
 80a194e:	4640      	mov	r0, r8
 80a1950:	f004 fe05 	bl	80a655e <strlen>
 80a1954:	4643      	mov	r3, r8
 80a1956:	e88d 0041 	stmia.w	sp, {r0, r6}
 80a195a:	9602      	str	r6, [sp, #8]
 80a195c:	463a      	mov	r2, r7
 80a195e:	2102      	movs	r1, #2
 80a1960:	4620      	mov	r0, r4
 80a1962:	f000 f825 	bl	80a19b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
 80a1966:	6923      	ldr	r3, [r4, #16]
 80a1968:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
 80a196a:	7f23      	ldrb	r3, [r4, #28]
 80a196c:	3b01      	subs	r3, #1
 80a196e:	7723      	strb	r3, [r4, #28]
 80a1970:	e00e      	b.n	80a1990 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x140>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
 80a1972:	2500      	movs	r5, #0
 80a1974:	e00c      	b.n	80a1990 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x140>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
 80a1976:	4620      	mov	r0, r4
 80a1978:	f7ff fdc2 	bl	80a1500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
 80a197c:	4605      	mov	r5, r0
 80a197e:	2800      	cmp	r0, #0
 80a1980:	f47f af7f 	bne.w	80a1882 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x32>
 80a1984:	6820      	ldr	r0, [r4, #0]
 80a1986:	f001 ffdb 	bl	80a3940 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
 80a198a:	f001 faef 	bl	80a2f6c <BlynkNoOpCbk>
                return false;
 80a198e:	e7ec      	b.n	80a196a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
            return true;
        }
#endif
    }
    return true;
}
 80a1990:	4628      	mov	r0, r5
 80a1992:	b004      	add	sp, #16
 80a1994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1998:	080a7401 	.word	0x080a7401
 80a199c:	080a7413 	.word	0x080a7413

080a19a0 <_Z9run_blynkv>:

/*
* run blynk
*/
void run_blynk()
{
 80a19a0:	b508      	push	{r3, lr}
 Blynk.run();
 80a19a2:	2100      	movs	r1, #0
 80a19a4:	4801      	ldr	r0, [pc, #4]	; (80a19ac <_Z9run_blynkv+0xc>)
 80a19a6:	f7ff ff53 	bl	80a1850 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a19aa:	bd08      	pop	{r3, pc}
 80a19ac:	20000350 	.word	0x20000350

080a19b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a19b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a19b4:	b083      	sub	sp, #12
 80a19b6:	4604      	mov	r4, r0
 80a19b8:	af00      	add	r7, sp, #0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a19ba:	6800      	ldr	r0, [r0, #0]
 80a19bc:	4689      	mov	r9, r1
 80a19be:	4616      	mov	r6, r2
 80a19c0:	469b      	mov	fp, r3
 80a19c2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
 80a19c4:	46ea      	mov	sl, sp
 80a19c6:	f002 f87c 	bl	80a3ac2 <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
 80a19ca:	2800      	cmp	r0, #0
 80a19cc:	d061      	beq.n	80a1a92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
 80a19ce:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80a19d2:	f000 80a1 	beq.w	80a1b18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x168>
 80a19d6:	f1b9 0f06 	cmp.w	r9, #6
 80a19da:	f000 809d 	beq.w	80a1b18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x168>
 80a19de:	7f63      	ldrb	r3, [r4, #29]
 80a19e0:	2b01      	cmp	r3, #1
 80a19e2:	d156      	bne.n	80a1a92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
 80a19e4:	b916      	cbnz	r6, 80a19ec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
 80a19e6:	8b66      	ldrh	r6, [r4, #26]
 80a19e8:	2e00      	cmp	r6, #0
 80a19ea:	d057      	beq.n	80a1a9c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
 80a19ec:	f1a9 030c 	sub.w	r3, r9, #12
 80a19f0:	2b08      	cmp	r3, #8
 80a19f2:	d95b      	bls.n	80a1aac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfc>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
 80a19f4:	f1bb 0f00 	cmp.w	fp, #0
 80a19f8:	bf18      	it	ne
 80a19fa:	46a8      	movne	r8, r5
 80a19fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80a19fe:	bf08      	it	eq
 80a1a00:	f04f 0800 	moveq.w	r8, #0
 80a1a04:	2a00      	cmp	r2, #0
 80a1a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a1a08:	f108 0305 	add.w	r3, r8, #5
 80a1a0c:	bf14      	ite	ne
 80a1a0e:	4690      	movne	r8, r2
 80a1a10:	f04f 0800 	moveq.w	r8, #0
 80a1a14:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a1a16:	f108 0307 	add.w	r3, r8, #7
 80a1a1a:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
 80a1a1e:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a1a20:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
 80a1a24:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
 80a1a28:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
 80a1a2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a1a2e:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
 80a1a32:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
 80a1a36:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
 80a1a3a:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
 80a1a3e:	f1bb 0f00 	cmp.w	fp, #0
 80a1a42:	d052      	beq.n	80a1aea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
 80a1a44:	2d00      	cmp	r5, #0
 80a1a46:	d050      	beq.n	80a1aea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
        memcpy(buff + pos, data, length);
 80a1a48:	462a      	mov	r2, r5
 80a1a4a:	4659      	mov	r1, fp
 80a1a4c:	f10d 0005 	add.w	r0, sp, #5
 80a1a50:	f004 fd1c 	bl	80a648c <memcpy>
        pos += length;
 80a1a54:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
 80a1a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a1a58:	2b00      	cmp	r3, #0
 80a1a5a:	d148      	bne.n	80a1aee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
 80a1a5c:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
 80a1a5e:	4545      	cmp	r5, r8
 80a1a60:	d251      	bcs.n	80a1b06 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x156>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
 80a1a62:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
 80a1a66:	687b      	ldr	r3, [r7, #4]
 80a1a68:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80a1a6c:	bf28      	it	cs
 80a1a6e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80a1a72:	1959      	adds	r1, r3, r5
 80a1a74:	6820      	ldr	r0, [r4, #0]
 80a1a76:	f001 fe84 	bl	80a3782 <_ZN9TCPClient5writeEPKhj>
 80a1a7a:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
 80a1a7c:	2000      	movs	r0, #0
 80a1a7e:	f001 fa6d 	bl	80a2f5c <_Z10BlynkDelaym>
        if (w == 0) {
 80a1a82:	2e00      	cmp	r6, #0
 80a1a84:	d13d      	bne.n	80a1b02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x152>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a1a86:	6820      	ldr	r0, [r4, #0]
 80a1a88:	f001 ff5a 	bl	80a3940 <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
 80a1a8c:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
 80a1a8e:	f001 fa6d 	bl	80a2f6c <BlynkNoOpCbk>
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
 80a1a92:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
 80a1a94:	370c      	adds	r7, #12
 80a1a96:	46bd      	mov	sp, r7
 80a1a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
 80a1a9c:	8b23      	ldrh	r3, [r4, #24]
 80a1a9e:	3301      	adds	r3, #1
 80a1aa0:	b29b      	uxth	r3, r3
 80a1aa2:	b903      	cbnz	r3, 80a1aa6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf6>
        msgIdOut = 1;
 80a1aa4:	2301      	movs	r3, #1
 80a1aa6:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
 80a1aa8:	8b26      	ldrh	r6, [r4, #24]
 80a1aaa:	e79f      	b.n	80a19ec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
 80a1aac:	68e3      	ldr	r3, [r4, #12]
 80a1aae:	6922      	ldr	r2, [r4, #16]
 80a1ab0:	4293      	cmp	r3, r2
 80a1ab2:	bf38      	it	cc
 80a1ab4:	4613      	movcc	r3, r2
 80a1ab6:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
 80a1aba:	f001 fa51 	bl	80a2f60 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
 80a1abe:	ebc0 0008 	rsb	r0, r0, r8
 80a1ac2:	2800      	cmp	r0, #0
 80a1ac4:	db0a      	blt.n	80a1adc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
 80a1ac6:	2100      	movs	r1, #0
 80a1ac8:	4620      	mov	r0, r4
 80a1aca:	f7ff fec1 	bl	80a1850 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
 80a1ace:	f001 fa47 	bl	80a2f60 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
 80a1ad2:	ebc0 0008 	rsb	r0, r0, r8
 80a1ad6:	2800      	cmp	r0, #0
 80a1ad8:	daf5      	bge.n	80a1ac6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x116>
 80a1ada:	e78b      	b.n	80a19f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
 80a1adc:	7f21      	ldrb	r1, [r4, #28]
 80a1ade:	2900      	cmp	r1, #0
 80a1ae0:	d188      	bne.n	80a19f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
 80a1ae2:	4620      	mov	r0, r4
 80a1ae4:	f7ff feb4 	bl	80a1850 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a1ae8:	e784      	b.n	80a19f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
 80a1aea:	2005      	movs	r0, #5
 80a1aec:	e7b3      	b.n	80a1a56 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa6>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
 80a1aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a1af0:	2b00      	cmp	r3, #0
 80a1af2:	d0b3      	beq.n	80a1a5c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        memcpy(buff + pos, data2, length2);
 80a1af4:	461a      	mov	r2, r3
 80a1af6:	687b      	ldr	r3, [r7, #4]
 80a1af8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80a1afa:	4418      	add	r0, r3
 80a1afc:	f004 fcc6 	bl	80a648c <memcpy>
 80a1b00:	e7ac      	b.n	80a1a5c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
 80a1b02:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
 80a1b04:	e7ab      	b.n	80a1a5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xae>
        }
    }

#endif

    if (wlen != full_length) {
 80a1b06:	d003      	beq.n	80a1b10 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x160>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
 80a1b08:	4620      	mov	r0, r4
 80a1b0a:	f7ff fbd9 	bl	80a12c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
 80a1b0e:	e7c0      	b.n	80a1a92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
    }

    lastActivityOut = BlynkMillis();
 80a1b10:	f001 fa26 	bl	80a2f60 <_Z11BlynkMillisv>
 80a1b14:	6120      	str	r0, [r4, #16]
 80a1b16:	e7bc      	b.n	80a1a92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
 80a1b18:	2e00      	cmp	r6, #0
 80a1b1a:	f47f af6b 	bne.w	80a19f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
 80a1b1e:	e762      	b.n	80a19e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>

080a1b20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
 80a1b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile, profile_len);
 80a1b22:	2200      	movs	r2, #0
 80a1b24:	2350      	movs	r3, #80	; 0x50
 80a1b26:	9300      	str	r3, [sp, #0]
 80a1b28:	9202      	str	r2, [sp, #8]
 80a1b2a:	9201      	str	r2, [sp, #4]
 80a1b2c:	4b03      	ldr	r3, [pc, #12]	; (80a1b3c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
 80a1b2e:	2111      	movs	r1, #17
 80a1b30:	f7ff ff3e 	bl	80a19b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
 80a1b34:	b005      	add	sp, #20
 80a1b36:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1b3a:	bf00      	nop
 80a1b3c:	080a7100 	.word	0x080a7100

080a1b40 <_ZN14WidgetTerminal5flushEv>:
            flush();
        }
        return 1;
    }

    void flush() {
 80a1b40:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (mOutQty) {
 80a1b42:	f890 6049 	ldrb.w	r6, [r0, #73]	; 0x49
            flush();
        }
        return 1;
    }

    void flush() {
 80a1b46:	b08b      	sub	sp, #44	; 0x2c
 80a1b48:	4604      	mov	r4, r0
        if (mOutQty) {
 80a1b4a:	b1e6      	cbz	r6, 80a1b86 <_ZN14WidgetTerminal5flushEv+0x46>
            Blynk.virtualWriteBinary(mPin, mOutBuf, mOutQty);
 80a1b4c:	7a07      	ldrb	r7, [r0, #8]
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a1b4e:	ab05      	add	r3, sp, #20
 80a1b50:	2500      	movs	r5, #0
 80a1b52:	9307      	str	r3, [sp, #28]
     * @param len  Length of data
     */
    void virtualWriteBinary(int pin, const void* buff, size_t len) {
        char mem[8];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
 80a1b54:	490d      	ldr	r1, [pc, #52]	; (80a1b8c <_ZN14WidgetTerminal5flushEv+0x4c>)
 80a1b56:	2308      	movs	r3, #8
 80a1b58:	a807      	add	r0, sp, #28
 80a1b5a:	9309      	str	r3, [sp, #36]	; 0x24
 80a1b5c:	9508      	str	r5, [sp, #32]
 80a1b5e:	f7ff f94e 	bl	80a0dfe <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a1b62:	4639      	mov	r1, r7
 80a1b64:	a807      	add	r0, sp, #28
 80a1b66:	f7ff f967 	bl	80a0e38 <_ZN10BlynkParam3addEi>
 80a1b6a:	f104 0309 	add.w	r3, r4, #9
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength(), buff, len);
 80a1b6e:	9301      	str	r3, [sp, #4]
 80a1b70:	9b08      	ldr	r3, [sp, #32]
 80a1b72:	9602      	str	r6, [sp, #8]
 80a1b74:	9300      	str	r3, [sp, #0]
 80a1b76:	462a      	mov	r2, r5
 80a1b78:	9b07      	ldr	r3, [sp, #28]
 80a1b7a:	2114      	movs	r1, #20
 80a1b7c:	4804      	ldr	r0, [pc, #16]	; (80a1b90 <_ZN14WidgetTerminal5flushEv+0x50>)
 80a1b7e:	f7ff ff17 	bl	80a19b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            mOutQty = 0;
 80a1b82:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
        }
    }
 80a1b86:	b00b      	add	sp, #44	; 0x2c
 80a1b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1b8a:	bf00      	nop
 80a1b8c:	080a7421 	.word	0x080a7421
 80a1b90:	20000350 	.word	0x20000350

080a1b94 <_Z7printlnPc>:
/*---------------------------------------------------------------------
print to serial port and to Blynk terminal
---------------------------------------------------------------------*/
void println( char* text)

{
 80a1b94:	b510      	push	{r4, lr}
 80a1b96:	4604      	mov	r4, r0
  timeStamp();
 80a1b98:	f7ff fa0e 	bl	80a0fb8 <_Z9timeStampv>
  Serial.println(text);
 80a1b9c:	f002 ff7a 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a1ba0:	4621      	mov	r1, r4
 80a1ba2:	f002 f927 	bl	80a3df4 <_ZN5Print7printlnEPKc>

  if (termEnabled==1)
 80a1ba6:	4b06      	ldr	r3, [pc, #24]	; (80a1bc0 <_Z7printlnPc+0x2c>)
 80a1ba8:	681b      	ldr	r3, [r3, #0]
 80a1baa:	2b01      	cmp	r3, #1
 80a1bac:	d106      	bne.n	80a1bbc <_Z7printlnPc+0x28>
  {
  //terminal.print(buffer);
  terminal.println(text);   // Ausgabe an BLYNK APP terminal
 80a1bae:	4621      	mov	r1, r4
 80a1bb0:	4804      	ldr	r0, [pc, #16]	; (80a1bc4 <_Z7printlnPc+0x30>)
 80a1bb2:	f002 f91f 	bl	80a3df4 <_ZN5Print7printlnEPKc>
  terminal.flush();
 80a1bb6:	4803      	ldr	r0, [pc, #12]	; (80a1bc4 <_Z7printlnPc+0x30>)
 80a1bb8:	f7ff ffc2 	bl	80a1b40 <_ZN14WidgetTerminal5flushEv>
 80a1bbc:	bd10      	pop	{r4, pc}
 80a1bbe:	bf00      	nop
 80a1bc0:	2000002c 	.word	0x2000002c
 80a1bc4:	200003b0 	.word	0x200003b0

080a1bc8 <_Z4helpv>:
  Serial.printlnf(" waterlevel: %d ", waterlevel);
  Serial.printlnf(" wifi=%s cloud=%s slow_counter=%d ", (wifiReady ? "on" : "off"), (cloudReady ? "on" : "off"), slow_counter);
}

void help()
{
 80a1bc8:	b508      	push	{r3, lr}
  println(" Hello ");
 80a1bca:	480d      	ldr	r0, [pc, #52]	; (80a1c00 <_Z4helpv+0x38>)
 80a1bcc:	f7ff ffe2 	bl	80a1b94 <_Z7printlnPc>
  println(" b : Blumen giessen");
 80a1bd0:	480c      	ldr	r0, [pc, #48]	; (80a1c04 <_Z4helpv+0x3c>)
 80a1bd2:	f7ff ffdf 	bl	80a1b94 <_Z7printlnPc>
  println(" r : 433MHz RX on");
 80a1bd6:	480c      	ldr	r0, [pc, #48]	; (80a1c08 <_Z4helpv+0x40>)
 80a1bd8:	f7ff ffdc 	bl	80a1b94 <_Z7printlnPc>
  println(" o : 433MHz RX off");
 80a1bdc:	480b      	ldr	r0, [pc, #44]	; (80a1c0c <_Z4helpv+0x44>)
 80a1bde:	f7ff ffd9 	bl	80a1b94 <_Z7printlnPc>
  println(" s : sleep enabled ");
 80a1be2:	480b      	ldr	r0, [pc, #44]	; (80a1c10 <_Z4helpv+0x48>)
 80a1be4:	f7ff ffd6 	bl	80a1b94 <_Z7printlnPc>
  println(" p : sleep disabled ");
 80a1be8:	480a      	ldr	r0, [pc, #40]	; (80a1c14 <_Z4helpv+0x4c>)
 80a1bea:	f7ff ffd3 	bl	80a1b94 <_Z7printlnPc>
  println(" w : store config to EEPROM ");
 80a1bee:	480a      	ldr	r0, [pc, #40]	; (80a1c18 <_Z4helpv+0x50>)
 80a1bf0:	f7ff ffd0 	bl	80a1b94 <_Z7printlnPc>
  println(" x : ultra sonic measurement ");
}
 80a1bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  println(" r : 433MHz RX on");
  println(" o : 433MHz RX off");
  println(" s : sleep enabled ");
  println(" p : sleep disabled ");
  println(" w : store config to EEPROM ");
  println(" x : ultra sonic measurement ");
 80a1bf8:	4808      	ldr	r0, [pc, #32]	; (80a1c1c <_Z4helpv+0x54>)
 80a1bfa:	f7ff bfcb 	b.w	80a1b94 <_Z7printlnPc>
 80a1bfe:	bf00      	nop
 80a1c00:	080a7424 	.word	0x080a7424
 80a1c04:	080a742c 	.word	0x080a742c
 80a1c08:	080a7440 	.word	0x080a7440
 80a1c0c:	080a7452 	.word	0x080a7452
 80a1c10:	080a7465 	.word	0x080a7465
 80a1c14:	080a7479 	.word	0x080a7479
 80a1c18:	080a748e 	.word	0x080a748e
 80a1c1c:	080a74ab 	.word	0x080a74ab

080a1c20 <_Z13BlumenGiessenii>:
Blumengiessen
now = 1 : jetzt sofort Giessen
now = 0 : giesse wenn tnow = ts zur geplanten Zeit
---------------------------------------------------------------------*/
void BlumenGiessen(int now, int ts)
{
 80a1c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1c24:	4606      	mov	r6, r0

    println(" BlumenGiessen() ");
 80a1c26:	4830      	ldr	r0, [pc, #192]	; (80a1ce8 <_Z13BlumenGiessenii+0xc8>)
Blumengiessen
now = 1 : jetzt sofort Giessen
now = 0 : giesse wenn tnow = ts zur geplanten Zeit
---------------------------------------------------------------------*/
void BlumenGiessen(int now, int ts)
{
 80a1c28:	460f      	mov	r7, r1

    println(" BlumenGiessen() ");
 80a1c2a:	f7ff ffb3 	bl	80a1b94 <_Z7printlnPc>

    if (control.dontGiessen == 1)
 80a1c2e:	4b2f      	ldr	r3, [pc, #188]	; (80a1cec <_Z13BlumenGiessenii+0xcc>)
 80a1c30:	689b      	ldr	r3, [r3, #8]
 80a1c32:	2b01      	cmp	r3, #1
 80a1c34:	d105      	bne.n	80a1c42 <_Z13BlumenGiessenii+0x22>
          {
            WriteToDatabase ( "WASSER", "BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a1c36:	492e      	ldr	r1, [pc, #184]	; (80a1cf0 <_Z13BlumenGiessenii+0xd0>)
 80a1c38:	482e      	ldr	r0, [pc, #184]	; (80a1cf4 <_Z13BlumenGiessenii+0xd4>)
    if ((st_reserve_pumpe == ON) & (tnow >= ts_reserve_off))
        {
          st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
        }

}
 80a1c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

    println(" BlumenGiessen() ");

    if (control.dontGiessen == 1)
          {
            WriteToDatabase ( "WASSER", "BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a1c3e:	f7fe bc81 	b.w	80a0544 <_Z15WriteToDatabasePcS_>
            return;
          }

    if (st_funk_pumpe==OFF)
 80a1c42:	4d2d      	ldr	r5, [pc, #180]	; (80a1cf8 <_Z13BlumenGiessenii+0xd8>)
 80a1c44:	4c2d      	ldr	r4, [pc, #180]	; (80a1cfc <_Z13BlumenGiessenii+0xdc>)
 80a1c46:	682b      	ldr	r3, [r5, #0]
 80a1c48:	46a8      	mov	r8, r5
 80a1c4a:	b9cb      	cbnz	r3, 80a1c80 <_Z13BlumenGiessenii+0x60>
        {
          if ( tnow == ts || now == 1)
 80a1c4c:	6823      	ldr	r3, [r4, #0]
 80a1c4e:	42bb      	cmp	r3, r7
 80a1c50:	d001      	beq.n	80a1c56 <_Z13BlumenGiessenii+0x36>
 80a1c52:	2e01      	cmp	r6, #1
 80a1c54:	d11e      	bne.n	80a1c94 <_Z13BlumenGiessenii+0x74>
          {
            st_funk_pumpe= switch_pumpe_funk(OFF,0);
 80a1c56:	2100      	movs	r1, #0
 80a1c58:	4608      	mov	r0, r1
 80a1c5a:	f7ff fad5 	bl	80a1208 <_Z17switch_pumpe_funkii>
 80a1c5e:	f8c8 0000 	str.w	r0, [r8]
            delay(1000);
 80a1c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1c66:	f002 fa93 	bl	80a4190 <delay>
 80a1c6a:	2003      	movs	r0, #3
 80a1c6c:	f7ff f868 	bl	80a0d40 <_Z17switch_pumpe_funkii.part.9>
            st_funk_pumpe= switch_pumpe_funk(ON,3);
 80a1c70:	2301      	movs	r3, #1
 80a1c72:	f8c8 3000 	str.w	r3, [r8]
            ts_funk_pumpe_off = tnow + 3; // in 3 Minuten Pumpe abschalten
 80a1c76:	6823      	ldr	r3, [r4, #0]
 80a1c78:	4a21      	ldr	r2, [pc, #132]	; (80a1d00 <_Z13BlumenGiessenii+0xe0>)
 80a1c7a:	3303      	adds	r3, #3
 80a1c7c:	6013      	str	r3, [r2, #0]
 80a1c7e:	e009      	b.n	80a1c94 <_Z13BlumenGiessenii+0x74>
          }
        }
    else
        {
        if (tnow >= ts_funk_pumpe_off)
 80a1c80:	4b1f      	ldr	r3, [pc, #124]	; (80a1d00 <_Z13BlumenGiessenii+0xe0>)
 80a1c82:	6822      	ldr	r2, [r4, #0]
 80a1c84:	681b      	ldr	r3, [r3, #0]
 80a1c86:	429a      	cmp	r2, r3
 80a1c88:	db04      	blt.n	80a1c94 <_Z13BlumenGiessenii+0x74>
            {
            st_funk_pumpe= switch_pumpe_funk(OFF,0);
 80a1c8a:	2100      	movs	r1, #0
 80a1c8c:	4608      	mov	r0, r1
 80a1c8e:	f7ff fabb 	bl	80a1208 <_Z17switch_pumpe_funkii>
 80a1c92:	6028      	str	r0, [r5, #0]
            }
        }


    if (st_main_pumpe==OFF)
 80a1c94:	4d1b      	ldr	r5, [pc, #108]	; (80a1d04 <_Z13BlumenGiessenii+0xe4>)
 80a1c96:	682b      	ldr	r3, [r5, #0]
 80a1c98:	46a8      	mov	r8, r5
 80a1c9a:	b95b      	cbnz	r3, 80a1cb4 <_Z13BlumenGiessenii+0x94>
        {
          if ( tnow == ts || now == 1)
 80a1c9c:	6823      	ldr	r3, [r4, #0]
 80a1c9e:	429f      	cmp	r7, r3
 80a1ca0:	d001      	beq.n	80a1ca6 <_Z13BlumenGiessenii+0x86>
 80a1ca2:	2e01      	cmp	r6, #1
 80a1ca4:	d110      	bne.n	80a1cc8 <_Z13BlumenGiessenii+0xa8>
          {
            st_main_pumpe = switch_pumpe_main(ON,2);
 80a1ca6:	2102      	movs	r1, #2
 80a1ca8:	2001      	movs	r0, #1
 80a1caa:	f7ff fa49 	bl	80a1140 <_Z17switch_pumpe_mainii>
 80a1cae:	f8c8 0000 	str.w	r0, [r8]
 80a1cb2:	e009      	b.n	80a1cc8 <_Z13BlumenGiessenii+0xa8>
          }
        }
    else
        {
        if (tnow >= ts_main_pumpe_off)
 80a1cb4:	4b14      	ldr	r3, [pc, #80]	; (80a1d08 <_Z13BlumenGiessenii+0xe8>)
 80a1cb6:	6822      	ldr	r2, [r4, #0]
 80a1cb8:	681b      	ldr	r3, [r3, #0]
 80a1cba:	429a      	cmp	r2, r3
 80a1cbc:	db04      	blt.n	80a1cc8 <_Z13BlumenGiessenii+0xa8>
            {
            st_main_pumpe = switch_pumpe_main(OFF,0);
 80a1cbe:	2100      	movs	r1, #0
 80a1cc0:	4608      	mov	r0, r1
 80a1cc2:	f7ff fa3d 	bl	80a1140 <_Z17switch_pumpe_mainii>
 80a1cc6:	6028      	str	r0, [r5, #0]
            }
        }

    if ((st_reserve_pumpe == ON) & (tnow >= ts_reserve_off))
 80a1cc8:	4b10      	ldr	r3, [pc, #64]	; (80a1d0c <_Z13BlumenGiessenii+0xec>)
 80a1cca:	6822      	ldr	r2, [r4, #0]
 80a1ccc:	681b      	ldr	r3, [r3, #0]
 80a1cce:	429a      	cmp	r2, r3
 80a1cd0:	db08      	blt.n	80a1ce4 <_Z13BlumenGiessenii+0xc4>
 80a1cd2:	4c0f      	ldr	r4, [pc, #60]	; (80a1d10 <_Z13BlumenGiessenii+0xf0>)
 80a1cd4:	6823      	ldr	r3, [r4, #0]
 80a1cd6:	2b01      	cmp	r3, #1
 80a1cd8:	d104      	bne.n	80a1ce4 <_Z13BlumenGiessenii+0xc4>
        {
          st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
 80a1cda:	2100      	movs	r1, #0
 80a1cdc:	4608      	mov	r0, r1
 80a1cde:	f7ff fa61 	bl	80a11a4 <_Z20switch_pumpe_reserveii>
 80a1ce2:	6020      	str	r0, [r4, #0]
 80a1ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1ce8:	080a74c9 	.word	0x080a74c9
 80a1cec:	20000410 	.word	0x20000410
 80a1cf0:	080a74db 	.word	0x080a74db
 80a1cf4:	080a7001 	.word	0x080a7001
 80a1cf8:	20000370 	.word	0x20000370
 80a1cfc:	2000040c 	.word	0x2000040c
 80a1d00:	20000420 	.word	0x20000420
 80a1d04:	20000304 	.word	0x20000304
 80a1d08:	20000344 	.word	0x20000344
 80a1d0c:	20000308 	.word	0x20000308
 80a1d10:	20000400 	.word	0x20000400

080a1d14 <_Z9ledToggle6String>:
} // loop

/*---------------------------------------------------------------------
---------------------------------------------------------------------*/

int ledToggle(String command) {
 80a1d14:	b508      	push	{r3, lr}
    Since we can pass a string, it means that we can give the program commands on how the function should be used.
    */

    int com;

    com = atoi(command);
 80a1d16:	6800      	ldr	r0, [r0, #0]
 80a1d18:	f004 faaa 	bl	80a6270 <atoi>

    switch(com)
 80a1d1c:	3801      	subs	r0, #1
 80a1d1e:	2804      	cmp	r0, #4
 80a1d20:	d81c      	bhi.n	80a1d5c <_Z9ledToggle6String+0x48>
 80a1d22:	e8df f000 	tbb	[pc, r0]
 80a1d26:	0803      	.short	0x0803
 80a1d28:	0f0d      	.short	0x0f0d
 80a1d2a:	14          	.byte	0x14
 80a1d2b:	00          	.byte	0x00
    {
      case 1:
        conrad_rsl_switch_code(3,EIN);
 80a1d2c:	2101      	movs	r1, #1
 80a1d2e:	2003      	movs	r0, #3
 80a1d30:	f000 fffa 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
 80a1d34:	e004      	b.n	80a1d40 <_Z9ledToggle6String+0x2c>
        digitalWrite(BLYNK_LED,HIGH);
        return 1;
      break;

      case 2:
        conrad_rsl_switch_code(3,AUS);
 80a1d36:	2100      	movs	r1, #0
 80a1d38:	2003      	movs	r0, #3
 80a1d3a:	f000 fff5 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
 80a1d3e:	e001      	b.n	80a1d44 <_Z9ledToggle6String+0x30>
        digitalWrite(BLYNK_LED,LOW);
        return 1;
      break;

      case 3:
        digitalWrite(BLYNK_LED,HIGH);
 80a1d40:	2101      	movs	r1, #1
 80a1d42:	e000      	b.n	80a1d46 <_Z9ledToggle6String+0x32>
        return 1;
      break;

      case 4:
        digitalWrite(BLYNK_LED,LOW);
 80a1d44:	2100      	movs	r1, #0
 80a1d46:	2007      	movs	r0, #7
 80a1d48:	f003 f933 	bl	80a4fb2 <digitalWrite>
 80a1d4c:	e004      	b.n	80a1d58 <_Z9ledToggle6String+0x44>
        return 1;
      break;

      case 5:
        BlumenGiessen(1,ts_giessen);
 80a1d4e:	4b05      	ldr	r3, [pc, #20]	; (80a1d64 <_Z9ledToggle6String+0x50>)
 80a1d50:	2001      	movs	r0, #1
 80a1d52:	6819      	ldr	r1, [r3, #0]
 80a1d54:	f7ff ff64 	bl	80a1c20 <_Z13BlumenGiessenii>
        return 1;
 80a1d58:	2001      	movs	r0, #1
 80a1d5a:	bd08      	pop	{r3, pc}
      break;

      default:
      return -1;
 80a1d5c:	f04f 30ff 	mov.w	r0, #4294967295

    }

}
 80a1d60:	bd08      	pop	{r3, pc}
 80a1d62:	bf00      	nop
 80a1d64:	2000034c 	.word	0x2000034c

080a1d68 <_Z11TankFuellenv>:
/*---------------------------------------------------------------------
Tank fuellen -> schalte reserve pumpe ein
---------------------------------------------------------------------*/
void TankFuellen()

{
 80a1d68:	b510      	push	{r4, lr}
    println(" Tankfuellen() ");
 80a1d6a:	480f      	ldr	r0, [pc, #60]	; (80a1da8 <_Z11TankFuellenv+0x40>)
 80a1d6c:	f7ff ff12 	bl	80a1b94 <_Z7printlnPc>

     if (control.dontGiessen == 1)
 80a1d70:	4b0e      	ldr	r3, [pc, #56]	; (80a1dac <_Z11TankFuellenv+0x44>)
 80a1d72:	689b      	ldr	r3, [r3, #8]
 80a1d74:	2b01      	cmp	r3, #1
 80a1d76:	d105      	bne.n	80a1d84 <_Z11TankFuellenv+0x1c>
          {
            WriteToDatabase ( "WASSER", "BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a1d78:	490d      	ldr	r1, [pc, #52]	; (80a1db0 <_Z11TankFuellenv+0x48>)
 80a1d7a:	480e      	ldr	r0, [pc, #56]	; (80a1db4 <_Z11TankFuellenv+0x4c>)
    if ((waterlevel < 2000) & (st_reserve_pumpe == OFF))      
    {
      WriteToDatabase ( "WASSER", "TANK FUELLEN  ");     
      st_reserve_pumpe = switch_pumpe_reserve(1,3);
    }
 }
 80a1d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    println(" Tankfuellen() ");

     if (control.dontGiessen == 1)
          {
            WriteToDatabase ( "WASSER", "BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a1d80:	f7fe bbe0 	b.w	80a0544 <_Z15WriteToDatabasePcS_>
            return;
          }

    if ((waterlevel < 2000) & (st_reserve_pumpe == OFF))      
 80a1d84:	4b0c      	ldr	r3, [pc, #48]	; (80a1db8 <_Z11TankFuellenv+0x50>)
 80a1d86:	681b      	ldr	r3, [r3, #0]
 80a1d88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a1d8c:	da0b      	bge.n	80a1da6 <_Z11TankFuellenv+0x3e>
 80a1d8e:	4c0b      	ldr	r4, [pc, #44]	; (80a1dbc <_Z11TankFuellenv+0x54>)
 80a1d90:	6823      	ldr	r3, [r4, #0]
 80a1d92:	b943      	cbnz	r3, 80a1da6 <_Z11TankFuellenv+0x3e>
    {
      WriteToDatabase ( "WASSER", "TANK FUELLEN  ");     
 80a1d94:	490a      	ldr	r1, [pc, #40]	; (80a1dc0 <_Z11TankFuellenv+0x58>)
 80a1d96:	4807      	ldr	r0, [pc, #28]	; (80a1db4 <_Z11TankFuellenv+0x4c>)
 80a1d98:	f7fe fbd4 	bl	80a0544 <_Z15WriteToDatabasePcS_>
      st_reserve_pumpe = switch_pumpe_reserve(1,3);
 80a1d9c:	2103      	movs	r1, #3
 80a1d9e:	2001      	movs	r0, #1
 80a1da0:	f7ff fa00 	bl	80a11a4 <_Z20switch_pumpe_reserveii>
 80a1da4:	6020      	str	r0, [r4, #0]
 80a1da6:	bd10      	pop	{r4, pc}
 80a1da8:	080a74fb 	.word	0x080a74fb
 80a1dac:	20000410 	.word	0x20000410
 80a1db0:	080a74db 	.word	0x080a74db
 80a1db4:	080a7001 	.word	0x080a7001
 80a1db8:	20000030 	.word	0x20000030
 80a1dbc:	20000400 	.word	0x20000400
 80a1dc0:	080a750b 	.word	0x080a750b

080a1dc4 <_Z5sleepi>:

/*---------------------------------------------------------------------
Sleep and Wakeup
---------------------------------------------------------------------*/
void sleep(int minutes)
{
 80a1dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (minutes<1) {minutes=5;}
 80a1dc6:	1e04      	subs	r4, r0, #0

/*---------------------------------------------------------------------
Sleep and Wakeup
---------------------------------------------------------------------*/
void sleep(int minutes)
{
 80a1dc8:	b089      	sub	sp, #36	; 0x24
    if (minutes<1) {minutes=5;}
 80a1dca:	dd03      	ble.n	80a1dd4 <_Z5sleepi+0x10>

    if (minutes>120) {minutes=120;}
 80a1dcc:	2c78      	cmp	r4, #120	; 0x78
 80a1dce:	bfa8      	it	ge
 80a1dd0:	2478      	movge	r4, #120	; 0x78
 80a1dd2:	e000      	b.n	80a1dd6 <_Z5sleepi+0x12>
/*---------------------------------------------------------------------
Sleep and Wakeup
---------------------------------------------------------------------*/
void sleep(int minutes)
{
    if (minutes<1) {minutes=5;}
 80a1dd4:	2405      	movs	r4, #5

    if (minutes>120) {minutes=120;}

    if ((dontSleepHW==0) & (control.dontSleepSW==0) & (st_funk_pumpe==0))
 80a1dd6:	4b30      	ldr	r3, [pc, #192]	; (80a1e98 <_Z5sleepi+0xd4>)
 80a1dd8:	681a      	ldr	r2, [r3, #0]
 80a1dda:	4b30      	ldr	r3, [pc, #192]	; (80a1e9c <_Z5sleepi+0xd8>)
 80a1ddc:	685b      	ldr	r3, [r3, #4]
 80a1dde:	2a00      	cmp	r2, #0
 80a1de0:	bf08      	it	eq
 80a1de2:	2b00      	cmpeq	r3, #0
 80a1de4:	d156      	bne.n	80a1e94 <_Z5sleepi+0xd0>
 80a1de6:	4d2e      	ldr	r5, [pc, #184]	; (80a1ea0 <_Z5sleepi+0xdc>)
 80a1de8:	682b      	ldr	r3, [r5, #0]
 80a1dea:	2b00      	cmp	r3, #0
 80a1dec:	d152      	bne.n	80a1e94 <_Z5sleepi+0xd0>
    {
      //System.sleep(SLEEP_MODE_DEEP,2*60); // will reset device after wakeup

      WriteToDatabase("WASSER","SLEEP Minutes : ", minutes);
 80a1dee:	4622      	mov	r2, r4
 80a1df0:	492c      	ldr	r1, [pc, #176]	; (80a1ea4 <_Z5sleepi+0xe0>)
 80a1df2:	482d      	ldr	r0, [pc, #180]	; (80a1ea8 <_Z5sleepi+0xe4>)
 80a1df4:	f7fe fbe8 	bl	80a05c8 <_Z15WriteToDatabasePcS_i>

      println(" *** SLEEP *** ");
 80a1df8:	482c      	ldr	r0, [pc, #176]	; (80a1eac <_Z5sleepi+0xe8>)
 80a1dfa:	f7ff fecb 	bl	80a1b94 <_Z7printlnPc>
      //sprintf(buffer,"PHOTON SLEEP %d ",minutes);
      //reportToLuefter(buffer);

      // sollte nicht vorkommen, dass Pumpen noch laufen.
      // Besser schalten wir die Pumpen hier trotzdem aus
      st_main_pumpe   =  switch_pumpe_main(OFF,0);  
 80a1dfe:	2100      	movs	r1, #0
 80a1e00:	4608      	mov	r0, r1
 80a1e02:	f7ff f99d 	bl	80a1140 <_Z17switch_pumpe_mainii>
 80a1e06:	4b2a      	ldr	r3, [pc, #168]	; (80a1eb0 <_Z5sleepi+0xec>)
      st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
 80a1e08:	2100      	movs	r1, #0
      //sprintf(buffer,"PHOTON SLEEP %d ",minutes);
      //reportToLuefter(buffer);

      // sollte nicht vorkommen, dass Pumpen noch laufen.
      // Besser schalten wir die Pumpen hier trotzdem aus
      st_main_pumpe   =  switch_pumpe_main(OFF,0);  
 80a1e0a:	6018      	str	r0, [r3, #0]
      st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
 80a1e0c:	4608      	mov	r0, r1
 80a1e0e:	f7ff f9c9 	bl	80a11a4 <_Z20switch_pumpe_reserveii>
 80a1e12:	4b28      	ldr	r3, [pc, #160]	; (80a1eb4 <_Z5sleepi+0xf0>)
      st_funk_pumpe = switch_pumpe_funk(OFF,0);
 80a1e14:	2100      	movs	r1, #0
      //reportToLuefter(buffer);

      // sollte nicht vorkommen, dass Pumpen noch laufen.
      // Besser schalten wir die Pumpen hier trotzdem aus
      st_main_pumpe   =  switch_pumpe_main(OFF,0);  
      st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
 80a1e16:	6018      	str	r0, [r3, #0]
      st_funk_pumpe = switch_pumpe_funk(OFF,0);
 80a1e18:	4608      	mov	r0, r1
 80a1e1a:	f7ff f9f5 	bl	80a1208 <_Z17switch_pumpe_funkii>
     
      delay(1000);
      
      slow_counter = 0;
 80a1e1e:	4e26      	ldr	r6, [pc, #152]	; (80a1eb8 <_Z5sleepi+0xf4>)

      // sollte nicht vorkommen, dass Pumpen noch laufen.
      // Besser schalten wir die Pumpen hier trotzdem aus
      st_main_pumpe   =  switch_pumpe_main(OFF,0);  
      st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
      st_funk_pumpe = switch_pumpe_funk(OFF,0);
 80a1e20:	6028      	str	r0, [r5, #0]
     
      delay(1000);
 80a1e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      
      slow_counter = 0;
 80a1e26:	2500      	movs	r5, #0
      // Besser schalten wir die Pumpen hier trotzdem aus
      st_main_pumpe   =  switch_pumpe_main(OFF,0);  
      st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
      st_funk_pumpe = switch_pumpe_funk(OFF,0);
     
      delay(1000);
 80a1e28:	f002 f9b2 	bl	80a4190 <delay>
      
      slow_counter = 0;
 80a1e2c:	6035      	str	r5, [r6, #0]
      rsl_disable_receive();
 80a1e2e:	f7fe fced 	bl	80a080c <_Z19rsl_disable_receivev>
 80a1e32:	4b22      	ldr	r3, [pc, #136]	; (80a1ebc <_Z5sleepi+0xf8>)
      termEnabled = 0;
 80a1e34:	4f22      	ldr	r7, [pc, #136]	; (80a1ec0 <_Z5sleepi+0xfc>)
 80a1e36:	681b      	ldr	r3, [r3, #0]
 80a1e38:	603d      	str	r5, [r7, #0]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 80a1e3a:	9302      	str	r3, [sp, #8]
 80a1e3c:	233c      	movs	r3, #60	; 0x3c
 80a1e3e:	435c      	muls	r4, r3
 80a1e40:	2201      	movs	r2, #1
 80a1e42:	e88d 0014 	stmia.w	sp, {r2, r4}
 80a1e46:	f10d 0116 	add.w	r1, sp, #22
 80a1e4a:	f10d 0315 	add.w	r3, sp, #21
 80a1e4e:	a806      	add	r0, sp, #24
 80a1e50:	f8ad 2016 	strh.w	r2, [sp, #22]
 80a1e54:	f88d 2015 	strb.w	r2, [sp, #21]
 80a1e58:	f001 fc54 	bl	80a3704 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>

      System.sleep(D1,RISING,60 * minutes); // no reset of device after wakeup

      println(" *** WAKE UP *** ");
 80a1e5c:	4819      	ldr	r0, [pc, #100]	; (80a1ec4 <_Z5sleepi+0x100>)
 80a1e5e:	f7ff fe99 	bl	80a1b94 <_Z7printlnPc>
      tnow = getTime();
 80a1e62:	f7ff f879 	bl	80a0f58 <_Z7getTimev>
 80a1e66:	4b18      	ldr	r3, [pc, #96]	; (80a1ec8 <_Z5sleepi+0x104>)
 80a1e68:	6018      	str	r0, [r3, #0]
      conrad_rsl_init();  // 433 MHz Sender abschalten
 80a1e6a:	f000 fead 	bl	80a2bc8 <_Z15conrad_rsl_initv>
      rsl_disable_receive();
 80a1e6e:	f7fe fccd 	bl	80a080c <_Z19rsl_disable_receivev>
      ultra_sonic_setup();
 80a1e72:	f000 fcd5 	bl	80a2820 <_Z17ultra_sonic_setupv>
      termEnabled = 0;
      slow_counter = 6;
 80a1e76:	2306      	movs	r3, #6

      WriteToDatabase ( "WASSER", "WAKE UP "); 
 80a1e78:	4914      	ldr	r1, [pc, #80]	; (80a1ecc <_Z5sleepi+0x108>)
 80a1e7a:	480b      	ldr	r0, [pc, #44]	; (80a1ea8 <_Z5sleepi+0xe4>)
      tnow = getTime();
      conrad_rsl_init();  // 433 MHz Sender abschalten
      rsl_disable_receive();
      ultra_sonic_setup();
      termEnabled = 0;
      slow_counter = 6;
 80a1e7c:	6033      	str	r3, [r6, #0]
      println(" *** WAKE UP *** ");
      tnow = getTime();
      conrad_rsl_init();  // 433 MHz Sender abschalten
      rsl_disable_receive();
      ultra_sonic_setup();
      termEnabled = 0;
 80a1e7e:	603d      	str	r5, [r7, #0]
      slow_counter = 6;

      WriteToDatabase ( "WASSER", "WAKE UP "); 
 80a1e80:	f7fe fb60 	bl	80a0544 <_Z15WriteToDatabasePcS_>

      waterlevel = ultra_sonic_measure();
 80a1e84:	f7fe fe4c 	bl	80a0b20 <_Z19ultra_sonic_measurev>
 80a1e88:	4b11      	ldr	r3, [pc, #68]	; (80a1ed0 <_Z5sleepi+0x10c>)

      if (waterlevel < 200)
 80a1e8a:	28c7      	cmp	r0, #199	; 0xc7
      termEnabled = 0;
      slow_counter = 6;

      WriteToDatabase ( "WASSER", "WAKE UP "); 

      waterlevel = ultra_sonic_measure();
 80a1e8c:	6018      	str	r0, [r3, #0]

      if (waterlevel < 200)
 80a1e8e:	dc01      	bgt.n	80a1e94 <_Z5sleepi+0xd0>
      {
        TankFuellen();
 80a1e90:	f7ff ff6a 	bl	80a1d68 <_Z11TankFuellenv>
      }

    }
}
 80a1e94:	b009      	add	sp, #36	; 0x24
 80a1e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1e98:	20000348 	.word	0x20000348
 80a1e9c:	20000410 	.word	0x20000410
 80a1ea0:	20000370 	.word	0x20000370
 80a1ea4:	080a751a 	.word	0x080a751a
 80a1ea8:	080a7001 	.word	0x080a7001
 80a1eac:	080a752b 	.word	0x080a752b
 80a1eb0:	20000304 	.word	0x20000304
 80a1eb4:	20000400 	.word	0x20000400
 80a1eb8:	20000408 	.word	0x20000408
 80a1ebc:	20000404 	.word	0x20000404
 80a1ec0:	2000002c 	.word	0x2000002c
 80a1ec4:	080a753b 	.word	0x080a753b
 80a1ec8:	2000040c 	.word	0x2000040c
 80a1ecc:	080a754d 	.word	0x080a754d
 80a1ed0:	20000030 	.word	0x20000030

080a1ed4 <BlynkWidgetWrite21>:
        elro_switch(3,AUS);
        Blynk.virtualWrite(V20,0);  // eine BLYNC APP
      }
}

BLYNK_WRITE(V21) {
 80a1ed4:	b510      	push	{r4, lr}
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
 80a1ed6:	6808      	ldr	r0, [r1, #0]
 80a1ed8:	f004 f9ca 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1edc:	2801      	cmp	r0, #1
 80a1ede:	4c09      	ldr	r4, [pc, #36]	; (80a1f04 <BlynkWidgetWrite21+0x30>)
 80a1ee0:	d107      	bne.n	80a1ef2 <BlynkWidgetWrite21+0x1e>
      {
        termEnabled = 1;
 80a1ee2:	6020      	str	r0, [r4, #0]
        rsl_enable_receive();
 80a1ee4:	f7fe fc72 	bl	80a07cc <_Z18rsl_enable_receivev>
        rsl_disable_receive();
        println(" 433MHzEmpfaenger ausgeschaltet  ");
        termEnabled = 0;
      }

}
 80a1ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
BLYNK_WRITE(V21) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        termEnabled = 1;
        rsl_enable_receive();
        println(" 433MHz Empfaenger eingeschaltet  ");
 80a1eec:	4806      	ldr	r0, [pc, #24]	; (80a1f08 <BlynkWidgetWrite21+0x34>)
 80a1eee:	f7ff be51 	b.w	80a1b94 <_Z7printlnPc>
      }
      else
      {
        rsl_disable_receive();
 80a1ef2:	f7fe fc8b 	bl	80a080c <_Z19rsl_disable_receivev>
        println(" 433MHzEmpfaenger ausgeschaltet  ");
 80a1ef6:	4805      	ldr	r0, [pc, #20]	; (80a1f0c <BlynkWidgetWrite21+0x38>)
 80a1ef8:	f7ff fe4c 	bl	80a1b94 <_Z7printlnPc>
        termEnabled = 0;
 80a1efc:	2300      	movs	r3, #0
 80a1efe:	6023      	str	r3, [r4, #0]
 80a1f00:	bd10      	pop	{r4, pc}
 80a1f02:	bf00      	nop
 80a1f04:	2000002c 	.word	0x2000002c
 80a1f08:	080a7556 	.word	0x080a7556
 80a1f0c:	080a7579 	.word	0x080a7579

080a1f10 <BlynkWidgetWrite25>:
      }

}

BLYNK_WRITE(V25) {
 80a1f10:	b510      	push	{r4, lr}
 80a1f12:	6808      	ldr	r0, [r1, #0]
 80a1f14:	f004 f9ac 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1f18:	2801      	cmp	r0, #1
 80a1f1a:	d113      	bne.n	80a1f44 <BlynkWidgetWrite25+0x34>
      {
        termEnabled = 1;
 80a1f1c:	4b0a      	ldr	r3, [pc, #40]	; (80a1f48 <BlynkWidgetWrite25+0x38>)
        control.dontSleepSW = 1;
 80a1f1e:	4c0b      	ldr	r4, [pc, #44]	; (80a1f4c <BlynkWidgetWrite25+0x3c>)
}

BLYNK_WRITE(V25) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        termEnabled = 1;
 80a1f20:	6018      	str	r0, [r3, #0]
        control.dontSleepSW = 1;
 80a1f22:	6060      	str	r0, [r4, #4]
        EEPROM.put(0,control);
 80a1f24:	f003 f8d2 	bl	80a50cc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a1f28:	4621      	mov	r1, r4
 80a1f2a:	220c      	movs	r2, #12
 80a1f2c:	2000      	movs	r0, #0
 80a1f2e:	f001 f96b 	bl	80a3208 <HAL_EEPROM_Put>
        WriteToDatabase ( "CONTROL", "PHOTON SW SLEEP DISABLED BY BUTTON ");
 80a1f32:	4807      	ldr	r0, [pc, #28]	; (80a1f50 <BlynkWidgetWrite25+0x40>)
 80a1f34:	4907      	ldr	r1, [pc, #28]	; (80a1f54 <BlynkWidgetWrite25+0x44>)
 80a1f36:	f7fe fb05 	bl	80a0544 <_Z15WriteToDatabasePcS_>
        println(" Sleep Mode Disabled by blynk button ");
      }
}
 80a1f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
        termEnabled = 1;
        control.dontSleepSW = 1;
        EEPROM.put(0,control);
        WriteToDatabase ( "CONTROL", "PHOTON SW SLEEP DISABLED BY BUTTON ");
        println(" Sleep Mode Disabled by blynk button ");
 80a1f3e:	4806      	ldr	r0, [pc, #24]	; (80a1f58 <BlynkWidgetWrite25+0x48>)
 80a1f40:	f7ff be28 	b.w	80a1b94 <_Z7printlnPc>
 80a1f44:	bd10      	pop	{r4, pc}
 80a1f46:	bf00      	nop
 80a1f48:	2000002c 	.word	0x2000002c
 80a1f4c:	20000410 	.word	0x20000410
 80a1f50:	080a7343 	.word	0x080a7343
 80a1f54:	080a759b 	.word	0x080a759b
 80a1f58:	080a75bf 	.word	0x080a75bf

080a1f5c <BlynkWidgetWrite26>:
      }
}

BLYNK_WRITE(V26) {
 80a1f5c:	b538      	push	{r3, r4, r5, lr}
 80a1f5e:	6808      	ldr	r0, [r1, #0]
 80a1f60:	f004 f986 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1f64:	2801      	cmp	r0, #1
 80a1f66:	d114      	bne.n	80a1f92 <BlynkWidgetWrite26+0x36>
      {
        termEnabled = 0;
 80a1f68:	4b0a      	ldr	r3, [pc, #40]	; (80a1f94 <BlynkWidgetWrite26+0x38>)
        control.dontSleepSW = 0;
 80a1f6a:	4d0b      	ldr	r5, [pc, #44]	; (80a1f98 <BlynkWidgetWrite26+0x3c>)
}

BLYNK_WRITE(V26) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        termEnabled = 0;
 80a1f6c:	2400      	movs	r4, #0
 80a1f6e:	601c      	str	r4, [r3, #0]
        control.dontSleepSW = 0;
 80a1f70:	606c      	str	r4, [r5, #4]
        EEPROM.put(0,control);
 80a1f72:	f003 f8ab 	bl	80a50cc <_Z21__fetch_global_EEPROMv>
 80a1f76:	4629      	mov	r1, r5
 80a1f78:	4620      	mov	r0, r4
 80a1f7a:	220c      	movs	r2, #12
 80a1f7c:	f001 f944 	bl	80a3208 <HAL_EEPROM_Put>
        WriteToDatabase ( "CONTROL", "PHOTON SW SLEEP ENABLED BY BUTTON ");
 80a1f80:	4806      	ldr	r0, [pc, #24]	; (80a1f9c <BlynkWidgetWrite26+0x40>)
 80a1f82:	4907      	ldr	r1, [pc, #28]	; (80a1fa0 <BlynkWidgetWrite26+0x44>)
 80a1f84:	f7fe fade 	bl	80a0544 <_Z15WriteToDatabasePcS_>
        println(" Sleep Mode Enabled by blynk button ");
      }
}
 80a1f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
        termEnabled = 0;
        control.dontSleepSW = 0;
        EEPROM.put(0,control);
        WriteToDatabase ( "CONTROL", "PHOTON SW SLEEP ENABLED BY BUTTON ");
        println(" Sleep Mode Enabled by blynk button ");
 80a1f8c:	4805      	ldr	r0, [pc, #20]	; (80a1fa4 <BlynkWidgetWrite26+0x48>)
 80a1f8e:	f7ff be01 	b.w	80a1b94 <_Z7printlnPc>
 80a1f92:	bd38      	pop	{r3, r4, r5, pc}
 80a1f94:	2000002c 	.word	0x2000002c
 80a1f98:	20000410 	.word	0x20000410
 80a1f9c:	080a7343 	.word	0x080a7343
 80a1fa0:	080a75e5 	.word	0x080a75e5
 80a1fa4:	080a7608 	.word	0x080a7608

080a1fa8 <BlynkWidgetWrite27>:
      }
}

BLYNK_WRITE(V27) {
 80a1fa8:	b508      	push	{r3, lr}
 80a1faa:	6808      	ldr	r0, [r1, #0]
 80a1fac:	f004 f960 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1fb0:	2801      	cmp	r0, #1
 80a1fb2:	d10d      	bne.n	80a1fd0 <BlynkWidgetWrite27+0x28>
      {
        st_reserve_pumpe = switch_pumpe_reserve(1,2);
 80a1fb4:	2102      	movs	r1, #2
 80a1fb6:	f7ff f8f5 	bl	80a11a4 <_Z20switch_pumpe_reserveii>
 80a1fba:	4b06      	ldr	r3, [pc, #24]	; (80a1fd4 <BlynkWidgetWrite27+0x2c>)
        WriteToDatabase ( "CONTROL", "Reserve Pumpe eingeschaltet by button ");
 80a1fbc:	4906      	ldr	r1, [pc, #24]	; (80a1fd8 <BlynkWidgetWrite27+0x30>)
}

BLYNK_WRITE(V27) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        st_reserve_pumpe = switch_pumpe_reserve(1,2);
 80a1fbe:	6018      	str	r0, [r3, #0]
        WriteToDatabase ( "CONTROL", "Reserve Pumpe eingeschaltet by button ");
 80a1fc0:	4806      	ldr	r0, [pc, #24]	; (80a1fdc <BlynkWidgetWrite27+0x34>)
 80a1fc2:	f7fe fabf 	bl	80a0544 <_Z15WriteToDatabasePcS_>
        println(" Reserve Pumpe eingeschaltet by button  ");
      }
}
 80a1fc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V27) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        st_reserve_pumpe = switch_pumpe_reserve(1,2);
        WriteToDatabase ( "CONTROL", "Reserve Pumpe eingeschaltet by button ");
        println(" Reserve Pumpe eingeschaltet by button  ");
 80a1fca:	4805      	ldr	r0, [pc, #20]	; (80a1fe0 <BlynkWidgetWrite27+0x38>)
 80a1fcc:	f7ff bde2 	b.w	80a1b94 <_Z7printlnPc>
 80a1fd0:	bd08      	pop	{r3, pc}
 80a1fd2:	bf00      	nop
 80a1fd4:	20000400 	.word	0x20000400
 80a1fd8:	080a762d 	.word	0x080a762d
 80a1fdc:	080a7343 	.word	0x080a7343
 80a1fe0:	080a7654 	.word	0x080a7654

080a1fe4 <BlynkWidgetWrite28>:
      }
}

BLYNK_WRITE(V28) {
 80a1fe4:	b508      	push	{r3, lr}
 80a1fe6:	6808      	ldr	r0, [r1, #0]
 80a1fe8:	f004 f942 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1fec:	2801      	cmp	r0, #1
 80a1fee:	d10e      	bne.n	80a200e <BlynkWidgetWrite28+0x2a>
      {
        st_reserve_pumpe = switch_pumpe_reserve(0,0);
 80a1ff0:	2100      	movs	r1, #0
 80a1ff2:	4608      	mov	r0, r1
 80a1ff4:	f7ff f8d6 	bl	80a11a4 <_Z20switch_pumpe_reserveii>
 80a1ff8:	4b05      	ldr	r3, [pc, #20]	; (80a2010 <BlynkWidgetWrite28+0x2c>)
        WriteToDatabase ( "CONTROL", "Reserve Pumpe ausgeschaltet by button ");
 80a1ffa:	4906      	ldr	r1, [pc, #24]	; (80a2014 <BlynkWidgetWrite28+0x30>)
}

BLYNK_WRITE(V28) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        st_reserve_pumpe = switch_pumpe_reserve(0,0);
 80a1ffc:	6018      	str	r0, [r3, #0]
        WriteToDatabase ( "CONTROL", "Reserve Pumpe ausgeschaltet by button ");
 80a1ffe:	4806      	ldr	r0, [pc, #24]	; (80a2018 <BlynkWidgetWrite28+0x34>)
 80a2000:	f7fe faa0 	bl	80a0544 <_Z15WriteToDatabasePcS_>
        println(" Reserve Pumpe ausgeschaltet by button ");
      }
}
 80a2004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V28) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        st_reserve_pumpe = switch_pumpe_reserve(0,0);
        WriteToDatabase ( "CONTROL", "Reserve Pumpe ausgeschaltet by button ");
        println(" Reserve Pumpe ausgeschaltet by button ");
 80a2008:	4804      	ldr	r0, [pc, #16]	; (80a201c <BlynkWidgetWrite28+0x38>)
 80a200a:	f7ff bdc3 	b.w	80a1b94 <_Z7printlnPc>
 80a200e:	bd08      	pop	{r3, pc}
 80a2010:	20000400 	.word	0x20000400
 80a2014:	080a767e 	.word	0x080a767e
 80a2018:	080a7343 	.word	0x080a7343
 80a201c:	080a767d 	.word	0x080a767d

080a2020 <BlynkWidgetWrite29>:
      }
}

BLYNK_WRITE(V29) {
 80a2020:	b510      	push	{r4, lr}
 80a2022:	6808      	ldr	r0, [r1, #0]
 80a2024:	f004 f924 	bl	80a6270 <atoi>
        if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2028:	2801      	cmp	r0, #1
 80a202a:	d111      	bne.n	80a2050 <BlynkWidgetWrite29+0x30>
            {
              control.dontGiessen = 1;
 80a202c:	4c09      	ldr	r4, [pc, #36]	; (80a2054 <BlynkWidgetWrite29+0x34>)
 80a202e:	60a0      	str	r0, [r4, #8]
              EEPROM.put(0,control);
 80a2030:	f003 f84c 	bl	80a50cc <_Z21__fetch_global_EEPROMv>
 80a2034:	4621      	mov	r1, r4
 80a2036:	220c      	movs	r2, #12
 80a2038:	2000      	movs	r0, #0
 80a203a:	f001 f8e5 	bl	80a3208 <HAL_EEPROM_Put>
              WriteToDatabase ( "CONTROL", "Blumen giessen deaktiviert ");
 80a203e:	4806      	ldr	r0, [pc, #24]	; (80a2058 <BlynkWidgetWrite29+0x38>)
 80a2040:	4906      	ldr	r1, [pc, #24]	; (80a205c <BlynkWidgetWrite29+0x3c>)
 80a2042:	f7fe fa7f 	bl	80a0544 <_Z15WriteToDatabasePcS_>
              println ( "Blumen giessen deaktiviert ");
            }
}
 80a2046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if (param.asInt() == 1) // Schalter nieder gedrückt ?
            {
              control.dontGiessen = 1;
              EEPROM.put(0,control);
              WriteToDatabase ( "CONTROL", "Blumen giessen deaktiviert ");
              println ( "Blumen giessen deaktiviert ");
 80a204a:	4804      	ldr	r0, [pc, #16]	; (80a205c <BlynkWidgetWrite29+0x3c>)
 80a204c:	f7ff bda2 	b.w	80a1b94 <_Z7printlnPc>
 80a2050:	bd10      	pop	{r4, pc}
 80a2052:	bf00      	nop
 80a2054:	20000410 	.word	0x20000410
 80a2058:	080a7343 	.word	0x080a7343
 80a205c:	080a76a5 	.word	0x080a76a5

080a2060 <BlynkWidgetWrite30>:
            }
}

BLYNK_WRITE(V30) {
 80a2060:	b538      	push	{r3, r4, r5, lr}
 80a2062:	6808      	ldr	r0, [r1, #0]
 80a2064:	f004 f904 	bl	80a6270 <atoi>
        if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2068:	2801      	cmp	r0, #1
 80a206a:	d112      	bne.n	80a2092 <BlynkWidgetWrite30+0x32>
            {
              control.dontGiessen = 0;
 80a206c:	4d09      	ldr	r5, [pc, #36]	; (80a2094 <BlynkWidgetWrite30+0x34>)
 80a206e:	2400      	movs	r4, #0
 80a2070:	60ac      	str	r4, [r5, #8]
              EEPROM.put(0,control);
 80a2072:	f003 f82b 	bl	80a50cc <_Z21__fetch_global_EEPROMv>
 80a2076:	4629      	mov	r1, r5
 80a2078:	4620      	mov	r0, r4
 80a207a:	220c      	movs	r2, #12
 80a207c:	f001 f8c4 	bl	80a3208 <HAL_EEPROM_Put>
              WriteToDatabase ( "CONTROL", "Blumen giessen aktiviert ");
 80a2080:	4805      	ldr	r0, [pc, #20]	; (80a2098 <BlynkWidgetWrite30+0x38>)
 80a2082:	4906      	ldr	r1, [pc, #24]	; (80a209c <BlynkWidgetWrite30+0x3c>)
 80a2084:	f7fe fa5e 	bl	80a0544 <_Z15WriteToDatabasePcS_>
              println ("Blumen giessen aktiviert ");
            }
}
 80a2088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (param.asInt() == 1) // Schalter nieder gedrückt ?
            {
              control.dontGiessen = 0;
              EEPROM.put(0,control);
              WriteToDatabase ( "CONTROL", "Blumen giessen aktiviert ");
              println ("Blumen giessen aktiviert ");
 80a208c:	4803      	ldr	r0, [pc, #12]	; (80a209c <BlynkWidgetWrite30+0x3c>)
 80a208e:	f7ff bd81 	b.w	80a1b94 <_Z7printlnPc>
 80a2092:	bd38      	pop	{r3, r4, r5, pc}
 80a2094:	20000410 	.word	0x20000410
 80a2098:	080a7343 	.word	0x080a7343
 80a209c:	080a76c1 	.word	0x080a76c1

080a20a0 <BlynkWidgetWrite31>:
            }
}

BLYNK_WRITE(V31) {
 80a20a0:	b508      	push	{r3, lr}
 80a20a2:	6808      	ldr	r0, [r1, #0]
 80a20a4:	f004 f8e4 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a20a8:	2801      	cmp	r0, #1
 80a20aa:	d10d      	bne.n	80a20c8 <BlynkWidgetWrite31+0x28>
      {
        st_main_pumpe = switch_pumpe_main(ON,2);
 80a20ac:	2102      	movs	r1, #2
 80a20ae:	f7ff f847 	bl	80a1140 <_Z17switch_pumpe_mainii>
 80a20b2:	4b06      	ldr	r3, [pc, #24]	; (80a20cc <BlynkWidgetWrite31+0x2c>)
        WriteToDatabase ( "CONTROL", "Pumpe eingeschaltet by button ");
 80a20b4:	4906      	ldr	r1, [pc, #24]	; (80a20d0 <BlynkWidgetWrite31+0x30>)
}

BLYNK_WRITE(V31) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        st_main_pumpe = switch_pumpe_main(ON,2);
 80a20b6:	6018      	str	r0, [r3, #0]
        WriteToDatabase ( "CONTROL", "Pumpe eingeschaltet by button ");
 80a20b8:	4806      	ldr	r0, [pc, #24]	; (80a20d4 <BlynkWidgetWrite31+0x34>)
 80a20ba:	f7fe fa43 	bl	80a0544 <_Z15WriteToDatabasePcS_>
        println(" Pumpe eingeschaltet by button  ");
      }
}
 80a20be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V31) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        st_main_pumpe = switch_pumpe_main(ON,2);
        WriteToDatabase ( "CONTROL", "Pumpe eingeschaltet by button ");
        println(" Pumpe eingeschaltet by button  ");
 80a20c2:	4805      	ldr	r0, [pc, #20]	; (80a20d8 <BlynkWidgetWrite31+0x38>)
 80a20c4:	f7ff bd66 	b.w	80a1b94 <_Z7printlnPc>
 80a20c8:	bd08      	pop	{r3, pc}
 80a20ca:	bf00      	nop
 80a20cc:	20000304 	.word	0x20000304
 80a20d0:	080a7635 	.word	0x080a7635
 80a20d4:	080a7343 	.word	0x080a7343
 80a20d8:	080a765c 	.word	0x080a765c

080a20dc <BlynkWidgetWrite32>:
      }
}

BLYNK_WRITE(V32) {
 80a20dc:	b508      	push	{r3, lr}
 80a20de:	6808      	ldr	r0, [r1, #0]
 80a20e0:	f004 f8c6 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a20e4:	2801      	cmp	r0, #1
 80a20e6:	d10e      	bne.n	80a2106 <BlynkWidgetWrite32+0x2a>
      {
        st_main_pumpe = switch_pumpe_main(OFF,0);
 80a20e8:	2100      	movs	r1, #0
 80a20ea:	4608      	mov	r0, r1
 80a20ec:	f7ff f828 	bl	80a1140 <_Z17switch_pumpe_mainii>
 80a20f0:	4b05      	ldr	r3, [pc, #20]	; (80a2108 <BlynkWidgetWrite32+0x2c>)
        WriteToDatabase ( "CONTROL", "Pumpe ausgeschaltet by button ");
 80a20f2:	4906      	ldr	r1, [pc, #24]	; (80a210c <BlynkWidgetWrite32+0x30>)
}

BLYNK_WRITE(V32) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        st_main_pumpe = switch_pumpe_main(OFF,0);
 80a20f4:	6018      	str	r0, [r3, #0]
        WriteToDatabase ( "CONTROL", "Pumpe ausgeschaltet by button ");
 80a20f6:	4806      	ldr	r0, [pc, #24]	; (80a2110 <BlynkWidgetWrite32+0x34>)
 80a20f8:	f7fe fa24 	bl	80a0544 <_Z15WriteToDatabasePcS_>
        println(" Pumpe ausgeschaltet by button ");
      }
}
 80a20fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V32) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        st_main_pumpe = switch_pumpe_main(OFF,0);
        WriteToDatabase ( "CONTROL", "Pumpe ausgeschaltet by button ");
        println(" Pumpe ausgeschaltet by button ");
 80a2100:	4804      	ldr	r0, [pc, #16]	; (80a2114 <BlynkWidgetWrite32+0x38>)
 80a2102:	f7ff bd47 	b.w	80a1b94 <_Z7printlnPc>
 80a2106:	bd08      	pop	{r3, pc}
 80a2108:	20000304 	.word	0x20000304
 80a210c:	080a7686 	.word	0x080a7686
 80a2110:	080a7343 	.word	0x080a7343
 80a2114:	080a7685 	.word	0x080a7685

080a2118 <_ZN14WidgetTerminal5writeEh>:
        , mOutQty(0)
    {}

    //virtual ~WidgetTerminal() {}

    virtual size_t write(uint8_t byte) {
 80a2118:	b510      	push	{r4, lr}
        mOutBuf[mOutQty++] = byte;
 80a211a:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
 80a211e:	1c53      	adds	r3, r2, #1
 80a2120:	b2db      	uxtb	r3, r3
 80a2122:	4402      	add	r2, r0
        if (mOutQty >= sizeof(mOutBuf)) {
 80a2124:	2b3f      	cmp	r3, #63	; 0x3f
    {}

    //virtual ~WidgetTerminal() {}

    virtual size_t write(uint8_t byte) {
        mOutBuf[mOutQty++] = byte;
 80a2126:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
 80a212a:	7251      	strb	r1, [r2, #9]
        if (mOutQty >= sizeof(mOutBuf)) {
 80a212c:	d901      	bls.n	80a2132 <_ZN14WidgetTerminal5writeEh+0x1a>
            flush();
 80a212e:	f7ff fd07 	bl	80a1b40 <_ZN14WidgetTerminal5flushEv>
        }
        return 1;
    }
 80a2132:	2001      	movs	r0, #1
 80a2134:	bd10      	pop	{r4, pc}
	...

080a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
 80a2138:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a213a:	460f      	mov	r7, r1
 80a213c:	4616      	mov	r6, r2
 80a213e:	4605      	mov	r5, r0
 80a2140:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a2144:	ab08      	add	r3, sp, #32
 80a2146:	2400      	movs	r4, #0
 80a2148:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
 80a214a:	a805      	add	r0, sp, #20
 80a214c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a2150:	490d      	ldr	r1, [pc, #52]	; (80a2188 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_+0x50>)
 80a2152:	9307      	str	r3, [sp, #28]
 80a2154:	9406      	str	r4, [sp, #24]
 80a2156:	f7fe fe52 	bl	80a0dfe <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a215a:	4639      	mov	r1, r7
 80a215c:	a805      	add	r0, sp, #20
 80a215e:	f7fe fe6b 	bl	80a0e38 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
 80a2162:	4631      	mov	r1, r6
 80a2164:	a805      	add	r0, sp, #20
 80a2166:	f7fe fe67 	bl	80a0e38 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a216a:	9b06      	ldr	r3, [sp, #24]
 80a216c:	9402      	str	r4, [sp, #8]
 80a216e:	3b01      	subs	r3, #1
 80a2170:	9300      	str	r3, [sp, #0]
 80a2172:	9401      	str	r4, [sp, #4]
 80a2174:	9b05      	ldr	r3, [sp, #20]
 80a2176:	4622      	mov	r2, r4
 80a2178:	2114      	movs	r1, #20
 80a217a:	4628      	mov	r0, r5
 80a217c:	f7ff fc18 	bl	80a19b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a2180:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 80a2184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2186:	bf00      	nop
 80a2188:	080a7421 	.word	0x080a7421

080a218c <BlynkWidgetWrite1>:

/*---------------------------------------------------------------------
BLYNK Buttons Vx.
---------------------------------------------------------------------*/

BLYNK_WRITE(V1) {
 80a218c:	b510      	push	{r4, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
 80a218e:	6808      	ldr	r0, [r1, #0]
 80a2190:	f004 f86e 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2194:	2801      	cmp	r0, #1
 80a2196:	4604      	mov	r4, r0
 80a2198:	d10b      	bne.n	80a21b2 <BlynkWidgetWrite1+0x26>
      {
        println(" rsl 1 ein ");
 80a219a:	4806      	ldr	r0, [pc, #24]	; (80a21b4 <BlynkWidgetWrite1+0x28>)
 80a219c:	f7ff fcfa 	bl	80a1b94 <_Z7printlnPc>
        conrad_rsl_switch_code(1,EIN);
 80a21a0:	4621      	mov	r1, r4
 80a21a2:	4620      	mov	r0, r4
 80a21a4:	f000 fdc0 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
        Blynk.virtualWrite(V20,255);  // eine BLYNC APP LED
 80a21a8:	22ff      	movs	r2, #255	; 0xff
 80a21aa:	2114      	movs	r1, #20
 80a21ac:	4802      	ldr	r0, [pc, #8]	; (80a21b8 <BlynkWidgetWrite1+0x2c>)
 80a21ae:	f7ff ffc3 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a21b2:	bd10      	pop	{r4, pc}
 80a21b4:	080a76db 	.word	0x080a76db
 80a21b8:	20000350 	.word	0x20000350

080a21bc <BlynkWidgetWrite2>:
      }
}

BLYNK_WRITE(V2) {
 80a21bc:	b510      	push	{r4, lr}
 80a21be:	6808      	ldr	r0, [r1, #0]
 80a21c0:	f004 f856 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a21c4:	2801      	cmp	r0, #1
 80a21c6:	4604      	mov	r4, r0
 80a21c8:	d10b      	bne.n	80a21e2 <BlynkWidgetWrite2+0x26>
      {
        println(" rsl 1 aus ");
 80a21ca:	4806      	ldr	r0, [pc, #24]	; (80a21e4 <BlynkWidgetWrite2+0x28>)
 80a21cc:	f7ff fce2 	bl	80a1b94 <_Z7printlnPc>
        conrad_rsl_switch_code(1,AUS);
 80a21d0:	2100      	movs	r1, #0
 80a21d2:	4620      	mov	r0, r4
 80a21d4:	f000 fda8 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
        Blynk.virtualWrite(V20,0);  // eine BLYNC APP LED
 80a21d8:	2200      	movs	r2, #0
 80a21da:	2114      	movs	r1, #20
 80a21dc:	4802      	ldr	r0, [pc, #8]	; (80a21e8 <BlynkWidgetWrite2+0x2c>)
 80a21de:	f7ff ffab 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a21e2:	bd10      	pop	{r4, pc}
 80a21e4:	080a76e7 	.word	0x080a76e7
 80a21e8:	20000350 	.word	0x20000350

080a21ec <BlynkWidgetWrite3>:
      }
}

BLYNK_WRITE(V3) {
 80a21ec:	b510      	push	{r4, lr}
 80a21ee:	6808      	ldr	r0, [r1, #0]
 80a21f0:	f004 f83e 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a21f4:	2801      	cmp	r0, #1
 80a21f6:	4604      	mov	r4, r0
 80a21f8:	d10b      	bne.n	80a2212 <BlynkWidgetWrite3+0x26>
      {
        println(" rsl 2 ein ");
 80a21fa:	4806      	ldr	r0, [pc, #24]	; (80a2214 <BlynkWidgetWrite3+0x28>)
 80a21fc:	f7ff fcca 	bl	80a1b94 <_Z7printlnPc>
        conrad_rsl_switch_code(2,EIN);
 80a2200:	4621      	mov	r1, r4
 80a2202:	2002      	movs	r0, #2
 80a2204:	f000 fd90 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
        Blynk.virtualWrite(V20,255);  // eine BLYNC APP LED
 80a2208:	22ff      	movs	r2, #255	; 0xff
 80a220a:	2114      	movs	r1, #20
 80a220c:	4802      	ldr	r0, [pc, #8]	; (80a2218 <BlynkWidgetWrite3+0x2c>)
 80a220e:	f7ff ff93 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a2212:	bd10      	pop	{r4, pc}
 80a2214:	080a76f3 	.word	0x080a76f3
 80a2218:	20000350 	.word	0x20000350

080a221c <BlynkWidgetWrite4>:
      }
}

BLYNK_WRITE(V4) {
 80a221c:	b508      	push	{r3, lr}
 80a221e:	6808      	ldr	r0, [r1, #0]
 80a2220:	f004 f826 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2224:	2801      	cmp	r0, #1
 80a2226:	d10d      	bne.n	80a2244 <BlynkWidgetWrite4+0x28>
      {
        timeStamp();
 80a2228:	f7fe fec6 	bl	80a0fb8 <_Z9timeStampv>
        println(" rsl 2 aus ");
 80a222c:	4806      	ldr	r0, [pc, #24]	; (80a2248 <BlynkWidgetWrite4+0x2c>)
 80a222e:	f7ff fcb1 	bl	80a1b94 <_Z7printlnPc>
        conrad_rsl_switch_code(2,AUS);
 80a2232:	2100      	movs	r1, #0
 80a2234:	2002      	movs	r0, #2
 80a2236:	f000 fd77 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
        Blynk.virtualWrite(V20,0);  // eine BLYNC APP
 80a223a:	2200      	movs	r2, #0
 80a223c:	2114      	movs	r1, #20
 80a223e:	4803      	ldr	r0, [pc, #12]	; (80a224c <BlynkWidgetWrite4+0x30>)
 80a2240:	f7ff ff7a 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a2244:	bd08      	pop	{r3, pc}
 80a2246:	bf00      	nop
 80a2248:	080a76ff 	.word	0x080a76ff
 80a224c:	20000350 	.word	0x20000350

080a2250 <BlynkWidgetWrite5>:
      }
}

BLYNK_WRITE(V5) {
 80a2250:	b510      	push	{r4, lr}
 80a2252:	6808      	ldr	r0, [r1, #0]
 80a2254:	f004 f80c 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2258:	2801      	cmp	r0, #1
 80a225a:	4604      	mov	r4, r0
 80a225c:	d10b      	bne.n	80a2276 <BlynkWidgetWrite5+0x26>
      {
        println(" rsl 3 ein ");
 80a225e:	4806      	ldr	r0, [pc, #24]	; (80a2278 <BlynkWidgetWrite5+0x28>)
 80a2260:	f7ff fc98 	bl	80a1b94 <_Z7printlnPc>
        conrad_rsl_switch_code(3,EIN);
 80a2264:	4621      	mov	r1, r4
 80a2266:	2003      	movs	r0, #3
 80a2268:	f000 fd5e 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
        Blynk.virtualWrite(V20,255);  // eine BLYNC APP LED
 80a226c:	22ff      	movs	r2, #255	; 0xff
 80a226e:	2114      	movs	r1, #20
 80a2270:	4802      	ldr	r0, [pc, #8]	; (80a227c <BlynkWidgetWrite5+0x2c>)
 80a2272:	f7ff ff61 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a2276:	bd10      	pop	{r4, pc}
 80a2278:	080a770b 	.word	0x080a770b
 80a227c:	20000350 	.word	0x20000350

080a2280 <BlynkWidgetWrite6>:
      }
}

BLYNK_WRITE(V6) {
 80a2280:	b508      	push	{r3, lr}
 80a2282:	6808      	ldr	r0, [r1, #0]
 80a2284:	f003 fff4 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2288:	2801      	cmp	r0, #1
 80a228a:	d10b      	bne.n	80a22a4 <BlynkWidgetWrite6+0x24>
      {
        println(" rsl 3 aus ");
 80a228c:	4806      	ldr	r0, [pc, #24]	; (80a22a8 <BlynkWidgetWrite6+0x28>)
 80a228e:	f7ff fc81 	bl	80a1b94 <_Z7printlnPc>
        conrad_rsl_switch_code(3,AUS);
 80a2292:	2100      	movs	r1, #0
 80a2294:	2003      	movs	r0, #3
 80a2296:	f000 fd47 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
        Blynk.virtualWrite(V20,0);  // eine BLYNC APP LED
 80a229a:	2200      	movs	r2, #0
 80a229c:	2114      	movs	r1, #20
 80a229e:	4803      	ldr	r0, [pc, #12]	; (80a22ac <BlynkWidgetWrite6+0x2c>)
 80a22a0:	f7ff ff4a 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a22a4:	bd08      	pop	{r3, pc}
 80a22a6:	bf00      	nop
 80a22a8:	080a7717 	.word	0x080a7717
 80a22ac:	20000350 	.word	0x20000350

080a22b0 <BlynkWidgetWrite7>:
      }
}

BLYNK_WRITE(V7) {
 80a22b0:	b510      	push	{r4, lr}
 80a22b2:	6808      	ldr	r0, [r1, #0]
 80a22b4:	f003 ffdc 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a22b8:	2801      	cmp	r0, #1
 80a22ba:	4604      	mov	r4, r0
 80a22bc:	d10d      	bne.n	80a22da <BlynkWidgetWrite7+0x2a>
 80a22be:	2003      	movs	r0, #3
 80a22c0:	f7fe fd3e 	bl	80a0d40 <_Z17switch_pumpe_funkii.part.9>
      {
        //BlumenGiessen(1,ts_giessen);
        st_funk_pumpe = switch_pumpe_funk(ON,3);
 80a22c4:	4b05      	ldr	r3, [pc, #20]	; (80a22dc <BlynkWidgetWrite7+0x2c>)
        conrad_rsl_switch_code(4,EIN);
 80a22c6:	4621      	mov	r1, r4
 80a22c8:	2004      	movs	r0, #4

BLYNK_WRITE(V7) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        //BlumenGiessen(1,ts_giessen);
        st_funk_pumpe = switch_pumpe_funk(ON,3);
 80a22ca:	601c      	str	r4, [r3, #0]
        conrad_rsl_switch_code(4,EIN);
 80a22cc:	f000 fd2c 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
        Blynk.virtualWrite(V20,255);  // eine BLYNC APP LED
 80a22d0:	22ff      	movs	r2, #255	; 0xff
 80a22d2:	2114      	movs	r1, #20
 80a22d4:	4802      	ldr	r0, [pc, #8]	; (80a22e0 <BlynkWidgetWrite7+0x30>)
 80a22d6:	f7ff ff2f 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a22da:	bd10      	pop	{r4, pc}
 80a22dc:	20000370 	.word	0x20000370
 80a22e0:	20000350 	.word	0x20000350

080a22e4 <BlynkWidgetWrite8>:
      }
}

BLYNK_WRITE(V8) {
 80a22e4:	b508      	push	{r3, lr}
 80a22e6:	6808      	ldr	r0, [r1, #0]
 80a22e8:	f003 ffc2 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a22ec:	2801      	cmp	r0, #1
 80a22ee:	d10a      	bne.n	80a2306 <BlynkWidgetWrite8+0x22>
      {
        st_funk_pumpe = switch_pumpe_funk(OFF,0);
 80a22f0:	2100      	movs	r1, #0
 80a22f2:	4608      	mov	r0, r1
 80a22f4:	f7fe ff88 	bl	80a1208 <_Z17switch_pumpe_funkii>
 80a22f8:	4b03      	ldr	r3, [pc, #12]	; (80a2308 <BlynkWidgetWrite8+0x24>)
        Blynk.virtualWrite(V20,0);  // eine BLYNC APP
 80a22fa:	2200      	movs	r2, #0
}

BLYNK_WRITE(V8) {
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
      {
        st_funk_pumpe = switch_pumpe_funk(OFF,0);
 80a22fc:	6018      	str	r0, [r3, #0]
        Blynk.virtualWrite(V20,0);  // eine BLYNC APP
 80a22fe:	2114      	movs	r1, #20
 80a2300:	4802      	ldr	r0, [pc, #8]	; (80a230c <BlynkWidgetWrite8+0x28>)
 80a2302:	f7ff ff19 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a2306:	bd08      	pop	{r3, pc}
 80a2308:	20000370 	.word	0x20000370
 80a230c:	20000350 	.word	0x20000350

080a2310 <BlynkWidgetWrite9>:
      }
}

BLYNK_WRITE(V9) {
 80a2310:	b510      	push	{r4, lr}
 80a2312:	6808      	ldr	r0, [r1, #0]
 80a2314:	f003 ffac 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2318:	2801      	cmp	r0, #1
 80a231a:	4604      	mov	r4, r0
 80a231c:	d10b      	bne.n	80a2336 <BlynkWidgetWrite9+0x26>
      {
        println(" rsl 5 ein ");
 80a231e:	4806      	ldr	r0, [pc, #24]	; (80a2338 <BlynkWidgetWrite9+0x28>)
 80a2320:	f7ff fc38 	bl	80a1b94 <_Z7printlnPc>
        conrad_rsl_switch_code(5,EIN);
 80a2324:	4621      	mov	r1, r4
 80a2326:	2005      	movs	r0, #5
 80a2328:	f000 fcfe 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
        Blynk.virtualWrite(V20,255);  // eine BLYNC APP LED
 80a232c:	22ff      	movs	r2, #255	; 0xff
 80a232e:	2114      	movs	r1, #20
 80a2330:	4802      	ldr	r0, [pc, #8]	; (80a233c <BlynkWidgetWrite9+0x2c>)
 80a2332:	f7ff ff01 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a2336:	bd10      	pop	{r4, pc}
 80a2338:	080a7723 	.word	0x080a7723
 80a233c:	20000350 	.word	0x20000350

080a2340 <BlynkWidgetWrite10>:
      }
}

BLYNK_WRITE(V10) {
 80a2340:	b508      	push	{r3, lr}
 80a2342:	6808      	ldr	r0, [r1, #0]
 80a2344:	f003 ff94 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2348:	2801      	cmp	r0, #1
 80a234a:	d10b      	bne.n	80a2364 <BlynkWidgetWrite10+0x24>
      {
        println(" rsl 5 aus ");
 80a234c:	4806      	ldr	r0, [pc, #24]	; (80a2368 <BlynkWidgetWrite10+0x28>)
 80a234e:	f7ff fc21 	bl	80a1b94 <_Z7printlnPc>
        conrad_rsl_switch_code(5,AUS);
 80a2352:	2100      	movs	r1, #0
 80a2354:	2005      	movs	r0, #5
 80a2356:	f000 fce7 	bl	80a2d28 <_Z22conrad_rsl_switch_codeii>
        Blynk.virtualWrite(V20,0);  // eine BLYNC APP
 80a235a:	2200      	movs	r2, #0
 80a235c:	2114      	movs	r1, #20
 80a235e:	4803      	ldr	r0, [pc, #12]	; (80a236c <BlynkWidgetWrite10+0x2c>)
 80a2360:	f7ff feea 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a2364:	bd08      	pop	{r3, pc}
 80a2366:	bf00      	nop
 80a2368:	080a772f 	.word	0x080a772f
 80a236c:	20000350 	.word	0x20000350

080a2370 <BlynkWidgetWrite11>:
      }
}

BLYNK_WRITE(V11) {
 80a2370:	b510      	push	{r4, lr}
 80a2372:	6808      	ldr	r0, [r1, #0]
 80a2374:	f003 ff7c 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2378:	2801      	cmp	r0, #1
 80a237a:	4604      	mov	r4, r0
 80a237c:	d113      	bne.n	80a23a6 <BlynkWidgetWrite11+0x36>
      {
        println(" weihnachten ein  ");
 80a237e:	480a      	ldr	r0, [pc, #40]	; (80a23a8 <BlynkWidgetWrite11+0x38>)
 80a2380:	f7ff fc08 	bl	80a1b94 <_Z7printlnPc>
        elro_switch(1,EIN);
 80a2384:	4621      	mov	r1, r4
 80a2386:	4620      	mov	r0, r4
 80a2388:	f000 fd70 	bl	80a2e6c <_Z11elro_switchii>
        elro_switch(2,EIN);
 80a238c:	4621      	mov	r1, r4
 80a238e:	2002      	movs	r0, #2
 80a2390:	f000 fd6c 	bl	80a2e6c <_Z11elro_switchii>
        elro_switch(3,EIN);
 80a2394:	4621      	mov	r1, r4
 80a2396:	2003      	movs	r0, #3
 80a2398:	f000 fd68 	bl	80a2e6c <_Z11elro_switchii>
        Blynk.virtualWrite(V20,255);  // eine BLYNC APP LED
 80a239c:	22ff      	movs	r2, #255	; 0xff
 80a239e:	2114      	movs	r1, #20
 80a23a0:	4802      	ldr	r0, [pc, #8]	; (80a23ac <BlynkWidgetWrite11+0x3c>)
 80a23a2:	f7ff fec9 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a23a6:	bd10      	pop	{r4, pc}
 80a23a8:	080a773b 	.word	0x080a773b
 80a23ac:	20000350 	.word	0x20000350

080a23b0 <BlynkWidgetWrite12>:
      }
}

BLYNK_WRITE(V12) {
 80a23b0:	b510      	push	{r4, lr}
 80a23b2:	6808      	ldr	r0, [r1, #0]
 80a23b4:	f003 ff5c 	bl	80a6270 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a23b8:	2801      	cmp	r0, #1
 80a23ba:	4604      	mov	r4, r0
 80a23bc:	d113      	bne.n	80a23e6 <BlynkWidgetWrite12+0x36>
      {
        println(" weihnachten aus  ");
 80a23be:	480a      	ldr	r0, [pc, #40]	; (80a23e8 <BlynkWidgetWrite12+0x38>)
 80a23c0:	f7ff fbe8 	bl	80a1b94 <_Z7printlnPc>
        elro_switch(1,AUS);
 80a23c4:	2100      	movs	r1, #0
 80a23c6:	4620      	mov	r0, r4
 80a23c8:	f000 fd50 	bl	80a2e6c <_Z11elro_switchii>
        elro_switch(2,AUS);
 80a23cc:	2100      	movs	r1, #0
 80a23ce:	2002      	movs	r0, #2
 80a23d0:	f000 fd4c 	bl	80a2e6c <_Z11elro_switchii>
        elro_switch(3,AUS);
 80a23d4:	2100      	movs	r1, #0
 80a23d6:	2003      	movs	r0, #3
 80a23d8:	f000 fd48 	bl	80a2e6c <_Z11elro_switchii>
        Blynk.virtualWrite(V20,0);  // eine BLYNC APP
 80a23dc:	2200      	movs	r2, #0
 80a23de:	2114      	movs	r1, #20
 80a23e0:	4802      	ldr	r0, [pc, #8]	; (80a23ec <BlynkWidgetWrite12+0x3c>)
 80a23e2:	f7ff fea9 	bl	80a2138 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 80a23e6:	bd10      	pop	{r4, pc}
 80a23e8:	080a774e 	.word	0x080a774e
 80a23ec:	20000350 	.word	0x20000350

080a23f0 <setup>:
/*---------------------------------------------------------------------
-> runs one time after power on or HW reset.
-> is not called on timer wake-up
---------------------------------------------------------------------*/
void setup()
{
 80a23f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a23f2:	b085      	sub	sp, #20
    Serial.begin(115200);
 80a23f4:	f002 fb4e 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a23f8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a23fc:	f002 fb3e 	bl	80a4a7c <_ZN9USBSerial5beginEl>
    delay(2000); // Allow board to settle
 80a2400:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a2404:	f001 fec4 	bl	80a4190 <delay>

    Serial.printlnf(" ");
 80a2408:	f002 fb44 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a240c:	495d      	ldr	r1, [pc, #372]	; (80a2584 <setup+0x194>)
 80a240e:	f7fe ff37 	bl	80a1280 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    Serial.printlnf(" ");
 80a2412:	f002 fb3f 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2416:	495b      	ldr	r1, [pc, #364]	; (80a2584 <setup+0x194>)
 80a2418:	f7fe ff32 	bl	80a1280 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    Serial.printlnf("----------------------");
 80a241c:	f002 fb3a 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2420:	4959      	ldr	r1, [pc, #356]	; (80a2588 <setup+0x198>)
 80a2422:	f7fe ff2d 	bl	80a1280 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    Serial.printlnf("      Welcome");
 80a2426:	f002 fb35 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a242a:	4958      	ldr	r1, [pc, #352]	; (80a258c <setup+0x19c>)
 80a242c:	f7fe ff28 	bl	80a1280 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    Serial.printlnf("----------------------");
    hwID = System.deviceID();
 80a2430:	4c57      	ldr	r4, [pc, #348]	; (80a2590 <setup+0x1a0>)

    Serial.printlnf(" ");
    Serial.printlnf(" ");
    Serial.printlnf("----------------------");
    Serial.printlnf("      Welcome");
    Serial.printlnf("----------------------");
 80a2432:	f002 fb2f 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2436:	4954      	ldr	r1, [pc, #336]	; (80a2588 <setup+0x198>)
 80a2438:	f7fe ff22 	bl	80a1280 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 80a243c:	4668      	mov	r0, sp
 80a243e:	f001 f8c3 	bl	80a35c8 <spark_deviceID>
    hwID = System.deviceID();
 80a2442:	4669      	mov	r1, sp
 80a2444:	4620      	mov	r0, r4
 80a2446:	f001 fc94 	bl	80a3d72 <_ZN6StringaSEOS_>
 80a244a:	4668      	mov	r0, sp
 80a244c:	f001 fc00 	bl	80a3c50 <_ZN6StringD1Ev>
    Serial.printlnf(hwID);
 80a2450:	f002 fb20 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2454:	6821      	ldr	r1, [r4, #0]
 80a2456:	f7fe ff13 	bl	80a1280 <_ZN5Print8printlnfIIEEEjPKcDpT_>

    slow_counter = 6;
 80a245a:	4b4e      	ldr	r3, [pc, #312]	; (80a2594 <setup+0x1a4>)
 80a245c:	2206      	movs	r2, #6
 80a245e:	601a      	str	r2, [r3, #0]

    conrad_rsl_init();  // 433 MHz Sender abschalten
 80a2460:	f000 fbb2 	bl	80a2bc8 <_Z15conrad_rsl_initv>

    ultra_sonic_setup();
 80a2464:	f000 f9dc 	bl	80a2820 <_Z17ultra_sonic_setupv>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
 80a2468:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a246c:	f000 fd76 	bl	80a2f5c <_Z10BlynkDelaym>
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
 80a2470:	4c49      	ldr	r4, [pc, #292]	; (80a2598 <setup+0x1a8>)
 80a2472:	4b4a      	ldr	r3, [pc, #296]	; (80a259c <setup+0x1ac>)

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
 80a2474:	f241 776f 	movw	r7, #5999	; 0x176f
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
 80a2478:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a247a:	f000 fd71 	bl	80a2f60 <_Z11BlynkMillisv>
 80a247e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a2482:	3808      	subs	r0, #8
 80a2484:	6120      	str	r0, [r4, #16]
 80a2486:	60e0      	str	r0, [r4, #12]
 80a2488:	6160      	str	r0, [r4, #20]
            "      \\/___/  \\/____/ `/___/\\ \\\\/_/\\/_/ \\/_//_/\n"
            "                         /\\___/\n"
            "                         \\/__/   " BLYNK_VERSION " on " BLYNK_INFO_DEVICE "\n"
        ));
#else
        BLYNK_LOG1(BLYNK_F("\n"
 80a248a:	f7fe fc37 	bl	80a0cfc <_ZL14BLYNK_LOG_TIMEv>
 80a248e:	f002 fb01 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2492:	4943      	ldr	r1, [pc, #268]	; (80a25a0 <setup+0x1b0>)
 80a2494:	f001 fcae 	bl	80a3df4 <_ZN5Print7printlnEPKc>
    void config(const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
 80a2498:	6823      	ldr	r3, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
 80a249a:	4a42      	ldr	r2, [pc, #264]	; (80a25a4 <setup+0x1b4>)

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
 80a249c:	2600      	movs	r6, #0
 80a249e:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
 80a24a0:	2250      	movs	r2, #80	; 0x50
 80a24a2:	871a      	strh	r2, [r3, #56]	; 0x38
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a24a4:	6820      	ldr	r0, [r4, #0]
 80a24a6:	f001 fa4b 	bl	80a3940 <_ZN9TCPClient4stopEv>
 80a24aa:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
 80a24ac:	f000 fd58 	bl	80a2f60 <_Z11BlynkMillisv>
 80a24b0:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
 80a24b2:	7f63      	ldrb	r3, [r4, #29]
 80a24b4:	2b01      	cmp	r3, #1
 80a24b6:	d009      	beq.n	80a24cc <setup+0xdc>
               (BlynkMillis() - started < timeout))
 80a24b8:	f000 fd52 	bl	80a2f60 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
 80a24bc:	1b40      	subs	r0, r0, r5
 80a24be:	42b8      	cmp	r0, r7
 80a24c0:	d804      	bhi.n	80a24cc <setup+0xdc>
               (BlynkMillis() - started < timeout))
        {
            run();
 80a24c2:	2100      	movs	r1, #0
 80a24c4:	4834      	ldr	r0, [pc, #208]	; (80a2598 <setup+0x1a8>)
 80a24c6:	f7ff f9c3 	bl	80a1850 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a24ca:	e7f2      	b.n	80a24b2 <setup+0xc2>
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
 80a24cc:	7f65      	ldrb	r5, [r4, #29]
 80a24ce:	2d01      	cmp	r5, #1
 80a24d0:	d1e8      	bne.n	80a24a4 <setup+0xb4>

    Blynk.begin(auth);

    WriteToDatabase ( "WASSER", "SETUP/RESET ");
 80a24d2:	4935      	ldr	r1, [pc, #212]	; (80a25a8 <setup+0x1b8>)
 80a24d4:	4835      	ldr	r0, [pc, #212]	; (80a25ac <setup+0x1bc>)
 80a24d6:	f7fe f835 	bl	80a0544 <_Z15WriteToDatabasePcS_>

    Time.zone(+1); // Winterzeit
 80a24da:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a24de:	f001 fdcf 	bl	80a4080 <_ZN9TimeClass4zoneEf>
    //Time.zone(+2); // Sommerzeit

    pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a24e2:	4629      	mov	r1, r5
 80a24e4:	2000      	movs	r0, #0
 80a24e6:	f002 fd53 	bl	80a4f90 <pinMode>
    pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a24ea:	4629      	mov	r1, r5
 80a24ec:	2007      	movs	r0, #7
 80a24ee:	f002 fd4f 	bl	80a4f90 <pinMode>

    st_funk_pumpe = switch_pumpe_main(OFF,0);
 80a24f2:	2100      	movs	r1, #0
 80a24f4:	4608      	mov	r0, r1
 80a24f6:	f7fe fe23 	bl	80a1140 <_Z17switch_pumpe_mainii>
 80a24fa:	4b2d      	ldr	r3, [pc, #180]	; (80a25b0 <setup+0x1c0>)
    st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
 80a24fc:	2100      	movs	r1, #0
    //Time.zone(+2); // Sommerzeit

    pinMode(DO_PUMPE_MAIN, OUTPUT);
    pinMode(DO_PUMPE_RESERVE, OUTPUT);

    st_funk_pumpe = switch_pumpe_main(OFF,0);
 80a24fe:	6018      	str	r0, [r3, #0]
    st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
 80a2500:	4608      	mov	r0, r1
 80a2502:	f7fe fe4f 	bl	80a11a4 <_Z20switch_pumpe_reserveii>
 80a2506:	4b2b      	ldr	r3, [pc, #172]	; (80a25b4 <setup+0x1c4>)

    pinMode(BLYNK_LED, OUTPUT);
 80a2508:	4629      	mov	r1, r5

    pinMode(DO_PUMPE_MAIN, OUTPUT);
    pinMode(DO_PUMPE_RESERVE, OUTPUT);

    st_funk_pumpe = switch_pumpe_main(OFF,0);
    st_reserve_pumpe = switch_pumpe_reserve(OFF,0);
 80a250a:	6018      	str	r0, [r3, #0]

    pinMode(BLYNK_LED, OUTPUT);
 80a250c:	2007      	movs	r0, #7
 80a250e:	f002 fd3f 	bl	80a4f90 <pinMode>
    pinMode(DONT_SLEEP_PIN  , INPUT);
 80a2512:	2100      	movs	r1, #0
 80a2514:	2006      	movs	r0, #6
 80a2516:	f002 fd3b 	bl	80a4f90 <pinMode>

    EEPROM.get(0, control);
 80a251a:	f002 fdd7 	bl	80a50cc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a251e:	220c      	movs	r2, #12
 80a2520:	4925      	ldr	r1, [pc, #148]	; (80a25b8 <setup+0x1c8>)
 80a2522:	2000      	movs	r0, #0
 80a2524:	f000 fe68 	bl	80a31f8 <HAL_EEPROM_Get>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a2528:	4a24      	ldr	r2, [pc, #144]	; (80a25bc <setup+0x1cc>)
 80a252a:	4925      	ldr	r1, [pc, #148]	; (80a25c0 <setup+0x1d0>)
 80a252c:	4825      	ldr	r0, [pc, #148]	; (80a25c4 <setup+0x1d4>)
 80a252e:	f001 ff59 	bl	80a43e4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    // publish function ledToggle with name "led"
    Spark.function("led",ledToggle);
    Particle.variable("st_funk_pumpe", " setup ");
    Particle.variable("dontSleep", 0);
 80a2532:	2400      	movs	r4, #0
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a2534:	2300      	movs	r3, #0
 80a2536:	2204      	movs	r2, #4
 80a2538:	4923      	ldr	r1, [pc, #140]	; (80a25c8 <setup+0x1d8>)
 80a253a:	4824      	ldr	r0, [pc, #144]	; (80a25cc <setup+0x1dc>)
 80a253c:	f001 f824 	bl	80a3588 <spark_variable>
 80a2540:	4623      	mov	r3, r4
 80a2542:	2202      	movs	r2, #2
 80a2544:	4669      	mov	r1, sp
 80a2546:	4822      	ldr	r0, [pc, #136]	; (80a25d0 <setup+0x1e0>)
 80a2548:	9400      	str	r4, [sp, #0]
 80a254a:	f001 f81d 	bl	80a3588 <spark_variable>
 80a254e:	4623      	mov	r3, r4
 80a2550:	2202      	movs	r2, #2
 80a2552:	4669      	mov	r1, sp
 80a2554:	481f      	ldr	r0, [pc, #124]	; (80a25d4 <setup+0x1e4>)
    Particle.variable("dontSleepSW", 0);
 80a2556:	9400      	str	r4, [sp, #0]
 80a2558:	f001 f816 	bl	80a3588 <spark_variable>

    help();
 80a255c:	f7ff fb34 	bl	80a1bc8 <_Z4helpv>

    tnow = getTime();
 80a2560:	f7fe fcfa 	bl	80a0f58 <_Z7getTimev>
 80a2564:	4b1c      	ldr	r3, [pc, #112]	; (80a25d8 <setup+0x1e8>)
    ts_giessen = 8*60+2;  // zu dieser Zeit wird die Wasserpumpe eingeschaltet
 80a2566:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
    Particle.variable("dontSleep", 0);
    Particle.variable("dontSleepSW", 0);

    help();

    tnow = getTime();
 80a256a:	6018      	str	r0, [r3, #0]
    ts_giessen = 8*60+2;  // zu dieser Zeit wird die Wasserpumpe eingeschaltet
 80a256c:	4b1b      	ldr	r3, [pc, #108]	; (80a25dc <setup+0x1ec>)
 80a256e:	601a      	str	r2, [r3, #0]

    waterlevel = ultra_sonic_measure();
 80a2570:	f7fe fad6 	bl	80a0b20 <_Z19ultra_sonic_measurev>
 80a2574:	4b1a      	ldr	r3, [pc, #104]	; (80a25e0 <setup+0x1f0>)

    if (waterlevel < 200)
 80a2576:	28c7      	cmp	r0, #199	; 0xc7
    help();

    tnow = getTime();
    ts_giessen = 8*60+2;  // zu dieser Zeit wird die Wasserpumpe eingeschaltet

    waterlevel = ultra_sonic_measure();
 80a2578:	6018      	str	r0, [r3, #0]

    if (waterlevel < 200)
 80a257a:	dc01      	bgt.n	80a2580 <setup+0x190>
    {
      TankFuellen();
 80a257c:	f7ff fbf4 	bl	80a1d68 <_Z11TankFuellenv>
    }


}
 80a2580:	b005      	add	sp, #20
 80a2582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2584:	080a7518 	.word	0x080a7518
 80a2588:	080a7761 	.word	0x080a7761
 80a258c:	080a7778 	.word	0x080a7778
 80a2590:	200002f4 	.word	0x200002f4
 80a2594:	20000408 	.word	0x20000408
 80a2598:	20000350 	.word	0x20000350
 80a259c:	20000008 	.word	0x20000008
 80a25a0:	080a7786 	.word	0x080a7786
 80a25a4:	080a7815 	.word	0x080a7815
 80a25a8:	080a7825 	.word	0x080a7825
 80a25ac:	080a7001 	.word	0x080a7001
 80a25b0:	20000370 	.word	0x20000370
 80a25b4:	20000400 	.word	0x20000400
 80a25b8:	20000410 	.word	0x20000410
 80a25bc:	080a7832 	.word	0x080a7832
 80a25c0:	080a1d15 	.word	0x080a1d15
 80a25c4:	080a43b9 	.word	0x080a43b9
 80a25c8:	080a7836 	.word	0x080a7836
 80a25cc:	080a783e 	.word	0x080a783e
 80a25d0:	080a784c 	.word	0x080a784c
 80a25d4:	080a7856 	.word	0x080a7856
 80a25d8:	2000040c 	.word	0x2000040c
 80a25dc:	2000034c 	.word	0x2000034c
 80a25e0:	20000030 	.word	0x20000030

080a25e4 <loop>:

/*---------------------------------------------------------------------
The main loop runs forever
---------------------------------------------------------------------*/
void loop()
{
 80a25e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned long rf_code;
    int minutes;

    Blynk.run();
 80a25e6:	2100      	movs	r1, #0
 80a25e8:	484e      	ldr	r0, [pc, #312]	; (80a2724 <loop+0x140>)
 80a25ea:	f7ff f931 	bl	80a1850 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>

    fast_counter++;

    if (fast_counter>3500)
 80a25ee:	f640 51ac 	movw	r1, #3500	; 0xdac
    unsigned long rf_code;
    int minutes;

    Blynk.run();

    fast_counter++;
 80a25f2:	4a4d      	ldr	r2, [pc, #308]	; (80a2728 <loop+0x144>)
 80a25f4:	4c4d      	ldr	r4, [pc, #308]	; (80a272c <loop+0x148>)
 80a25f6:	6813      	ldr	r3, [r2, #0]
 80a25f8:	3301      	adds	r3, #1

    if (fast_counter>3500)
 80a25fa:	428b      	cmp	r3, r1
 80a25fc:	dc01      	bgt.n	80a2602 <loop+0x1e>
    unsigned long rf_code;
    int minutes;

    Blynk.run();

    fast_counter++;
 80a25fe:	6013      	str	r3, [r2, #0]
 80a2600:	e025      	b.n	80a264e <loop+0x6a>

    if (fast_counter>3500)
    {

          fast_counter=0;
          slow_counter++;
 80a2602:	6823      	ldr	r3, [r4, #0]
    fast_counter++;

    if (fast_counter>3500)
    {

          fast_counter=0;
 80a2604:	2500      	movs	r5, #0
          slow_counter++;
 80a2606:	3301      	adds	r3, #1
    fast_counter++;

    if (fast_counter>3500)
    {

          fast_counter=0;
 80a2608:	6015      	str	r5, [r2, #0]
          slow_counter++;
 80a260a:	6023      	str	r3, [r4, #0]

          tnow = getTime();
 80a260c:	f7fe fca4 	bl	80a0f58 <_Z7getTimev>
 80a2610:	4b47      	ldr	r3, [pc, #284]	; (80a2730 <loop+0x14c>)
 80a2612:	6018      	str	r0, [r3, #0]

          printStatus();
 80a2614:	f7fe fd04 	bl	80a1020 <_Z11printStatusv>

          dontSleepHW = checkDontSleepPin();
 80a2618:	f7fe fe3c 	bl	80a1294 <_Z17checkDontSleepPinv>
 80a261c:	4b45      	ldr	r3, [pc, #276]	; (80a2734 <loop+0x150>)
 80a261e:	6018      	str	r0, [r3, #0]

          BlumenGiessen(0,ts_giessen);
 80a2620:	4b45      	ldr	r3, [pc, #276]	; (80a2738 <loop+0x154>)
 80a2622:	4628      	mov	r0, r5
 80a2624:	6819      	ldr	r1, [r3, #0]
 80a2626:	f7ff fafb 	bl	80a1c20 <_Z13BlumenGiessenii>
          //    TankFuellen();
          //}



          if ((Time.minute() %10 ) == 0)
 80a262a:	f001 fd77 	bl	80a411c <_ZN9TimeClass6minuteEv>
 80a262e:	230a      	movs	r3, #10
 80a2630:	fb90 f2f3 	sdiv	r2, r0, r3
 80a2634:	fb02 0013 	mls	r0, r2, r3, r0
 80a2638:	b910      	cbnz	r0, 80a2640 <loop+0x5c>
          {
              sleep(3);
 80a263a:	2003      	movs	r0, #3
 80a263c:	f7ff fbc2 	bl	80a1dc4 <_Z5sleepi>
          }

          // wir schlafen bis zur nächsten Stunde

          if (Time.minute() == 10)
 80a2640:	f001 fd6c 	bl	80a411c <_ZN9TimeClass6minuteEv>
 80a2644:	280a      	cmp	r0, #10
 80a2646:	d102      	bne.n	80a264e <loop+0x6a>
          {
              sleep(45);
 80a2648:	202d      	movs	r0, #45	; 0x2d
 80a264a:	f7ff fbbb 	bl	80a1dc4 <_Z5sleepi>
          }


    } // if fast_counter

    if(slow_counter>8)
 80a264e:	6823      	ldr	r3, [r4, #0]
 80a2650:	2b08      	cmp	r3, #8
 80a2652:	dd4c      	ble.n	80a26ee <loop+0x10a>
    {
        slow_counter = 0;
 80a2654:	4b35      	ldr	r3, [pc, #212]	; (80a272c <loop+0x148>)
 80a2656:	2500      	movs	r5, #0

        getSleepTime(55);  // time to wake up at minute = 55
 80a2658:	2037      	movs	r0, #55	; 0x37

    } // if fast_counter

    if(slow_counter>8)
    {
        slow_counter = 0;
 80a265a:	601d      	str	r5, [r3, #0]

        getSleepTime(55);  // time to wake up at minute = 55
 80a265c:	f7fe fc9a 	bl	80a0f94 <_Z12getSleepTimei>

        Serial.print(" Photon HW ID ");
 80a2660:	f002 fa18 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2664:	4935      	ldr	r1, [pc, #212]	; (80a273c <loop+0x158>)
 80a2666:	f001 fbb2 	bl	80a3dce <_ZN5Print5printEPKc>
        Serial.println(hwID);
 80a266a:	f002 fa13 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a266e:	4b34      	ldr	r3, [pc, #208]	; (80a2740 <loop+0x15c>)
 80a2670:	4c34      	ldr	r4, [pc, #208]	; (80a2744 <loop+0x160>)
 80a2672:	6819      	ldr	r1, [r3, #0]
 80a2674:	f001 fbbe 	bl	80a3df4 <_ZN5Print7printlnEPKc>

        EEPROM.get(0, control);
 80a2678:	f002 fd28 	bl	80a50cc <_Z21__fetch_global_EEPROMv>
 80a267c:	4621      	mov	r1, r4
 80a267e:	220c      	movs	r2, #12
 80a2680:	4628      	mov	r0, r5
 80a2682:	f000 fdb9 	bl	80a31f8 <HAL_EEPROM_Get>

        Serial.printlnf("Control.version     : %d ",control.version);
 80a2686:	f002 fa05 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a268a:	6822      	ldr	r2, [r4, #0]
 80a268c:	492e      	ldr	r1, [pc, #184]	; (80a2748 <loop+0x164>)
 80a268e:	f7fe fdfb 	bl	80a1288 <_ZN5Print8printlnfIImEEEjPKcDpT_>
        Serial.printlnf("Control.dontSleep   : %d ",control.dontSleepSW);
 80a2692:	f002 f9ff 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2696:	6862      	ldr	r2, [r4, #4]
 80a2698:	492c      	ldr	r1, [pc, #176]	; (80a274c <loop+0x168>)
 80a269a:	f7fe fdf5 	bl	80a1288 <_ZN5Print8printlnfIImEEEjPKcDpT_>
        Serial.printlnf("Control.dontGiessen : %d ",control.dontGiessen);
 80a269e:	f002 f9f9 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a26a2:	68a2      	ldr	r2, [r4, #8]
 80a26a4:	492a      	ldr	r1, [pc, #168]	; (80a2750 <loop+0x16c>)
 80a26a6:	f7fe fdef 	bl	80a1288 <_ZN5Print8printlnfIImEEEjPKcDpT_>

        reportDontSleepPin();
 80a26aa:	f7fe fdc9 	bl	80a1240 <_Z18reportDontSleepPinv>

        waterlevel = ultra_sonic_measure();
 80a26ae:	f7fe fa37 	bl	80a0b20 <_Z19ultra_sonic_measurev>

        get_Temperature();  // Temperature sensors not yet installed
        Serial.printlnf("temp in : %d  temp out : %d ",temp_in,temp_out);
 80a26b2:	4d28      	ldr	r5, [pc, #160]	; (80a2754 <loop+0x170>)
        Serial.printlnf("Control.dontSleep   : %d ",control.dontSleepSW);
        Serial.printlnf("Control.dontGiessen : %d ",control.dontGiessen);

        reportDontSleepPin();

        waterlevel = ultra_sonic_measure();
 80a26b4:	4b28      	ldr	r3, [pc, #160]	; (80a2758 <loop+0x174>)

        get_Temperature();  // Temperature sensors not yet installed
        Serial.printlnf("temp in : %d  temp out : %d ",temp_in,temp_out);
 80a26b6:	4c29      	ldr	r4, [pc, #164]	; (80a275c <loop+0x178>)
        Serial.printlnf("Control.dontSleep   : %d ",control.dontSleepSW);
        Serial.printlnf("Control.dontGiessen : %d ",control.dontGiessen);

        reportDontSleepPin();

        waterlevel = ultra_sonic_measure();
 80a26b8:	6018      	str	r0, [r3, #0]

        get_Temperature();  // Temperature sensors not yet installed
 80a26ba:	f7fe fabb 	bl	80a0c34 <_Z15get_Temperaturev>
        Serial.printlnf("temp in : %d  temp out : %d ",temp_in,temp_out);
 80a26be:	f002 f9e9 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a26c2:	682b      	ldr	r3, [r5, #0]
 80a26c4:	4a26      	ldr	r2, [pc, #152]	; (80a2760 <loop+0x17c>)
 80a26c6:	9300      	str	r3, [sp, #0]
 80a26c8:	6823      	ldr	r3, [r4, #0]
 80a26ca:	2101      	movs	r1, #1
 80a26cc:	f001 fc14 	bl	80a3ef8 <_ZN5Print11printf_implEbPKcz>
        sprintf(timebuffer, "TEMP IN:%d OUT:%d",temp_in,temp_out);
 80a26d0:	682b      	ldr	r3, [r5, #0]
 80a26d2:	6822      	ldr	r2, [r4, #0]
 80a26d4:	4923      	ldr	r1, [pc, #140]	; (80a2764 <loop+0x180>)
 80a26d6:	4824      	ldr	r0, [pc, #144]	; (80a2768 <loop+0x184>)
 80a26d8:	f000 ffae 	bl	80a3638 <sprintf>
        WriteToDatabase("WASSER",timebuffer);      
 80a26dc:	4922      	ldr	r1, [pc, #136]	; (80a2768 <loop+0x184>)
 80a26de:	4823      	ldr	r0, [pc, #140]	; (80a276c <loop+0x188>)
 80a26e0:	f7fd ff30 	bl	80a0544 <_Z15WriteToDatabasePcS_>
        
        Serial.println (" slow actions done ");
 80a26e4:	f002 f9d6 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a26e8:	4921      	ldr	r1, [pc, #132]	; (80a2770 <loop+0x18c>)
 80a26ea:	f001 fb83 	bl	80a3df4 <_ZN5Print7printlnEPKc>
  
    } // if slow_counter

    rf_code = rsl_receive();
 80a26ee:	f7fe f89d 	bl	80a082c <_Z11rsl_receivev>

    if (rf_code > 0)
 80a26f2:	4604      	mov	r4, r0
 80a26f4:	b198      	cbz	r0, 80a271e <loop+0x13a>
    {
        timeStamp();
 80a26f6:	f7fe fc5f 	bl	80a0fb8 <_Z9timeStampv>
        Serial.printlnf(" RX Code : %d ",rf_code);
 80a26fa:	f002 f9cb 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a26fe:	4622      	mov	r2, r4
 80a2700:	491c      	ldr	r1, [pc, #112]	; (80a2774 <loop+0x190>)
 80a2702:	f7fe fdc1 	bl	80a1288 <_ZN5Print8printlnfIImEEEjPKcDpT_>
        //terminal.println(" ");
        terminal.print("RX Code ");
 80a2706:	491c      	ldr	r1, [pc, #112]	; (80a2778 <loop+0x194>)
 80a2708:	481c      	ldr	r0, [pc, #112]	; (80a277c <loop+0x198>)
 80a270a:	f001 fb60 	bl	80a3dce <_ZN5Print5printEPKc>
        terminal.println(rf_code);
 80a270e:	220a      	movs	r2, #10
 80a2710:	4621      	mov	r1, r4
 80a2712:	481a      	ldr	r0, [pc, #104]	; (80a277c <loop+0x198>)
 80a2714:	f001 fbba 	bl	80a3e8c <_ZN5Print7printlnEmi>
        //terminal.println(" ");
        terminal.flush();
 80a2718:	4818      	ldr	r0, [pc, #96]	; (80a277c <loop+0x198>)
 80a271a:	f7ff fa11 	bl	80a1b40 <_ZN14WidgetTerminal5flushEv>
    }

} // loop
 80a271e:	b003      	add	sp, #12
 80a2720:	bd30      	pop	{r4, r5, pc}
 80a2722:	bf00      	nop
 80a2724:	20000350 	.word	0x20000350
 80a2728:	20000340 	.word	0x20000340
 80a272c:	20000408 	.word	0x20000408
 80a2730:	2000040c 	.word	0x2000040c
 80a2734:	20000348 	.word	0x20000348
 80a2738:	2000034c 	.word	0x2000034c
 80a273c:	080a7862 	.word	0x080a7862
 80a2740:	200002f4 	.word	0x200002f4
 80a2744:	20000410 	.word	0x20000410
 80a2748:	080a7871 	.word	0x080a7871
 80a274c:	080a788b 	.word	0x080a788b
 80a2750:	080a78a5 	.word	0x080a78a5
 80a2754:	200003fc 	.word	0x200003fc
 80a2758:	20000030 	.word	0x20000030
 80a275c:	2000041c 	.word	0x2000041c
 80a2760:	080a78bf 	.word	0x080a78bf
 80a2764:	080a78dc 	.word	0x080a78dc
 80a2768:	2000030c 	.word	0x2000030c
 80a276c:	080a7001 	.word	0x080a7001
 80a2770:	080a78ee 	.word	0x080a78ee
 80a2774:	080a7902 	.word	0x080a7902
 80a2778:	080a7911 	.word	0x080a7911
 80a277c:	200003b0 	.word	0x200003b0

080a2780 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz>:
      {
        st_main_pumpe = switch_pumpe_main(OFF,0);
        WriteToDatabase ( "CONTROL", "Pumpe ausgeschaltet by button ");
        println(" Pumpe ausgeschaltet by button ");
      }
}
 80a2780:	b570      	push	{r4, r5, r6, lr}
 80a2782:	4b1c      	ldr	r3, [pc, #112]	; (80a27f4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x74>)

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
 80a2784:	4d1c      	ldr	r5, [pc, #112]	; (80a27f8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x78>)
 80a2786:	2400      	movs	r4, #0
 80a2788:	601c      	str	r4, [r3, #0]
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
 80a278a:	4e1c      	ldr	r6, [pc, #112]	; (80a27fc <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x7c>)
 80a278c:	f000 fc84 	bl	80a3098 <HAL_Pin_Map>
 80a2790:	4628      	mov	r0, r5
 80a2792:	f001 fa05 	bl	80a3ba0 <_ZN9TCPClientC1Ev>
 80a2796:	f105 001c 	add.w	r0, r5, #28
 80a279a:	f002 f8d7 	bl	80a494c <_ZN9IPAddressC1Ev>
 80a279e:	4632      	mov	r2, r6
 80a27a0:	4917      	ldr	r1, [pc, #92]	; (80a2800 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x80>)
 80a27a2:	4628      	mov	r0, r5
 80a27a4:	636c      	str	r4, [r5, #52]	; 0x34
 80a27a6:	872c      	strh	r4, [r5, #56]	; 0x38
 80a27a8:	f002 fcdc 	bl	80a5164 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
 80a27ac:	4b15      	ldr	r3, [pc, #84]	; (80a2804 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x84>)
#define ON 1
#define OFF 0

// Ersetze "... das Gedoens ..." mit dem Token aus der Email von Blynk
char auth[] = "2a5e74b8eebd444b8261b5d928ab77e6";
String hwID;
 80a27ae:	4916      	ldr	r1, [pc, #88]	; (80a2808 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x88>)
 80a27b0:	601d      	str	r5, [r3, #0]
 80a27b2:	4d16      	ldr	r5, [pc, #88]	; (80a280c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x8c>)
 80a27b4:	605c      	str	r4, [r3, #4]
 80a27b6:	609c      	str	r4, [r3, #8]
 80a27b8:	60dc      	str	r4, [r3, #12]
 80a27ba:	611c      	str	r4, [r3, #16]
 80a27bc:	615c      	str	r4, [r3, #20]
 80a27be:	831c      	strh	r4, [r3, #24]
 80a27c0:	835c      	strh	r4, [r3, #26]
 80a27c2:	771c      	strb	r4, [r3, #28]
 80a27c4:	775c      	strb	r4, [r3, #29]
 80a27c6:	4628      	mov	r0, r5
 80a27c8:	f001 fa89 	bl	80a3cde <_ZN6StringC1EPK19__FlashStringHelper>
 80a27cc:	4632      	mov	r2, r6
 80a27ce:	4910      	ldr	r1, [pc, #64]	; (80a2810 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x90>)
 80a27d0:	4628      	mov	r0, r5
 80a27d2:	f002 fcc7 	bl	80a5164 <__aeabi_atexit>
#include <Blynk/BlynkApi.h>

class BlynkWidgetBase
{
public:
    BlynkWidgetBase(uint8_t vPin) : mPin(vPin) {}
 80a27d6:	480f      	ldr	r0, [pc, #60]	; (80a2814 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x94>)
 80a27d8:	2316      	movs	r3, #22
 80a27da:	7203      	strb	r3, [r0, #8]
#endif
{
public:
    WidgetTerminal(uint8_t vPin)
        : BlynkWidgetBase(vPin)
        , mOutQty(0)
 80a27dc:	4b0e      	ldr	r3, [pc, #56]	; (80a2818 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x98>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a27de:	6044      	str	r4, [r0, #4]
 80a27e0:	6003      	str	r3, [r0, #0]
 80a27e2:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
uint dontSleepHW; // HW Pin ->  1 = do not enter sleep mode

struct control_struct control;

// Ein BLYNK APP Terminal an virtual pin V22
WidgetTerminal terminal(V22);
 80a27e6:	4632      	mov	r2, r6
      {
        st_main_pumpe = switch_pumpe_main(OFF,0);
        WriteToDatabase ( "CONTROL", "Pumpe ausgeschaltet by button ");
        println(" Pumpe ausgeschaltet by button ");
      }
}
 80a27e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
uint dontSleepHW; // HW Pin ->  1 = do not enter sleep mode

struct control_struct control;

// Ein BLYNK APP Terminal an virtual pin V22
WidgetTerminal terminal(V22);
 80a27ec:	490b      	ldr	r1, [pc, #44]	; (80a281c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x9c>)
 80a27ee:	f002 bcb9 	b.w	80a5164 <__aeabi_atexit>
 80a27f2:	bf00      	nop
 80a27f4:	20000404 	.word	0x20000404
 80a27f8:	20000374 	.word	0x20000374
 80a27fc:	20000124 	.word	0x20000124
 80a2800:	080a0dc9 	.word	0x080a0dc9
 80a2804:	20000350 	.word	0x20000350
 80a2808:	080a8020 	.word	0x080a8020
 80a280c:	200002f4 	.word	0x200002f4
 80a2810:	080a3c51 	.word	0x080a3c51
 80a2814:	200003b0 	.word	0x200003b0
 80a2818:	080a70f0 	.word	0x080a70f0
 80a281c:	080a0cf9 	.word	0x080a0cf9

080a2820 <_Z17ultra_sonic_setupv>:


#include "05_ultrasonic.h"

 void ultra_sonic_setup()
 {
 80a2820:	b508      	push	{r3, lr}
   	// Initialize pins for sensor
   	pinMode(trigPin, OUTPUT);
 80a2822:	2004      	movs	r0, #4
 80a2824:	2101      	movs	r1, #1
 80a2826:	f002 fbb3 	bl	80a4f90 <pinMode>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a282a:	4b05      	ldr	r3, [pc, #20]	; (80a2840 <_Z17ultra_sonic_setupv+0x20>)
   	digitalWriteFast(trigPin, LOW);
   	delay(50);
 80a282c:	2032      	movs	r0, #50	; 0x32
 80a282e:	681b      	ldr	r3, [r3, #0]
 80a2830:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80a2832:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80a2836:	8353      	strh	r3, [r2, #26]
 }
 80a2838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 void ultra_sonic_setup()
 {
   	// Initialize pins for sensor
   	pinMode(trigPin, OUTPUT);
   	digitalWriteFast(trigPin, LOW);
   	delay(50);
 80a283c:	f001 bca8 	b.w	80a4190 <delay>
 80a2840:	20000520 	.word	0x20000520

080a2844 <_Z16ultra_sonic_pingv>:
 }


 uint32_t ultra_sonic_ping()
 {
 80a2844:	b510      	push	{r4, lr}
   	uint32_t duration;
   	pinMode(echoPin, INPUT);
 80a2846:	2100      	movs	r1, #0
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a2848:	4c0d      	ldr	r4, [pc, #52]	; (80a2880 <_Z16ultra_sonic_pingv+0x3c>)
 80a284a:	2003      	movs	r0, #3
 80a284c:	f002 fba0 	bl	80a4f90 <pinMode>
   	pinMode(trigPin, OUTPUT);
 80a2850:	2101      	movs	r1, #1
 80a2852:	2004      	movs	r0, #4
 80a2854:	f002 fb9c 	bl	80a4f90 <pinMode>
 80a2858:	6823      	ldr	r3, [r4, #0]
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a285a:	200a      	movs	r0, #10
 80a285c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80a285e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80a2862:	8313      	strh	r3, [r2, #24]
 80a2864:	f000 fca0 	bl	80a31a8 <HAL_Delay_Microseconds>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a2868:	6823      	ldr	r3, [r4, #0]
   	// The sensor is triggered by a HIGH pulse of 10 or more microseconds.
   	digitalWriteFast(trigPin, HIGH);
   	delayMicroseconds(10);
   	digitalWriteFast(trigPin, LOW);

   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin
 80a286a:	2101      	movs	r1, #1
 80a286c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80a286e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80a2872:	2003      	movs	r0, #3
 80a2874:	8353      	strh	r3, [r2, #26]

   	return duration;
 }
 80a2876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   	// The sensor is triggered by a HIGH pulse of 10 or more microseconds.
   	digitalWriteFast(trigPin, HIGH);
   	delayMicroseconds(10);
   	digitalWriteFast(trigPin, LOW);

   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin
 80a287a:	f002 bc03 	b.w	80a5084 <pulseIn>
 80a287e:	bf00      	nop
 80a2880:	20000520 	.word	0x20000520

080a2884 <_Z6uMillim>:
uint32_t uMilli(uint32_t microseconds)
{
     // The speed of sound is 340 m/s or 29 microseconds per centimeter.
     // The ping travels out and back, so to find the distance of the
     // object we take half of the distance travelled.
     return ( 10 * microseconds / 29 / 2);
 80a2884:	230a      	movs	r3, #10
 80a2886:	4358      	muls	r0, r3
}
 80a2888:	233a      	movs	r3, #58	; 0x3a
 80a288a:	fbb0 f0f3 	udiv	r0, r0, r3
 80a288e:	4770      	bx	lr

080a2890 <_GLOBAL__sub_I__Z17ultra_sonic_setupv>:
 80a2890:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a2892:	f000 fc01 	bl	80a3098 <HAL_Pin_Map>
 80a2896:	4b01      	ldr	r3, [pc, #4]	; (80a289c <_GLOBAL__sub_I__Z17ultra_sonic_setupv+0xc>)
 80a2898:	6018      	str	r0, [r3, #0]
 80a289a:	bd08      	pop	{r3, pc}
 80a289c:	20000520 	.word	0x20000520

080a28a0 <_ZN7OneWire19digitalWriteFastLowEv>:
  #else
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a28a0:	8802      	ldrh	r2, [r0, #0]
 80a28a2:	231c      	movs	r3, #28
 80a28a4:	4353      	muls	r3, r2
 80a28a6:	6842      	ldr	r2, [r0, #4]
 80a28a8:	18d1      	adds	r1, r2, r3
 80a28aa:	58d3      	ldr	r3, [r2, r3]
 80a28ac:	888a      	ldrh	r2, [r1, #4]
 80a28ae:	835a      	strh	r2, [r3, #26]
 80a28b0:	4770      	bx	lr

080a28b2 <_ZN7OneWireC1Et>:
*/

#include "onewire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a28b2:	b538      	push	{r3, r4, r5, lr}
 80a28b4:	4604      	mov	r4, r0
 80a28b6:	460d      	mov	r5, r1

  // Assume all other platforms are STM32F2xx until proven otherwise
  //#elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
  #else
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80a28b8:	f000 fbee 	bl	80a3098 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a28bc:	2100      	movs	r1, #0
*/

#include "onewire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a28be:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80a28c0:	4628      	mov	r0, r5
 80a28c2:	f002 fb65 	bl	80a4f90 <pinMode>
    _pin = pin;
 80a28c6:	8025      	strh	r5, [r4, #0]
}
 80a28c8:	4620      	mov	r0, r4
 80a28ca:	bd38      	pop	{r3, r4, r5, pc}

080a28cc <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a28cc:	b538      	push	{r3, r4, r5, lr}
 80a28ce:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a28d0:	f002 f978 	bl	80a4bc4 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a28d4:	2100      	movs	r1, #0
 80a28d6:	8828      	ldrh	r0, [r5, #0]
 80a28d8:	f000 fbee 	bl	80a30b8 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a28dc:	f002 f974 	bl	80a4bc8 <_Z10interruptsv>
 80a28e0:	247d      	movs	r4, #125	; 0x7d
 80a28e2:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
 80a28e4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a28e8:	d02d      	beq.n	80a2946 <_ZN7OneWire5resetEv+0x7a>
 80a28ea:	2002      	movs	r0, #2
 80a28ec:	f000 fc5c 	bl	80a31a8 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a28f0:	8828      	ldrh	r0, [r5, #0]
 80a28f2:	f000 fbf9 	bl	80a30e8 <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
 80a28f6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a28fa:	d0f2      	beq.n	80a28e2 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
 80a28fc:	f002 f962 	bl	80a4bc4 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a2900:	4628      	mov	r0, r5
 80a2902:	f7ff ffcd 	bl	80a28a0 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a2906:	2101      	movs	r1, #1
 80a2908:	8828      	ldrh	r0, [r5, #0]
 80a290a:	f000 fbd5 	bl	80a30b8 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
 80a290e:	f002 f95b 	bl	80a4bc8 <_Z10interruptsv>
 80a2912:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a2916:	f000 fc47 	bl	80a31a8 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
 80a291a:	f002 f953 	bl	80a4bc4 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a291e:	2100      	movs	r1, #0
 80a2920:	8828      	ldrh	r0, [r5, #0]
 80a2922:	f000 fbc9 	bl	80a30b8 <HAL_Pin_Mode>
 80a2926:	2046      	movs	r0, #70	; 0x46
 80a2928:	f000 fc3e 	bl	80a31a8 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a292c:	8828      	ldrh	r0, [r5, #0]
 80a292e:	f000 fbdb 	bl	80a30e8 <HAL_GPIO_Read>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a2932:	b2c0      	uxtb	r0, r0
 80a2934:	fab0 f480 	clz	r4, r0

    interrupts();
 80a2938:	f002 f946 	bl	80a4bc8 <_Z10interruptsv>
 80a293c:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a2940:	0964      	lsrs	r4, r4, #5
 80a2942:	f000 fc31 	bl	80a31a8 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
 80a2946:	4620      	mov	r0, r4
 80a2948:	bd38      	pop	{r3, r4, r5, pc}

080a294a <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a294a:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 80a294c:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 80a2950:	4604      	mov	r4, r0
    if (v & 1) {
 80a2952:	d013      	beq.n	80a297c <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 80a2954:	f002 f936 	bl	80a4bc4 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a2958:	4620      	mov	r0, r4
 80a295a:	f7ff ffa1 	bl	80a28a0 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a295e:	2101      	movs	r1, #1
 80a2960:	8820      	ldrh	r0, [r4, #0]
 80a2962:	f000 fba9 	bl	80a30b8 <HAL_Pin_Mode>
 80a2966:	200a      	movs	r0, #10
 80a2968:	f000 fc1e 	bl	80a31a8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a296c:	8820      	ldrh	r0, [r4, #0]
 80a296e:	2100      	movs	r1, #0
 80a2970:	f000 fba2 	bl	80a30b8 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
 80a2974:	f002 f928 	bl	80a4bc8 <_Z10interruptsv>
 80a2978:	2037      	movs	r0, #55	; 0x37
 80a297a:	e012      	b.n	80a29a2 <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
 80a297c:	f002 f922 	bl	80a4bc4 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a2980:	4620      	mov	r0, r4
 80a2982:	f7ff ff8d 	bl	80a28a0 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a2986:	2101      	movs	r1, #1
 80a2988:	8820      	ldrh	r0, [r4, #0]
 80a298a:	f000 fb95 	bl	80a30b8 <HAL_Pin_Mode>
 80a298e:	2041      	movs	r0, #65	; 0x41
 80a2990:	f000 fc0a 	bl	80a31a8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a2994:	8820      	ldrh	r0, [r4, #0]
 80a2996:	4629      	mov	r1, r5
 80a2998:	f000 fb8e 	bl	80a30b8 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
 80a299c:	f002 f914 	bl	80a4bc8 <_Z10interruptsv>
 80a29a0:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
 80a29a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a29a6:	f000 bbff 	b.w	80a31a8 <HAL_Delay_Microseconds>

080a29aa <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a29aa:	b510      	push	{r4, lr}
 80a29ac:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
 80a29ae:	f002 f909 	bl	80a4bc4 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a29b2:	4620      	mov	r0, r4
 80a29b4:	f7ff ff74 	bl	80a28a0 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a29b8:	2101      	movs	r1, #1
 80a29ba:	8820      	ldrh	r0, [r4, #0]
 80a29bc:	f000 fb7c 	bl	80a30b8 <HAL_Pin_Mode>
 80a29c0:	2003      	movs	r0, #3
 80a29c2:	f000 fbf1 	bl	80a31a8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a29c6:	2100      	movs	r1, #0
 80a29c8:	8820      	ldrh	r0, [r4, #0]
 80a29ca:	f000 fb75 	bl	80a30b8 <HAL_Pin_Mode>
 80a29ce:	200a      	movs	r0, #10
 80a29d0:	f000 fbea 	bl	80a31a8 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a29d4:	8820      	ldrh	r0, [r4, #0]
 80a29d6:	f000 fb87 	bl	80a30e8 <HAL_GPIO_Read>
 80a29da:	4604      	mov	r4, r0

    delayMicroseconds(10);

    r = digitalReadFast();

    interrupts();
 80a29dc:	f002 f8f4 	bl	80a4bc8 <_Z10interruptsv>
 80a29e0:	2035      	movs	r0, #53	; 0x35
 80a29e2:	f000 fbe1 	bl	80a31a8 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
 80a29e6:	b2e0      	uxtb	r0, r4
 80a29e8:	bd10      	pop	{r4, pc}

080a29ea <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
 80a29ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a29ee:	4605      	mov	r5, r0
 80a29f0:	4688      	mov	r8, r1
 80a29f2:	4617      	mov	r7, r2
 80a29f4:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a29f6:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a29f8:	ea18 0f04 	tst.w	r8, r4
 80a29fc:	bf14      	ite	ne
 80a29fe:	2101      	movne	r1, #1
 80a2a00:	2100      	moveq	r1, #0
 80a2a02:	4628      	mov	r0, r5
 80a2a04:	f7ff ffa1 	bl	80a294a <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2a08:	0064      	lsls	r4, r4, #1
 80a2a0a:	3e01      	subs	r6, #1
 80a2a0c:	b2e4      	uxtb	r4, r4
 80a2a0e:	d1f3      	bne.n	80a29f8 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
 80a2a10:	b18f      	cbz	r7, 80a2a36 <_ZN7OneWire5writeEhh+0x4c>
        noInterrupts();
 80a2a12:	f002 f8d7 	bl	80a4bc4 <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a2a16:	882a      	ldrh	r2, [r5, #0]
 80a2a18:	231c      	movs	r3, #28
 80a2a1a:	4353      	muls	r3, r2
 80a2a1c:	686a      	ldr	r2, [r5, #4]
 80a2a1e:	18d1      	adds	r1, r2, r3
 80a2a20:	58d3      	ldr	r3, [r2, r3]
 80a2a22:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a2a24:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a2a26:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a2a28:	8828      	ldrh	r0, [r5, #0]
 80a2a2a:	f000 fb45 	bl	80a30b8 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 80a2a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
 80a2a32:	f002 b8c9 	b.w	80a4bc8 <_Z10interruptsv>
 80a2a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2a3a <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
 80a2a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2a3c:	4607      	mov	r7, r0
 80a2a3e:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a2a40:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2a42:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a2a44:	4638      	mov	r0, r7
 80a2a46:	f7ff ffb0 	bl	80a29aa <_ZN7OneWire8read_bitEv>
 80a2a4a:	b100      	cbz	r0, 80a2a4e <_ZN7OneWire4readEv+0x14>
 80a2a4c:	4325      	orrs	r5, r4
uint8_t OneWire::read()
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2a4e:	0064      	lsls	r4, r4, #1
 80a2a50:	3e01      	subs	r6, #1
 80a2a52:	b2e4      	uxtb	r4, r4
 80a2a54:	d1f6      	bne.n	80a2a44 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
 80a2a56:	4628      	mov	r0, r5
 80a2a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2a5a <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a2a5a:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a2a5c:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a2a5e:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
 80a2a60:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a2a62:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
 80a2a64:	f7ff ffc1 	bl	80a29ea <_ZN7OneWire5writeEhh>
 80a2a68:	1e65      	subs	r5, r4, #1
 80a2a6a:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
 80a2a6c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a2a70:	2200      	movs	r2, #0
 80a2a72:	4630      	mov	r0, r6
 80a2a74:	f7ff ffb9 	bl	80a29ea <_ZN7OneWire5writeEhh>
 80a2a78:	42a5      	cmp	r5, r4
 80a2a7a:	d1f7      	bne.n	80a2a6c <_ZN7OneWire6selectEPKh+0x12>
}
 80a2a7c:	bd70      	pop	{r4, r5, r6, pc}

080a2a7e <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a2a7e:	2300      	movs	r3, #0
 80a2a80:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a2a82:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80a2a84:	7443      	strb	r3, [r0, #17]
 80a2a86:	f100 0210 	add.w	r2, r0, #16
 80a2a8a:	3008      	adds	r0, #8

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a2a8c:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
 80a2a90:	4282      	cmp	r2, r0
 80a2a92:	d1fb      	bne.n	80a2a8c <_ZN7OneWire12reset_searchEv+0xe>
    }
}
 80a2a94:	4770      	bx	lr

080a2a96 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a2a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a2a9a:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a2a9c:	4604      	mov	r4, r0
 80a2a9e:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a2aa0:	2d00      	cmp	r5, #0
 80a2aa2:	d15e      	bne.n	80a2b62 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
 80a2aa4:	f7ff ff12 	bl	80a28cc <_ZN7OneWire5resetEv>
 80a2aa8:	b920      	cbnz	r0, 80a2ab4 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
 80a2aaa:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a2aac:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80a2aae:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80a2ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80a2ab4:	462a      	mov	r2, r5
 80a2ab6:	21f0      	movs	r1, #240	; 0xf0
 80a2ab8:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80a2aba:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80a2abc:	f7ff ff95 	bl	80a29ea <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80a2ac0:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a2ac2:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80a2ac4:	4620      	mov	r0, r4
 80a2ac6:	f7ff ff70 	bl	80a29aa <_ZN7OneWire8read_bitEv>
 80a2aca:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80a2acc:	4620      	mov	r0, r4
 80a2ace:	f7ff ff6c 	bl	80a29aa <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a2ad2:	f1b9 0f01 	cmp.w	r9, #1
 80a2ad6:	d102      	bne.n	80a2ade <_ZN7OneWire6searchEPh+0x48>
 80a2ad8:	2801      	cmp	r0, #1
 80a2ada:	d11b      	bne.n	80a2b14 <_ZN7OneWire6searchEPh+0x7e>
 80a2adc:	e037      	b.n	80a2b4e <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
 80a2ade:	4581      	cmp	r9, r0
 80a2ae0:	eb04 0305 	add.w	r3, r4, r5
 80a2ae4:	d11e      	bne.n	80a2b24 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 80a2ae6:	7c22      	ldrb	r2, [r4, #16]
 80a2ae8:	4297      	cmp	r7, r2
 80a2aea:	d207      	bcs.n	80a2afc <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a2aec:	7a1a      	ldrb	r2, [r3, #8]
 80a2aee:	4216      	tst	r6, r2
 80a2af0:	bf14      	ite	ne
 80a2af2:	f04f 0901 	movne.w	r9, #1
 80a2af6:	f04f 0900 	moveq.w	r9, #0
 80a2afa:	e004      	b.n	80a2b06 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a2afc:	bf0c      	ite	eq
 80a2afe:	f04f 0901 	moveq.w	r9, #1
 80a2b02:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
 80a2b06:	f1b9 0f00 	cmp.w	r9, #0
 80a2b0a:	d103      	bne.n	80a2b14 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 80a2b0c:	2f08      	cmp	r7, #8
 80a2b0e:	d808      	bhi.n	80a2b22 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 80a2b10:	7467      	strb	r7, [r4, #17]
 80a2b12:	e006      	b.n	80a2b22 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a2b14:	1962      	adds	r2, r4, r5
 80a2b16:	7a13      	ldrb	r3, [r2, #8]
 80a2b18:	f04f 0901 	mov.w	r9, #1
 80a2b1c:	4333      	orrs	r3, r6
 80a2b1e:	7213      	strb	r3, [r2, #8]
 80a2b20:	e004      	b.n	80a2b2c <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a2b22:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a2b24:	7a1a      	ldrb	r2, [r3, #8]
 80a2b26:	ea22 0206 	bic.w	r2, r2, r6
 80a2b2a:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 80a2b2c:	4649      	mov	r1, r9
 80a2b2e:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 80a2b30:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 80a2b32:	f7ff ff0a 	bl	80a294a <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 80a2b36:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 80a2b3a:	bf04      	itt	eq
 80a2b3c:	3501      	addeq	r5, #1
 80a2b3e:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a2b40:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 80a2b44:	bf08      	it	eq
 80a2b46:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a2b48:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a2b4a:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a2b4c:	d9ba      	bls.n	80a2ac4 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 80a2b4e:	2f40      	cmp	r7, #64	; 0x40
 80a2b50:	d907      	bls.n	80a2b62 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 80a2b52:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 80a2b56:	f1ba 0f00 	cmp.w	sl, #0
 80a2b5a:	d112      	bne.n	80a2b82 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 80a2b5c:	2301      	movs	r3, #1
 80a2b5e:	74a3      	strb	r3, [r4, #18]
 80a2b60:	e00f      	b.n	80a2b82 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a2b62:	2000      	movs	r0, #0
 80a2b64:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a2b66:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 80a2b68:	7460      	strb	r0, [r4, #17]
 80a2b6a:	1de3      	adds	r3, r4, #7
 80a2b6c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a2b70:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a2b72:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a2b76:	42a3      	cmp	r3, r4
 80a2b78:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a2b7c:	d1f9      	bne.n	80a2b72 <_ZN7OneWire6searchEPh+0xdc>
 80a2b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
 80a2b82:	7a23      	ldrb	r3, [r4, #8]
 80a2b84:	2b00      	cmp	r3, #0
 80a2b86:	d0ec      	beq.n	80a2b62 <_ZN7OneWire6searchEPh+0xcc>
 80a2b88:	2001      	movs	r0, #1
 80a2b8a:	e7ee      	b.n	80a2b6a <_ZN7OneWire6searchEPh+0xd4>

080a2b8c <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a2b8c:	b530      	push	{r4, r5, lr}
 80a2b8e:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80a2b90:	2000      	movs	r0, #0

    while (len--) {
 80a2b92:	3901      	subs	r1, #1
 80a2b94:	b2c9      	uxtb	r1, r1
 80a2b96:	29ff      	cmp	r1, #255	; 0xff
 80a2b98:	d013      	beq.n	80a2bc2 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
 80a2b9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a2b9e:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a2ba0:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a2ba4:	f013 0f01 	tst.w	r3, #1
 80a2ba8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a2bac:	bf1c      	itt	ne
 80a2bae:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a2bb2:	b2d8      	uxtbne	r0, r3
 80a2bb4:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a2bb6:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
 80a2bba:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a2bbe:	d1ef      	bne.n	80a2ba0 <_ZN7OneWire4crc8EPhh+0x14>
 80a2bc0:	e7e7      	b.n	80a2b92 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
 80a2bc2:	bd30      	pop	{r4, r5, pc}

080a2bc4 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80a2bc4:	f000 ba68 	b.w	80a3098 <HAL_Pin_Map>

080a2bc8 <_Z15conrad_rsl_initv>:
/*--------------------------------------------------------------------
Diese Funktion muss einmal von setup() aufgerufen werden
call this function once from setup()
--------------------------------------------------------------------*/
void conrad_rsl_init()  
{
 80a2bc8:	b510      	push	{r4, lr}
  pinMode(dpin,OUTPUT);
 80a2bca:	4c07      	ldr	r4, [pc, #28]	; (80a2be8 <_Z15conrad_rsl_initv+0x20>)
 80a2bcc:	2101      	movs	r1, #1
 80a2bce:	8820      	ldrh	r0, [r4, #0]
 80a2bd0:	f002 f9de 	bl	80a4f90 <pinMode>
  digitalWrite(dpin,LOW);
 80a2bd4:	8820      	ldrh	r0, [r4, #0]
 80a2bd6:	2100      	movs	r1, #0
 80a2bd8:	f002 f9eb 	bl	80a4fb2 <digitalWrite>
  delay(500);
}
 80a2bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
--------------------------------------------------------------------*/
void conrad_rsl_init()  
{
  pinMode(dpin,OUTPUT);
  digitalWrite(dpin,LOW);
  delay(500);
 80a2be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a2be4:	f001 bad4 	b.w	80a4190 <delay>
 80a2be8:	20000034 	.word	0x20000034

080a2bec <_Z19conrad_rsl_transmitPi>:
The next value sets transmitter pin HIGH

------------------------------------------------------------------------------*/
  void conrad_rsl_transmit (int* code)

  {
 80a2bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int rep;
  int i;

   digitalWrite(dpin,LOW);
 80a2bf0:	4c2e      	ldr	r4, [pc, #184]	; (80a2cac <_Z19conrad_rsl_transmitPi+0xc0>)
 80a2bf2:	2100      	movs	r1, #0
The next value sets transmitter pin HIGH

------------------------------------------------------------------------------*/
  void conrad_rsl_transmit (int* code)

  {
 80a2bf4:	4680      	mov	r8, r0
  int rep;
  int i;

   digitalWrite(dpin,LOW);
 80a2bf6:	8820      	ldrh	r0, [r4, #0]
 80a2bf8:	f002 f9db 	bl	80a4fb2 <digitalWrite>
 80a2bfc:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2c00:	f000 fad2 	bl	80a31a8 <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a2c04:	2100      	movs	r1, #0
 80a2c06:	8820      	ldrh	r0, [r4, #0]
 80a2c08:	f002 f9d3 	bl	80a4fb2 <digitalWrite>
 80a2c0c:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2c10:	f000 faca 	bl	80a31a8 <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a2c14:	2100      	movs	r1, #0
 80a2c16:	8820      	ldrh	r0, [r4, #0]
 80a2c18:	f002 f9cb 	bl	80a4fb2 <digitalWrite>
 80a2c1c:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2c20:	f000 fac2 	bl	80a31a8 <HAL_Delay_Microseconds>
 80a2c24:	2608      	movs	r6, #8
 80a2c26:	f108 0504 	add.w	r5, r8, #4
 80a2c2a:	2700      	movs	r7, #0

    for (rep=0; rep<8; rep++)
     {
       // send the bits from data array

     for (i=0; i < code[0]; i = i+4)
 80a2c2c:	f8d8 3000 	ldr.w	r3, [r8]
 80a2c30:	3510      	adds	r5, #16
 80a2c32:	429f      	cmp	r7, r3
         digitalWrite(dpin,LOW);
         delayMicroseconds(code[i+4]);
     }

        // for RSL switch
    digitalWrite(dpin,HIGH);
 80a2c34:	f04f 0101 	mov.w	r1, #1
 80a2c38:	8820      	ldrh	r0, [r4, #0]

    for (rep=0; rep<8; rep++)
     {
       // send the bits from data array

     for (i=0; i < code[0]; i = i+4)
 80a2c3a:	da1f      	bge.n	80a2c7c <_Z19conrad_rsl_transmitPi+0x90>
     {
         digitalWrite(dpin,HIGH);
 80a2c3c:	f002 f9b9 	bl	80a4fb2 <digitalWrite>
 80a2c40:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80a2c44:	f000 fab0 	bl	80a31a8 <HAL_Delay_Microseconds>
         delayMicroseconds(code[i+1]);
         digitalWrite(dpin,LOW);
 80a2c48:	2100      	movs	r1, #0
 80a2c4a:	8820      	ldrh	r0, [r4, #0]
 80a2c4c:	f002 f9b1 	bl	80a4fb2 <digitalWrite>
 80a2c50:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 80a2c54:	f000 faa8 	bl	80a31a8 <HAL_Delay_Microseconds>
         delayMicroseconds(code[i+2]);

         digitalWrite(dpin,HIGH);
 80a2c58:	2101      	movs	r1, #1
 80a2c5a:	8820      	ldrh	r0, [r4, #0]
 80a2c5c:	f002 f9a9 	bl	80a4fb2 <digitalWrite>
 80a2c60:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80a2c64:	f000 faa0 	bl	80a31a8 <HAL_Delay_Microseconds>
         delayMicroseconds(code[i+3]);
         digitalWrite(dpin,LOW);
 80a2c68:	2100      	movs	r1, #0
 80a2c6a:	8820      	ldrh	r0, [r4, #0]
 80a2c6c:	f002 f9a1 	bl	80a4fb2 <digitalWrite>
 80a2c70:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a2c74:	f000 fa98 	bl	80a31a8 <HAL_Delay_Microseconds>

    for (rep=0; rep<8; rep++)
     {
       // send the bits from data array

     for (i=0; i < code[0]; i = i+4)
 80a2c78:	3704      	adds	r7, #4
 80a2c7a:	e7d7      	b.n	80a2c2c <_Z19conrad_rsl_transmitPi+0x40>
         digitalWrite(dpin,LOW);
         delayMicroseconds(code[i+4]);
     }

        // for RSL switch
    digitalWrite(dpin,HIGH);
 80a2c7c:	f002 f999 	bl	80a4fb2 <digitalWrite>
 80a2c80:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80a2c84:	f000 fa90 	bl	80a31a8 <HAL_Delay_Microseconds>
    delayMicroseconds(ST);

    // repeat transmitting after given gap

    digitalWrite(dpin,LOW);
 80a2c88:	2100      	movs	r1, #0
 80a2c8a:	8820      	ldrh	r0, [r4, #0]
 80a2c8c:	f002 f991 	bl	80a4fb2 <digitalWrite>
 80a2c90:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80a2c94:	f000 fa88 	bl	80a31a8 <HAL_Delay_Microseconds>
   digitalWrite(dpin,LOW);
   delayMicroseconds(5000);

     // repeat sending the entire control data sequence

    for (rep=0; rep<8; rep++)
 80a2c98:	3e01      	subs	r6, #1
 80a2c9a:	d1c4      	bne.n	80a2c26 <_Z19conrad_rsl_transmitPi+0x3a>
    // repeat transmitting after given gap

    digitalWrite(dpin,LOW);
    delayMicroseconds(8000);
    }
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a2c9c:	4b03      	ldr	r3, [pc, #12]	; (80a2cac <_Z19conrad_rsl_transmitPi+0xc0>)
 80a2c9e:	4631      	mov	r1, r6
  }
 80a2ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // repeat transmitting after given gap

    digitalWrite(dpin,LOW);
    delayMicroseconds(8000);
    }
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a2ca4:	8818      	ldrh	r0, [r3, #0]
 80a2ca6:	f002 b984 	b.w	80a4fb2 <digitalWrite>
 80a2caa:	bf00      	nop
 80a2cac:	20000034 	.word	0x20000034

080a2cb0 <_Z15conrad_rsl_sendjii>:
  SHORT : dauer des kurzen Pulses in milliseconds
  LONG : dauer des langen Pulses in milliseconds

  --------------------------------------------------------------------*/
  void conrad_rsl_send(unsigned int code, int SHORT, int LONG)
  {
 80a2cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2cb4:	4605      	mov	r5, r0
 80a2cb6:	b0c6      	sub	sp, #280	; 0x118
    int k = 1;
    int tx_code[70];  // speicher tx code sequenz

    Serial.println(code);

    memset(tx_code,0,64);
 80a2cb8:	2440      	movs	r4, #64	; 0x40
  SHORT : dauer des kurzen Pulses in milliseconds
  LONG : dauer des langen Pulses in milliseconds

  --------------------------------------------------------------------*/
  void conrad_rsl_send(unsigned int code, int SHORT, int LONG)
  {
 80a2cba:	460e      	mov	r6, r1
 80a2cbc:	4617      	mov	r7, r2
    int i = 0;
    int k = 1;
    int tx_code[70];  // speicher tx code sequenz

    Serial.println(code);
 80a2cbe:	f001 fee9 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2cc2:	220a      	movs	r2, #10
 80a2cc4:	4629      	mov	r1, r5
 80a2cc6:	f001 f8d7 	bl	80a3e78 <_ZN5Print7printlnEji>

    memset(tx_code,0,64);
 80a2cca:	4622      	mov	r2, r4
 80a2ccc:	2100      	movs	r1, #0
 80a2cce:	4668      	mov	r0, sp
 80a2cd0:	f003 fbe7 	bl	80a64a2 <memset>
    tx_code[0]=64;   // die laenge des tx codes
 80a2cd4:	9400      	str	r4, [sp, #0]
 80a2cd6:	466c      	mov	r4, sp
 80a2cd8:	f50d 7880 	add.w	r8, sp, #256	; 0x100

    for(i=0; i<32; i++)
    {
      if ( (code & 0x80000000) == 0x80000000)
 80a2cdc:	2d00      	cmp	r5, #0
 80a2cde:	da05      	bge.n	80a2cec <_Z15conrad_rsl_sendjii+0x3c>
      {
        tx_code[k] = LONG;
 80a2ce0:	6067      	str	r7, [r4, #4]
        tx_code[k+1] = SHORT;
 80a2ce2:	60a6      	str	r6, [r4, #8]
        Serial.print("1");
 80a2ce4:	f001 fed6 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2ce8:	490c      	ldr	r1, [pc, #48]	; (80a2d1c <_Z15conrad_rsl_sendjii+0x6c>)
 80a2cea:	e004      	b.n	80a2cf6 <_Z15conrad_rsl_sendjii+0x46>
      }
      else
      {
        tx_code[k] = SHORT;
 80a2cec:	6066      	str	r6, [r4, #4]
        tx_code[k+1] = LONG;
 80a2cee:	60a7      	str	r7, [r4, #8]
        Serial.print("0");
 80a2cf0:	f001 fed0 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2cf4:	490a      	ldr	r1, [pc, #40]	; (80a2d20 <_Z15conrad_rsl_sendjii+0x70>)
 80a2cf6:	3408      	adds	r4, #8
 80a2cf8:	f001 f869 	bl	80a3dce <_ZN5Print5printEPKc>
    Serial.println(code);

    memset(tx_code,0,64);
    tx_code[0]=64;   // die laenge des tx codes

    for(i=0; i<32; i++)
 80a2cfc:	4544      	cmp	r4, r8
      {
        tx_code[k] = SHORT;
        tx_code[k+1] = LONG;
        Serial.print("0");
      }
      code = code << 1;
 80a2cfe:	ea4f 0545 	mov.w	r5, r5, lsl #1
    Serial.println(code);

    memset(tx_code,0,64);
    tx_code[0]=64;   // die laenge des tx codes

    for(i=0; i<32; i++)
 80a2d02:	d1eb      	bne.n	80a2cdc <_Z15conrad_rsl_sendjii+0x2c>
        Serial.print("0");
      }
      code = code << 1;
      k=k+2;
    }
    Serial.println(" ");
 80a2d04:	f001 fec6 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2d08:	4906      	ldr	r1, [pc, #24]	; (80a2d24 <_Z15conrad_rsl_sendjii+0x74>)
 80a2d0a:	f001 f873 	bl	80a3df4 <_ZN5Print7printlnEPKc>
    conrad_rsl_transmit(&tx_code[0]);
 80a2d0e:	4668      	mov	r0, sp
 80a2d10:	f7ff ff6c 	bl	80a2bec <_Z19conrad_rsl_transmitPi>
  }
 80a2d14:	b046      	add	sp, #280	; 0x118
 80a2d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2d1a:	bf00      	nop
 80a2d1c:	080a7a10 	.word	0x080a7a10
 80a2d20:	080a7a42 	.word	0x080a7a42
 80a2d24:	080a7518 	.word	0x080a7518

080a2d28 <_Z22conrad_rsl_switch_codeii>:
  void conrad_rsl_switch_code ( int which, int state )
  {

    unsigned int code = 0;

    if (which>5)
 80a2d28:	2805      	cmp	r0, #5

/*------------------------------------------------------------------------------
 Einen Funkschalter ein- oder ausschalten
------------------------------------------------------------------------------*/
  void conrad_rsl_switch_code ( int which, int state )
  {
 80a2d2a:	b538      	push	{r3, r4, r5, lr}
 80a2d2c:	4605      	mov	r5, r0
 80a2d2e:	460c      	mov	r4, r1

    unsigned int code = 0;

    if (which>5)
 80a2d30:	dd04      	ble.n	80a2d3c <_Z22conrad_rsl_switch_codeii+0x14>
    {
      Serial.println(" ERROR which not valid ");
 80a2d32:	f001 feaf 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2d36:	4916      	ldr	r1, [pc, #88]	; (80a2d90 <_Z22conrad_rsl_switch_codeii+0x68>)
 80a2d38:	f001 f85c 	bl	80a3df4 <_ZN5Print7printlnEPKc>
    }

    if (state>1)
 80a2d3c:	2c01      	cmp	r4, #1
 80a2d3e:	dd04      	ble.n	80a2d4a <_Z22conrad_rsl_switch_codeii+0x22>
    {
      Serial.println(" ERROR state not valid ");
 80a2d40:	f001 fea8 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2d44:	4913      	ldr	r1, [pc, #76]	; (80a2d94 <_Z22conrad_rsl_switch_codeii+0x6c>)
 80a2d46:	f001 f855 	bl	80a3df4 <_ZN5Print7printlnEPKc>
    }

    code = codes[state][which];
 80a2d4a:	2306      	movs	r3, #6
 80a2d4c:	fb03 5404 	mla	r4, r3, r4, r5
 80a2d50:	4b11      	ldr	r3, [pc, #68]	; (80a2d98 <_Z22conrad_rsl_switch_codeii+0x70>)
 80a2d52:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

    if (code != 0)
 80a2d56:	b19c      	cbz	r4, 80a2d80 <_Z22conrad_rsl_switch_codeii+0x58>
    {
      Serial.print("Sende Code : ");
 80a2d58:	f001 fe9c 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2d5c:	490f      	ldr	r1, [pc, #60]	; (80a2d9c <_Z22conrad_rsl_switch_codeii+0x74>)
 80a2d5e:	f001 f836 	bl	80a3dce <_ZN5Print5printEPKc>
      Serial.println(code);
 80a2d62:	f001 fe97 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2d66:	4621      	mov	r1, r4
 80a2d68:	220a      	movs	r2, #10
 80a2d6a:	f001 f885 	bl	80a3e78 <_ZN5Print7printlnEji>
      conrad_rsl_send(code,430,1150);
 80a2d6e:	4620      	mov	r0, r4
    else
    {
      Serial.print(" Fehler : konnte Code nicht finden ");
    }

  }
 80a2d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    if (code != 0)
    {
      Serial.print("Sende Code : ");
      Serial.println(code);
      conrad_rsl_send(code,430,1150);
 80a2d74:	f240 427e 	movw	r2, #1150	; 0x47e
 80a2d78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80a2d7c:	f7ff bf98 	b.w	80a2cb0 <_Z15conrad_rsl_sendjii>
    }
    else
    {
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a2d80:	f001 fe88 	bl	80a4a94 <_Z16_fetch_usbserialv>
    }

  }
 80a2d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      Serial.println(code);
      conrad_rsl_send(code,430,1150);
    }
    else
    {
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a2d88:	4905      	ldr	r1, [pc, #20]	; (80a2da0 <_Z22conrad_rsl_switch_codeii+0x78>)
 80a2d8a:	f001 b820 	b.w	80a3dce <_ZN5Print5printEPKc>
 80a2d8e:	bf00      	nop
 80a2d90:	080a791a 	.word	0x080a791a
 80a2d94:	080a7932 	.word	0x080a7932
 80a2d98:	20000038 	.word	0x20000038
 80a2d9c:	080a794a 	.word	0x080a794a
 80a2da0:	080a7958 	.word	0x080a7958

080a2da4 <_GLOBAL__sub_I_codes>:
 80a2da4:	f000 b978 	b.w	80a3098 <HAL_Pin_Map>

080a2da8 <_Z13elro_transmitPi>:
toggle transmitter data using the given data array
--------------------------------------------------------------------*/

  void elro_transmit (int* data)

  {
 80a2da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	   int rep;
	   int i;

 	   digitalWrite(datapin,LOW);
 80a2dac:	4c20      	ldr	r4, [pc, #128]	; (80a2e30 <_Z13elro_transmitPi+0x88>)
 80a2dae:	2100      	movs	r1, #0
toggle transmitter data using the given data array
--------------------------------------------------------------------*/

  void elro_transmit (int* data)

  {
 80a2db0:	4680      	mov	r8, r0
	   int rep;
	   int i;

 	   digitalWrite(datapin,LOW);
 80a2db2:	8820      	ldrh	r0, [r4, #0]
 80a2db4:	f002 f8fd 	bl	80a4fb2 <digitalWrite>
 80a2db8:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2dbc:	f000 f9f4 	bl	80a31a8 <HAL_Delay_Microseconds>
     delayMicroseconds(5000);

     digitalWrite(datapin,LOW);
 80a2dc0:	2100      	movs	r1, #0
 80a2dc2:	8820      	ldrh	r0, [r4, #0]
 80a2dc4:	f002 f8f5 	bl	80a4fb2 <digitalWrite>
 80a2dc8:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2dcc:	f000 f9ec 	bl	80a31a8 <HAL_Delay_Microseconds>
     delayMicroseconds(5000);

     digitalWrite(datapin,LOW);
 80a2dd0:	2100      	movs	r1, #0
 80a2dd2:	8820      	ldrh	r0, [r4, #0]
 80a2dd4:	f002 f8ed 	bl	80a4fb2 <digitalWrite>
 80a2dd8:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2ddc:	f000 f9e4 	bl	80a31a8 <HAL_Delay_Microseconds>
 80a2de0:	2508      	movs	r5, #8
 80a2de2:	f108 0604 	add.w	r6, r8, #4
 80a2de6:	2700      	movs	r7, #0

	  for (rep=0; rep<8; rep++)
		 {
			 // send the bits from data array

			 for (i=0; i < data[0]; i = i+2)
 80a2de8:	f8d8 3000 	ldr.w	r3, [r8]
 80a2dec:	3608      	adds	r6, #8
 80a2dee:	429f      	cmp	r7, r3
 80a2df0:	da11      	bge.n	80a2e16 <_Z13elro_transmitPi+0x6e>
			 {
			   digitalWrite(datapin,HIGH);
 80a2df2:	2101      	movs	r1, #1
 80a2df4:	8820      	ldrh	r0, [r4, #0]
 80a2df6:	f002 f8dc 	bl	80a4fb2 <digitalWrite>
 80a2dfa:	f856 0c08 	ldr.w	r0, [r6, #-8]
 80a2dfe:	f000 f9d3 	bl	80a31a8 <HAL_Delay_Microseconds>
			   delayMicroseconds(data[i+1]);
			   digitalWrite(datapin,LOW);
 80a2e02:	2100      	movs	r1, #0
 80a2e04:	8820      	ldrh	r0, [r4, #0]
 80a2e06:	f002 f8d4 	bl	80a4fb2 <digitalWrite>
 80a2e0a:	f856 0c04 	ldr.w	r0, [r6, #-4]
 80a2e0e:	f000 f9cb 	bl	80a31a8 <HAL_Delay_Microseconds>

	  for (rep=0; rep<8; rep++)
		 {
			 // send the bits from data array

			 for (i=0; i < data[0]; i = i+2)
 80a2e12:	3702      	adds	r7, #2
 80a2e14:	e7e8      	b.n	80a2de8 <_Z13elro_transmitPi+0x40>
 80a2e16:	f242 60ac 	movw	r0, #9900	; 0x26ac
 80a2e1a:	f000 f9c5 	bl	80a31a8 <HAL_Delay_Microseconds>
     digitalWrite(datapin,LOW);
     delayMicroseconds(5000);

	   // repeat sending the entire control data sequence

	  for (rep=0; rep<8; rep++)
 80a2e1e:	3d01      	subs	r5, #1
 80a2e20:	d1df      	bne.n	80a2de2 <_Z13elro_transmitPi+0x3a>
			   delayMicroseconds(data[i+2]);
			 }

		  delayMicroseconds(9900);
  		}
    digitalWrite(datapin,LOW);
 80a2e22:	4629      	mov	r1, r5
 80a2e24:	8820      	ldrh	r0, [r4, #0]
  }
 80a2e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			   delayMicroseconds(data[i+2]);
			 }

		  delayMicroseconds(9900);
  		}
    digitalWrite(datapin,LOW);
 80a2e2a:	f002 b8c2 	b.w	80a4fb2 <digitalWrite>
 80a2e2e:	bf00      	nop
 80a2e30:	20000068 	.word	0x20000068

080a2e34 <_Z9elro_sendPcii>:
/*--------------------------------------------------------------------
create code sequenz from string and send code sequenz
--------------------------------------------------------------------*/

void elro_send(char* code, int SHORT, int LONG)
{
 80a2e34:	b530      	push	{r4, r5, lr}
	int i = 0;
	int k = 1;
  int ed[90];  // tx code sequenz

	ed[0]=50;
 80a2e36:	2332      	movs	r3, #50	; 0x32
/*--------------------------------------------------------------------
create code sequenz from string and send code sequenz
--------------------------------------------------------------------*/

void elro_send(char* code, int SHORT, int LONG)
{
 80a2e38:	b0db      	sub	sp, #364	; 0x16c
	int i = 0;
	int k = 1;
  int ed[90];  // tx code sequenz

	ed[0]=50;
 80a2e3a:	9300      	str	r3, [sp, #0]
 80a2e3c:	466b      	mov	r3, sp
 80a2e3e:	1e44      	subs	r4, r0, #1
 80a2e40:	3017      	adds	r0, #23

	for(i=0; i<24; i++)
	{
		if (code[i]==0x30)
 80a2e42:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80a2e46:	3308      	adds	r3, #8
 80a2e48:	2d30      	cmp	r5, #48	; 0x30
		{
			ed[k] = SHORT;
 80a2e4a:	bf07      	ittee	eq
 80a2e4c:	f843 1c04 	streq.w	r1, [r3, #-4]
			ed[k+1] = LONG;
 80a2e50:	601a      	streq	r2, [r3, #0]
		}
		else
		{
			ed[k] = LONG;
 80a2e52:	f843 2c04 	strne.w	r2, [r3, #-4]
			ed[k+1] = SHORT;
 80a2e56:	6019      	strne	r1, [r3, #0]
	int k = 1;
  int ed[90];  // tx code sequenz

	ed[0]=50;

	for(i=0; i<24; i++)
 80a2e58:	4284      	cmp	r4, r0
 80a2e5a:	d1f2      	bne.n	80a2e42 <_Z9elro_sendPcii+0xe>
		}
		k=k+2;
	}
	ed[k] = SHORT;
	ed[k+1] = LONG;
  elro_transmit(&ed[0]);
 80a2e5c:	4668      	mov	r0, sp
			ed[k] = LONG;
			ed[k+1] = SHORT;
		}
		k=k+2;
	}
	ed[k] = SHORT;
 80a2e5e:	9131      	str	r1, [sp, #196]	; 0xc4
	ed[k+1] = LONG;
 80a2e60:	9232      	str	r2, [sp, #200]	; 0xc8
  elro_transmit(&ed[0]);
 80a2e62:	f7ff ffa1 	bl	80a2da8 <_Z13elro_transmitPi>
}
 80a2e66:	b05b      	add	sp, #364	; 0x16c
 80a2e68:	bd30      	pop	{r4, r5, pc}
	...

080a2e6c <_Z11elro_switchii>:
/*--------------------------------------------------------------------
Control ELRO rc switch
--------------------------------------------------------------------*/

void elro_switch ( int which, int state )
{
 80a2e6c:	b530      	push	{r4, r5, lr}
	char es[34];

	if (which==1)
 80a2e6e:	2801      	cmp	r0, #1
/*--------------------------------------------------------------------
Control ELRO rc switch
--------------------------------------------------------------------*/

void elro_switch ( int which, int state )
{
 80a2e70:	b08b      	sub	sp, #44	; 0x2c
	char es[34];

	if (which==1)
 80a2e72:	d122      	bne.n	80a2eba <_Z11elro_switchii+0x4e>
	{
		if (state==AUS)  strncpy(es,"000100010000010101010010",24);
 80a2e74:	b961      	cbnz	r1, 80a2e90 <_Z11elro_switchii+0x24>
 80a2e76:	4b31      	ldr	r3, [pc, #196]	; (80a2f3c <_Z11elro_switchii+0xd0>)
 80a2e78:	ac01      	add	r4, sp, #4
 80a2e7a:	f103 0518 	add.w	r5, r3, #24
 80a2e7e:	4622      	mov	r2, r4
 80a2e80:	6818      	ldr	r0, [r3, #0]
 80a2e82:	6859      	ldr	r1, [r3, #4]
 80a2e84:	3308      	adds	r3, #8
 80a2e86:	c203      	stmia	r2!, {r0, r1}
 80a2e88:	42ab      	cmp	r3, r5
 80a2e8a:	4614      	mov	r4, r2
 80a2e8c:	d1f7      	bne.n	80a2e7e <_Z11elro_switchii+0x12>
 80a2e8e:	e00d      	b.n	80a2eac <_Z11elro_switchii+0x40>
		if (state==EIN)  strncpy(es,"000100010000010101010001",24);
 80a2e90:	2901      	cmp	r1, #1
 80a2e92:	d10b      	bne.n	80a2eac <_Z11elro_switchii+0x40>
 80a2e94:	4b2a      	ldr	r3, [pc, #168]	; (80a2f40 <_Z11elro_switchii+0xd4>)
 80a2e96:	aa01      	add	r2, sp, #4
 80a2e98:	f103 0518 	add.w	r5, r3, #24
 80a2e9c:	4614      	mov	r4, r2
 80a2e9e:	6818      	ldr	r0, [r3, #0]
 80a2ea0:	6859      	ldr	r1, [r3, #4]
 80a2ea2:	3308      	adds	r3, #8
 80a2ea4:	c403      	stmia	r4!, {r0, r1}
 80a2ea6:	42ab      	cmp	r3, r5
 80a2ea8:	4622      	mov	r2, r4
 80a2eaa:	d1f7      	bne.n	80a2e9c <_Z11elro_switchii+0x30>
   	elro_send(es,220,940);
 80a2eac:	f44f 726b 	mov.w	r2, #940	; 0x3ac
 80a2eb0:	21dc      	movs	r1, #220	; 0xdc
 80a2eb2:	a801      	add	r0, sp, #4
 80a2eb4:	f7ff ffbe 	bl	80a2e34 <_Z9elro_sendPcii>
 80a2eb8:	e03d      	b.n	80a2f36 <_Z11elro_switchii+0xca>
	}

	if (which==2)
 80a2eba:	2802      	cmp	r0, #2
 80a2ebc:	d11c      	bne.n	80a2ef8 <_Z11elro_switchii+0x8c>
	{
		if (state==AUS)  strncpy(es,"000100010001000101010100",24);
 80a2ebe:	b961      	cbnz	r1, 80a2eda <_Z11elro_switchii+0x6e>
 80a2ec0:	4b20      	ldr	r3, [pc, #128]	; (80a2f44 <_Z11elro_switchii+0xd8>)
 80a2ec2:	ac01      	add	r4, sp, #4
 80a2ec4:	f103 0518 	add.w	r5, r3, #24
 80a2ec8:	4622      	mov	r2, r4
 80a2eca:	6818      	ldr	r0, [r3, #0]
 80a2ecc:	6859      	ldr	r1, [r3, #4]
 80a2ece:	3308      	adds	r3, #8
 80a2ed0:	c203      	stmia	r2!, {r0, r1}
 80a2ed2:	42ab      	cmp	r3, r5
 80a2ed4:	4614      	mov	r4, r2
 80a2ed6:	d1f7      	bne.n	80a2ec8 <_Z11elro_switchii+0x5c>
 80a2ed8:	e7e8      	b.n	80a2eac <_Z11elro_switchii+0x40>
		if (state==EIN)  strncpy(es,"000100010001000101010001",24);
 80a2eda:	2901      	cmp	r1, #1
 80a2edc:	d1e6      	bne.n	80a2eac <_Z11elro_switchii+0x40>
 80a2ede:	4b1a      	ldr	r3, [pc, #104]	; (80a2f48 <_Z11elro_switchii+0xdc>)
 80a2ee0:	aa01      	add	r2, sp, #4
 80a2ee2:	f103 0518 	add.w	r5, r3, #24
 80a2ee6:	4614      	mov	r4, r2
 80a2ee8:	6818      	ldr	r0, [r3, #0]
 80a2eea:	6859      	ldr	r1, [r3, #4]
 80a2eec:	3308      	adds	r3, #8
 80a2eee:	c403      	stmia	r4!, {r0, r1}
 80a2ef0:	42ab      	cmp	r3, r5
 80a2ef2:	4622      	mov	r2, r4
 80a2ef4:	d1f7      	bne.n	80a2ee6 <_Z11elro_switchii+0x7a>
 80a2ef6:	e7d9      	b.n	80a2eac <_Z11elro_switchii+0x40>
   	elro_send(es,220,940);
	}

	if (which==3)
 80a2ef8:	2803      	cmp	r0, #3
 80a2efa:	d11c      	bne.n	80a2f36 <_Z11elro_switchii+0xca>
	{
		if (state==AUS)  strncpy(es,"000100010001010001010010",24);
 80a2efc:	b961      	cbnz	r1, 80a2f18 <_Z11elro_switchii+0xac>
 80a2efe:	4b13      	ldr	r3, [pc, #76]	; (80a2f4c <_Z11elro_switchii+0xe0>)
 80a2f00:	ac01      	add	r4, sp, #4
 80a2f02:	f103 0518 	add.w	r5, r3, #24
 80a2f06:	4622      	mov	r2, r4
 80a2f08:	6818      	ldr	r0, [r3, #0]
 80a2f0a:	6859      	ldr	r1, [r3, #4]
 80a2f0c:	3308      	adds	r3, #8
 80a2f0e:	c203      	stmia	r2!, {r0, r1}
 80a2f10:	42ab      	cmp	r3, r5
 80a2f12:	4614      	mov	r4, r2
 80a2f14:	d1f7      	bne.n	80a2f06 <_Z11elro_switchii+0x9a>
 80a2f16:	e7c9      	b.n	80a2eac <_Z11elro_switchii+0x40>
		if (state==EIN)  strncpy(es,"000100010001010001010001",24);
 80a2f18:	2901      	cmp	r1, #1
 80a2f1a:	d1c7      	bne.n	80a2eac <_Z11elro_switchii+0x40>
 80a2f1c:	4b0c      	ldr	r3, [pc, #48]	; (80a2f50 <_Z11elro_switchii+0xe4>)
 80a2f1e:	aa01      	add	r2, sp, #4
 80a2f20:	f103 0518 	add.w	r5, r3, #24
 80a2f24:	4614      	mov	r4, r2
 80a2f26:	6818      	ldr	r0, [r3, #0]
 80a2f28:	6859      	ldr	r1, [r3, #4]
 80a2f2a:	3308      	adds	r3, #8
 80a2f2c:	c403      	stmia	r4!, {r0, r1}
 80a2f2e:	42ab      	cmp	r3, r5
 80a2f30:	4622      	mov	r2, r4
 80a2f32:	d1f7      	bne.n	80a2f24 <_Z11elro_switchii+0xb8>
 80a2f34:	e7ba      	b.n	80a2eac <_Z11elro_switchii+0x40>
   	elro_send(es,220,940);
	}

}
 80a2f36:	b00b      	add	sp, #44	; 0x2c
 80a2f38:	bd30      	pop	{r4, r5, pc}
 80a2f3a:	bf00      	nop
 80a2f3c:	080a797c 	.word	0x080a797c
 80a2f40:	080a7995 	.word	0x080a7995
 80a2f44:	080a79ae 	.word	0x080a79ae
 80a2f48:	080a79c7 	.word	0x080a79c7
 80a2f4c:	080a79e0 	.word	0x080a79e0
 80a2f50:	080a79f9 	.word	0x080a79f9

080a2f54 <_GLOBAL__sub_I_datapin>:
 80a2f54:	f000 b8a0 	b.w	80a3098 <HAL_Pin_Map>

080a2f58 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
 80a2f58:	f000 b89e 	b.w	80a3098 <HAL_Pin_Map>

080a2f5c <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
 80a2f5c:	f001 b918 	b.w	80a4190 <delay>

080a2f60 <_Z11BlynkMillisv>:
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a2f60:	f000 b932 	b.w	80a31c8 <HAL_Timer_Get_Milli_Seconds>

080a2f64 <_GLOBAL__sub_I__Z10BlynkResetv>:
 80a2f64:	f000 b898 	b.w	80a3098 <HAL_Pin_Map>

080a2f68 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
 80a2f68:	4770      	bx	lr

080a2f6a <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
 80a2f6a:	4770      	bx	lr

080a2f6c <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
 80a2f6c:	4770      	bx	lr
	...

080a2f70 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
 80a2f70:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
 80a2f72:	bf9a      	itte	ls
 80a2f74:	4b02      	ldrls	r3, [pc, #8]	; (80a2f80 <GetReadHandler+0x10>)
 80a2f76:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
 80a2f7a:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
 80a2f7c:	4770      	bx	lr
 80a2f7e:	bf00      	nop
 80a2f80:	080a7c78 	.word	0x080a7c78

080a2f84 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
 80a2f84:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
 80a2f86:	bf9a      	itte	ls
 80a2f88:	4b02      	ldrls	r3, [pc, #8]	; (80a2f94 <GetWriteHandler+0x10>)
 80a2f8a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
 80a2f8e:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
 80a2f90:	4770      	bx	lr
 80a2f92:	bf00      	nop
 80a2f94:	080a7a78 	.word	0x080a7a78

080a2f98 <_GLOBAL__sub_I_BlynkNoOpCbk>:
 80a2f98:	f000 b87e 	b.w	80a3098 <HAL_Pin_Map>

080a2f9c <_Z11serialEventv>:

/*---------------------------------------------------------------------
Dispatch characters from serial port
---------------------------------------------------------------------*/
void serialEvent()
{
 80a2f9c:	b538      	push	{r3, r4, r5, lr}
    char c = Serial.read();
 80a2f9e:	f001 fd79 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a2fa2:	6803      	ldr	r3, [r0, #0]
 80a2fa4:	695b      	ldr	r3, [r3, #20]
 80a2fa6:	4798      	blx	r3
    //Serial.print(c);

    switch(c)
 80a2fa8:	b2c0      	uxtb	r0, r0
 80a2faa:	3862      	subs	r0, #98	; 0x62
 80a2fac:	2816      	cmp	r0, #22
 80a2fae:	d85d      	bhi.n	80a306c <_Z11serialEventv+0xd0>
 80a2fb0:	e8df f000 	tbb	[pc, r0]
 80a2fb4:	5c5c5c10 	.word	0x5c5c5c10
 80a2fb8:	5c0c5c5c 	.word	0x5c0c5c5c
 80a2fbc:	5c5c5c5c 	.word	0x5c5c5c5c
 80a2fc0:	5c361b5c 	.word	0x5c361b5c
 80a2fc4:	5c452217 	.word	0x5c452217
 80a2fc8:	495c      	.short	0x495c
 80a2fca:	55          	.byte	0x55
 80a2fcb:	00          	.byte	0x00
      break;

    }


}
 80a2fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    //Serial.print(c);

    switch(c)
    {
      case 'h':
        help();
 80a2fd0:	f7fe bdfa 	b.w	80a1bc8 <_Z4helpv>
      break;

      case 'b':
        BlumenGiessen(1,ts_giessen);
 80a2fd4:	4b26      	ldr	r3, [pc, #152]	; (80a3070 <_Z11serialEventv+0xd4>)
 80a2fd6:	2001      	movs	r0, #1
 80a2fd8:	6819      	ldr	r1, [r3, #0]
      break;

    }


}
 80a2fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      case 'h':
        help();
      break;

      case 'b':
        BlumenGiessen(1,ts_giessen);
 80a2fde:	f7fe be1f 	b.w	80a1c20 <_Z13BlumenGiessenii>
      break;

      case 'r':
        rsl_enable_receive();
 80a2fe2:	f7fd fbf3 	bl	80a07cc <_Z18rsl_enable_receivev>
        println(" 433MHz Empfaenger eingeschaltet  ");
 80a2fe6:	4823      	ldr	r0, [pc, #140]	; (80a3074 <_Z11serialEventv+0xd8>)
 80a2fe8:	e002      	b.n	80a2ff0 <_Z11serialEventv+0x54>
      break;

      case 'o':
        rsl_disable_receive();
 80a2fea:	f7fd fc0f 	bl	80a080c <_Z19rsl_disable_receivev>
        println(" 433MHz Empfaenger abgeschaltet  ");
 80a2fee:	4822      	ldr	r0, [pc, #136]	; (80a3078 <_Z11serialEventv+0xdc>)
      break;

    }


}
 80a2ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        println(" 433MHz Empfaenger eingeschaltet  ");
      break;

      case 'o':
        rsl_disable_receive();
        println(" 433MHz Empfaenger abgeschaltet  ");
 80a2ff4:	f7fe bdce 	b.w	80a1b94 <_Z7printlnPc>
      break;

      case 's':
        control.dontSleepSW = 0;
        slow_counter = 0;
 80a2ff8:	4b20      	ldr	r3, [pc, #128]	; (80a307c <_Z11serialEventv+0xe0>)
        rsl_disable_receive();
        println(" 433MHz Empfaenger abgeschaltet  ");
      break;

      case 's':
        control.dontSleepSW = 0;
 80a2ffa:	4d21      	ldr	r5, [pc, #132]	; (80a3080 <_Z11serialEventv+0xe4>)
 80a2ffc:	2400      	movs	r4, #0
        slow_counter = 0;
        println(" Sleep Mode enabled ");
 80a2ffe:	4821      	ldr	r0, [pc, #132]	; (80a3084 <_Z11serialEventv+0xe8>)
        println(" 433MHz Empfaenger abgeschaltet  ");
      break;

      case 's':
        control.dontSleepSW = 0;
        slow_counter = 0;
 80a3000:	601c      	str	r4, [r3, #0]
        rsl_disable_receive();
        println(" 433MHz Empfaenger abgeschaltet  ");
      break;

      case 's':
        control.dontSleepSW = 0;
 80a3002:	606c      	str	r4, [r5, #4]
        slow_counter = 0;
        println(" Sleep Mode enabled ");
 80a3004:	f7fe fdc6 	bl	80a1b94 <_Z7printlnPc>
        EEPROM.put(0,control);
 80a3008:	f002 f860 	bl	80a50cc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a300c:	4620      	mov	r0, r4
 80a300e:	4629      	mov	r1, r5
 80a3010:	220c      	movs	r2, #12
 80a3012:	f000 f8f9 	bl	80a3208 <HAL_EEPROM_Put>
      break;

    }


}
 80a3016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      case 's':
        control.dontSleepSW = 0;
        slow_counter = 0;
        println(" Sleep Mode enabled ");
        EEPROM.put(0,control);
        sleep(15);
 80a301a:	200f      	movs	r0, #15
 80a301c:	f7fe bed2 	b.w	80a1dc4 <_Z5sleepi>
      break;

      case 'p':
        control.dontSleepSW = 1;
 80a3020:	4d17      	ldr	r5, [pc, #92]	; (80a3080 <_Z11serialEventv+0xe4>)
 80a3022:	2301      	movs	r3, #1
 80a3024:	606b      	str	r3, [r5, #4]
        slow_counter = 0;
 80a3026:	4b15      	ldr	r3, [pc, #84]	; (80a307c <_Z11serialEventv+0xe0>)
 80a3028:	2400      	movs	r4, #0
        println(" Sleep Mode disabled ");
 80a302a:	4817      	ldr	r0, [pc, #92]	; (80a3088 <_Z11serialEventv+0xec>)
        sleep(15);
      break;

      case 'p':
        control.dontSleepSW = 1;
        slow_counter = 0;
 80a302c:	601c      	str	r4, [r3, #0]
        println(" Sleep Mode disabled ");
 80a302e:	f7fe fdb1 	bl	80a1b94 <_Z7printlnPc>
        EEPROM.put(0,control);
 80a3032:	f002 f84b 	bl	80a50cc <_Z21__fetch_global_EEPROMv>
 80a3036:	220c      	movs	r2, #12
 80a3038:	4629      	mov	r1, r5
 80a303a:	4620      	mov	r0, r4
 80a303c:	e00b      	b.n	80a3056 <_Z11serialEventv+0xba>
      break;

    }


}
 80a303e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        println(" Sleep Mode disabled ");
        EEPROM.put(0,control);
      break;

      case 't':
          get_Temperature();
 80a3042:	f7fd bdf7 	b.w	80a0c34 <_Z15get_Temperaturev>
      break;


      case 'w':
        println(" Store CONTROL in EEPROM ");
 80a3046:	4811      	ldr	r0, [pc, #68]	; (80a308c <_Z11serialEventv+0xf0>)
 80a3048:	f7fe fda4 	bl	80a1b94 <_Z7printlnPc>
        EEPROM.put(0,control);
 80a304c:	f002 f83e 	bl	80a50cc <_Z21__fetch_global_EEPROMv>
 80a3050:	490b      	ldr	r1, [pc, #44]	; (80a3080 <_Z11serialEventv+0xe4>)
 80a3052:	220c      	movs	r2, #12
 80a3054:	2000      	movs	r0, #0
      break;

    }


}
 80a3056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a305a:	f000 b8d5 	b.w	80a3208 <HAL_EEPROM_Put>
        println(" Store CONTROL in EEPROM ");
        EEPROM.put(0,control);
      break;

      case 'x':
        println(" Ultrasonic ");
 80a305e:	480c      	ldr	r0, [pc, #48]	; (80a3090 <_Z11serialEventv+0xf4>)
 80a3060:	f7fe fd98 	bl	80a1b94 <_Z7printlnPc>
      break;

    }


}
 80a3064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        EEPROM.put(0,control);
      break;

      case 'x':
        println(" Ultrasonic ");
        ultra_sonic_measure();
 80a3068:	f7fd bd5a 	b.w	80a0b20 <_Z19ultra_sonic_measurev>
 80a306c:	bd38      	pop	{r3, r4, r5, pc}
 80a306e:	bf00      	nop
 80a3070:	2000034c 	.word	0x2000034c
 80a3074:	080a7556 	.word	0x080a7556
 80a3078:	080a7e78 	.word	0x080a7e78
 80a307c:	20000408 	.word	0x20000408
 80a3080:	20000410 	.word	0x20000410
 80a3084:	080a7e9a 	.word	0x080a7e9a
 80a3088:	080a7eaf 	.word	0x080a7eaf
 80a308c:	080a7ec5 	.word	0x080a7ec5
 80a3090:	080a7edf 	.word	0x080a7edf

080a3094 <_GLOBAL__sub_I__Z11serialEventv>:
 80a3094:	f000 b800 	b.w	80a3098 <HAL_Pin_Map>

080a3098 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a3098:	b508      	push	{r3, lr}
 80a309a:	4b02      	ldr	r3, [pc, #8]	; (80a30a4 <HAL_Pin_Map+0xc>)
 80a309c:	681b      	ldr	r3, [r3, #0]
 80a309e:	681b      	ldr	r3, [r3, #0]
 80a30a0:	9301      	str	r3, [sp, #4]
 80a30a2:	bd08      	pop	{r3, pc}
 80a30a4:	080601b0 	.word	0x080601b0

080a30a8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a30a8:	b508      	push	{r3, lr}
 80a30aa:	4b02      	ldr	r3, [pc, #8]	; (80a30b4 <HAL_Validate_Pin_Function+0xc>)
 80a30ac:	681b      	ldr	r3, [r3, #0]
 80a30ae:	685b      	ldr	r3, [r3, #4]
 80a30b0:	9301      	str	r3, [sp, #4]
 80a30b2:	bd08      	pop	{r3, pc}
 80a30b4:	080601b0 	.word	0x080601b0

080a30b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a30b8:	b508      	push	{r3, lr}
 80a30ba:	4b02      	ldr	r3, [pc, #8]	; (80a30c4 <HAL_Pin_Mode+0xc>)
 80a30bc:	681b      	ldr	r3, [r3, #0]
 80a30be:	689b      	ldr	r3, [r3, #8]
 80a30c0:	9301      	str	r3, [sp, #4]
 80a30c2:	bd08      	pop	{r3, pc}
 80a30c4:	080601b0 	.word	0x080601b0

080a30c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a30c8:	b508      	push	{r3, lr}
 80a30ca:	4b02      	ldr	r3, [pc, #8]	; (80a30d4 <HAL_Get_Pin_Mode+0xc>)
 80a30cc:	681b      	ldr	r3, [r3, #0]
 80a30ce:	68db      	ldr	r3, [r3, #12]
 80a30d0:	9301      	str	r3, [sp, #4]
 80a30d2:	bd08      	pop	{r3, pc}
 80a30d4:	080601b0 	.word	0x080601b0

080a30d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a30d8:	b508      	push	{r3, lr}
 80a30da:	4b02      	ldr	r3, [pc, #8]	; (80a30e4 <HAL_GPIO_Write+0xc>)
 80a30dc:	681b      	ldr	r3, [r3, #0]
 80a30de:	691b      	ldr	r3, [r3, #16]
 80a30e0:	9301      	str	r3, [sp, #4]
 80a30e2:	bd08      	pop	{r3, pc}
 80a30e4:	080601b0 	.word	0x080601b0

080a30e8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a30e8:	b508      	push	{r3, lr}
 80a30ea:	4b02      	ldr	r3, [pc, #8]	; (80a30f4 <HAL_GPIO_Read+0xc>)
 80a30ec:	681b      	ldr	r3, [r3, #0]
 80a30ee:	695b      	ldr	r3, [r3, #20]
 80a30f0:	9301      	str	r3, [sp, #4]
 80a30f2:	bd08      	pop	{r3, pc}
 80a30f4:	080601b0 	.word	0x080601b0

080a30f8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a30f8:	b508      	push	{r3, lr}
 80a30fa:	4b02      	ldr	r3, [pc, #8]	; (80a3104 <HAL_Interrupts_Attach+0xc>)
 80a30fc:	681b      	ldr	r3, [r3, #0]
 80a30fe:	699b      	ldr	r3, [r3, #24]
 80a3100:	9301      	str	r3, [sp, #4]
 80a3102:	bd08      	pop	{r3, pc}
 80a3104:	080601b0 	.word	0x080601b0

080a3108 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a3108:	b508      	push	{r3, lr}
 80a310a:	4b02      	ldr	r3, [pc, #8]	; (80a3114 <HAL_Interrupts_Detach+0xc>)
 80a310c:	681b      	ldr	r3, [r3, #0]
 80a310e:	69db      	ldr	r3, [r3, #28]
 80a3110:	9301      	str	r3, [sp, #4]
 80a3112:	bd08      	pop	{r3, pc}
 80a3114:	080601b0 	.word	0x080601b0

080a3118 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a3118:	b508      	push	{r3, lr}
 80a311a:	4b02      	ldr	r3, [pc, #8]	; (80a3124 <HAL_Interrupts_Enable_All+0xc>)
 80a311c:	681b      	ldr	r3, [r3, #0]
 80a311e:	6a1b      	ldr	r3, [r3, #32]
 80a3120:	9301      	str	r3, [sp, #4]
 80a3122:	bd08      	pop	{r3, pc}
 80a3124:	080601b0 	.word	0x080601b0

080a3128 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a3128:	b508      	push	{r3, lr}
 80a312a:	4b02      	ldr	r3, [pc, #8]	; (80a3134 <HAL_Interrupts_Disable_All+0xc>)
 80a312c:	681b      	ldr	r3, [r3, #0]
 80a312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3130:	9301      	str	r3, [sp, #4]
 80a3132:	bd08      	pop	{r3, pc}
 80a3134:	080601b0 	.word	0x080601b0

080a3138 <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a3138:	b508      	push	{r3, lr}
 80a313a:	4b02      	ldr	r3, [pc, #8]	; (80a3144 <HAL_DAC_Write+0xc>)
 80a313c:	681b      	ldr	r3, [r3, #0]
 80a313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3140:	9301      	str	r3, [sp, #4]
 80a3142:	bd08      	pop	{r3, pc}
 80a3144:	080601b0 	.word	0x080601b0

080a3148 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a3148:	b508      	push	{r3, lr}
 80a314a:	4b02      	ldr	r3, [pc, #8]	; (80a3154 <HAL_ADC_Read+0xc>)
 80a314c:	681b      	ldr	r3, [r3, #0]
 80a314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3150:	9301      	str	r3, [sp, #4]
 80a3152:	bd08      	pop	{r3, pc}
 80a3154:	080601b0 	.word	0x080601b0

080a3158 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a3158:	b508      	push	{r3, lr}
 80a315a:	4b02      	ldr	r3, [pc, #8]	; (80a3164 <HAL_Pulse_In+0xc>)
 80a315c:	681b      	ldr	r3, [r3, #0]
 80a315e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3160:	9301      	str	r3, [sp, #4]
 80a3162:	bd08      	pop	{r3, pc}
 80a3164:	080601b0 	.word	0x080601b0

080a3168 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a3168:	b508      	push	{r3, lr}
 80a316a:	4b02      	ldr	r3, [pc, #8]	; (80a3174 <HAL_PWM_Write_Ext+0xc>)
 80a316c:	681b      	ldr	r3, [r3, #0]
 80a316e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a3170:	9301      	str	r3, [sp, #4]
 80a3172:	bd08      	pop	{r3, pc}
 80a3174:	080601b0 	.word	0x080601b0

080a3178 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a3178:	b508      	push	{r3, lr}
 80a317a:	4b02      	ldr	r3, [pc, #8]	; (80a3184 <HAL_SPI_Init+0xc>)
 80a317c:	681b      	ldr	r3, [r3, #0]
 80a317e:	69db      	ldr	r3, [r3, #28]
 80a3180:	9301      	str	r3, [sp, #4]
 80a3182:	bd08      	pop	{r3, pc}
 80a3184:	080601b4 	.word	0x080601b4

080a3188 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a3188:	b508      	push	{r3, lr}
 80a318a:	4b02      	ldr	r3, [pc, #8]	; (80a3194 <HAL_SPI_Is_Enabled+0xc>)
 80a318c:	681b      	ldr	r3, [r3, #0]
 80a318e:	6a1b      	ldr	r3, [r3, #32]
 80a3190:	9301      	str	r3, [sp, #4]
 80a3192:	bd08      	pop	{r3, pc}
 80a3194:	080601b4 	.word	0x080601b4

080a3198 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a3198:	b508      	push	{r3, lr}
 80a319a:	4b02      	ldr	r3, [pc, #8]	; (80a31a4 <HAL_RNG_GetRandomNumber+0xc>)
 80a319c:	681b      	ldr	r3, [r3, #0]
 80a319e:	685b      	ldr	r3, [r3, #4]
 80a31a0:	9301      	str	r3, [sp, #4]
 80a31a2:	bd08      	pop	{r3, pc}
 80a31a4:	0806019c 	.word	0x0806019c

080a31a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a31a8:	b508      	push	{r3, lr}
 80a31aa:	4b02      	ldr	r3, [pc, #8]	; (80a31b4 <HAL_Delay_Microseconds+0xc>)
 80a31ac:	681b      	ldr	r3, [r3, #0]
 80a31ae:	68db      	ldr	r3, [r3, #12]
 80a31b0:	9301      	str	r3, [sp, #4]
 80a31b2:	bd08      	pop	{r3, pc}
 80a31b4:	0806019c 	.word	0x0806019c

080a31b8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a31b8:	b508      	push	{r3, lr}
 80a31ba:	4b02      	ldr	r3, [pc, #8]	; (80a31c4 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a31bc:	681b      	ldr	r3, [r3, #0]
 80a31be:	691b      	ldr	r3, [r3, #16]
 80a31c0:	9301      	str	r3, [sp, #4]
 80a31c2:	bd08      	pop	{r3, pc}
 80a31c4:	0806019c 	.word	0x0806019c

080a31c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a31c8:	b508      	push	{r3, lr}
 80a31ca:	4b02      	ldr	r3, [pc, #8]	; (80a31d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a31cc:	681b      	ldr	r3, [r3, #0]
 80a31ce:	695b      	ldr	r3, [r3, #20]
 80a31d0:	9301      	str	r3, [sp, #4]
 80a31d2:	bd08      	pop	{r3, pc}
 80a31d4:	0806019c 	.word	0x0806019c

080a31d8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a31d8:	b508      	push	{r3, lr}
 80a31da:	4b02      	ldr	r3, [pc, #8]	; (80a31e4 <HAL_RTC_Get_UnixTime+0xc>)
 80a31dc:	681b      	ldr	r3, [r3, #0]
 80a31de:	69db      	ldr	r3, [r3, #28]
 80a31e0:	9301      	str	r3, [sp, #4]
 80a31e2:	bd08      	pop	{r3, pc}
 80a31e4:	0806019c 	.word	0x0806019c

080a31e8 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a31e8:	b508      	push	{r3, lr}
 80a31ea:	4b02      	ldr	r3, [pc, #8]	; (80a31f4 <HAL_EEPROM_Init+0xc>)
 80a31ec:	681b      	ldr	r3, [r3, #0]
 80a31ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a31f0:	9301      	str	r3, [sp, #4]
 80a31f2:	bd08      	pop	{r3, pc}
 80a31f4:	0806019c 	.word	0x0806019c

080a31f8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a31f8:	b508      	push	{r3, lr}
 80a31fa:	4b02      	ldr	r3, [pc, #8]	; (80a3204 <HAL_EEPROM_Get+0xc>)
 80a31fc:	681b      	ldr	r3, [r3, #0]
 80a31fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3200:	9301      	str	r3, [sp, #4]
 80a3202:	bd08      	pop	{r3, pc}
 80a3204:	0806019c 	.word	0x0806019c

080a3208 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a3208:	b508      	push	{r3, lr}
 80a320a:	4b02      	ldr	r3, [pc, #8]	; (80a3214 <HAL_EEPROM_Put+0xc>)
 80a320c:	681b      	ldr	r3, [r3, #0]
 80a320e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3210:	9301      	str	r3, [sp, #4]
 80a3212:	bd08      	pop	{r3, pc}
 80a3214:	0806019c 	.word	0x0806019c

080a3218 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a3218:	b508      	push	{r3, lr}
 80a321a:	4b02      	ldr	r3, [pc, #8]	; (80a3224 <HAL_RTC_Time_Is_Valid+0xc>)
 80a321c:	681b      	ldr	r3, [r3, #0]
 80a321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3220:	9301      	str	r3, [sp, #4]
 80a3222:	bd08      	pop	{r3, pc}
 80a3224:	0806019c 	.word	0x0806019c

080a3228 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a3228:	b508      	push	{r3, lr}
 80a322a:	4b02      	ldr	r3, [pc, #8]	; (80a3234 <os_mutex_create+0xc>)
 80a322c:	681b      	ldr	r3, [r3, #0]
 80a322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3230:	9301      	str	r3, [sp, #4]
 80a3232:	bd08      	pop	{r3, pc}
 80a3234:	080601d0 	.word	0x080601d0

080a3238 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a3238:	b508      	push	{r3, lr}
 80a323a:	4b02      	ldr	r3, [pc, #8]	; (80a3244 <HAL_USART_Init+0xc>)
 80a323c:	681b      	ldr	r3, [r3, #0]
 80a323e:	699b      	ldr	r3, [r3, #24]
 80a3240:	9301      	str	r3, [sp, #4]
 80a3242:	bd08      	pop	{r3, pc}
 80a3244:	080601c4 	.word	0x080601c4

080a3248 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a3248:	b508      	push	{r3, lr}
 80a324a:	4b02      	ldr	r3, [pc, #8]	; (80a3254 <HAL_USART_Write_Data+0xc>)
 80a324c:	681b      	ldr	r3, [r3, #0]
 80a324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3250:	9301      	str	r3, [sp, #4]
 80a3252:	bd08      	pop	{r3, pc}
 80a3254:	080601c4 	.word	0x080601c4

080a3258 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a3258:	b508      	push	{r3, lr}
 80a325a:	4b02      	ldr	r3, [pc, #8]	; (80a3264 <HAL_USART_Available_Data+0xc>)
 80a325c:	681b      	ldr	r3, [r3, #0]
 80a325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3260:	9301      	str	r3, [sp, #4]
 80a3262:	bd08      	pop	{r3, pc}
 80a3264:	080601c4 	.word	0x080601c4

080a3268 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a3268:	b508      	push	{r3, lr}
 80a326a:	4b02      	ldr	r3, [pc, #8]	; (80a3274 <HAL_USART_Read_Data+0xc>)
 80a326c:	681b      	ldr	r3, [r3, #0]
 80a326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3270:	9301      	str	r3, [sp, #4]
 80a3272:	bd08      	pop	{r3, pc}
 80a3274:	080601c4 	.word	0x080601c4

080a3278 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a3278:	b508      	push	{r3, lr}
 80a327a:	4b02      	ldr	r3, [pc, #8]	; (80a3284 <HAL_USART_Peek_Data+0xc>)
 80a327c:	681b      	ldr	r3, [r3, #0]
 80a327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3280:	9301      	str	r3, [sp, #4]
 80a3282:	bd08      	pop	{r3, pc}
 80a3284:	080601c4 	.word	0x080601c4

080a3288 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a3288:	b508      	push	{r3, lr}
 80a328a:	4b02      	ldr	r3, [pc, #8]	; (80a3294 <HAL_USART_Flush_Data+0xc>)
 80a328c:	681b      	ldr	r3, [r3, #0]
 80a328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3290:	9301      	str	r3, [sp, #4]
 80a3292:	bd08      	pop	{r3, pc}
 80a3294:	080601c4 	.word	0x080601c4

080a3298 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a3298:	b508      	push	{r3, lr}
 80a329a:	4b02      	ldr	r3, [pc, #8]	; (80a32a4 <HAL_USART_Is_Enabled+0xc>)
 80a329c:	681b      	ldr	r3, [r3, #0]
 80a329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a32a0:	9301      	str	r3, [sp, #4]
 80a32a2:	bd08      	pop	{r3, pc}
 80a32a4:	080601c4 	.word	0x080601c4

080a32a8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a32a8:	b508      	push	{r3, lr}
 80a32aa:	4b02      	ldr	r3, [pc, #8]	; (80a32b4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a32ac:	681b      	ldr	r3, [r3, #0]
 80a32ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a32b0:	9301      	str	r3, [sp, #4]
 80a32b2:	bd08      	pop	{r3, pc}
 80a32b4:	080601c4 	.word	0x080601c4

080a32b8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a32b8:	b508      	push	{r3, lr}
 80a32ba:	4b02      	ldr	r3, [pc, #8]	; (80a32c4 <HAL_I2C_Write_Data+0xc>)
 80a32bc:	681b      	ldr	r3, [r3, #0]
 80a32be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a32c0:	9301      	str	r3, [sp, #4]
 80a32c2:	bd08      	pop	{r3, pc}
 80a32c4:	080601ac 	.word	0x080601ac

080a32c8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a32c8:	b508      	push	{r3, lr}
 80a32ca:	4b02      	ldr	r3, [pc, #8]	; (80a32d4 <HAL_I2C_Available_Data+0xc>)
 80a32cc:	681b      	ldr	r3, [r3, #0]
 80a32ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a32d0:	9301      	str	r3, [sp, #4]
 80a32d2:	bd08      	pop	{r3, pc}
 80a32d4:	080601ac 	.word	0x080601ac

080a32d8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a32d8:	b508      	push	{r3, lr}
 80a32da:	4b02      	ldr	r3, [pc, #8]	; (80a32e4 <HAL_I2C_Read_Data+0xc>)
 80a32dc:	681b      	ldr	r3, [r3, #0]
 80a32de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a32e0:	9301      	str	r3, [sp, #4]
 80a32e2:	bd08      	pop	{r3, pc}
 80a32e4:	080601ac 	.word	0x080601ac

080a32e8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a32e8:	b508      	push	{r3, lr}
 80a32ea:	4b02      	ldr	r3, [pc, #8]	; (80a32f4 <HAL_I2C_Peek_Data+0xc>)
 80a32ec:	681b      	ldr	r3, [r3, #0]
 80a32ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a32f0:	9301      	str	r3, [sp, #4]
 80a32f2:	bd08      	pop	{r3, pc}
 80a32f4:	080601ac 	.word	0x080601ac

080a32f8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a32f8:	b508      	push	{r3, lr}
 80a32fa:	4b02      	ldr	r3, [pc, #8]	; (80a3304 <HAL_I2C_Flush_Data+0xc>)
 80a32fc:	681b      	ldr	r3, [r3, #0]
 80a32fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3300:	9301      	str	r3, [sp, #4]
 80a3302:	bd08      	pop	{r3, pc}
 80a3304:	080601ac 	.word	0x080601ac

080a3308 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a3308:	b508      	push	{r3, lr}
 80a330a:	4b02      	ldr	r3, [pc, #8]	; (80a3314 <HAL_I2C_Is_Enabled+0xc>)
 80a330c:	681b      	ldr	r3, [r3, #0]
 80a330e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3310:	9301      	str	r3, [sp, #4]
 80a3312:	bd08      	pop	{r3, pc}
 80a3314:	080601ac 	.word	0x080601ac

080a3318 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a3318:	b508      	push	{r3, lr}
 80a331a:	4b03      	ldr	r3, [pc, #12]	; (80a3328 <HAL_I2C_Init+0x10>)
 80a331c:	681b      	ldr	r3, [r3, #0]
 80a331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a3322:	9301      	str	r3, [sp, #4]
 80a3324:	bd08      	pop	{r3, pc}
 80a3326:	0000      	.short	0x0000
 80a3328:	080601ac 	.word	0x080601ac

080a332c <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a332c:	b508      	push	{r3, lr}
 80a332e:	4b02      	ldr	r3, [pc, #8]	; (80a3338 <socket_active_status+0xc>)
 80a3330:	681b      	ldr	r3, [r3, #0]
 80a3332:	681b      	ldr	r3, [r3, #0]
 80a3334:	9301      	str	r3, [sp, #4]
 80a3336:	bd08      	pop	{r3, pc}
 80a3338:	080601bc 	.word	0x080601bc

080a333c <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a333c:	b508      	push	{r3, lr}
 80a333e:	4b02      	ldr	r3, [pc, #8]	; (80a3348 <socket_handle_valid+0xc>)
 80a3340:	681b      	ldr	r3, [r3, #0]
 80a3342:	685b      	ldr	r3, [r3, #4]
 80a3344:	9301      	str	r3, [sp, #4]
 80a3346:	bd08      	pop	{r3, pc}
 80a3348:	080601bc 	.word	0x080601bc

080a334c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a334c:	b508      	push	{r3, lr}
 80a334e:	4b02      	ldr	r3, [pc, #8]	; (80a3358 <socket_create+0xc>)
 80a3350:	681b      	ldr	r3, [r3, #0]
 80a3352:	689b      	ldr	r3, [r3, #8]
 80a3354:	9301      	str	r3, [sp, #4]
 80a3356:	bd08      	pop	{r3, pc}
 80a3358:	080601bc 	.word	0x080601bc

080a335c <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a335c:	b508      	push	{r3, lr}
 80a335e:	4b02      	ldr	r3, [pc, #8]	; (80a3368 <socket_connect+0xc>)
 80a3360:	681b      	ldr	r3, [r3, #0]
 80a3362:	68db      	ldr	r3, [r3, #12]
 80a3364:	9301      	str	r3, [sp, #4]
 80a3366:	bd08      	pop	{r3, pc}
 80a3368:	080601bc 	.word	0x080601bc

080a336c <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a336c:	b508      	push	{r3, lr}
 80a336e:	4b02      	ldr	r3, [pc, #8]	; (80a3378 <socket_receive+0xc>)
 80a3370:	681b      	ldr	r3, [r3, #0]
 80a3372:	691b      	ldr	r3, [r3, #16]
 80a3374:	9301      	str	r3, [sp, #4]
 80a3376:	bd08      	pop	{r3, pc}
 80a3378:	080601bc 	.word	0x080601bc

080a337c <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a337c:	b508      	push	{r3, lr}
 80a337e:	4b02      	ldr	r3, [pc, #8]	; (80a3388 <socket_close+0xc>)
 80a3380:	681b      	ldr	r3, [r3, #0]
 80a3382:	6a1b      	ldr	r3, [r3, #32]
 80a3384:	9301      	str	r3, [sp, #4]
 80a3386:	bd08      	pop	{r3, pc}
 80a3388:	080601bc 	.word	0x080601bc

080a338c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a338c:	b508      	push	{r3, lr}
 80a338e:	4b02      	ldr	r3, [pc, #8]	; (80a3398 <socket_handle_invalid+0xc>)
 80a3390:	681b      	ldr	r3, [r3, #0]
 80a3392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3394:	9301      	str	r3, [sp, #4]
 80a3396:	bd08      	pop	{r3, pc}
 80a3398:	080601bc 	.word	0x080601bc

080a339c <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a339c:	b508      	push	{r3, lr}
 80a339e:	4b02      	ldr	r3, [pc, #8]	; (80a33a8 <socket_send_ex+0xc>)
 80a33a0:	681b      	ldr	r3, [r3, #0]
 80a33a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a33a4:	9301      	str	r3, [sp, #4]
 80a33a6:	bd08      	pop	{r3, pc}
 80a33a8:	080601bc 	.word	0x080601bc

080a33ac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a33ac:	b508      	push	{r3, lr}
 80a33ae:	4b02      	ldr	r3, [pc, #8]	; (80a33b8 <HAL_USB_USART_Init+0xc>)
 80a33b0:	681b      	ldr	r3, [r3, #0]
 80a33b2:	681b      	ldr	r3, [r3, #0]
 80a33b4:	9301      	str	r3, [sp, #4]
 80a33b6:	bd08      	pop	{r3, pc}
 80a33b8:	080601d8 	.word	0x080601d8

080a33bc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a33bc:	b508      	push	{r3, lr}
 80a33be:	4b02      	ldr	r3, [pc, #8]	; (80a33c8 <HAL_USB_USART_Begin+0xc>)
 80a33c0:	681b      	ldr	r3, [r3, #0]
 80a33c2:	685b      	ldr	r3, [r3, #4]
 80a33c4:	9301      	str	r3, [sp, #4]
 80a33c6:	bd08      	pop	{r3, pc}
 80a33c8:	080601d8 	.word	0x080601d8

080a33cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a33cc:	b508      	push	{r3, lr}
 80a33ce:	4b02      	ldr	r3, [pc, #8]	; (80a33d8 <HAL_USB_USART_Available_Data+0xc>)
 80a33d0:	681b      	ldr	r3, [r3, #0]
 80a33d2:	691b      	ldr	r3, [r3, #16]
 80a33d4:	9301      	str	r3, [sp, #4]
 80a33d6:	bd08      	pop	{r3, pc}
 80a33d8:	080601d8 	.word	0x080601d8

080a33dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a33dc:	b508      	push	{r3, lr}
 80a33de:	4b02      	ldr	r3, [pc, #8]	; (80a33e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a33e0:	681b      	ldr	r3, [r3, #0]
 80a33e2:	695b      	ldr	r3, [r3, #20]
 80a33e4:	9301      	str	r3, [sp, #4]
 80a33e6:	bd08      	pop	{r3, pc}
 80a33e8:	080601d8 	.word	0x080601d8

080a33ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a33ec:	b508      	push	{r3, lr}
 80a33ee:	4b02      	ldr	r3, [pc, #8]	; (80a33f8 <HAL_USB_USART_Receive_Data+0xc>)
 80a33f0:	681b      	ldr	r3, [r3, #0]
 80a33f2:	699b      	ldr	r3, [r3, #24]
 80a33f4:	9301      	str	r3, [sp, #4]
 80a33f6:	bd08      	pop	{r3, pc}
 80a33f8:	080601d8 	.word	0x080601d8

080a33fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a33fc:	b508      	push	{r3, lr}
 80a33fe:	4b02      	ldr	r3, [pc, #8]	; (80a3408 <HAL_USB_USART_Send_Data+0xc>)
 80a3400:	681b      	ldr	r3, [r3, #0]
 80a3402:	69db      	ldr	r3, [r3, #28]
 80a3404:	9301      	str	r3, [sp, #4]
 80a3406:	bd08      	pop	{r3, pc}
 80a3408:	080601d8 	.word	0x080601d8

080a340c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a340c:	b508      	push	{r3, lr}
 80a340e:	4b02      	ldr	r3, [pc, #8]	; (80a3418 <HAL_USB_USART_Flush_Data+0xc>)
 80a3410:	681b      	ldr	r3, [r3, #0]
 80a3412:	6a1b      	ldr	r3, [r3, #32]
 80a3414:	9301      	str	r3, [sp, #4]
 80a3416:	bd08      	pop	{r3, pc}
 80a3418:	080601d8 	.word	0x080601d8

080a341c <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a341c:	b508      	push	{r3, lr}
 80a341e:	4b02      	ldr	r3, [pc, #8]	; (80a3428 <HAL_NET_SetNetWatchDog+0xc>)
 80a3420:	681b      	ldr	r3, [r3, #0]
 80a3422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3424:	9301      	str	r3, [sp, #4]
 80a3426:	bd08      	pop	{r3, pc}
 80a3428:	080601c0 	.word	0x080601c0

080a342c <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a342c:	b508      	push	{r3, lr}
 80a342e:	4b02      	ldr	r3, [pc, #8]	; (80a3438 <inet_gethostbyname+0xc>)
 80a3430:	681b      	ldr	r3, [r3, #0]
 80a3432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3434:	9301      	str	r3, [sp, #4]
 80a3436:	bd08      	pop	{r3, pc}
 80a3438:	080601c0 	.word	0x080601c0

080a343c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a343c:	b508      	push	{r3, lr}
 80a343e:	4b02      	ldr	r3, [pc, #8]	; (80a3448 <log_message+0xc>)
 80a3440:	681b      	ldr	r3, [r3, #0]
 80a3442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3444:	9301      	str	r3, [sp, #4]
 80a3446:	bd08      	pop	{r3, pc}
 80a3448:	080201a8 	.word	0x080201a8

080a344c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a344c:	b508      	push	{r3, lr}
 80a344e:	4b02      	ldr	r3, [pc, #8]	; (80a3458 <system_mode+0xc>)
 80a3450:	681b      	ldr	r3, [r3, #0]
 80a3452:	681b      	ldr	r3, [r3, #0]
 80a3454:	9301      	str	r3, [sp, #4]
 80a3456:	bd08      	pop	{r3, pc}
 80a3458:	080601a4 	.word	0x080601a4

080a345c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a345c:	b508      	push	{r3, lr}
 80a345e:	4b02      	ldr	r3, [pc, #8]	; (80a3468 <set_system_mode+0xc>)
 80a3460:	681b      	ldr	r3, [r3, #0]
 80a3462:	685b      	ldr	r3, [r3, #4]
 80a3464:	9301      	str	r3, [sp, #4]
 80a3466:	bd08      	pop	{r3, pc}
 80a3468:	080601a4 	.word	0x080601a4

080a346c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a346c:	b508      	push	{r3, lr}
 80a346e:	4b02      	ldr	r3, [pc, #8]	; (80a3478 <system_delay_ms+0xc>)
 80a3470:	681b      	ldr	r3, [r3, #0]
 80a3472:	695b      	ldr	r3, [r3, #20]
 80a3474:	9301      	str	r3, [sp, #4]
 80a3476:	bd08      	pop	{r3, pc}
 80a3478:	080601a4 	.word	0x080601a4

080a347c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a347c:	b508      	push	{r3, lr}
 80a347e:	4b02      	ldr	r3, [pc, #8]	; (80a3488 <application_thread_current+0xc>)
 80a3480:	681b      	ldr	r3, [r3, #0]
 80a3482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3484:	9301      	str	r3, [sp, #4]
 80a3486:	bd08      	pop	{r3, pc}
 80a3488:	080601a4 	.word	0x080601a4

080a348c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a348c:	b508      	push	{r3, lr}
 80a348e:	4b02      	ldr	r3, [pc, #8]	; (80a3498 <application_thread_invoke+0xc>)
 80a3490:	681b      	ldr	r3, [r3, #0]
 80a3492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3494:	9301      	str	r3, [sp, #4]
 80a3496:	bd08      	pop	{r3, pc}
 80a3498:	080601a4 	.word	0x080601a4

080a349c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a349c:	b508      	push	{r3, lr}
 80a349e:	4b02      	ldr	r3, [pc, #8]	; (80a34a8 <system_thread_get_state+0xc>)
 80a34a0:	681b      	ldr	r3, [r3, #0]
 80a34a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a34a4:	9301      	str	r3, [sp, #4]
 80a34a6:	bd08      	pop	{r3, pc}
 80a34a8:	080601a4 	.word	0x080601a4

080a34ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a34ac:	b508      	push	{r3, lr}
 80a34ae:	4b03      	ldr	r3, [pc, #12]	; (80a34bc <system_ctrl_set_app_request_handler+0x10>)
 80a34b0:	681b      	ldr	r3, [r3, #0]
 80a34b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a34b6:	9301      	str	r3, [sp, #4]
 80a34b8:	bd08      	pop	{r3, pc}
 80a34ba:	0000      	.short	0x0000
 80a34bc:	080601a4 	.word	0x080601a4

080a34c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a34c0:	b508      	push	{r3, lr}
 80a34c2:	4b03      	ldr	r3, [pc, #12]	; (80a34d0 <system_ctrl_set_result+0x10>)
 80a34c4:	681b      	ldr	r3, [r3, #0]
 80a34c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a34ca:	9301      	str	r3, [sp, #4]
 80a34cc:	bd08      	pop	{r3, pc}
 80a34ce:	0000      	.short	0x0000
 80a34d0:	080601a4 	.word	0x080601a4

080a34d4 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80a34d4:	b508      	push	{r3, lr}
 80a34d6:	4b03      	ldr	r3, [pc, #12]	; (80a34e4 <system_sleep_pins+0x10>)
 80a34d8:	681b      	ldr	r3, [r3, #0]
 80a34da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80a34de:	9301      	str	r3, [sp, #4]
 80a34e0:	bd08      	pop	{r3, pc}
 80a34e2:	0000      	.short	0x0000
 80a34e4:	080601a4 	.word	0x080601a4

080a34e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a34e8:	b508      	push	{r3, lr}
 80a34ea:	4b02      	ldr	r3, [pc, #8]	; (80a34f4 <network_connect+0xc>)
 80a34ec:	681b      	ldr	r3, [r3, #0]
 80a34ee:	685b      	ldr	r3, [r3, #4]
 80a34f0:	9301      	str	r3, [sp, #4]
 80a34f2:	bd08      	pop	{r3, pc}
 80a34f4:	080601c8 	.word	0x080601c8

080a34f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a34f8:	b508      	push	{r3, lr}
 80a34fa:	4b02      	ldr	r3, [pc, #8]	; (80a3504 <network_connecting+0xc>)
 80a34fc:	681b      	ldr	r3, [r3, #0]
 80a34fe:	689b      	ldr	r3, [r3, #8]
 80a3500:	9301      	str	r3, [sp, #4]
 80a3502:	bd08      	pop	{r3, pc}
 80a3504:	080601c8 	.word	0x080601c8

080a3508 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3508:	b508      	push	{r3, lr}
 80a350a:	4b02      	ldr	r3, [pc, #8]	; (80a3514 <network_disconnect+0xc>)
 80a350c:	681b      	ldr	r3, [r3, #0]
 80a350e:	68db      	ldr	r3, [r3, #12]
 80a3510:	9301      	str	r3, [sp, #4]
 80a3512:	bd08      	pop	{r3, pc}
 80a3514:	080601c8 	.word	0x080601c8

080a3518 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3518:	b508      	push	{r3, lr}
 80a351a:	4b02      	ldr	r3, [pc, #8]	; (80a3524 <network_ready+0xc>)
 80a351c:	681b      	ldr	r3, [r3, #0]
 80a351e:	691b      	ldr	r3, [r3, #16]
 80a3520:	9301      	str	r3, [sp, #4]
 80a3522:	bd08      	pop	{r3, pc}
 80a3524:	080601c8 	.word	0x080601c8

080a3528 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3528:	b508      	push	{r3, lr}
 80a352a:	4b02      	ldr	r3, [pc, #8]	; (80a3534 <network_on+0xc>)
 80a352c:	681b      	ldr	r3, [r3, #0]
 80a352e:	695b      	ldr	r3, [r3, #20]
 80a3530:	9301      	str	r3, [sp, #4]
 80a3532:	bd08      	pop	{r3, pc}
 80a3534:	080601c8 	.word	0x080601c8

080a3538 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3538:	b508      	push	{r3, lr}
 80a353a:	4b02      	ldr	r3, [pc, #8]	; (80a3544 <network_off+0xc>)
 80a353c:	681b      	ldr	r3, [r3, #0]
 80a353e:	699b      	ldr	r3, [r3, #24]
 80a3540:	9301      	str	r3, [sp, #4]
 80a3542:	bd08      	pop	{r3, pc}
 80a3544:	080601c8 	.word	0x080601c8

080a3548 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3548:	b508      	push	{r3, lr}
 80a354a:	4b02      	ldr	r3, [pc, #8]	; (80a3554 <network_listen+0xc>)
 80a354c:	681b      	ldr	r3, [r3, #0]
 80a354e:	69db      	ldr	r3, [r3, #28]
 80a3550:	9301      	str	r3, [sp, #4]
 80a3552:	bd08      	pop	{r3, pc}
 80a3554:	080601c8 	.word	0x080601c8

080a3558 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3558:	b508      	push	{r3, lr}
 80a355a:	4b02      	ldr	r3, [pc, #8]	; (80a3564 <network_listening+0xc>)
 80a355c:	681b      	ldr	r3, [r3, #0]
 80a355e:	6a1b      	ldr	r3, [r3, #32]
 80a3560:	9301      	str	r3, [sp, #4]
 80a3562:	bd08      	pop	{r3, pc}
 80a3564:	080601c8 	.word	0x080601c8

080a3568 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3568:	b508      	push	{r3, lr}
 80a356a:	4b02      	ldr	r3, [pc, #8]	; (80a3574 <network_set_listen_timeout+0xc>)
 80a356c:	681b      	ldr	r3, [r3, #0]
 80a356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3570:	9301      	str	r3, [sp, #4]
 80a3572:	bd08      	pop	{r3, pc}
 80a3574:	080601c8 	.word	0x080601c8

080a3578 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a3578:	b508      	push	{r3, lr}
 80a357a:	4b02      	ldr	r3, [pc, #8]	; (80a3584 <network_get_listen_timeout+0xc>)
 80a357c:	681b      	ldr	r3, [r3, #0]
 80a357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3580:	9301      	str	r3, [sp, #4]
 80a3582:	bd08      	pop	{r3, pc}
 80a3584:	080601c8 	.word	0x080601c8

080a3588 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a3588:	b508      	push	{r3, lr}
 80a358a:	4b02      	ldr	r3, [pc, #8]	; (80a3594 <spark_variable+0xc>)
 80a358c:	681b      	ldr	r3, [r3, #0]
 80a358e:	681b      	ldr	r3, [r3, #0]
 80a3590:	9301      	str	r3, [sp, #4]
 80a3592:	bd08      	pop	{r3, pc}
 80a3594:	080601cc 	.word	0x080601cc

080a3598 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a3598:	b508      	push	{r3, lr}
 80a359a:	4b02      	ldr	r3, [pc, #8]	; (80a35a4 <spark_function+0xc>)
 80a359c:	681b      	ldr	r3, [r3, #0]
 80a359e:	685b      	ldr	r3, [r3, #4]
 80a35a0:	9301      	str	r3, [sp, #4]
 80a35a2:	bd08      	pop	{r3, pc}
 80a35a4:	080601cc 	.word	0x080601cc

080a35a8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a35a8:	b508      	push	{r3, lr}
 80a35aa:	4b02      	ldr	r3, [pc, #8]	; (80a35b4 <spark_process+0xc>)
 80a35ac:	681b      	ldr	r3, [r3, #0]
 80a35ae:	689b      	ldr	r3, [r3, #8]
 80a35b0:	9301      	str	r3, [sp, #4]
 80a35b2:	bd08      	pop	{r3, pc}
 80a35b4:	080601cc 	.word	0x080601cc

080a35b8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a35b8:	b508      	push	{r3, lr}
 80a35ba:	4b02      	ldr	r3, [pc, #8]	; (80a35c4 <spark_cloud_flag_connected+0xc>)
 80a35bc:	681b      	ldr	r3, [r3, #0]
 80a35be:	695b      	ldr	r3, [r3, #20]
 80a35c0:	9301      	str	r3, [sp, #4]
 80a35c2:	bd08      	pop	{r3, pc}
 80a35c4:	080601cc 	.word	0x080601cc

080a35c8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a35c8:	b508      	push	{r3, lr}
 80a35ca:	4b02      	ldr	r3, [pc, #8]	; (80a35d4 <spark_deviceID+0xc>)
 80a35cc:	681b      	ldr	r3, [r3, #0]
 80a35ce:	69db      	ldr	r3, [r3, #28]
 80a35d0:	9301      	str	r3, [sp, #4]
 80a35d2:	bd08      	pop	{r3, pc}
 80a35d4:	080601cc 	.word	0x080601cc

080a35d8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a35d8:	b508      	push	{r3, lr}
 80a35da:	4b02      	ldr	r3, [pc, #8]	; (80a35e4 <spark_send_event+0xc>)
 80a35dc:	681b      	ldr	r3, [r3, #0]
 80a35de:	6a1b      	ldr	r3, [r3, #32]
 80a35e0:	9301      	str	r3, [sp, #4]
 80a35e2:	bd08      	pop	{r3, pc}
 80a35e4:	080601cc 	.word	0x080601cc

080a35e8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a35e8:	b508      	push	{r3, lr}
 80a35ea:	4b02      	ldr	r3, [pc, #8]	; (80a35f4 <spark_sync_time_pending+0xc>)
 80a35ec:	681b      	ldr	r3, [r3, #0]
 80a35ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a35f0:	9301      	str	r3, [sp, #4]
 80a35f2:	bd08      	pop	{r3, pc}
 80a35f4:	080601cc 	.word	0x080601cc

080a35f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a35f8:	b508      	push	{r3, lr}
 80a35fa:	4b02      	ldr	r3, [pc, #8]	; (80a3604 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a35fc:	681b      	ldr	r3, [r3, #0]
 80a35fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3600:	9301      	str	r3, [sp, #4]
 80a3602:	bd08      	pop	{r3, pc}
 80a3604:	080601cc 	.word	0x080601cc

080a3608 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3608:	b508      	push	{r3, lr}
 80a360a:	4b02      	ldr	r3, [pc, #8]	; (80a3614 <malloc+0xc>)
 80a360c:	681b      	ldr	r3, [r3, #0]
 80a360e:	681b      	ldr	r3, [r3, #0]
 80a3610:	9301      	str	r3, [sp, #4]
 80a3612:	bd08      	pop	{r3, pc}
 80a3614:	080601a0 	.word	0x080601a0

080a3618 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3618:	b508      	push	{r3, lr}
 80a361a:	4b02      	ldr	r3, [pc, #8]	; (80a3624 <free+0xc>)
 80a361c:	681b      	ldr	r3, [r3, #0]
 80a361e:	685b      	ldr	r3, [r3, #4]
 80a3620:	9301      	str	r3, [sp, #4]
 80a3622:	bd08      	pop	{r3, pc}
 80a3624:	080601a0 	.word	0x080601a0

080a3628 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3628:	b508      	push	{r3, lr}
 80a362a:	4b02      	ldr	r3, [pc, #8]	; (80a3634 <realloc+0xc>)
 80a362c:	681b      	ldr	r3, [r3, #0]
 80a362e:	689b      	ldr	r3, [r3, #8]
 80a3630:	9301      	str	r3, [sp, #4]
 80a3632:	bd08      	pop	{r3, pc}
 80a3634:	080601a0 	.word	0x080601a0

080a3638 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a3638:	b508      	push	{r3, lr}
 80a363a:	4b02      	ldr	r3, [pc, #8]	; (80a3644 <sprintf+0xc>)
 80a363c:	681b      	ldr	r3, [r3, #0]
 80a363e:	68db      	ldr	r3, [r3, #12]
 80a3640:	9301      	str	r3, [sp, #4]
 80a3642:	bd08      	pop	{r3, pc}
 80a3644:	080601a0 	.word	0x080601a0

080a3648 <siscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a3648:	b508      	push	{r3, lr}
 80a364a:	4b02      	ldr	r3, [pc, #8]	; (80a3654 <siscanf+0xc>)
 80a364c:	681b      	ldr	r3, [r3, #0]
 80a364e:	699b      	ldr	r3, [r3, #24]
 80a3650:	9301      	str	r3, [sp, #4]
 80a3652:	bd08      	pop	{r3, pc}
 80a3654:	080601a0 	.word	0x080601a0

080a3658 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a3658:	b508      	push	{r3, lr}
 80a365a:	4b02      	ldr	r3, [pc, #8]	; (80a3664 <snprintf+0xc>)
 80a365c:	681b      	ldr	r3, [r3, #0]
 80a365e:	69db      	ldr	r3, [r3, #28]
 80a3660:	9301      	str	r3, [sp, #4]
 80a3662:	bd08      	pop	{r3, pc}
 80a3664:	080601a0 	.word	0x080601a0

080a3668 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a3668:	b508      	push	{r3, lr}
 80a366a:	4b02      	ldr	r3, [pc, #8]	; (80a3674 <vsnprintf+0xc>)
 80a366c:	681b      	ldr	r3, [r3, #0]
 80a366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3670:	9301      	str	r3, [sp, #4]
 80a3672:	bd08      	pop	{r3, pc}
 80a3674:	080601a0 	.word	0x080601a0

080a3678 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a3678:	b508      	push	{r3, lr}
 80a367a:	4b02      	ldr	r3, [pc, #8]	; (80a3684 <abort+0xc>)
 80a367c:	681b      	ldr	r3, [r3, #0]
 80a367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3680:	9301      	str	r3, [sp, #4]
 80a3682:	bd08      	pop	{r3, pc}
 80a3684:	080601a0 	.word	0x080601a0

080a3688 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a3688:	b508      	push	{r3, lr}
 80a368a:	4b02      	ldr	r3, [pc, #8]	; (80a3694 <_malloc_r+0xc>)
 80a368c:	681b      	ldr	r3, [r3, #0]
 80a368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3690:	9301      	str	r3, [sp, #4]
 80a3692:	bd08      	pop	{r3, pc}
 80a3694:	080601a0 	.word	0x080601a0

080a3698 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a3698:	4770      	bx	lr

080a369a <_ZN8SPIClassD0Ev>:
 80a369a:	b510      	push	{r4, lr}
 80a369c:	4604      	mov	r4, r0
 80a369e:	2110      	movs	r1, #16
 80a36a0:	f001 fd65 	bl	80a516e <_ZdlPvj>
 80a36a4:	4620      	mov	r0, r4
 80a36a6:	bd10      	pop	{r4, pc}

080a36a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a36a8:	b570      	push	{r4, r5, r6, lr}
 80a36aa:	4604      	mov	r4, r0
 80a36ac:	460e      	mov	r6, r1
 80a36ae:	4b07      	ldr	r3, [pc, #28]	; (80a36cc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a36b0:	2500      	movs	r5, #0
 80a36b2:	6003      	str	r3, [r0, #0]
 80a36b4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a36b8:	f7ff fdb6 	bl	80a3228 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a36bc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a36be:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a36c0:	f7ff fd5a 	bl	80a3178 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a36c4:	60a5      	str	r5, [r4, #8]
}
 80a36c6:	4620      	mov	r0, r4
 80a36c8:	bd70      	pop	{r4, r5, r6, pc}
 80a36ca:	bf00      	nop
 80a36cc:	080a7ef4 	.word	0x080a7ef4

080a36d0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a36d0:	7900      	ldrb	r0, [r0, #4]
 80a36d2:	f7ff bd59 	b.w	80a3188 <HAL_SPI_Is_Enabled>

080a36d6 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a36d6:	b510      	push	{r4, lr}
 80a36d8:	2400      	movs	r4, #0
 80a36da:	7004      	strb	r4, [r0, #0]
 80a36dc:	8044      	strh	r4, [r0, #2]
 80a36de:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80a36e2:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a36e4:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80a36e6:	dd07      	ble.n	80a36f8 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 80a36e8:	3901      	subs	r1, #1
 80a36ea:	4299      	cmp	r1, r3
 80a36ec:	d209      	bcs.n	80a3702 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 80a36ee:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80a36f2:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80a36f4:	2301      	movs	r3, #1
 80a36f6:	e001      	b.n	80a36fc <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 80a36f8:	d102      	bne.n	80a3700 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80a36fa:	2302      	movs	r3, #2
 80a36fc:	7003      	strb	r3, [r0, #0]
 80a36fe:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 80a3700:	8041      	strh	r1, [r0, #2]
    }
}
 80a3702:	bd10      	pop	{r4, pc}

080a3704 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3704:	b570      	push	{r4, r5, r6, lr}
 80a3706:	460d      	mov	r5, r1
 80a3708:	4616      	mov	r6, r2
 80a370a:	b086      	sub	sp, #24
 80a370c:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a370e:	2300      	movs	r3, #0
 80a3710:	9302      	str	r3, [sp, #8]
 80a3712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3714:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3716:	9301      	str	r3, [sp, #4]
 80a3718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a371a:	4631      	mov	r1, r6
 80a371c:	9300      	str	r3, [sp, #0]
 80a371e:	4628      	mov	r0, r5
 80a3720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3722:	f7ff fed7 	bl	80a34d4 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 80a3726:	4633      	mov	r3, r6
 80a3728:	462a      	mov	r2, r5
 80a372a:	4601      	mov	r1, r0
 80a372c:	a804      	add	r0, sp, #16
 80a372e:	f7ff ffd2 	bl	80a36d6 <_ZN11SleepResultC1EiPKtj>
 80a3732:	4b06      	ldr	r3, [pc, #24]	; (80a374c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 80a3734:	9804      	ldr	r0, [sp, #16]
 80a3736:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80a373a:	6018      	str	r0, [r3, #0]
    return System.sleepResult_;
}
 80a373c:	4620      	mov	r0, r4
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 80a373e:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80a3740:	681a      	ldr	r2, [r3, #0]
 80a3742:	889b      	ldrh	r3, [r3, #4]
 80a3744:	6022      	str	r2, [r4, #0]
 80a3746:	80a3      	strh	r3, [r4, #4]
}
 80a3748:	b006      	add	sp, #24
 80a374a:	bd70      	pop	{r4, r5, r6, pc}
 80a374c:	20000524 	.word	0x20000524

080a3750 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a3750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a3754:	4b03      	ldr	r3, [pc, #12]	; (80a3764 <_GLOBAL__sub_I_System+0x14>)
 80a3756:	2000      	movs	r0, #0
 80a3758:	7018      	strb	r0, [r3, #0]
 80a375a:	8058      	strh	r0, [r3, #2]
 80a375c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a375e:	f7ff be7d 	b.w	80a345c <set_system_mode>
 80a3762:	bf00      	nop
 80a3764:	20000524 	.word	0x20000524

080a3768 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a376a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a376c:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a376e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3772:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a3774:	2201      	movs	r2, #1
 80a3776:	f247 5330 	movw	r3, #30000	; 0x7530
 80a377a:	4621      	mov	r1, r4
 80a377c:	47a8      	blx	r5
}
 80a377e:	b003      	add	sp, #12
 80a3780:	bd30      	pop	{r4, r5, pc}

080a3782 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3782:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3784:	6803      	ldr	r3, [r0, #0]
 80a3786:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3788:	f247 5330 	movw	r3, #30000	; 0x7530
 80a378c:	46a4      	mov	ip, r4
}
 80a378e:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3790:	4760      	bx	ip

080a3792 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3792:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3794:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a3796:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3798:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a379c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a379e:	4621      	mov	r1, r4
 80a37a0:	4613      	mov	r3, r2
 80a37a2:	2201      	movs	r2, #1
 80a37a4:	47a8      	blx	r5
}
 80a37a6:	b003      	add	sp, #12
 80a37a8:	bd30      	pop	{r4, r5, pc}

080a37aa <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a37aa:	4770      	bx	lr

080a37ac <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a37ac:	4770      	bx	lr

080a37ae <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a37ae:	2000      	movs	r0, #0
 80a37b0:	4770      	bx	lr

080a37b2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a37b2:	b510      	push	{r4, lr}
 80a37b4:	4604      	mov	r4, r0
 80a37b6:	2114      	movs	r1, #20
 80a37b8:	f001 fcd9 	bl	80a516e <_ZdlPvj>
 80a37bc:	4620      	mov	r0, r4
 80a37be:	bd10      	pop	{r4, pc}

080a37c0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a37c0:	f7fc bc6f 	b.w	80a00a2 <_ZdlPv>

080a37c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a37c4:	b510      	push	{r4, lr}
 80a37c6:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a37c8:	6803      	ldr	r3, [r0, #0]
 80a37ca:	689b      	ldr	r3, [r3, #8]
 80a37cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a37ce:	68a3      	ldr	r3, [r4, #8]
 80a37d0:	3b01      	subs	r3, #1
 80a37d2:	60a3      	str	r3, [r4, #8]
 80a37d4:	b92b      	cbnz	r3, 80a37e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a37d6:	6823      	ldr	r3, [r4, #0]
 80a37d8:	4620      	mov	r0, r4
        }
    }
 80a37da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a37de:	68db      	ldr	r3, [r3, #12]
 80a37e0:	4718      	bx	r3
 80a37e2:	bd10      	pop	{r4, pc}

080a37e4 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a37e4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a37e6:	4604      	mov	r4, r0
 80a37e8:	4606      	mov	r6, r0
 80a37ea:	694d      	ldr	r5, [r1, #20]
 80a37ec:	4b04      	ldr	r3, [pc, #16]	; (80a3800 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a37ee:	358c      	adds	r5, #140	; 0x8c
 80a37f0:	f844 3b04 	str.w	r3, [r4], #4
 80a37f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a37f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a37f8:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a37fa:	4630      	mov	r0, r6
 80a37fc:	7023      	strb	r3, [r4, #0]
 80a37fe:	bd70      	pop	{r4, r5, r6, pc}
 80a3800:	080a80a4 	.word	0x080a80a4

080a3804 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a3804:	b510      	push	{r4, lr}
 80a3806:	6943      	ldr	r3, [r0, #20]
 80a3808:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a380a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a380e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3812:	429a      	cmp	r2, r3
 80a3814:	d005      	beq.n	80a3822 <_ZN9TCPClient4peekEv+0x1e>
 80a3816:	6962      	ldr	r2, [r4, #20]
 80a3818:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a381c:	4413      	add	r3, r2
 80a381e:	7918      	ldrb	r0, [r3, #4]
 80a3820:	bd10      	pop	{r4, pc}
 80a3822:	6803      	ldr	r3, [r0, #0]
 80a3824:	691b      	ldr	r3, [r3, #16]
 80a3826:	4798      	blx	r3
 80a3828:	2800      	cmp	r0, #0
 80a382a:	d1f4      	bne.n	80a3816 <_ZN9TCPClient4peekEv+0x12>
 80a382c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a3830:	bd10      	pop	{r4, pc}

080a3832 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a3832:	b510      	push	{r4, lr}
 80a3834:	6943      	ldr	r3, [r0, #20]
 80a3836:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3838:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a383c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3840:	429a      	cmp	r2, r3
 80a3842:	d008      	beq.n	80a3856 <_ZN9TCPClient4readEv+0x24>
 80a3844:	6962      	ldr	r2, [r4, #20]
 80a3846:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a384a:	1c59      	adds	r1, r3, #1
 80a384c:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a3850:	4413      	add	r3, r2
 80a3852:	7918      	ldrb	r0, [r3, #4]
 80a3854:	bd10      	pop	{r4, pc}
 80a3856:	6803      	ldr	r3, [r0, #0]
 80a3858:	691b      	ldr	r3, [r3, #16]
 80a385a:	4798      	blx	r3
 80a385c:	2800      	cmp	r0, #0
 80a385e:	d1f1      	bne.n	80a3844 <_ZN9TCPClient4readEv+0x12>
 80a3860:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a3864:	bd10      	pop	{r4, pc}

080a3866 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a3866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3868:	6943      	ldr	r3, [r0, #20]
 80a386a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a386c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3870:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a3874:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a3876:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a3878:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a387a:	d106      	bne.n	80a388a <_ZN9TCPClient4readEPhj+0x24>
 80a387c:	6803      	ldr	r3, [r0, #0]
 80a387e:	691b      	ldr	r3, [r3, #16]
 80a3880:	4798      	blx	r3
 80a3882:	b910      	cbnz	r0, 80a388a <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a3884:	f04f 34ff 	mov.w	r4, #4294967295
 80a3888:	e014      	b.n	80a38b4 <_ZN9TCPClient4readEPhj+0x4e>
 80a388a:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a388c:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a388e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3892:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3896:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a3898:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a389a:	42bc      	cmp	r4, r7
 80a389c:	bf28      	it	cs
 80a389e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a38a0:	3104      	adds	r1, #4
 80a38a2:	4622      	mov	r2, r4
 80a38a4:	f002 fdf2 	bl	80a648c <memcpy>
 80a38a8:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a38aa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a38ae:	4423      	add	r3, r4
 80a38b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a38b4:	4620      	mov	r0, r4
 80a38b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a38b8 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a38b8:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a38ba:	2300      	movs	r3, #0
 80a38bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a38c0:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a38c2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a38c6:	4770      	bx	lr

080a38c8 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a38c8:	b538      	push	{r3, r4, r5, lr}
 80a38ca:	6942      	ldr	r2, [r0, #20]
 80a38cc:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a38ce:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a38d2:	b11b      	cbz	r3, 80a38dc <_ZN9TCPClient9availableEv+0x14>
 80a38d4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a38d8:	429a      	cmp	r2, r3
 80a38da:	d00c      	beq.n	80a38f6 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a38dc:	6920      	ldr	r0, [r4, #16]
 80a38de:	f001 fb1d 	bl	80a4f1c <_ZN5spark12NetworkClass4fromEm>
 80a38e2:	6803      	ldr	r3, [r0, #0]
 80a38e4:	68db      	ldr	r3, [r3, #12]
 80a38e6:	4798      	blx	r3
 80a38e8:	b318      	cbz	r0, 80a3932 <_ZN9TCPClient9availableEv+0x6a>
 80a38ea:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a38ec:	6818      	ldr	r0, [r3, #0]
 80a38ee:	f7ff fd25 	bl	80a333c <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a38f2:	b918      	cbnz	r0, 80a38fc <_ZN9TCPClient9availableEv+0x34>
 80a38f4:	e01d      	b.n	80a3932 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a38f6:	f7ff ffdf 	bl	80a38b8 <_ZN9TCPClient12flush_bufferEv>
 80a38fa:	e7ef      	b.n	80a38dc <_ZN9TCPClient9availableEv+0x14>
 80a38fc:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a38fe:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3902:	297f      	cmp	r1, #127	; 0x7f
 80a3904:	d815      	bhi.n	80a3932 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a3906:	1d05      	adds	r5, r0, #4
 80a3908:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a390c:	2300      	movs	r3, #0
 80a390e:	4429      	add	r1, r5
 80a3910:	6800      	ldr	r0, [r0, #0]
 80a3912:	f7ff fd2b 	bl	80a336c <socket_receive>
            if (ret > 0)
 80a3916:	2800      	cmp	r0, #0
 80a3918:	dd0b      	ble.n	80a3932 <_ZN9TCPClient9availableEv+0x6a>
 80a391a:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a391c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3920:	b90a      	cbnz	r2, 80a3926 <_ZN9TCPClient9availableEv+0x5e>
 80a3922:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a3926:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a3928:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a392c:	4418      	add	r0, r3
 80a392e:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a3932:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a3934:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3938:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a393c:	1a18      	subs	r0, r3, r0
}
 80a393e:	bd38      	pop	{r3, r4, r5, pc}

080a3940 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a3940:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a3942:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a3944:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3946:	6818      	ldr	r0, [r3, #0]
 80a3948:	f7ff fcf8 	bl	80a333c <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a394c:	b118      	cbz	r0, 80a3956 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a394e:	6963      	ldr	r3, [r4, #20]
 80a3950:	6818      	ldr	r0, [r3, #0]
 80a3952:	f7ff fd13 	bl	80a337c <socket_close>
 80a3956:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3958:	f7ff fd18 	bl	80a338c <socket_handle_invalid>
 80a395c:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a395e:	6960      	ldr	r0, [r4, #20]
 80a3960:	2211      	movs	r2, #17
 80a3962:	2100      	movs	r1, #0
 80a3964:	308c      	adds	r0, #140	; 0x8c
 80a3966:	f002 fd9c 	bl	80a64a2 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a396a:	4620      	mov	r0, r4
}
 80a396c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a3970:	f7ff bfa2 	b.w	80a38b8 <_ZN9TCPClient12flush_bufferEv>

080a3974 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3978:	461f      	mov	r7, r3
    stop();
 80a397a:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a397c:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3980:	4606      	mov	r6, r0
 80a3982:	460c      	mov	r4, r1
 80a3984:	4615      	mov	r5, r2
    stop();
 80a3986:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a3988:	4638      	mov	r0, r7
 80a398a:	f001 fac7 	bl	80a4f1c <_ZN5spark12NetworkClass4fromEm>
 80a398e:	6803      	ldr	r3, [r0, #0]
 80a3990:	68db      	ldr	r3, [r3, #12]
 80a3992:	4798      	blx	r3
 80a3994:	2800      	cmp	r0, #0
 80a3996:	d056      	beq.n	80a3a46 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3998:	9700      	str	r7, [sp, #0]
 80a399a:	462b      	mov	r3, r5
 80a399c:	2206      	movs	r2, #6
 80a399e:	2101      	movs	r1, #1
 80a39a0:	2002      	movs	r0, #2
 80a39a2:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a39a6:	f7ff fcd1 	bl	80a334c <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a39aa:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a39ac:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a39b0:	2700      	movs	r7, #0
 80a39b2:	9302      	str	r3, [sp, #8]
 80a39b4:	6973      	ldr	r3, [r6, #20]
 80a39b6:	9703      	str	r7, [sp, #12]
 80a39b8:	681b      	ldr	r3, [r3, #0]
 80a39ba:	2001      	movs	r0, #1
 80a39bc:	9301      	str	r3, [sp, #4]
 80a39be:	4b23      	ldr	r3, [pc, #140]	; (80a3a4c <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a39c0:	aa02      	add	r2, sp, #8
 80a39c2:	9300      	str	r3, [sp, #0]
 80a39c4:	4922      	ldr	r1, [pc, #136]	; (80a3a50 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a39c6:	463b      	mov	r3, r7
 80a39c8:	f7ff fd38 	bl	80a343c <log_message>

          if (socket_handle_valid(d_->sock))
 80a39cc:	6973      	ldr	r3, [r6, #20]
 80a39ce:	6818      	ldr	r0, [r3, #0]
 80a39d0:	f7ff fcb4 	bl	80a333c <socket_handle_valid>
 80a39d4:	2800      	cmp	r0, #0
 80a39d6:	d036      	beq.n	80a3a46 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a39d8:	4630      	mov	r0, r6
 80a39da:	f7ff ff6d 	bl	80a38b8 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a39de:	2302      	movs	r3, #2
 80a39e0:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a39e4:	0a2b      	lsrs	r3, r5, #8
 80a39e6:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a39ea:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a39ec:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a39f0:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a39f4:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a39f6:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a39fa:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a39fe:	7963      	ldrb	r3, [r4, #5]
 80a3a00:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3a04:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3a08:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3a0c:	f7ff fd06 	bl	80a341c <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3a10:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3a12:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3a14:	2210      	movs	r2, #16
 80a3a16:	a902      	add	r1, sp, #8
 80a3a18:	6818      	ldr	r0, [r3, #0]
 80a3a1a:	f7ff fc9f 	bl	80a335c <socket_connect>
 80a3a1e:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a3a20:	4628      	mov	r0, r5
 80a3a22:	f7ff fcfb 	bl	80a341c <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3a28:	6975      	ldr	r5, [r6, #20]
 80a3a2a:	358c      	adds	r5, #140	; 0x8c
 80a3a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3a2e:	6823      	ldr	r3, [r4, #0]
 80a3a30:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a3a32:	f1b8 0f00 	cmp.w	r8, #0
 80a3a36:	d005      	beq.n	80a3a44 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a3a38:	6833      	ldr	r3, [r6, #0]
 80a3a3a:	4630      	mov	r0, r6
 80a3a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3a3e:	4798      	blx	r3
 80a3a40:	4638      	mov	r0, r7
 80a3a42:	e000      	b.n	80a3a46 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a3a44:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a3a46:	b00a      	add	sp, #40	; 0x28
 80a3a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3a4c:	080a7f6b 	.word	0x080a7f6b
 80a3a50:	080a7f64 	.word	0x080a7f64

080a3a54 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a3a54:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3a56:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a3a58:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3a5a:	6818      	ldr	r0, [r3, #0]
 80a3a5c:	f7ff fc6e 	bl	80a333c <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3a60:	b908      	cbnz	r0, 80a3a66 <_ZN9TCPClient6statusEv+0x12>
 80a3a62:	2000      	movs	r0, #0
 80a3a64:	bd10      	pop	{r4, pc}
 80a3a66:	6920      	ldr	r0, [r4, #16]
 80a3a68:	f001 fa58 	bl	80a4f1c <_ZN5spark12NetworkClass4fromEm>
 80a3a6c:	6803      	ldr	r3, [r0, #0]
 80a3a6e:	68db      	ldr	r3, [r3, #12]
 80a3a70:	4798      	blx	r3
 80a3a72:	2800      	cmp	r0, #0
 80a3a74:	d0f5      	beq.n	80a3a62 <_ZN9TCPClient6statusEv+0xe>
 80a3a76:	6963      	ldr	r3, [r4, #20]
 80a3a78:	6818      	ldr	r0, [r3, #0]
 80a3a7a:	f7ff fc57 	bl	80a332c <socket_active_status>
 80a3a7e:	fab0 f080 	clz	r0, r0
 80a3a82:	0940      	lsrs	r0, r0, #5
}
 80a3a84:	bd10      	pop	{r4, pc}

080a3a86 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a3a86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a3a8a:	2500      	movs	r5, #0
 80a3a8c:	6045      	str	r5, [r0, #4]
 80a3a8e:	4604      	mov	r4, r0
 80a3a90:	460e      	mov	r6, r1
 80a3a92:	4617      	mov	r7, r2
 80a3a94:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3a96:	f7ff ffdd 	bl	80a3a54 <_ZN9TCPClient6statusEv>
 80a3a9a:	b160      	cbz	r0, 80a3ab6 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a3a9c:	6960      	ldr	r0, [r4, #20]
 80a3a9e:	9501      	str	r5, [sp, #4]
 80a3aa0:	f8cd 8000 	str.w	r8, [sp]
 80a3aa4:	462b      	mov	r3, r5
 80a3aa6:	463a      	mov	r2, r7
 80a3aa8:	4631      	mov	r1, r6
 80a3aaa:	6800      	ldr	r0, [r0, #0]
 80a3aac:	f7ff fc76 	bl	80a339c <socket_send_ex>
    if (ret < 0) {
 80a3ab0:	2800      	cmp	r0, #0
 80a3ab2:	da03      	bge.n	80a3abc <_ZN9TCPClient5writeEPKhjm+0x36>
 80a3ab4:	e001      	b.n	80a3aba <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3ab6:	f04f 30ff 	mov.w	r0, #4294967295
 80a3aba:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a3abc:	b002      	add	sp, #8
 80a3abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3ac2 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a3ac2:	b538      	push	{r3, r4, r5, lr}
 80a3ac4:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a3ac6:	f7ff ffc5 	bl	80a3a54 <_ZN9TCPClient6statusEv>
 80a3aca:	bb00      	cbnz	r0, 80a3b0e <_ZN9TCPClient9connectedEv+0x4c>
 80a3acc:	6963      	ldr	r3, [r4, #20]
 80a3ace:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3ad2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3ad6:	4291      	cmp	r1, r2
 80a3ad8:	d119      	bne.n	80a3b0e <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3ada:	6818      	ldr	r0, [r3, #0]
 80a3adc:	f7ff fc2e 	bl	80a333c <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3ae0:	b128      	cbz	r0, 80a3aee <_ZN9TCPClient9connectedEv+0x2c>
 80a3ae2:	6963      	ldr	r3, [r4, #20]
 80a3ae4:	6818      	ldr	r0, [r3, #0]
 80a3ae6:	f7ff fc21 	bl	80a332c <socket_active_status>
 80a3aea:	2801      	cmp	r0, #1
 80a3aec:	d001      	beq.n	80a3af2 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a3aee:	2500      	movs	r5, #0
 80a3af0:	e00e      	b.n	80a3b10 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a3af2:	6823      	ldr	r3, [r4, #0]
 80a3af4:	4620      	mov	r0, r4
 80a3af6:	691b      	ldr	r3, [r3, #16]
 80a3af8:	4798      	blx	r3
 80a3afa:	2800      	cmp	r0, #0
 80a3afc:	bf14      	ite	ne
 80a3afe:	2501      	movne	r5, #1
 80a3b00:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3b02:	d105      	bne.n	80a3b10 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a3b04:	6823      	ldr	r3, [r4, #0]
 80a3b06:	4620      	mov	r0, r4
 80a3b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3b0a:	4798      	blx	r3
 80a3b0c:	e000      	b.n	80a3b10 <_ZN9TCPClient9connectedEv+0x4e>
 80a3b0e:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a3b10:	4628      	mov	r0, r5
 80a3b12:	bd38      	pop	{r3, r4, r5, pc}

080a3b14 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a3b14:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3b16:	f7ff ff9d 	bl	80a3a54 <_ZN9TCPClient6statusEv>
}
 80a3b1a:	3000      	adds	r0, #0
 80a3b1c:	bf18      	it	ne
 80a3b1e:	2001      	movne	r0, #1
 80a3b20:	bd08      	pop	{r3, pc}

080a3b22 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a3b22:	b510      	push	{r4, lr}
 80a3b24:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a3b26:	2300      	movs	r3, #0
 80a3b28:	6001      	str	r1, [r0, #0]
 80a3b2a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a3b2e:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a3b32:	3088      	adds	r0, #136	; 0x88
 80a3b34:	f000 ff0a 	bl	80a494c <_ZN9IPAddressC1Ev>
}
 80a3b38:	4620      	mov	r0, r4
 80a3b3a:	bd10      	pop	{r4, pc}

080a3b3c <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a3b40:	b570      	push	{r4, r5, r6, lr}
 80a3b42:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a3b44:	4a14      	ldr	r2, [pc, #80]	; (80a3b98 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3b46:	2300      	movs	r3, #0
 80a3b48:	6043      	str	r3, [r0, #4]
 80a3b4a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a3b4c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a3b4e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a3b50:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3b52:	20a0      	movs	r0, #160	; 0xa0
 80a3b54:	460e      	mov	r6, r1
 80a3b56:	f7fc faa2 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3b5a:	4605      	mov	r5, r0
 80a3b5c:	b110      	cbz	r0, 80a3b64 <_ZN9TCPClientC1Em+0x28>
 80a3b5e:	4631      	mov	r1, r6
 80a3b60:	f7ff ffdf 	bl	80a3b22 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3b64:	2014      	movs	r0, #20
 80a3b66:	f7fc fa9a 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a3b6a:	4603      	mov	r3, r0
 80a3b6c:	b128      	cbz	r0, 80a3b7a <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a3b6e:	2201      	movs	r2, #1
 80a3b70:	6042      	str	r2, [r0, #4]
 80a3b72:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a3b74:	4a09      	ldr	r2, [pc, #36]	; (80a3b9c <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a3b76:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a3b78:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a3b7a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a3b7c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a3b7e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a3b80:	b128      	cbz	r0, 80a3b8e <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a3b82:	6843      	ldr	r3, [r0, #4]
 80a3b84:	3b01      	subs	r3, #1
 80a3b86:	6043      	str	r3, [r0, #4]
 80a3b88:	b90b      	cbnz	r3, 80a3b8e <_ZN9TCPClientC1Em+0x52>
 80a3b8a:	f7ff fe1b 	bl	80a37c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a3b8e:	4620      	mov	r0, r4
 80a3b90:	f7ff fe92 	bl	80a38b8 <_ZN9TCPClient12flush_bufferEv>
}
 80a3b94:	4620      	mov	r0, r4
 80a3b96:	bd70      	pop	{r4, r5, r6, pc}
 80a3b98:	080a7f20 	.word	0x080a7f20
 80a3b9c:	080a7f04 	.word	0x080a7f04

080a3ba0 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3ba0:	b510      	push	{r4, lr}
 80a3ba2:	4604      	mov	r4, r0
 80a3ba4:	f7ff fbf2 	bl	80a338c <socket_handle_invalid>
 80a3ba8:	4601      	mov	r1, r0
 80a3baa:	4620      	mov	r0, r4
 80a3bac:	f7ff ffc6 	bl	80a3b3c <_ZN9TCPClientC1Em>
{
}
 80a3bb0:	4620      	mov	r0, r4
 80a3bb2:	bd10      	pop	{r4, pc}

080a3bb4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a3bb4:	b510      	push	{r4, lr}
 80a3bb6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3bb8:	6800      	ldr	r0, [r0, #0]
 80a3bba:	f7ff fbbf 	bl	80a333c <socket_handle_valid>
 80a3bbe:	b110      	cbz	r0, 80a3bc6 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3bc0:	6820      	ldr	r0, [r4, #0]
 80a3bc2:	f7ff fbdb 	bl	80a337c <socket_close>
    }
}
 80a3bc6:	4620      	mov	r0, r4
 80a3bc8:	bd10      	pop	{r4, pc}

080a3bca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a3bca:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a3bcc:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a3bce:	4620      	mov	r0, r4
 80a3bd0:	f7ff fff0 	bl	80a3bb4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a3bd4:	b124      	cbz	r4, 80a3be0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a3bd6:	4620      	mov	r0, r4
 80a3bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3bdc:	f7fc ba61 	b.w	80a00a2 <_ZdlPv>
 80a3be0:	bd10      	pop	{r4, pc}
	...

080a3be4 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3be8:	461f      	mov	r7, r3
    stop();
 80a3bea:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3bec:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a3bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3bf0:	4606      	mov	r6, r0
 80a3bf2:	460d      	mov	r5, r1
 80a3bf4:	4690      	mov	r8, r2
    stop();
 80a3bf6:	4798      	blx	r3
    if (Network.ready())
 80a3bf8:	4813      	ldr	r0, [pc, #76]	; (80a3c48 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a3bfa:	f001 f942 	bl	80a4e82 <_ZN5spark12NetworkClass5readyEv>
 80a3bfe:	b300      	cbz	r0, 80a3c42 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a3c00:	a802      	add	r0, sp, #8
 80a3c02:	f000 fea3 	bl	80a494c <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a3c06:	4628      	mov	r0, r5
 80a3c08:	f002 fca9 	bl	80a655e <strlen>
 80a3c0c:	2400      	movs	r4, #0
 80a3c0e:	b281      	uxth	r1, r0
 80a3c10:	9400      	str	r4, [sp, #0]
 80a3c12:	463b      	mov	r3, r7
 80a3c14:	aa03      	add	r2, sp, #12
 80a3c16:	4628      	mov	r0, r5
 80a3c18:	f7ff fc08 	bl	80a342c <inet_gethostbyname>
 80a3c1c:	b980      	cbnz	r0, 80a3c40 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a3c1e:	6833      	ldr	r3, [r6, #0]
 80a3c20:	ad09      	add	r5, sp, #36	; 0x24
 80a3c22:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a3c26:	4b09      	ldr	r3, [pc, #36]	; (80a3c4c <_ZN9TCPClient7connectEPKctm+0x68>)
 80a3c28:	ac03      	add	r4, sp, #12
 80a3c2a:	9308      	str	r3, [sp, #32]
 80a3c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3c30:	6823      	ldr	r3, [r4, #0]
 80a3c32:	4642      	mov	r2, r8
 80a3c34:	702b      	strb	r3, [r5, #0]
 80a3c36:	a908      	add	r1, sp, #32
 80a3c38:	463b      	mov	r3, r7
 80a3c3a:	4630      	mov	r0, r6
 80a3c3c:	47c8      	blx	r9
 80a3c3e:	e000      	b.n	80a3c42 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a3c40:	4620      	mov	r0, r4
}
 80a3c42:	b00f      	add	sp, #60	; 0x3c
 80a3c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3c48:	20000634 	.word	0x20000634
 80a3c4c:	080a80a4 	.word	0x080a80a4

080a3c50 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a3c50:	b510      	push	{r4, lr}
 80a3c52:	4604      	mov	r4, r0
{
	free(buffer);
 80a3c54:	6800      	ldr	r0, [r0, #0]
 80a3c56:	f7ff fcdf 	bl	80a3618 <free>
}
 80a3c5a:	4620      	mov	r0, r4
 80a3c5c:	bd10      	pop	{r4, pc}

080a3c5e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a3c5e:	b510      	push	{r4, lr}
 80a3c60:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a3c62:	6800      	ldr	r0, [r0, #0]
 80a3c64:	b108      	cbz	r0, 80a3c6a <_ZN6String10invalidateEv+0xc>
 80a3c66:	f7ff fcd7 	bl	80a3618 <free>
	buffer = NULL;
 80a3c6a:	2300      	movs	r3, #0
 80a3c6c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a3c6e:	60a3      	str	r3, [r4, #8]
 80a3c70:	6063      	str	r3, [r4, #4]
 80a3c72:	bd10      	pop	{r4, pc}

080a3c74 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3c74:	b538      	push	{r3, r4, r5, lr}
 80a3c76:	4604      	mov	r4, r0
 80a3c78:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3c7a:	6800      	ldr	r0, [r0, #0]
 80a3c7c:	3101      	adds	r1, #1
 80a3c7e:	f7ff fcd3 	bl	80a3628 <realloc>
	if (newbuffer) {
 80a3c82:	b110      	cbz	r0, 80a3c8a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3c84:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a3c88:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3c8a:	bd38      	pop	{r3, r4, r5, pc}

080a3c8c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3c8c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3c8e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3c90:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3c92:	b113      	cbz	r3, 80a3c9a <_ZN6String7reserveEj+0xe>
 80a3c94:	6843      	ldr	r3, [r0, #4]
 80a3c96:	428b      	cmp	r3, r1
 80a3c98:	d207      	bcs.n	80a3caa <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a3c9a:	4620      	mov	r0, r4
 80a3c9c:	f7ff ffea 	bl	80a3c74 <_ZN6String12changeBufferEj>
 80a3ca0:	b120      	cbz	r0, 80a3cac <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3ca2:	68a3      	ldr	r3, [r4, #8]
 80a3ca4:	b90b      	cbnz	r3, 80a3caa <_ZN6String7reserveEj+0x1e>
 80a3ca6:	6822      	ldr	r2, [r4, #0]
 80a3ca8:	7013      	strb	r3, [r2, #0]
 80a3caa:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a3cac:	bd10      	pop	{r4, pc}

080a3cae <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3cae:	b570      	push	{r4, r5, r6, lr}
 80a3cb0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3cb2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3cb4:	4604      	mov	r4, r0
 80a3cb6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a3cb8:	f7ff ffe8 	bl	80a3c8c <_ZN6String7reserveEj>
 80a3cbc:	b918      	cbnz	r0, 80a3cc6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3cbe:	4620      	mov	r0, r4
 80a3cc0:	f7ff ffcd 	bl	80a3c5e <_ZN6String10invalidateEv>
		return *this;
 80a3cc4:	e009      	b.n	80a3cda <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a3cc6:	462a      	mov	r2, r5
 80a3cc8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a3cca:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3ccc:	6820      	ldr	r0, [r4, #0]
 80a3cce:	f002 fbdd 	bl	80a648c <memcpy>
	buffer[len] = 0;
 80a3cd2:	6822      	ldr	r2, [r4, #0]
 80a3cd4:	68a3      	ldr	r3, [r4, #8]
 80a3cd6:	2100      	movs	r1, #0
 80a3cd8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a3cda:	4620      	mov	r0, r4
 80a3cdc:	bd70      	pop	{r4, r5, r6, pc}

080a3cde <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3cde:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3ce0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3ce2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3ce4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3ce6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3ce8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3cea:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a3cec:	460d      	mov	r5, r1
 80a3cee:	b139      	cbz	r1, 80a3d00 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a3cf0:	4608      	mov	r0, r1
 80a3cf2:	f002 fc34 	bl	80a655e <strlen>
 80a3cf6:	4629      	mov	r1, r5
 80a3cf8:	4602      	mov	r2, r0
 80a3cfa:	4620      	mov	r0, r4
 80a3cfc:	f7ff ffd7 	bl	80a3cae <_ZN6String4copyEPKcj>
}
 80a3d00:	4620      	mov	r0, r4
 80a3d02:	bd38      	pop	{r3, r4, r5, pc}

080a3d04 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a3d04:	b538      	push	{r3, r4, r5, lr}
 80a3d06:	4605      	mov	r5, r0
	if (buffer) {
 80a3d08:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a3d0a:	460c      	mov	r4, r1
	if (buffer) {
 80a3d0c:	b160      	cbz	r0, 80a3d28 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a3d0e:	686a      	ldr	r2, [r5, #4]
 80a3d10:	688b      	ldr	r3, [r1, #8]
 80a3d12:	429a      	cmp	r2, r3
 80a3d14:	d306      	bcc.n	80a3d24 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a3d16:	6809      	ldr	r1, [r1, #0]
 80a3d18:	f002 fbfe 	bl	80a6518 <strcpy>
			len = rhs.len;
 80a3d1c:	68a3      	ldr	r3, [r4, #8]
 80a3d1e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a3d20:	2300      	movs	r3, #0
 80a3d22:	e00a      	b.n	80a3d3a <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a3d24:	f7ff fc78 	bl	80a3618 <free>
		}
	}
	buffer = rhs.buffer;
 80a3d28:	6823      	ldr	r3, [r4, #0]
 80a3d2a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a3d2c:	6863      	ldr	r3, [r4, #4]
 80a3d2e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a3d30:	68a3      	ldr	r3, [r4, #8]
 80a3d32:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a3d34:	2300      	movs	r3, #0
 80a3d36:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a3d38:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a3d3a:	60a3      	str	r3, [r4, #8]
 80a3d3c:	bd38      	pop	{r3, r4, r5, pc}

080a3d3e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a3d3e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a3d40:	b510      	push	{r4, lr}
 80a3d42:	460b      	mov	r3, r1
 80a3d44:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a3d46:	d007      	beq.n	80a3d58 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a3d48:	6809      	ldr	r1, [r1, #0]
 80a3d4a:	b119      	cbz	r1, 80a3d54 <_ZN6StringaSERKS_+0x16>
 80a3d4c:	689a      	ldr	r2, [r3, #8]
 80a3d4e:	f7ff ffae 	bl	80a3cae <_ZN6String4copyEPKcj>
 80a3d52:	e001      	b.n	80a3d58 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a3d54:	f7ff ff83 	bl	80a3c5e <_ZN6String10invalidateEv>

	return *this;
}
 80a3d58:	4620      	mov	r0, r4
 80a3d5a:	bd10      	pop	{r4, pc}

080a3d5c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a3d5c:	b510      	push	{r4, lr}
 80a3d5e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3d60:	2300      	movs	r3, #0
 80a3d62:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3d64:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3d66:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3d68:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a3d6a:	f7ff ffe8 	bl	80a3d3e <_ZN6StringaSERKS_>
}
 80a3d6e:	4620      	mov	r0, r4
 80a3d70:	bd10      	pop	{r4, pc}

080a3d72 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a3d72:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a3d74:	b510      	push	{r4, lr}
 80a3d76:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a3d78:	d001      	beq.n	80a3d7e <_ZN6StringaSEOS_+0xc>
 80a3d7a:	f7ff ffc3 	bl	80a3d04 <_ZN6String4moveERS_>
	return *this;
}
 80a3d7e:	4620      	mov	r0, r4
 80a3d80:	bd10      	pop	{r4, pc}

080a3d82 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3d84:	4606      	mov	r6, r0
 80a3d86:	460d      	mov	r5, r1
 80a3d88:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3d8a:	2400      	movs	r4, #0
  while (size--) {
 80a3d8c:	42bd      	cmp	r5, r7
 80a3d8e:	d00c      	beq.n	80a3daa <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a3d90:	6833      	ldr	r3, [r6, #0]
 80a3d92:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3d96:	689b      	ldr	r3, [r3, #8]
 80a3d98:	4630      	mov	r0, r6
 80a3d9a:	4798      	blx	r3
     if (chunk>=0)
 80a3d9c:	2800      	cmp	r0, #0
 80a3d9e:	db01      	blt.n	80a3da4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a3da0:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3da2:	e7f3      	b.n	80a3d8c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3da4:	2c00      	cmp	r4, #0
 80a3da6:	bf08      	it	eq
 80a3da8:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3daa:	4620      	mov	r0, r4
 80a3dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3dae <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a3dae:	b570      	push	{r4, r5, r6, lr}
 80a3db0:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3db2:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a3db4:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a3db6:	b149      	cbz	r1, 80a3dcc <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a3db8:	f002 fbd1 	bl	80a655e <strlen>
 80a3dbc:	682b      	ldr	r3, [r5, #0]
 80a3dbe:	4602      	mov	r2, r0
 80a3dc0:	4621      	mov	r1, r4
 80a3dc2:	4628      	mov	r0, r5
    }
 80a3dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a3dc8:	68db      	ldr	r3, [r3, #12]
 80a3dca:	4718      	bx	r3
    }
 80a3dcc:	bd70      	pop	{r4, r5, r6, pc}

080a3dce <_ZN5Print5printEPKc>:
 80a3dce:	b508      	push	{r3, lr}
 80a3dd0:	f7ff ffed 	bl	80a3dae <_ZN5Print5writeEPKc>
 80a3dd4:	bd08      	pop	{r3, pc}

080a3dd6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3dd6:	6803      	ldr	r3, [r0, #0]
 80a3dd8:	689b      	ldr	r3, [r3, #8]
 80a3dda:	4718      	bx	r3

080a3ddc <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3ddc:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3dde:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3de0:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3de2:	f7ff fff8 	bl	80a3dd6 <_ZN5Print5printEc>
  n += print('\n');
 80a3de6:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a3de8:	4604      	mov	r4, r0
  n += print('\n');
 80a3dea:	4628      	mov	r0, r5
 80a3dec:	f7ff fff3 	bl	80a3dd6 <_ZN5Print5printEc>
  return n;
}
 80a3df0:	4420      	add	r0, r4
 80a3df2:	bd38      	pop	{r3, r4, r5, pc}

080a3df4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a3df4:	b538      	push	{r3, r4, r5, lr}
 80a3df6:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3df8:	f7ff ffd9 	bl	80a3dae <_ZN5Print5writeEPKc>
 80a3dfc:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3dfe:	4628      	mov	r0, r5
 80a3e00:	f7ff ffec 	bl	80a3ddc <_ZN5Print7printlnEv>
  return n;
}
 80a3e04:	4420      	add	r0, r4
 80a3e06:	bd38      	pop	{r3, r4, r5, pc}

080a3e08 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3e08:	2a01      	cmp	r2, #1
 80a3e0a:	bf98      	it	ls
 80a3e0c:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3e0e:	b530      	push	{r4, r5, lr}
 80a3e10:	460b      	mov	r3, r1
 80a3e12:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3e14:	2100      	movs	r1, #0
 80a3e16:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3e1a:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a3e1e:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a3e22:	fb05 3312 	mls	r3, r5, r2, r3
 80a3e26:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3e28:	2b09      	cmp	r3, #9
 80a3e2a:	bf94      	ite	ls
 80a3e2c:	3330      	addls	r3, #48	; 0x30
 80a3e2e:	3337      	addhi	r3, #55	; 0x37
 80a3e30:	b2db      	uxtb	r3, r3
 80a3e32:	4621      	mov	r1, r4
 80a3e34:	f804 3901 	strb.w	r3, [r4], #-1
 80a3e38:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a3e3a:	2d00      	cmp	r5, #0
 80a3e3c:	d1ef      	bne.n	80a3e1e <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3e3e:	f7ff ffb6 	bl	80a3dae <_ZN5Print5writeEPKc>
}
 80a3e42:	b00b      	add	sp, #44	; 0x2c
 80a3e44:	bd30      	pop	{r4, r5, pc}

080a3e46 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a3e46:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a3e48:	b922      	cbnz	r2, 80a3e54 <_ZN5Print5printEmi+0xe>
 80a3e4a:	6803      	ldr	r3, [r0, #0]
 80a3e4c:	b2c9      	uxtb	r1, r1
 80a3e4e:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a3e50:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a3e52:	4718      	bx	r3
  else return printNumber(n, base);
 80a3e54:	b2d2      	uxtb	r2, r2
}
 80a3e56:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3e58:	f7ff bfd6 	b.w	80a3e08 <_ZN5Print11printNumberEmh>

080a3e5c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a3e5c:	f7ff bff3 	b.w	80a3e46 <_ZN5Print5printEmi>

080a3e60 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80a3e60:	b538      	push	{r3, r4, r5, lr}
 80a3e62:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a3e64:	f7ff ffef 	bl	80a3e46 <_ZN5Print5printEmi>
 80a3e68:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80a3e6a:	4628      	mov	r0, r5
 80a3e6c:	f7ff ffb6 	bl	80a3ddc <_ZN5Print7printlnEv>
  return n;
}
 80a3e70:	4420      	add	r0, r4
 80a3e72:	bd38      	pop	{r3, r4, r5, pc}

080a3e74 <_ZN5Print5printEji>:
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
 80a3e74:	f7ff bfe7 	b.w	80a3e46 <_ZN5Print5printEmi>

080a3e78 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
 80a3e78:	b538      	push	{r3, r4, r5, lr}
 80a3e7a:	4605      	mov	r5, r0
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
 80a3e7c:	f7ff ffe3 	bl	80a3e46 <_ZN5Print5printEmi>
 80a3e80:	4604      	mov	r4, r0
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a3e82:	4628      	mov	r0, r5
 80a3e84:	f7ff ffaa 	bl	80a3ddc <_ZN5Print7printlnEv>
  return n;
}
 80a3e88:	4420      	add	r0, r4
 80a3e8a:	bd38      	pop	{r3, r4, r5, pc}

080a3e8c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 80a3e8c:	b538      	push	{r3, r4, r5, lr}
 80a3e8e:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a3e90:	f7ff ffd9 	bl	80a3e46 <_ZN5Print5printEmi>
 80a3e94:	4604      	mov	r4, r0
  n += println();
 80a3e96:	4628      	mov	r0, r5
 80a3e98:	f7ff ffa0 	bl	80a3ddc <_ZN5Print7printlnEv>
  return n;
}
 80a3e9c:	4420      	add	r0, r4
 80a3e9e:	bd38      	pop	{r3, r4, r5, pc}

080a3ea0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a3ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3ea4:	4607      	mov	r7, r0
 80a3ea6:	460e      	mov	r6, r1
  if (base == 0) {
 80a3ea8:	4615      	mov	r5, r2
 80a3eaa:	b92a      	cbnz	r2, 80a3eb8 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a3eb0:	6803      	ldr	r3, [r0, #0]
 80a3eb2:	b2c9      	uxtb	r1, r1
 80a3eb4:	689b      	ldr	r3, [r3, #8]
 80a3eb6:	4718      	bx	r3
  } else if (base == 10) {
 80a3eb8:	2a0a      	cmp	r2, #10
 80a3eba:	d102      	bne.n	80a3ec2 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a3ebc:	2900      	cmp	r1, #0
 80a3ebe:	da01      	bge.n	80a3ec4 <_ZN5Print5printEli+0x24>
 80a3ec0:	e004      	b.n	80a3ecc <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3ec2:	b2d2      	uxtb	r2, r2
  }
}
 80a3ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3ec8:	f7ff bf9e 	b.w	80a3e08 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3ecc:	212d      	movs	r1, #45	; 0x2d
 80a3ece:	f7ff ff82 	bl	80a3dd6 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a3ed2:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3ed4:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a3ed6:	4271      	negs	r1, r6
 80a3ed8:	4638      	mov	r0, r7
 80a3eda:	f7ff ff95 	bl	80a3e08 <_ZN5Print11printNumberEmh>
 80a3ede:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3ee4 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a3ee4:	b538      	push	{r3, r4, r5, lr}
 80a3ee6:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3ee8:	f7ff ffda 	bl	80a3ea0 <_ZN5Print5printEli>
 80a3eec:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a3eee:	4628      	mov	r0, r5
 80a3ef0:	f7ff ff74 	bl	80a3ddc <_ZN5Print7printlnEv>
  return n;
}
 80a3ef4:	4420      	add	r0, r4
 80a3ef6:	bd38      	pop	{r3, r4, r5, pc}

080a3ef8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a3ef8:	b40c      	push	{r2, r3}
 80a3efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3efe:	b087      	sub	sp, #28
 80a3f00:	af00      	add	r7, sp, #0
 80a3f02:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a3f06:	f854 9b04 	ldr.w	r9, [r4], #4
 80a3f0a:	4605      	mov	r5, r0
 80a3f0c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a3f0e:	4623      	mov	r3, r4
 80a3f10:	464a      	mov	r2, r9
 80a3f12:	2114      	movs	r1, #20
 80a3f14:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a3f16:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a3f18:	f7ff fba6 	bl	80a3668 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a3f1c:	2813      	cmp	r0, #19
 80a3f1e:	d805      	bhi.n	80a3f2c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3f20:	1d39      	adds	r1, r7, #4
 80a3f22:	4628      	mov	r0, r5
 80a3f24:	f7ff ff43 	bl	80a3dae <_ZN5Print5writeEPKc>
 80a3f28:	4604      	mov	r4, r0
 80a3f2a:	e013      	b.n	80a3f54 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a3f2c:	f100 0308 	add.w	r3, r0, #8
 80a3f30:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a3f34:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a3f36:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a3f3a:	1c41      	adds	r1, r0, #1
 80a3f3c:	4623      	mov	r3, r4
 80a3f3e:	464a      	mov	r2, r9
 80a3f40:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a3f42:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a3f44:	f7ff fb90 	bl	80a3668 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3f48:	4669      	mov	r1, sp
 80a3f4a:	4628      	mov	r0, r5
 80a3f4c:	f7ff ff2f 	bl	80a3dae <_ZN5Print5writeEPKc>
 80a3f50:	4604      	mov	r4, r0
 80a3f52:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a3f54:	b11e      	cbz	r6, 80a3f5e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a3f56:	4628      	mov	r0, r5
 80a3f58:	f7ff ff40 	bl	80a3ddc <_ZN5Print7printlnEv>
 80a3f5c:	4404      	add	r4, r0
    return n;
}
 80a3f5e:	4620      	mov	r0, r4
 80a3f60:	371c      	adds	r7, #28
 80a3f62:	46bd      	mov	sp, r7
 80a3f64:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3f68:	b002      	add	sp, #8
 80a3f6a:	4770      	bx	lr

080a3f6c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80a3f6c:	b510      	push	{r4, lr}
 80a3f6e:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a3f70:	f7ff f92a 	bl	80a31c8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80a3f74:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80a3f76:	6823      	ldr	r3, [r4, #0]
 80a3f78:	4620      	mov	r0, r4
 80a3f7a:	695b      	ldr	r3, [r3, #20]
 80a3f7c:	4798      	blx	r3
    if (c >= 0) return c;
 80a3f7e:	2800      	cmp	r0, #0
 80a3f80:	da08      	bge.n	80a3f94 <_ZN6Stream9timedReadEv+0x28>
 80a3f82:	f7ff f921 	bl	80a31c8 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 80a3f86:	68e3      	ldr	r3, [r4, #12]
 80a3f88:	1ac0      	subs	r0, r0, r3
 80a3f8a:	68a3      	ldr	r3, [r4, #8]
 80a3f8c:	4298      	cmp	r0, r3
 80a3f8e:	d3f2      	bcc.n	80a3f76 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 80a3f90:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a3f94:	bd10      	pop	{r4, pc}

080a3f96 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 80a3f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3f9a:	4680      	mov	r8, r0
 80a3f9c:	460d      	mov	r5, r1
 80a3f9e:	460c      	mov	r4, r1
 80a3fa0:	188f      	adds	r7, r1, r2
  size_t count = 0;
  while (count < length) {
 80a3fa2:	42bc      	cmp	r4, r7
 80a3fa4:	eba4 0605 	sub.w	r6, r4, r5
 80a3fa8:	d007      	beq.n	80a3fba <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 80a3faa:	4640      	mov	r0, r8
 80a3fac:	f7ff ffde 	bl	80a3f6c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 80a3fb0:	2800      	cmp	r0, #0
 80a3fb2:	db02      	blt.n	80a3fba <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 80a3fb4:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 80a3fb8:	e7f3      	b.n	80a3fa2 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
 80a3fba:	4630      	mov	r0, r6
 80a3fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3fc0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a3fc0:	2300      	movs	r3, #0
 80a3fc2:	461a      	mov	r2, r3
 80a3fc4:	4619      	mov	r1, r3
 80a3fc6:	6840      	ldr	r0, [r0, #4]
 80a3fc8:	f7ff baae 	b.w	80a3528 <network_on>

080a3fcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a3fcc:	680b      	ldr	r3, [r1, #0]
 80a3fce:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a3fd0:	b113      	cbz	r3, 80a3fd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a3fd2:	685a      	ldr	r2, [r3, #4]
 80a3fd4:	3201      	adds	r2, #1
 80a3fd6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a3fd8:	4770      	bx	lr
	...

080a3fdc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3fdc:	4a01      	ldr	r2, [pc, #4]	; (80a3fe4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a3fde:	4b02      	ldr	r3, [pc, #8]	; (80a3fe8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3fe0:	601a      	str	r2, [r3, #0]
 80a3fe2:	4770      	bx	lr
 80a3fe4:	080a7ff5 	.word	0x080a7ff5
 80a3fe8:	2000052c 	.word	0x2000052c

080a3fec <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a3fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a3fee:	4b14      	ldr	r3, [pc, #80]	; (80a4040 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a3ff0:	4f14      	ldr	r7, [pc, #80]	; (80a4044 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a3ff2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a3ff4:	4b14      	ldr	r3, [pc, #80]	; (80a4048 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a3ff6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a3ff8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a3ffa:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a3ffc:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a3ffe:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a4000:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a4002:	d01b      	beq.n	80a403c <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a4004:	a80a      	add	r0, sp, #40	; 0x28
 80a4006:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a400a:	f002 f947 	bl	80a629c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a400e:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a4010:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a4012:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a4014:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a4018:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a401a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a401c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a401e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4022:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4026:	4c09      	ldr	r4, [pc, #36]	; (80a404c <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a4028:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a402c:	ad01      	add	r5, sp, #4
 80a402e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a4030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a4032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a4034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a4036:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4038:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a403c:	b00b      	add	sp, #44	; 0x2c
 80a403e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4040:	20000560 	.word	0x20000560
 80a4044:	2000055c 	.word	0x2000055c
 80a4048:	20000558 	.word	0x20000558
 80a404c:	20000530 	.word	0x20000530

080a4050 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a4050:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a4052:	2000      	movs	r0, #0
 80a4054:	f7ff fac8 	bl	80a35e8 <spark_sync_time_pending>
 80a4058:	b128      	cbz	r0, 80a4066 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a405a:	f7ff faad 	bl	80a35b8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a405e:	f080 0001 	eor.w	r0, r0, #1
 80a4062:	b2c0      	uxtb	r0, r0
 80a4064:	bd08      	pop	{r3, pc}
 80a4066:	2001      	movs	r0, #1
    }
 80a4068:	bd08      	pop	{r3, pc}
	...

080a406c <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a406c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a406e:	f7ff ffbd 	bl	80a3fec <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a4072:	4b02      	ldr	r3, [pc, #8]	; (80a407c <_ZN9TimeClass5monthEl+0x10>)
 80a4074:	6918      	ldr	r0, [r3, #16]
}
 80a4076:	3001      	adds	r0, #1
 80a4078:	bd08      	pop	{r3, pc}
 80a407a:	bf00      	nop
 80a407c:	20000530 	.word	0x20000530

080a4080 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a4080:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a4082:	4909      	ldr	r1, [pc, #36]	; (80a40a8 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a4084:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a4086:	f002 f8a5 	bl	80a61d4 <__aeabi_fcmplt>
 80a408a:	b960      	cbnz	r0, 80a40a6 <_ZN9TimeClass4zoneEf+0x26>
 80a408c:	4907      	ldr	r1, [pc, #28]	; (80a40ac <_ZN9TimeClass4zoneEf+0x2c>)
 80a408e:	4620      	mov	r0, r4
 80a4090:	f002 f8be 	bl	80a6210 <__aeabi_fcmpgt>
 80a4094:	b938      	cbnz	r0, 80a40a6 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a4096:	4906      	ldr	r1, [pc, #24]	; (80a40b0 <_ZN9TimeClass4zoneEf+0x30>)
 80a4098:	4620      	mov	r0, r4
 80a409a:	f001 fefd 	bl	80a5e98 <__aeabi_fmul>
 80a409e:	f002 f8c1 	bl	80a6224 <__aeabi_f2iz>
 80a40a2:	4b04      	ldr	r3, [pc, #16]	; (80a40b4 <_ZN9TimeClass4zoneEf+0x34>)
 80a40a4:	6018      	str	r0, [r3, #0]
 80a40a6:	bd10      	pop	{r4, pc}
 80a40a8:	c1400000 	.word	0xc1400000
 80a40ac:	41600000 	.word	0x41600000
 80a40b0:	45610000 	.word	0x45610000
 80a40b4:	20000560 	.word	0x20000560

080a40b8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a40b8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a40ba:	2000      	movs	r0, #0
 80a40bc:	f7ff f8ac 	bl	80a3218 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a40c0:	4604      	mov	r4, r0
 80a40c2:	b968      	cbnz	r0, 80a40e0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a40c4:	f7ff f9c2 	bl	80a344c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a40c8:	2801      	cmp	r0, #1
 80a40ca:	d10b      	bne.n	80a40e4 <_ZN9TimeClass7isValidEv+0x2c>
 80a40cc:	4620      	mov	r0, r4
 80a40ce:	f7ff f9e5 	bl	80a349c <system_thread_get_state>
 80a40d2:	b938      	cbnz	r0, 80a40e4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a40d4:	f7ff ffbc 	bl	80a4050 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a40d8:	b930      	cbnz	r0, 80a40e8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a40da:	f7ff fa65 	bl	80a35a8 <spark_process>
 80a40de:	e7f9      	b.n	80a40d4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a40e0:	2001      	movs	r0, #1
 80a40e2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a40e4:	2000      	movs	r0, #0
 80a40e6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a40e8:	f7ff ffb2 	bl	80a4050 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a40ec:	2000      	movs	r0, #0
 80a40ee:	f7ff f893 	bl	80a3218 <HAL_RTC_Time_Is_Valid>
 80a40f2:	3000      	adds	r0, #0
 80a40f4:	bf18      	it	ne
 80a40f6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a40f8:	bd10      	pop	{r4, pc}

080a40fa <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a40fa:	b508      	push	{r3, lr}
    (void)isValid();
 80a40fc:	f7ff ffdc 	bl	80a40b8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a4100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a4104:	f7ff b868 	b.w	80a31d8 <HAL_RTC_Get_UnixTime>

080a4108 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a4108:	b508      	push	{r3, lr}
	return hour(now());
 80a410a:	f7ff fff6 	bl	80a40fa <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a410e:	f7ff ff6d 	bl	80a3fec <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a4112:	4b01      	ldr	r3, [pc, #4]	; (80a4118 <_ZN9TimeClass4hourEv+0x10>)
 80a4114:	6898      	ldr	r0, [r3, #8]
 80a4116:	bd08      	pop	{r3, pc}
 80a4118:	20000530 	.word	0x20000530

080a411c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a411c:	b508      	push	{r3, lr}
	return minute(now());
 80a411e:	f7ff ffec 	bl	80a40fa <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a4122:	f7ff ff63 	bl	80a3fec <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a4126:	4b01      	ldr	r3, [pc, #4]	; (80a412c <_ZN9TimeClass6minuteEv+0x10>)
 80a4128:	6858      	ldr	r0, [r3, #4]
 80a412a:	bd08      	pop	{r3, pc}
 80a412c:	20000530 	.word	0x20000530

080a4130 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80a4130:	b508      	push	{r3, lr}
	return second(now());
 80a4132:	f7ff ffe2 	bl	80a40fa <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a4136:	f7ff ff59 	bl	80a3fec <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80a413a:	4b01      	ldr	r3, [pc, #4]	; (80a4140 <_ZN9TimeClass6secondEv+0x10>)
 80a413c:	6818      	ldr	r0, [r3, #0]
 80a413e:	bd08      	pop	{r3, pc}
 80a4140:	20000530 	.word	0x20000530

080a4144 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80a4144:	b508      	push	{r3, lr}
	return day(now());
 80a4146:	f7ff ffd8 	bl	80a40fa <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a414a:	f7ff ff4f 	bl	80a3fec <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80a414e:	4b01      	ldr	r3, [pc, #4]	; (80a4154 <_ZN9TimeClass3dayEv+0x10>)
 80a4150:	68d8      	ldr	r0, [r3, #12]
 80a4152:	bd08      	pop	{r3, pc}
 80a4154:	20000530 	.word	0x20000530

080a4158 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 80a4158:	b508      	push	{r3, lr}
	return month(now());
 80a415a:	f7ff ffce 	bl	80a40fa <_ZN9TimeClass3nowEv>
}
 80a415e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 80a4162:	f7ff bf83 	b.w	80a406c <_ZN9TimeClass5monthEl>
	...

080a4168 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 80a4168:	b508      	push	{r3, lr}
	return year(now());
 80a416a:	f7ff ffc6 	bl	80a40fa <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a416e:	f7ff ff3d 	bl	80a3fec <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 80a4172:	4b01      	ldr	r3, [pc, #4]	; (80a4178 <_ZN9TimeClass4yearEv+0x10>)
 80a4174:	6958      	ldr	r0, [r3, #20]
 80a4176:	bd08      	pop	{r3, pc}
 80a4178:	20000530 	.word	0x20000530

080a417c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a417c:	4b02      	ldr	r3, [pc, #8]	; (80a4188 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a417e:	681a      	ldr	r2, [r3, #0]
 80a4180:	4b02      	ldr	r3, [pc, #8]	; (80a418c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a4182:	601a      	str	r2, [r3, #0]
 80a4184:	4770      	bx	lr
 80a4186:	bf00      	nop
 80a4188:	2000006c 	.word	0x2000006c
 80a418c:	20000554 	.word	0x20000554

080a4190 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a4190:	2100      	movs	r1, #0
 80a4192:	f7ff b96b 	b.w	80a346c <system_delay_ms>

080a4196 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a4196:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a4198:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a419a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a419c:	b113      	cbz	r3, 80a41a4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a419e:	2203      	movs	r2, #3
 80a41a0:	4601      	mov	r1, r0
 80a41a2:	4798      	blx	r3
    }
 80a41a4:	4620      	mov	r0, r4
 80a41a6:	bd10      	pop	{r4, pc}

080a41a8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a41a8:	b510      	push	{r4, lr}
 80a41aa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a41ac:	f7ff fff3 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>
 80a41b0:	4620      	mov	r0, r4
 80a41b2:	bd10      	pop	{r4, pc}

080a41b4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a41b4:	b513      	push	{r0, r1, r4, lr}
 80a41b6:	460b      	mov	r3, r1
 80a41b8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a41ba:	c803      	ldmia	r0, {r0, r1}
 80a41bc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a41c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a41c4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a41c8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a41cc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a41d0:	b002      	add	sp, #8
 80a41d2:	bd10      	pop	{r4, pc}

080a41d4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a41d4:	4803      	ldr	r0, [pc, #12]	; (80a41e4 <_GLOBAL__sub_I_RGB+0x10>)
 80a41d6:	2300      	movs	r3, #0
 80a41d8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a41da:	4a03      	ldr	r2, [pc, #12]	; (80a41e8 <_GLOBAL__sub_I_RGB+0x14>)
 80a41dc:	4903      	ldr	r1, [pc, #12]	; (80a41ec <_GLOBAL__sub_I_RGB+0x18>)
 80a41de:	f000 bfc1 	b.w	80a5164 <__aeabi_atexit>
 80a41e2:	bf00      	nop
 80a41e4:	20000564 	.word	0x20000564
 80a41e8:	20000124 	.word	0x20000124
 80a41ec:	080a41a9 	.word	0x080a41a9

080a41f0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a41f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a41f2:	4b14      	ldr	r3, [pc, #80]	; (80a4244 <serialEventRun+0x54>)
 80a41f4:	b133      	cbz	r3, 80a4204 <serialEventRun+0x14>
 80a41f6:	f000 fc4d 	bl	80a4a94 <_Z16_fetch_usbserialv>
 80a41fa:	6803      	ldr	r3, [r0, #0]
 80a41fc:	691b      	ldr	r3, [r3, #16]
 80a41fe:	4798      	blx	r3
 80a4200:	2800      	cmp	r0, #0
 80a4202:	dc16      	bgt.n	80a4232 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a4204:	4b10      	ldr	r3, [pc, #64]	; (80a4248 <serialEventRun+0x58>)
 80a4206:	b133      	cbz	r3, 80a4216 <serialEventRun+0x26>
 80a4208:	f000 fd3c 	bl	80a4c84 <_Z22__fetch_global_Serial1v>
 80a420c:	6803      	ldr	r3, [r0, #0]
 80a420e:	691b      	ldr	r3, [r3, #16]
 80a4210:	4798      	blx	r3
 80a4212:	2800      	cmp	r0, #0
 80a4214:	dc10      	bgt.n	80a4238 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a4216:	4b0d      	ldr	r3, [pc, #52]	; (80a424c <serialEventRun+0x5c>)
 80a4218:	b10b      	cbz	r3, 80a421e <serialEventRun+0x2e>
 80a421a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a421e:	4b0c      	ldr	r3, [pc, #48]	; (80a4250 <serialEventRun+0x60>)
 80a4220:	b17b      	cbz	r3, 80a4242 <serialEventRun+0x52>
 80a4222:	f000 fc65 	bl	80a4af0 <_Z17_fetch_usbserial1v>
 80a4226:	6803      	ldr	r3, [r0, #0]
 80a4228:	691b      	ldr	r3, [r3, #16]
 80a422a:	4798      	blx	r3
 80a422c:	2800      	cmp	r0, #0
 80a422e:	dc06      	bgt.n	80a423e <serialEventRun+0x4e>
 80a4230:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a4232:	f7fe feb3 	bl	80a2f9c <_Z11serialEventv>
 80a4236:	e7e5      	b.n	80a4204 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a4238:	f3af 8000 	nop.w
 80a423c:	e7eb      	b.n	80a4216 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a423e:	f3af 8000 	nop.w
 80a4242:	bd08      	pop	{r3, pc}
 80a4244:	080a2f9d 	.word	0x080a2f9d
	...

080a4254 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a4254:	b508      	push	{r3, lr}
	serialEventRun();
 80a4256:	f7ff ffcb 	bl	80a41f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a425a:	f7fe ffb5 	bl	80a31c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a425e:	4b01      	ldr	r3, [pc, #4]	; (80a4264 <_post_loop+0x10>)
 80a4260:	6018      	str	r0, [r3, #0]
 80a4262:	bd08      	pop	{r3, pc}
 80a4264:	2000065c 	.word	0x2000065c

080a4268 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4268:	4802      	ldr	r0, [pc, #8]	; (80a4274 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a426a:	4a03      	ldr	r2, [pc, #12]	; (80a4278 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a426c:	4903      	ldr	r1, [pc, #12]	; (80a427c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a426e:	1a12      	subs	r2, r2, r0
 80a4270:	f002 b90c 	b.w	80a648c <memcpy>
 80a4274:	40024000 	.word	0x40024000
 80a4278:	40024004 	.word	0x40024004
 80a427c:	080a8410 	.word	0x080a8410

080a4280 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a4280:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4282:	2300      	movs	r3, #0
 80a4284:	9300      	str	r3, [sp, #0]
 80a4286:	461a      	mov	r2, r3
 80a4288:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a428c:	f7ff f918 	bl	80a34c0 <system_ctrl_set_result>
}
 80a4290:	b003      	add	sp, #12
 80a4292:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4298 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a4298:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a429a:	8843      	ldrh	r3, [r0, #2]
 80a429c:	2b0a      	cmp	r3, #10
 80a429e:	d008      	beq.n	80a42b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a42a0:	2b50      	cmp	r3, #80	; 0x50
 80a42a2:	d109      	bne.n	80a42b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a42a4:	4b09      	ldr	r3, [pc, #36]	; (80a42cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a42a6:	681b      	ldr	r3, [r3, #0]
 80a42a8:	b13b      	cbz	r3, 80a42ba <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a42aa:	b003      	add	sp, #12
 80a42ac:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a42b0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a42b2:	f7ff ffe5 	bl	80a4280 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a42b6:	e006      	b.n	80a42c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a42b8:	2300      	movs	r3, #0
 80a42ba:	9300      	str	r3, [sp, #0]
 80a42bc:	461a      	mov	r2, r3
 80a42be:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a42c2:	f7ff f8fd 	bl	80a34c0 <system_ctrl_set_result>
        break;
    }
}
 80a42c6:	b003      	add	sp, #12
 80a42c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a42cc:	20000574 	.word	0x20000574

080a42d0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a42d0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a42d2:	4c10      	ldr	r4, [pc, #64]	; (80a4314 <module_user_init_hook+0x44>)
 80a42d4:	4d10      	ldr	r5, [pc, #64]	; (80a4318 <module_user_init_hook+0x48>)
 80a42d6:	6823      	ldr	r3, [r4, #0]
 80a42d8:	42ab      	cmp	r3, r5
 80a42da:	4b10      	ldr	r3, [pc, #64]	; (80a431c <module_user_init_hook+0x4c>)
 80a42dc:	bf0c      	ite	eq
 80a42de:	2201      	moveq	r2, #1
 80a42e0:	2200      	movne	r2, #0
 80a42e2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a42e4:	d002      	beq.n	80a42ec <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a42e6:	f7ff ffbf 	bl	80a4268 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a42ea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a42ec:	f7fe ff54 	bl	80a3198 <HAL_RNG_GetRandomNumber>
 80a42f0:	4604      	mov	r4, r0
    srand(seed);
 80a42f2:	f002 f8df 	bl	80a64b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a42f6:	4b0a      	ldr	r3, [pc, #40]	; (80a4320 <module_user_init_hook+0x50>)
 80a42f8:	b113      	cbz	r3, 80a4300 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a42fa:	4620      	mov	r0, r4
 80a42fc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4300:	2100      	movs	r1, #0
 80a4302:	4807      	ldr	r0, [pc, #28]	; (80a4320 <module_user_init_hook+0x50>)
 80a4304:	f7ff f978 	bl	80a35f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a4308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a430c:	2100      	movs	r1, #0
 80a430e:	4805      	ldr	r0, [pc, #20]	; (80a4324 <module_user_init_hook+0x54>)
 80a4310:	f7ff b8cc 	b.w	80a34ac <system_ctrl_set_app_request_handler>
 80a4314:	40024000 	.word	0x40024000
 80a4318:	9a271c1e 	.word	0x9a271c1e
 80a431c:	20000578 	.word	0x20000578
 80a4320:	00000000 	.word	0x00000000
 80a4324:	080a4299 	.word	0x080a4299

080a4328 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a4328:	4770      	bx	lr

080a432a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a432a:	2000      	movs	r0, #0
 80a432c:	4770      	bx	lr

080a432e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a432e:	b510      	push	{r4, lr}
 80a4330:	4604      	mov	r4, r0
 80a4332:	2110      	movs	r1, #16
 80a4334:	f000 ff1b 	bl	80a516e <_ZdlPvj>
 80a4338:	4620      	mov	r0, r4
 80a433a:	bd10      	pop	{r4, pc}

080a433c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a433c:	b508      	push	{r3, lr}
      { delete this; }
 80a433e:	b108      	cbz	r0, 80a4344 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a4340:	f7ff fff5 	bl	80a432e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a4344:	bd08      	pop	{r3, pc}

080a4346 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a4346:	2200      	movs	r2, #0
 80a4348:	6002      	str	r2, [r0, #0]
 80a434a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a434e:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a4350:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a4352:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a4356:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4358:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a435a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a435c:	680c      	ldr	r4, [r1, #0]
 80a435e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4360:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a4362:	bd10      	pop	{r4, pc}

080a4364 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a4364:	b510      	push	{r4, lr}
 80a4366:	4604      	mov	r4, r0
    free((void*)msg_);
 80a4368:	6800      	ldr	r0, [r0, #0]
 80a436a:	f7ff f955 	bl	80a3618 <free>
}
 80a436e:	4620      	mov	r0, r4
 80a4370:	bd10      	pop	{r4, pc}

080a4372 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a4372:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a4374:	68c4      	ldr	r4, [r0, #12]
 80a4376:	b1f4      	cbz	r4, 80a43b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a4378:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a437a:	2b02      	cmp	r3, #2
 80a437c:	d103      	bne.n	80a4386 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a437e:	f104 000c 	add.w	r0, r4, #12
 80a4382:	f7ff ffef 	bl	80a4364 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a4386:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a4388:	b135      	cbz	r5, 80a4398 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a438a:	4628      	mov	r0, r5
 80a438c:	f7ff ff03 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>
 80a4390:	2110      	movs	r1, #16
 80a4392:	4628      	mov	r0, r5
 80a4394:	f000 feeb 	bl	80a516e <_ZdlPvj>
 80a4398:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a439a:	b135      	cbz	r5, 80a43aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a439c:	4628      	mov	r0, r5
 80a439e:	f7ff fefa 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>
 80a43a2:	2110      	movs	r1, #16
 80a43a4:	4628      	mov	r0, r5
 80a43a6:	f000 fee2 	bl	80a516e <_ZdlPvj>
 80a43aa:	4620      	mov	r0, r4
 80a43ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a43b0:	2114      	movs	r1, #20
 80a43b2:	f000 bedc 	b.w	80a516e <_ZdlPvj>
 80a43b6:	bd38      	pop	{r3, r4, r5, pc}

080a43b8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a43b8:	b510      	push	{r4, lr}
 80a43ba:	b088      	sub	sp, #32
 80a43bc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a43be:	4668      	mov	r0, sp
 80a43c0:	f7ff fc8d 	bl	80a3cde <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a43c4:	4669      	mov	r1, sp
 80a43c6:	a804      	add	r0, sp, #16
 80a43c8:	f7ff fcc8 	bl	80a3d5c <_ZN6StringC1ERKS_>
 80a43cc:	a804      	add	r0, sp, #16
 80a43ce:	47a0      	blx	r4
 80a43d0:	4604      	mov	r4, r0
 80a43d2:	a804      	add	r0, sp, #16
 80a43d4:	f7ff fc3c 	bl	80a3c50 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a43d8:	4668      	mov	r0, sp
 80a43da:	f7ff fc39 	bl	80a3c50 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a43de:	4620      	mov	r0, r4
 80a43e0:	b008      	add	sp, #32
 80a43e2:	bd10      	pop	{r4, pc}

080a43e4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a43e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a43e6:	4607      	mov	r7, r0
 80a43e8:	460e      	mov	r6, r1
 80a43ea:	4615      	mov	r5, r2
 80a43ec:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a43ee:	2410      	movs	r4, #16
 80a43f0:	4622      	mov	r2, r4
 80a43f2:	2100      	movs	r1, #0
 80a43f4:	4668      	mov	r0, sp
 80a43f6:	f002 f854 	bl	80a64a2 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a43fa:	2200      	movs	r2, #0
 80a43fc:	4669      	mov	r1, sp
 80a43fe:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a4400:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a4404:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a4406:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a4408:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a440a:	f7ff f8c5 	bl	80a3598 <spark_function>
}
 80a440e:	b005      	add	sp, #20
 80a4410:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4412 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a4412:	b513      	push	{r0, r1, r4, lr}
 80a4414:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4416:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a441a:	2300      	movs	r3, #0
 80a441c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a441e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4420:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a4422:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a4424:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a4426:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a4428:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a442a:	f7fc f874 	bl	80a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a442e:	4620      	mov	r0, r4
 80a4430:	b002      	add	sp, #8
 80a4432:	bd10      	pop	{r4, pc}

080a4434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a4434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4436:	460c      	mov	r4, r1
 80a4438:	4606      	mov	r6, r0
 80a443a:	460f      	mov	r7, r1
 80a443c:	f854 3b04 	ldr.w	r3, [r4], #4
 80a4440:	ad02      	add	r5, sp, #8
 80a4442:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a4446:	4621      	mov	r1, r4
 80a4448:	a801      	add	r0, sp, #4
 80a444a:	f7ff fdbf 	bl	80a3fcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a444e:	4629      	mov	r1, r5
 80a4450:	4630      	mov	r0, r6
 80a4452:	f7ff ffde 	bl	80a4412 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a4456:	a801      	add	r0, sp, #4
 80a4458:	f7fc f85d 	bl	80a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a445c:	4620      	mov	r0, r4
 80a445e:	f7fc f85a 	bl	80a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a4462:	4638      	mov	r0, r7
 80a4464:	2108      	movs	r1, #8
 80a4466:	f000 fe82 	bl	80a516e <_ZdlPvj>
        return p;
    }
 80a446a:	4630      	mov	r0, r6
 80a446c:	b003      	add	sp, #12
 80a446e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4470 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4470:	b538      	push	{r3, r4, r5, lr}
 80a4472:	2300      	movs	r3, #0
 80a4474:	4604      	mov	r4, r0
 80a4476:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4478:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a447a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a447c:	f7fb fe0f 	bl	80a009e <_Znwj>
 80a4480:	b128      	cbz	r0, 80a448e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a4482:	2301      	movs	r3, #1
 80a4484:	6043      	str	r3, [r0, #4]
 80a4486:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a4488:	4b02      	ldr	r3, [pc, #8]	; (80a4494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a448a:	60c5      	str	r5, [r0, #12]
 80a448c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a448e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a4490:	4620      	mov	r0, r4
 80a4492:	bd38      	pop	{r3, r4, r5, pc}
 80a4494:	080a8088 	.word	0x080a8088

080a4498 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4498:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a449a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a449c:	b90a      	cbnz	r2, 80a44a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a449e:	f000 fe68 	bl	80a5172 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a44a2:	68c3      	ldr	r3, [r0, #12]
    }
 80a44a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a44a8:	4718      	bx	r3

080a44aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a44aa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a44ac:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a44ae:	f100 0110 	add.w	r1, r0, #16
 80a44b2:	f7ff fff1 	bl	80a4498 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a44b6:	bd08      	pop	{r3, pc}

080a44b8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a44b8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a44ba:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a44bc:	b90a      	cbnz	r2, 80a44c2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a44be:	f000 fe58 	bl	80a5172 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a44c2:	68c3      	ldr	r3, [r0, #12]
    }
 80a44c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a44c8:	4718      	bx	r3

080a44ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a44ca:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a44cc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a44ce:	f100 0110 	add.w	r1, r0, #16
 80a44d2:	f7ff fff1 	bl	80a44b8 <_ZNKSt8functionIFvRKbEEclES1_>
 80a44d6:	bd08      	pop	{r3, pc}

080a44d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a44d8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a44da:	2300      	movs	r3, #0
 80a44dc:	6083      	str	r3, [r0, #8]
 80a44de:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a44e0:	4604      	mov	r4, r0
 80a44e2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a44e4:	b12b      	cbz	r3, 80a44f2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a44e6:	2202      	movs	r2, #2
 80a44e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a44ea:	68eb      	ldr	r3, [r5, #12]
 80a44ec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a44ee:	68ab      	ldr	r3, [r5, #8]
 80a44f0:	60a3      	str	r3, [r4, #8]
	}
    }
 80a44f2:	4620      	mov	r0, r4
 80a44f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a44f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a44f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a44fa:	b089      	sub	sp, #36	; 0x24
 80a44fc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a44fe:	4668      	mov	r0, sp
 80a4500:	f7ff ff21 	bl	80a4346 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a4504:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a4508:	2300      	movs	r3, #0
 80a450a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a450e:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a4512:	2b00      	cmp	r3, #0
 80a4514:	d103      	bne.n	80a451e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a4516:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a451a:	2900      	cmp	r1, #0
 80a451c:	d1f7      	bne.n	80a450e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a451e:	d002      	beq.n	80a4526 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a4520:	f88d 3008 	strb.w	r3, [sp, #8]
 80a4524:	e063      	b.n	80a45ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a4526:	f114 050c 	adds.w	r5, r4, #12
 80a452a:	d003      	beq.n	80a4534 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a452c:	4669      	mov	r1, sp
 80a452e:	4628      	mov	r0, r5
 80a4530:	f7ff ff09 	bl	80a4346 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a4534:	f3bf 8f5f 	dmb	sy
 80a4538:	2301      	movs	r3, #1
 80a453a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a453c:	f3bf 8f5f 	dmb	sy
 80a4540:	f104 0308 	add.w	r3, r4, #8
 80a4544:	2000      	movs	r0, #0
 80a4546:	e853 6f00 	ldrex	r6, [r3]
 80a454a:	e843 0200 	strex	r2, r0, [r3]
 80a454e:	2a00      	cmp	r2, #0
 80a4550:	d1f9      	bne.n	80a4546 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a4552:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a4556:	2e00      	cmp	r6, #0
 80a4558:	d049      	beq.n	80a45ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a455a:	f7fe ff8f 	bl	80a347c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a455e:	b120      	cbz	r0, 80a456a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4560:	4629      	mov	r1, r5
 80a4562:	4630      	mov	r0, r6
 80a4564:	f7ff ff98 	bl	80a4498 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a4568:	e03a      	b.n	80a45e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a456a:	4631      	mov	r1, r6
 80a456c:	a802      	add	r0, sp, #8
 80a456e:	f7ff ffb3 	bl	80a44d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a4572:	68e0      	ldr	r0, [r4, #12]
 80a4574:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a4578:	b108      	cbz	r0, 80a457e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a457a:	f001 ffd5 	bl	80a6528 <strdup>
 80a457e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4580:	2010      	movs	r0, #16
 80a4582:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a4586:	f7fb fd8a 	bl	80a009e <_Znwj>
 80a458a:	4605      	mov	r5, r0
 80a458c:	b1e8      	cbz	r0, 80a45ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a458e:	2700      	movs	r7, #0
 80a4590:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4592:	2018      	movs	r0, #24
 80a4594:	f7fb fd83 	bl	80a009e <_Znwj>
 80a4598:	4604      	mov	r4, r0
 80a459a:	b188      	cbz	r0, 80a45c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a459c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a459e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a45a0:	a802      	add	r0, sp, #8
 80a45a2:	f7ff fe07 	bl	80a41b4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a45a6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a45a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a45aa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a45ac:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a45ae:	9204      	str	r2, [sp, #16]
 80a45b0:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a45b2:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a45b4:	60e3      	str	r3, [r4, #12]
 80a45b6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a45ba:	9205      	str	r2, [sp, #20]
 80a45bc:	f7ff fec3 	bl	80a4346 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a45c0:	4b0d      	ldr	r3, [pc, #52]	; (80a45f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a45c2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a45c4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a45c6:	4b0d      	ldr	r3, [pc, #52]	; (80a45fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a45c8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a45ca:	a806      	add	r0, sp, #24
 80a45cc:	f7ff feca 	bl	80a4364 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a45d0:	a802      	add	r0, sp, #8
 80a45d2:	f7ff fde0 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a45d6:	2200      	movs	r2, #0
 80a45d8:	4629      	mov	r1, r5
 80a45da:	4809      	ldr	r0, [pc, #36]	; (80a4600 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a45dc:	f7fe ff56 	bl	80a348c <application_thread_invoke>
 80a45e0:	4630      	mov	r0, r6
 80a45e2:	f7ff fdd8 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a45e6:	2110      	movs	r1, #16
 80a45e8:	4630      	mov	r0, r6
 80a45ea:	f000 fdc0 	bl	80a516e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a45ee:	4668      	mov	r0, sp
 80a45f0:	f7ff feb8 	bl	80a4364 <_ZN8particle5ErrorD1Ev>
    }
 80a45f4:	b009      	add	sp, #36	; 0x24
 80a45f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a45f8:	080a44ab 	.word	0x080a44ab
 80a45fc:	080a4721 	.word	0x080a4721
 80a4600:	080a4d05 	.word	0x080a4d05

080a4604 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a4604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4608:	b08b      	sub	sp, #44	; 0x2c
 80a460a:	4606      	mov	r6, r0
 80a460c:	460f      	mov	r7, r1
 80a460e:	4690      	mov	r8, r2
 80a4610:	4699      	mov	r9, r3
 80a4612:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4616:	f7fe ffcf 	bl	80a35b8 <spark_cloud_flag_connected>
 80a461a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a461c:	4683      	mov	fp, r0
 80a461e:	bb30      	cbnz	r0, 80a466e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a4620:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a4624:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4626:	a905      	add	r1, sp, #20
 80a4628:	4628      	mov	r0, r5
 80a462a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a462e:	f7ff fe8a 	bl	80a4346 <_ZN8particle5ErrorC1EOS0_>
 80a4632:	2014      	movs	r0, #20
 80a4634:	f7fb fd33 	bl	80a009e <_Znwj>
 80a4638:	4604      	mov	r4, r0
 80a463a:	b158      	cbz	r0, 80a4654 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a463c:	2302      	movs	r3, #2
 80a463e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4640:	2301      	movs	r3, #1
 80a4642:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a4644:	f8c0 b004 	str.w	fp, [r0, #4]
 80a4648:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a464c:	4629      	mov	r1, r5
 80a464e:	300c      	adds	r0, #12
 80a4650:	f7ff fe79 	bl	80a4346 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a4654:	4630      	mov	r0, r6
 80a4656:	4621      	mov	r1, r4
 80a4658:	f840 4b04 	str.w	r4, [r0], #4
 80a465c:	f7ff ff08 	bl	80a4470 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4660:	4628      	mov	r0, r5
 80a4662:	f7ff fe7f 	bl	80a4364 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a4666:	a805      	add	r0, sp, #20
 80a4668:	f7ff fe7c 	bl	80a4364 <_ZN8particle5ErrorD1Ev>
 80a466c:	e052      	b.n	80a4714 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a466e:	2400      	movs	r4, #0
 80a4670:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a4672:	2014      	movs	r0, #20
 80a4674:	606c      	str	r4, [r5, #4]
 80a4676:	60ac      	str	r4, [r5, #8]
 80a4678:	9307      	str	r3, [sp, #28]
 80a467a:	f7fb fd10 	bl	80a009e <_Znwj>
 80a467e:	4601      	mov	r1, r0
 80a4680:	b118      	cbz	r0, 80a468a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a4682:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4684:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a4686:	6044      	str	r4, [r0, #4]
 80a4688:	6084      	str	r4, [r0, #8]
 80a468a:	a804      	add	r0, sp, #16
 80a468c:	9103      	str	r1, [sp, #12]
 80a468e:	f7ff feef 	bl	80a4470 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a4692:	4b22      	ldr	r3, [pc, #136]	; (80a471c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a4694:	2008      	movs	r0, #8
 80a4696:	9308      	str	r3, [sp, #32]
 80a4698:	f7fb fd01 	bl	80a009e <_Znwj>
 80a469c:	4604      	mov	r4, r0
 80a469e:	b128      	cbz	r0, 80a46ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a46a0:	9b03      	ldr	r3, [sp, #12]
 80a46a2:	a904      	add	r1, sp, #16
 80a46a4:	f840 3b04 	str.w	r3, [r0], #4
 80a46a8:	f7ff fc90 	bl	80a3fcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a46ac:	9500      	str	r5, [sp, #0]
 80a46ae:	fa5f f38a 	uxtb.w	r3, sl
 80a46b2:	464a      	mov	r2, r9
 80a46b4:	4641      	mov	r1, r8
 80a46b6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a46b8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a46ba:	f7fe ff8d 	bl	80a35d8 <spark_send_event>
 80a46be:	b920      	cbnz	r0, 80a46ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a46c0:	9b03      	ldr	r3, [sp, #12]
 80a46c2:	785b      	ldrb	r3, [r3, #1]
 80a46c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a46c8:	b183      	cbz	r3, 80a46ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a46ca:	9b03      	ldr	r3, [sp, #12]
 80a46cc:	a904      	add	r1, sp, #16
 80a46ce:	a806      	add	r0, sp, #24
 80a46d0:	9305      	str	r3, [sp, #20]
 80a46d2:	f7ff fc7b 	bl	80a3fcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a46d6:	a905      	add	r1, sp, #20
 80a46d8:	4630      	mov	r0, r6
 80a46da:	f7ff fe9a 	bl	80a4412 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a46de:	a806      	add	r0, sp, #24
 80a46e0:	f7fb ff19 	bl	80a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a46e4:	a804      	add	r0, sp, #16
 80a46e6:	f7fb ff16 	bl	80a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a46ea:	e013      	b.n	80a4714 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a46ec:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a46f0:	a905      	add	r1, sp, #20
 80a46f2:	a803      	add	r0, sp, #12
 80a46f4:	9205      	str	r2, [sp, #20]
 80a46f6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a46fa:	f7ff fefd 	bl	80a44f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a46fe:	a805      	add	r0, sp, #20
 80a4700:	f7ff fe30 	bl	80a4364 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a4704:	a805      	add	r0, sp, #20
 80a4706:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a4708:	f7ff fe94 	bl	80a4434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a470c:	a806      	add	r0, sp, #24
 80a470e:	f7fb ff02 	bl	80a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4712:	e7da      	b.n	80a46ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a4714:	4630      	mov	r0, r6
 80a4716:	b00b      	add	sp, #44	; 0x2c
 80a4718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a471c:	080a4891 	.word	0x080a4891

080a4720 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a4720:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4724:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a4726:	d006      	beq.n	80a4736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a4728:	2a03      	cmp	r2, #3
 80a472a:	d017      	beq.n	80a475c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a472c:	2a01      	cmp	r2, #1
 80a472e:	d122      	bne.n	80a4776 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a4730:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a4732:	6003      	str	r3, [r0, #0]
	      break;
 80a4734:	e01f      	b.n	80a4776 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a4736:	2018      	movs	r0, #24
 80a4738:	680e      	ldr	r6, [r1, #0]
 80a473a:	f7fb fcb0 	bl	80a009e <_Znwj>
 80a473e:	4605      	mov	r5, r0
 80a4740:	b150      	cbz	r0, 80a4758 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a4742:	4631      	mov	r1, r6
 80a4744:	f7ff fec8 	bl	80a44d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a4748:	6930      	ldr	r0, [r6, #16]
 80a474a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a474e:	b108      	cbz	r0, 80a4754 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a4750:	f001 feea 	bl	80a6528 <strdup>
 80a4754:	6128      	str	r0, [r5, #16]
 80a4756:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a4758:	6025      	str	r5, [r4, #0]
 80a475a:	e00c      	b.n	80a4776 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a475c:	6804      	ldr	r4, [r0, #0]
 80a475e:	b154      	cbz	r4, 80a4776 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a4760:	f104 0010 	add.w	r0, r4, #16
 80a4764:	f7ff fdfe 	bl	80a4364 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4768:	4620      	mov	r0, r4
 80a476a:	f7ff fd14 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a476e:	2118      	movs	r1, #24
 80a4770:	4620      	mov	r0, r4
 80a4772:	f000 fcfc 	bl	80a516e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a4776:	2000      	movs	r0, #0
 80a4778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a477a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a477a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a477c:	2300      	movs	r3, #0
 80a477e:	6083      	str	r3, [r0, #8]
 80a4780:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a4782:	4604      	mov	r4, r0
 80a4784:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a4786:	b12b      	cbz	r3, 80a4794 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4788:	2202      	movs	r2, #2
 80a478a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a478c:	68eb      	ldr	r3, [r5, #12]
 80a478e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4790:	68ab      	ldr	r3, [r5, #8]
 80a4792:	60a3      	str	r3, [r4, #8]
	}
    }
 80a4794:	4620      	mov	r0, r4
 80a4796:	bd38      	pop	{r3, r4, r5, pc}

080a4798 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a4798:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a479a:	b570      	push	{r4, r5, r6, lr}
 80a479c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a479e:	d006      	beq.n	80a47ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a47a0:	2a03      	cmp	r2, #3
 80a47a2:	d011      	beq.n	80a47c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a47a4:	2a01      	cmp	r2, #1
 80a47a6:	d118      	bne.n	80a47da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a47a8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a47aa:	6003      	str	r3, [r0, #0]
	      break;
 80a47ac:	e015      	b.n	80a47da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a47ae:	2014      	movs	r0, #20
 80a47b0:	680e      	ldr	r6, [r1, #0]
 80a47b2:	f7fb fc74 	bl	80a009e <_Znwj>
 80a47b6:	4605      	mov	r5, r0
 80a47b8:	b120      	cbz	r0, 80a47c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a47ba:	4631      	mov	r1, r6
 80a47bc:	f7ff ffdd 	bl	80a477a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a47c0:	7c33      	ldrb	r3, [r6, #16]
 80a47c2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a47c4:	6025      	str	r5, [r4, #0]
 80a47c6:	e008      	b.n	80a47da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a47c8:	6804      	ldr	r4, [r0, #0]
 80a47ca:	b134      	cbz	r4, 80a47da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a47cc:	4620      	mov	r0, r4
 80a47ce:	f7ff fce2 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a47d2:	2114      	movs	r1, #20
 80a47d4:	4620      	mov	r0, r4
 80a47d6:	f000 fcca 	bl	80a516e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a47da:	2000      	movs	r0, #0
 80a47dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a47e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a47e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a47e2:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a47e4:	f3bf 8f5f 	dmb	sy
 80a47e8:	b087      	sub	sp, #28
 80a47ea:	2300      	movs	r3, #0
 80a47ec:	e850 6f00 	ldrex	r6, [r0]
 80a47f0:	e840 3200 	strex	r2, r3, [r0]
 80a47f4:	2a00      	cmp	r2, #0
 80a47f6:	d1f9      	bne.n	80a47ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a47f8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a47fc:	2e00      	cmp	r6, #0
 80a47fe:	d03f      	beq.n	80a4880 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a4800:	4618      	mov	r0, r3
 80a4802:	f7fe fe3b 	bl	80a347c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a4806:	4607      	mov	r7, r0
 80a4808:	b120      	cbz	r0, 80a4814 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a480a:	4621      	mov	r1, r4
 80a480c:	4630      	mov	r0, r6
 80a480e:	f7ff fe53 	bl	80a44b8 <_ZNKSt8functionIFvRKbEEclES1_>
 80a4812:	e02e      	b.n	80a4872 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4814:	4631      	mov	r1, r6
 80a4816:	a801      	add	r0, sp, #4
 80a4818:	f7ff ffaf 	bl	80a477a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a481c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a481e:	2010      	movs	r0, #16
 80a4820:	f88d 3014 	strb.w	r3, [sp, #20]
 80a4824:	f7fb fc3b 	bl	80a009e <_Znwj>
 80a4828:	4605      	mov	r5, r0
 80a482a:	b1d0      	cbz	r0, 80a4862 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a482c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a482e:	2014      	movs	r0, #20
 80a4830:	f7fb fc35 	bl	80a009e <_Znwj>
 80a4834:	4604      	mov	r4, r0
 80a4836:	b178      	cbz	r0, 80a4858 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4838:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a483a:	4601      	mov	r1, r0
 80a483c:	a801      	add	r0, sp, #4
 80a483e:	f7ff fcb9 	bl	80a41b4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4842:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a4844:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4846:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4848:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a484a:	9203      	str	r2, [sp, #12]
 80a484c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a484e:	60e3      	str	r3, [r4, #12]
 80a4850:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a4854:	9204      	str	r2, [sp, #16]
 80a4856:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a4858:	4b0a      	ldr	r3, [pc, #40]	; (80a4884 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a485a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a485c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a485e:	4b0a      	ldr	r3, [pc, #40]	; (80a4888 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a4860:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4862:	a801      	add	r0, sp, #4
 80a4864:	f7ff fc97 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4868:	2200      	movs	r2, #0
 80a486a:	4629      	mov	r1, r5
 80a486c:	4807      	ldr	r0, [pc, #28]	; (80a488c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a486e:	f7fe fe0d 	bl	80a348c <application_thread_invoke>
 80a4872:	4630      	mov	r0, r6
 80a4874:	f7ff fc8f 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a4878:	2110      	movs	r1, #16
 80a487a:	4630      	mov	r0, r6
 80a487c:	f000 fc77 	bl	80a516e <_ZdlPvj>
        }
    }
 80a4880:	b007      	add	sp, #28
 80a4882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4884:	080a44cb 	.word	0x080a44cb
 80a4888:	080a4799 	.word	0x080a4799
 80a488c:	080a4d05 	.word	0x080a4d05

080a4890 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a4890:	b530      	push	{r4, r5, lr}
 80a4892:	4604      	mov	r4, r0
 80a4894:	b085      	sub	sp, #20
 80a4896:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a4898:	4668      	mov	r0, sp
 80a489a:	4611      	mov	r1, r2
 80a489c:	f7ff fdca 	bl	80a4434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a48a0:	b17c      	cbz	r4, 80a48c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a48a2:	b224      	sxth	r4, r4
 80a48a4:	4628      	mov	r0, r5
 80a48a6:	b10d      	cbz	r5, 80a48ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a48a8:	f001 fe3e 	bl	80a6528 <strdup>
 80a48ac:	9002      	str	r0, [sp, #8]
 80a48ae:	a902      	add	r1, sp, #8
 80a48b0:	4668      	mov	r0, sp
 80a48b2:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a48b6:	f7ff fe1f 	bl	80a44f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a48ba:	a802      	add	r0, sp, #8
 80a48bc:	f7ff fd52 	bl	80a4364 <_ZN8particle5ErrorD1Ev>
 80a48c0:	e01d      	b.n	80a48fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a48c2:	f04f 0201 	mov.w	r2, #1
 80a48c6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a48c8:	f88d 4008 	strb.w	r4, [sp, #8]
 80a48cc:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a48d0:	42a3      	cmp	r3, r4
 80a48d2:	d103      	bne.n	80a48dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a48d4:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a48d8:	2900      	cmp	r1, #0
 80a48da:	d1f7      	bne.n	80a48cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a48dc:	d002      	beq.n	80a48e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a48de:	f88d 3008 	strb.w	r3, [sp, #8]
 80a48e2:	e00c      	b.n	80a48fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a48e4:	f110 010c 	adds.w	r1, r0, #12
 80a48e8:	f04f 0301 	mov.w	r3, #1
 80a48ec:	bf18      	it	ne
 80a48ee:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a48f0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a48f4:	3004      	adds	r0, #4
 80a48f6:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a48fa:	f7ff ff71 	bl	80a47e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a48fe:	a801      	add	r0, sp, #4
 80a4900:	f7fb fe09 	bl	80a0516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a4904:	b005      	add	sp, #20
 80a4906:	bd30      	pop	{r4, r5, pc}

080a4908 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a4908:	4770      	bx	lr

080a490a <_ZN9IPAddressD0Ev>:
 80a490a:	b510      	push	{r4, lr}
 80a490c:	4604      	mov	r4, r0
 80a490e:	2118      	movs	r1, #24
 80a4910:	f000 fc2d 	bl	80a516e <_ZdlPvj>
 80a4914:	4620      	mov	r0, r4
 80a4916:	bd10      	pop	{r4, pc}

080a4918 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a491a:	460f      	mov	r7, r1
 80a491c:	f100 0608 	add.w	r6, r0, #8
 80a4920:	1d05      	adds	r5, r0, #4
 80a4922:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4924:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a4928:	220a      	movs	r2, #10
 80a492a:	4638      	mov	r0, r7
 80a492c:	f7ff fa96 	bl	80a3e5c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4930:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4932:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4934:	d007      	beq.n	80a4946 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a4936:	2c00      	cmp	r4, #0
 80a4938:	d0f4      	beq.n	80a4924 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a493a:	212e      	movs	r1, #46	; 0x2e
 80a493c:	4638      	mov	r0, r7
 80a493e:	f7ff fa4a 	bl	80a3dd6 <_ZN5Print5printEc>
 80a4942:	4404      	add	r4, r0
 80a4944:	e7ee      	b.n	80a4924 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a4946:	4620      	mov	r0, r4
 80a4948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a494c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a494c:	b510      	push	{r4, lr}
 80a494e:	4604      	mov	r4, r0
 80a4950:	4b04      	ldr	r3, [pc, #16]	; (80a4964 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a4952:	2211      	movs	r2, #17
 80a4954:	f840 3b04 	str.w	r3, [r0], #4
 80a4958:	2100      	movs	r1, #0
 80a495a:	f001 fda2 	bl	80a64a2 <memset>
{
    clear();
}
 80a495e:	4620      	mov	r0, r4
 80a4960:	bd10      	pop	{r4, pc}
 80a4962:	bf00      	nop
 80a4964:	080a80a4 	.word	0x080a80a4

080a4968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4968:	4603      	mov	r3, r0
 80a496a:	4a07      	ldr	r2, [pc, #28]	; (80a4988 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a496c:	b510      	push	{r4, lr}
 80a496e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a4972:	f101 0210 	add.w	r2, r1, #16
 80a4976:	f851 4b04 	ldr.w	r4, [r1], #4
 80a497a:	4291      	cmp	r1, r2
 80a497c:	f843 4b04 	str.w	r4, [r3], #4
 80a4980:	d1f9      	bne.n	80a4976 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4982:	780a      	ldrb	r2, [r1, #0]
 80a4984:	701a      	strb	r2, [r3, #0]
}
 80a4986:	bd10      	pop	{r4, pc}
 80a4988:	080a80a4 	.word	0x080a80a4

080a498c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a498c:	4a02      	ldr	r2, [pc, #8]	; (80a4998 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a498e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a4990:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a4992:	2204      	movs	r2, #4
 80a4994:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a4996:	4770      	bx	lr
 80a4998:	080a80a4 	.word	0x080a80a4

080a499c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a499c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a499e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a49a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a49a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a49aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a49ae:	2304      	movs	r3, #4
 80a49b0:	6041      	str	r1, [r0, #4]
 80a49b2:	7503      	strb	r3, [r0, #20]
 80a49b4:	bd10      	pop	{r4, pc}
	...

080a49b8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a49b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a49ba:	4d04      	ldr	r5, [pc, #16]	; (80a49cc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a49bc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a49be:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a49c2:	9500      	str	r5, [sp, #0]
 80a49c4:	f7ff ffea 	bl	80a499c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a49c8:	b003      	add	sp, #12
 80a49ca:	bd30      	pop	{r4, r5, pc}
 80a49cc:	080a80a4 	.word	0x080a80a4

080a49d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a49d0:	7441      	strb	r1, [r0, #17]
 80a49d2:	4770      	bx	lr

080a49d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a49d4:	4770      	bx	lr

080a49d6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a49d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a49d8:	2100      	movs	r1, #0
 80a49da:	7c00      	ldrb	r0, [r0, #16]
 80a49dc:	f7fe fd06 	bl	80a33ec <HAL_USB_USART_Receive_Data>
}
 80a49e0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a49e4:	bf28      	it	cs
 80a49e6:	f04f 30ff 	movcs.w	r0, #4294967295
 80a49ea:	bd08      	pop	{r3, pc}

080a49ec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a49ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a49ee:	2101      	movs	r1, #1
 80a49f0:	7c00      	ldrb	r0, [r0, #16]
 80a49f2:	f7fe fcfb 	bl	80a33ec <HAL_USB_USART_Receive_Data>
}
 80a49f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a49fa:	bf28      	it	cs
 80a49fc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4a00:	bd08      	pop	{r3, pc}

080a4a02 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a4a02:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4a04:	7c00      	ldrb	r0, [r0, #16]
 80a4a06:	f7fe fce9 	bl	80a33dc <HAL_USB_USART_Available_Data_For_Write>
}
 80a4a0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4a0e:	bd08      	pop	{r3, pc}

080a4a10 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a4a10:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4a12:	7c00      	ldrb	r0, [r0, #16]
 80a4a14:	f7fe fcda 	bl	80a33cc <HAL_USB_USART_Available_Data>
}
 80a4a18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4a1c:	bd08      	pop	{r3, pc}

080a4a1e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a4a1e:	7c00      	ldrb	r0, [r0, #16]
 80a4a20:	f7fe bcf4 	b.w	80a340c <HAL_USB_USART_Flush_Data>

080a4a24 <_ZN9USBSerialD0Ev>:
 80a4a24:	b510      	push	{r4, lr}
 80a4a26:	4604      	mov	r4, r0
 80a4a28:	2114      	movs	r1, #20
 80a4a2a:	f000 fba0 	bl	80a516e <_ZdlPvj>
 80a4a2e:	4620      	mov	r0, r4
 80a4a30:	bd10      	pop	{r4, pc}

080a4a32 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a4a32:	b538      	push	{r3, r4, r5, lr}
 80a4a34:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4a36:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a4a38:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4a3a:	f7fe fccf 	bl	80a33dc <HAL_USB_USART_Available_Data_For_Write>
 80a4a3e:	2800      	cmp	r0, #0
 80a4a40:	dc01      	bgt.n	80a4a46 <_ZN9USBSerial5writeEh+0x14>
 80a4a42:	7c60      	ldrb	r0, [r4, #17]
 80a4a44:	b128      	cbz	r0, 80a4a52 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4a46:	4629      	mov	r1, r5
 80a4a48:	7c20      	ldrb	r0, [r4, #16]
 80a4a4a:	f7fe fcd7 	bl	80a33fc <HAL_USB_USART_Send_Data>
 80a4a4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a4a52:	bd38      	pop	{r3, r4, r5, pc}

080a4a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4a54:	b510      	push	{r4, lr}
 80a4a56:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a4a58:	2300      	movs	r3, #0
 80a4a5a:	6063      	str	r3, [r4, #4]
 80a4a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4a60:	60a3      	str	r3, [r4, #8]
 80a4a62:	4b05      	ldr	r3, [pc, #20]	; (80a4a78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a4a64:	4608      	mov	r0, r1
 80a4a66:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a4a68:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a4a6a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a4a6c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a4a6e:	4611      	mov	r1, r2
 80a4a70:	f7fe fc9c 	bl	80a33ac <HAL_USB_USART_Init>
}
 80a4a74:	4620      	mov	r0, r4
 80a4a76:	bd10      	pop	{r4, pc}
 80a4a78:	080a80b8 	.word	0x080a80b8

080a4a7c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4a7c:	2200      	movs	r2, #0
 80a4a7e:	7c00      	ldrb	r0, [r0, #16]
 80a4a80:	f7fe bc9c 	b.w	80a33bc <HAL_USB_USART_Begin>

080a4a84 <_Z19acquireSerialBufferv>:
 80a4a84:	b510      	push	{r4, lr}
 80a4a86:	4604      	mov	r4, r0
 80a4a88:	2214      	movs	r2, #20
 80a4a8a:	2100      	movs	r1, #0
 80a4a8c:	f001 fd09 	bl	80a64a2 <memset>
 80a4a90:	4620      	mov	r0, r4
 80a4a92:	bd10      	pop	{r4, pc}

080a4a94 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a4a94:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4a96:	4d0e      	ldr	r5, [pc, #56]	; (80a4ad0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a4a98:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4a9a:	a801      	add	r0, sp, #4
 80a4a9c:	f7ff fff2 	bl	80a4a84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4aa0:	6829      	ldr	r1, [r5, #0]
 80a4aa2:	f011 0401 	ands.w	r4, r1, #1
 80a4aa6:	d110      	bne.n	80a4aca <_Z16_fetch_usbserialv+0x36>
 80a4aa8:	4628      	mov	r0, r5
 80a4aaa:	f7fb fafc 	bl	80a00a6 <__cxa_guard_acquire>
 80a4aae:	b160      	cbz	r0, 80a4aca <_Z16_fetch_usbserialv+0x36>
 80a4ab0:	aa01      	add	r2, sp, #4
 80a4ab2:	4621      	mov	r1, r4
 80a4ab4:	4807      	ldr	r0, [pc, #28]	; (80a4ad4 <_Z16_fetch_usbserialv+0x40>)
 80a4ab6:	f7ff ffcd 	bl	80a4a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4aba:	4628      	mov	r0, r5
 80a4abc:	f7fb faf8 	bl	80a00b0 <__cxa_guard_release>
 80a4ac0:	4a05      	ldr	r2, [pc, #20]	; (80a4ad8 <_Z16_fetch_usbserialv+0x44>)
 80a4ac2:	4906      	ldr	r1, [pc, #24]	; (80a4adc <_Z16_fetch_usbserialv+0x48>)
 80a4ac4:	4803      	ldr	r0, [pc, #12]	; (80a4ad4 <_Z16_fetch_usbserialv+0x40>)
 80a4ac6:	f000 fb4d 	bl	80a5164 <__aeabi_atexit>
	return _usbserial;
}
 80a4aca:	4802      	ldr	r0, [pc, #8]	; (80a4ad4 <_Z16_fetch_usbserialv+0x40>)
 80a4acc:	b007      	add	sp, #28
 80a4ace:	bd30      	pop	{r4, r5, pc}
 80a4ad0:	2000057c 	.word	0x2000057c
 80a4ad4:	20000584 	.word	0x20000584
 80a4ad8:	20000124 	.word	0x20000124
 80a4adc:	080a49d5 	.word	0x080a49d5

080a4ae0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a4ae0:	b510      	push	{r4, lr}
 80a4ae2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4ae4:	2214      	movs	r2, #20
 80a4ae6:	2100      	movs	r1, #0
 80a4ae8:	f001 fcdb 	bl	80a64a2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4aec:	4620      	mov	r0, r4
 80a4aee:	bd10      	pop	{r4, pc}

080a4af0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a4af0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4af2:	4c0e      	ldr	r4, [pc, #56]	; (80a4b2c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a4af4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4af6:	a801      	add	r0, sp, #4
 80a4af8:	f7ff fff2 	bl	80a4ae0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4afc:	6823      	ldr	r3, [r4, #0]
 80a4afe:	07db      	lsls	r3, r3, #31
 80a4b00:	d410      	bmi.n	80a4b24 <_Z17_fetch_usbserial1v+0x34>
 80a4b02:	4620      	mov	r0, r4
 80a4b04:	f7fb facf 	bl	80a00a6 <__cxa_guard_acquire>
 80a4b08:	b160      	cbz	r0, 80a4b24 <_Z17_fetch_usbserial1v+0x34>
 80a4b0a:	aa01      	add	r2, sp, #4
 80a4b0c:	2101      	movs	r1, #1
 80a4b0e:	4808      	ldr	r0, [pc, #32]	; (80a4b30 <_Z17_fetch_usbserial1v+0x40>)
 80a4b10:	f7ff ffa0 	bl	80a4a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4b14:	4620      	mov	r0, r4
 80a4b16:	f7fb facb 	bl	80a00b0 <__cxa_guard_release>
 80a4b1a:	4a06      	ldr	r2, [pc, #24]	; (80a4b34 <_Z17_fetch_usbserial1v+0x44>)
 80a4b1c:	4906      	ldr	r1, [pc, #24]	; (80a4b38 <_Z17_fetch_usbserial1v+0x48>)
 80a4b1e:	4804      	ldr	r0, [pc, #16]	; (80a4b30 <_Z17_fetch_usbserial1v+0x40>)
 80a4b20:	f000 fb20 	bl	80a5164 <__aeabi_atexit>
  return _usbserial1;
}
 80a4b24:	4802      	ldr	r0, [pc, #8]	; (80a4b30 <_Z17_fetch_usbserial1v+0x40>)
 80a4b26:	b006      	add	sp, #24
 80a4b28:	bd10      	pop	{r4, pc}
 80a4b2a:	bf00      	nop
 80a4b2c:	20000580 	.word	0x20000580
 80a4b30:	20000598 	.word	0x20000598
 80a4b34:	20000124 	.word	0x20000124
 80a4b38:	080a49d5 	.word	0x080a49d5

080a4b3c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a4b3c:	4700      	bx	r0
	...

080a4b40 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a4b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4b42:	461c      	mov	r4, r3
 80a4b44:	b085      	sub	sp, #20
 80a4b46:	460e      	mov	r6, r1
 80a4b48:	4617      	mov	r7, r2
 80a4b4a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 80a4b4c:	f7fe fadc 	bl	80a3108 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a4b50:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a4b52:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a4b54:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a4b58:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a4b5a:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a4b5e:	bfb4      	ite	lt
 80a4b60:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a4b62:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a4b66:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a4b68:	bfa4      	itt	ge
 80a4b6a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a4b6e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a4b70:	9300      	str	r3, [sp, #0]
 80a4b72:	4906      	ldr	r1, [pc, #24]	; (80a4b8c <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 80a4b74:	463b      	mov	r3, r7
 80a4b76:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a4b78:	bfa8      	it	ge
 80a4b7a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a4b7e:	f7fe fabb 	bl	80a30f8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a4b82:	fab0 f080 	clz	r0, r0
 80a4b86:	0940      	lsrs	r0, r0, #5
 80a4b88:	b005      	add	sp, #20
 80a4b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4b8c:	080a4b3d 	.word	0x080a4b3d

080a4b90 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 80a4b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4b92:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 80a4b94:	f7fe fab8 	bl	80a3108 <HAL_Interrupts_Detach>
 80a4b98:	4607      	mov	r7, r0
 80a4b9a:	b968      	cbnz	r0, 80a4bb8 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 80a4b9c:	4d08      	ldr	r5, [pc, #32]	; (80a4bc0 <_Z15detachInterruptt+0x30>)
 80a4b9e:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80a4ba2:	b15c      	cbz	r4, 80a4bbc <_Z15detachInterruptt+0x2c>
 80a4ba4:	4620      	mov	r0, r4
 80a4ba6:	f7ff faf6 	bl	80a4196 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 80a4baa:	2110      	movs	r1, #16
 80a4bac:	4620      	mov	r0, r4
 80a4bae:	f000 fade 	bl	80a516e <_ZdlPvj>
        handlers[pin] = nullptr;
 80a4bb2:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 80a4bb6:	e001      	b.n	80a4bbc <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 80a4bb8:	2000      	movs	r0, #0
 80a4bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 80a4bbc:	2001      	movs	r0, #1
}
 80a4bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4bc0:	200005ac 	.word	0x200005ac

080a4bc4 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a4bc4:	f7fe bab0 	b.w	80a3128 <HAL_Interrupts_Disable_All>

080a4bc8 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a4bc8:	f7fe baa6 	b.w	80a3118 <HAL_Interrupts_Enable_All>

080a4bcc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a4bcc:	4770      	bx	lr

080a4bce <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4bce:	7441      	strb	r1, [r0, #17]
 80a4bd0:	4770      	bx	lr

080a4bd2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a4bd2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a4bd4:	7c00      	ldrb	r0, [r0, #16]
 80a4bd6:	f7fe fb67 	bl	80a32a8 <HAL_USART_Available_Data_For_Write>
}
 80a4bda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4bde:	bd08      	pop	{r3, pc}

080a4be0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4be0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a4be2:	7c00      	ldrb	r0, [r0, #16]
 80a4be4:	f7fe fb38 	bl	80a3258 <HAL_USART_Available_Data>
}
 80a4be8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4bec:	bd08      	pop	{r3, pc}

080a4bee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4bee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a4bf0:	7c00      	ldrb	r0, [r0, #16]
 80a4bf2:	f7fe fb41 	bl	80a3278 <HAL_USART_Peek_Data>
}
 80a4bf6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4bfa:	bf28      	it	cs
 80a4bfc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4c00:	bd08      	pop	{r3, pc}

080a4c02 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4c02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a4c04:	7c00      	ldrb	r0, [r0, #16]
 80a4c06:	f7fe fb2f 	bl	80a3268 <HAL_USART_Read_Data>
}
 80a4c0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4c0e:	bf28      	it	cs
 80a4c10:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4c14:	bd08      	pop	{r3, pc}

080a4c16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a4c16:	7c00      	ldrb	r0, [r0, #16]
 80a4c18:	f7fe bb36 	b.w	80a3288 <HAL_USART_Flush_Data>

080a4c1c <_ZN11USARTSerialD0Ev>:
 80a4c1c:	b510      	push	{r4, lr}
 80a4c1e:	4604      	mov	r4, r0
 80a4c20:	2114      	movs	r1, #20
 80a4c22:	f000 faa4 	bl	80a516e <_ZdlPvj>
 80a4c26:	4620      	mov	r0, r4
 80a4c28:	bd10      	pop	{r4, pc}

080a4c2a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4c2a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4c2c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a4c2e:	4604      	mov	r4, r0
 80a4c30:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4c32:	b925      	cbnz	r5, 80a4c3e <_ZN11USARTSerial5writeEh+0x14>
 80a4c34:	7c00      	ldrb	r0, [r0, #16]
 80a4c36:	f7fe fb37 	bl	80a32a8 <HAL_USART_Available_Data_For_Write>
 80a4c3a:	2800      	cmp	r0, #0
 80a4c3c:	dd05      	ble.n	80a4c4a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a4c3e:	4631      	mov	r1, r6
 80a4c40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a4c46:	f7fe baff 	b.w	80a3248 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a4c4a:	4628      	mov	r0, r5
 80a4c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a4c50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a4c50:	b510      	push	{r4, lr}
 80a4c52:	4604      	mov	r4, r0
 80a4c54:	4608      	mov	r0, r1
 80a4c56:	4611      	mov	r1, r2
 80a4c58:	2200      	movs	r2, #0
 80a4c5a:	6062      	str	r2, [r4, #4]
 80a4c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4c60:	60a2      	str	r2, [r4, #8]
 80a4c62:	4a05      	ldr	r2, [pc, #20]	; (80a4c78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a4c64:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a4c66:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a4c68:	2201      	movs	r2, #1
 80a4c6a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a4c6c:	461a      	mov	r2, r3
 80a4c6e:	f7fe fae3 	bl	80a3238 <HAL_USART_Init>
}
 80a4c72:	4620      	mov	r0, r4
 80a4c74:	bd10      	pop	{r4, pc}
 80a4c76:	bf00      	nop
 80a4c78:	080a80e8 	.word	0x080a80e8

080a4c7c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a4c7c:	7c00      	ldrb	r0, [r0, #16]
 80a4c7e:	f7fe bb0b 	b.w	80a3298 <HAL_USART_Is_Enabled>
	...

080a4c84 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a4c86:	4c19      	ldr	r4, [pc, #100]	; (80a4cec <_Z22__fetch_global_Serial1v+0x68>)
 80a4c88:	6825      	ldr	r5, [r4, #0]
 80a4c8a:	b94d      	cbnz	r5, 80a4ca0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a4c8c:	2084      	movs	r0, #132	; 0x84
 80a4c8e:	f7fb fa06 	bl	80a009e <_Znwj>
 80a4c92:	4606      	mov	r6, r0
 80a4c94:	b118      	cbz	r0, 80a4c9e <_Z22__fetch_global_Serial1v+0x1a>
 80a4c96:	2284      	movs	r2, #132	; 0x84
 80a4c98:	4629      	mov	r1, r5
 80a4c9a:	f001 fc02 	bl	80a64a2 <memset>
 80a4c9e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a4ca0:	4d13      	ldr	r5, [pc, #76]	; (80a4cf0 <_Z22__fetch_global_Serial1v+0x6c>)
 80a4ca2:	682e      	ldr	r6, [r5, #0]
 80a4ca4:	b94e      	cbnz	r6, 80a4cba <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a4ca6:	2084      	movs	r0, #132	; 0x84
 80a4ca8:	f7fb f9f9 	bl	80a009e <_Znwj>
 80a4cac:	4607      	mov	r7, r0
 80a4cae:	b118      	cbz	r0, 80a4cb8 <_Z22__fetch_global_Serial1v+0x34>
 80a4cb0:	2284      	movs	r2, #132	; 0x84
 80a4cb2:	4631      	mov	r1, r6
 80a4cb4:	f001 fbf5 	bl	80a64a2 <memset>
 80a4cb8:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a4cba:	4f0e      	ldr	r7, [pc, #56]	; (80a4cf4 <_Z22__fetch_global_Serial1v+0x70>)
 80a4cbc:	6839      	ldr	r1, [r7, #0]
 80a4cbe:	f011 0601 	ands.w	r6, r1, #1
 80a4cc2:	d111      	bne.n	80a4ce8 <_Z22__fetch_global_Serial1v+0x64>
 80a4cc4:	4638      	mov	r0, r7
 80a4cc6:	f7fb f9ee 	bl	80a00a6 <__cxa_guard_acquire>
 80a4cca:	b168      	cbz	r0, 80a4ce8 <_Z22__fetch_global_Serial1v+0x64>
 80a4ccc:	6822      	ldr	r2, [r4, #0]
 80a4cce:	4631      	mov	r1, r6
 80a4cd0:	682b      	ldr	r3, [r5, #0]
 80a4cd2:	4809      	ldr	r0, [pc, #36]	; (80a4cf8 <_Z22__fetch_global_Serial1v+0x74>)
 80a4cd4:	f7ff ffbc 	bl	80a4c50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a4cd8:	4638      	mov	r0, r7
 80a4cda:	f7fb f9e9 	bl	80a00b0 <__cxa_guard_release>
 80a4cde:	4a07      	ldr	r2, [pc, #28]	; (80a4cfc <_Z22__fetch_global_Serial1v+0x78>)
 80a4ce0:	4907      	ldr	r1, [pc, #28]	; (80a4d00 <_Z22__fetch_global_Serial1v+0x7c>)
 80a4ce2:	4805      	ldr	r0, [pc, #20]	; (80a4cf8 <_Z22__fetch_global_Serial1v+0x74>)
 80a4ce4:	f000 fa3e 	bl	80a5164 <__aeabi_atexit>
#endif
	return serial1;
}
 80a4ce8:	4803      	ldr	r0, [pc, #12]	; (80a4cf8 <_Z22__fetch_global_Serial1v+0x74>)
 80a4cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4cec:	20000628 	.word	0x20000628
 80a4cf0:	20000620 	.word	0x20000620
 80a4cf4:	20000624 	.word	0x20000624
 80a4cf8:	2000060c 	.word	0x2000060c
 80a4cfc:	20000124 	.word	0x20000124
 80a4d00:	080a4bcd 	.word	0x080a4bcd

080a4d04 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a4d04:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4d06:	6883      	ldr	r3, [r0, #8]
 80a4d08:	4604      	mov	r4, r0
 80a4d0a:	b90b      	cbnz	r3, 80a4d10 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a4d0c:	f000 fa31 	bl	80a5172 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4d10:	68c3      	ldr	r3, [r0, #12]
 80a4d12:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a4d14:	68a3      	ldr	r3, [r4, #8]
 80a4d16:	b11b      	cbz	r3, 80a4d20 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4d18:	2203      	movs	r2, #3
 80a4d1a:	4621      	mov	r1, r4
 80a4d1c:	4620      	mov	r0, r4
 80a4d1e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a4d20:	4620      	mov	r0, r4
}
 80a4d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a4d26:	2110      	movs	r1, #16
 80a4d28:	f000 ba21 	b.w	80a516e <_ZdlPvj>

080a4d2c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a4d2c:	4770      	bx	lr

080a4d2e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4d30:	4606      	mov	r6, r0
 80a4d32:	4615      	mov	r5, r2
 80a4d34:	460c      	mov	r4, r1
 80a4d36:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4d38:	42bc      	cmp	r4, r7
 80a4d3a:	d006      	beq.n	80a4d4a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4d3c:	6833      	ldr	r3, [r6, #0]
 80a4d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4d42:	689b      	ldr	r3, [r3, #8]
 80a4d44:	4630      	mov	r0, r6
 80a4d46:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4d48:	e7f6      	b.n	80a4d38 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a4d4a:	4628      	mov	r0, r5
 80a4d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4d4e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a4d4e:	2200      	movs	r2, #0
 80a4d50:	7c00      	ldrb	r0, [r0, #16]
 80a4d52:	f7fe bab1 	b.w	80a32b8 <HAL_I2C_Write_Data>

080a4d56 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a4d56:	2100      	movs	r1, #0
 80a4d58:	7c00      	ldrb	r0, [r0, #16]
 80a4d5a:	f7fe bab5 	b.w	80a32c8 <HAL_I2C_Available_Data>

080a4d5e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a4d5e:	2100      	movs	r1, #0
 80a4d60:	7c00      	ldrb	r0, [r0, #16]
 80a4d62:	f7fe bab9 	b.w	80a32d8 <HAL_I2C_Read_Data>

080a4d66 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a4d66:	2100      	movs	r1, #0
 80a4d68:	7c00      	ldrb	r0, [r0, #16]
 80a4d6a:	f7fe babd 	b.w	80a32e8 <HAL_I2C_Peek_Data>

080a4d6e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a4d6e:	2100      	movs	r1, #0
 80a4d70:	7c00      	ldrb	r0, [r0, #16]
 80a4d72:	f7fe bac1 	b.w	80a32f8 <HAL_I2C_Flush_Data>

080a4d76 <_ZN7TwoWireD0Ev>:
 80a4d76:	b510      	push	{r4, lr}
 80a4d78:	4604      	mov	r4, r0
 80a4d7a:	2114      	movs	r1, #20
 80a4d7c:	f000 f9f7 	bl	80a516e <_ZdlPvj>
 80a4d80:	4620      	mov	r0, r4
 80a4d82:	bd10      	pop	{r4, pc}

080a4d84 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a4d84:	b510      	push	{r4, lr}
 80a4d86:	4604      	mov	r4, r0
 80a4d88:	4608      	mov	r0, r1
 80a4d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4d8e:	60a3      	str	r3, [r4, #8]
 80a4d90:	4b04      	ldr	r3, [pc, #16]	; (80a4da4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a4d92:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a4d94:	7420      	strb	r0, [r4, #16]
 80a4d96:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a4d98:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a4d9a:	f7fe fabd 	bl	80a3318 <HAL_I2C_Init>

}
 80a4d9e:	4620      	mov	r0, r4
 80a4da0:	bd10      	pop	{r4, pc}
 80a4da2:	bf00      	nop
 80a4da4:	080a8118 	.word	0x080a8118

080a4da8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a4da8:	2100      	movs	r1, #0
 80a4daa:	7c00      	ldrb	r0, [r0, #16]
 80a4dac:	f7fe baac 	b.w	80a3308 <HAL_I2C_Is_Enabled>

080a4db0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a4db0:	2200      	movs	r2, #0
 80a4db2:	4611      	mov	r1, r2
 80a4db4:	6840      	ldr	r0, [r0, #4]
 80a4db6:	f7fe bbaf 	b.w	80a3518 <network_ready>

080a4dba <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4dbc:	4616      	mov	r6, r2
 80a4dbe:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a4dc0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4dc2:	460f      	mov	r7, r1
 80a4dc4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a4dc6:	2100      	movs	r1, #0
 80a4dc8:	a803      	add	r0, sp, #12
 80a4dca:	f001 fb6a 	bl	80a64a2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4dce:	4630      	mov	r0, r6
 80a4dd0:	f001 fbc5 	bl	80a655e <strlen>
 80a4dd4:	2500      	movs	r5, #0
 80a4dd6:	9500      	str	r5, [sp, #0]
 80a4dd8:	b281      	uxth	r1, r0
 80a4dda:	687b      	ldr	r3, [r7, #4]
 80a4ddc:	aa03      	add	r2, sp, #12
 80a4dde:	4630      	mov	r0, r6
 80a4de0:	f7fe fb24 	bl	80a342c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4de4:	b120      	cbz	r0, 80a4df0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a4de6:	4629      	mov	r1, r5
 80a4de8:	4620      	mov	r0, r4
 80a4dea:	f7ff fdcf 	bl	80a498c <_ZN9IPAddressC1Em>
 80a4dee:	e003      	b.n	80a4df8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a4df0:	a903      	add	r1, sp, #12
 80a4df2:	4620      	mov	r0, r4
 80a4df4:	f7ff fdb8 	bl	80a4968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a4df8:	4620      	mov	r0, r4
 80a4dfa:	b009      	add	sp, #36	; 0x24
 80a4dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4dfe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a4dfe:	2200      	movs	r2, #0
 80a4e00:	4611      	mov	r1, r2
 80a4e02:	6840      	ldr	r0, [r0, #4]
 80a4e04:	f7fe bba8 	b.w	80a3558 <network_listening>

080a4e08 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a4e08:	2200      	movs	r2, #0
 80a4e0a:	4611      	mov	r1, r2
 80a4e0c:	6840      	ldr	r0, [r0, #4]
 80a4e0e:	f7fe bbb3 	b.w	80a3578 <network_get_listen_timeout>

080a4e12 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a4e12:	2200      	movs	r2, #0
 80a4e14:	6840      	ldr	r0, [r0, #4]
 80a4e16:	f7fe bba7 	b.w	80a3568 <network_set_listen_timeout>

080a4e1a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a4e1a:	2200      	movs	r2, #0
 80a4e1c:	f081 0101 	eor.w	r1, r1, #1
 80a4e20:	6840      	ldr	r0, [r0, #4]
 80a4e22:	f7fe bb91 	b.w	80a3548 <network_listen>

080a4e26 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a4e26:	2300      	movs	r3, #0
 80a4e28:	461a      	mov	r2, r3
 80a4e2a:	4619      	mov	r1, r3
 80a4e2c:	6840      	ldr	r0, [r0, #4]
 80a4e2e:	f7fe bb83 	b.w	80a3538 <network_off>

080a4e32 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a4e32:	2200      	movs	r2, #0
 80a4e34:	4611      	mov	r1, r2
 80a4e36:	6840      	ldr	r0, [r0, #4]
 80a4e38:	f7fe bb5e 	b.w	80a34f8 <network_connecting>

080a4e3c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a4e3c:	2200      	movs	r2, #0
 80a4e3e:	2102      	movs	r1, #2
 80a4e40:	6840      	ldr	r0, [r0, #4]
 80a4e42:	f7fe bb61 	b.w	80a3508 <network_disconnect>

080a4e46 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a4e46:	2300      	movs	r3, #0
 80a4e48:	461a      	mov	r2, r3
 80a4e4a:	6840      	ldr	r0, [r0, #4]
 80a4e4c:	f7fe bb4c 	b.w	80a34e8 <network_connect>

080a4e50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a4e50:	4b02      	ldr	r3, [pc, #8]	; (80a4e5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a4e52:	2204      	movs	r2, #4
 80a4e54:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a4e56:	4a02      	ldr	r2, [pc, #8]	; (80a4e60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a4e58:	601a      	str	r2, [r3, #0]
 80a4e5a:	4770      	bx	lr
 80a4e5c:	2000062c 	.word	0x2000062c
 80a4e60:	080a8140 	.word	0x080a8140

080a4e64 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4e64:	2300      	movs	r3, #0
 80a4e66:	461a      	mov	r2, r3
 80a4e68:	6840      	ldr	r0, [r0, #4]
 80a4e6a:	f7fe bb3d 	b.w	80a34e8 <network_connect>

080a4e6e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a4e6e:	2200      	movs	r2, #0
 80a4e70:	2102      	movs	r1, #2
 80a4e72:	6840      	ldr	r0, [r0, #4]
 80a4e74:	f7fe bb48 	b.w	80a3508 <network_disconnect>

080a4e78 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a4e78:	2200      	movs	r2, #0
 80a4e7a:	4611      	mov	r1, r2
 80a4e7c:	6840      	ldr	r0, [r0, #4]
 80a4e7e:	f7fe bb3b 	b.w	80a34f8 <network_connecting>

080a4e82 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a4e82:	2200      	movs	r2, #0
 80a4e84:	4611      	mov	r1, r2
 80a4e86:	6840      	ldr	r0, [r0, #4]
 80a4e88:	f7fe bb46 	b.w	80a3518 <network_ready>

080a4e8c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4e8c:	2300      	movs	r3, #0
 80a4e8e:	461a      	mov	r2, r3
 80a4e90:	4619      	mov	r1, r3
 80a4e92:	6840      	ldr	r0, [r0, #4]
 80a4e94:	f7fe bb48 	b.w	80a3528 <network_on>

080a4e98 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4e98:	2300      	movs	r3, #0
 80a4e9a:	461a      	mov	r2, r3
 80a4e9c:	4619      	mov	r1, r3
 80a4e9e:	6840      	ldr	r0, [r0, #4]
 80a4ea0:	f7fe bb4a 	b.w	80a3538 <network_off>

080a4ea4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4ea4:	2200      	movs	r2, #0
 80a4ea6:	f081 0101 	eor.w	r1, r1, #1
 80a4eaa:	6840      	ldr	r0, [r0, #4]
 80a4eac:	f7fe bb4c 	b.w	80a3548 <network_listen>

080a4eb0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a4eb0:	2200      	movs	r2, #0
 80a4eb2:	6840      	ldr	r0, [r0, #4]
 80a4eb4:	f7fe bb58 	b.w	80a3568 <network_set_listen_timeout>

080a4eb8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a4eb8:	2200      	movs	r2, #0
 80a4eba:	4611      	mov	r1, r2
 80a4ebc:	6840      	ldr	r0, [r0, #4]
 80a4ebe:	f7fe bb5b 	b.w	80a3578 <network_get_listen_timeout>

080a4ec2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a4ec2:	2200      	movs	r2, #0
 80a4ec4:	4611      	mov	r1, r2
 80a4ec6:	6840      	ldr	r0, [r0, #4]
 80a4ec8:	f7fe bb46 	b.w	80a3558 <network_listening>

080a4ecc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a4ecc:	b570      	push	{r4, r5, r6, lr}
 80a4ece:	4616      	mov	r6, r2
 80a4ed0:	b08e      	sub	sp, #56	; 0x38
 80a4ed2:	4604      	mov	r4, r0
    IPAddress addr;
 80a4ed4:	a808      	add	r0, sp, #32
 80a4ed6:	f7ff fd39 	bl	80a494c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a4eda:	2211      	movs	r2, #17
 80a4edc:	2100      	movs	r1, #0
 80a4ede:	a803      	add	r0, sp, #12
 80a4ee0:	f001 fadf 	bl	80a64a2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4ee4:	4630      	mov	r0, r6
 80a4ee6:	f001 fb3a 	bl	80a655e <strlen>
 80a4eea:	2500      	movs	r5, #0
 80a4eec:	4b0a      	ldr	r3, [pc, #40]	; (80a4f18 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a4eee:	9500      	str	r5, [sp, #0]
 80a4ef0:	b281      	uxth	r1, r0
 80a4ef2:	685b      	ldr	r3, [r3, #4]
 80a4ef4:	aa03      	add	r2, sp, #12
 80a4ef6:	4630      	mov	r0, r6
 80a4ef8:	f7fe fa98 	bl	80a342c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4efc:	b120      	cbz	r0, 80a4f08 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a4efe:	4629      	mov	r1, r5
 80a4f00:	4620      	mov	r0, r4
 80a4f02:	f7ff fd43 	bl	80a498c <_ZN9IPAddressC1Em>
 80a4f06:	e003      	b.n	80a4f10 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a4f08:	a903      	add	r1, sp, #12
 80a4f0a:	4620      	mov	r0, r4
 80a4f0c:	f7ff fd2c 	bl	80a4968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a4f10:	4620      	mov	r0, r4
 80a4f12:	b00e      	add	sp, #56	; 0x38
 80a4f14:	bd70      	pop	{r4, r5, r6, pc}
 80a4f16:	bf00      	nop
 80a4f18:	2000062c 	.word	0x2000062c

080a4f1c <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a4f1c:	4b03      	ldr	r3, [pc, #12]	; (80a4f2c <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a4f1e:	4a04      	ldr	r2, [pc, #16]	; (80a4f30 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a4f20:	2804      	cmp	r0, #4
 80a4f22:	bf0c      	ite	eq
 80a4f24:	4610      	moveq	r0, r2
 80a4f26:	4618      	movne	r0, r3
 80a4f28:	4770      	bx	lr
 80a4f2a:	bf00      	nop
 80a4f2c:	20000634 	.word	0x20000634
 80a4f30:	2000062c 	.word	0x2000062c

080a4f34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a4f34:	4b02      	ldr	r3, [pc, #8]	; (80a4f40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a4f36:	4a03      	ldr	r2, [pc, #12]	; (80a4f44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a4f38:	601a      	str	r2, [r3, #0]
 80a4f3a:	2200      	movs	r2, #0
 80a4f3c:	605a      	str	r2, [r3, #4]
 80a4f3e:	4770      	bx	lr
 80a4f40:	20000634 	.word	0x20000634
 80a4f44:	080a8174 	.word	0x080a8174

080a4f48 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a4f48:	b510      	push	{r4, lr}
 80a4f4a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a4f4c:	480f      	ldr	r0, [pc, #60]	; (80a4f8c <pinAvailable+0x44>)
 80a4f4e:	f7fe fbbf 	bl	80a36d0 <_ZN8SPIClass9isEnabledEv>
 80a4f52:	b128      	cbz	r0, 80a4f60 <pinAvailable+0x18>
 80a4f54:	f1a4 030d 	sub.w	r3, r4, #13
 80a4f58:	2b02      	cmp	r3, #2
 80a4f5a:	d801      	bhi.n	80a4f60 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a4f5c:	2000      	movs	r0, #0
 80a4f5e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a4f60:	f000 f8e0 	bl	80a5124 <_Z19__fetch_global_Wirev>
 80a4f64:	f7ff ff20 	bl	80a4da8 <_ZN7TwoWire9isEnabledEv>
 80a4f68:	b108      	cbz	r0, 80a4f6e <pinAvailable+0x26>
 80a4f6a:	2c01      	cmp	r4, #1
 80a4f6c:	d9f6      	bls.n	80a4f5c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a4f6e:	f7ff fe89 	bl	80a4c84 <_Z22__fetch_global_Serial1v>
 80a4f72:	f7ff fe83 	bl	80a4c7c <_ZN11USARTSerial9isEnabledEv>
 80a4f76:	b118      	cbz	r0, 80a4f80 <pinAvailable+0x38>
 80a4f78:	f1a4 0312 	sub.w	r3, r4, #18
 80a4f7c:	2b01      	cmp	r3, #1
 80a4f7e:	d9ed      	bls.n	80a4f5c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a4f80:	2c17      	cmp	r4, #23
 80a4f82:	bf8c      	ite	hi
 80a4f84:	2000      	movhi	r0, #0
 80a4f86:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4f88:	bd10      	pop	{r4, pc}
 80a4f8a:	bf00      	nop
 80a4f8c:	2000063c 	.word	0x2000063c

080a4f90 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4f90:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a4f92:	b538      	push	{r3, r4, r5, lr}
 80a4f94:	4604      	mov	r4, r0
 80a4f96:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4f98:	d80a      	bhi.n	80a4fb0 <pinMode+0x20>
 80a4f9a:	29ff      	cmp	r1, #255	; 0xff
 80a4f9c:	d008      	beq.n	80a4fb0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a4f9e:	f7ff ffd3 	bl	80a4f48 <pinAvailable>
 80a4fa2:	b128      	cbz	r0, 80a4fb0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4fa4:	4629      	mov	r1, r5
 80a4fa6:	4620      	mov	r0, r4
}
 80a4fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4fac:	f7fe b884 	b.w	80a30b8 <HAL_Pin_Mode>
 80a4fb0:	bd38      	pop	{r3, r4, r5, pc}

080a4fb2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a4fb2:	b538      	push	{r3, r4, r5, lr}
 80a4fb4:	4604      	mov	r4, r0
 80a4fb6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4fb8:	f7fe f886 	bl	80a30c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a4fbc:	28ff      	cmp	r0, #255	; 0xff
 80a4fbe:	d010      	beq.n	80a4fe2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a4fc0:	2806      	cmp	r0, #6
 80a4fc2:	d804      	bhi.n	80a4fce <digitalWrite+0x1c>
 80a4fc4:	234d      	movs	r3, #77	; 0x4d
 80a4fc6:	fa23 f000 	lsr.w	r0, r3, r0
 80a4fca:	07c3      	lsls	r3, r0, #31
 80a4fcc:	d409      	bmi.n	80a4fe2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a4fce:	4620      	mov	r0, r4
 80a4fd0:	f7ff ffba 	bl	80a4f48 <pinAvailable>
 80a4fd4:	b128      	cbz	r0, 80a4fe2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4fd6:	4629      	mov	r1, r5
 80a4fd8:	4620      	mov	r0, r4
}
 80a4fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4fde:	f7fe b87b 	b.w	80a30d8 <HAL_GPIO_Write>
 80a4fe2:	bd38      	pop	{r3, r4, r5, pc}

080a4fe4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a4fe4:	b510      	push	{r4, lr}
 80a4fe6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4fe8:	f7fe f86e 	bl	80a30c8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a4fec:	3804      	subs	r0, #4
 80a4fee:	b2c0      	uxtb	r0, r0
 80a4ff0:	2801      	cmp	r0, #1
 80a4ff2:	d908      	bls.n	80a5006 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a4ff4:	4620      	mov	r0, r4
 80a4ff6:	f7ff ffa7 	bl	80a4f48 <pinAvailable>
 80a4ffa:	b120      	cbz	r0, 80a5006 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a4ffc:	4620      	mov	r0, r4
}
 80a4ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a5002:	f7fe b871 	b.w	80a30e8 <HAL_GPIO_Read>
}
 80a5006:	2000      	movs	r0, #0
 80a5008:	bd10      	pop	{r4, pc}

080a500a <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a500a:	b510      	push	{r4, lr}
 80a500c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a500e:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a5010:	bf9c      	itt	ls
 80a5012:	340a      	addls	r4, #10
 80a5014:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a5016:	4620      	mov	r0, r4
 80a5018:	f7ff ff96 	bl	80a4f48 <pinAvailable>
 80a501c:	b150      	cbz	r0, 80a5034 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a501e:	2103      	movs	r1, #3
 80a5020:	4620      	mov	r0, r4
 80a5022:	f7fe f841 	bl	80a30a8 <HAL_Validate_Pin_Function>
 80a5026:	2803      	cmp	r0, #3
 80a5028:	d104      	bne.n	80a5034 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a502a:	4620      	mov	r0, r4
}
 80a502c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a5030:	f7fe b88a 	b.w	80a3148 <HAL_ADC_Read>
}
 80a5034:	2000      	movs	r0, #0
 80a5036:	bd10      	pop	{r4, pc}

080a5038 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a5038:	b538      	push	{r3, r4, r5, lr}
 80a503a:	4604      	mov	r4, r0
 80a503c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a503e:	f7ff ff83 	bl	80a4f48 <pinAvailable>
 80a5042:	b1f0      	cbz	r0, 80a5082 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a5044:	2104      	movs	r1, #4
 80a5046:	4620      	mov	r0, r4
 80a5048:	f7fe f82e 	bl	80a30a8 <HAL_Validate_Pin_Function>
 80a504c:	2804      	cmp	r0, #4
 80a504e:	d105      	bne.n	80a505c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a5050:	b2a9      	uxth	r1, r5
 80a5052:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a5054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a5058:	f7fe b86e 	b.w	80a3138 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a505c:	2102      	movs	r1, #2
 80a505e:	4620      	mov	r0, r4
 80a5060:	f7fe f822 	bl	80a30a8 <HAL_Validate_Pin_Function>
 80a5064:	2802      	cmp	r0, #2
 80a5066:	d10c      	bne.n	80a5082 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5068:	4620      	mov	r0, r4
 80a506a:	f7fe f82d 	bl	80a30c8 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a506e:	2801      	cmp	r0, #1
 80a5070:	d001      	beq.n	80a5076 <_Z11analogWritetm+0x3e>
 80a5072:	2804      	cmp	r0, #4
 80a5074:	d105      	bne.n	80a5082 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a5076:	4629      	mov	r1, r5
 80a5078:	4620      	mov	r0, r4
    }
}
 80a507a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a507e:	f7fe b873 	b.w	80a3168 <HAL_PWM_Write_Ext>
 80a5082:	bd38      	pop	{r3, r4, r5, pc}

080a5084 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a5084:	f7fe b868 	b.w	80a3158 <HAL_Pulse_In>

080a5088 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a5088:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a508a:	4c0c      	ldr	r4, [pc, #48]	; (80a50bc <_GLOBAL__sub_I_SPI+0x34>)
 80a508c:	4e0c      	ldr	r6, [pc, #48]	; (80a50c0 <_GLOBAL__sub_I_SPI+0x38>)
 80a508e:	4d0d      	ldr	r5, [pc, #52]	; (80a50c4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a5090:	2100      	movs	r1, #0
 80a5092:	4620      	mov	r0, r4
 80a5094:	f7fe fb08 	bl	80a36a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a5098:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a509a:	4c0b      	ldr	r4, [pc, #44]	; (80a50c8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a509c:	4632      	mov	r2, r6
 80a509e:	4629      	mov	r1, r5
 80a50a0:	f000 f860 	bl	80a5164 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a50a4:	2101      	movs	r1, #1
 80a50a6:	4620      	mov	r0, r4
 80a50a8:	f7fe fafe 	bl	80a36a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a50ac:	4632      	mov	r2, r6
 80a50ae:	4629      	mov	r1, r5
 80a50b0:	4620      	mov	r0, r4
 80a50b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a50b6:	f000 b855 	b.w	80a5164 <__aeabi_atexit>
 80a50ba:	bf00      	nop
 80a50bc:	2000063c 	.word	0x2000063c
 80a50c0:	20000124 	.word	0x20000124
 80a50c4:	080a3699 	.word	0x080a3699
 80a50c8:	2000064c 	.word	0x2000064c

080a50cc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a50cc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a50ce:	4c07      	ldr	r4, [pc, #28]	; (80a50ec <_Z21__fetch_global_EEPROMv+0x20>)
 80a50d0:	6823      	ldr	r3, [r4, #0]
 80a50d2:	07db      	lsls	r3, r3, #31
 80a50d4:	d408      	bmi.n	80a50e8 <_Z21__fetch_global_EEPROMv+0x1c>
 80a50d6:	4620      	mov	r0, r4
 80a50d8:	f7fa ffe5 	bl	80a00a6 <__cxa_guard_acquire>
 80a50dc:	b120      	cbz	r0, 80a50e8 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a50de:	f7fe f883 	bl	80a31e8 <HAL_EEPROM_Init>
 80a50e2:	4620      	mov	r0, r4
 80a50e4:	f7fa ffe4 	bl	80a00b0 <__cxa_guard_release>
	return eeprom;
}
 80a50e8:	4801      	ldr	r0, [pc, #4]	; (80a50f0 <_Z21__fetch_global_EEPROMv+0x24>)
 80a50ea:	bd10      	pop	{r4, pc}
 80a50ec:	20000660 	.word	0x20000660
 80a50f0:	20000664 	.word	0x20000664

080a50f4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a50f4:	b513      	push	{r0, r1, r4, lr}
 80a50f6:	4c08      	ldr	r4, [pc, #32]	; (80a5118 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a50f8:	2300      	movs	r3, #0
 80a50fa:	461a      	mov	r2, r3
 80a50fc:	4619      	mov	r1, r3
 80a50fe:	9300      	str	r3, [sp, #0]
 80a5100:	4620      	mov	r0, r4
 80a5102:	f7ff fc59 	bl	80a49b8 <_ZN9IPAddressC1Ehhhh>
 80a5106:	4620      	mov	r0, r4
 80a5108:	4a04      	ldr	r2, [pc, #16]	; (80a511c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a510a:	4905      	ldr	r1, [pc, #20]	; (80a5120 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a510c:	b002      	add	sp, #8
 80a510e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a5112:	f000 b827 	b.w	80a5164 <__aeabi_atexit>
 80a5116:	bf00      	nop
 80a5118:	20000668 	.word	0x20000668
 80a511c:	20000124 	.word	0x20000124
 80a5120:	080a4909 	.word	0x080a4909

080a5124 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a5124:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a5126:	4d0b      	ldr	r5, [pc, #44]	; (80a5154 <_Z19__fetch_global_Wirev+0x30>)
 80a5128:	6829      	ldr	r1, [r5, #0]
 80a512a:	f011 0401 	ands.w	r4, r1, #1
 80a512e:	d10f      	bne.n	80a5150 <_Z19__fetch_global_Wirev+0x2c>
 80a5130:	4628      	mov	r0, r5
 80a5132:	f7fa ffb8 	bl	80a00a6 <__cxa_guard_acquire>
 80a5136:	b158      	cbz	r0, 80a5150 <_Z19__fetch_global_Wirev+0x2c>
 80a5138:	4621      	mov	r1, r4
 80a513a:	4807      	ldr	r0, [pc, #28]	; (80a5158 <_Z19__fetch_global_Wirev+0x34>)
 80a513c:	f7ff fe22 	bl	80a4d84 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a5140:	4628      	mov	r0, r5
 80a5142:	f7fa ffb5 	bl	80a00b0 <__cxa_guard_release>
 80a5146:	4a05      	ldr	r2, [pc, #20]	; (80a515c <_Z19__fetch_global_Wirev+0x38>)
 80a5148:	4905      	ldr	r1, [pc, #20]	; (80a5160 <_Z19__fetch_global_Wirev+0x3c>)
 80a514a:	4803      	ldr	r0, [pc, #12]	; (80a5158 <_Z19__fetch_global_Wirev+0x34>)
 80a514c:	f000 f80a 	bl	80a5164 <__aeabi_atexit>
	return wire;
}
 80a5150:	4801      	ldr	r0, [pc, #4]	; (80a5158 <_Z19__fetch_global_Wirev+0x34>)
 80a5152:	bd38      	pop	{r3, r4, r5, pc}
 80a5154:	20000680 	.word	0x20000680
 80a5158:	20000684 	.word	0x20000684
 80a515c:	20000124 	.word	0x20000124
 80a5160:	080a4d2d 	.word	0x080a4d2d

080a5164 <__aeabi_atexit>:
 80a5164:	460b      	mov	r3, r1
 80a5166:	4601      	mov	r1, r0
 80a5168:	4618      	mov	r0, r3
 80a516a:	f001 b889 	b.w	80a6280 <__cxa_atexit>

080a516e <_ZdlPvj>:
 80a516e:	f7fa bf98 	b.w	80a00a2 <_ZdlPv>

080a5172 <_ZSt25__throw_bad_function_callv>:
 80a5172:	b508      	push	{r3, lr}
 80a5174:	f7fe fa80 	bl	80a3678 <abort>

080a5178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a5178:	4b18      	ldr	r3, [pc, #96]	; (80a51dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a517a:	681a      	ldr	r2, [r3, #0]
 80a517c:	07d1      	lsls	r1, r2, #31
 80a517e:	bf5c      	itt	pl
 80a5180:	2201      	movpl	r2, #1
 80a5182:	601a      	strpl	r2, [r3, #0]
 80a5184:	4b16      	ldr	r3, [pc, #88]	; (80a51e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a5186:	681a      	ldr	r2, [r3, #0]
 80a5188:	07d2      	lsls	r2, r2, #31
 80a518a:	bf5c      	itt	pl
 80a518c:	2201      	movpl	r2, #1
 80a518e:	601a      	strpl	r2, [r3, #0]
 80a5190:	4b14      	ldr	r3, [pc, #80]	; (80a51e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a5192:	681a      	ldr	r2, [r3, #0]
 80a5194:	07d0      	lsls	r0, r2, #31
 80a5196:	bf5c      	itt	pl
 80a5198:	2201      	movpl	r2, #1
 80a519a:	601a      	strpl	r2, [r3, #0]
 80a519c:	4b12      	ldr	r3, [pc, #72]	; (80a51e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a519e:	681a      	ldr	r2, [r3, #0]
 80a51a0:	07d1      	lsls	r1, r2, #31
 80a51a2:	bf5c      	itt	pl
 80a51a4:	2201      	movpl	r2, #1
 80a51a6:	601a      	strpl	r2, [r3, #0]
 80a51a8:	4b10      	ldr	r3, [pc, #64]	; (80a51ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a51aa:	681a      	ldr	r2, [r3, #0]
 80a51ac:	07d2      	lsls	r2, r2, #31
 80a51ae:	bf5c      	itt	pl
 80a51b0:	2201      	movpl	r2, #1
 80a51b2:	601a      	strpl	r2, [r3, #0]
 80a51b4:	4b0e      	ldr	r3, [pc, #56]	; (80a51f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a51b6:	681a      	ldr	r2, [r3, #0]
 80a51b8:	07d0      	lsls	r0, r2, #31
 80a51ba:	bf5c      	itt	pl
 80a51bc:	2201      	movpl	r2, #1
 80a51be:	601a      	strpl	r2, [r3, #0]
 80a51c0:	4b0c      	ldr	r3, [pc, #48]	; (80a51f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a51c2:	681a      	ldr	r2, [r3, #0]
 80a51c4:	07d1      	lsls	r1, r2, #31
 80a51c6:	bf5c      	itt	pl
 80a51c8:	2201      	movpl	r2, #1
 80a51ca:	601a      	strpl	r2, [r3, #0]
 80a51cc:	4b0a      	ldr	r3, [pc, #40]	; (80a51f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a51ce:	681a      	ldr	r2, [r3, #0]
 80a51d0:	07d2      	lsls	r2, r2, #31
 80a51d2:	bf5c      	itt	pl
 80a51d4:	2201      	movpl	r2, #1
 80a51d6:	601a      	strpl	r2, [r3, #0]
 80a51d8:	4770      	bx	lr
 80a51da:	bf00      	nop
 80a51dc:	200006b4 	.word	0x200006b4
 80a51e0:	200006b0 	.word	0x200006b0
 80a51e4:	200006ac 	.word	0x200006ac
 80a51e8:	200006a8 	.word	0x200006a8
 80a51ec:	200006a4 	.word	0x200006a4
 80a51f0:	200006a0 	.word	0x200006a0
 80a51f4:	2000069c 	.word	0x2000069c
 80a51f8:	20000698 	.word	0x20000698

080a51fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a51fc:	4b24      	ldr	r3, [pc, #144]	; (80a5290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a51fe:	681a      	ldr	r2, [r3, #0]
 80a5200:	07d0      	lsls	r0, r2, #31
 80a5202:	bf5c      	itt	pl
 80a5204:	2201      	movpl	r2, #1
 80a5206:	601a      	strpl	r2, [r3, #0]
 80a5208:	4b22      	ldr	r3, [pc, #136]	; (80a5294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a520a:	681a      	ldr	r2, [r3, #0]
 80a520c:	07d1      	lsls	r1, r2, #31
 80a520e:	bf5c      	itt	pl
 80a5210:	2201      	movpl	r2, #1
 80a5212:	601a      	strpl	r2, [r3, #0]
 80a5214:	4b20      	ldr	r3, [pc, #128]	; (80a5298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a5216:	681a      	ldr	r2, [r3, #0]
 80a5218:	07d2      	lsls	r2, r2, #31
 80a521a:	bf5c      	itt	pl
 80a521c:	2201      	movpl	r2, #1
 80a521e:	601a      	strpl	r2, [r3, #0]
 80a5220:	4b1e      	ldr	r3, [pc, #120]	; (80a529c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a5222:	681a      	ldr	r2, [r3, #0]
 80a5224:	07d0      	lsls	r0, r2, #31
 80a5226:	bf5c      	itt	pl
 80a5228:	2201      	movpl	r2, #1
 80a522a:	601a      	strpl	r2, [r3, #0]
 80a522c:	4b1c      	ldr	r3, [pc, #112]	; (80a52a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a522e:	681a      	ldr	r2, [r3, #0]
 80a5230:	07d1      	lsls	r1, r2, #31
 80a5232:	bf5c      	itt	pl
 80a5234:	2201      	movpl	r2, #1
 80a5236:	601a      	strpl	r2, [r3, #0]
 80a5238:	4b1a      	ldr	r3, [pc, #104]	; (80a52a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a523a:	681a      	ldr	r2, [r3, #0]
 80a523c:	07d2      	lsls	r2, r2, #31
 80a523e:	bf5c      	itt	pl
 80a5240:	2201      	movpl	r2, #1
 80a5242:	601a      	strpl	r2, [r3, #0]
 80a5244:	4b18      	ldr	r3, [pc, #96]	; (80a52a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a5246:	681a      	ldr	r2, [r3, #0]
 80a5248:	07d0      	lsls	r0, r2, #31
 80a524a:	bf5c      	itt	pl
 80a524c:	2201      	movpl	r2, #1
 80a524e:	601a      	strpl	r2, [r3, #0]
 80a5250:	4b16      	ldr	r3, [pc, #88]	; (80a52ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a5252:	681a      	ldr	r2, [r3, #0]
 80a5254:	07d1      	lsls	r1, r2, #31
 80a5256:	bf5c      	itt	pl
 80a5258:	2201      	movpl	r2, #1
 80a525a:	601a      	strpl	r2, [r3, #0]
 80a525c:	4b14      	ldr	r3, [pc, #80]	; (80a52b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a525e:	681a      	ldr	r2, [r3, #0]
 80a5260:	07d2      	lsls	r2, r2, #31
 80a5262:	bf5c      	itt	pl
 80a5264:	2201      	movpl	r2, #1
 80a5266:	601a      	strpl	r2, [r3, #0]
 80a5268:	4b12      	ldr	r3, [pc, #72]	; (80a52b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a526a:	681a      	ldr	r2, [r3, #0]
 80a526c:	07d0      	lsls	r0, r2, #31
 80a526e:	bf5c      	itt	pl
 80a5270:	2201      	movpl	r2, #1
 80a5272:	601a      	strpl	r2, [r3, #0]
 80a5274:	4b10      	ldr	r3, [pc, #64]	; (80a52b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a5276:	681a      	ldr	r2, [r3, #0]
 80a5278:	07d1      	lsls	r1, r2, #31
 80a527a:	bf5c      	itt	pl
 80a527c:	2201      	movpl	r2, #1
 80a527e:	601a      	strpl	r2, [r3, #0]
 80a5280:	4b0e      	ldr	r3, [pc, #56]	; (80a52bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a5282:	681a      	ldr	r2, [r3, #0]
 80a5284:	07d2      	lsls	r2, r2, #31
 80a5286:	bf5c      	itt	pl
 80a5288:	2201      	movpl	r2, #1
 80a528a:	601a      	strpl	r2, [r3, #0]
 80a528c:	4770      	bx	lr
 80a528e:	bf00      	nop
 80a5290:	200006e4 	.word	0x200006e4
 80a5294:	200006e0 	.word	0x200006e0
 80a5298:	200006dc 	.word	0x200006dc
 80a529c:	200006d8 	.word	0x200006d8
 80a52a0:	200006d4 	.word	0x200006d4
 80a52a4:	200006d0 	.word	0x200006d0
 80a52a8:	200006cc 	.word	0x200006cc
 80a52ac:	200006c8 	.word	0x200006c8
 80a52b0:	200006c4 	.word	0x200006c4
 80a52b4:	200006c0 	.word	0x200006c0
 80a52b8:	200006bc 	.word	0x200006bc
 80a52bc:	200006b8 	.word	0x200006b8

080a52c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a52c0:	4b24      	ldr	r3, [pc, #144]	; (80a5354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a52c2:	681a      	ldr	r2, [r3, #0]
 80a52c4:	07d0      	lsls	r0, r2, #31
 80a52c6:	bf5c      	itt	pl
 80a52c8:	2201      	movpl	r2, #1
 80a52ca:	601a      	strpl	r2, [r3, #0]
 80a52cc:	4b22      	ldr	r3, [pc, #136]	; (80a5358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a52ce:	681a      	ldr	r2, [r3, #0]
 80a52d0:	07d1      	lsls	r1, r2, #31
 80a52d2:	bf5c      	itt	pl
 80a52d4:	2201      	movpl	r2, #1
 80a52d6:	601a      	strpl	r2, [r3, #0]
 80a52d8:	4b20      	ldr	r3, [pc, #128]	; (80a535c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a52da:	681a      	ldr	r2, [r3, #0]
 80a52dc:	07d2      	lsls	r2, r2, #31
 80a52de:	bf5c      	itt	pl
 80a52e0:	2201      	movpl	r2, #1
 80a52e2:	601a      	strpl	r2, [r3, #0]
 80a52e4:	4b1e      	ldr	r3, [pc, #120]	; (80a5360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a52e6:	681a      	ldr	r2, [r3, #0]
 80a52e8:	07d0      	lsls	r0, r2, #31
 80a52ea:	bf5c      	itt	pl
 80a52ec:	2201      	movpl	r2, #1
 80a52ee:	601a      	strpl	r2, [r3, #0]
 80a52f0:	4b1c      	ldr	r3, [pc, #112]	; (80a5364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a52f2:	681a      	ldr	r2, [r3, #0]
 80a52f4:	07d1      	lsls	r1, r2, #31
 80a52f6:	bf5c      	itt	pl
 80a52f8:	2201      	movpl	r2, #1
 80a52fa:	601a      	strpl	r2, [r3, #0]
 80a52fc:	4b1a      	ldr	r3, [pc, #104]	; (80a5368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a52fe:	681a      	ldr	r2, [r3, #0]
 80a5300:	07d2      	lsls	r2, r2, #31
 80a5302:	bf5c      	itt	pl
 80a5304:	2201      	movpl	r2, #1
 80a5306:	601a      	strpl	r2, [r3, #0]
 80a5308:	4b18      	ldr	r3, [pc, #96]	; (80a536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a530a:	681a      	ldr	r2, [r3, #0]
 80a530c:	07d0      	lsls	r0, r2, #31
 80a530e:	bf5c      	itt	pl
 80a5310:	2201      	movpl	r2, #1
 80a5312:	601a      	strpl	r2, [r3, #0]
 80a5314:	4b16      	ldr	r3, [pc, #88]	; (80a5370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a5316:	681a      	ldr	r2, [r3, #0]
 80a5318:	07d1      	lsls	r1, r2, #31
 80a531a:	bf5c      	itt	pl
 80a531c:	2201      	movpl	r2, #1
 80a531e:	601a      	strpl	r2, [r3, #0]
 80a5320:	4b14      	ldr	r3, [pc, #80]	; (80a5374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a5322:	681a      	ldr	r2, [r3, #0]
 80a5324:	07d2      	lsls	r2, r2, #31
 80a5326:	bf5c      	itt	pl
 80a5328:	2201      	movpl	r2, #1
 80a532a:	601a      	strpl	r2, [r3, #0]
 80a532c:	4b12      	ldr	r3, [pc, #72]	; (80a5378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a532e:	681a      	ldr	r2, [r3, #0]
 80a5330:	07d0      	lsls	r0, r2, #31
 80a5332:	bf5c      	itt	pl
 80a5334:	2201      	movpl	r2, #1
 80a5336:	601a      	strpl	r2, [r3, #0]
 80a5338:	4b10      	ldr	r3, [pc, #64]	; (80a537c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a533a:	681a      	ldr	r2, [r3, #0]
 80a533c:	07d1      	lsls	r1, r2, #31
 80a533e:	bf5c      	itt	pl
 80a5340:	2201      	movpl	r2, #1
 80a5342:	601a      	strpl	r2, [r3, #0]
 80a5344:	4b0e      	ldr	r3, [pc, #56]	; (80a5380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a5346:	681a      	ldr	r2, [r3, #0]
 80a5348:	07d2      	lsls	r2, r2, #31
 80a534a:	bf5c      	itt	pl
 80a534c:	2201      	movpl	r2, #1
 80a534e:	601a      	strpl	r2, [r3, #0]
 80a5350:	4770      	bx	lr
 80a5352:	bf00      	nop
 80a5354:	20000714 	.word	0x20000714
 80a5358:	20000710 	.word	0x20000710
 80a535c:	2000070c 	.word	0x2000070c
 80a5360:	20000708 	.word	0x20000708
 80a5364:	20000704 	.word	0x20000704
 80a5368:	20000700 	.word	0x20000700
 80a536c:	200006fc 	.word	0x200006fc
 80a5370:	200006f8 	.word	0x200006f8
 80a5374:	200006f4 	.word	0x200006f4
 80a5378:	200006f0 	.word	0x200006f0
 80a537c:	200006ec 	.word	0x200006ec
 80a5380:	200006e8 	.word	0x200006e8

080a5384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a5384:	4b18      	ldr	r3, [pc, #96]	; (80a53e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a5386:	681a      	ldr	r2, [r3, #0]
 80a5388:	07d1      	lsls	r1, r2, #31
 80a538a:	bf5c      	itt	pl
 80a538c:	2201      	movpl	r2, #1
 80a538e:	601a      	strpl	r2, [r3, #0]
 80a5390:	4b16      	ldr	r3, [pc, #88]	; (80a53ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a5392:	681a      	ldr	r2, [r3, #0]
 80a5394:	07d2      	lsls	r2, r2, #31
 80a5396:	bf5c      	itt	pl
 80a5398:	2201      	movpl	r2, #1
 80a539a:	601a      	strpl	r2, [r3, #0]
 80a539c:	4b14      	ldr	r3, [pc, #80]	; (80a53f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a539e:	681a      	ldr	r2, [r3, #0]
 80a53a0:	07d0      	lsls	r0, r2, #31
 80a53a2:	bf5c      	itt	pl
 80a53a4:	2201      	movpl	r2, #1
 80a53a6:	601a      	strpl	r2, [r3, #0]
 80a53a8:	4b12      	ldr	r3, [pc, #72]	; (80a53f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a53aa:	681a      	ldr	r2, [r3, #0]
 80a53ac:	07d1      	lsls	r1, r2, #31
 80a53ae:	bf5c      	itt	pl
 80a53b0:	2201      	movpl	r2, #1
 80a53b2:	601a      	strpl	r2, [r3, #0]
 80a53b4:	4b10      	ldr	r3, [pc, #64]	; (80a53f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a53b6:	681a      	ldr	r2, [r3, #0]
 80a53b8:	07d2      	lsls	r2, r2, #31
 80a53ba:	bf5c      	itt	pl
 80a53bc:	2201      	movpl	r2, #1
 80a53be:	601a      	strpl	r2, [r3, #0]
 80a53c0:	4b0e      	ldr	r3, [pc, #56]	; (80a53fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a53c2:	681a      	ldr	r2, [r3, #0]
 80a53c4:	07d0      	lsls	r0, r2, #31
 80a53c6:	bf5c      	itt	pl
 80a53c8:	2201      	movpl	r2, #1
 80a53ca:	601a      	strpl	r2, [r3, #0]
 80a53cc:	4b0c      	ldr	r3, [pc, #48]	; (80a5400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a53ce:	681a      	ldr	r2, [r3, #0]
 80a53d0:	07d1      	lsls	r1, r2, #31
 80a53d2:	bf5c      	itt	pl
 80a53d4:	2201      	movpl	r2, #1
 80a53d6:	601a      	strpl	r2, [r3, #0]
 80a53d8:	4b0a      	ldr	r3, [pc, #40]	; (80a5404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a53da:	681a      	ldr	r2, [r3, #0]
 80a53dc:	07d2      	lsls	r2, r2, #31
 80a53de:	bf5c      	itt	pl
 80a53e0:	2201      	movpl	r2, #1
 80a53e2:	601a      	strpl	r2, [r3, #0]
 80a53e4:	4770      	bx	lr
 80a53e6:	bf00      	nop
 80a53e8:	20000734 	.word	0x20000734
 80a53ec:	20000730 	.word	0x20000730
 80a53f0:	2000072c 	.word	0x2000072c
 80a53f4:	20000728 	.word	0x20000728
 80a53f8:	20000724 	.word	0x20000724
 80a53fc:	20000720 	.word	0x20000720
 80a5400:	2000071c 	.word	0x2000071c
 80a5404:	20000718 	.word	0x20000718

080a5408 <__aeabi_drsub>:
 80a5408:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a540c:	e002      	b.n	80a5414 <__adddf3>
 80a540e:	bf00      	nop

080a5410 <__aeabi_dsub>:
 80a5410:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a5414 <__adddf3>:
 80a5414:	b530      	push	{r4, r5, lr}
 80a5416:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a541a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a541e:	ea94 0f05 	teq	r4, r5
 80a5422:	bf08      	it	eq
 80a5424:	ea90 0f02 	teqeq	r0, r2
 80a5428:	bf1f      	itttt	ne
 80a542a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a542e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a5432:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a5436:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a543a:	f000 80e2 	beq.w	80a5602 <__adddf3+0x1ee>
 80a543e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a5442:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a5446:	bfb8      	it	lt
 80a5448:	426d      	neglt	r5, r5
 80a544a:	dd0c      	ble.n	80a5466 <__adddf3+0x52>
 80a544c:	442c      	add	r4, r5
 80a544e:	ea80 0202 	eor.w	r2, r0, r2
 80a5452:	ea81 0303 	eor.w	r3, r1, r3
 80a5456:	ea82 0000 	eor.w	r0, r2, r0
 80a545a:	ea83 0101 	eor.w	r1, r3, r1
 80a545e:	ea80 0202 	eor.w	r2, r0, r2
 80a5462:	ea81 0303 	eor.w	r3, r1, r3
 80a5466:	2d36      	cmp	r5, #54	; 0x36
 80a5468:	bf88      	it	hi
 80a546a:	bd30      	pophi	{r4, r5, pc}
 80a546c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5470:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5474:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a5478:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a547c:	d002      	beq.n	80a5484 <__adddf3+0x70>
 80a547e:	4240      	negs	r0, r0
 80a5480:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5484:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a5488:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a548c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a5490:	d002      	beq.n	80a5498 <__adddf3+0x84>
 80a5492:	4252      	negs	r2, r2
 80a5494:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5498:	ea94 0f05 	teq	r4, r5
 80a549c:	f000 80a7 	beq.w	80a55ee <__adddf3+0x1da>
 80a54a0:	f1a4 0401 	sub.w	r4, r4, #1
 80a54a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a54a8:	db0d      	blt.n	80a54c6 <__adddf3+0xb2>
 80a54aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a54ae:	fa22 f205 	lsr.w	r2, r2, r5
 80a54b2:	1880      	adds	r0, r0, r2
 80a54b4:	f141 0100 	adc.w	r1, r1, #0
 80a54b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a54bc:	1880      	adds	r0, r0, r2
 80a54be:	fa43 f305 	asr.w	r3, r3, r5
 80a54c2:	4159      	adcs	r1, r3
 80a54c4:	e00e      	b.n	80a54e4 <__adddf3+0xd0>
 80a54c6:	f1a5 0520 	sub.w	r5, r5, #32
 80a54ca:	f10e 0e20 	add.w	lr, lr, #32
 80a54ce:	2a01      	cmp	r2, #1
 80a54d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a54d4:	bf28      	it	cs
 80a54d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a54da:	fa43 f305 	asr.w	r3, r3, r5
 80a54de:	18c0      	adds	r0, r0, r3
 80a54e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a54e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a54e8:	d507      	bpl.n	80a54fa <__adddf3+0xe6>
 80a54ea:	f04f 0e00 	mov.w	lr, #0
 80a54ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80a54f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a54f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a54fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a54fe:	d31b      	bcc.n	80a5538 <__adddf3+0x124>
 80a5500:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5504:	d30c      	bcc.n	80a5520 <__adddf3+0x10c>
 80a5506:	0849      	lsrs	r1, r1, #1
 80a5508:	ea5f 0030 	movs.w	r0, r0, rrx
 80a550c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a5510:	f104 0401 	add.w	r4, r4, #1
 80a5514:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5518:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a551c:	f080 809a 	bcs.w	80a5654 <__adddf3+0x240>
 80a5520:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5524:	bf08      	it	eq
 80a5526:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a552a:	f150 0000 	adcs.w	r0, r0, #0
 80a552e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5532:	ea41 0105 	orr.w	r1, r1, r5
 80a5536:	bd30      	pop	{r4, r5, pc}
 80a5538:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a553c:	4140      	adcs	r0, r0
 80a553e:	eb41 0101 	adc.w	r1, r1, r1
 80a5542:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5546:	f1a4 0401 	sub.w	r4, r4, #1
 80a554a:	d1e9      	bne.n	80a5520 <__adddf3+0x10c>
 80a554c:	f091 0f00 	teq	r1, #0
 80a5550:	bf04      	itt	eq
 80a5552:	4601      	moveq	r1, r0
 80a5554:	2000      	moveq	r0, #0
 80a5556:	fab1 f381 	clz	r3, r1
 80a555a:	bf08      	it	eq
 80a555c:	3320      	addeq	r3, #32
 80a555e:	f1a3 030b 	sub.w	r3, r3, #11
 80a5562:	f1b3 0220 	subs.w	r2, r3, #32
 80a5566:	da0c      	bge.n	80a5582 <__adddf3+0x16e>
 80a5568:	320c      	adds	r2, #12
 80a556a:	dd08      	ble.n	80a557e <__adddf3+0x16a>
 80a556c:	f102 0c14 	add.w	ip, r2, #20
 80a5570:	f1c2 020c 	rsb	r2, r2, #12
 80a5574:	fa01 f00c 	lsl.w	r0, r1, ip
 80a5578:	fa21 f102 	lsr.w	r1, r1, r2
 80a557c:	e00c      	b.n	80a5598 <__adddf3+0x184>
 80a557e:	f102 0214 	add.w	r2, r2, #20
 80a5582:	bfd8      	it	le
 80a5584:	f1c2 0c20 	rsble	ip, r2, #32
 80a5588:	fa01 f102 	lsl.w	r1, r1, r2
 80a558c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5590:	bfdc      	itt	le
 80a5592:	ea41 010c 	orrle.w	r1, r1, ip
 80a5596:	4090      	lslle	r0, r2
 80a5598:	1ae4      	subs	r4, r4, r3
 80a559a:	bfa2      	ittt	ge
 80a559c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a55a0:	4329      	orrge	r1, r5
 80a55a2:	bd30      	popge	{r4, r5, pc}
 80a55a4:	ea6f 0404 	mvn.w	r4, r4
 80a55a8:	3c1f      	subs	r4, #31
 80a55aa:	da1c      	bge.n	80a55e6 <__adddf3+0x1d2>
 80a55ac:	340c      	adds	r4, #12
 80a55ae:	dc0e      	bgt.n	80a55ce <__adddf3+0x1ba>
 80a55b0:	f104 0414 	add.w	r4, r4, #20
 80a55b4:	f1c4 0220 	rsb	r2, r4, #32
 80a55b8:	fa20 f004 	lsr.w	r0, r0, r4
 80a55bc:	fa01 f302 	lsl.w	r3, r1, r2
 80a55c0:	ea40 0003 	orr.w	r0, r0, r3
 80a55c4:	fa21 f304 	lsr.w	r3, r1, r4
 80a55c8:	ea45 0103 	orr.w	r1, r5, r3
 80a55cc:	bd30      	pop	{r4, r5, pc}
 80a55ce:	f1c4 040c 	rsb	r4, r4, #12
 80a55d2:	f1c4 0220 	rsb	r2, r4, #32
 80a55d6:	fa20 f002 	lsr.w	r0, r0, r2
 80a55da:	fa01 f304 	lsl.w	r3, r1, r4
 80a55de:	ea40 0003 	orr.w	r0, r0, r3
 80a55e2:	4629      	mov	r1, r5
 80a55e4:	bd30      	pop	{r4, r5, pc}
 80a55e6:	fa21 f004 	lsr.w	r0, r1, r4
 80a55ea:	4629      	mov	r1, r5
 80a55ec:	bd30      	pop	{r4, r5, pc}
 80a55ee:	f094 0f00 	teq	r4, #0
 80a55f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a55f6:	bf06      	itte	eq
 80a55f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a55fc:	3401      	addeq	r4, #1
 80a55fe:	3d01      	subne	r5, #1
 80a5600:	e74e      	b.n	80a54a0 <__adddf3+0x8c>
 80a5602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5606:	bf18      	it	ne
 80a5608:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a560c:	d029      	beq.n	80a5662 <__adddf3+0x24e>
 80a560e:	ea94 0f05 	teq	r4, r5
 80a5612:	bf08      	it	eq
 80a5614:	ea90 0f02 	teqeq	r0, r2
 80a5618:	d005      	beq.n	80a5626 <__adddf3+0x212>
 80a561a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a561e:	bf04      	itt	eq
 80a5620:	4619      	moveq	r1, r3
 80a5622:	4610      	moveq	r0, r2
 80a5624:	bd30      	pop	{r4, r5, pc}
 80a5626:	ea91 0f03 	teq	r1, r3
 80a562a:	bf1e      	ittt	ne
 80a562c:	2100      	movne	r1, #0
 80a562e:	2000      	movne	r0, #0
 80a5630:	bd30      	popne	{r4, r5, pc}
 80a5632:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a5636:	d105      	bne.n	80a5644 <__adddf3+0x230>
 80a5638:	0040      	lsls	r0, r0, #1
 80a563a:	4149      	adcs	r1, r1
 80a563c:	bf28      	it	cs
 80a563e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a5642:	bd30      	pop	{r4, r5, pc}
 80a5644:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a5648:	bf3c      	itt	cc
 80a564a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a564e:	bd30      	popcc	{r4, r5, pc}
 80a5650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5654:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a5658:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a565c:	f04f 0000 	mov.w	r0, #0
 80a5660:	bd30      	pop	{r4, r5, pc}
 80a5662:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5666:	bf1a      	itte	ne
 80a5668:	4619      	movne	r1, r3
 80a566a:	4610      	movne	r0, r2
 80a566c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a5670:	bf1c      	itt	ne
 80a5672:	460b      	movne	r3, r1
 80a5674:	4602      	movne	r2, r0
 80a5676:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a567a:	bf06      	itte	eq
 80a567c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5680:	ea91 0f03 	teqeq	r1, r3
 80a5684:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5688:	bd30      	pop	{r4, r5, pc}
 80a568a:	bf00      	nop

080a568c <__aeabi_ui2d>:
 80a568c:	f090 0f00 	teq	r0, #0
 80a5690:	bf04      	itt	eq
 80a5692:	2100      	moveq	r1, #0
 80a5694:	4770      	bxeq	lr
 80a5696:	b530      	push	{r4, r5, lr}
 80a5698:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a569c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a56a0:	f04f 0500 	mov.w	r5, #0
 80a56a4:	f04f 0100 	mov.w	r1, #0
 80a56a8:	e750      	b.n	80a554c <__adddf3+0x138>
 80a56aa:	bf00      	nop

080a56ac <__aeabi_i2d>:
 80a56ac:	f090 0f00 	teq	r0, #0
 80a56b0:	bf04      	itt	eq
 80a56b2:	2100      	moveq	r1, #0
 80a56b4:	4770      	bxeq	lr
 80a56b6:	b530      	push	{r4, r5, lr}
 80a56b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a56bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a56c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a56c4:	bf48      	it	mi
 80a56c6:	4240      	negmi	r0, r0
 80a56c8:	f04f 0100 	mov.w	r1, #0
 80a56cc:	e73e      	b.n	80a554c <__adddf3+0x138>
 80a56ce:	bf00      	nop

080a56d0 <__aeabi_f2d>:
 80a56d0:	0042      	lsls	r2, r0, #1
 80a56d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a56d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a56da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a56de:	bf1f      	itttt	ne
 80a56e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a56e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a56e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a56ec:	4770      	bxne	lr
 80a56ee:	f092 0f00 	teq	r2, #0
 80a56f2:	bf14      	ite	ne
 80a56f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a56f8:	4770      	bxeq	lr
 80a56fa:	b530      	push	{r4, r5, lr}
 80a56fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5708:	e720      	b.n	80a554c <__adddf3+0x138>
 80a570a:	bf00      	nop

080a570c <__aeabi_ul2d>:
 80a570c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5710:	bf08      	it	eq
 80a5712:	4770      	bxeq	lr
 80a5714:	b530      	push	{r4, r5, lr}
 80a5716:	f04f 0500 	mov.w	r5, #0
 80a571a:	e00a      	b.n	80a5732 <__aeabi_l2d+0x16>

080a571c <__aeabi_l2d>:
 80a571c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5720:	bf08      	it	eq
 80a5722:	4770      	bxeq	lr
 80a5724:	b530      	push	{r4, r5, lr}
 80a5726:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a572a:	d502      	bpl.n	80a5732 <__aeabi_l2d+0x16>
 80a572c:	4240      	negs	r0, r0
 80a572e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5732:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5736:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a573a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a573e:	f43f aedc 	beq.w	80a54fa <__adddf3+0xe6>
 80a5742:	f04f 0203 	mov.w	r2, #3
 80a5746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a574a:	bf18      	it	ne
 80a574c:	3203      	addne	r2, #3
 80a574e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5752:	bf18      	it	ne
 80a5754:	3203      	addne	r2, #3
 80a5756:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a575a:	f1c2 0320 	rsb	r3, r2, #32
 80a575e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a5762:	fa20 f002 	lsr.w	r0, r0, r2
 80a5766:	fa01 fe03 	lsl.w	lr, r1, r3
 80a576a:	ea40 000e 	orr.w	r0, r0, lr
 80a576e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5772:	4414      	add	r4, r2
 80a5774:	e6c1      	b.n	80a54fa <__adddf3+0xe6>
 80a5776:	bf00      	nop

080a5778 <__aeabi_dmul>:
 80a5778:	b570      	push	{r4, r5, r6, lr}
 80a577a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a577e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5782:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5786:	bf1d      	ittte	ne
 80a5788:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a578c:	ea94 0f0c 	teqne	r4, ip
 80a5790:	ea95 0f0c 	teqne	r5, ip
 80a5794:	f000 f8de 	bleq	80a5954 <__aeabi_dmul+0x1dc>
 80a5798:	442c      	add	r4, r5
 80a579a:	ea81 0603 	eor.w	r6, r1, r3
 80a579e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a57a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a57a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a57aa:	bf18      	it	ne
 80a57ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a57b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a57b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a57b8:	d038      	beq.n	80a582c <__aeabi_dmul+0xb4>
 80a57ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80a57be:	f04f 0500 	mov.w	r5, #0
 80a57c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a57c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a57ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a57ce:	f04f 0600 	mov.w	r6, #0
 80a57d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a57d6:	f09c 0f00 	teq	ip, #0
 80a57da:	bf18      	it	ne
 80a57dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a57e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a57e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a57e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a57ec:	d204      	bcs.n	80a57f8 <__aeabi_dmul+0x80>
 80a57ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a57f2:	416d      	adcs	r5, r5
 80a57f4:	eb46 0606 	adc.w	r6, r6, r6
 80a57f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a57fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5800:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5804:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5808:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a580c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5810:	bf88      	it	hi
 80a5812:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5816:	d81e      	bhi.n	80a5856 <__aeabi_dmul+0xde>
 80a5818:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a581c:	bf08      	it	eq
 80a581e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5822:	f150 0000 	adcs.w	r0, r0, #0
 80a5826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a582a:	bd70      	pop	{r4, r5, r6, pc}
 80a582c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5830:	ea46 0101 	orr.w	r1, r6, r1
 80a5834:	ea40 0002 	orr.w	r0, r0, r2
 80a5838:	ea81 0103 	eor.w	r1, r1, r3
 80a583c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5840:	bfc2      	ittt	gt
 80a5842:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5846:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a584a:	bd70      	popgt	{r4, r5, r6, pc}
 80a584c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5850:	f04f 0e00 	mov.w	lr, #0
 80a5854:	3c01      	subs	r4, #1
 80a5856:	f300 80ab 	bgt.w	80a59b0 <__aeabi_dmul+0x238>
 80a585a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a585e:	bfde      	ittt	le
 80a5860:	2000      	movle	r0, #0
 80a5862:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5866:	bd70      	pople	{r4, r5, r6, pc}
 80a5868:	f1c4 0400 	rsb	r4, r4, #0
 80a586c:	3c20      	subs	r4, #32
 80a586e:	da35      	bge.n	80a58dc <__aeabi_dmul+0x164>
 80a5870:	340c      	adds	r4, #12
 80a5872:	dc1b      	bgt.n	80a58ac <__aeabi_dmul+0x134>
 80a5874:	f104 0414 	add.w	r4, r4, #20
 80a5878:	f1c4 0520 	rsb	r5, r4, #32
 80a587c:	fa00 f305 	lsl.w	r3, r0, r5
 80a5880:	fa20 f004 	lsr.w	r0, r0, r4
 80a5884:	fa01 f205 	lsl.w	r2, r1, r5
 80a5888:	ea40 0002 	orr.w	r0, r0, r2
 80a588c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5894:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5898:	fa21 f604 	lsr.w	r6, r1, r4
 80a589c:	eb42 0106 	adc.w	r1, r2, r6
 80a58a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a58a4:	bf08      	it	eq
 80a58a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a58aa:	bd70      	pop	{r4, r5, r6, pc}
 80a58ac:	f1c4 040c 	rsb	r4, r4, #12
 80a58b0:	f1c4 0520 	rsb	r5, r4, #32
 80a58b4:	fa00 f304 	lsl.w	r3, r0, r4
 80a58b8:	fa20 f005 	lsr.w	r0, r0, r5
 80a58bc:	fa01 f204 	lsl.w	r2, r1, r4
 80a58c0:	ea40 0002 	orr.w	r0, r0, r2
 80a58c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a58c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a58cc:	f141 0100 	adc.w	r1, r1, #0
 80a58d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a58d4:	bf08      	it	eq
 80a58d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a58da:	bd70      	pop	{r4, r5, r6, pc}
 80a58dc:	f1c4 0520 	rsb	r5, r4, #32
 80a58e0:	fa00 f205 	lsl.w	r2, r0, r5
 80a58e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a58e8:	fa20 f304 	lsr.w	r3, r0, r4
 80a58ec:	fa01 f205 	lsl.w	r2, r1, r5
 80a58f0:	ea43 0302 	orr.w	r3, r3, r2
 80a58f4:	fa21 f004 	lsr.w	r0, r1, r4
 80a58f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a58fc:	fa21 f204 	lsr.w	r2, r1, r4
 80a5900:	ea20 0002 	bic.w	r0, r0, r2
 80a5904:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5908:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a590c:	bf08      	it	eq
 80a590e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5912:	bd70      	pop	{r4, r5, r6, pc}
 80a5914:	f094 0f00 	teq	r4, #0
 80a5918:	d10f      	bne.n	80a593a <__aeabi_dmul+0x1c2>
 80a591a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a591e:	0040      	lsls	r0, r0, #1
 80a5920:	eb41 0101 	adc.w	r1, r1, r1
 80a5924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5928:	bf08      	it	eq
 80a592a:	3c01      	subeq	r4, #1
 80a592c:	d0f7      	beq.n	80a591e <__aeabi_dmul+0x1a6>
 80a592e:	ea41 0106 	orr.w	r1, r1, r6
 80a5932:	f095 0f00 	teq	r5, #0
 80a5936:	bf18      	it	ne
 80a5938:	4770      	bxne	lr
 80a593a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a593e:	0052      	lsls	r2, r2, #1
 80a5940:	eb43 0303 	adc.w	r3, r3, r3
 80a5944:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5948:	bf08      	it	eq
 80a594a:	3d01      	subeq	r5, #1
 80a594c:	d0f7      	beq.n	80a593e <__aeabi_dmul+0x1c6>
 80a594e:	ea43 0306 	orr.w	r3, r3, r6
 80a5952:	4770      	bx	lr
 80a5954:	ea94 0f0c 	teq	r4, ip
 80a5958:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a595c:	bf18      	it	ne
 80a595e:	ea95 0f0c 	teqne	r5, ip
 80a5962:	d00c      	beq.n	80a597e <__aeabi_dmul+0x206>
 80a5964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5968:	bf18      	it	ne
 80a596a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a596e:	d1d1      	bne.n	80a5914 <__aeabi_dmul+0x19c>
 80a5970:	ea81 0103 	eor.w	r1, r1, r3
 80a5974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5978:	f04f 0000 	mov.w	r0, #0
 80a597c:	bd70      	pop	{r4, r5, r6, pc}
 80a597e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5982:	bf06      	itte	eq
 80a5984:	4610      	moveq	r0, r2
 80a5986:	4619      	moveq	r1, r3
 80a5988:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a598c:	d019      	beq.n	80a59c2 <__aeabi_dmul+0x24a>
 80a598e:	ea94 0f0c 	teq	r4, ip
 80a5992:	d102      	bne.n	80a599a <__aeabi_dmul+0x222>
 80a5994:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5998:	d113      	bne.n	80a59c2 <__aeabi_dmul+0x24a>
 80a599a:	ea95 0f0c 	teq	r5, ip
 80a599e:	d105      	bne.n	80a59ac <__aeabi_dmul+0x234>
 80a59a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a59a4:	bf1c      	itt	ne
 80a59a6:	4610      	movne	r0, r2
 80a59a8:	4619      	movne	r1, r3
 80a59aa:	d10a      	bne.n	80a59c2 <__aeabi_dmul+0x24a>
 80a59ac:	ea81 0103 	eor.w	r1, r1, r3
 80a59b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a59b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a59b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a59bc:	f04f 0000 	mov.w	r0, #0
 80a59c0:	bd70      	pop	{r4, r5, r6, pc}
 80a59c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a59c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a59ca:	bd70      	pop	{r4, r5, r6, pc}

080a59cc <__aeabi_ddiv>:
 80a59cc:	b570      	push	{r4, r5, r6, lr}
 80a59ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a59d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a59d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a59da:	bf1d      	ittte	ne
 80a59dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a59e0:	ea94 0f0c 	teqne	r4, ip
 80a59e4:	ea95 0f0c 	teqne	r5, ip
 80a59e8:	f000 f8a7 	bleq	80a5b3a <__aeabi_ddiv+0x16e>
 80a59ec:	eba4 0405 	sub.w	r4, r4, r5
 80a59f0:	ea81 0e03 	eor.w	lr, r1, r3
 80a59f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a59f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a59fc:	f000 8088 	beq.w	80a5b10 <__aeabi_ddiv+0x144>
 80a5a00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5a04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5a08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5a0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5a10:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5a14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5a18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5a1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5a20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5a24:	429d      	cmp	r5, r3
 80a5a26:	bf08      	it	eq
 80a5a28:	4296      	cmpeq	r6, r2
 80a5a2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5a2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5a32:	d202      	bcs.n	80a5a3a <__aeabi_ddiv+0x6e>
 80a5a34:	085b      	lsrs	r3, r3, #1
 80a5a36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5a3a:	1ab6      	subs	r6, r6, r2
 80a5a3c:	eb65 0503 	sbc.w	r5, r5, r3
 80a5a40:	085b      	lsrs	r3, r3, #1
 80a5a42:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5a46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5a4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5a4e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5a52:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5a56:	bf22      	ittt	cs
 80a5a58:	1ab6      	subcs	r6, r6, r2
 80a5a5a:	4675      	movcs	r5, lr
 80a5a5c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5a60:	085b      	lsrs	r3, r3, #1
 80a5a62:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5a66:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5a6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5a6e:	bf22      	ittt	cs
 80a5a70:	1ab6      	subcs	r6, r6, r2
 80a5a72:	4675      	movcs	r5, lr
 80a5a74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5a78:	085b      	lsrs	r3, r3, #1
 80a5a7a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5a7e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5a82:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5a86:	bf22      	ittt	cs
 80a5a88:	1ab6      	subcs	r6, r6, r2
 80a5a8a:	4675      	movcs	r5, lr
 80a5a8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5a90:	085b      	lsrs	r3, r3, #1
 80a5a92:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5a96:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5a9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5a9e:	bf22      	ittt	cs
 80a5aa0:	1ab6      	subcs	r6, r6, r2
 80a5aa2:	4675      	movcs	r5, lr
 80a5aa4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5aa8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5aac:	d018      	beq.n	80a5ae0 <__aeabi_ddiv+0x114>
 80a5aae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5ab2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5ab6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5aba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5abe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5ac2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5ac6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5aca:	d1c0      	bne.n	80a5a4e <__aeabi_ddiv+0x82>
 80a5acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5ad0:	d10b      	bne.n	80a5aea <__aeabi_ddiv+0x11e>
 80a5ad2:	ea41 0100 	orr.w	r1, r1, r0
 80a5ad6:	f04f 0000 	mov.w	r0, #0
 80a5ada:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5ade:	e7b6      	b.n	80a5a4e <__aeabi_ddiv+0x82>
 80a5ae0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5ae4:	bf04      	itt	eq
 80a5ae6:	4301      	orreq	r1, r0
 80a5ae8:	2000      	moveq	r0, #0
 80a5aea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5aee:	bf88      	it	hi
 80a5af0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5af4:	f63f aeaf 	bhi.w	80a5856 <__aeabi_dmul+0xde>
 80a5af8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5afc:	bf04      	itt	eq
 80a5afe:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5b02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5b06:	f150 0000 	adcs.w	r0, r0, #0
 80a5b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5b0e:	bd70      	pop	{r4, r5, r6, pc}
 80a5b10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5b14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5b18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5b1c:	bfc2      	ittt	gt
 80a5b1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5b22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5b26:	bd70      	popgt	{r4, r5, r6, pc}
 80a5b28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5b2c:	f04f 0e00 	mov.w	lr, #0
 80a5b30:	3c01      	subs	r4, #1
 80a5b32:	e690      	b.n	80a5856 <__aeabi_dmul+0xde>
 80a5b34:	ea45 0e06 	orr.w	lr, r5, r6
 80a5b38:	e68d      	b.n	80a5856 <__aeabi_dmul+0xde>
 80a5b3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5b3e:	ea94 0f0c 	teq	r4, ip
 80a5b42:	bf08      	it	eq
 80a5b44:	ea95 0f0c 	teqeq	r5, ip
 80a5b48:	f43f af3b 	beq.w	80a59c2 <__aeabi_dmul+0x24a>
 80a5b4c:	ea94 0f0c 	teq	r4, ip
 80a5b50:	d10a      	bne.n	80a5b68 <__aeabi_ddiv+0x19c>
 80a5b52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5b56:	f47f af34 	bne.w	80a59c2 <__aeabi_dmul+0x24a>
 80a5b5a:	ea95 0f0c 	teq	r5, ip
 80a5b5e:	f47f af25 	bne.w	80a59ac <__aeabi_dmul+0x234>
 80a5b62:	4610      	mov	r0, r2
 80a5b64:	4619      	mov	r1, r3
 80a5b66:	e72c      	b.n	80a59c2 <__aeabi_dmul+0x24a>
 80a5b68:	ea95 0f0c 	teq	r5, ip
 80a5b6c:	d106      	bne.n	80a5b7c <__aeabi_ddiv+0x1b0>
 80a5b6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5b72:	f43f aefd 	beq.w	80a5970 <__aeabi_dmul+0x1f8>
 80a5b76:	4610      	mov	r0, r2
 80a5b78:	4619      	mov	r1, r3
 80a5b7a:	e722      	b.n	80a59c2 <__aeabi_dmul+0x24a>
 80a5b7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5b80:	bf18      	it	ne
 80a5b82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5b86:	f47f aec5 	bne.w	80a5914 <__aeabi_dmul+0x19c>
 80a5b8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5b8e:	f47f af0d 	bne.w	80a59ac <__aeabi_dmul+0x234>
 80a5b92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5b96:	f47f aeeb 	bne.w	80a5970 <__aeabi_dmul+0x1f8>
 80a5b9a:	e712      	b.n	80a59c2 <__aeabi_dmul+0x24a>

080a5b9c <__aeabi_d2uiz>:
 80a5b9c:	004a      	lsls	r2, r1, #1
 80a5b9e:	d211      	bcs.n	80a5bc4 <__aeabi_d2uiz+0x28>
 80a5ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5ba4:	d211      	bcs.n	80a5bca <__aeabi_d2uiz+0x2e>
 80a5ba6:	d50d      	bpl.n	80a5bc4 <__aeabi_d2uiz+0x28>
 80a5ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5bb0:	d40e      	bmi.n	80a5bd0 <__aeabi_d2uiz+0x34>
 80a5bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5bbe:	fa23 f002 	lsr.w	r0, r3, r2
 80a5bc2:	4770      	bx	lr
 80a5bc4:	f04f 0000 	mov.w	r0, #0
 80a5bc8:	4770      	bx	lr
 80a5bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5bce:	d102      	bne.n	80a5bd6 <__aeabi_d2uiz+0x3a>
 80a5bd0:	f04f 30ff 	mov.w	r0, #4294967295
 80a5bd4:	4770      	bx	lr
 80a5bd6:	f04f 0000 	mov.w	r0, #0
 80a5bda:	4770      	bx	lr

080a5bdc <__aeabi_d2f>:
 80a5bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a5be4:	bf24      	itt	cs
 80a5be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5bee:	d90d      	bls.n	80a5c0c <__aeabi_d2f+0x30>
 80a5bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a5c04:	bf08      	it	eq
 80a5c06:	f020 0001 	biceq.w	r0, r0, #1
 80a5c0a:	4770      	bx	lr
 80a5c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5c10:	d121      	bne.n	80a5c56 <__aeabi_d2f+0x7a>
 80a5c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a5c16:	bfbc      	itt	lt
 80a5c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5c1c:	4770      	bxlt	lr
 80a5c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a5c26:	f1c2 0218 	rsb	r2, r2, #24
 80a5c2a:	f1c2 0c20 	rsb	ip, r2, #32
 80a5c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a5c32:	fa20 f002 	lsr.w	r0, r0, r2
 80a5c36:	bf18      	it	ne
 80a5c38:	f040 0001 	orrne.w	r0, r0, #1
 80a5c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5c48:	ea40 000c 	orr.w	r0, r0, ip
 80a5c4c:	fa23 f302 	lsr.w	r3, r3, r2
 80a5c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a5c54:	e7cc      	b.n	80a5bf0 <__aeabi_d2f+0x14>
 80a5c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a5c5a:	d107      	bne.n	80a5c6c <__aeabi_d2f+0x90>
 80a5c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a5c60:	bf1e      	ittt	ne
 80a5c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a5c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a5c6a:	4770      	bxne	lr
 80a5c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a5c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5c78:	4770      	bx	lr
 80a5c7a:	bf00      	nop

080a5c7c <__aeabi_frsub>:
 80a5c7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5c80:	e002      	b.n	80a5c88 <__addsf3>
 80a5c82:	bf00      	nop

080a5c84 <__aeabi_fsub>:
 80a5c84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5c88 <__addsf3>:
 80a5c88:	0042      	lsls	r2, r0, #1
 80a5c8a:	bf1f      	itttt	ne
 80a5c8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5c90:	ea92 0f03 	teqne	r2, r3
 80a5c94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5c98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5c9c:	d06a      	beq.n	80a5d74 <__addsf3+0xec>
 80a5c9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a5ca2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a5ca6:	bfc1      	itttt	gt
 80a5ca8:	18d2      	addgt	r2, r2, r3
 80a5caa:	4041      	eorgt	r1, r0
 80a5cac:	4048      	eorgt	r0, r1
 80a5cae:	4041      	eorgt	r1, r0
 80a5cb0:	bfb8      	it	lt
 80a5cb2:	425b      	neglt	r3, r3
 80a5cb4:	2b19      	cmp	r3, #25
 80a5cb6:	bf88      	it	hi
 80a5cb8:	4770      	bxhi	lr
 80a5cba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5cbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5cc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a5cc6:	bf18      	it	ne
 80a5cc8:	4240      	negne	r0, r0
 80a5cca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5cce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a5cd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a5cd6:	bf18      	it	ne
 80a5cd8:	4249      	negne	r1, r1
 80a5cda:	ea92 0f03 	teq	r2, r3
 80a5cde:	d03f      	beq.n	80a5d60 <__addsf3+0xd8>
 80a5ce0:	f1a2 0201 	sub.w	r2, r2, #1
 80a5ce4:	fa41 fc03 	asr.w	ip, r1, r3
 80a5ce8:	eb10 000c 	adds.w	r0, r0, ip
 80a5cec:	f1c3 0320 	rsb	r3, r3, #32
 80a5cf0:	fa01 f103 	lsl.w	r1, r1, r3
 80a5cf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5cf8:	d502      	bpl.n	80a5d00 <__addsf3+0x78>
 80a5cfa:	4249      	negs	r1, r1
 80a5cfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5d00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5d04:	d313      	bcc.n	80a5d2e <__addsf3+0xa6>
 80a5d06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5d0a:	d306      	bcc.n	80a5d1a <__addsf3+0x92>
 80a5d0c:	0840      	lsrs	r0, r0, #1
 80a5d0e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5d12:	f102 0201 	add.w	r2, r2, #1
 80a5d16:	2afe      	cmp	r2, #254	; 0xfe
 80a5d18:	d251      	bcs.n	80a5dbe <__addsf3+0x136>
 80a5d1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5d22:	bf08      	it	eq
 80a5d24:	f020 0001 	biceq.w	r0, r0, #1
 80a5d28:	ea40 0003 	orr.w	r0, r0, r3
 80a5d2c:	4770      	bx	lr
 80a5d2e:	0049      	lsls	r1, r1, #1
 80a5d30:	eb40 0000 	adc.w	r0, r0, r0
 80a5d34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5d38:	f1a2 0201 	sub.w	r2, r2, #1
 80a5d3c:	d1ed      	bne.n	80a5d1a <__addsf3+0x92>
 80a5d3e:	fab0 fc80 	clz	ip, r0
 80a5d42:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5d46:	ebb2 020c 	subs.w	r2, r2, ip
 80a5d4a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5d4e:	bfaa      	itet	ge
 80a5d50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5d54:	4252      	neglt	r2, r2
 80a5d56:	4318      	orrge	r0, r3
 80a5d58:	bfbc      	itt	lt
 80a5d5a:	40d0      	lsrlt	r0, r2
 80a5d5c:	4318      	orrlt	r0, r3
 80a5d5e:	4770      	bx	lr
 80a5d60:	f092 0f00 	teq	r2, #0
 80a5d64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5d68:	bf06      	itte	eq
 80a5d6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a5d6e:	3201      	addeq	r2, #1
 80a5d70:	3b01      	subne	r3, #1
 80a5d72:	e7b5      	b.n	80a5ce0 <__addsf3+0x58>
 80a5d74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5d78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5d7c:	bf18      	it	ne
 80a5d7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5d82:	d021      	beq.n	80a5dc8 <__addsf3+0x140>
 80a5d84:	ea92 0f03 	teq	r2, r3
 80a5d88:	d004      	beq.n	80a5d94 <__addsf3+0x10c>
 80a5d8a:	f092 0f00 	teq	r2, #0
 80a5d8e:	bf08      	it	eq
 80a5d90:	4608      	moveq	r0, r1
 80a5d92:	4770      	bx	lr
 80a5d94:	ea90 0f01 	teq	r0, r1
 80a5d98:	bf1c      	itt	ne
 80a5d9a:	2000      	movne	r0, #0
 80a5d9c:	4770      	bxne	lr
 80a5d9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a5da2:	d104      	bne.n	80a5dae <__addsf3+0x126>
 80a5da4:	0040      	lsls	r0, r0, #1
 80a5da6:	bf28      	it	cs
 80a5da8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5dac:	4770      	bx	lr
 80a5dae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a5db2:	bf3c      	itt	cc
 80a5db4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5db8:	4770      	bxcc	lr
 80a5dba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5dbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a5dc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5dc6:	4770      	bx	lr
 80a5dc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5dcc:	bf16      	itet	ne
 80a5dce:	4608      	movne	r0, r1
 80a5dd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5dd4:	4601      	movne	r1, r0
 80a5dd6:	0242      	lsls	r2, r0, #9
 80a5dd8:	bf06      	itte	eq
 80a5dda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5dde:	ea90 0f01 	teqeq	r0, r1
 80a5de2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5de6:	4770      	bx	lr

080a5de8 <__aeabi_ui2f>:
 80a5de8:	f04f 0300 	mov.w	r3, #0
 80a5dec:	e004      	b.n	80a5df8 <__aeabi_i2f+0x8>
 80a5dee:	bf00      	nop

080a5df0 <__aeabi_i2f>:
 80a5df0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5df4:	bf48      	it	mi
 80a5df6:	4240      	negmi	r0, r0
 80a5df8:	ea5f 0c00 	movs.w	ip, r0
 80a5dfc:	bf08      	it	eq
 80a5dfe:	4770      	bxeq	lr
 80a5e00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5e04:	4601      	mov	r1, r0
 80a5e06:	f04f 0000 	mov.w	r0, #0
 80a5e0a:	e01c      	b.n	80a5e46 <__aeabi_l2f+0x2a>

080a5e0c <__aeabi_ul2f>:
 80a5e0c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5e10:	bf08      	it	eq
 80a5e12:	4770      	bxeq	lr
 80a5e14:	f04f 0300 	mov.w	r3, #0
 80a5e18:	e00a      	b.n	80a5e30 <__aeabi_l2f+0x14>
 80a5e1a:	bf00      	nop

080a5e1c <__aeabi_l2f>:
 80a5e1c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5e20:	bf08      	it	eq
 80a5e22:	4770      	bxeq	lr
 80a5e24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5e28:	d502      	bpl.n	80a5e30 <__aeabi_l2f+0x14>
 80a5e2a:	4240      	negs	r0, r0
 80a5e2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5e30:	ea5f 0c01 	movs.w	ip, r1
 80a5e34:	bf02      	ittt	eq
 80a5e36:	4684      	moveq	ip, r0
 80a5e38:	4601      	moveq	r1, r0
 80a5e3a:	2000      	moveq	r0, #0
 80a5e3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5e40:	bf08      	it	eq
 80a5e42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5e46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a5e4a:	fabc f28c 	clz	r2, ip
 80a5e4e:	3a08      	subs	r2, #8
 80a5e50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5e54:	db10      	blt.n	80a5e78 <__aeabi_l2f+0x5c>
 80a5e56:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5e5a:	4463      	add	r3, ip
 80a5e5c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5e60:	f1c2 0220 	rsb	r2, r2, #32
 80a5e64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5e68:	fa20 f202 	lsr.w	r2, r0, r2
 80a5e6c:	eb43 0002 	adc.w	r0, r3, r2
 80a5e70:	bf08      	it	eq
 80a5e72:	f020 0001 	biceq.w	r0, r0, #1
 80a5e76:	4770      	bx	lr
 80a5e78:	f102 0220 	add.w	r2, r2, #32
 80a5e7c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5e80:	f1c2 0220 	rsb	r2, r2, #32
 80a5e84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5e88:	fa21 f202 	lsr.w	r2, r1, r2
 80a5e8c:	eb43 0002 	adc.w	r0, r3, r2
 80a5e90:	bf08      	it	eq
 80a5e92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5e96:	4770      	bx	lr

080a5e98 <__aeabi_fmul>:
 80a5e98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5ea0:	bf1e      	ittt	ne
 80a5ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5ea6:	ea92 0f0c 	teqne	r2, ip
 80a5eaa:	ea93 0f0c 	teqne	r3, ip
 80a5eae:	d06f      	beq.n	80a5f90 <__aeabi_fmul+0xf8>
 80a5eb0:	441a      	add	r2, r3
 80a5eb2:	ea80 0c01 	eor.w	ip, r0, r1
 80a5eb6:	0240      	lsls	r0, r0, #9
 80a5eb8:	bf18      	it	ne
 80a5eba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5ebe:	d01e      	beq.n	80a5efe <__aeabi_fmul+0x66>
 80a5ec0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5ec4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5ec8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5ecc:	fba0 3101 	umull	r3, r1, r0, r1
 80a5ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5ed4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5ed8:	bf3e      	ittt	cc
 80a5eda:	0049      	lslcc	r1, r1, #1
 80a5edc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5ee0:	005b      	lslcc	r3, r3, #1
 80a5ee2:	ea40 0001 	orr.w	r0, r0, r1
 80a5ee6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5eea:	2afd      	cmp	r2, #253	; 0xfd
 80a5eec:	d81d      	bhi.n	80a5f2a <__aeabi_fmul+0x92>
 80a5eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5ef2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5ef6:	bf08      	it	eq
 80a5ef8:	f020 0001 	biceq.w	r0, r0, #1
 80a5efc:	4770      	bx	lr
 80a5efe:	f090 0f00 	teq	r0, #0
 80a5f02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5f06:	bf08      	it	eq
 80a5f08:	0249      	lsleq	r1, r1, #9
 80a5f0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5f0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5f12:	3a7f      	subs	r2, #127	; 0x7f
 80a5f14:	bfc2      	ittt	gt
 80a5f16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5f1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5f1e:	4770      	bxgt	lr
 80a5f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5f24:	f04f 0300 	mov.w	r3, #0
 80a5f28:	3a01      	subs	r2, #1
 80a5f2a:	dc5d      	bgt.n	80a5fe8 <__aeabi_fmul+0x150>
 80a5f2c:	f112 0f19 	cmn.w	r2, #25
 80a5f30:	bfdc      	itt	le
 80a5f32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5f36:	4770      	bxle	lr
 80a5f38:	f1c2 0200 	rsb	r2, r2, #0
 80a5f3c:	0041      	lsls	r1, r0, #1
 80a5f3e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5f42:	f1c2 0220 	rsb	r2, r2, #32
 80a5f46:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5f4a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a5f4e:	f140 0000 	adc.w	r0, r0, #0
 80a5f52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5f56:	bf08      	it	eq
 80a5f58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5f5c:	4770      	bx	lr
 80a5f5e:	f092 0f00 	teq	r2, #0
 80a5f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5f66:	bf02      	ittt	eq
 80a5f68:	0040      	lsleq	r0, r0, #1
 80a5f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5f6e:	3a01      	subeq	r2, #1
 80a5f70:	d0f9      	beq.n	80a5f66 <__aeabi_fmul+0xce>
 80a5f72:	ea40 000c 	orr.w	r0, r0, ip
 80a5f76:	f093 0f00 	teq	r3, #0
 80a5f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5f7e:	bf02      	ittt	eq
 80a5f80:	0049      	lsleq	r1, r1, #1
 80a5f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5f86:	3b01      	subeq	r3, #1
 80a5f88:	d0f9      	beq.n	80a5f7e <__aeabi_fmul+0xe6>
 80a5f8a:	ea41 010c 	orr.w	r1, r1, ip
 80a5f8e:	e78f      	b.n	80a5eb0 <__aeabi_fmul+0x18>
 80a5f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5f94:	ea92 0f0c 	teq	r2, ip
 80a5f98:	bf18      	it	ne
 80a5f9a:	ea93 0f0c 	teqne	r3, ip
 80a5f9e:	d00a      	beq.n	80a5fb6 <__aeabi_fmul+0x11e>
 80a5fa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5fa4:	bf18      	it	ne
 80a5fa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5faa:	d1d8      	bne.n	80a5f5e <__aeabi_fmul+0xc6>
 80a5fac:	ea80 0001 	eor.w	r0, r0, r1
 80a5fb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5fb4:	4770      	bx	lr
 80a5fb6:	f090 0f00 	teq	r0, #0
 80a5fba:	bf17      	itett	ne
 80a5fbc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5fc0:	4608      	moveq	r0, r1
 80a5fc2:	f091 0f00 	teqne	r1, #0
 80a5fc6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5fca:	d014      	beq.n	80a5ff6 <__aeabi_fmul+0x15e>
 80a5fcc:	ea92 0f0c 	teq	r2, ip
 80a5fd0:	d101      	bne.n	80a5fd6 <__aeabi_fmul+0x13e>
 80a5fd2:	0242      	lsls	r2, r0, #9
 80a5fd4:	d10f      	bne.n	80a5ff6 <__aeabi_fmul+0x15e>
 80a5fd6:	ea93 0f0c 	teq	r3, ip
 80a5fda:	d103      	bne.n	80a5fe4 <__aeabi_fmul+0x14c>
 80a5fdc:	024b      	lsls	r3, r1, #9
 80a5fde:	bf18      	it	ne
 80a5fe0:	4608      	movne	r0, r1
 80a5fe2:	d108      	bne.n	80a5ff6 <__aeabi_fmul+0x15e>
 80a5fe4:	ea80 0001 	eor.w	r0, r0, r1
 80a5fe8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5fec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5ff0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5ff4:	4770      	bx	lr
 80a5ff6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5ffa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5ffe:	4770      	bx	lr

080a6000 <__aeabi_fdiv>:
 80a6000:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6004:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6008:	bf1e      	ittt	ne
 80a600a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a600e:	ea92 0f0c 	teqne	r2, ip
 80a6012:	ea93 0f0c 	teqne	r3, ip
 80a6016:	d069      	beq.n	80a60ec <__aeabi_fdiv+0xec>
 80a6018:	eba2 0203 	sub.w	r2, r2, r3
 80a601c:	ea80 0c01 	eor.w	ip, r0, r1
 80a6020:	0249      	lsls	r1, r1, #9
 80a6022:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a6026:	d037      	beq.n	80a6098 <__aeabi_fdiv+0x98>
 80a6028:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a602c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a6030:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a6034:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6038:	428b      	cmp	r3, r1
 80a603a:	bf38      	it	cc
 80a603c:	005b      	lslcc	r3, r3, #1
 80a603e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a6042:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a6046:	428b      	cmp	r3, r1
 80a6048:	bf24      	itt	cs
 80a604a:	1a5b      	subcs	r3, r3, r1
 80a604c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6050:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a6054:	bf24      	itt	cs
 80a6056:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a605a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a605e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a6062:	bf24      	itt	cs
 80a6064:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a6068:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a606c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a6070:	bf24      	itt	cs
 80a6072:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a6076:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a607a:	011b      	lsls	r3, r3, #4
 80a607c:	bf18      	it	ne
 80a607e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a6082:	d1e0      	bne.n	80a6046 <__aeabi_fdiv+0x46>
 80a6084:	2afd      	cmp	r2, #253	; 0xfd
 80a6086:	f63f af50 	bhi.w	80a5f2a <__aeabi_fmul+0x92>
 80a608a:	428b      	cmp	r3, r1
 80a608c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6090:	bf08      	it	eq
 80a6092:	f020 0001 	biceq.w	r0, r0, #1
 80a6096:	4770      	bx	lr
 80a6098:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a609c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a60a0:	327f      	adds	r2, #127	; 0x7f
 80a60a2:	bfc2      	ittt	gt
 80a60a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a60a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a60ac:	4770      	bxgt	lr
 80a60ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a60b2:	f04f 0300 	mov.w	r3, #0
 80a60b6:	3a01      	subs	r2, #1
 80a60b8:	e737      	b.n	80a5f2a <__aeabi_fmul+0x92>
 80a60ba:	f092 0f00 	teq	r2, #0
 80a60be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a60c2:	bf02      	ittt	eq
 80a60c4:	0040      	lsleq	r0, r0, #1
 80a60c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a60ca:	3a01      	subeq	r2, #1
 80a60cc:	d0f9      	beq.n	80a60c2 <__aeabi_fdiv+0xc2>
 80a60ce:	ea40 000c 	orr.w	r0, r0, ip
 80a60d2:	f093 0f00 	teq	r3, #0
 80a60d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a60da:	bf02      	ittt	eq
 80a60dc:	0049      	lsleq	r1, r1, #1
 80a60de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a60e2:	3b01      	subeq	r3, #1
 80a60e4:	d0f9      	beq.n	80a60da <__aeabi_fdiv+0xda>
 80a60e6:	ea41 010c 	orr.w	r1, r1, ip
 80a60ea:	e795      	b.n	80a6018 <__aeabi_fdiv+0x18>
 80a60ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a60f0:	ea92 0f0c 	teq	r2, ip
 80a60f4:	d108      	bne.n	80a6108 <__aeabi_fdiv+0x108>
 80a60f6:	0242      	lsls	r2, r0, #9
 80a60f8:	f47f af7d 	bne.w	80a5ff6 <__aeabi_fmul+0x15e>
 80a60fc:	ea93 0f0c 	teq	r3, ip
 80a6100:	f47f af70 	bne.w	80a5fe4 <__aeabi_fmul+0x14c>
 80a6104:	4608      	mov	r0, r1
 80a6106:	e776      	b.n	80a5ff6 <__aeabi_fmul+0x15e>
 80a6108:	ea93 0f0c 	teq	r3, ip
 80a610c:	d104      	bne.n	80a6118 <__aeabi_fdiv+0x118>
 80a610e:	024b      	lsls	r3, r1, #9
 80a6110:	f43f af4c 	beq.w	80a5fac <__aeabi_fmul+0x114>
 80a6114:	4608      	mov	r0, r1
 80a6116:	e76e      	b.n	80a5ff6 <__aeabi_fmul+0x15e>
 80a6118:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a611c:	bf18      	it	ne
 80a611e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6122:	d1ca      	bne.n	80a60ba <__aeabi_fdiv+0xba>
 80a6124:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a6128:	f47f af5c 	bne.w	80a5fe4 <__aeabi_fmul+0x14c>
 80a612c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a6130:	f47f af3c 	bne.w	80a5fac <__aeabi_fmul+0x114>
 80a6134:	e75f      	b.n	80a5ff6 <__aeabi_fmul+0x15e>
 80a6136:	bf00      	nop

080a6138 <__gesf2>:
 80a6138:	f04f 3cff 	mov.w	ip, #4294967295
 80a613c:	e006      	b.n	80a614c <__cmpsf2+0x4>
 80a613e:	bf00      	nop

080a6140 <__lesf2>:
 80a6140:	f04f 0c01 	mov.w	ip, #1
 80a6144:	e002      	b.n	80a614c <__cmpsf2+0x4>
 80a6146:	bf00      	nop

080a6148 <__cmpsf2>:
 80a6148:	f04f 0c01 	mov.w	ip, #1
 80a614c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6154:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6158:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a615c:	bf18      	it	ne
 80a615e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6162:	d011      	beq.n	80a6188 <__cmpsf2+0x40>
 80a6164:	b001      	add	sp, #4
 80a6166:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a616a:	bf18      	it	ne
 80a616c:	ea90 0f01 	teqne	r0, r1
 80a6170:	bf58      	it	pl
 80a6172:	ebb2 0003 	subspl.w	r0, r2, r3
 80a6176:	bf88      	it	hi
 80a6178:	17c8      	asrhi	r0, r1, #31
 80a617a:	bf38      	it	cc
 80a617c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a6180:	bf18      	it	ne
 80a6182:	f040 0001 	orrne.w	r0, r0, #1
 80a6186:	4770      	bx	lr
 80a6188:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a618c:	d102      	bne.n	80a6194 <__cmpsf2+0x4c>
 80a618e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a6192:	d105      	bne.n	80a61a0 <__cmpsf2+0x58>
 80a6194:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a6198:	d1e4      	bne.n	80a6164 <__cmpsf2+0x1c>
 80a619a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a619e:	d0e1      	beq.n	80a6164 <__cmpsf2+0x1c>
 80a61a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a61a4:	4770      	bx	lr
 80a61a6:	bf00      	nop

080a61a8 <__aeabi_cfrcmple>:
 80a61a8:	4684      	mov	ip, r0
 80a61aa:	4608      	mov	r0, r1
 80a61ac:	4661      	mov	r1, ip
 80a61ae:	e7ff      	b.n	80a61b0 <__aeabi_cfcmpeq>

080a61b0 <__aeabi_cfcmpeq>:
 80a61b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a61b2:	f7ff ffc9 	bl	80a6148 <__cmpsf2>
 80a61b6:	2800      	cmp	r0, #0
 80a61b8:	bf48      	it	mi
 80a61ba:	f110 0f00 	cmnmi.w	r0, #0
 80a61be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a61c0 <__aeabi_fcmpeq>:
 80a61c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a61c4:	f7ff fff4 	bl	80a61b0 <__aeabi_cfcmpeq>
 80a61c8:	bf0c      	ite	eq
 80a61ca:	2001      	moveq	r0, #1
 80a61cc:	2000      	movne	r0, #0
 80a61ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a61d2:	bf00      	nop

080a61d4 <__aeabi_fcmplt>:
 80a61d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a61d8:	f7ff ffea 	bl	80a61b0 <__aeabi_cfcmpeq>
 80a61dc:	bf34      	ite	cc
 80a61de:	2001      	movcc	r0, #1
 80a61e0:	2000      	movcs	r0, #0
 80a61e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a61e6:	bf00      	nop

080a61e8 <__aeabi_fcmple>:
 80a61e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a61ec:	f7ff ffe0 	bl	80a61b0 <__aeabi_cfcmpeq>
 80a61f0:	bf94      	ite	ls
 80a61f2:	2001      	movls	r0, #1
 80a61f4:	2000      	movhi	r0, #0
 80a61f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a61fa:	bf00      	nop

080a61fc <__aeabi_fcmpge>:
 80a61fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6200:	f7ff ffd2 	bl	80a61a8 <__aeabi_cfrcmple>
 80a6204:	bf94      	ite	ls
 80a6206:	2001      	movls	r0, #1
 80a6208:	2000      	movhi	r0, #0
 80a620a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a620e:	bf00      	nop

080a6210 <__aeabi_fcmpgt>:
 80a6210:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6214:	f7ff ffc8 	bl	80a61a8 <__aeabi_cfrcmple>
 80a6218:	bf34      	ite	cc
 80a621a:	2001      	movcc	r0, #1
 80a621c:	2000      	movcs	r0, #0
 80a621e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6222:	bf00      	nop

080a6224 <__aeabi_f2iz>:
 80a6224:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6228:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a622c:	d30f      	bcc.n	80a624e <__aeabi_f2iz+0x2a>
 80a622e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a6232:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a6236:	d90d      	bls.n	80a6254 <__aeabi_f2iz+0x30>
 80a6238:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a623c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6240:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6244:	fa23 f002 	lsr.w	r0, r3, r2
 80a6248:	bf18      	it	ne
 80a624a:	4240      	negne	r0, r0
 80a624c:	4770      	bx	lr
 80a624e:	f04f 0000 	mov.w	r0, #0
 80a6252:	4770      	bx	lr
 80a6254:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a6258:	d101      	bne.n	80a625e <__aeabi_f2iz+0x3a>
 80a625a:	0242      	lsls	r2, r0, #9
 80a625c:	d105      	bne.n	80a626a <__aeabi_f2iz+0x46>
 80a625e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a6262:	bf08      	it	eq
 80a6264:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6268:	4770      	bx	lr
 80a626a:	f04f 0000 	mov.w	r0, #0
 80a626e:	4770      	bx	lr

080a6270 <atoi>:
 80a6270:	220a      	movs	r2, #10
 80a6272:	2100      	movs	r1, #0
 80a6274:	f000 ba2a 	b.w	80a66cc <strtol>

080a6278 <atol>:
 80a6278:	220a      	movs	r2, #10
 80a627a:	2100      	movs	r1, #0
 80a627c:	f000 ba26 	b.w	80a66cc <strtol>

080a6280 <__cxa_atexit>:
 80a6280:	b510      	push	{r4, lr}
 80a6282:	4c05      	ldr	r4, [pc, #20]	; (80a6298 <__cxa_atexit+0x18>)
 80a6284:	4613      	mov	r3, r2
 80a6286:	b12c      	cbz	r4, 80a6294 <__cxa_atexit+0x14>
 80a6288:	460a      	mov	r2, r1
 80a628a:	4601      	mov	r1, r0
 80a628c:	2002      	movs	r0, #2
 80a628e:	f3af 8000 	nop.w
 80a6292:	bd10      	pop	{r4, pc}
 80a6294:	4620      	mov	r0, r4
 80a6296:	bd10      	pop	{r4, pc}
 80a6298:	00000000 	.word	0x00000000

080a629c <localtime>:
 80a629c:	b538      	push	{r3, r4, r5, lr}
 80a629e:	4b07      	ldr	r3, [pc, #28]	; (80a62bc <localtime+0x20>)
 80a62a0:	4605      	mov	r5, r0
 80a62a2:	681c      	ldr	r4, [r3, #0]
 80a62a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a62a6:	b91b      	cbnz	r3, 80a62b0 <localtime+0x14>
 80a62a8:	2024      	movs	r0, #36	; 0x24
 80a62aa:	f7fd f9ad 	bl	80a3608 <malloc>
 80a62ae:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a62b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a62b2:	4628      	mov	r0, r5
 80a62b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a62b8:	f000 b802 	b.w	80a62c0 <localtime_r>
 80a62bc:	200000d4 	.word	0x200000d4

080a62c0 <localtime_r>:
 80a62c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a62c4:	460c      	mov	r4, r1
 80a62c6:	4680      	mov	r8, r0
 80a62c8:	f000 fd06 	bl	80a6cd8 <__gettzinfo>
 80a62cc:	4621      	mov	r1, r4
 80a62ce:	4607      	mov	r7, r0
 80a62d0:	4640      	mov	r0, r8
 80a62d2:	f000 fd05 	bl	80a6ce0 <gmtime_r>
 80a62d6:	6946      	ldr	r6, [r0, #20]
 80a62d8:	4604      	mov	r4, r0
 80a62da:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a62de:	07b3      	lsls	r3, r6, #30
 80a62e0:	d105      	bne.n	80a62ee <localtime_r+0x2e>
 80a62e2:	2264      	movs	r2, #100	; 0x64
 80a62e4:	fb96 f3f2 	sdiv	r3, r6, r2
 80a62e8:	fb02 6313 	mls	r3, r2, r3, r6
 80a62ec:	b94b      	cbnz	r3, 80a6302 <localtime_r+0x42>
 80a62ee:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a62f2:	fb96 f3f5 	sdiv	r3, r6, r5
 80a62f6:	fb05 6513 	mls	r5, r5, r3, r6
 80a62fa:	fab5 f385 	clz	r3, r5
 80a62fe:	095b      	lsrs	r3, r3, #5
 80a6300:	e000      	b.n	80a6304 <localtime_r+0x44>
 80a6302:	2301      	movs	r3, #1
 80a6304:	4a5f      	ldr	r2, [pc, #380]	; (80a6484 <localtime_r+0x1c4>)
 80a6306:	2530      	movs	r5, #48	; 0x30
 80a6308:	fb05 2503 	mla	r5, r5, r3, r2
 80a630c:	f000 fb18 	bl	80a6940 <__tz_lock>
 80a6310:	f000 fb18 	bl	80a6944 <_tzset_unlocked>
 80a6314:	4b5c      	ldr	r3, [pc, #368]	; (80a6488 <localtime_r+0x1c8>)
 80a6316:	681b      	ldr	r3, [r3, #0]
 80a6318:	b1f3      	cbz	r3, 80a6358 <localtime_r+0x98>
 80a631a:	687b      	ldr	r3, [r7, #4]
 80a631c:	429e      	cmp	r6, r3
 80a631e:	d105      	bne.n	80a632c <localtime_r+0x6c>
 80a6320:	6839      	ldr	r1, [r7, #0]
 80a6322:	f8d8 3000 	ldr.w	r3, [r8]
 80a6326:	69fa      	ldr	r2, [r7, #28]
 80a6328:	b941      	cbnz	r1, 80a633c <localtime_r+0x7c>
 80a632a:	e00a      	b.n	80a6342 <localtime_r+0x82>
 80a632c:	4630      	mov	r0, r6
 80a632e:	f000 fa5f 	bl	80a67f0 <__tzcalc_limits>
 80a6332:	2800      	cmp	r0, #0
 80a6334:	d1f4      	bne.n	80a6320 <localtime_r+0x60>
 80a6336:	f04f 33ff 	mov.w	r3, #4294967295
 80a633a:	e00d      	b.n	80a6358 <localtime_r+0x98>
 80a633c:	4293      	cmp	r3, r2
 80a633e:	db08      	blt.n	80a6352 <localtime_r+0x92>
 80a6340:	e001      	b.n	80a6346 <localtime_r+0x86>
 80a6342:	4293      	cmp	r3, r2
 80a6344:	da07      	bge.n	80a6356 <localtime_r+0x96>
 80a6346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a6348:	4293      	cmp	r3, r2
 80a634a:	bfac      	ite	ge
 80a634c:	2300      	movge	r3, #0
 80a634e:	2301      	movlt	r3, #1
 80a6350:	e002      	b.n	80a6358 <localtime_r+0x98>
 80a6352:	2300      	movs	r3, #0
 80a6354:	e000      	b.n	80a6358 <localtime_r+0x98>
 80a6356:	2301      	movs	r3, #1
 80a6358:	6223      	str	r3, [r4, #32]
 80a635a:	6a23      	ldr	r3, [r4, #32]
 80a635c:	203c      	movs	r0, #60	; 0x3c
 80a635e:	2b01      	cmp	r3, #1
 80a6360:	bf0c      	ite	eq
 80a6362:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a6364:	6a39      	ldrne	r1, [r7, #32]
 80a6366:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a636a:	fb91 f6f3 	sdiv	r6, r1, r3
 80a636e:	fb03 1316 	mls	r3, r3, r6, r1
 80a6372:	fb93 f2f0 	sdiv	r2, r3, r0
 80a6376:	fb00 3012 	mls	r0, r0, r2, r3
 80a637a:	6861      	ldr	r1, [r4, #4]
 80a637c:	6823      	ldr	r3, [r4, #0]
 80a637e:	1a89      	subs	r1, r1, r2
 80a6380:	68a2      	ldr	r2, [r4, #8]
 80a6382:	1a1b      	subs	r3, r3, r0
 80a6384:	1b92      	subs	r2, r2, r6
 80a6386:	2b3b      	cmp	r3, #59	; 0x3b
 80a6388:	6023      	str	r3, [r4, #0]
 80a638a:	6061      	str	r1, [r4, #4]
 80a638c:	60a2      	str	r2, [r4, #8]
 80a638e:	dd03      	ble.n	80a6398 <localtime_r+0xd8>
 80a6390:	3101      	adds	r1, #1
 80a6392:	6061      	str	r1, [r4, #4]
 80a6394:	3b3c      	subs	r3, #60	; 0x3c
 80a6396:	e004      	b.n	80a63a2 <localtime_r+0xe2>
 80a6398:	2b00      	cmp	r3, #0
 80a639a:	da03      	bge.n	80a63a4 <localtime_r+0xe4>
 80a639c:	3901      	subs	r1, #1
 80a639e:	6061      	str	r1, [r4, #4]
 80a63a0:	333c      	adds	r3, #60	; 0x3c
 80a63a2:	6023      	str	r3, [r4, #0]
 80a63a4:	6863      	ldr	r3, [r4, #4]
 80a63a6:	2b3b      	cmp	r3, #59	; 0x3b
 80a63a8:	dd03      	ble.n	80a63b2 <localtime_r+0xf2>
 80a63aa:	3201      	adds	r2, #1
 80a63ac:	60a2      	str	r2, [r4, #8]
 80a63ae:	3b3c      	subs	r3, #60	; 0x3c
 80a63b0:	e004      	b.n	80a63bc <localtime_r+0xfc>
 80a63b2:	2b00      	cmp	r3, #0
 80a63b4:	da03      	bge.n	80a63be <localtime_r+0xfe>
 80a63b6:	3a01      	subs	r2, #1
 80a63b8:	60a2      	str	r2, [r4, #8]
 80a63ba:	333c      	adds	r3, #60	; 0x3c
 80a63bc:	6063      	str	r3, [r4, #4]
 80a63be:	68a3      	ldr	r3, [r4, #8]
 80a63c0:	2b17      	cmp	r3, #23
 80a63c2:	dd22      	ble.n	80a640a <localtime_r+0x14a>
 80a63c4:	69e2      	ldr	r2, [r4, #28]
 80a63c6:	3b18      	subs	r3, #24
 80a63c8:	3201      	adds	r2, #1
 80a63ca:	61e2      	str	r2, [r4, #28]
 80a63cc:	69a2      	ldr	r2, [r4, #24]
 80a63ce:	60a3      	str	r3, [r4, #8]
 80a63d0:	3201      	adds	r2, #1
 80a63d2:	2a06      	cmp	r2, #6
 80a63d4:	bfc8      	it	gt
 80a63d6:	2200      	movgt	r2, #0
 80a63d8:	61a2      	str	r2, [r4, #24]
 80a63da:	68e2      	ldr	r2, [r4, #12]
 80a63dc:	6923      	ldr	r3, [r4, #16]
 80a63de:	3201      	adds	r2, #1
 80a63e0:	60e2      	str	r2, [r4, #12]
 80a63e2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a63e6:	428a      	cmp	r2, r1
 80a63e8:	dd46      	ble.n	80a6478 <localtime_r+0x1b8>
 80a63ea:	3301      	adds	r3, #1
 80a63ec:	2b0c      	cmp	r3, #12
 80a63ee:	bf08      	it	eq
 80a63f0:	6963      	ldreq	r3, [r4, #20]
 80a63f2:	eba2 0201 	sub.w	r2, r2, r1
 80a63f6:	60e2      	str	r2, [r4, #12]
 80a63f8:	bf05      	ittet	eq
 80a63fa:	3301      	addeq	r3, #1
 80a63fc:	2200      	moveq	r2, #0
 80a63fe:	6123      	strne	r3, [r4, #16]
 80a6400:	6122      	streq	r2, [r4, #16]
 80a6402:	bf04      	itt	eq
 80a6404:	6163      	streq	r3, [r4, #20]
 80a6406:	61e2      	streq	r2, [r4, #28]
 80a6408:	e036      	b.n	80a6478 <localtime_r+0x1b8>
 80a640a:	2b00      	cmp	r3, #0
 80a640c:	da34      	bge.n	80a6478 <localtime_r+0x1b8>
 80a640e:	69e2      	ldr	r2, [r4, #28]
 80a6410:	3318      	adds	r3, #24
 80a6412:	3a01      	subs	r2, #1
 80a6414:	61e2      	str	r2, [r4, #28]
 80a6416:	69a2      	ldr	r2, [r4, #24]
 80a6418:	60a3      	str	r3, [r4, #8]
 80a641a:	3a01      	subs	r2, #1
 80a641c:	bf48      	it	mi
 80a641e:	2206      	movmi	r2, #6
 80a6420:	61a2      	str	r2, [r4, #24]
 80a6422:	68e2      	ldr	r2, [r4, #12]
 80a6424:	3a01      	subs	r2, #1
 80a6426:	60e2      	str	r2, [r4, #12]
 80a6428:	bb32      	cbnz	r2, 80a6478 <localtime_r+0x1b8>
 80a642a:	6923      	ldr	r3, [r4, #16]
 80a642c:	3b01      	subs	r3, #1
 80a642e:	d401      	bmi.n	80a6434 <localtime_r+0x174>
 80a6430:	6123      	str	r3, [r4, #16]
 80a6432:	e01d      	b.n	80a6470 <localtime_r+0x1b0>
 80a6434:	230b      	movs	r3, #11
 80a6436:	6123      	str	r3, [r4, #16]
 80a6438:	6963      	ldr	r3, [r4, #20]
 80a643a:	1e5a      	subs	r2, r3, #1
 80a643c:	f012 0f03 	tst.w	r2, #3
 80a6440:	6162      	str	r2, [r4, #20]
 80a6442:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a6446:	d105      	bne.n	80a6454 <localtime_r+0x194>
 80a6448:	2164      	movs	r1, #100	; 0x64
 80a644a:	fb93 f2f1 	sdiv	r2, r3, r1
 80a644e:	fb01 3212 	mls	r2, r1, r2, r3
 80a6452:	b94a      	cbnz	r2, 80a6468 <localtime_r+0x1a8>
 80a6454:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6458:	fb93 f2f1 	sdiv	r2, r3, r1
 80a645c:	fb01 3312 	mls	r3, r1, r2, r3
 80a6460:	fab3 f383 	clz	r3, r3
 80a6464:	095b      	lsrs	r3, r3, #5
 80a6466:	e000      	b.n	80a646a <localtime_r+0x1aa>
 80a6468:	2301      	movs	r3, #1
 80a646a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a646e:	61e3      	str	r3, [r4, #28]
 80a6470:	6923      	ldr	r3, [r4, #16]
 80a6472:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a6476:	60e3      	str	r3, [r4, #12]
 80a6478:	f000 fa63 	bl	80a6942 <__tz_unlock>
 80a647c:	4620      	mov	r0, r4
 80a647e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6482:	bf00      	nop
 80a6484:	080a8308 	.word	0x080a8308
 80a6488:	20000754 	.word	0x20000754

080a648c <memcpy>:
 80a648c:	b510      	push	{r4, lr}
 80a648e:	1e43      	subs	r3, r0, #1
 80a6490:	440a      	add	r2, r1
 80a6492:	4291      	cmp	r1, r2
 80a6494:	d004      	beq.n	80a64a0 <memcpy+0x14>
 80a6496:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a649a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a649e:	e7f8      	b.n	80a6492 <memcpy+0x6>
 80a64a0:	bd10      	pop	{r4, pc}

080a64a2 <memset>:
 80a64a2:	4603      	mov	r3, r0
 80a64a4:	4402      	add	r2, r0
 80a64a6:	4293      	cmp	r3, r2
 80a64a8:	d002      	beq.n	80a64b0 <memset+0xe>
 80a64aa:	f803 1b01 	strb.w	r1, [r3], #1
 80a64ae:	e7fa      	b.n	80a64a6 <memset+0x4>
 80a64b0:	4770      	bx	lr
	...

080a64b4 <srand>:
 80a64b4:	b538      	push	{r3, r4, r5, lr}
 80a64b6:	4b12      	ldr	r3, [pc, #72]	; (80a6500 <srand+0x4c>)
 80a64b8:	4605      	mov	r5, r0
 80a64ba:	681c      	ldr	r4, [r3, #0]
 80a64bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a64be:	b9d3      	cbnz	r3, 80a64f6 <srand+0x42>
 80a64c0:	2018      	movs	r0, #24
 80a64c2:	f7fd f8a1 	bl	80a3608 <malloc>
 80a64c6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a64ca:	63a0      	str	r0, [r4, #56]	; 0x38
 80a64cc:	8003      	strh	r3, [r0, #0]
 80a64ce:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a64d2:	8043      	strh	r3, [r0, #2]
 80a64d4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a64d8:	8083      	strh	r3, [r0, #4]
 80a64da:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a64de:	80c3      	strh	r3, [r0, #6]
 80a64e0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a64e4:	8103      	strh	r3, [r0, #8]
 80a64e6:	2305      	movs	r3, #5
 80a64e8:	8143      	strh	r3, [r0, #10]
 80a64ea:	230b      	movs	r3, #11
 80a64ec:	8183      	strh	r3, [r0, #12]
 80a64ee:	2201      	movs	r2, #1
 80a64f0:	2300      	movs	r3, #0
 80a64f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a64f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a64f8:	2200      	movs	r2, #0
 80a64fa:	611d      	str	r5, [r3, #16]
 80a64fc:	615a      	str	r2, [r3, #20]
 80a64fe:	bd38      	pop	{r3, r4, r5, pc}
 80a6500:	200000d4 	.word	0x200000d4

080a6504 <strcmp>:
 80a6504:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6508:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a650c:	2a01      	cmp	r2, #1
 80a650e:	bf28      	it	cs
 80a6510:	429a      	cmpcs	r2, r3
 80a6512:	d0f7      	beq.n	80a6504 <strcmp>
 80a6514:	1ad0      	subs	r0, r2, r3
 80a6516:	4770      	bx	lr

080a6518 <strcpy>:
 80a6518:	4603      	mov	r3, r0
 80a651a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a651e:	f803 2b01 	strb.w	r2, [r3], #1
 80a6522:	2a00      	cmp	r2, #0
 80a6524:	d1f9      	bne.n	80a651a <strcpy+0x2>
 80a6526:	4770      	bx	lr

080a6528 <strdup>:
 80a6528:	4b02      	ldr	r3, [pc, #8]	; (80a6534 <strdup+0xc>)
 80a652a:	4601      	mov	r1, r0
 80a652c:	6818      	ldr	r0, [r3, #0]
 80a652e:	f000 b803 	b.w	80a6538 <_strdup_r>
 80a6532:	bf00      	nop
 80a6534:	200000d4 	.word	0x200000d4

080a6538 <_strdup_r>:
 80a6538:	b570      	push	{r4, r5, r6, lr}
 80a653a:	4606      	mov	r6, r0
 80a653c:	4608      	mov	r0, r1
 80a653e:	460c      	mov	r4, r1
 80a6540:	f000 f80d 	bl	80a655e <strlen>
 80a6544:	1c45      	adds	r5, r0, #1
 80a6546:	4629      	mov	r1, r5
 80a6548:	4630      	mov	r0, r6
 80a654a:	f7fd f89d 	bl	80a3688 <_malloc_r>
 80a654e:	4606      	mov	r6, r0
 80a6550:	b118      	cbz	r0, 80a655a <_strdup_r+0x22>
 80a6552:	462a      	mov	r2, r5
 80a6554:	4621      	mov	r1, r4
 80a6556:	f7ff ff99 	bl	80a648c <memcpy>
 80a655a:	4630      	mov	r0, r6
 80a655c:	bd70      	pop	{r4, r5, r6, pc}

080a655e <strlen>:
 80a655e:	4603      	mov	r3, r0
 80a6560:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6564:	2a00      	cmp	r2, #0
 80a6566:	d1fb      	bne.n	80a6560 <strlen+0x2>
 80a6568:	1a18      	subs	r0, r3, r0
 80a656a:	3801      	subs	r0, #1
 80a656c:	4770      	bx	lr

080a656e <strncmp>:
 80a656e:	b530      	push	{r4, r5, lr}
 80a6570:	b182      	cbz	r2, 80a6594 <strncmp+0x26>
 80a6572:	1e45      	subs	r5, r0, #1
 80a6574:	3901      	subs	r1, #1
 80a6576:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a657a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a657e:	42a3      	cmp	r3, r4
 80a6580:	d106      	bne.n	80a6590 <strncmp+0x22>
 80a6582:	43ec      	mvns	r4, r5
 80a6584:	4414      	add	r4, r2
 80a6586:	42e0      	cmn	r0, r4
 80a6588:	d001      	beq.n	80a658e <strncmp+0x20>
 80a658a:	2b00      	cmp	r3, #0
 80a658c:	d1f3      	bne.n	80a6576 <strncmp+0x8>
 80a658e:	461c      	mov	r4, r3
 80a6590:	1b18      	subs	r0, r3, r4
 80a6592:	bd30      	pop	{r4, r5, pc}
 80a6594:	4610      	mov	r0, r2
 80a6596:	bd30      	pop	{r4, r5, pc}

080a6598 <strncpy>:
 80a6598:	4603      	mov	r3, r0
 80a659a:	b510      	push	{r4, lr}
 80a659c:	b142      	cbz	r2, 80a65b0 <strncpy+0x18>
 80a659e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a65a2:	3a01      	subs	r2, #1
 80a65a4:	f803 4b01 	strb.w	r4, [r3], #1
 80a65a8:	2c00      	cmp	r4, #0
 80a65aa:	d1f7      	bne.n	80a659c <strncpy+0x4>
 80a65ac:	441a      	add	r2, r3
 80a65ae:	e000      	b.n	80a65b2 <strncpy+0x1a>
 80a65b0:	bd10      	pop	{r4, pc}
 80a65b2:	4293      	cmp	r3, r2
 80a65b4:	d002      	beq.n	80a65bc <strncpy+0x24>
 80a65b6:	f803 4b01 	strb.w	r4, [r3], #1
 80a65ba:	e7fa      	b.n	80a65b2 <strncpy+0x1a>
 80a65bc:	bd10      	pop	{r4, pc}
	...

080a65c0 <_strtol_r>:
 80a65c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a65c4:	460f      	mov	r7, r1
 80a65c6:	4680      	mov	r8, r0
 80a65c8:	483f      	ldr	r0, [pc, #252]	; (80a66c8 <_strtol_r+0x108>)
 80a65ca:	f8d0 9000 	ldr.w	r9, [r0]
 80a65ce:	463d      	mov	r5, r7
 80a65d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a65d4:	eb09 0004 	add.w	r0, r9, r4
 80a65d8:	7840      	ldrb	r0, [r0, #1]
 80a65da:	f000 0008 	and.w	r0, r0, #8
 80a65de:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a65e2:	b108      	cbz	r0, 80a65e8 <_strtol_r+0x28>
 80a65e4:	462f      	mov	r7, r5
 80a65e6:	e7f2      	b.n	80a65ce <_strtol_r+0xe>
 80a65e8:	2c2d      	cmp	r4, #45	; 0x2d
 80a65ea:	d103      	bne.n	80a65f4 <_strtol_r+0x34>
 80a65ec:	1cbd      	adds	r5, r7, #2
 80a65ee:	787c      	ldrb	r4, [r7, #1]
 80a65f0:	2601      	movs	r6, #1
 80a65f2:	e003      	b.n	80a65fc <_strtol_r+0x3c>
 80a65f4:	2c2b      	cmp	r4, #43	; 0x2b
 80a65f6:	bf04      	itt	eq
 80a65f8:	787c      	ldrbeq	r4, [r7, #1]
 80a65fa:	1cbd      	addeq	r5, r7, #2
 80a65fc:	b113      	cbz	r3, 80a6604 <_strtol_r+0x44>
 80a65fe:	2b10      	cmp	r3, #16
 80a6600:	d10a      	bne.n	80a6618 <_strtol_r+0x58>
 80a6602:	e05b      	b.n	80a66bc <_strtol_r+0xfc>
 80a6604:	2c30      	cmp	r4, #48	; 0x30
 80a6606:	d157      	bne.n	80a66b8 <_strtol_r+0xf8>
 80a6608:	7828      	ldrb	r0, [r5, #0]
 80a660a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a660e:	2858      	cmp	r0, #88	; 0x58
 80a6610:	d14d      	bne.n	80a66ae <_strtol_r+0xee>
 80a6612:	786c      	ldrb	r4, [r5, #1]
 80a6614:	2310      	movs	r3, #16
 80a6616:	3502      	adds	r5, #2
 80a6618:	2e00      	cmp	r6, #0
 80a661a:	bf14      	ite	ne
 80a661c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a6620:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a6624:	fbbc faf3 	udiv	sl, ip, r3
 80a6628:	2700      	movs	r7, #0
 80a662a:	4638      	mov	r0, r7
 80a662c:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a6630:	eb09 0e04 	add.w	lr, r9, r4
 80a6634:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a6638:	f01e 0f04 	tst.w	lr, #4
 80a663c:	d001      	beq.n	80a6642 <_strtol_r+0x82>
 80a663e:	3c30      	subs	r4, #48	; 0x30
 80a6640:	e00b      	b.n	80a665a <_strtol_r+0x9a>
 80a6642:	f01e 0e03 	ands.w	lr, lr, #3
 80a6646:	d01b      	beq.n	80a6680 <_strtol_r+0xc0>
 80a6648:	f1be 0f01 	cmp.w	lr, #1
 80a664c:	bf0c      	ite	eq
 80a664e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a6652:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a6656:	ebce 0404 	rsb	r4, lr, r4
 80a665a:	42a3      	cmp	r3, r4
 80a665c:	dd10      	ble.n	80a6680 <_strtol_r+0xc0>
 80a665e:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a6662:	d00a      	beq.n	80a667a <_strtol_r+0xba>
 80a6664:	4550      	cmp	r0, sl
 80a6666:	d806      	bhi.n	80a6676 <_strtol_r+0xb6>
 80a6668:	d101      	bne.n	80a666e <_strtol_r+0xae>
 80a666a:	4564      	cmp	r4, ip
 80a666c:	dc03      	bgt.n	80a6676 <_strtol_r+0xb6>
 80a666e:	fb03 4000 	mla	r0, r3, r0, r4
 80a6672:	2701      	movs	r7, #1
 80a6674:	e001      	b.n	80a667a <_strtol_r+0xba>
 80a6676:	f04f 37ff 	mov.w	r7, #4294967295
 80a667a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a667e:	e7d7      	b.n	80a6630 <_strtol_r+0x70>
 80a6680:	1c7b      	adds	r3, r7, #1
 80a6682:	d10c      	bne.n	80a669e <_strtol_r+0xde>
 80a6684:	2e00      	cmp	r6, #0
 80a6686:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a668a:	bf14      	ite	ne
 80a668c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a6690:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6694:	f8c8 3000 	str.w	r3, [r8]
 80a6698:	b92a      	cbnz	r2, 80a66a6 <_strtol_r+0xe6>
 80a669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a669e:	b106      	cbz	r6, 80a66a2 <_strtol_r+0xe2>
 80a66a0:	4240      	negs	r0, r0
 80a66a2:	b172      	cbz	r2, 80a66c2 <_strtol_r+0x102>
 80a66a4:	b107      	cbz	r7, 80a66a8 <_strtol_r+0xe8>
 80a66a6:	1e69      	subs	r1, r5, #1
 80a66a8:	6011      	str	r1, [r2, #0]
 80a66aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a66ae:	2430      	movs	r4, #48	; 0x30
 80a66b0:	2b00      	cmp	r3, #0
 80a66b2:	d1b1      	bne.n	80a6618 <_strtol_r+0x58>
 80a66b4:	2308      	movs	r3, #8
 80a66b6:	e7af      	b.n	80a6618 <_strtol_r+0x58>
 80a66b8:	230a      	movs	r3, #10
 80a66ba:	e7ad      	b.n	80a6618 <_strtol_r+0x58>
 80a66bc:	2c30      	cmp	r4, #48	; 0x30
 80a66be:	d0a3      	beq.n	80a6608 <_strtol_r+0x48>
 80a66c0:	e7aa      	b.n	80a6618 <_strtol_r+0x58>
 80a66c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a66c6:	bf00      	nop
 80a66c8:	20000070 	.word	0x20000070

080a66cc <strtol>:
 80a66cc:	4613      	mov	r3, r2
 80a66ce:	460a      	mov	r2, r1
 80a66d0:	4601      	mov	r1, r0
 80a66d2:	4802      	ldr	r0, [pc, #8]	; (80a66dc <strtol+0x10>)
 80a66d4:	6800      	ldr	r0, [r0, #0]
 80a66d6:	f7ff bf73 	b.w	80a65c0 <_strtol_r>
 80a66da:	bf00      	nop
 80a66dc:	200000d4 	.word	0x200000d4

080a66e0 <_strtoul_r>:
 80a66e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a66e4:	460e      	mov	r6, r1
 80a66e6:	4680      	mov	r8, r0
 80a66e8:	483b      	ldr	r0, [pc, #236]	; (80a67d8 <_strtoul_r+0xf8>)
 80a66ea:	f8d0 9000 	ldr.w	r9, [r0]
 80a66ee:	4635      	mov	r5, r6
 80a66f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a66f4:	eb09 0004 	add.w	r0, r9, r4
 80a66f8:	7840      	ldrb	r0, [r0, #1]
 80a66fa:	f000 0008 	and.w	r0, r0, #8
 80a66fe:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a6702:	b108      	cbz	r0, 80a6708 <_strtoul_r+0x28>
 80a6704:	462e      	mov	r6, r5
 80a6706:	e7f2      	b.n	80a66ee <_strtoul_r+0xe>
 80a6708:	2c2d      	cmp	r4, #45	; 0x2d
 80a670a:	d103      	bne.n	80a6714 <_strtoul_r+0x34>
 80a670c:	1cb5      	adds	r5, r6, #2
 80a670e:	7874      	ldrb	r4, [r6, #1]
 80a6710:	2701      	movs	r7, #1
 80a6712:	e003      	b.n	80a671c <_strtoul_r+0x3c>
 80a6714:	2c2b      	cmp	r4, #43	; 0x2b
 80a6716:	bf04      	itt	eq
 80a6718:	7874      	ldrbeq	r4, [r6, #1]
 80a671a:	1cb5      	addeq	r5, r6, #2
 80a671c:	b113      	cbz	r3, 80a6724 <_strtoul_r+0x44>
 80a671e:	2b10      	cmp	r3, #16
 80a6720:	d10a      	bne.n	80a6738 <_strtoul_r+0x58>
 80a6722:	e053      	b.n	80a67cc <_strtoul_r+0xec>
 80a6724:	2c30      	cmp	r4, #48	; 0x30
 80a6726:	d14f      	bne.n	80a67c8 <_strtoul_r+0xe8>
 80a6728:	7828      	ldrb	r0, [r5, #0]
 80a672a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a672e:	2858      	cmp	r0, #88	; 0x58
 80a6730:	d145      	bne.n	80a67be <_strtoul_r+0xde>
 80a6732:	786c      	ldrb	r4, [r5, #1]
 80a6734:	2310      	movs	r3, #16
 80a6736:	3502      	adds	r5, #2
 80a6738:	f04f 3cff 	mov.w	ip, #4294967295
 80a673c:	fbbc fcf3 	udiv	ip, ip, r3
 80a6740:	fb03 fa0c 	mul.w	sl, r3, ip
 80a6744:	2600      	movs	r6, #0
 80a6746:	ea6f 0a0a 	mvn.w	sl, sl
 80a674a:	4630      	mov	r0, r6
 80a674c:	eb09 0e04 	add.w	lr, r9, r4
 80a6750:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a6754:	f01e 0f04 	tst.w	lr, #4
 80a6758:	d001      	beq.n	80a675e <_strtoul_r+0x7e>
 80a675a:	3c30      	subs	r4, #48	; 0x30
 80a675c:	e00b      	b.n	80a6776 <_strtoul_r+0x96>
 80a675e:	f01e 0e03 	ands.w	lr, lr, #3
 80a6762:	d01a      	beq.n	80a679a <_strtoul_r+0xba>
 80a6764:	f1be 0f01 	cmp.w	lr, #1
 80a6768:	bf0c      	ite	eq
 80a676a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a676e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a6772:	ebce 0404 	rsb	r4, lr, r4
 80a6776:	42a3      	cmp	r3, r4
 80a6778:	dd0f      	ble.n	80a679a <_strtoul_r+0xba>
 80a677a:	2e00      	cmp	r6, #0
 80a677c:	db08      	blt.n	80a6790 <_strtoul_r+0xb0>
 80a677e:	4560      	cmp	r0, ip
 80a6780:	d806      	bhi.n	80a6790 <_strtoul_r+0xb0>
 80a6782:	d101      	bne.n	80a6788 <_strtoul_r+0xa8>
 80a6784:	4554      	cmp	r4, sl
 80a6786:	dc03      	bgt.n	80a6790 <_strtoul_r+0xb0>
 80a6788:	fb03 4000 	mla	r0, r3, r0, r4
 80a678c:	2601      	movs	r6, #1
 80a678e:	e001      	b.n	80a6794 <_strtoul_r+0xb4>
 80a6790:	f04f 36ff 	mov.w	r6, #4294967295
 80a6794:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6798:	e7d8      	b.n	80a674c <_strtoul_r+0x6c>
 80a679a:	2e00      	cmp	r6, #0
 80a679c:	da07      	bge.n	80a67ae <_strtoul_r+0xce>
 80a679e:	2322      	movs	r3, #34	; 0x22
 80a67a0:	f8c8 3000 	str.w	r3, [r8]
 80a67a4:	f04f 30ff 	mov.w	r0, #4294967295
 80a67a8:	b92a      	cbnz	r2, 80a67b6 <_strtoul_r+0xd6>
 80a67aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a67ae:	b107      	cbz	r7, 80a67b2 <_strtoul_r+0xd2>
 80a67b0:	4240      	negs	r0, r0
 80a67b2:	b172      	cbz	r2, 80a67d2 <_strtoul_r+0xf2>
 80a67b4:	b106      	cbz	r6, 80a67b8 <_strtoul_r+0xd8>
 80a67b6:	1e69      	subs	r1, r5, #1
 80a67b8:	6011      	str	r1, [r2, #0]
 80a67ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a67be:	2430      	movs	r4, #48	; 0x30
 80a67c0:	2b00      	cmp	r3, #0
 80a67c2:	d1b9      	bne.n	80a6738 <_strtoul_r+0x58>
 80a67c4:	2308      	movs	r3, #8
 80a67c6:	e7b7      	b.n	80a6738 <_strtoul_r+0x58>
 80a67c8:	230a      	movs	r3, #10
 80a67ca:	e7b5      	b.n	80a6738 <_strtoul_r+0x58>
 80a67cc:	2c30      	cmp	r4, #48	; 0x30
 80a67ce:	d0ab      	beq.n	80a6728 <_strtoul_r+0x48>
 80a67d0:	e7b2      	b.n	80a6738 <_strtoul_r+0x58>
 80a67d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a67d6:	bf00      	nop
 80a67d8:	20000070 	.word	0x20000070

080a67dc <strtoul>:
 80a67dc:	4613      	mov	r3, r2
 80a67de:	460a      	mov	r2, r1
 80a67e0:	4601      	mov	r1, r0
 80a67e2:	4802      	ldr	r0, [pc, #8]	; (80a67ec <strtoul+0x10>)
 80a67e4:	6800      	ldr	r0, [r0, #0]
 80a67e6:	f7ff bf7b 	b.w	80a66e0 <_strtoul_r>
 80a67ea:	bf00      	nop
 80a67ec:	200000d4 	.word	0x200000d4

080a67f0 <__tzcalc_limits>:
 80a67f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a67f4:	4604      	mov	r4, r0
 80a67f6:	f000 fa6f 	bl	80a6cd8 <__gettzinfo>
 80a67fa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a67fe:	429c      	cmp	r4, r3
 80a6800:	f340 8096 	ble.w	80a6930 <__tzcalc_limits+0x140>
 80a6804:	f240 156d 	movw	r5, #365	; 0x16d
 80a6808:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a680c:	18e3      	adds	r3, r4, r3
 80a680e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a6812:	109b      	asrs	r3, r3, #2
 80a6814:	fb05 3502 	mla	r5, r5, r2, r3
 80a6818:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a681c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a6820:	fb92 f3f3 	sdiv	r3, r2, r3
 80a6824:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a6828:	442b      	add	r3, r5
 80a682a:	18a5      	adds	r5, r4, r2
 80a682c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6830:	fb94 f7f2 	sdiv	r7, r4, r2
 80a6834:	fb95 f5f2 	sdiv	r5, r5, r2
 80a6838:	fb02 4717 	mls	r7, r2, r7, r4
 80a683c:	441d      	add	r5, r3
 80a683e:	2364      	movs	r3, #100	; 0x64
 80a6840:	fb94 f6f3 	sdiv	r6, r4, r3
 80a6844:	fab7 fe87 	clz	lr, r7
 80a6848:	4601      	mov	r1, r0
 80a684a:	fb03 4616 	mls	r6, r3, r6, r4
 80a684e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a6852:	9301      	str	r3, [sp, #4]
 80a6854:	f004 0303 	and.w	r3, r4, #3
 80a6858:	6044      	str	r4, [r0, #4]
 80a685a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a685e:	9300      	str	r3, [sp, #0]
 80a6860:	f04f 0c07 	mov.w	ip, #7
 80a6864:	7a0b      	ldrb	r3, [r1, #8]
 80a6866:	2b4a      	cmp	r3, #74	; 0x4a
 80a6868:	d10e      	bne.n	80a6888 <__tzcalc_limits+0x98>
 80a686a:	694b      	ldr	r3, [r1, #20]
 80a686c:	9a00      	ldr	r2, [sp, #0]
 80a686e:	18ec      	adds	r4, r5, r3
 80a6870:	b902      	cbnz	r2, 80a6874 <__tzcalc_limits+0x84>
 80a6872:	b906      	cbnz	r6, 80a6876 <__tzcalc_limits+0x86>
 80a6874:	b927      	cbnz	r7, 80a6880 <__tzcalc_limits+0x90>
 80a6876:	2b3b      	cmp	r3, #59	; 0x3b
 80a6878:	bfd4      	ite	le
 80a687a:	2300      	movle	r3, #0
 80a687c:	2301      	movgt	r3, #1
 80a687e:	e000      	b.n	80a6882 <__tzcalc_limits+0x92>
 80a6880:	2300      	movs	r3, #0
 80a6882:	4423      	add	r3, r4
 80a6884:	3b01      	subs	r3, #1
 80a6886:	e03f      	b.n	80a6908 <__tzcalc_limits+0x118>
 80a6888:	2b44      	cmp	r3, #68	; 0x44
 80a688a:	d102      	bne.n	80a6892 <__tzcalc_limits+0xa2>
 80a688c:	694b      	ldr	r3, [r1, #20]
 80a688e:	442b      	add	r3, r5
 80a6890:	e03a      	b.n	80a6908 <__tzcalc_limits+0x118>
 80a6892:	9b00      	ldr	r3, [sp, #0]
 80a6894:	b92b      	cbnz	r3, 80a68a2 <__tzcalc_limits+0xb2>
 80a6896:	2e00      	cmp	r6, #0
 80a6898:	bf0c      	ite	eq
 80a689a:	46f0      	moveq	r8, lr
 80a689c:	f04f 0801 	movne.w	r8, #1
 80a68a0:	e000      	b.n	80a68a4 <__tzcalc_limits+0xb4>
 80a68a2:	46f0      	mov	r8, lr
 80a68a4:	46a9      	mov	r9, r5
 80a68a6:	4b24      	ldr	r3, [pc, #144]	; (80a6938 <__tzcalc_limits+0x148>)
 80a68a8:	2230      	movs	r2, #48	; 0x30
 80a68aa:	fb02 3808 	mla	r8, r2, r8, r3
 80a68ae:	68cc      	ldr	r4, [r1, #12]
 80a68b0:	f1a8 0a04 	sub.w	sl, r8, #4
 80a68b4:	2301      	movs	r3, #1
 80a68b6:	42a3      	cmp	r3, r4
 80a68b8:	da04      	bge.n	80a68c4 <__tzcalc_limits+0xd4>
 80a68ba:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a68be:	3301      	adds	r3, #1
 80a68c0:	44d9      	add	r9, fp
 80a68c2:	e7f8      	b.n	80a68b6 <__tzcalc_limits+0xc6>
 80a68c4:	f109 0304 	add.w	r3, r9, #4
 80a68c8:	fb93 fbfc 	sdiv	fp, r3, ip
 80a68cc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a68d0:	ebca 0a03 	rsb	sl, sl, r3
 80a68d4:	694b      	ldr	r3, [r1, #20]
 80a68d6:	2c01      	cmp	r4, #1
 80a68d8:	bfb8      	it	lt
 80a68da:	2401      	movlt	r4, #1
 80a68dc:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a68e0:	690b      	ldr	r3, [r1, #16]
 80a68e2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a68e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80a68ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80a68ee:	bf48      	it	mi
 80a68f0:	f10a 0a07 	addmi.w	sl, sl, #7
 80a68f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a68f8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a68fc:	4453      	add	r3, sl
 80a68fe:	42a3      	cmp	r3, r4
 80a6900:	db01      	blt.n	80a6906 <__tzcalc_limits+0x116>
 80a6902:	3b07      	subs	r3, #7
 80a6904:	e7fb      	b.n	80a68fe <__tzcalc_limits+0x10e>
 80a6906:	444b      	add	r3, r9
 80a6908:	698c      	ldr	r4, [r1, #24]
 80a690a:	4a0c      	ldr	r2, [pc, #48]	; (80a693c <__tzcalc_limits+0x14c>)
 80a690c:	fb02 4303 	mla	r3, r2, r3, r4
 80a6910:	6a0c      	ldr	r4, [r1, #32]
 80a6912:	4423      	add	r3, r4
 80a6914:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a6918:	9b01      	ldr	r3, [sp, #4]
 80a691a:	4299      	cmp	r1, r3
 80a691c:	d1a2      	bne.n	80a6864 <__tzcalc_limits+0x74>
 80a691e:	69c3      	ldr	r3, [r0, #28]
 80a6920:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a6922:	4293      	cmp	r3, r2
 80a6924:	bfac      	ite	ge
 80a6926:	2300      	movge	r3, #0
 80a6928:	2301      	movlt	r3, #1
 80a692a:	6003      	str	r3, [r0, #0]
 80a692c:	2001      	movs	r0, #1
 80a692e:	e000      	b.n	80a6932 <__tzcalc_limits+0x142>
 80a6930:	2000      	movs	r0, #0
 80a6932:	b003      	add	sp, #12
 80a6934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6938:	080a8308 	.word	0x080a8308
 80a693c:	00015180 	.word	0x00015180

080a6940 <__tz_lock>:
 80a6940:	4770      	bx	lr

080a6942 <__tz_unlock>:
 80a6942:	4770      	bx	lr

080a6944 <_tzset_unlocked>:
 80a6944:	4b01      	ldr	r3, [pc, #4]	; (80a694c <_tzset_unlocked+0x8>)
 80a6946:	6818      	ldr	r0, [r3, #0]
 80a6948:	f000 b802 	b.w	80a6950 <_tzset_unlocked_r>
 80a694c:	200000d4 	.word	0x200000d4

080a6950 <_tzset_unlocked_r>:
 80a6950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6954:	b08d      	sub	sp, #52	; 0x34
 80a6956:	4607      	mov	r7, r0
 80a6958:	f000 f9be 	bl	80a6cd8 <__gettzinfo>
 80a695c:	49b0      	ldr	r1, [pc, #704]	; (80a6c20 <_tzset_unlocked_r+0x2d0>)
 80a695e:	4604      	mov	r4, r0
 80a6960:	4638      	mov	r0, r7
 80a6962:	f000 f9b1 	bl	80a6cc8 <_getenv_r>
 80a6966:	4eaf      	ldr	r6, [pc, #700]	; (80a6c24 <_tzset_unlocked_r+0x2d4>)
 80a6968:	4605      	mov	r5, r0
 80a696a:	b960      	cbnz	r0, 80a6986 <_tzset_unlocked_r+0x36>
 80a696c:	4bae      	ldr	r3, [pc, #696]	; (80a6c28 <_tzset_unlocked_r+0x2d8>)
 80a696e:	4aaf      	ldr	r2, [pc, #700]	; (80a6c2c <_tzset_unlocked_r+0x2dc>)
 80a6970:	6018      	str	r0, [r3, #0]
 80a6972:	4baf      	ldr	r3, [pc, #700]	; (80a6c30 <_tzset_unlocked_r+0x2e0>)
 80a6974:	6018      	str	r0, [r3, #0]
 80a6976:	4baf      	ldr	r3, [pc, #700]	; (80a6c34 <_tzset_unlocked_r+0x2e4>)
 80a6978:	6830      	ldr	r0, [r6, #0]
 80a697a:	601a      	str	r2, [r3, #0]
 80a697c:	605a      	str	r2, [r3, #4]
 80a697e:	f7fc fe4b 	bl	80a3618 <free>
 80a6982:	6035      	str	r5, [r6, #0]
 80a6984:	e148      	b.n	80a6c18 <_tzset_unlocked_r+0x2c8>
 80a6986:	6831      	ldr	r1, [r6, #0]
 80a6988:	b979      	cbnz	r1, 80a69aa <_tzset_unlocked_r+0x5a>
 80a698a:	6830      	ldr	r0, [r6, #0]
 80a698c:	f7fc fe44 	bl	80a3618 <free>
 80a6990:	4628      	mov	r0, r5
 80a6992:	f7ff fde4 	bl	80a655e <strlen>
 80a6996:	1c41      	adds	r1, r0, #1
 80a6998:	4638      	mov	r0, r7
 80a699a:	f7fc fe75 	bl	80a3688 <_malloc_r>
 80a699e:	6030      	str	r0, [r6, #0]
 80a69a0:	b148      	cbz	r0, 80a69b6 <_tzset_unlocked_r+0x66>
 80a69a2:	4629      	mov	r1, r5
 80a69a4:	f7ff fdb8 	bl	80a6518 <strcpy>
 80a69a8:	e005      	b.n	80a69b6 <_tzset_unlocked_r+0x66>
 80a69aa:	f7ff fdab 	bl	80a6504 <strcmp>
 80a69ae:	2800      	cmp	r0, #0
 80a69b0:	f000 8132 	beq.w	80a6c18 <_tzset_unlocked_r+0x2c8>
 80a69b4:	e7e9      	b.n	80a698a <_tzset_unlocked_r+0x3a>
 80a69b6:	782b      	ldrb	r3, [r5, #0]
 80a69b8:	ae0a      	add	r6, sp, #40	; 0x28
 80a69ba:	2b3a      	cmp	r3, #58	; 0x3a
 80a69bc:	bf08      	it	eq
 80a69be:	3501      	addeq	r5, #1
 80a69c0:	4633      	mov	r3, r6
 80a69c2:	4a9d      	ldr	r2, [pc, #628]	; (80a6c38 <_tzset_unlocked_r+0x2e8>)
 80a69c4:	499d      	ldr	r1, [pc, #628]	; (80a6c3c <_tzset_unlocked_r+0x2ec>)
 80a69c6:	4628      	mov	r0, r5
 80a69c8:	f7fc fe3e 	bl	80a3648 <siscanf>
 80a69cc:	2800      	cmp	r0, #0
 80a69ce:	f340 8123 	ble.w	80a6c18 <_tzset_unlocked_r+0x2c8>
 80a69d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a69d4:	18ef      	adds	r7, r5, r3
 80a69d6:	5ceb      	ldrb	r3, [r5, r3]
 80a69d8:	2b2d      	cmp	r3, #45	; 0x2d
 80a69da:	d103      	bne.n	80a69e4 <_tzset_unlocked_r+0x94>
 80a69dc:	3701      	adds	r7, #1
 80a69de:	f04f 35ff 	mov.w	r5, #4294967295
 80a69e2:	e003      	b.n	80a69ec <_tzset_unlocked_r+0x9c>
 80a69e4:	2b2b      	cmp	r3, #43	; 0x2b
 80a69e6:	bf08      	it	eq
 80a69e8:	3701      	addeq	r7, #1
 80a69ea:	2501      	movs	r5, #1
 80a69ec:	f10d 0a20 	add.w	sl, sp, #32
 80a69f0:	f10d 0b1e 	add.w	fp, sp, #30
 80a69f4:	f04f 0800 	mov.w	r8, #0
 80a69f8:	9603      	str	r6, [sp, #12]
 80a69fa:	f8cd a008 	str.w	sl, [sp, #8]
 80a69fe:	9601      	str	r6, [sp, #4]
 80a6a00:	f8cd b000 	str.w	fp, [sp]
 80a6a04:	4633      	mov	r3, r6
 80a6a06:	aa07      	add	r2, sp, #28
 80a6a08:	498d      	ldr	r1, [pc, #564]	; (80a6c40 <_tzset_unlocked_r+0x2f0>)
 80a6a0a:	4638      	mov	r0, r7
 80a6a0c:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a6a10:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a6a14:	f7fc fe18 	bl	80a3648 <siscanf>
 80a6a18:	4540      	cmp	r0, r8
 80a6a1a:	f340 80fd 	ble.w	80a6c18 <_tzset_unlocked_r+0x2c8>
 80a6a1e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a6a22:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a6a26:	213c      	movs	r1, #60	; 0x3c
 80a6a28:	fb01 3302 	mla	r3, r1, r2, r3
 80a6a2c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a6a30:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6a34:	fb01 3302 	mla	r3, r1, r2, r3
 80a6a38:	435d      	muls	r5, r3
 80a6a3a:	4b7f      	ldr	r3, [pc, #508]	; (80a6c38 <_tzset_unlocked_r+0x2e8>)
 80a6a3c:	6225      	str	r5, [r4, #32]
 80a6a3e:	4d7d      	ldr	r5, [pc, #500]	; (80a6c34 <_tzset_unlocked_r+0x2e4>)
 80a6a40:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a6c4c <_tzset_unlocked_r+0x2fc>
 80a6a44:	602b      	str	r3, [r5, #0]
 80a6a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6a48:	464a      	mov	r2, r9
 80a6a4a:	441f      	add	r7, r3
 80a6a4c:	497b      	ldr	r1, [pc, #492]	; (80a6c3c <_tzset_unlocked_r+0x2ec>)
 80a6a4e:	4633      	mov	r3, r6
 80a6a50:	4638      	mov	r0, r7
 80a6a52:	f7fc fdf9 	bl	80a3648 <siscanf>
 80a6a56:	4540      	cmp	r0, r8
 80a6a58:	dc08      	bgt.n	80a6a6c <_tzset_unlocked_r+0x11c>
 80a6a5a:	682b      	ldr	r3, [r5, #0]
 80a6a5c:	6a22      	ldr	r2, [r4, #32]
 80a6a5e:	606b      	str	r3, [r5, #4]
 80a6a60:	4b71      	ldr	r3, [pc, #452]	; (80a6c28 <_tzset_unlocked_r+0x2d8>)
 80a6a62:	601a      	str	r2, [r3, #0]
 80a6a64:	4b72      	ldr	r3, [pc, #456]	; (80a6c30 <_tzset_unlocked_r+0x2e0>)
 80a6a66:	f8c3 8000 	str.w	r8, [r3]
 80a6a6a:	e0d5      	b.n	80a6c18 <_tzset_unlocked_r+0x2c8>
 80a6a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6a6e:	f8c5 9004 	str.w	r9, [r5, #4]
 80a6a72:	18fd      	adds	r5, r7, r3
 80a6a74:	5cfb      	ldrb	r3, [r7, r3]
 80a6a76:	2b2d      	cmp	r3, #45	; 0x2d
 80a6a78:	d103      	bne.n	80a6a82 <_tzset_unlocked_r+0x132>
 80a6a7a:	3501      	adds	r5, #1
 80a6a7c:	f04f 37ff 	mov.w	r7, #4294967295
 80a6a80:	e003      	b.n	80a6a8a <_tzset_unlocked_r+0x13a>
 80a6a82:	2b2b      	cmp	r3, #43	; 0x2b
 80a6a84:	bf08      	it	eq
 80a6a86:	3501      	addeq	r5, #1
 80a6a88:	2701      	movs	r7, #1
 80a6a8a:	2300      	movs	r3, #0
 80a6a8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a6a90:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6a94:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a6a98:	930a      	str	r3, [sp, #40]	; 0x28
 80a6a9a:	9603      	str	r6, [sp, #12]
 80a6a9c:	f8cd a008 	str.w	sl, [sp, #8]
 80a6aa0:	9601      	str	r6, [sp, #4]
 80a6aa2:	f8cd b000 	str.w	fp, [sp]
 80a6aa6:	4633      	mov	r3, r6
 80a6aa8:	aa07      	add	r2, sp, #28
 80a6aaa:	4965      	ldr	r1, [pc, #404]	; (80a6c40 <_tzset_unlocked_r+0x2f0>)
 80a6aac:	4628      	mov	r0, r5
 80a6aae:	f7fc fdcb 	bl	80a3648 <siscanf>
 80a6ab2:	2800      	cmp	r0, #0
 80a6ab4:	dc04      	bgt.n	80a6ac0 <_tzset_unlocked_r+0x170>
 80a6ab6:	6a23      	ldr	r3, [r4, #32]
 80a6ab8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a6abc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a6abe:	e00e      	b.n	80a6ade <_tzset_unlocked_r+0x18e>
 80a6ac0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a6ac4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a6ac8:	213c      	movs	r1, #60	; 0x3c
 80a6aca:	fb01 3302 	mla	r3, r1, r2, r3
 80a6ace:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a6ad2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6ad6:	fb01 3302 	mla	r3, r1, r2, r3
 80a6ada:	435f      	muls	r7, r3
 80a6adc:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a6ade:	4627      	mov	r7, r4
 80a6ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6ae2:	f04f 0900 	mov.w	r9, #0
 80a6ae6:	441d      	add	r5, r3
 80a6ae8:	782b      	ldrb	r3, [r5, #0]
 80a6aea:	2b2c      	cmp	r3, #44	; 0x2c
 80a6aec:	bf08      	it	eq
 80a6aee:	3501      	addeq	r5, #1
 80a6af0:	f895 8000 	ldrb.w	r8, [r5]
 80a6af4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a6af8:	d126      	bne.n	80a6b48 <_tzset_unlocked_r+0x1f8>
 80a6afa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a6afe:	9302      	str	r3, [sp, #8]
 80a6b00:	ab09      	add	r3, sp, #36	; 0x24
 80a6b02:	9300      	str	r3, [sp, #0]
 80a6b04:	9603      	str	r6, [sp, #12]
 80a6b06:	9601      	str	r6, [sp, #4]
 80a6b08:	4633      	mov	r3, r6
 80a6b0a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a6b0e:	494d      	ldr	r1, [pc, #308]	; (80a6c44 <_tzset_unlocked_r+0x2f4>)
 80a6b10:	4628      	mov	r0, r5
 80a6b12:	f7fc fd99 	bl	80a3648 <siscanf>
 80a6b16:	2803      	cmp	r0, #3
 80a6b18:	d17e      	bne.n	80a6c18 <_tzset_unlocked_r+0x2c8>
 80a6b1a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a6b1e:	1e4b      	subs	r3, r1, #1
 80a6b20:	2b0b      	cmp	r3, #11
 80a6b22:	d879      	bhi.n	80a6c18 <_tzset_unlocked_r+0x2c8>
 80a6b24:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a6b28:	1e53      	subs	r3, r2, #1
 80a6b2a:	2b04      	cmp	r3, #4
 80a6b2c:	d874      	bhi.n	80a6c18 <_tzset_unlocked_r+0x2c8>
 80a6b2e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a6b32:	2b06      	cmp	r3, #6
 80a6b34:	d870      	bhi.n	80a6c18 <_tzset_unlocked_r+0x2c8>
 80a6b36:	f887 8008 	strb.w	r8, [r7, #8]
 80a6b3a:	60f9      	str	r1, [r7, #12]
 80a6b3c:	613a      	str	r2, [r7, #16]
 80a6b3e:	617b      	str	r3, [r7, #20]
 80a6b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6b42:	eb05 0803 	add.w	r8, r5, r3
 80a6b46:	e02a      	b.n	80a6b9e <_tzset_unlocked_r+0x24e>
 80a6b48:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a6b4c:	bf06      	itte	eq
 80a6b4e:	4643      	moveq	r3, r8
 80a6b50:	3501      	addeq	r5, #1
 80a6b52:	2344      	movne	r3, #68	; 0x44
 80a6b54:	220a      	movs	r2, #10
 80a6b56:	a90b      	add	r1, sp, #44	; 0x2c
 80a6b58:	4628      	mov	r0, r5
 80a6b5a:	9305      	str	r3, [sp, #20]
 80a6b5c:	f7ff fe3e 	bl	80a67dc <strtoul>
 80a6b60:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a6b64:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a6b68:	4545      	cmp	r5, r8
 80a6b6a:	9b05      	ldr	r3, [sp, #20]
 80a6b6c:	d114      	bne.n	80a6b98 <_tzset_unlocked_r+0x248>
 80a6b6e:	234d      	movs	r3, #77	; 0x4d
 80a6b70:	f1b9 0f00 	cmp.w	r9, #0
 80a6b74:	d107      	bne.n	80a6b86 <_tzset_unlocked_r+0x236>
 80a6b76:	7223      	strb	r3, [r4, #8]
 80a6b78:	2303      	movs	r3, #3
 80a6b7a:	60e3      	str	r3, [r4, #12]
 80a6b7c:	2302      	movs	r3, #2
 80a6b7e:	6123      	str	r3, [r4, #16]
 80a6b80:	f8c4 9014 	str.w	r9, [r4, #20]
 80a6b84:	e00b      	b.n	80a6b9e <_tzset_unlocked_r+0x24e>
 80a6b86:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a6b8a:	230b      	movs	r3, #11
 80a6b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 80a6b8e:	2301      	movs	r3, #1
 80a6b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a6b92:	2300      	movs	r3, #0
 80a6b94:	6323      	str	r3, [r4, #48]	; 0x30
 80a6b96:	e002      	b.n	80a6b9e <_tzset_unlocked_r+0x24e>
 80a6b98:	b280      	uxth	r0, r0
 80a6b9a:	723b      	strb	r3, [r7, #8]
 80a6b9c:	6178      	str	r0, [r7, #20]
 80a6b9e:	2302      	movs	r3, #2
 80a6ba0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a6ba4:	2300      	movs	r3, #0
 80a6ba6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6baa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a6bae:	930a      	str	r3, [sp, #40]	; 0x28
 80a6bb0:	f898 3000 	ldrb.w	r3, [r8]
 80a6bb4:	2b2f      	cmp	r3, #47	; 0x2f
 80a6bb6:	d10b      	bne.n	80a6bd0 <_tzset_unlocked_r+0x280>
 80a6bb8:	9603      	str	r6, [sp, #12]
 80a6bba:	f8cd a008 	str.w	sl, [sp, #8]
 80a6bbe:	9601      	str	r6, [sp, #4]
 80a6bc0:	f8cd b000 	str.w	fp, [sp]
 80a6bc4:	4633      	mov	r3, r6
 80a6bc6:	aa07      	add	r2, sp, #28
 80a6bc8:	491f      	ldr	r1, [pc, #124]	; (80a6c48 <_tzset_unlocked_r+0x2f8>)
 80a6bca:	4640      	mov	r0, r8
 80a6bcc:	f7fc fd3c 	bl	80a3648 <siscanf>
 80a6bd0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a6bd4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a6bd8:	213c      	movs	r1, #60	; 0x3c
 80a6bda:	fb01 3302 	mla	r3, r1, r2, r3
 80a6bde:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a6be2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6be6:	fb01 3302 	mla	r3, r1, r2, r3
 80a6bea:	61bb      	str	r3, [r7, #24]
 80a6bec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a6bee:	f109 0901 	add.w	r9, r9, #1
 80a6bf2:	f1b9 0f02 	cmp.w	r9, #2
 80a6bf6:	4445      	add	r5, r8
 80a6bf8:	f107 071c 	add.w	r7, r7, #28
 80a6bfc:	f47f af74 	bne.w	80a6ae8 <_tzset_unlocked_r+0x198>
 80a6c00:	6860      	ldr	r0, [r4, #4]
 80a6c02:	f7ff fdf5 	bl	80a67f0 <__tzcalc_limits>
 80a6c06:	6a22      	ldr	r2, [r4, #32]
 80a6c08:	4b07      	ldr	r3, [pc, #28]	; (80a6c28 <_tzset_unlocked_r+0x2d8>)
 80a6c0a:	601a      	str	r2, [r3, #0]
 80a6c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a6c0e:	1a9b      	subs	r3, r3, r2
 80a6c10:	4a07      	ldr	r2, [pc, #28]	; (80a6c30 <_tzset_unlocked_r+0x2e0>)
 80a6c12:	bf18      	it	ne
 80a6c14:	2301      	movne	r3, #1
 80a6c16:	6013      	str	r3, [r2, #0]
 80a6c18:	b00d      	add	sp, #52	; 0x34
 80a6c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6c1e:	bf00      	nop
 80a6c20:	080a8368 	.word	0x080a8368
 80a6c24:	20000750 	.word	0x20000750
 80a6c28:	20000758 	.word	0x20000758
 80a6c2c:	080a836b 	.word	0x080a836b
 80a6c30:	20000754 	.word	0x20000754
 80a6c34:	200000d8 	.word	0x200000d8
 80a6c38:	20000743 	.word	0x20000743
 80a6c3c:	080a836f 	.word	0x080a836f
 80a6c40:	080a8392 	.word	0x080a8392
 80a6c44:	080a837e 	.word	0x080a837e
 80a6c48:	080a8391 	.word	0x080a8391
 80a6c4c:	20000738 	.word	0x20000738

080a6c50 <_findenv_r>:
 80a6c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6c54:	4607      	mov	r7, r0
 80a6c56:	468b      	mov	fp, r1
 80a6c58:	4690      	mov	r8, r2
 80a6c5a:	f000 f8d7 	bl	80a6e0c <__env_lock>
 80a6c5e:	4b19      	ldr	r3, [pc, #100]	; (80a6cc4 <_findenv_r+0x74>)
 80a6c60:	681d      	ldr	r5, [r3, #0]
 80a6c62:	469a      	mov	sl, r3
 80a6c64:	b13d      	cbz	r5, 80a6c76 <_findenv_r+0x26>
 80a6c66:	465c      	mov	r4, fp
 80a6c68:	4623      	mov	r3, r4
 80a6c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6c6e:	b142      	cbz	r2, 80a6c82 <_findenv_r+0x32>
 80a6c70:	2a3d      	cmp	r2, #61	; 0x3d
 80a6c72:	461c      	mov	r4, r3
 80a6c74:	d1f8      	bne.n	80a6c68 <_findenv_r+0x18>
 80a6c76:	4638      	mov	r0, r7
 80a6c78:	f000 f8c9 	bl	80a6e0e <__env_unlock>
 80a6c7c:	2000      	movs	r0, #0
 80a6c7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6c82:	ebcb 0404 	rsb	r4, fp, r4
 80a6c86:	46a9      	mov	r9, r5
 80a6c88:	f859 0b04 	ldr.w	r0, [r9], #4
 80a6c8c:	2800      	cmp	r0, #0
 80a6c8e:	d0f2      	beq.n	80a6c76 <_findenv_r+0x26>
 80a6c90:	4622      	mov	r2, r4
 80a6c92:	4659      	mov	r1, fp
 80a6c94:	f7ff fc6b 	bl	80a656e <strncmp>
 80a6c98:	b988      	cbnz	r0, 80a6cbe <_findenv_r+0x6e>
 80a6c9a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a6c9e:	191e      	adds	r6, r3, r4
 80a6ca0:	5d1b      	ldrb	r3, [r3, r4]
 80a6ca2:	2b3d      	cmp	r3, #61	; 0x3d
 80a6ca4:	d10b      	bne.n	80a6cbe <_findenv_r+0x6e>
 80a6ca6:	f8da 3000 	ldr.w	r3, [sl]
 80a6caa:	4638      	mov	r0, r7
 80a6cac:	1aed      	subs	r5, r5, r3
 80a6cae:	10ad      	asrs	r5, r5, #2
 80a6cb0:	f8c8 5000 	str.w	r5, [r8]
 80a6cb4:	f000 f8ab 	bl	80a6e0e <__env_unlock>
 80a6cb8:	1c70      	adds	r0, r6, #1
 80a6cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6cbe:	464d      	mov	r5, r9
 80a6cc0:	e7e1      	b.n	80a6c86 <_findenv_r+0x36>
 80a6cc2:	bf00      	nop
 80a6cc4:	20000120 	.word	0x20000120

080a6cc8 <_getenv_r>:
 80a6cc8:	b507      	push	{r0, r1, r2, lr}
 80a6cca:	aa01      	add	r2, sp, #4
 80a6ccc:	f7ff ffc0 	bl	80a6c50 <_findenv_r>
 80a6cd0:	b003      	add	sp, #12
 80a6cd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a6cd8 <__gettzinfo>:
 80a6cd8:	4800      	ldr	r0, [pc, #0]	; (80a6cdc <__gettzinfo+0x4>)
 80a6cda:	4770      	bx	lr
 80a6cdc:	200000e0 	.word	0x200000e0

080a6ce0 <gmtime_r>:
 80a6ce0:	6802      	ldr	r2, [r0, #0]
 80a6ce2:	4b46      	ldr	r3, [pc, #280]	; (80a6dfc <gmtime_r+0x11c>)
 80a6ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6ce6:	fb92 f4f3 	sdiv	r4, r2, r3
 80a6cea:	fb03 2214 	mls	r2, r3, r4, r2
 80a6cee:	2a00      	cmp	r2, #0
 80a6cf0:	bfbc      	itt	lt
 80a6cf2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a6cf6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a6cfa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a6cfe:	fb92 f3f0 	sdiv	r3, r2, r0
 80a6d02:	fb00 2213 	mls	r2, r0, r3, r2
 80a6d06:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a6d0a:	608b      	str	r3, [r1, #8]
 80a6d0c:	fb92 f3f0 	sdiv	r3, r2, r0
 80a6d10:	fb00 2213 	mls	r2, r0, r3, r2
 80a6d14:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a6d18:	bfac      	ite	ge
 80a6d1a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a6d1e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a6d22:	604b      	str	r3, [r1, #4]
 80a6d24:	600a      	str	r2, [r1, #0]
 80a6d26:	2307      	movs	r3, #7
 80a6d28:	1ce2      	adds	r2, r4, #3
 80a6d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 80a6d2e:	4d34      	ldr	r5, [pc, #208]	; (80a6e00 <gmtime_r+0x120>)
 80a6d30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a6d34:	fb94 f5f5 	sdiv	r5, r4, r5
 80a6d38:	1ad3      	subs	r3, r2, r3
 80a6d3a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a6d3e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a6d42:	618b      	str	r3, [r1, #24]
 80a6d44:	4b2f      	ldr	r3, [pc, #188]	; (80a6e04 <gmtime_r+0x124>)
 80a6d46:	4830      	ldr	r0, [pc, #192]	; (80a6e08 <gmtime_r+0x128>)
 80a6d48:	fb03 4405 	mla	r4, r3, r5, r4
 80a6d4c:	fbb4 f2f2 	udiv	r2, r4, r2
 80a6d50:	fbb4 f3f7 	udiv	r3, r4, r7
 80a6d54:	fbb4 f0f0 	udiv	r0, r4, r0
 80a6d58:	4422      	add	r2, r4
 80a6d5a:	1ad2      	subs	r2, r2, r3
 80a6d5c:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a6d60:	1a13      	subs	r3, r2, r0
 80a6d62:	f240 126d 	movw	r2, #365	; 0x16d
 80a6d66:	fbb3 f6f6 	udiv	r6, r3, r6
 80a6d6a:	fbb3 f0f2 	udiv	r0, r3, r2
 80a6d6e:	fbb3 f3f7 	udiv	r3, r3, r7
 80a6d72:	4434      	add	r4, r6
 80a6d74:	1ae3      	subs	r3, r4, r3
 80a6d76:	fb02 3310 	mls	r3, r2, r0, r3
 80a6d7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a6d7e:	2499      	movs	r4, #153	; 0x99
 80a6d80:	3202      	adds	r2, #2
 80a6d82:	fbb2 f2f4 	udiv	r2, r2, r4
 80a6d86:	4354      	muls	r4, r2
 80a6d88:	1ca6      	adds	r6, r4, #2
 80a6d8a:	2405      	movs	r4, #5
 80a6d8c:	fbb6 f4f4 	udiv	r4, r6, r4
 80a6d90:	2a0a      	cmp	r2, #10
 80a6d92:	bf34      	ite	cc
 80a6d94:	2602      	movcc	r6, #2
 80a6d96:	f06f 0609 	mvncs.w	r6, #9
 80a6d9a:	4416      	add	r6, r2
 80a6d9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6da0:	fb02 0505 	mla	r5, r2, r5, r0
 80a6da4:	1c5f      	adds	r7, r3, #1
 80a6da6:	2e01      	cmp	r6, #1
 80a6da8:	bf98      	it	ls
 80a6daa:	3501      	addls	r5, #1
 80a6dac:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a6db0:	eba7 0704 	sub.w	r7, r7, r4
 80a6db4:	d302      	bcc.n	80a6dbc <gmtime_r+0xdc>
 80a6db6:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a6dba:	e014      	b.n	80a6de6 <gmtime_r+0x106>
 80a6dbc:	0782      	lsls	r2, r0, #30
 80a6dbe:	d105      	bne.n	80a6dcc <gmtime_r+0xec>
 80a6dc0:	2464      	movs	r4, #100	; 0x64
 80a6dc2:	fbb0 f2f4 	udiv	r2, r0, r4
 80a6dc6:	fb04 0212 	mls	r2, r4, r2, r0
 80a6dca:	b94a      	cbnz	r2, 80a6de0 <gmtime_r+0x100>
 80a6dcc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6dd0:	fbb0 f4f2 	udiv	r4, r0, r2
 80a6dd4:	fb02 0014 	mls	r0, r2, r4, r0
 80a6dd8:	fab0 f280 	clz	r2, r0
 80a6ddc:	0952      	lsrs	r2, r2, #5
 80a6dde:	e000      	b.n	80a6de2 <gmtime_r+0x102>
 80a6de0:	2201      	movs	r2, #1
 80a6de2:	333b      	adds	r3, #59	; 0x3b
 80a6de4:	441a      	add	r2, r3
 80a6de6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a6dea:	2300      	movs	r3, #0
 80a6dec:	61ca      	str	r2, [r1, #28]
 80a6dee:	614d      	str	r5, [r1, #20]
 80a6df0:	610e      	str	r6, [r1, #16]
 80a6df2:	60cf      	str	r7, [r1, #12]
 80a6df4:	620b      	str	r3, [r1, #32]
 80a6df6:	4608      	mov	r0, r1
 80a6df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6dfa:	bf00      	nop
 80a6dfc:	00015180 	.word	0x00015180
 80a6e00:	00023ab1 	.word	0x00023ab1
 80a6e04:	fffdc54f 	.word	0xfffdc54f
 80a6e08:	00023ab0 	.word	0x00023ab0

080a6e0c <__env_lock>:
 80a6e0c:	4770      	bx	lr

080a6e0e <__env_unlock>:
 80a6e0e:	4770      	bx	lr

080a6e10 <dynalib_user>:
 80a6e10:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a6e20:	0000 0000 227b 7473 7461 7375 3a22 2522     ....{"status":"%
 80a6e30:	2273 222c 6974 656d 3a22 2522 322e 3a64     s","time":"%.2d:
 80a6e40:	2e25 6432 253a 322e 2264 222c 6164 6574     %.2d:%.2d","date
 80a6e50:	3a22 2522 322e 2e64 2e25 6432 252e 322e     ":"%.2d.%.2d.%.2
 80a6e60:	2264 222c 756c 6665 6574 2272 223a 4850     d","luefter":"PH
 80a6e70:	544f 4e4f 2c22 6f22 7470 6f69 226e 223a     OTON","option":"
 80a6e80:	7325 7d22 7700 7361 6573 7372 6174 646e     %s"}.wasserstand
 80a6e90:	7b00 7322 6174 7574 2273 223a 7325 2c22     .{"status":"%s",
 80a6ea0:	7422 6d69 2265 223a 2e25 6432 253a 322e     "time":"%.2d:%.2
 80a6eb0:	3a64 2e25 6432 2c22 6422 7461 2265 223a     d:%.2d","date":"
 80a6ec0:	2e25 6432 252e 322e 2e64 2e25 6432 2c22     %.2d.%.2d.%.2d",
 80a6ed0:	6c22 6575 7466 7265 3a22 5022 4f48 4f54     "luefter":"PHOTO
 80a6ee0:	224e 222c 706f 6974 6e6f 3a22 2522 2073     N","option":"%s 
 80a6ef0:	3225 2264 007d 2520 2073 6425 0020 6f6e     %2d"}. %s %d .no
 80a6f00:	2074 7061 6c70 6369 6261 656c 5500 6b6e     t applicable.Unk
 80a6f10:	6f6e 6e77 6520 636e 646f 6e69 2e67 4400     nown encoding..D
 80a6f20:	6365 6d69 6c61 203a 2000 0028 6942 2974     ecimal: . (.Bit)
 80a6f30:	4220 6e69 7261 3a79 0020 5420 6972 532d      Binary: . Tri-S
 80a6f40:	6174 6574 203a 2000 7550 736c 4c65 6e65     tate: . PulseLen
 80a6f50:	7467 3a68 0020 6d20 6369 6f72 6573 6f63     gth: . microseco
 80a6f60:	646e 0073 5020 6f72 6f74 6f63 3a6c 0020     nds. Protocol: .
 80a6f70:	6152 2077 6164 6174 203a 2c00 2000 6c75     Raw data: .,. ul
 80a6f80:	7274 2061 6f73 696e 2063 6964 7473 6e61     tra sonic distan
 80a6f90:	6563 0020 7520 746c 6172 6420 7369 6174     ce . ultra dista
 80a6fa0:	636e 2065 203a 6425 6d20 006d 5720 5241     nce : %d mm. WAR
 80a6fb0:	494e 474e 203a 6146 6c69 6465 7420 206f     NING: Failed to 
 80a6fc0:	6572 6461 7520 746c 6172 6973 696e 2063     read ultrasinic 
 80a6fd0:	6573 736e 726f 5700 5241 494e 474e 203a     sensor.WARNING: 
 80a6fe0:	6146 6c69 6465 7420 206f 6572 6461 7520     Failed to read u
 80a6ff0:	746c 6172 6f73 696e 2063 6573 736e 726f     ltrasonic sensor
 80a7000:	5700 5341 4553 0052 7520 746c 6172 6520     .WASSER. ultra e
 80a7010:	7272 726f 3a20 2520 2064 2000 6c75 7274     rror : %d . ultr
 80a7020:	2061 6964 7473 6e61 6563 6120 6576 6172     a distance avera
 80a7030:	6567 3a20 2520 2064 6d6d 2000 6c75 7274     ge : %d mm. ultr
 80a7040:	2061 656c 6576 206c 7661 7265 6761 2065     a level average 
 80a7050:	203a 6425 6d20 006d 4157 5353 5245 5453     : %d mm.WASSERST
 80a7060:	4e41 2044 203a 2000 5243 2043 7245 6f72     AND : . CRC Erro
 80a7070:	2072 2000 6547 2074 6554 706d 7265 7461     r . Get Temperat
 80a7080:	7275 2065 5300 6e65 6f73 2072 4449 2520     ure .Sensor ID %
 80a7090:	3430 2064 756e 3d6d 6425 5420 6d65 6570     04d num=%d Tempe
 80a70a0:	6172 7574 6572 2520 322e 2066 2043 0a20     rature %.2f C  .
 80a70b0:	000d 6b20 253d 2064 2000 4f52 3d4d 3025     .. k=%d . ROM=%0
 80a70c0:	5832 3025 5832 3025 5832 3025 5832 3025     2X%02X%02X%02X%0
 80a70d0:	5832 3025 5832 3025 5832 3025 5832 2000     2X%02X%02X%02X. 
 80a70e0:	4449 253d 3230 0058                         ID=%02X.

080a70e8 <_ZTV14WidgetTerminal>:
	...
 80a70f0:	0cf9 080a 0d31 080a 2119 080a 3d83 080a     ....1....!...=..

080a7100 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
 80a7100:	6576 0072 2e30 2e35 0031 2d68 6562 7461     ver.0.5.1.h-beat
 80a7110:	3100 0030 7562 6666 692d 006e 3031 3432     .10.buff-in.1024
 80a7120:	6400 7665 5000 7261 6974 6c63 2065 6850     .dev.Particle Ph
 80a7130:	746f 6e6f 6200 6975 646c 4e00 766f 2020     oton.build.Nov  
 80a7140:	2032 3032 3931 3120 3a38 3133 343a 0035     2 2019 18:31:45.
 80a7150:	5d00 0020 5546 4b4e 502d 4d55 4550 4520     .] .FUNK-PUMPE E
 80a7160:	4e49 4547 4353 4148 544c 5445 0020 6925     INGESCHALTET .%i
 80a7170:	2500 696c 4300 6e6f 656e 7463 6e69 2067     .%li.Connecting 
 80a7180:	6f74 0020 2820 3025 6432 253a 3230 2964     to . (%02d:%02d)
 80a7190:	2000 7270 706f 736f 6465 7320 656c 7065     . proposed sleep
 80a71a0:	6420 7275 7461 6f69 3a6e 2520 2064 696d      duration: %d mi
 80a71b0:	756e 6574 0073 2520 322e 2d64 2e25 6432     nutes. %.2d-%.2d
 80a71c0:	252d 2064 2e25 6432 253a 322e 3a64 2e25     -%d %.2d:%.2d:%.
 80a71d0:	6432 0020 7420 6f6e 3a77 2520 2064 2000     2d . tnow: %d . 
 80a71e0:	7374 675f 6569 7373 6e65 203a 6425 0020     ts_giessen: %d .
 80a71f0:	4620 6e75 206b 7550 706d 2065 2020 2d20      Funk Pumpe    -
 80a7200:	203e 7473 7461 7375 203a 6425 7420 5f73     > status: %d ts_
 80a7210:	666f 3a66 2520 2064 2000 614d 6e69 5020     off: %d . Main P
 80a7220:	6d75 6570 2020 2020 3e2d 7320 6174 7574     umpe    -> statu
 80a7230:	3a73 2520 2064 7374 6f5f 6666 203a 6425     s: %d ts_off: %d
 80a7240:	0020 5220 7365 7265 6576 5020 6d75 6570      . Reserve Pumpe
 80a7250:	2d20 203e 7473 7461 7375 203a 6425 7420      -> status: %d t
 80a7260:	5f73 666f 3a66 2520 2064 2000 6177 6574     s_off: %d . wate
 80a7270:	6c72 7665 6c65 203a 6425 0020 7720 6669     rlevel: %d . wif
 80a7280:	3d69 7325 6320 6f6c 6475 253d 2073 6c73     i=%s cloud=%s sl
 80a7290:	776f 635f 756f 746e 7265 253d 2064 4800     ow_counter=%d .H
 80a72a0:	5541 5450 502d 4d55 4550 4520 4e49 4547     AUPT-PUMPE EINGE
 80a72b0:	4353 4148 544c 5445 0020 4148 5055 2d54     SCHALTET .HAUPT-
 80a72c0:	5550 504d 2045 5541 4753 5345 4843 4c41     PUMPE AUSGESCHAL
 80a72d0:	4554 2054 5200 5345 5245 4556 502d 4d55     TET .RESERVE-PUM
 80a72e0:	4550 4520 4e49 4547 4353 4148 544c 5445     PE EINGESCHALTET
 80a72f0:	0020 4552 4553 5652 2d45 5550 504d 2045      .RESERVE-PUMPE 
 80a7300:	5541 4753 5345 4843 4c41 4554 2054 4600     AUSGESCHALTET .F
 80a7310:	4e55 2d4b 5550 504d 2045 5541 4753 5345     UNK-PUMPE AUSGES
 80a7320:	4843 4c41 4554 2054 5300 454c 5045 6420     CHALTET .SLEEP d
 80a7330:	7369 6261 656c 2064 7962 4820 2057 6970     isabled by HW pi
 80a7340:	206e 4300 4e4f 5254 4c4f 5300 454c 5045     n .CONTROL.SLEEP
 80a7350:	6420 7369 6261 656c 2064 7962 5320 2057      disabled by SW 
 80a7360:	2000 6f64 746e 6c53 6565 2070 6970 206e     . dontSleep pin 
 80a7370:	203a 6425 0020 6e69 7000 6d77 6400 0077     : %d .in.pwm.dw.
 80a7380:	7761 4900 766e 6c61 6469 4820 2057 6d63     aw.Invalid HW cm
 80a7390:	3a64 0020 6552 6461 2079 7028 6e69 3a67     d: .Ready (ping:
 80a73a0:	0020 736d 2e29 4900 766e 6c61 6469 6120      .ms)..Invalid a
 80a73b0:	7475 2068 6f74 656b 006e 6f43 6e6e 6365     uth token.Connec
 80a73c0:	2074 6166 6c69 6465 202e 6f63 6564 203a     t failed. code: 
 80a73d0:	5000 6361 656b 2074 6f74 206f 6962 3a67     .Packet too big:
 80a73e0:	0020 6552 6461 0079 6552 6964 6572 7463      .Ready.Redirect
 80a73f0:	6e69 2067 6f74 0020 6553 7672 7265 203a     ing to .Server: 
 80a7400:	4800 6165 7472 6562 7461 7420 6d69 6f65     .Heartbeat timeo
 80a7410:	7475 4c00 676f 6e69 7420 6d69 6f65 7475     ut.Login timeout
 80a7420:	7600 0077 4820 6c65 6f6c 0020 6220 3a20     .vw. Hello . b :
 80a7430:	4220 756c 656d 206e 6967 7365 6573 006e      Blumen giessen.
 80a7440:	7220 3a20 3420 3333 484d 207a 5852 6f20      r : 433MHz RX o
 80a7450:	006e 6f20 3a20 3420 3333 484d 207a 5852     n. o : 433MHz RX
 80a7460:	6f20 6666 2000 2073 203a 6c73 6565 2070      off. s : sleep 
 80a7470:	6e65 6261 656c 2064 2000 2070 203a 6c73     enabled . p : sl
 80a7480:	6565 2070 6964 6173 6c62 6465 0020 7720     eep disabled . w
 80a7490:	3a20 7320 6f74 6572 6320 6e6f 6966 2067      : store config 
 80a74a0:	6f74 4520 5045 4f52 204d 2000 2078 203a     to EEPROM . x : 
 80a74b0:	6c75 7274 2061 6f73 696e 2063 656d 7361     ultra sonic meas
 80a74c0:	7275 6d65 6e65 2074 2000 6c42 6d75 6e65     urement . Blumen
 80a74d0:	6947 7365 6573 286e 2029 4200 554c 454d     Giessen() .BLUME
 80a74e0:	204e 4947 5345 4553 204e 5349 2054 4544     N GIESSEN IST DE
 80a74f0:	4b41 4954 4956 5245 2054 2000 6154 6b6e     AKTIVIERT . Tank
 80a7500:	7566 6c65 656c 286e 2029 5400 4e41 204b     fuellen() .TANK 
 80a7510:	5546 4c45 454c 204e 0020 4c53 4545 2050     FUELLEN  .SLEEP 
 80a7520:	694d 756e 6574 2073 203a 2000 2a2a 202a     Minutes : . *** 
 80a7530:	4c53 4545 2050 2a2a 202a 2000 2a2a 202a     SLEEP *** . *** 
 80a7540:	4157 454b 5520 2050 2a2a 202a 5700 4b41     WAKE UP *** .WAK
 80a7550:	2045 5055 0020 3420 3333 484d 207a 6d45     E UP . 433MHz Em
 80a7560:	6670 6561 676e 7265 6520 6e69 6567 6373     pfaenger eingesc
 80a7570:	6168 746c 7465 2020 2000 3334 4d33 7a48     haltet  . 433MHz
 80a7580:	6d45 6670 6561 676e 7265 6120 7375 6567     Empfaenger ausge
 80a7590:	6373 6168 746c 7465 2020 5000 4f48 4f54     schaltet  .PHOTO
 80a75a0:	204e 5753 5320 454c 5045 4420 5349 4241     N SW SLEEP DISAB
 80a75b0:	454c 2044 5942 4220 5455 4f54 204e 2000     LED BY BUTTON . 
 80a75c0:	6c53 6565 2070 6f4d 6564 4420 7369 6261     Sleep Mode Disab
 80a75d0:	656c 2064 7962 6220 796c 6b6e 6220 7475     led by blynk but
 80a75e0:	6f74 206e 5000 4f48 4f54 204e 5753 5320     ton .PHOTON SW S
 80a75f0:	454c 5045 4520 414e 4c42 4445 4220 2059     LEEP ENABLED BY 
 80a7600:	5542 5454 4e4f 0020 5320 656c 7065 4d20     BUTTON . Sleep M
 80a7610:	646f 2065 6e45 6261 656c 2064 7962 6220     ode Enabled by b
 80a7620:	796c 6b6e 6220 7475 6f74 206e 5200 7365     lynk button .Res
 80a7630:	7265 6576 5020 6d75 6570 6520 6e69 6567     erve Pumpe einge
 80a7640:	6373 6168 746c 7465 6220 2079 7562 7474     schaltet by butt
 80a7650:	6e6f 0020 5220 7365 7265 6576 5020 6d75     on . Reserve Pum
 80a7660:	6570 6520 6e69 6567 6373 6168 746c 7465     pe eingeschaltet
 80a7670:	6220 2079 7562 7474 6e6f 2020 2000 6552      by button  . Re
 80a7680:	6573 7672 2065 7550 706d 2065 7561 6773     serve Pumpe ausg
 80a7690:	7365 6863 6c61 6574 2074 7962 6220 7475     eschaltet by but
 80a76a0:	6f74 206e 4200 756c 656d 206e 6967 7365     ton .Blumen gies
 80a76b0:	6573 206e 6564 6b61 6974 6976 7265 2074     sen deaktiviert 
 80a76c0:	4200 756c 656d 206e 6967 7365 6573 206e     .Blumen giessen 
 80a76d0:	6b61 6974 6976 7265 2074 2000 7372 206c     aktiviert . rsl 
 80a76e0:	2031 6965 206e 2000 7372 206c 2031 7561     1 ein . rsl 1 au
 80a76f0:	2073 2000 7372 206c 2032 6965 206e 2000     s . rsl 2 ein . 
 80a7700:	7372 206c 2032 7561 2073 2000 7372 206c     rsl 2 aus . rsl 
 80a7710:	2033 6965 206e 2000 7372 206c 2033 7561     3 ein . rsl 3 au
 80a7720:	2073 2000 7372 206c 2035 6965 206e 2000     s . rsl 5 ein . 
 80a7730:	7372 206c 2035 7561 2073 2000 6577 6869     rsl 5 aus . weih
 80a7740:	616e 6863 6574 206e 6965 206e 0020 7720     nachten ein  . w
 80a7750:	6965 6e68 6361 7468 6e65 6120 7375 2020     eihnachten aus  
 80a7760:	2d00 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     .---------------
 80a7770:	2d2d 2d2d 2d2d 002d 2020 2020 2020 6557     -------.      We
 80a7780:	636c 6d6f 0065 200a 2020 5f20 5f5f 2020     lcome..    ___  
 80a7790:	5f5f 2020 2020 2020 2020 2020 5f5f 200a     __          __. 
 80a77a0:	2020 202f 205f 2f29 2f20 205f 5f5f 5f5f       / _ )/ /_ ____
 80a77b0:	205f 2f20 2f20 5f5f 200a 2f20 5f20 2020     _  / /__.  / _  
 80a77c0:	202f 202f 2f2f 2f20 5f20 5c20 202f 2720     / / // / _ \/  '
 80a77d0:	2f5f 200a 5f2f 5f5f 2f5f 2f5f 5f5c 202c     _/. /____/_/\_, 
 80a77e0:	5f2f 2f2f 2f5f 2f5f 5f5c 0a5c 2020 2020     /_//_/_/\_\.    
 80a77f0:	2020 2020 5f2f 5f5f 202f 3076 352e 312e         /___/ v0.5.1
 80a7800:	6f20 206e 6150 7472 6369 656c 5020 6f68      on Particle Pho
 80a7810:	6f74 0a6e 6200 796c 6b6e 632d 6f6c 6475     ton..blynk-cloud
 80a7820:	632e 6d6f 5300 5445 5055 522f 5345 5445     .com.SETUP/RESET
 80a7830:	0020 656c 0064 7320 7465 7075 0020 7473      .led. setup .st
 80a7840:	665f 6e75 5f6b 7570 706d 0065 6f64 746e     _funk_pumpe.dont
 80a7850:	6c53 6565 0070 6f64 746e 6c53 6565 5370     Sleep.dontSleepS
 80a7860:	0057 5020 6f68 6f74 206e 5748 4920 2044     W. Photon HW ID 
 80a7870:	4300 6e6f 7274 6c6f 762e 7265 6973 6e6f     .Control.version
 80a7880:	2020 2020 3a20 2520 2064 4300 6e6f 7274          : %d .Contr
 80a7890:	6c6f 642e 6e6f 5374 656c 7065 2020 3a20     ol.dontSleep   :
 80a78a0:	2520 2064 4300 6e6f 7274 6c6f 642e 6e6f      %d .Control.don
 80a78b0:	4774 6569 7373 6e65 3a20 2520 2064 7400     tGiessen : %d .t
 80a78c0:	6d65 2070 6e69 3a20 2520 2064 7420 6d65     emp in : %d  tem
 80a78d0:	2070 756f 2074 203a 6425 0020 4554 504d     p out : %d .TEMP
 80a78e0:	4920 3a4e 6425 4f20 5455 253a 0064 7320      IN:%d OUT:%d. s
 80a78f0:	6f6c 2077 6361 6974 6e6f 2073 6f64 656e     low actions done
 80a7900:	0020 5220 2058 6f43 6564 3a20 2520 2064      . RX Code : %d 
 80a7910:	5200 2058 6f43 6564 0020 4520 5252 524f     .RX Code . ERROR
 80a7920:	7720 6968 6863 6e20 746f 7620 6c61 6469      which not valid
 80a7930:	0020 4520 5252 524f 7320 6174 6574 6e20      . ERROR state n
 80a7940:	746f 7620 6c61 6469 0020 6553 646e 2065     ot valid .Sende 
 80a7950:	6f43 6564 3a20 0020 4620 6865 656c 2072     Code : . Fehler 
 80a7960:	203a 6f6b 6e6e 6574 4320 646f 2065 696e     : konnte Code ni
 80a7970:	6863 2074 6966 646e 6e65 0020 3030 3130     cht finden .0001
 80a7980:	3030 3130 3030 3030 3130 3130 3130 3130     0001000001010101
 80a7990:	3030 3031 3000 3030 3031 3030 3031 3030     0010.00010001000
 80a79a0:	3030 3031 3031 3031 3031 3030 0031 3030     0010101010001.00
 80a79b0:	3130 3030 3130 3030 3130 3030 3130 3130     0100010001000101
 80a79c0:	3130 3130 3030 3000 3030 3031 3030 3031     010100.000100010
 80a79d0:	3030 3031 3030 3031 3031 3031 3030 0031     001000101010001.
 80a79e0:	3030 3130 3030 3130 3030 3130 3130 3030     0001000100010100
 80a79f0:	3130 3130 3030 3031 3000 3030 3031 3030     01010010.0001000
 80a7a00:	3031 3030 3031 3031 3030 3031 3031 3030     1000101000101000
 80a7a10:	0031 3130 3130 3030 3130 3030 3030 3030     1.01010001000000
 80a7a20:	3030 3030 3130 3130 3130 3000 3031 3031     0000010101.01010
 80a7a30:	3030 3031 3030 3030 3030 3030 3030 3031     0010000000000010
 80a7a40:	3031 0030 3130 3130 3030 3130 3130 3030     100.010100010100
 80a7a50:	3030 3030 3030 3130 3130 3130 3000 3031     000000010101.010
 80a7a60:	3031 3030 3031 3031 3030 3030 3030 3030     1000101000000000
 80a7a70:	3031 3031 0030 0000                         10100...

080a7a78 <_ZL23BlynkWriteHandlerVector>:
 80a7a78:	2f6b 080a 218d 080a 21bd 080a 21ed 080a     k/...!...!...!..
 80a7a88:	221d 080a 2251 080a 2281 080a 22b1 080a     ."..Q"..."..."..
 80a7a98:	22e5 080a 2311 080a 2341 080a 2371 080a     ."...#..A#..q#..
 80a7aa8:	23b1 080a 2f6b 080a 2f6b 080a 2f6b 080a     .#..k/..k/..k/..
 80a7ab8:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7ac8:	2f6b 080a 1ed5 080a 2f6b 080a 2f6b 080a     k/......k/..k/..
 80a7ad8:	2f6b 080a 1f11 080a 1f5d 080a 1fa9 080a     k/......].......
 80a7ae8:	1fe5 080a 2021 080a 2061 080a 20a1 080a     ....! ..a ... ..
 80a7af8:	20dd 080a 2f6b 080a 2f6b 080a 2f6b 080a     . ..k/..k/..k/..
 80a7b08:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7b18:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7b28:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7b38:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7b48:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7b58:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7b68:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7b78:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7b88:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7b98:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7ba8:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7bb8:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7bc8:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7bd8:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7be8:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7bf8:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7c08:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7c18:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7c28:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7c38:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7c48:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7c58:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..
 80a7c68:	2f6b 080a 2f6b 080a 2f6b 080a 2f6b 080a     k/..k/..k/..k/..

080a7c78 <_ZL22BlynkReadHandlerVector>:
 80a7c78:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7c88:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7c98:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7ca8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7cb8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7cc8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7cd8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7ce8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7cf8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d08:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d18:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d28:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d38:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d48:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d58:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d68:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d78:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d88:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7d98:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7da8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7db8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7dc8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7dd8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7de8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7df8:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7e08:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7e18:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7e28:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7e38:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7e48:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7e58:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7e68:	2f69 080a 2f69 080a 2f69 080a 2f69 080a     i/..i/..i/..i/..
 80a7e78:	3420 3333 484d 207a 6d45 6670 6561 676e      433MHz Empfaeng
 80a7e88:	7265 6120 6762 7365 6863 6c61 6574 2074     er abgeschaltet 
 80a7e98:	0020 5320 656c 7065 4d20 646f 2065 6e65      . Sleep Mode en
 80a7ea8:	6261 656c 2064 2000 6c53 6565 2070 6f4d     abled . Sleep Mo
 80a7eb8:	6564 6420 7369 6261 656c 2064 2000 7453     de disabled . St
 80a7ec8:	726f 2065 4f43 544e 4f52 204c 6e69 4520     ore CONTROL in E
 80a7ed8:	5045 4f52 204d 2000 6c55 7274 7361 6e6f     EPROM . Ultrason
 80a7ee8:	6369 0020                                   ic .

080a7eec <_ZTV8SPIClass>:
	...
 80a7ef4:	3699 080a 369b 080a                         .6...6..

080a7efc <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a7f04:	37ad 080a 37b3 080a 3bcb 080a 37c1 080a     .7...7...;...7..
 80a7f14:	37af 080a                                   .7..

080a7f18 <_ZTV9TCPClient>:
	...
 80a7f20:	0d95 080a 0dd5 080a 3769 080a 3783 080a     ........i7...7..
 80a7f30:	38c9 080a 3833 080a 3805 080a 37ab 080a     .8..38...8...7..
 80a7f40:	3975 080a 3be5 080a 3867 080a 3941 080a     u9...;..g8..A9..
 80a7f50:	3ac3 080a 3b15 080a 3793 080a 3a87 080a     .:...;...7...:..
 80a7f60:	37e5 080a 6977 6972 676e 5400 5043 6c43     .7..wiring.TCPCl
 80a7f70:	6569 746e 7320 636f 656b 3d74 7825 6200     ient socket=%x.b
 80a7f80:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a7f90:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a7fa0:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a7fb0:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a7fc0:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a7fd0:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a7fe0:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a7ff0:	6c64 7265 6100 7070 2500 3130 7530 0020     dler.app.%010u .
 80a8000:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a8010:	203d 6400 7465 6961 736c 3d20 0020 0a0d     = .details = ...
 80a8020:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a8030:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
 80a8040:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a8050:	696e 0063 6c61 006c 2b25 3330 3a64 3025     nic.all.%+03d:%0
 80a8060:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a8070:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a8080 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a8088:	4329 080a 432f 080a 4373 080a 433d 080a     )C../C..sC..=C..
 80a8098:	432b 080a                                   +C..

080a809c <_ZTV9IPAddress>:
	...
 80a80a4:	4919 080a 4909 080a 490b 080a               .I...I...I..

080a80b0 <_ZTV9USBSerial>:
	...
 80a80b8:	49d5 080a 4a25 080a 4a33 080a 3d83 080a     .I..%J..3J...=..
 80a80c8:	4a11 080a 49d7 080a 49ed 080a 4a1f 080a     .J...I...I...J..
 80a80d8:	4a03 080a 49d1 080a                         .J...I..

080a80e0 <_ZTV11USARTSerial>:
	...
 80a80e8:	4bcd 080a 4c1d 080a 4c2b 080a 3d83 080a     .K...L..+L...=..
 80a80f8:	4be1 080a 4c03 080a 4bef 080a 4c17 080a     .K...L...K...L..
 80a8108:	4bcf 080a 4bd3 080a                         .K...K..

080a8110 <_ZTV7TwoWire>:
	...
 80a8118:	4d2d 080a 4d77 080a 4d4f 080a 4d2f 080a     -M..wM..OM../M..
 80a8128:	4d57 080a 4d5f 080a 4d67 080a 4d6f 080a     WM.._M..gM..oM..

080a8138 <_ZTVN5spark9WiFiClassE>:
	...
 80a8140:	4e47 080a 4e3d 080a 4e33 080a 4db1 080a     GN..=N..3N...M..
 80a8150:	3fc1 080a 4e27 080a 4e1b 080a 4e13 080a     .?..'N...N...N..
 80a8160:	4e09 080a 4dff 080a 4dbb 080a               .N...M...M..

080a816c <_ZTVN5spark12NetworkClassE>:
	...
 80a8174:	4e65 080a 4e6f 080a 4e79 080a 4e83 080a     eN..oN..yN...N..
 80a8184:	4e8d 080a 4e99 080a 4ea5 080a 4eb1 080a     .N...N...N...N..
 80a8194:	4eb9 080a 4ec3 080a 4ecd 080a               .N...N...N..

080a81a0 <_ctype_>:
 80a81a0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a81b0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a81c0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a81d0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a81e0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a81f0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a8200:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a8210:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a8220:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a82a4 <__sf_fake_stdin>:
	...

080a82c4 <__sf_fake_stdout>:
	...

080a82e4 <__sf_fake_stderr>:
	...
 80a8304:	0043 0000                                   C...

080a8308 <__month_lengths>:
 80a8308:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a8318:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8328:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8338:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a8348:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8358:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8368:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a8378:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a8388:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a8398:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a83a4 <link_const_variable_data_end>:
 80a83a4:	080a0665 	.word	0x080a0665
 80a83a8:	080a0889 	.word	0x080a0889
 80a83ac:	080a0b1b 	.word	0x080a0b1b
 80a83b0:	080a0bfd 	.word	0x080a0bfd
 80a83b4:	080a0ce1 	.word	0x080a0ce1
 80a83b8:	080a2781 	.word	0x080a2781
 80a83bc:	080a2891 	.word	0x080a2891
 80a83c0:	080a2bc5 	.word	0x080a2bc5
 80a83c4:	080a2da5 	.word	0x080a2da5
 80a83c8:	080a2f55 	.word	0x080a2f55
 80a83cc:	080a2f59 	.word	0x080a2f59
 80a83d0:	080a2f65 	.word	0x080a2f65
 80a83d4:	080a2f99 	.word	0x080a2f99
 80a83d8:	080a3095 	.word	0x080a3095
 80a83dc:	080a3751 	.word	0x080a3751
 80a83e0:	080a3fdd 	.word	0x080a3fdd
 80a83e4:	080a417d 	.word	0x080a417d
 80a83e8:	080a41d5 	.word	0x080a41d5
 80a83ec:	080a4e51 	.word	0x080a4e51
 80a83f0:	080a4f35 	.word	0x080a4f35
 80a83f4:	080a5089 	.word	0x080a5089
 80a83f8:	080a50f5 	.word	0x080a50f5
 80a83fc:	080a5179 	.word	0x080a5179
 80a8400:	080a51fd 	.word	0x080a51fd
 80a8404:	080a52c1 	.word	0x080a52c1
 80a8408:	080a5385 	.word	0x080a5385

080a840c <link_constructors_end>:
 80a840c:	00000000 	.word	0x00000000
