
d:/funkschalter_2018/target/3.3.0/photon/funkschalter_2018.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000093f4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a9410  080a9410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a9418  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000014c  20000000  080a941c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000490  20000150  20000150  00040150  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a9568  080a9568  00039568  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a9590  080a9590  00039590  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014f432  00000000  00000000  00039594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001c5c2  00000000  00000000  001889c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00026644  00000000  00000000  001a4f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a80  00000000  00000000  001cb5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00006850  00000000  00000000  001ce04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039a88  00000000  00000000  001d489c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004fde7  00000000  00000000  0020e324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000c1b7d  00000000  00000000  0025e10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000078e8  00000000  00000000  0031fc88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f006 fe47 	bl	80a6cc0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f006 fe4f 	bl	80a6cdc <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a941c 	.word	0x080a941c
 80a004c:	2000014c 	.word	0x2000014c
 80a0050:	20000150 	.word	0x20000150
 80a0054:	200005e0 	.word	0x200005e0
 80a0058:	200005e0 	.word	0x200005e0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f004 fc7d 	bl	80a495c <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a93d8 	.word	0x080a93d8
 80a0080:	080a9404 	.word	0x080a9404

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f002 b8a2 	b.w	80a21cc <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f002 f9a7 	bl	80a23dc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f004 bc1b 	b.w	80a48cc <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f003 bd95 	b.w	80a3bc4 <malloc>

080a009a <_Znaj>:
 80a009a:	f003 bd93 	b.w	80a3bc4 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f003 bd99 	b.w	80a3bd4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a00b2:	b40e      	push	{r1, r2, r3}
 80a00b4:	b503      	push	{r0, r1, lr}
 80a00b6:	ab03      	add	r3, sp, #12
 80a00b8:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80a00bc:	2101      	movs	r1, #1
        va_start(args, format);
 80a00be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80a00c0:	f004 fa4c 	bl	80a455c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a00c4:	b002      	add	sp, #8
 80a00c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80a00ca:	b003      	add	sp, #12
 80a00cc:	4770      	bx	lr

080a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00ce:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00d0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a00d2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a00d4:	b17c      	cbz	r4, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a00d6:	6863      	ldr	r3, [r4, #4]
 80a00d8:	3b01      	subs	r3, #1
 80a00da:	6063      	str	r3, [r4, #4]
 80a00dc:	b95b      	cbnz	r3, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a00de:	6823      	ldr	r3, [r4, #0]
 80a00e0:	4620      	mov	r0, r4
 80a00e2:	689b      	ldr	r3, [r3, #8]
 80a00e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00e6:	68a3      	ldr	r3, [r4, #8]
 80a00e8:	3b01      	subs	r3, #1
 80a00ea:	60a3      	str	r3, [r4, #8]
 80a00ec:	b91b      	cbnz	r3, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00ee:	6823      	ldr	r3, [r4, #0]
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	68db      	ldr	r3, [r3, #12]
 80a00f4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a00f6:	4628      	mov	r0, r5
 80a00f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a00fc <_Z15WriteToDatabasePcS_>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option)
{
 80a00fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0100:	b088      	sub	sp, #32
 80a0102:	4605      	mov	r5, r0
 80a0104:	460c      	mov	r4, r1
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0106:	f003 fd2d 	bl	80a3b64 <spark_cloud_flag_connected>
    if (Particle.connected() == false)
 80a010a:	b938      	cbnz	r0, 80a011c <_Z15WriteToDatabasePcS_+0x20>
    {
        Serial.printlnf("### WARNING : not connected to cloud. cannot write to database");
 80a010c:	f004 ffb6 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0110:	491f      	ldr	r1, [pc, #124]	; (80a0190 <_Z15WriteToDatabasePcS_+0x94>)
 80a0112:	f7ff ffce 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>

    Serial.printlnf(buffer);
    Particle.publish("wasserstand", buffer, PRIVATE);
    println(option);
    delay(2000);
}
 80a0116:	b008      	add	sp, #32
 80a0118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s\"}", \
 80a011c:	f004 fb26 	bl	80a476c <_ZN9TimeClass4hourEv>
 80a0120:	4606      	mov	r6, r0
 80a0122:	f004 fb2f 	bl	80a4784 <_ZN9TimeClass6minuteEv>
 80a0126:	4607      	mov	r7, r0
 80a0128:	f004 fb38 	bl	80a479c <_ZN9TimeClass6secondEv>
 80a012c:	4680      	mov	r8, r0
 80a012e:	f004 fb41 	bl	80a47b4 <_ZN9TimeClass3dayEv>
 80a0132:	4681      	mov	r9, r0
 80a0134:	f004 fb52 	bl	80a47dc <_ZN9TimeClass5monthEv>
 80a0138:	4682      	mov	sl, r0
 80a013a:	f004 fb57 	bl	80a47ec <_ZN9TimeClass4yearEv>
 80a013e:	4633      	mov	r3, r6
 80a0140:	462a      	mov	r2, r5
 80a0142:	e9cd 0404 	strd	r0, r4, [sp, #16]
 80a0146:	4913      	ldr	r1, [pc, #76]	; (80a0194 <_Z15WriteToDatabasePcS_+0x98>)
 80a0148:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80a014c:	e9cd 7800 	strd	r7, r8, [sp]
 80a0150:	4811      	ldr	r0, [pc, #68]	; (80a0198 <_Z15WriteToDatabasePcS_+0x9c>)
 80a0152:	f003 fd4f 	bl	80a3bf4 <sprintf>
    Serial.printlnf(buffer);
 80a0156:	f004 ff91 	bl	80a507c <_Z16_fetch_usbserialv>
 80a015a:	490f      	ldr	r1, [pc, #60]	; (80a0198 <_Z15WriteToDatabasePcS_+0x9c>)
 80a015c:	f7ff ffa9 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0160:	4b0e      	ldr	r3, [pc, #56]	; (80a019c <_Z15WriteToDatabasePcS_+0xa0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0162:	4a0d      	ldr	r2, [pc, #52]	; (80a0198 <_Z15WriteToDatabasePcS_+0x9c>)
 80a0164:	781b      	ldrb	r3, [r3, #0]
 80a0166:	490e      	ldr	r1, [pc, #56]	; (80a01a0 <_Z15WriteToDatabasePcS_+0xa4>)
 80a0168:	f88d 3000 	strb.w	r3, [sp]
 80a016c:	a806      	add	r0, sp, #24
 80a016e:	233c      	movs	r3, #60	; 0x3c
 80a0170:	f004 fd52 	bl	80a4c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0174:	a807      	add	r0, sp, #28
 80a0176:	f7ff ffaa 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    println(option);
 80a017a:	4620      	mov	r0, r4
 80a017c:	f001 fa60 	bl	80a1640 <_Z7printlnPc>
    delay(2000);
 80a0180:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 80a0184:	b008      	add	sp, #32
 80a0186:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    delay(2000);
 80a018a:	f004 bb45 	b.w	80a4818 <delay>
 80a018e:	bf00      	nop
 80a0190:	080a77fc 	.word	0x080a77fc
 80a0194:	080a783b 	.word	0x080a783b
 80a0198:	20000216 	.word	0x20000216
 80a019c:	20000150 	.word	0x20000150
 80a01a0:	080a789c 	.word	0x080a789c

080a01a4 <_Z15WriteToDatabasePcS_i>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option, int data)
{
 80a01a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a01a8:	b08b      	sub	sp, #44	; 0x2c
 80a01aa:	4606      	mov	r6, r0
 80a01ac:	460c      	mov	r4, r1
 80a01ae:	4615      	mov	r5, r2
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a01b0:	f003 fcd8 	bl	80a3b64 <spark_cloud_flag_connected>
    if (Particle.connected() == false)
 80a01b4:	b938      	cbnz	r0, 80a01c6 <_Z15WriteToDatabasePcS_i+0x22>
    {
        Serial.printlnf("### WARNING : not connected to cloud. cannot write to database");
 80a01b6:	f004 ff61 	bl	80a507c <_Z16_fetch_usbserialv>
 80a01ba:	4924      	ldr	r1, [pc, #144]	; (80a024c <_Z15WriteToDatabasePcS_i+0xa8>)
 80a01bc:	f7ff ff79 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(buffer);
    Particle.publish("wasserstand", buffer, PRIVATE);
    sprintf(buffer," %s %d ", option, data);
    println(option,data);
    delay(2000);
}
 80a01c0:	b00b      	add	sp, #44	; 0x2c
 80a01c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s %2d\"}", \
 80a01c6:	f004 fad1 	bl	80a476c <_ZN9TimeClass4hourEv>
 80a01ca:	4607      	mov	r7, r0
 80a01cc:	f004 fada 	bl	80a4784 <_ZN9TimeClass6minuteEv>
 80a01d0:	4680      	mov	r8, r0
 80a01d2:	f004 fae3 	bl	80a479c <_ZN9TimeClass6secondEv>
 80a01d6:	4681      	mov	r9, r0
 80a01d8:	f004 faec 	bl	80a47b4 <_ZN9TimeClass3dayEv>
 80a01dc:	4682      	mov	sl, r0
 80a01de:	f004 fafd 	bl	80a47dc <_ZN9TimeClass5monthEv>
 80a01e2:	4683      	mov	fp, r0
 80a01e4:	f004 fb02 	bl	80a47ec <_ZN9TimeClass4yearEv>
 80a01e8:	463b      	mov	r3, r7
 80a01ea:	4632      	mov	r2, r6
 80a01ec:	e9cd b003 	strd	fp, r0, [sp, #12]
 80a01f0:	4917      	ldr	r1, [pc, #92]	; (80a0250 <_Z15WriteToDatabasePcS_i+0xac>)
 80a01f2:	e9cd 4505 	strd	r4, r5, [sp, #20]
 80a01f6:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80a01fa:	f8cd 8000 	str.w	r8, [sp]
 80a01fe:	4815      	ldr	r0, [pc, #84]	; (80a0254 <_Z15WriteToDatabasePcS_i+0xb0>)
 80a0200:	f003 fcf8 	bl	80a3bf4 <sprintf>
    Serial.printlnf(buffer);
 80a0204:	f004 ff3a 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0208:	4912      	ldr	r1, [pc, #72]	; (80a0254 <_Z15WriteToDatabasePcS_i+0xb0>)
 80a020a:	f7ff ff52 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a020e:	4b12      	ldr	r3, [pc, #72]	; (80a0258 <_Z15WriteToDatabasePcS_i+0xb4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0210:	4a10      	ldr	r2, [pc, #64]	; (80a0254 <_Z15WriteToDatabasePcS_i+0xb0>)
 80a0212:	781b      	ldrb	r3, [r3, #0]
 80a0214:	4911      	ldr	r1, [pc, #68]	; (80a025c <_Z15WriteToDatabasePcS_i+0xb8>)
 80a0216:	f88d 3000 	strb.w	r3, [sp]
 80a021a:	a808      	add	r0, sp, #32
 80a021c:	233c      	movs	r3, #60	; 0x3c
 80a021e:	f004 fcfb 	bl	80a4c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0222:	a809      	add	r0, sp, #36	; 0x24
 80a0224:	f7ff ff53 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sprintf(buffer," %s %d ", option, data);
 80a0228:	462b      	mov	r3, r5
 80a022a:	4622      	mov	r2, r4
 80a022c:	490c      	ldr	r1, [pc, #48]	; (80a0260 <_Z15WriteToDatabasePcS_i+0xbc>)
 80a022e:	4809      	ldr	r0, [pc, #36]	; (80a0254 <_Z15WriteToDatabasePcS_i+0xb0>)
 80a0230:	f003 fce0 	bl	80a3bf4 <sprintf>
    println(option,data);
 80a0234:	4620      	mov	r0, r4
 80a0236:	4629      	mov	r1, r5
 80a0238:	f001 fc74 	bl	80a1b24 <_Z7printlnPci>
    delay(2000);
 80a023c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 80a0240:	b00b      	add	sp, #44	; 0x2c
 80a0242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    delay(2000);
 80a0246:	f004 bae7 	b.w	80a4818 <delay>
 80a024a:	bf00      	nop
 80a024c:	080a77fc 	.word	0x080a77fc
 80a0250:	080a78a8 	.word	0x080a78a8
 80a0254:	20000216 	.word	0x20000216
 80a0258:	20000150 	.word	0x20000150
 80a025c:	080a789c 	.word	0x080a789c
 80a0260:	080a790d 	.word	0x080a790d

080a0264 <_GLOBAL__sub_I__Z15WriteToDatabasePcS_>:
        val_(val) {
 80a0264:	2201      	movs	r2, #1
 80a0266:	4b01      	ldr	r3, [pc, #4]	; (80a026c <_GLOBAL__sub_I__Z15WriteToDatabasePcS_+0x8>)
 80a0268:	701a      	strb	r2, [r3, #0]
//       {
//         println(" ERR: no Luefter ");
//         done = 1;
//       }
//     }
}
 80a026a:	4770      	bx	lr
 80a026c:	20000150 	.word	0x20000150

080a0270 <_Z15dispatchCommandc>:
/*---------------------------------------------------------------------
Dispatch command
---------------------------------------------------------------------*/

void dispatchCommand(char c)
{
 80a0270:	b530      	push	{r4, r5, lr}
 80a0272:	3861      	subs	r0, #97	; 0x61
 80a0274:	b087      	sub	sp, #28
 80a0276:	2819      	cmp	r0, #25
 80a0278:	f200 80bc 	bhi.w	80a03f4 <_Z15dispatchCommandc+0x184>
 80a027c:	e8df f000 	tbb	[pc, r0]
 80a0280:	2dba3833 	.word	0x2dba3833
 80a0284:	0dbababa 	.word	0x0dbababa
 80a0288:	bababa18 	.word	0xbababa18
 80a028c:	57bababa 	.word	0x57bababa
 80a0290:	6240baba 	.word	0x6240baba
 80a0294:	7a72ba50 	.word	0x7a72ba50
 80a0298:	8d82      	.short	0x8d82

  switch (c)
  {
  case 'h':
    termEnabled = 1;
 80a029a:	2201      	movs	r2, #1
 80a029c:	4b56      	ldr	r3, [pc, #344]	; (80a03f8 <_Z15dispatchCommandc+0x188>)
 80a029e:	601a      	str	r2, [r3, #0]
    termCounter = 10;
 80a02a0:	220a      	movs	r2, #10
 80a02a2:	4b56      	ldr	r3, [pc, #344]	; (80a03fc <_Z15dispatchCommandc+0x18c>)
 80a02a4:	601a      	str	r2, [r3, #0]
    println(" Photon HW ID ", System.deviceID() );
    Particle.publish("particle/device/name");
    delay(500); 
  break;  
  }
}
 80a02a6:	b007      	add	sp, #28
 80a02a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    help();
 80a02ac:	f001 b9e2 	b.w	80a1674 <_Z4helpv>
    if (control.pumpe_count_down < 240)
 80a02b0:	4c53      	ldr	r4, [pc, #332]	; (80a0400 <_Z15dispatchCommandc+0x190>)
 80a02b2:	68e3      	ldr	r3, [r4, #12]
 80a02b4:	2bef      	cmp	r3, #239	; 0xef
 80a02b6:	d801      	bhi.n	80a02bc <_Z15dispatchCommandc+0x4c>
      control.pumpe_count_down = control.pumpe_count_down + 10;
 80a02b8:	330a      	adds	r3, #10
      control.pumpe_count_down = control.pumpe_count_down - 10;
 80a02ba:	60e3      	str	r3, [r4, #12]
    EEPROM.put(0, control);
 80a02bc:	f005 f9ae 	bl	80a561c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a02c0:	2214      	movs	r2, #20
 80a02c2:	2000      	movs	r0, #0
 80a02c4:	494e      	ldr	r1, [pc, #312]	; (80a0400 <_Z15dispatchCommandc+0x190>)
 80a02c6:	f003 fa2d 	bl	80a3724 <HAL_EEPROM_Put>
    WriteToDatabase("control", "PUMPE MAIN COUNTDOWN NOW ", control.pumpe_count_down);
 80a02ca:	68e2      	ldr	r2, [r4, #12]
 80a02cc:	494d      	ldr	r1, [pc, #308]	; (80a0404 <_Z15dispatchCommandc+0x194>)
 80a02ce:	484e      	ldr	r0, [pc, #312]	; (80a0408 <_Z15dispatchCommandc+0x198>)
}
 80a02d0:	b007      	add	sp, #28
 80a02d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    WriteToDatabase("control", "PUMPE MAIN COUNTDOWN NOW ", control.pumpe_count_down);
 80a02d6:	f7ff bf65 	b.w	80a01a4 <_Z15WriteToDatabasePcS_i>
    if (control.pumpe_count_down > 10)
 80a02da:	4c49      	ldr	r4, [pc, #292]	; (80a0400 <_Z15dispatchCommandc+0x190>)
 80a02dc:	68e3      	ldr	r3, [r4, #12]
 80a02de:	2b0a      	cmp	r3, #10
 80a02e0:	d9ec      	bls.n	80a02bc <_Z15dispatchCommandc+0x4c>
      control.pumpe_count_down = control.pumpe_count_down - 10;
 80a02e2:	3b0a      	subs	r3, #10
 80a02e4:	e7e9      	b.n	80a02ba <_Z15dispatchCommandc+0x4a>
}
 80a02e6:	b007      	add	sp, #28
 80a02e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    printSlowStatus();
 80a02ec:	f001 bd46 	b.w	80a1d7c <_Z15printSlowStatusv>
    BlumenGiessen(1, ts_giessen);
 80a02f0:	2001      	movs	r0, #1
 80a02f2:	4b46      	ldr	r3, [pc, #280]	; (80a040c <_Z15dispatchCommandc+0x19c>)
 80a02f4:	6819      	ldr	r1, [r3, #0]
}
 80a02f6:	b007      	add	sp, #28
 80a02f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    BlumenGiessen(1, ts_giessen);
 80a02fc:	f003 b878 	b.w	80a33f0 <_Z13BlumenGiessenii>
    control.dontSleepSW = 0;
 80a0300:	2400      	movs	r4, #0
 80a0302:	4d3f      	ldr	r5, [pc, #252]	; (80a0400 <_Z15dispatchCommandc+0x190>)
    println(" Sleep Mode enabled ");
 80a0304:	4842      	ldr	r0, [pc, #264]	; (80a0410 <_Z15dispatchCommandc+0x1a0>)
    control.dontSleepSW = 0;
 80a0306:	606c      	str	r4, [r5, #4]
    println(" Sleep Mode enabled ");
 80a0308:	f001 f99a 	bl	80a1640 <_Z7printlnPc>
    EEPROM.put(0, control);  
 80a030c:	f005 f986 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a0310:	2214      	movs	r2, #20
 80a0312:	4629      	mov	r1, r5
 80a0314:	2000      	movs	r0, #0
}
 80a0316:	b007      	add	sp, #28
 80a0318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80a031c:	f003 ba02 	b.w	80a3724 <HAL_EEPROM_Put>
    control.reserve_repetitions=0;
 80a0320:	2400      	movs	r4, #0
 80a0322:	4d37      	ldr	r5, [pc, #220]	; (80a0400 <_Z15dispatchCommandc+0x190>)
    println(" Clear reserve repetition counter "); 
 80a0324:	483b      	ldr	r0, [pc, #236]	; (80a0414 <_Z15dispatchCommandc+0x1a4>)
 80a0326:	f001 f98b 	bl	80a1640 <_Z7printlnPc>
    control.reserve_repetitions=0;
 80a032a:	612c      	str	r4, [r5, #16]
 80a032c:	e7ee      	b.n	80a030c <_Z15dispatchCommandc+0x9c>
    control.dontSleepSW = 1;
 80a032e:	2301      	movs	r3, #1
 80a0330:	4c33      	ldr	r4, [pc, #204]	; (80a0400 <_Z15dispatchCommandc+0x190>)
    println(" Sleep Mode disabled ");
 80a0332:	4839      	ldr	r0, [pc, #228]	; (80a0418 <_Z15dispatchCommandc+0x1a8>)
    control.dontSleepSW = 1;
 80a0334:	6063      	str	r3, [r4, #4]
    println(" Sleep Mode disabled ");
 80a0336:	f001 f983 	bl	80a1640 <_Z7printlnPc>
    EEPROM.put(0, control);
 80a033a:	f005 f96f 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a033e:	2214      	movs	r2, #20
 80a0340:	4621      	mov	r1, r4
 80a0342:	e7e7      	b.n	80a0314 <_Z15dispatchCommandc+0xa4>
    get_Temperature();
 80a0344:	f000 fa4e 	bl	80a07e4 <_Z15get_Temperaturev>
    sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a0348:	4b34      	ldr	r3, [pc, #208]	; (80a041c <_Z15dispatchCommandc+0x1ac>)
 80a034a:	4a35      	ldr	r2, [pc, #212]	; (80a0420 <_Z15dispatchCommandc+0x1b0>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	6812      	ldr	r2, [r2, #0]
 80a0350:	4934      	ldr	r1, [pc, #208]	; (80a0424 <_Z15dispatchCommandc+0x1b4>)
 80a0352:	4835      	ldr	r0, [pc, #212]	; (80a0428 <_Z15dispatchCommandc+0x1b8>)
 80a0354:	f003 fc4e 	bl	80a3bf4 <sprintf>
    println(timebuffer);
 80a0358:	4833      	ldr	r0, [pc, #204]	; (80a0428 <_Z15dispatchCommandc+0x1b8>)
}
 80a035a:	b007      	add	sp, #28
 80a035c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    println(timebuffer);
 80a0360:	f001 b96e 	b.w	80a1640 <_Z7printlnPc>
    println(" Store CONTROL in EEPROM ");
 80a0364:	4831      	ldr	r0, [pc, #196]	; (80a042c <_Z15dispatchCommandc+0x1bc>)
 80a0366:	f001 f96b 	bl	80a1640 <_Z7printlnPc>
    EEPROM.put(0, control);
 80a036a:	f005 f957 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a036e:	2214      	movs	r2, #20
 80a0370:	4923      	ldr	r1, [pc, #140]	; (80a0400 <_Z15dispatchCommandc+0x190>)
 80a0372:	e7cf      	b.n	80a0314 <_Z15dispatchCommandc+0xa4>
    println(" Ultrasonic ");
 80a0374:	482e      	ldr	r0, [pc, #184]	; (80a0430 <_Z15dispatchCommandc+0x1c0>)
 80a0376:	f001 f963 	bl	80a1640 <_Z7printlnPc>
}
 80a037a:	b007      	add	sp, #28
 80a037c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ultra_sonic_measure();
 80a0380:	f000 b998 	b.w	80a06b4 <_Z19ultra_sonic_measurev>
    println(" Prepare Sleep ");
 80a0384:	482b      	ldr	r0, [pc, #172]	; (80a0434 <_Z15dispatchCommandc+0x1c4>)
 80a0386:	f001 f95b 	bl	80a1640 <_Z7printlnPc>
    sleep(getSleepTime(55));
 80a038a:	2037      	movs	r0, #55	; 0x37
 80a038c:	f000 fbfe 	bl	80a0b8c <_Z12getSleepTimei>
}
 80a0390:	b007      	add	sp, #28
 80a0392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sleep(getSleepTime(55));
 80a0396:	f001 bdcf 	b.w	80a1f38 <_Z5sleepi>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
 80a039a:	a802      	add	r0, sp, #8
 80a039c:	f003 fbea 	bl	80a3b74 <spark_deviceID>
    println(" Photon HW ID ", System.deviceID() );
 80a03a0:	a902      	add	r1, sp, #8
 80a03a2:	4825      	ldr	r0, [pc, #148]	; (80a0438 <_Z15dispatchCommandc+0x1c8>)
 80a03a4:	f001 fabe 	bl	80a1924 <_Z7printlnPc6String>
 80a03a8:	a802      	add	r0, sp, #8
 80a03aa:	f003 ff99 	bl	80a42e0 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a03ae:	4b23      	ldr	r3, [pc, #140]	; (80a043c <_Z15dispatchCommandc+0x1cc>)
 80a03b0:	2200      	movs	r2, #0
 80a03b2:	781b      	ldrb	r3, [r3, #0]
 80a03b4:	4922      	ldr	r1, [pc, #136]	; (80a0440 <_Z15dispatchCommandc+0x1d0>)
 80a03b6:	f88d 3000 	strb.w	r3, [sp]
 80a03ba:	a802      	add	r0, sp, #8
 80a03bc:	233c      	movs	r3, #60	; 0x3c
 80a03be:	f004 fc2b 	bl	80a4c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 80a03c2:	9c03      	ldr	r4, [sp, #12]
 80a03c4:	b17c      	cbz	r4, 80a03e6 <_Z15dispatchCommandc+0x176>
      if (--_M_use_count == 0)
 80a03c6:	6863      	ldr	r3, [r4, #4]
 80a03c8:	3b01      	subs	r3, #1
 80a03ca:	6063      	str	r3, [r4, #4]
 80a03cc:	b95b      	cbnz	r3, 80a03e6 <_Z15dispatchCommandc+0x176>
          _M_dispose();
 80a03ce:	6823      	ldr	r3, [r4, #0]
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	689b      	ldr	r3, [r3, #8]
 80a03d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a03d6:	68a3      	ldr	r3, [r4, #8]
 80a03d8:	3b01      	subs	r3, #1
 80a03da:	60a3      	str	r3, [r4, #8]
 80a03dc:	b91b      	cbnz	r3, 80a03e6 <_Z15dispatchCommandc+0x176>
            _M_destroy();
 80a03de:	6823      	ldr	r3, [r4, #0]
 80a03e0:	4620      	mov	r0, r4
 80a03e2:	68db      	ldr	r3, [r3, #12]
 80a03e4:	4798      	blx	r3
    delay(500); 
 80a03e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80a03ea:	b007      	add	sp, #28
 80a03ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    delay(500); 
 80a03f0:	f004 ba12 	b.w	80a4818 <delay>
}
 80a03f4:	b007      	add	sp, #28
 80a03f6:	bd30      	pop	{r4, r5, pc}
 80a03f8:	20000368 	.word	0x20000368
 80a03fc:	20000364 	.word	0x20000364
 80a0400:	20000310 	.word	0x20000310
 80a0404:	080a7915 	.word	0x080a7915
 80a0408:	080a792f 	.word	0x080a792f
 80a040c:	20000024 	.word	0x20000024
 80a0410:	080a7937 	.word	0x080a7937
 80a0414:	080a794c 	.word	0x080a794c
 80a0418:	080a796f 	.word	0x080a796f
 80a041c:	20000360 	.word	0x20000360
 80a0420:	2000035c 	.word	0x2000035c
 80a0424:	080a7985 	.word	0x080a7985
 80a0428:	200003bc 	.word	0x200003bc
 80a042c:	080a7997 	.word	0x080a7997
 80a0430:	080a79b1 	.word	0x080a79b1
 80a0434:	080a79be 	.word	0x080a79be
 80a0438:	080a79ce 	.word	0x080a79ce
 80a043c:	20000151 	.word	0x20000151
 80a0440:	080a79dd 	.word	0x080a79dd

080a0444 <_Z11serialEventv>:

/*---------------------------------------------------------------------
Dispatch characters from serial port
---------------------------------------------------------------------*/
void serialEvent()
{
 80a0444:	b508      	push	{r3, lr}
  char c = Serial.read();
 80a0446:	f004 fe19 	bl	80a507c <_Z16_fetch_usbserialv>
 80a044a:	6803      	ldr	r3, [r0, #0]
 80a044c:	695b      	ldr	r3, [r3, #20]
 80a044e:	4798      	blx	r3
  dispatchCommand(c);
}
 80a0450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dispatchCommand(c);
 80a0454:	b2c0      	uxtb	r0, r0
 80a0456:	f7ff bf0b 	b.w	80a0270 <_Z15dispatchCommandc>
	...

080a045c <_GLOBAL__sub_I__Z15dispatchCommandc>:
        val_(val) {
 80a045c:	2200      	movs	r2, #0
 80a045e:	4b01      	ldr	r3, [pc, #4]	; (80a0464 <_GLOBAL__sub_I__Z15dispatchCommandc+0x8>)
 80a0460:	701a      	strb	r2, [r3, #0]
}
 80a0462:	4770      	bx	lr
 80a0464:	20000151 	.word	0x20000151

080a0468 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
 80a0468:	2300      	movs	r3, #0
  _celsius = 0;
 80a046a:	2200      	movs	r2, #0
  _raw = 0;
 80a046c:	8303      	strh	r3, [r0, #24]
  _celsius = 0;
 80a046e:	61c2      	str	r2, [r0, #28]
  memset(_addr, 0, sizeof(_addr));
 80a0470:	6203      	str	r3, [r0, #32]
 80a0472:	6243      	str	r3, [r0, #36]	; 0x24
  memset(_data, 0, sizeof(_data));
 80a0474:	6283      	str	r3, [r0, #40]	; 0x28
 80a0476:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a0478:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  _type = WIRE_UNKNOWN;
 80a047c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  _searchDone = false;
 80a0480:	8643      	strh	r3, [r0, #50]	; 0x32
  _crcError = false;
}
 80a0482:	4770      	bx	lr

080a0484 <_ZN4DS18C1Etb>:
DS18::DS18(uint16_t pin, bool parasitic)
 80a0484:	b538      	push	{r3, r4, r5, lr}
 80a0486:	4604      	mov	r4, r0
 80a0488:	4615      	mov	r5, r2
  _conversionTime{1000}
 80a048a:	f002 fadb 	bl	80a2a44 <_ZN7OneWireC1Et>
 80a048e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  init();
 80a0492:	4620      	mov	r0, r4
  _conversionTime{1000}
 80a0494:	7525      	strb	r5, [r4, #20]
 80a0496:	82e3      	strh	r3, [r4, #22]
  init();
 80a0498:	f7ff ffe6 	bl	80a0468 <_ZN4DS184initEv>
}
 80a049c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a04a0 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80a04a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80a04a4:	680b      	ldr	r3, [r1, #0]
bool DS18::read(uint8_t addr[8]) {
 80a04a6:	4604      	mov	r4, r0
  memcpy(_addr, addr, sizeof(_addr));
 80a04a8:	6203      	str	r3, [r0, #32]
 80a04aa:	684b      	ldr	r3, [r1, #4]
 80a04ac:	f100 0520 	add.w	r5, r0, #32
 80a04b0:	6243      	str	r3, [r0, #36]	; 0x24

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80a04b2:	780b      	ldrb	r3, [r1, #0]
 80a04b4:	2b26      	cmp	r3, #38	; 0x26
 80a04b6:	d060      	beq.n	80a057a <_ZN4DS184readEPh+0xda>
 80a04b8:	d808      	bhi.n	80a04cc <_ZN4DS184readEPh+0x2c>
 80a04ba:	2b10      	cmp	r3, #16
 80a04bc:	d00a      	beq.n	80a04d4 <_ZN4DS184readEPh+0x34>
 80a04be:	2b22      	cmp	r3, #34	; 0x22
 80a04c0:	d059      	beq.n	80a0576 <_ZN4DS184readEPh+0xd6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
 80a04c2:	2000      	movs	r0, #0
 80a04c4:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
      }
  }

  // Got a good reading!
  return true;
}
 80a04c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (addr[0]) {
 80a04cc:	2b28      	cmp	r3, #40	; 0x28
 80a04ce:	d1f8      	bne.n	80a04c2 <_ZN4DS184readEPh+0x22>
    case 0x28: _type = WIRE_DS18B20; break;
 80a04d0:	2302      	movs	r3, #2
 80a04d2:	e000      	b.n	80a04d6 <_ZN4DS184readEPh+0x36>
    case 0x10: _type = WIRE_DS1820; break;
 80a04d4:	2301      	movs	r3, #1
    case 0x26: _type = WIRE_DS2438; break;
 80a04d6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  _wire.reset();               // first clear the 1-wire bus
 80a04da:	4620      	mov	r0, r4
 80a04dc:	f002 fabf 	bl	80a2a5e <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
 80a04e0:	4629      	mov	r1, r5
 80a04e2:	4620      	mov	r0, r4
 80a04e4:	f002 fb6b 	bl	80a2bbe <_ZN7OneWire6selectEPKh>
  _wire.write(0x44, power);    // tell it to start a conversion
 80a04e8:	7d22      	ldrb	r2, [r4, #20]
 80a04ea:	2144      	movs	r1, #68	; 0x44
 80a04ec:	4620      	mov	r0, r4
 80a04ee:	f002 fb3b 	bl	80a2b68 <_ZN7OneWire5writeEhh>
  delay(_conversionTime); // wait for conversion to finish
 80a04f2:	8ae0      	ldrh	r0, [r4, #22]
 80a04f4:	f004 f990 	bl	80a4818 <delay>
  _wire.reset();
 80a04f8:	4620      	mov	r0, r4
 80a04fa:	f002 fab0 	bl	80a2a5e <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a04fe:	4629      	mov	r1, r5
 80a0500:	4620      	mov	r0, r4
 80a0502:	f002 fb5c 	bl	80a2bbe <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
 80a0506:	2200      	movs	r2, #0
 80a0508:	21b8      	movs	r1, #184	; 0xb8
 80a050a:	4620      	mov	r0, r4
 80a050c:	f002 fb2c 	bl	80a2b68 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
 80a0510:	2200      	movs	r2, #0
 80a0512:	4620      	mov	r0, r4
 80a0514:	4611      	mov	r1, r2
 80a0516:	f002 fb27 	bl	80a2b68 <_ZN7OneWire5writeEhh>
  _wire.reset();
 80a051a:	4620      	mov	r0, r4
 80a051c:	f002 fa9f 	bl	80a2a5e <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a0520:	4629      	mov	r1, r5
 80a0522:	4620      	mov	r0, r4
 80a0524:	f002 fb4b 	bl	80a2bbe <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
 80a0528:	2200      	movs	r2, #0
 80a052a:	21be      	movs	r1, #190	; 0xbe
 80a052c:	4620      	mov	r0, r4
 80a052e:	f002 fb1b 	bl	80a2b68 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
 80a0532:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a0536:	2b04      	cmp	r3, #4
 80a0538:	d104      	bne.n	80a0544 <_ZN4DS184readEPh+0xa4>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
 80a053a:	2200      	movs	r2, #0
 80a053c:	4620      	mov	r0, r4
 80a053e:	4611      	mov	r1, r2
 80a0540:	f002 fb12 	bl	80a2b68 <_ZN7OneWire5writeEhh>
 80a0544:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80a0548:	462e      	mov	r6, r5
 80a054a:	f104 0731 	add.w	r7, r4, #49	; 0x31
    _data[i] = _wire.read();
 80a054e:	4620      	mov	r0, r4
 80a0550:	f002 fb25 	bl	80a2b9e <_ZN7OneWire4readEv>
 80a0554:	f805 0b01 	strb.w	r0, [r5], #1
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
 80a0558:	42bd      	cmp	r5, r7
 80a055a:	d1f8      	bne.n	80a054e <_ZN4DS184readEPh+0xae>
  if (OneWire::crc8(_data, 8) != _data[8]) {
 80a055c:	2108      	movs	r1, #8
 80a055e:	4630      	mov	r0, r6
 80a0560:	f002 fbb0 	bl	80a2cc4 <_ZN7OneWire4crc8EPhh>
 80a0564:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a0568:	4283      	cmp	r3, r0
 80a056a:	d008      	beq.n	80a057e <_ZN4DS184readEPh+0xde>
    _crcError = true;
 80a056c:	2301      	movs	r3, #1
    return false;
 80a056e:	2000      	movs	r0, #0
    _crcError = true;
 80a0570:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a0574:	e7a8      	b.n	80a04c8 <_ZN4DS184readEPh+0x28>
    case 0x22: _type = WIRE_DS1822; break;
 80a0576:	2303      	movs	r3, #3
 80a0578:	e7ad      	b.n	80a04d6 <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
 80a057a:	2304      	movs	r3, #4
 80a057c:	e7ab      	b.n	80a04d6 <_ZN4DS184readEPh+0x36>
  _raw = (_data[1] << 8) | _data[0];
 80a057e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80a0580:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 80a0584:	8323      	strh	r3, [r4, #24]
  if (_type == WIRE_DS2438) {
 80a0586:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a058a:	2b04      	cmp	r3, #4
 80a058c:	d147      	bne.n	80a061e <_ZN4DS184readEPh+0x17e>
    _raw = (_data[2] << 8) | _data[1];
 80a058e:	f894 802a 	ldrb.w	r8, [r4, #42]	; 0x2a
 80a0592:	ea45 2308 	orr.w	r3, r5, r8, lsl #8
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a0596:	08ed      	lsrs	r5, r5, #3
    _raw = (_data[2] << 8) | _data[1];
 80a0598:	8323      	strh	r3, [r4, #24]
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a059a:	4640      	mov	r0, r8
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a059c:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a05a0:	f005 feaa 	bl	80a62f8 <__aeabi_ui2f>
 80a05a4:	f005 fb18 	bl	80a5bd8 <__aeabi_f2d>
 80a05a8:	4606      	mov	r6, r0
 80a05aa:	4628      	mov	r0, r5
 80a05ac:	460f      	mov	r7, r1
 80a05ae:	f005 fea3 	bl	80a62f8 <__aeabi_ui2f>
 80a05b2:	f005 fb11 	bl	80a5bd8 <__aeabi_f2d>
 80a05b6:	2200      	movs	r2, #0
 80a05b8:	4b24      	ldr	r3, [pc, #144]	; (80a064c <_ZN4DS184readEPh+0x1ac>)
 80a05ba:	f005 fb65 	bl	80a5c88 <__aeabi_dmul>
      if (_data[2] > 127) {
 80a05be:	f018 0f80 	tst.w	r8, #128	; 0x80
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a05c2:	4602      	mov	r2, r0
 80a05c4:	460b      	mov	r3, r1
      if (_data[2] > 127) {
 80a05c6:	d025      	beq.n	80a0614 <_ZN4DS184readEPh+0x174>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a05c8:	4630      	mov	r0, r6
 80a05ca:	4639      	mov	r1, r7
 80a05cc:	f005 f9a4 	bl	80a5918 <__aeabi_dsub>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a05d0:	f005 fd8c 	bl	80a60ec <__aeabi_d2f>
 80a05d4:	e015      	b.n	80a0602 <_ZN4DS184readEPh+0x162>
  byte cfg = (_data[4] & 0x60);
 80a05d6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
      _raw = _raw << 3; // 9 bit resolution default
 80a05da:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
 80a05de:	f012 0260 	ands.w	r2, r2, #96	; 0x60
 80a05e2:	d102      	bne.n	80a05ea <_ZN4DS184readEPh+0x14a>
 80a05e4:	f023 0307 	bic.w	r3, r3, #7
 80a05e8:	e02d      	b.n	80a0646 <_ZN4DS184readEPh+0x1a6>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a05ea:	2a20      	cmp	r2, #32
 80a05ec:	d00c      	beq.n	80a0608 <_ZN4DS184readEPh+0x168>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a05ee:	2a40      	cmp	r2, #64	; 0x40
 80a05f0:	d00d      	beq.n	80a060e <_ZN4DS184readEPh+0x16e>
      _celsius = (float)_raw * 0.0625;
 80a05f2:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 80a05f6:	f005 fe83 	bl	80a6300 <__aeabi_i2f>
 80a05fa:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a05fe:	f005 fed3 	bl	80a63a8 <__aeabi_fmul>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a0602:	61e0      	str	r0, [r4, #28]
  switch (_type) {
 80a0604:	2001      	movs	r0, #1
 80a0606:	e75f      	b.n	80a04c8 <_ZN4DS184readEPh+0x28>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a0608:	f023 0303 	bic.w	r3, r3, #3
 80a060c:	e01b      	b.n	80a0646 <_ZN4DS184readEPh+0x1a6>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a060e:	f023 0301 	bic.w	r3, r3, #1
 80a0612:	e018      	b.n	80a0646 <_ZN4DS184readEPh+0x1a6>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a0614:	4630      	mov	r0, r6
 80a0616:	4639      	mov	r1, r7
 80a0618:	f005 f980 	bl	80a591c <__adddf3>
 80a061c:	e7d8      	b.n	80a05d0 <_ZN4DS184readEPh+0x130>
  switch (_type) {
 80a061e:	2b03      	cmp	r3, #3
 80a0620:	d8f0      	bhi.n	80a0604 <_ZN4DS184readEPh+0x164>
 80a0622:	2b01      	cmp	r3, #1
 80a0624:	d8d7      	bhi.n	80a05d6 <_ZN4DS184readEPh+0x136>
 80a0626:	d1ed      	bne.n	80a0604 <_ZN4DS184readEPh+0x164>
      _raw = _raw << 3; // 9 bit resolution default
 80a0628:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a062c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
      _raw = _raw << 3; // 9 bit resolution default
 80a0630:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
 80a0632:	2a10      	cmp	r2, #16
      _raw = _raw << 3; // 9 bit resolution default
 80a0634:	8323      	strh	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a0636:	d1dc      	bne.n	80a05f2 <_ZN4DS184readEPh+0x152>
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
 80a0638:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80a063c:	f023 030f 	bic.w	r3, r3, #15
 80a0640:	f1c2 020c 	rsb	r2, r2, #12
 80a0644:	4413      	add	r3, r2
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a0646:	8323      	strh	r3, [r4, #24]
 80a0648:	e7d3      	b.n	80a05f2 <_ZN4DS184readEPh+0x152>
 80a064a:	bf00      	nop
 80a064c:	3fa00000 	.word	0x3fa00000

080a0650 <_ZN4DS184readEv>:
bool DS18::read() {
 80a0650:	b538      	push	{r3, r4, r5, lr}
  if (!_wire.search(_addr)) {
 80a0652:	f100 0520 	add.w	r5, r0, #32
 80a0656:	4629      	mov	r1, r5
bool DS18::read() {
 80a0658:	4604      	mov	r4, r0
  init();
 80a065a:	f7ff ff05 	bl	80a0468 <_ZN4DS184initEv>
  if (!_wire.search(_addr)) {
 80a065e:	f002 fac6 	bl	80a2bee <_ZN7OneWire6searchEPh>
 80a0662:	b938      	cbnz	r0, 80a0674 <_ZN4DS184readEv+0x24>
    _searchDone = true;
 80a0664:	2301      	movs	r3, #1
    _wire.reset_search();
 80a0666:	4620      	mov	r0, r4
    _searchDone = true;
 80a0668:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    _wire.reset_search();
 80a066c:	f002 fab9 	bl	80a2be2 <_ZN7OneWire12reset_searchEv>
}
 80a0670:	2000      	movs	r0, #0
 80a0672:	bd38      	pop	{r3, r4, r5, pc}
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
 80a0674:	2107      	movs	r1, #7
 80a0676:	4628      	mov	r0, r5
 80a0678:	f002 fb24 	bl	80a2cc4 <_ZN7OneWire4crc8EPhh>
 80a067c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80a0680:	4283      	cmp	r3, r0
 80a0682:	d003      	beq.n	80a068c <_ZN4DS184readEv+0x3c>
    _crcError = true;
 80a0684:	2301      	movs	r3, #1
 80a0686:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a068a:	e7f1      	b.n	80a0670 <_ZN4DS184readEv+0x20>
  return read(_addr);
 80a068c:	4629      	mov	r1, r5
 80a068e:	4620      	mov	r0, r4
}
 80a0690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read(_addr);
 80a0694:	f7ff bf04 	b.w	80a04a0 <_ZN4DS184readEPh>

080a0698 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
 80a0698:	69c0      	ldr	r0, [r0, #28]
 80a069a:	4770      	bx	lr

080a069c <_ZN4DS184addrEPh>:
float DS18::fahrenheit() {
  return _celsius * 1.8 + 32.0;
}

void DS18::addr(uint8_t dest[8]) {
  memcpy(dest, _addr, sizeof(_addr));
 80a069c:	6a03      	ldr	r3, [r0, #32]
 80a069e:	600b      	str	r3, [r1, #0]
 80a06a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80a06a2:	604b      	str	r3, [r1, #4]
}
 80a06a4:	4770      	bx	lr

080a06a6 <_ZN4DS1810searchDoneEv>:
  return _type;
}

bool DS18::searchDone() {
  return _searchDone;
}
 80a06a6:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 80a06aa:	4770      	bx	lr

080a06ac <_ZN4DS188crcErrorEv>:

bool DS18::crcError() {
  return _crcError;
}
 80a06ac:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 80a06b0:	4770      	bx	lr
	...

080a06b4 <_Z19ultra_sonic_measurev>:
Ultrasonic distance measurement (tested29.07.2017)
Returns water level in millimeter
---------------------------------------------------------------------*/
int  ultra_sonic_measure()

{
 80a06b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a06b8:	4e2d      	ldr	r6, [pc, #180]	; (80a0770 <_Z19ultra_sonic_measurev+0xbc>)

  int level = 0;
  int error = 0;
  int k = 0;

  Serial.printlnf ( " ultra sonic distance ");
 80a06ba:	f004 fcdf 	bl	80a507c <_Z16_fetch_usbserialv>
 80a06be:	492d      	ldr	r1, [pc, #180]	; (80a0774 <_Z19ultra_sonic_measurev+0xc0>)
 80a06c0:	f7ff fcf7 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a06c4:	4637      	mov	r7, r6
 80a06c6:	2505      	movs	r5, #5
 80a06c8:	4634      	mov	r4, r6
  for (k=0; k<ULTRA_LOOP; k++)
  {
      time = ultra_sonic_ping();
      dist = uMilli(time);
      hs[k] = dist;
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
 80a06ca:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a0778 <_Z19ultra_sonic_measurev+0xc4>
      time = ultra_sonic_ping();
 80a06ce:	f002 f977 	bl	80a29c0 <_Z16ultra_sonic_pingv>
      dist = uMilli(time);
 80a06d2:	f002 f98f 	bl	80a29f4 <_Z6uMillim>
      hs[k] = dist;
 80a06d6:	6038      	str	r0, [r7, #0]
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
 80a06d8:	f004 fcd0 	bl	80a507c <_Z16_fetch_usbserialv>
 80a06dc:	4641      	mov	r1, r8
 80a06de:	f857 2b04 	ldr.w	r2, [r7], #4
 80a06e2:	f7ff fce6 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      run_blynk();
 80a06e6:	f000 fecd 	bl	80a1484 <_Z9run_blynkv>
      delay(150);
 80a06ea:	2096      	movs	r0, #150	; 0x96
 80a06ec:	f004 f894 	bl	80a4818 <delay>
  for (k=0; k<ULTRA_LOOP; k++)
 80a06f0:	3d01      	subs	r5, #1
 80a06f2:	d1ec      	bne.n	80a06ce <_Z19ultra_sonic_measurev+0x1a>
  }

  avg = 0;
  for (k=0; k<ULTRA_LOOP; k++)
  {
    avg = avg + hs[k];
 80a06f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80a06f8:	4413      	add	r3, r2
 80a06fa:	68a2      	ldr	r2, [r4, #8]
  int error = 0;
 80a06fc:	462f      	mov	r7, r5
    avg = avg + hs[k];
 80a06fe:	4413      	add	r3, r2
 80a0700:	68e2      	ldr	r2, [r4, #12]
 80a0702:	4413      	add	r3, r2
 80a0704:	6922      	ldr	r2, [r4, #16]
  }
  avg = avg / ULTRA_LOOP;
 80a0706:	2405      	movs	r4, #5
    avg = avg + hs[k];
 80a0708:	4413      	add	r3, r2
  avg = avg / ULTRA_LOOP;
 80a070a:	fbb3 f4f4 	udiv	r4, r3, r4

  for (k=0; k<ULTRA_LOOP; k++)
  {
    error = error + (avg-hs[k]);
 80a070e:	f856 2b04 	ldr.w	r2, [r6], #4
  for (k=0; k<ULTRA_LOOP; k++)
 80a0712:	3501      	adds	r5, #1
    error = error + (avg-hs[k]);
 80a0714:	4427      	add	r7, r4
  for (k=0; k<ULTRA_LOOP; k++)
 80a0716:	2d05      	cmp	r5, #5
    error = error + (avg-hs[k]);
 80a0718:	eba7 0702 	sub.w	r7, r7, r2
  for (k=0; k<ULTRA_LOOP; k++)
 80a071c:	d1f7      	bne.n	80a070e <_Z19ultra_sonic_measurev+0x5a>
  }

  if (avg==0)
 80a071e:	2b04      	cmp	r3, #4
 80a0720:	d808      	bhi.n	80a0734 <_Z19ultra_sonic_measurev+0x80>
  {
    level = 1000; // prevent that the second pump is switched on
    WriteToDatabase ( "WASSER", "WARNING: Failed to read ultrasonic sensor");  
 80a0722:	4916      	ldr	r1, [pc, #88]	; (80a077c <_Z19ultra_sonic_measurev+0xc8>)
 80a0724:	4816      	ldr	r0, [pc, #88]	; (80a0780 <_Z19ultra_sonic_measurev+0xcc>)
 80a0726:	f7ff fce9 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    return(1000);
 80a072a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8

  //WriteToDatabase("WASSER","WASSERSTAND : ",level);

  return(level);

 80a072e:	4620      	mov	r0, r4
 80a0730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Serial.printlnf ( " ultra error : %d ", error);
 80a0734:	f004 fca2 	bl	80a507c <_Z16_fetch_usbserialv>
  avg = avg - MessFehler;
 80a0738:	3c0f      	subs	r4, #15
  Serial.printlnf ( " ultra error : %d ", error);
 80a073a:	463a      	mov	r2, r7
 80a073c:	4911      	ldr	r1, [pc, #68]	; (80a0784 <_Z19ultra_sonic_measurev+0xd0>)
 80a073e:	f7ff fcb8 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf ( " ultra distance average : %d mm", avg);
 80a0742:	f004 fc9b 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0746:	4622      	mov	r2, r4
 80a0748:	490f      	ldr	r1, [pc, #60]	; (80a0788 <_Z19ultra_sonic_measurev+0xd4>)
 80a074a:	f7ff fcb2 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  println("distance : ",avg);
 80a074e:	4621      	mov	r1, r4
  level = TankHoehe - avg;
 80a0750:	f5c4 74b4 	rsb	r4, r4, #360	; 0x168
  println("distance : ",avg);
 80a0754:	480d      	ldr	r0, [pc, #52]	; (80a078c <_Z19ultra_sonic_measurev+0xd8>)
 80a0756:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80a075a:	f001 f9e3 	bl	80a1b24 <_Z7printlnPci>
  Serial.printlnf ( " ultra level average : %d mm", level);
 80a075e:	f004 fc8d 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0762:	4622      	mov	r2, r4
 80a0764:	490a      	ldr	r1, [pc, #40]	; (80a0790 <_Z19ultra_sonic_measurev+0xdc>)
 80a0766:	f7ff fca4 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  run_blynk();
 80a076a:	f000 fe8b 	bl	80a1484 <_Z9run_blynkv>
  return(level);
 80a076e:	e7de      	b.n	80a072e <_Z19ultra_sonic_measurev+0x7a>
 80a0770:	20000154 	.word	0x20000154
 80a0774:	080a79f2 	.word	0x080a79f2
 80a0778:	080a7a09 	.word	0x080a7a09
 80a077c:	080a7a21 	.word	0x080a7a21
 80a0780:	080a7a4b 	.word	0x080a7a4b
 80a0784:	080a7a52 	.word	0x080a7a52
 80a0788:	080a7a65 	.word	0x080a7a65
 80a078c:	080a7a85 	.word	0x080a7a85
 80a0790:	080a7a91 	.word	0x080a7a91

080a0794 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0794:	b40e      	push	{r1, r2, r3}
 80a0796:	b503      	push	{r0, r1, lr}
 80a0798:	ab03      	add	r3, sp, #12
 80a079a:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(false, format, args);
 80a079e:	2100      	movs	r1, #0
        va_start(args, format);
 80a07a0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a07a2:	f003 fedb 	bl	80a455c <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 80a07a6:	b002      	add	sp, #8
 80a07a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80a07ac:	b003      	add	sp, #12
 80a07ae:	4770      	bx	lr

080a07b0 <_Z6get_IDv>:

}


uint8_t get_ID()
{
 80a07b0:	b507      	push	{r0, r1, r2, lr}
  if (sensor.crcError()) {
 80a07b2:	480a      	ldr	r0, [pc, #40]	; (80a07dc <_Z6get_IDv+0x2c>)
 80a07b4:	f7ff ff7a 	bl	80a06ac <_ZN4DS188crcErrorEv>
 80a07b8:	b140      	cbz	r0, 80a07cc <_Z6get_IDv+0x1c>
    Serial.print(" CRC Error ");
 80a07ba:	f004 fc5f 	bl	80a507c <_Z16_fetch_usbserialv>
 80a07be:	4908      	ldr	r1, [pc, #32]	; (80a07e0 <_Z6get_IDv+0x30>)
 80a07c0:	f003 fe92 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a07c4:	2000      	movs	r0, #0
  uint8_t id;
  sensor.addr(addr);
  id = addr[7];
  //Serial.printf(" ID=%02X",id);
  return(id);
}
 80a07c6:	b003      	add	sp, #12
 80a07c8:	f85d fb04 	ldr.w	pc, [sp], #4
  sensor.addr(addr);
 80a07cc:	4803      	ldr	r0, [pc, #12]	; (80a07dc <_Z6get_IDv+0x2c>)
 80a07ce:	4669      	mov	r1, sp
 80a07d0:	f7ff ff64 	bl	80a069c <_ZN4DS184addrEPh>
  id = addr[7];
 80a07d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
  return(id);
 80a07d8:	e7f5      	b.n	80a07c6 <_Z6get_IDv+0x16>
 80a07da:	bf00      	nop
 80a07dc:	20000168 	.word	0x20000168
 80a07e0:	080a7aae 	.word	0x080a7aae

080a07e4 <_Z15get_Temperaturev>:
{
 80a07e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
Serial.println(" Get Temperature ");
 80a07e8:	f004 fc48 	bl	80a507c <_Z16_fetch_usbserialv>
 80a07ec:	4923      	ldr	r1, [pc, #140]	; (80a087c <_Z15get_Temperaturev+0x98>)
 80a07ee:	f003 fe8e 	bl	80a450e <_ZN5Print7printlnEPKc>
  int k = 0;
 80a07f2:	2600      	movs	r6, #0
    if (sensor.read()) {
 80a07f4:	4d22      	ldr	r5, [pc, #136]	; (80a0880 <_Z15get_Temperaturev+0x9c>)
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
 80a07f6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80a0884 <_Z15get_Temperaturev+0xa0>
      println("sensor id",id);
 80a07fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80a0888 <_Z15get_Temperaturev+0xa4>
    if (sensor.read()) {
 80a07fe:	4628      	mov	r0, r5
 80a0800:	f7ff ff26 	bl	80a0650 <_ZN4DS184readEv>
 80a0804:	b320      	cbz	r0, 80a0850 <_Z15get_Temperaturev+0x6c>
      id = get_ID();
 80a0806:	f7ff ffd3 	bl	80a07b0 <_Z6get_IDv>
 80a080a:	4604      	mov	r4, r0
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
 80a080c:	f004 fc36 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0810:	4607      	mov	r7, r0
 80a0812:	4628      	mov	r0, r5
 80a0814:	f7ff ff40 	bl	80a0698 <_ZN4DS187celsiusEv>
 80a0818:	f005 f9de 	bl	80a5bd8 <__aeabi_f2d>
 80a081c:	4633      	mov	r3, r6
 80a081e:	4622      	mov	r2, r4
 80a0820:	e9cd 0100 	strd	r0, r1, [sp]
 80a0824:	4641      	mov	r1, r8
 80a0826:	4638      	mov	r0, r7
 80a0828:	f7ff ffb4 	bl	80a0794 <_ZN5Print6printfEPKcz>
      println("sensor id",id);
 80a082c:	4621      	mov	r1, r4
 80a082e:	4648      	mov	r0, r9
 80a0830:	f001 f978 	bl	80a1b24 <_Z7printlnPci>
      delay(250);
 80a0834:	20fa      	movs	r0, #250	; 0xfa
 80a0836:	f003 ffef 	bl	80a4818 <delay>
      if(id == 37) {
 80a083a:	2c25      	cmp	r4, #37	; 0x25
      k++;
 80a083c:	f106 0601 	add.w	r6, r6, #1
      if(id == 37) {
 80a0840:	d113      	bne.n	80a086a <_Z15get_Temperaturev+0x86>
        temp_in = sensor.celsius();
 80a0842:	4628      	mov	r0, r5
 80a0844:	f7ff ff28 	bl	80a0698 <_ZN4DS187celsiusEv>
 80a0848:	f005 ff74 	bl	80a6734 <__aeabi_f2iz>
 80a084c:	4b0f      	ldr	r3, [pc, #60]	; (80a088c <_Z15get_Temperaturev+0xa8>)
        temp_out = sensor.celsius();
 80a084e:	6018      	str	r0, [r3, #0]
  } while(sensor.searchDone() == false);
 80a0850:	4628      	mov	r0, r5
 80a0852:	f7ff ff28 	bl	80a06a6 <_ZN4DS1810searchDoneEv>
 80a0856:	2800      	cmp	r0, #0
 80a0858:	d0d1      	beq.n	80a07fe <_Z15get_Temperaturev+0x1a>
return(sensor.celsius());
 80a085a:	4809      	ldr	r0, [pc, #36]	; (80a0880 <_Z15get_Temperaturev+0x9c>)
 80a085c:	f7ff ff1c 	bl	80a0698 <_ZN4DS187celsiusEv>
 80a0860:	f005 ff68 	bl	80a6734 <__aeabi_f2iz>
}
 80a0864:	b003      	add	sp, #12
 80a0866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(id == 151){
 80a086a:	2c97      	cmp	r4, #151	; 0x97
 80a086c:	d1f0      	bne.n	80a0850 <_Z15get_Temperaturev+0x6c>
        temp_out = sensor.celsius();
 80a086e:	4628      	mov	r0, r5
 80a0870:	f7ff ff12 	bl	80a0698 <_ZN4DS187celsiusEv>
 80a0874:	f005 ff5e 	bl	80a6734 <__aeabi_f2iz>
 80a0878:	4b05      	ldr	r3, [pc, #20]	; (80a0890 <_Z15get_Temperaturev+0xac>)
 80a087a:	e7e8      	b.n	80a084e <_Z15get_Temperaturev+0x6a>
 80a087c:	080a7aba 	.word	0x080a7aba
 80a0880:	20000168 	.word	0x20000168
 80a0884:	080a7acc 	.word	0x080a7acc
 80a0888:	080a7af7 	.word	0x080a7af7
 80a088c:	2000035c 	.word	0x2000035c
 80a0890:	20000360 	.word	0x20000360

080a0894 <_GLOBAL__sub_I_sensor>:
DS18 sensor(SENSOR_PIN);  // create sensor instance
 80a0894:	2200      	movs	r2, #0
 80a0896:	2105      	movs	r1, #5
 80a0898:	4801      	ldr	r0, [pc, #4]	; (80a08a0 <_GLOBAL__sub_I_sensor+0xc>)
 80a089a:	f7ff bdf3 	b.w	80a0484 <_ZN4DS18C1Etb>
 80a089e:	bf00      	nop
 80a08a0:	20000168 	.word	0x20000168

080a08a4 <_ZN14WidgetTerminal5writeEPKvj>:
#ifdef BLYNK_USE_PRINT_CLASS

    using Print::write;

    virtual size_t write(const void* buff, size_t len) {
        return write((char*)buff, len);
 80a08a4:	6803      	ldr	r3, [r0, #0]
 80a08a6:	695b      	ldr	r3, [r3, #20]
 80a08a8:	4718      	bx	r3

080a08aa <_ZN14WidgetTerminalD1Ev>:
class WidgetTerminal
 80a08aa:	4770      	bx	lr

080a08ac <_ZN14WidgetTerminalD0Ev>:
 80a08ac:	b510      	push	{r4, lr}
 80a08ae:	4604      	mov	r4, r0
 80a08b0:	214c      	movs	r1, #76	; 0x4c
 80a08b2:	f7ff fbf4 	bl	80a009e <_ZdlPvj>
 80a08b6:	4620      	mov	r0, r4
 80a08b8:	bd10      	pop	{r4, pc}

080a08ba <_ZN14WidgetTerminal5writeEh>:
    virtual size_t write(uint8_t byte) {
 80a08ba:	b510      	push	{r4, lr}
        mOutBuf[mOutQty++] = byte;
 80a08bc:	f890 4049 	ldrb.w	r4, [r0, #73]	; 0x49
 80a08c0:	1c62      	adds	r2, r4, #1
 80a08c2:	b2d2      	uxtb	r2, r2
 80a08c4:	4404      	add	r4, r0
        if (mOutQty >= sizeof(mOutBuf)) {
 80a08c6:	2a3f      	cmp	r2, #63	; 0x3f
        mOutBuf[mOutQty++] = byte;
 80a08c8:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 80a08cc:	7261      	strb	r1, [r4, #9]
        if (mOutQty >= sizeof(mOutBuf)) {
 80a08ce:	d902      	bls.n	80a08d6 <_ZN14WidgetTerminal5writeEh+0x1c>
            flush();
 80a08d0:	6803      	ldr	r3, [r0, #0]
 80a08d2:	691b      	ldr	r3, [r3, #16]
 80a08d4:	4798      	blx	r3
    }
 80a08d6:	2001      	movs	r0, #1
 80a08d8:	bd10      	pop	{r4, pc}

080a08da <_ZNK10BlynkParam5asIntEv.isra.0>:
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
 80a08da:	f006 b8f7 	b.w	80a6acc <atoi>
	...

080a08e0 <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
 80a08e0:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
 80a08e2:	f004 fbcb 	bl	80a507c <_Z16_fetch_usbserialv>
 80a08e6:	215b      	movs	r1, #91	; 0x5b
 80a08e8:	f003 fe02 	bl	80a44f0 <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
 80a08ec:	f004 fbc6 	bl	80a507c <_Z16_fetch_usbserialv>
 80a08f0:	4604      	mov	r4, r0
 80a08f2:	f002 fe75 	bl	80a35e0 <_Z11BlynkMillisv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a08f6:	220a      	movs	r2, #10
 80a08f8:	4601      	mov	r1, r0
 80a08fa:	4620      	mov	r0, r4
 80a08fc:	f003 fe11 	bl	80a4522 <_ZN5Print11printNumberEmh>
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a0900:	f004 fbbc 	bl	80a507c <_Z16_fetch_usbserialv>
        }
 80a0904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a0908:	4901      	ldr	r1, [pc, #4]	; (80a0910 <_ZL14BLYNK_LOG_TIMEv+0x30>)
 80a090a:	f003 bded 	b.w	80a44e8 <_ZN5Print5printEPKc>
 80a090e:	bf00      	nop
 80a0910:	080a7b01 	.word	0x080a7b01

080a0914 <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isClearSessionSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_CLEAR_SESSION);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
 80a0914:	b513      	push	{r0, r1, r4, lr}
 80a0916:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0918:	4b05      	ldr	r3, [pc, #20]	; (80a0930 <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a091a:	2200      	movs	r2, #0
 80a091c:	781b      	ldrb	r3, [r3, #0]
 80a091e:	f88d 3000 	strb.w	r3, [sp]
 80a0922:	233c      	movs	r3, #60	; 0x3c
 80a0924:	f004 f978 	bl	80a4c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
 80a0928:	4620      	mov	r0, r4
 80a092a:	b002      	add	sp, #8
 80a092c:	bd10      	pop	{r4, pc}
 80a092e:	bf00      	nop
 80a0930:	20000214 	.word	0x20000214

080a0934 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0934:	2300      	movs	r3, #0
 80a0936:	6840      	ldr	r0, [r0, #4]
 80a0938:	461a      	mov	r2, r3
 80a093a:	4619      	mov	r1, r3
 80a093c:	f003 b8aa 	b.w	80a3a94 <network_on>

080a0940 <_ZN10CloudClass7processEv>:
    static void process(void) {
 80a0940:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0942:	f002 fed7 	bl	80a36f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0946:	4b03      	ldr	r3, [pc, #12]	; (80a0954 <_ZN10CloudClass7processEv+0x14>)
 80a0948:	6018      	str	r0, [r3, #0]
    }
 80a094a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a094e:	f003 b8f9 	b.w	80a3b44 <spark_process>
 80a0952:	bf00      	nop
 80a0954:	200004e8 	.word	0x200004e8

080a0958 <_ZNK10BlynkParam8iterator5asIntEv>:
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a0958:	4603      	mov	r3, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a095a:	6800      	ldr	r0, [r0, #0]
 80a095c:	b120      	cbz	r0, 80a0968 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
 80a095e:	685b      	ldr	r3, [r3, #4]
 80a0960:	4298      	cmp	r0, r3
 80a0962:	d201      	bcs.n	80a0968 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a0964:	f006 b8b2 	b.w	80a6acc <atoi>
 80a0968:	2000      	movs	r0, #0
 80a096a:	4770      	bx	lr

080a096c <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
 80a096c:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a096e:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
 80a0970:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0972:	b145      	cbz	r5, 80a0986 <_ZN10BlynkParam8iteratorppEv+0x1a>
 80a0974:	6843      	ldr	r3, [r0, #4]
 80a0976:	429d      	cmp	r5, r3
 80a0978:	d205      	bcs.n	80a0986 <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
 80a097a:	4628      	mov	r0, r5
 80a097c:	f006 fa11 	bl	80a6da2 <strlen>
 80a0980:	3001      	adds	r0, #1
 80a0982:	4405      	add	r5, r0
 80a0984:	6025      	str	r5, [r4, #0]
        }
 80a0986:	4620      	mov	r0, r4
 80a0988:	bd38      	pop	{r3, r4, r5, pc}

080a098a <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
 80a098a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a098c:	4604      	mov	r4, r0
    if (str == NULL) {
 80a098e:	460d      	mov	r5, r1
 80a0990:	6847      	ldr	r7, [r0, #4]
 80a0992:	b921      	cbnz	r1, 80a099e <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
 80a0994:	6803      	ldr	r3, [r0, #0]
 80a0996:	1c7a      	adds	r2, r7, #1
 80a0998:	6042      	str	r2, [r0, #4]
 80a099a:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
 80a099c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
 80a099e:	4608      	mov	r0, r1
 80a09a0:	f006 f9ff 	bl	80a6da2 <strlen>
    if (len + l > buff_size)
 80a09a4:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
 80a09a6:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
 80a09a8:	19f2      	adds	r2, r6, r7
 80a09aa:	429a      	cmp	r2, r3
 80a09ac:	d8f6      	bhi.n	80a099c <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
 80a09ae:	6820      	ldr	r0, [r4, #0]
 80a09b0:	4632      	mov	r2, r6
 80a09b2:	4629      	mov	r1, r5
 80a09b4:	4438      	add	r0, r7
 80a09b6:	f006 f983 	bl	80a6cc0 <memcpy>
    len += l;
 80a09ba:	6860      	ldr	r0, [r4, #4]
 80a09bc:	4430      	add	r0, r6
 80a09be:	6060      	str	r0, [r4, #4]
 80a09c0:	e7ec      	b.n	80a099c <_ZN10BlynkParam3addEPKc+0x12>
	...

080a09c4 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
 80a09c4:	b538      	push	{r3, r4, r5, lr}
 80a09c6:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a09c8:	6825      	ldr	r5, [r4, #0]
    {
 80a09ca:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a09cc:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80a09d0:	4a04      	ldr	r2, [pc, #16]	; (80a09e4 <_ZN10BlynkParam3addEi+0x20>)
 80a09d2:	1a09      	subs	r1, r1, r0
 80a09d4:	4428      	add	r0, r5
 80a09d6:	f003 f91d 	bl	80a3c14 <snprintf>
 80a09da:	6863      	ldr	r3, [r4, #4]
 80a09dc:	3001      	adds	r0, #1
 80a09de:	4403      	add	r3, r0
 80a09e0:	6063      	str	r3, [r4, #4]
    }
 80a09e2:	bd38      	pop	{r3, r4, r5, pc}
 80a09e4:	080a7b04 	.word	0x080a7b04

080a09e8 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
 80a09e8:	b538      	push	{r3, r4, r5, lr}
 80a09ea:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a09ec:	6825      	ldr	r5, [r4, #0]
    {
 80a09ee:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a09f0:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80a09f4:	4a04      	ldr	r2, [pc, #16]	; (80a0a08 <_ZN10BlynkParam3addEl+0x20>)
 80a09f6:	1a09      	subs	r1, r1, r0
 80a09f8:	4428      	add	r0, r5
 80a09fa:	f003 f90b 	bl	80a3c14 <snprintf>
 80a09fe:	6863      	ldr	r3, [r4, #4]
 80a0a00:	3001      	adds	r0, #1
 80a0a02:	4403      	add	r3, r0
 80a0a04:	6063      	str	r3, [r4, #4]
    }
 80a0a06:	bd38      	pop	{r3, r4, r5, pc}
 80a0a08:	080a7b07 	.word	0x080a7b07

080a0a0c <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
 80a0a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
 80a0a0e:	6b47      	ldr	r7, [r0, #52]	; 0x34
    bool connect() {
 80a0a10:	4604      	mov	r4, r0
 80a0a12:	b087      	sub	sp, #28
        if (domain) {
 80a0a14:	b32f      	cbz	r7, 80a0a62 <_ZN22BlynkTransportParticle7connectEv+0x56>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
 80a0a16:	f7ff ff63 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a0a1a:	f004 fb2f 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0a1e:	4933      	ldr	r1, [pc, #204]	; (80a0aec <_ZN22BlynkTransportParticle7connectEv+0xe0>)
 80a0a20:	f003 fd62 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a0a24:	f004 fb2a 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a0a2a:	f003 fd5d 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a0a2e:	f004 fb25 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0a32:	213a      	movs	r1, #58	; 0x3a
 80a0a34:	f003 fd5c 	bl	80a44f0 <_ZN5Print5printEc>
 80a0a38:	f004 fb20 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0a3c:	4605      	mov	r5, r0
 80a0a3e:	220a      	movs	r2, #10
 80a0a40:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80a0a42:	f003 fd6e 	bl	80a4522 <_ZN5Print11printNumberEmh>
        n += println();
 80a0a46:	4628      	mov	r0, r5
 80a0a48:	f003 fd55 	bl	80a44f6 <_ZN5Print7printlnEv>
            return (1 == client.connect(domain, port));
 80a0a4c:	2300      	movs	r3, #0
 80a0a4e:	4620      	mov	r0, r4
 80a0a50:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a0a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a0a54:	f003 fc0e 	bl	80a4274 <_ZN9TCPClient7connectEPKctm>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
 80a0a58:	1e43      	subs	r3, r0, #1
 80a0a5a:	4258      	negs	r0, r3
 80a0a5c:	4158      	adcs	r0, r3
        }
        return 0;
    }
 80a0a5e:	b007      	add	sp, #28
 80a0a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
            BLYNK_LOG_IP("Connecting to ", addr);
 80a0a62:	f7ff ff3d 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a0a66:	f004 fb09 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0a6a:	4920      	ldr	r1, [pc, #128]	; (80a0aec <_ZN22BlynkTransportParticle7connectEv+0xe0>)
 80a0a6c:	f003 fd3c 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a0a70:	f004 fb04 	bl	80a507c <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 80a0a74:	220a      	movs	r2, #10
 80a0a76:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80a0a7a:	f003 fd52 	bl	80a4522 <_ZN5Print11printNumberEmh>
 80a0a7e:	f004 fafd 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0a82:	212e      	movs	r1, #46	; 0x2e
 80a0a84:	f003 fd34 	bl	80a44f0 <_ZN5Print5printEc>
 80a0a88:	f004 faf8 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0a8c:	220a      	movs	r2, #10
 80a0a8e:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80a0a92:	f003 fd46 	bl	80a4522 <_ZN5Print11printNumberEmh>
 80a0a96:	f004 faf1 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0a9a:	212e      	movs	r1, #46	; 0x2e
 80a0a9c:	f003 fd28 	bl	80a44f0 <_ZN5Print5printEc>
 80a0aa0:	f004 faec 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0aa4:	220a      	movs	r2, #10
 80a0aa6:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80a0aaa:	f003 fd3a 	bl	80a4522 <_ZN5Print11printNumberEmh>
 80a0aae:	f004 fae5 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0ab2:	212e      	movs	r1, #46	; 0x2e
 80a0ab4:	f003 fd1c 	bl	80a44f0 <_ZN5Print5printEc>
 80a0ab8:	f004 fae0 	bl	80a507c <_Z16_fetch_usbserialv>
            val = n;
 80a0abc:	4625      	mov	r5, r4
 80a0abe:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80a0ac0:	220a      	movs	r2, #10
 80a0ac2:	f815 1f20 	ldrb.w	r1, [r5, #32]!
 80a0ac6:	f003 fd2c 	bl	80a4522 <_ZN5Print11printNumberEmh>
        n += println();
 80a0aca:	4630      	mov	r0, r6
 80a0acc:	f003 fd13 	bl	80a44f6 <_ZN5Print7printlnEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0ad0:	4b07      	ldr	r3, [pc, #28]	; (80a0af0 <_ZN22BlynkTransportParticle7connectEv+0xe4>)
 80a0ad2:	ae01      	add	r6, sp, #4
 80a0ad4:	9300      	str	r3, [sp, #0]
 80a0ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0ad8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0ada:	682b      	ldr	r3, [r5, #0]
            return (1 == client.connect(addr, port));
 80a0adc:	4669      	mov	r1, sp
 80a0ade:	7033      	strb	r3, [r6, #0]
 80a0ae0:	4620      	mov	r0, r4
 80a0ae2:	463b      	mov	r3, r7
 80a0ae4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a0ae6:	f003 fa53 	bl	80a3f90 <_ZN9TCPClient7connectE9IPAddresstm>
 80a0aea:	e7b5      	b.n	80a0a58 <_ZN22BlynkTransportParticle7connectEv+0x4c>
 80a0aec:	080a7b0b 	.word	0x080a7b0b
 80a0af0:	080a8fa0 	.word	0x080a8fa0

080a0af4 <_Z9setupWifiv>:
/*---------------------------------------------------------------------
change WiFi settings
---------------------------------------------------------------------*/

void setupWifi()
{
 80a0af4:	b510      	push	{r4, lr}
WiFi.on();
 80a0af6:	4c17      	ldr	r4, [pc, #92]	; (80a0b54 <_Z9setupWifiv+0x60>)
{
 80a0af8:	b094      	sub	sp, #80	; 0x50
WiFi.on();
 80a0afa:	4620      	mov	r0, r4
 80a0afc:	f7ff ff1a 	bl	80a0934 <_ZN5spark9WiFiClass2onEv>
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
 80a0b00:	2200      	movs	r2, #0
 80a0b02:	6860      	ldr	r0, [r4, #4]
 80a0b04:	4611      	mov	r1, r2
 80a0b06:	f002 ffe5 	bl	80a3ad4 <network_has_credentials>

if(WiFi.hasCredentials())
 80a0b0a:	b128      	cbz	r0, 80a0b18 <_Z9setupWifiv+0x24>
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
 80a0b0c:	2300      	movs	r3, #0
 80a0b0e:	6860      	ldr	r0, [r4, #4]
 80a0b10:	461a      	mov	r2, r3
 80a0b12:	4619      	mov	r1, r3
 80a0b14:	f002 ffee 	bl	80a3af4 <network_clear_credentials>
        memset(&creds, 0, sizeof(creds));
 80a0b18:	2238      	movs	r2, #56	; 0x38
 80a0b1a:	2100      	movs	r1, #0
 80a0b1c:	a806      	add	r0, sp, #24
 80a0b1e:	f006 f8dd 	bl	80a6cdc <memset>
        creds.size = sizeof(creds);
 80a0b22:	234c      	movs	r3, #76	; 0x4c
 80a0b24:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
 80a0b26:	4b0c      	ldr	r3, [pc, #48]	; (80a0b58 <_Z9setupWifiv+0x64>)
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a0b28:	6860      	ldr	r0, [r4, #4]
        creds.ssid = ssid;
 80a0b2a:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
 80a0b2c:	230b      	movs	r3, #11
 80a0b2e:	9303      	str	r3, [sp, #12]
        creds.password = password;
 80a0b30:	4b0a      	ldr	r3, [pc, #40]	; (80a0b5c <_Z9setupWifiv+0x68>)
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a0b32:	aa01      	add	r2, sp, #4
        creds.password = password;
 80a0b34:	9304      	str	r3, [sp, #16]
        creds.password_len = passwordLen;
 80a0b36:	230d      	movs	r3, #13
 80a0b38:	9305      	str	r3, [sp, #20]
        creds.security = WLanSecurityType(security);
 80a0b3a:	2303      	movs	r3, #3
 80a0b3c:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a0b40:	2300      	movs	r3, #0
 80a0b42:	4619      	mov	r1, r3
 80a0b44:	f002 ffce 	bl	80a3ae4 <network_set_credentials>
  WiFi.clearCredentials();
  }

WiFi.setCredentials("Stitzenburg", "BC$_clu$_4277");
Particle.connect();
}
 80a0b48:	b014      	add	sp, #80	; 0x50
 80a0b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        spark_cloud_flag_connect();
 80a0b4e:	f003 b801 	b.w	80a3b54 <spark_cloud_flag_connect>
 80a0b52:	bf00      	nop
 80a0b54:	200004b0 	.word	0x200004b0
 80a0b58:	080a7b1a 	.word	0x080a7b1a
 80a0b5c:	080a7b26 	.word	0x080a7b26

080a0b60 <_Z7getTimev>:

/*
* Return time as "minutes of day" = 60*hour + minutes
*/
int getTime()
{
 80a0b60:	b538      	push	{r3, r4, r5, lr}
  tsec = 60 * Time.minute() + Time.second();  
 80a0b62:	f003 fe0f 	bl	80a4784 <_ZN9TimeClass6minuteEv>
 80a0b66:	253c      	movs	r5, #60	; 0x3c
 80a0b68:	4604      	mov	r4, r0
 80a0b6a:	f003 fe17 	bl	80a479c <_ZN9TimeClass6secondEv>
 80a0b6e:	fb05 0004 	mla	r0, r5, r4, r0
 80a0b72:	4b05      	ldr	r3, [pc, #20]	; (80a0b88 <_Z7getTimev+0x28>)
 80a0b74:	6018      	str	r0, [r3, #0]
  return (Time.hour() * 60 + Time.minute());
 80a0b76:	f003 fdf9 	bl	80a476c <_ZN9TimeClass4hourEv>
 80a0b7a:	4604      	mov	r4, r0
 80a0b7c:	f003 fe02 	bl	80a4784 <_ZN9TimeClass6minuteEv>
}
 80a0b80:	fb05 0004 	mla	r0, r5, r4, r0
 80a0b84:	bd38      	pop	{r3, r4, r5, pc}
 80a0b86:	bf00      	nop
 80a0b88:	200003fc 	.word	0x200003fc

080a0b8c <_Z12getSleepTimei>:
  min = tnow - (hour * 60);
  Serial.printlnf(" (%02d:%02d)", hour, min);
}

int getSleepTime(int target)
{
 80a0b8c:	b510      	push	{r4, lr}
 80a0b8e:	4604      	mov	r4, r0
  target = target - Time.minute();
 80a0b90:	f003 fdf8 	bl	80a4784 <_ZN9TimeClass6minuteEv>
  if (target < 0)
 80a0b94:	1a24      	subs	r4, r4, r0
    target = target + 60;
 80a0b96:	bf48      	it	mi
 80a0b98:	343c      	addmi	r4, #60	; 0x3c
  Serial.printlnf(" proposed sleep duration: %d minutes", target);
 80a0b9a:	f004 fa6f 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0b9e:	4622      	mov	r2, r4
 80a0ba0:	4902      	ldr	r1, [pc, #8]	; (80a0bac <_Z12getSleepTimei+0x20>)
 80a0ba2:	f7ff fa86 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  return (target);
}
 80a0ba6:	4620      	mov	r0, r4
 80a0ba8:	bd10      	pop	{r4, pc}
 80a0baa:	bf00      	nop
 80a0bac:	080a7b34 	.word	0x080a7b34

080a0bb0 <_Z15readAdcChannelsv>:
  val = val * 43 / 40960;
  return (val);
}

void readAdcChannels()
{
 80a0bb0:	b538      	push	{r3, r4, r5, lr}
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a0bb2:	200a      	movs	r0, #10
 80a0bb4:	f004 fcb3 	bl	80a551e <analogRead>
  val = val * 43 / 40960;
 80a0bb8:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 80a0bbc:	4d0b      	ldr	r5, [pc, #44]	; (80a0bec <_Z15readAdcChannelsv+0x3c>)
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a0bbe:	4b0c      	ldr	r3, [pc, #48]	; (80a0bf0 <_Z15readAdcChannelsv+0x40>)
  val = val * 43 / 40960;
 80a0bc0:	4368      	muls	r0, r5
 80a0bc2:	fbb0 f0f4 	udiv	r0, r0, r4
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a0bc6:	6018      	str	r0, [r3, #0]
  AiPumpeReserve = convertAdcValue(analogRead(A2));
 80a0bc8:	200c      	movs	r0, #12
 80a0bca:	f004 fca8 	bl	80a551e <analogRead>
  val = val * 43 / 40960;
 80a0bce:	4368      	muls	r0, r5
 80a0bd0:	fbb0 f0f4 	udiv	r0, r0, r4
  AiPumpeReserve = convertAdcValue(analogRead(A2));
 80a0bd4:	4b07      	ldr	r3, [pc, #28]	; (80a0bf4 <_Z15readAdcChannelsv+0x44>)
 80a0bd6:	6018      	str	r0, [r3, #0]
  Ai12V = convertAdcValue(analogRead(A1));
 80a0bd8:	200b      	movs	r0, #11
 80a0bda:	f004 fca0 	bl	80a551e <analogRead>
  val = val * 43 / 40960;
 80a0bde:	4368      	muls	r0, r5
 80a0be0:	fbb0 f0f4 	udiv	r0, r0, r4
  Ai12V = convertAdcValue(analogRead(A1));
 80a0be4:	4b04      	ldr	r3, [pc, #16]	; (80a0bf8 <_Z15readAdcChannelsv+0x48>)
 80a0be6:	6018      	str	r0, [r3, #0]
}
 80a0be8:	bd38      	pop	{r3, r4, r5, pc}
 80a0bea:	bf00      	nop
 80a0bec:	00022a4c 	.word	0x00022a4c
 80a0bf0:	200001a0 	.word	0x200001a0
 80a0bf4:	200001a4 	.word	0x200001a4
 80a0bf8:	2000019c 	.word	0x2000019c

080a0bfc <_Z6hwInitv>:

/*---------------------------------------------------------------------
Hardware Initialisation
---------------------------------------------------------------------*/
void hwInit()
{
 80a0bfc:	b508      	push	{r3, lr}
  conrad_rsl_init(); // 433 MHz Sender abschalten
 80a0bfe:	f002 f87f 	bl	80a2d00 <_Z15conrad_rsl_initv>

  ultra_sonic_setup();
 80a0c02:	f001 fecf 	bl	80a29a4 <_Z17ultra_sonic_setupv>

  pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a0c06:	2101      	movs	r1, #1
 80a0c08:	4608      	mov	r0, r1
 80a0c0a:	f004 fc4b 	bl	80a54a4 <pinMode>
  pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a0c0e:	2101      	movs	r1, #1
 80a0c10:	2002      	movs	r0, #2
 80a0c12:	f004 fc47 	bl	80a54a4 <pinMode>

  digitalWrite(DO_PUMPE_RESERVE, 0);
 80a0c16:	2100      	movs	r1, #0
 80a0c18:	2002      	movs	r0, #2
 80a0c1a:	f004 fc54 	bl	80a54c6 <digitalWrite>
  digitalWrite(DO_PUMPE_MAIN, 0);
 80a0c1e:	2100      	movs	r1, #0
 80a0c20:	2001      	movs	r0, #1
 80a0c22:	f004 fc50 	bl	80a54c6 <digitalWrite>

  st_funk_pumpe = switch_pumpe_main(OFF, 0);
 80a0c26:	2100      	movs	r1, #0
 80a0c28:	4608      	mov	r0, r1
 80a0c2a:	f002 fa5b 	bl	80a30e4 <_Z17switch_pumpe_mainii>
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0c2e:	2100      	movs	r1, #0
  st_funk_pumpe = switch_pumpe_main(OFF, 0);
 80a0c30:	4b0e      	ldr	r3, [pc, #56]	; (80a0c6c <_Z6hwInitv+0x70>)
 80a0c32:	6018      	str	r0, [r3, #0]
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0c34:	4608      	mov	r0, r1
 80a0c36:	f002 fb13 	bl	80a3260 <_Z20switch_pumpe_reserveii>
 80a0c3a:	4b0d      	ldr	r3, [pc, #52]	; (80a0c70 <_Z6hwInitv+0x74>)

  pinMode(BLYNK_LED, OUTPUT);
 80a0c3c:	2101      	movs	r1, #1
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0c3e:	6018      	str	r0, [r3, #0]
  pinMode(BLYNK_LED, OUTPUT);
 80a0c40:	2007      	movs	r0, #7
 80a0c42:	f004 fc2f 	bl	80a54a4 <pinMode>
  pinMode(DONT_SLEEP_PIN, INPUT);
 80a0c46:	2100      	movs	r1, #0
 80a0c48:	2006      	movs	r0, #6
 80a0c4a:	f004 fc2b 	bl	80a54a4 <pinMode>

  EEPROM.get(0, control);
 80a0c4e:	f004 fce5 	bl	80a561c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a0c52:	2214      	movs	r2, #20
 80a0c54:	2000      	movs	r0, #0
 80a0c56:	4907      	ldr	r1, [pc, #28]	; (80a0c74 <_Z6hwInitv+0x78>)
 80a0c58:	f002 fd5c 	bl	80a3714 <HAL_EEPROM_Get>

  ts_giessen = 8 * 60 + 1; // zu dieser Zeit wird die Wasserpumpe eingeschaltet
 80a0c5c:	f240 12e1 	movw	r2, #481	; 0x1e1
 80a0c60:	4b05      	ldr	r3, [pc, #20]	; (80a0c78 <_Z6hwInitv+0x7c>)
 80a0c62:	601a      	str	r2, [r3, #0]

  done_giessen = 0;
 80a0c64:	2200      	movs	r2, #0
 80a0c66:	4b05      	ldr	r3, [pc, #20]	; (80a0c7c <_Z6hwInitv+0x80>)
 80a0c68:	601a      	str	r2, [r3, #0]
}
 80a0c6a:	bd08      	pop	{r3, pc}
 80a0c6c:	20000350 	.word	0x20000350
 80a0c70:	20000358 	.word	0x20000358
 80a0c74:	20000310 	.word	0x20000310
 80a0c78:	20000024 	.word	0x20000024
 80a0c7c:	20000324 	.word	0x20000324

080a0c80 <_Z18reportDontSleepPinv>:
}
/*---------------------------------------------------------------------
report to database if DontSleepPin is set
---------------------------------------------------------------------*/
int reportDontSleepPin()
{
 80a0c80:	b538      	push	{r3, r4, r5, lr}
  int dontSleep = 0;

  if (digitalRead(DONT_SLEEP_PIN) == HIGH)
 80a0c82:	2006      	movs	r0, #6
 80a0c84:	f004 fc38 	bl	80a54f8 <digitalRead>
 80a0c88:	2801      	cmp	r0, #1
 80a0c8a:	4604      	mov	r4, r0
 80a0c8c:	d110      	bne.n	80a0cb0 <_Z18reportDontSleepPinv+0x30>
  {
    dontSleepHW = 1;
 80a0c8e:	4b09      	ldr	r3, [pc, #36]	; (80a0cb4 <_Z18reportDontSleepPinv+0x34>)
    dontSleep = 1;
    WriteToDatabase("CONTROL", "SLEEP disabled by HW pin ");
 80a0c90:	4909      	ldr	r1, [pc, #36]	; (80a0cb8 <_Z18reportDontSleepPinv+0x38>)
    dontSleepHW = 1;
 80a0c92:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "SLEEP disabled by HW pin ");
 80a0c94:	4809      	ldr	r0, [pc, #36]	; (80a0cbc <_Z18reportDontSleepPinv+0x3c>)
 80a0c96:	f7ff fa31 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  }

  if (control.dontSleepSW == 1)
 80a0c9a:	4b09      	ldr	r3, [pc, #36]	; (80a0cc0 <_Z18reportDontSleepPinv+0x40>)
 80a0c9c:	685d      	ldr	r5, [r3, #4]
 80a0c9e:	2d01      	cmp	r5, #1
 80a0ca0:	d104      	bne.n	80a0cac <_Z18reportDontSleepPinv+0x2c>
  {
    dontSleep = 1;
    WriteToDatabase("CONTROL", "SLEEP disabled by SW ");
 80a0ca2:	4908      	ldr	r1, [pc, #32]	; (80a0cc4 <_Z18reportDontSleepPinv+0x44>)
 80a0ca4:	4805      	ldr	r0, [pc, #20]	; (80a0cbc <_Z18reportDontSleepPinv+0x3c>)
 80a0ca6:	f7ff fa29 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a0caa:	462c      	mov	r4, r5
  }
  return (dontSleep);
}
 80a0cac:	4620      	mov	r0, r4
 80a0cae:	bd38      	pop	{r3, r4, r5, pc}
  int dontSleep = 0;
 80a0cb0:	2400      	movs	r4, #0
 80a0cb2:	e7f2      	b.n	80a0c9a <_Z18reportDontSleepPinv+0x1a>
 80a0cb4:	20000328 	.word	0x20000328
 80a0cb8:	080a7b59 	.word	0x080a7b59
 80a0cbc:	080a7b73 	.word	0x080a7b73
 80a0cc0:	20000310 	.word	0x20000310
 80a0cc4:	080a7b7b 	.word	0x080a7b7b

080a0cc8 <_Z17checkDontSleepPinv>:

/*---------------------------------------------------------------------
check if DontSleepPin is set
---------------------------------------------------------------------*/
int checkDontSleepPin()
{
 80a0cc8:	b510      	push	{r4, lr}
  if (digitalRead(DONT_SLEEP_PIN) == HIGH)
 80a0cca:	2006      	movs	r0, #6
 80a0ccc:	f004 fc14 	bl	80a54f8 <digitalRead>
 80a0cd0:	1e43      	subs	r3, r0, #1
 80a0cd2:	4c06      	ldr	r4, [pc, #24]	; (80a0cec <_Z17checkDontSleepPinv+0x24>)
 80a0cd4:	4258      	negs	r0, r3
 80a0cd6:	4158      	adcs	r0, r3
 80a0cd8:	6020      	str	r0, [r4, #0]
  else
  {
    dontSleepHW = 0;
  }

  Serial.printlnf(" dontSleep pin : %d ", dontSleepHW);
 80a0cda:	f004 f9cf 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0cde:	6822      	ldr	r2, [r4, #0]
 80a0ce0:	4903      	ldr	r1, [pc, #12]	; (80a0cf0 <_Z17checkDontSleepPinv+0x28>)
 80a0ce2:	f7ff f9e6 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  return (dontSleepHW);
}
 80a0ce6:	6820      	ldr	r0, [r4, #0]
 80a0ce8:	bd10      	pop	{r4, pc}
 80a0cea:	bf00      	nop
 80a0cec:	20000328 	.word	0x20000328
 80a0cf0:	080a7b91 	.word	0x080a7b91

080a0cf4 <_Z9timeStampv>:

/*---------------------------------------------------------------------
print timestamp to serial port
---------------------------------------------------------------------*/
void timeStamp()
{
 80a0cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0cf8:	b085      	sub	sp, #20
  sprintf(timebuffer, " %.2d-%.2d-%d %.2d:%.2d:%.2d ",
 80a0cfa:	f003 fd5b 	bl	80a47b4 <_ZN9TimeClass3dayEv>
 80a0cfe:	4604      	mov	r4, r0
 80a0d00:	f003 fd6c 	bl	80a47dc <_ZN9TimeClass5monthEv>
 80a0d04:	4605      	mov	r5, r0
 80a0d06:	f003 fd71 	bl	80a47ec <_ZN9TimeClass4yearEv>
 80a0d0a:	4606      	mov	r6, r0
 80a0d0c:	f003 fd2e 	bl	80a476c <_ZN9TimeClass4hourEv>
 80a0d10:	4607      	mov	r7, r0
 80a0d12:	f003 fd37 	bl	80a4784 <_ZN9TimeClass6minuteEv>
 80a0d16:	4680      	mov	r8, r0
 80a0d18:	f003 fd40 	bl	80a479c <_ZN9TimeClass6secondEv>
 80a0d1c:	f8df 9024 	ldr.w	r9, [pc, #36]	; 80a0d44 <_Z9timeStampv+0x50>
 80a0d20:	462b      	mov	r3, r5
 80a0d22:	4622      	mov	r2, r4
 80a0d24:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80a0d28:	4907      	ldr	r1, [pc, #28]	; (80a0d48 <_Z9timeStampv+0x54>)
 80a0d2a:	4648      	mov	r0, r9
 80a0d2c:	e9cd 6700 	strd	r6, r7, [sp]
 80a0d30:	f002 ff60 	bl	80a3bf4 <sprintf>
          Time.year(),
          Time.hour(),
          Time.minute(),
          Time.second());

  Serial.print(timebuffer);
 80a0d34:	f004 f9a2 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0d38:	4649      	mov	r1, r9
/*   if (termEnabled == 1)
  {
    terminal.print(timebuffer); // Ausgabe an BLYNK APP terminal
    terminal.flush();
  }  */
}
 80a0d3a:	b005      	add	sp, #20
 80a0d3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Serial.print(timebuffer);
 80a0d40:	f003 bbd2 	b.w	80a44e8 <_ZN5Print5printEPKc>
 80a0d44:	200003bc 	.word	0x200003bc
 80a0d48:	080a7ba6 	.word	0x080a7ba6

080a0d4c <BlynkWidgetWrite16>:
  }
}


BLYNK_WRITE(V16)
{
 80a0d4c:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a0d4e:	6808      	ldr	r0, [r1, #0]
 80a0d50:	f7ff fdc3 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a0d54:	2801      	cmp	r0, #1
 80a0d56:	d105      	bne.n	80a0d64 <BlynkWidgetWrite16+0x18>
  {
   switch_pumpe_funk(OFF,0); // pumpe aus  
  }
}
 80a0d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   switch_pumpe_funk(OFF,0); // pumpe aus  
 80a0d5c:	2100      	movs	r1, #0
 80a0d5e:	4608      	mov	r0, r1
 80a0d60:	f002 bb24 	b.w	80a33ac <_Z17switch_pumpe_funkii>
}
 80a0d64:	bd08      	pop	{r3, pc}

080a0d66 <BlynkWidgetWrite17>:

BLYNK_WRITE(V17)
{
 80a0d66:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a0d68:	6808      	ldr	r0, [r1, #0]
 80a0d6a:	f7ff fdb6 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a0d6e:	2801      	cmp	r0, #1
 80a0d70:	d104      	bne.n	80a0d7c <BlynkWidgetWrite17+0x16>
  {
   switch_pumpe_funk(ON,15); // pumpe ein  
  }
}
 80a0d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   switch_pumpe_funk(ON,15); // pumpe ein  
 80a0d76:	210f      	movs	r1, #15
 80a0d78:	f002 bb18 	b.w	80a33ac <_Z17switch_pumpe_funkii>
}
 80a0d7c:	bd08      	pop	{r3, pc}

080a0d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
 80a0d7e:	b508      	push	{r3, lr}
        state = CONNECTING;
 80a0d80:	2300      	movs	r3, #0
 80a0d82:	7743      	strb	r3, [r0, #29]

    void disconnect() { client.stop(); }
 80a0d84:	6800      	ldr	r0, [r0, #0]
 80a0d86:	f003 f9ad 	bl	80a40e4 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
 80a0d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
 80a0d8e:	f002 bc2b 	b.w	80a35e8 <BlynkNoOpCbk>
	...

080a0d94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
 80a0d98:	eb01 0802 	add.w	r8, r1, r2
 80a0d9c:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a0d9e:	4541      	cmp	r1, r8
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0da0:	4607      	mov	r7, r0
 80a0da2:	460d      	mov	r5, r1
 80a0da4:	4691      	mov	r9, r2
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0da6:	e9cd 1805 	strd	r1, r8, [sp, #20]
    if (it >= param.end())
 80a0daa:	f080 809e 	bcs.w	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
 80a0dae:	a805      	add	r0, sp, #20
 80a0db0:	880e      	ldrh	r6, [r1, #0]
 80a0db2:	f7ff fddb 	bl	80a096c <_ZN10BlynkParam8iteratorppEv>
 80a0db6:	6803      	ldr	r3, [r0, #0]
 80a0db8:	4543      	cmp	r3, r8
 80a0dba:	f080 8096 	bcs.w	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0dbe:	a805      	add	r0, sp, #20
 80a0dc0:	f7ff fdca 	bl	80a0958 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
 80a0dc4:	f247 2376 	movw	r3, #29302	; 0x7276
 80a0dc8:	429e      	cmp	r6, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0dca:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
 80a0dcc:	f000 80b5 	beq.w	80a0f3a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a6>
 80a0dd0:	d828      	bhi.n	80a0e24 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x90>
 80a0dd2:	f247 2361 	movw	r3, #29281	; 0x7261
 80a0dd6:	429e      	cmp	r6, r3
 80a0dd8:	f000 808a 	beq.w	80a0ef0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x15c>
 80a0ddc:	f247 2364 	movw	r3, #29284	; 0x7264
 80a0de0:	429e      	cmp	r6, r3
 80a0de2:	d04d      	beq.n	80a0e80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xec>
 80a0de4:	f646 5370 	movw	r3, #28016	; 0x6d70
 80a0de8:	429e      	cmp	r6, r3
 80a0dea:	d128      	bne.n	80a0e3e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
 80a0dec:	4e68      	ldr	r6, [pc, #416]	; (80a0f90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a0dee:	4f69      	ldr	r7, [pc, #420]	; (80a0f94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>)
 80a0df0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80a0f98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x204>
        while (it < param.end()) {
 80a0df4:	9b05      	ldr	r3, [sp, #20]
 80a0df6:	4598      	cmp	r8, r3
 80a0df8:	d977      	bls.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0dfa:	a805      	add	r0, sp, #20
 80a0dfc:	f7ff fdac 	bl	80a0958 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0e00:	b2c5      	uxtb	r5, r0
            ++it;
 80a0e02:	a805      	add	r0, sp, #20
 80a0e04:	f7ff fdb2 	bl	80a096c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
 80a0e08:	9c05      	ldr	r4, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
 80a0e0a:	4631      	mov	r1, r6
 80a0e0c:	4620      	mov	r0, r4
 80a0e0e:	f005 ff9b 	bl	80a6d48 <strcmp>
 80a0e12:	4601      	mov	r1, r0
 80a0e14:	bb38      	cbnz	r0, 80a0e66 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd2>
                pinMode(pin, OUTPUT);
 80a0e16:	4628      	mov	r0, r5
 80a0e18:	f004 fb44 	bl	80a54a4 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
 80a0e1c:	a805      	add	r0, sp, #20
 80a0e1e:	f7ff fda5 	bl	80a096c <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
 80a0e22:	e7e7      	b.n	80a0df4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
    switch(cmd16) {
 80a0e24:	f247 7364 	movw	r3, #30564	; 0x7764
 80a0e28:	429e      	cmp	r6, r3
 80a0e2a:	d04a      	beq.n	80a0ec2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
 80a0e2c:	f247 7376 	movw	r3, #30582	; 0x7776
 80a0e30:	429e      	cmp	r6, r3
 80a0e32:	f000 8092 	beq.w	80a0f5a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
 80a0e36:	f247 7361 	movw	r3, #30561	; 0x7761
 80a0e3a:	429e      	cmp	r6, r3
 80a0e3c:	d06a      	beq.n	80a0f14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x180>
        } else {
            BlynkWidgetWriteDefault(req, param2);
        }
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
 80a0e3e:	f7ff fd4f 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a0e42:	f004 f91b 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0e46:	4955      	ldr	r1, [pc, #340]	; (80a0f9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x208>)
 80a0e48:	f003 fb4e 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a0e4c:	f004 f916 	bl	80a507c <_Z16_fetch_usbserialv>
 80a0e50:	4629      	mov	r1, r5
 80a0e52:	f003 fb5c 	bl	80a450e <_ZN5Print7printlnEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a0e56:	2300      	movs	r3, #0
 80a0e58:	2202      	movs	r2, #2
 80a0e5a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a0e5e:	9200      	str	r2, [sp, #0]
 80a0e60:	4619      	mov	r1, r3
 80a0e62:	8b7a      	ldrh	r2, [r7, #26]
 80a0e64:	e029      	b.n	80a0eba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x126>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a0e66:	4639      	mov	r1, r7
 80a0e68:	4620      	mov	r0, r4
 80a0e6a:	f005 ff6d 	bl	80a6d48 <strcmp>
 80a0e6e:	b128      	cbz	r0, 80a0e7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe8>
 80a0e70:	4649      	mov	r1, r9
 80a0e72:	4620      	mov	r0, r4
 80a0e74:	f005 ff68 	bl	80a6d48 <strcmp>
 80a0e78:	2800      	cmp	r0, #0
 80a0e7a:	d1cf      	bne.n	80a0e1c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x88>
                pinMode(pin, OUTPUT);
 80a0e7c:	2101      	movs	r1, #1
 80a0e7e:	e7ca      	b.n	80a0e16 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0e80:	ab0a      	add	r3, sp, #40	; 0x28
 80a0e82:	9307      	str	r3, [sp, #28]
 80a0e84:	2500      	movs	r5, #0
 80a0e86:	2310      	movs	r3, #16
        rsp.add("dw");
 80a0e88:	4945      	ldr	r1, [pc, #276]	; (80a0fa0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
 80a0e8a:	a807      	add	r0, sp, #28
 80a0e8c:	e9cd 5308 	strd	r5, r3, [sp, #32]
 80a0e90:	f7ff fd7b 	bl	80a098a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
 80a0e94:	a807      	add	r0, sp, #28
 80a0e96:	4621      	mov	r1, r4
 80a0e98:	f7ff fd94 	bl	80a09c4 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
 80a0e9c:	4620      	mov	r0, r4
 80a0e9e:	f004 fb2b 	bl	80a54f8 <digitalRead>
        rsp.add(analogRead(pin));
 80a0ea2:	4601      	mov	r1, r0
 80a0ea4:	a807      	add	r0, sp, #28
 80a0ea6:	f7ff fd9f 	bl	80a09e8 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
 80a0eaa:	462a      	mov	r2, r5
 80a0eac:	2114      	movs	r1, #20
 80a0eae:	9b08      	ldr	r3, [sp, #32]
 80a0eb0:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80a0eb4:	3b01      	subs	r3, #1
 80a0eb6:	9300      	str	r3, [sp, #0]
 80a0eb8:	9b07      	ldr	r3, [sp, #28]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a0eba:	4638      	mov	r0, r7
 80a0ebc:	f000 fae8 	bl	80a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
 80a0ec0:	e013      	b.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        if (++it >= param.end())
 80a0ec2:	a805      	add	r0, sp, #20
 80a0ec4:	f7ff fd52 	bl	80a096c <_ZN10BlynkParam8iteratorppEv>
 80a0ec8:	6803      	ldr	r3, [r0, #0]
 80a0eca:	4598      	cmp	r8, r3
 80a0ecc:	d90d      	bls.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        pinMode(pin, OUTPUT);
 80a0ece:	b2a4      	uxth	r4, r4
 80a0ed0:	2101      	movs	r1, #1
 80a0ed2:	4620      	mov	r0, r4
 80a0ed4:	f004 fae6 	bl	80a54a4 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
 80a0ed8:	a805      	add	r0, sp, #20
 80a0eda:	f7ff fd3d 	bl	80a0958 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0ede:	1e01      	subs	r1, r0, #0
 80a0ee0:	bf18      	it	ne
 80a0ee2:	2101      	movne	r1, #1
 80a0ee4:	4620      	mov	r0, r4
 80a0ee6:	f004 faee 	bl	80a54c6 <digitalWrite>
    }
}
 80a0eea:	b00f      	add	sp, #60	; 0x3c
 80a0eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0ef0:	ab0a      	add	r3, sp, #40	; 0x28
 80a0ef2:	9307      	str	r3, [sp, #28]
 80a0ef4:	2500      	movs	r5, #0
 80a0ef6:	2310      	movs	r3, #16
        rsp.add("aw");
 80a0ef8:	a807      	add	r0, sp, #28
 80a0efa:	492a      	ldr	r1, [pc, #168]	; (80a0fa4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
 80a0efc:	e9cd 5308 	strd	r5, r3, [sp, #32]
 80a0f00:	f7ff fd43 	bl	80a098a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
 80a0f04:	a807      	add	r0, sp, #28
 80a0f06:	4621      	mov	r1, r4
 80a0f08:	f7ff fd5c 	bl	80a09c4 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
 80a0f0c:	4620      	mov	r0, r4
 80a0f0e:	f004 fb06 	bl	80a551e <analogRead>
 80a0f12:	e7c6      	b.n	80a0ea2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
        if (++it >= param.end())
 80a0f14:	a805      	add	r0, sp, #20
 80a0f16:	f7ff fd29 	bl	80a096c <_ZN10BlynkParam8iteratorppEv>
 80a0f1a:	6803      	ldr	r3, [r0, #0]
 80a0f1c:	4598      	cmp	r8, r3
 80a0f1e:	d9e4      	bls.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        pinMode(pin, OUTPUT);
 80a0f20:	b2a4      	uxth	r4, r4
 80a0f22:	2101      	movs	r1, #1
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	f004 fabd 	bl	80a54a4 <pinMode>
        analogWrite(pin, it.asInt());
 80a0f2a:	a805      	add	r0, sp, #20
 80a0f2c:	f7ff fd14 	bl	80a0958 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0f30:	4601      	mov	r1, r0
 80a0f32:	4620      	mov	r0, r4
 80a0f34:	f004 fb0a 	bl	80a554c <_Z11analogWritetm>
    } break;
 80a0f38:	e7d7      	b.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0f3a:	4620      	mov	r0, r4
        BlynkReq req = { pin };
 80a0f3c:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0f40:	f002 fb54 	bl	80a35ec <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
 80a0f44:	4603      	mov	r3, r0
            handler(req);
 80a0f46:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
 80a0f48:	b123      	cbz	r3, 80a0f54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c0>
 80a0f4a:	4a17      	ldr	r2, [pc, #92]	; (80a0fa8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x214>)
 80a0f4c:	4293      	cmp	r3, r2
 80a0f4e:	d001      	beq.n	80a0f54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c0>
            handler(req);
 80a0f50:	4798      	blx	r3
 80a0f52:	e7ca      	b.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
            BlynkWidgetReadDefault(req);
 80a0f54:	f002 fb46 	bl	80a35e4 <BlynkWidgetRead>
    } break;
 80a0f58:	e7c7      	b.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        ++it;
 80a0f5a:	a805      	add	r0, sp, #20
 80a0f5c:	f7ff fd06 	bl	80a096c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
 80a0f60:	9b05      	ldr	r3, [sp, #20]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0f62:	4620      	mov	r0, r4
        BlynkParam param2(start, len - (start - (char*)buff));
 80a0f64:	1b5d      	subs	r5, r3, r5
 80a0f66:	eba9 0505 	sub.w	r5, r9, r5
        : buff((char*)addr), len(length), buff_size(length)
 80a0f6a:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
 80a0f6e:	950c      	str	r5, [sp, #48]	; 0x30
        BlynkReq req = { pin };
 80a0f70:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0f74:	f002 fb44 	bl	80a3600 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0f78:	4603      	mov	r3, r0
            handler(req, param2);
 80a0f7a:	a90a      	add	r1, sp, #40	; 0x28
 80a0f7c:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0f7e:	b123      	cbz	r3, 80a0f8a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f6>
 80a0f80:	4a0a      	ldr	r2, [pc, #40]	; (80a0fac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x218>)
 80a0f82:	4293      	cmp	r3, r2
 80a0f84:	d001      	beq.n	80a0f8a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f6>
            handler(req, param2);
 80a0f86:	4798      	blx	r3
 80a0f88:	e7af      	b.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
            BlynkWidgetWriteDefault(req, param2);
 80a0f8a:	f002 fb2c 	bl	80a35e6 <BlynkWidgetWrite>
    } break;
 80a0f8e:	e7ac      	b.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
 80a0f90:	080a7bc4 	.word	0x080a7bc4
 80a0f94:	080a7c6b 	.word	0x080a7c6b
 80a0f98:	080a7bc7 	.word	0x080a7bc7
 80a0f9c:	080a7bd1 	.word	0x080a7bd1
 80a0fa0:	080a7bcb 	.word	0x080a7bcb
 80a0fa4:	080a7bce 	.word	0x080a7bce
 80a0fa8:	080a35e5 	.word	0x080a35e5
 80a0fac:	080a35e7 	.word	0x080a35e7

080a0fb0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
 80a0fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0fb4:	b08c      	sub	sp, #48	; 0x30
 80a0fb6:	af04      	add	r7, sp, #16
 80a0fb8:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
 80a0fba:	2205      	movs	r2, #5
 80a0fbc:	6800      	ldr	r0, [r0, #0]
 80a0fbe:	1d39      	adds	r1, r7, #4
 80a0fc0:	f003 fb12 	bl	80a45e8 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
 80a0fc4:	2800      	cmp	r0, #0
 80a0fc6:	d049      	beq.n	80a105c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xac>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
 80a0fc8:	2805      	cmp	r0, #5
 80a0fca:	d004      	beq.n	80a0fd6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26>
        return false;
 80a0fcc:	2000      	movs	r0, #0
}
 80a0fce:	3720      	adds	r7, #32
 80a0fd0:	46bd      	mov	sp, r7
 80a0fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
 80a0fd6:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 80a0fda:	ba5b      	rev16	r3, r3
 80a0fdc:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a0fde:	f8a7 3005 	strh.w	r3, [r7, #5]
 80a0fe2:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a0fe6:	ba5b      	rev16	r3, r3
 80a0fe8:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
 80a0fec:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
 80a0ff0:	2a00      	cmp	r2, #0
 80a0ff2:	d0eb      	beq.n	80a0fcc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
 80a0ff4:	793b      	ldrb	r3, [r7, #4]
 80a0ff6:	2b00      	cmp	r3, #0
 80a0ff8:	d153      	bne.n	80a10a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
        lastActivityIn = BlynkMillis();
 80a0ffa:	f002 faf1 	bl	80a35e0 <_Z11BlynkMillisv>
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a0ffe:	7f65      	ldrb	r5, [r4, #29]
        lastActivityIn = BlynkMillis();
 80a1000:	60e0      	str	r0, [r4, #12]
 80a1002:	f8b7 0007 	ldrh.w	r0, [r7, #7]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a1006:	2d00      	cmp	r5, #0
 80a1008:	d147      	bne.n	80a109a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
 80a100a:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 80a100e:	2b01      	cmp	r3, #1
 80a1010:	d143      	bne.n	80a109a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
            switch (hdr.length) {
 80a1012:	2809      	cmp	r0, #9
 80a1014:	d024      	beq.n	80a1060 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xb0>
 80a1016:	28c8      	cmp	r0, #200	; 0xc8
 80a1018:	d001      	beq.n	80a101e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
 80a101a:	2804      	cmp	r0, #4
 80a101c:	d12a      	bne.n	80a1074 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xc4>
                state = CONNECTED;
 80a101e:	2501      	movs	r5, #1
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
 80a1020:	f7ff fc5e 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a1024:	f004 f82a 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1028:	49b5      	ldr	r1, [pc, #724]	; (80a1300 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x350>)
 80a102a:	f003 fa5d 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a102e:	f004 f825 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1032:	6963      	ldr	r3, [r4, #20]
 80a1034:	68e1      	ldr	r1, [r4, #12]
        return printNumber(val, base) + t;
 80a1036:	220a      	movs	r2, #10
 80a1038:	1ac9      	subs	r1, r1, r3
 80a103a:	f003 fa72 	bl	80a4522 <_ZN5Print11printNumberEmh>
 80a103e:	f004 f81d 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1042:	49b0      	ldr	r1, [pc, #704]	; (80a1304 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x354>)
 80a1044:	f003 fa63 	bl	80a450e <_ZN5Print7printlnEPKc>
                lastHeartbeat = lastActivityIn;
 80a1048:	68e3      	ldr	r3, [r4, #12]
                this->sendInfo();
 80a104a:	4620      	mov	r0, r4
                lastHeartbeat = lastActivityIn;
 80a104c:	6163      	str	r3, [r4, #20]
                state = CONNECTED;
 80a104e:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
 80a1050:	f000 fe58 	bl	80a1d04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
 80a1054:	f7ff fc74 	bl	80a0940 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
 80a1058:	f002 fac6 	bl	80a35e8 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
 80a105c:	2001      	movs	r0, #1
 80a105e:	e7b6      	b.n	80a0fce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e>
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
 80a1060:	f7ff fc3e 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a1064:	f004 f80a 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1068:	49a7      	ldr	r1, [pc, #668]	; (80a1308 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x358>)
 80a106a:	f003 fa50 	bl	80a450e <_ZN5Print7printlnEPKc>
                state = TOKEN_INVALID;
 80a106e:	2303      	movs	r3, #3
 80a1070:	7763      	strb	r3, [r4, #29]
 80a1072:	e7ab      	b.n	80a0fcc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
 80a1074:	f7ff fc34 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a1078:	f004 f800 	bl	80a507c <_Z16_fetch_usbserialv>
 80a107c:	49a3      	ldr	r1, [pc, #652]	; (80a130c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x35c>)
 80a107e:	f003 fa33 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a1082:	f003 fffb 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1086:	4604      	mov	r4, r0
 80a1088:	220a      	movs	r2, #10
 80a108a:	f8b7 1007 	ldrh.w	r1, [r7, #7]
 80a108e:	f003 fa48 	bl	80a4522 <_ZN5Print11printNumberEmh>
        n += println();
 80a1092:	4620      	mov	r0, r4
 80a1094:	f003 fa2f 	bl	80a44f6 <_ZN5Print7printlnEv>
 80a1098:	e798      	b.n	80a0fcc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
 80a109a:	3805      	subs	r0, #5
 80a109c:	bf18      	it	ne
 80a109e:	2001      	movne	r0, #1
 80a10a0:	e795      	b.n	80a0fce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e>
    if (hdr.length > BLYNK_MAX_READBYTES) {
 80a10a2:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 80a10a6:	d915      	bls.n	80a10d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
 80a10a8:	f7ff fc1a 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a10ac:	f003 ffe6 	bl	80a507c <_Z16_fetch_usbserialv>
 80a10b0:	4997      	ldr	r1, [pc, #604]	; (80a1310 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x360>)
 80a10b2:	f003 fa19 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a10b6:	f003 ffe1 	bl	80a507c <_Z16_fetch_usbserialv>
 80a10ba:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80a10bc:	220a      	movs	r2, #10
 80a10be:	f8b7 1007 	ldrh.w	r1, [r7, #7]
 80a10c2:	f003 fa2e 	bl	80a4522 <_ZN5Print11printNumberEmh>
        n += println();
 80a10c6:	4628      	mov	r0, r5
 80a10c8:	f003 fa15 	bl	80a44f6 <_ZN5Print7printlnEv>
        internalReconnect();
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	f7ff fe56 	bl	80a0d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a10d2:	e7c3      	b.n	80a105c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xac>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
 80a10d4:	466e      	mov	r6, sp
 80a10d6:	f108 0308 	add.w	r3, r8, #8
 80a10da:	08db      	lsrs	r3, r3, #3
 80a10dc:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 80a10e0:	469d      	mov	sp, r3
 80a10e2:	ad04      	add	r5, sp, #16
 80a10e4:	4642      	mov	r2, r8
 80a10e6:	4629      	mov	r1, r5
 80a10e8:	6820      	ldr	r0, [r4, #0]
 80a10ea:	f003 fa7d 	bl	80a45e8 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
 80a10ee:	4580      	cmp	r8, r0
 80a10f0:	f04f 0000 	mov.w	r0, #0
 80a10f4:	d177      	bne.n	80a11e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x236>
    inputBuffer[hdr.length] = '\0';
 80a10f6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a10fa:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
 80a10fc:	f002 fa70 	bl	80a35e0 <_Z11BlynkMillisv>
    switch (hdr.type)
 80a1100:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
 80a1102:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
 80a1104:	2b14      	cmp	r3, #20
 80a1106:	f000 80b8 	beq.w	80a127a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ca>
 80a110a:	d838      	bhi.n	80a117e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ce>
 80a110c:	2b0f      	cmp	r3, #15
 80a110e:	f000 80b4 	beq.w	80a127a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ca>
 80a1112:	d807      	bhi.n	80a1124 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
 80a1114:	2b02      	cmp	r3, #2
 80a1116:	d039      	beq.n	80a118c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1dc>
 80a1118:	2b06      	cmp	r3, #6
 80a111a:	d049      	beq.n	80a11b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x200>
        internalReconnect();
 80a111c:	4620      	mov	r0, r4
 80a111e:	f7ff fe2e 	bl	80a0d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a1122:	e050      	b.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
    switch (hdr.type)
 80a1124:	2b11      	cmp	r3, #17
 80a1126:	d1f9      	bne.n	80a111c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
        BlynkReq req = { 0 };
 80a1128:	2300      	movs	r3, #0
 80a112a:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
 80a112c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
 80a1130:	442b      	add	r3, r5
        if (it >= param.end())
 80a1132:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a1134:	e9c7 5303 	strd	r5, r3, [r7, #12]
 80a1138:	d245      	bcs.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        ++it;
 80a113a:	f107 000c 	add.w	r0, r7, #12
 80a113e:	682c      	ldr	r4, [r5, #0]
 80a1140:	f7ff fc14 	bl	80a096c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
 80a1144:	68fa      	ldr	r2, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
 80a1146:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a114a:	1b55      	subs	r5, r2, r5
 80a114c:	1b5d      	subs	r5, r3, r5
    BlynkParam(const void* addr, size_t length)
 80a114e:	4b71      	ldr	r3, [pc, #452]	; (80a1314 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x364>)
        : buff((char*)addr), len(length), buff_size(length)
 80a1150:	e9c7 2505 	strd	r2, r5, [r7, #20]
 80a1154:	429c      	cmp	r4, r3
 80a1156:	61fd      	str	r5, [r7, #28]
 80a1158:	f000 80b9 	beq.w	80a12ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31e>
 80a115c:	f200 809a 	bhi.w	80a1294 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2e4>
 80a1160:	4b6d      	ldr	r3, [pc, #436]	; (80a1318 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x368>)
 80a1162:	429c      	cmp	r4, r3
 80a1164:	f000 80a7 	beq.w	80a12b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x306>
 80a1168:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80a116c:	3303      	adds	r3, #3
 80a116e:	429c      	cmp	r4, r3
 80a1170:	d129      	bne.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
 80a1172:	4638      	mov	r0, r7
 80a1174:	f107 0114 	add.w	r1, r7, #20
 80a1178:	f002 fa35 	bl	80a35e6 <BlynkWidgetWrite>
 80a117c:	e023      	b.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
    switch (hdr.type)
 80a117e:	2b29      	cmp	r3, #41	; 0x29
 80a1180:	d023      	beq.n	80a11ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21a>
 80a1182:	2b37      	cmp	r3, #55	; 0x37
 80a1184:	f000 80a9 	beq.w	80a12da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x32a>
 80a1188:	2b1d      	cmp	r3, #29
 80a118a:	d1c7      	bne.n	80a111c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
        if (state == CONNECTING) {
 80a118c:	7f63      	ldrb	r3, [r4, #29]
 80a118e:	b97b      	cbnz	r3, 80a11b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x200>
            BLYNK_LOG1(BLYNK_F("Ready"));
 80a1190:	f7ff fba6 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a1194:	f003 ff72 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1198:	4960      	ldr	r1, [pc, #384]	; (80a131c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x36c>)
 80a119a:	f003 f9b8 	bl	80a450e <_ZN5Print7printlnEPKc>
            state = CONNECTED;
 80a119e:	2301      	movs	r3, #1
            this->sendInfo();
 80a11a0:	4620      	mov	r0, r4
            state = CONNECTED;
 80a11a2:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
 80a11a4:	f000 fdae 	bl	80a1d04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
 80a11a8:	f7ff fbca 	bl	80a0940 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
 80a11ac:	f002 fa1c 	bl	80a35e8 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a11b0:	2300      	movs	r3, #0
 80a11b2:	21c8      	movs	r1, #200	; 0xc8
 80a11b4:	f8b7 2005 	ldrh.w	r2, [r7, #5]
 80a11b8:	4620      	mov	r0, r4
 80a11ba:	9100      	str	r1, [sp, #0]
 80a11bc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a11c0:	4619      	mov	r1, r3
 80a11c2:	f000 f965 	bl	80a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    return true;
 80a11c6:	2001      	movs	r0, #1
 80a11c8:	e00d      	b.n	80a11e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x236>
        if (!redir_serv) {
 80a11ca:	68a3      	ldr	r3, [r4, #8]
 80a11cc:	b91b      	cbnz	r3, 80a11d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x226>
             redir_serv = (char*)malloc(32);
 80a11ce:	2020      	movs	r0, #32
 80a11d0:	f002 fcf8 	bl	80a3bc4 <malloc>
 80a11d4:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
 80a11d6:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
 80a11da:	44a8      	add	r8, r5
        if (it >= param.end())
 80a11dc:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a11de:	e9c7 5805 	strd	r5, r8, [r7, #20]
 80a11e2:	d302      	bcc.n	80a11ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
            return false;
 80a11e4:	2000      	movs	r0, #0
 80a11e6:	46b5      	mov	sp, r6
 80a11e8:	e6f1      	b.n	80a0fce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e>
        strncpy(redir_serv, it.asStr(), 32);
 80a11ea:	4629      	mov	r1, r5
        redir_serv[31] = '\0';
 80a11ec:	2500      	movs	r5, #0
        strncpy(redir_serv, it.asStr(), 32);
 80a11ee:	2220      	movs	r2, #32
 80a11f0:	68a0      	ldr	r0, [r4, #8]
 80a11f2:	f005 fdf2 	bl	80a6dda <strncpy>
        redir_serv[31] = '\0';
 80a11f6:	68a3      	ldr	r3, [r4, #8]
        if (++it < param.end())
 80a11f8:	f107 0014 	add.w	r0, r7, #20
        redir_serv[31] = '\0';
 80a11fc:	77dd      	strb	r5, [r3, #31]
        if (++it < param.end())
 80a11fe:	f7ff fbb5 	bl	80a096c <_ZN10BlynkParam8iteratorppEv>
 80a1202:	6803      	ldr	r3, [r0, #0]
 80a1204:	4598      	cmp	r8, r3
 80a1206:	d936      	bls.n	80a1276 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c6>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a1208:	6978      	ldr	r0, [r7, #20]
 80a120a:	b120      	cbz	r0, 80a1216 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x266>
 80a120c:	69bb      	ldr	r3, [r7, #24]
 80a120e:	4298      	cmp	r0, r3
 80a1210:	d22f      	bcs.n	80a1272 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c2>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a1212:	f005 fc5f 	bl	80a6ad4 <atol>
            redir_port = it.asLong();
 80a1216:	b285      	uxth	r5, r0
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
 80a1218:	f7ff fb62 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a121c:	f003 ff2e 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1220:	493f      	ldr	r1, [pc, #252]	; (80a1320 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x370>)
 80a1222:	f003 f961 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a1226:	f003 ff29 	bl	80a507c <_Z16_fetch_usbserialv>
 80a122a:	68a1      	ldr	r1, [r4, #8]
 80a122c:	f003 f95c 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a1230:	f003 ff24 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1234:	213a      	movs	r1, #58	; 0x3a
 80a1236:	f003 f95b 	bl	80a44f0 <_ZN5Print5printEc>
 80a123a:	f003 ff1f 	bl	80a507c <_Z16_fetch_usbserialv>
 80a123e:	4680      	mov	r8, r0
        return printNumber(val, base) + t;
 80a1240:	220a      	movs	r2, #10
 80a1242:	4629      	mov	r1, r5
 80a1244:	f003 f96d 	bl	80a4522 <_ZN5Print11printNumberEmh>
        n += println();
 80a1248:	4640      	mov	r0, r8
 80a124a:	f003 f954 	bl	80a44f6 <_ZN5Print7printlnEv>
    void disconnect() { client.stop(); }
 80a124e:	6820      	ldr	r0, [r4, #0]
 80a1250:	f002 ff48 	bl	80a40e4 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
 80a1254:	6823      	ldr	r3, [r4, #0]
 80a1256:	68a2      	ldr	r2, [r4, #8]
        port = p;
 80a1258:	871d      	strh	r5, [r3, #56]	; 0x38
        domain = d;
 80a125a:	635a      	str	r2, [r3, #52]	; 0x34
        state = CONNECTING;
 80a125c:	2300      	movs	r3, #0
 80a125e:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a1260:	f002 f9be 	bl	80a35e0 <_Z11BlynkMillisv>
 80a1264:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a1268:	3808      	subs	r0, #8
 80a126a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80a126e:	6160      	str	r0, [r4, #20]
 80a1270:	e7a9      	b.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
 80a1272:	4628      	mov	r0, r5
 80a1274:	e7cf      	b.n	80a1216 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x266>
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
 80a1276:	2550      	movs	r5, #80	; 0x50
 80a1278:	e7ce      	b.n	80a1218 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x268>
        msgIdOutOverride = hdr.msg_id;
 80a127a:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
 80a127c:	4629      	mov	r1, r5
        msgIdOutOverride = hdr.msg_id;
 80a127e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80a1282:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
 80a1284:	4620      	mov	r0, r4
 80a1286:	f8b7 2007 	ldrh.w	r2, [r7, #7]
 80a128a:	f7ff fd83 	bl	80a0d94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
 80a128e:	2300      	movs	r3, #0
 80a1290:	8363      	strh	r3, [r4, #26]
 80a1292:	e798      	b.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
 80a1294:	4b23      	ldr	r3, [pc, #140]	; (80a1324 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x374>)
 80a1296:	429c      	cmp	r4, r3
 80a1298:	d013      	beq.n	80a12c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x312>
 80a129a:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
 80a129e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80a12a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80a12a6:	429c      	cmp	r4, r3
 80a12a8:	d18d      	bne.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
 80a12aa:	4638      	mov	r0, r7
 80a12ac:	f107 0114 	add.w	r1, r7, #20
 80a12b0:	f002 f999 	bl	80a35e6 <BlynkWidgetWrite>
 80a12b4:	e787      	b.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
 80a12b6:	4638      	mov	r0, r7
 80a12b8:	f107 0114 	add.w	r1, r7, #20
 80a12bc:	f002 f993 	bl	80a35e6 <BlynkWidgetWrite>
 80a12c0:	e781      	b.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
 80a12c2:	4638      	mov	r0, r7
 80a12c4:	f107 0114 	add.w	r1, r7, #20
 80a12c8:	f002 f98d 	bl	80a35e6 <BlynkWidgetWrite>
 80a12cc:	e77b      	b.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
 80a12ce:	4638      	mov	r0, r7
 80a12d0:	f107 0114 	add.w	r1, r7, #20
 80a12d4:	f002 f987 	bl	80a35e6 <BlynkWidgetWrite>
 80a12d8:	e775      	b.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        if (hdr.length) {
 80a12da:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a12de:	2b00      	cmp	r3, #0
 80a12e0:	f43f af71 	beq.w	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
 80a12e4:	f7ff fafc 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a12e8:	f003 fec8 	bl	80a507c <_Z16_fetch_usbserialv>
 80a12ec:	490e      	ldr	r1, [pc, #56]	; (80a1328 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x378>)
 80a12ee:	f003 f8fb 	bl	80a44e8 <_ZN5Print5printEPKc>
 80a12f2:	f003 fec3 	bl	80a507c <_Z16_fetch_usbserialv>
 80a12f6:	4629      	mov	r1, r5
 80a12f8:	f003 f909 	bl	80a450e <_ZN5Print7printlnEPKc>
 80a12fc:	e763      	b.n	80a11c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
 80a12fe:	bf00      	nop
 80a1300:	080a7be2 	.word	0x080a7be2
 80a1304:	080a7bf0 	.word	0x080a7bf0
 80a1308:	080a7bf5 	.word	0x080a7bf5
 80a130c:	080a7c08 	.word	0x080a7c08
 80a1310:	080a7c1f 	.word	0x080a7c1f
 80a1314:	6174656d 	.word	0x6174656d
 80a1318:	0061746f 	.word	0x0061746f
 80a131c:	080a7c30 	.word	0x080a7c30
 80a1320:	080a7c36 	.word	0x080a7c36
 80a1324:	6e6f6361 	.word	0x6e6f6361
 80a1328:	080a7c46 	.word	0x080a7c46

080a132c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
 80a132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a132e:	4604      	mov	r4, r0
 80a1330:	b085      	sub	sp, #20
 80a1332:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
 80a1334:	f7ff fb04 	bl	80a0940 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
 80a1338:	7f63      	ldrb	r3, [r4, #29]
 80a133a:	2b02      	cmp	r3, #2
 80a133c:	d01e      	beq.n	80a137c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
 80a133e:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
 80a1340:	8b62      	ldrh	r2, [r4, #26]
 80a1342:	3301      	adds	r3, #1
 80a1344:	b2db      	uxtb	r3, r3
 80a1346:	7723      	strb	r3, [r4, #28]
 80a1348:	b9aa      	cbnz	r2, 80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
 80a134a:	2b02      	cmp	r3, #2
 80a134c:	d813      	bhi.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a134e:	6820      	ldr	r0, [r4, #0]
 80a1350:	f002 ff1f 	bl	80a4192 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
 80a1354:	b1a0      	cbz	r0, 80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x54>
        while (avail || conn.available() > 0) {
 80a1356:	b925      	cbnz	r5, 80a1362 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x36>
    int available() { return client.available(); }
 80a1358:	6820      	ldr	r0, [r4, #0]
 80a135a:	f002 fe89 	bl	80a4070 <_ZN9TCPClient9availableEv>
 80a135e:	2800      	cmp	r0, #0
 80a1360:	dd0e      	ble.n	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x54>
            if (!processInput()) {
 80a1362:	4620      	mov	r0, r4
 80a1364:	f7ff fe24 	bl	80a0fb0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
 80a1368:	2800      	cmp	r0, #0
 80a136a:	d1f5      	bne.n	80a1358 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2c>
    void disconnect() { client.stop(); }
 80a136c:	6820      	ldr	r0, [r4, #0]
 80a136e:	f002 feb9 	bl	80a40e4 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
 80a1372:	f002 f939 	bl	80a35e8 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
 80a1376:	7f23      	ldrb	r3, [r4, #28]
 80a1378:	3b01      	subs	r3, #1
 80a137a:	7723      	strb	r3, [r4, #28]
}
 80a137c:	b005      	add	sp, #20
 80a137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const millis_time_t t = BlynkMillis();
 80a1380:	f002 f92e 	bl	80a35e0 <_Z11BlynkMillisv>
 80a1384:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
 80a1386:	6820      	ldr	r0, [r4, #0]
 80a1388:	f002 ff03 	bl	80a4192 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
 80a138c:	7f67      	ldrb	r7, [r4, #29]
 80a138e:	4606      	mov	r6, r0
 80a1390:	2f01      	cmp	r7, #1
 80a1392:	d12c      	bne.n	80a13ee <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xc2>
        if (!tconn) {
 80a1394:	b920      	cbnz	r0, 80a13a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x74>
            lastHeartbeat = t;
 80a1396:	6165      	str	r5, [r4, #20]
            internalReconnect();
 80a1398:	4620      	mov	r0, r4
 80a139a:	f7ff fcf0 	bl	80a0d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a139e:	e7ea      	b.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
 80a13a0:	f644 2238 	movw	r2, #19000	; 0x4a38
 80a13a4:	68e3      	ldr	r3, [r4, #12]
 80a13a6:	1aeb      	subs	r3, r5, r3
 80a13a8:	4293      	cmp	r3, r2
 80a13aa:	d907      	bls.n	80a13bc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x90>
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
 80a13ac:	f7ff fa98 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a13b0:	f003 fe64 	bl	80a507c <_Z16_fetch_usbserialv>
 80a13b4:	4927      	ldr	r1, [pc, #156]	; (80a1454 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x128>)
 80a13b6:	f003 f8aa 	bl	80a450e <_ZN5Print7printlnEPKc>
 80a13ba:	e7ed      	b.n	80a1398 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x6c>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a13bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80a13c0:	4293      	cmp	r3, r2
 80a13c2:	d803      	bhi.n	80a13cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xa0>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a13c4:	6923      	ldr	r3, [r4, #16]
 80a13c6:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a13c8:	4293      	cmp	r3, r2
 80a13ca:	d9d4      	bls.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a13cc:	f640 32b8 	movw	r2, #3000	; 0xbb8
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
 80a13d0:	6963      	ldr	r3, [r4, #20]
 80a13d2:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a13d4:	4293      	cmp	r3, r2
 80a13d6:	d9ce      	bls.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
            sendCmd(BLYNK_CMD_PING);
 80a13d8:	2300      	movs	r3, #0
 80a13da:	2106      	movs	r1, #6
 80a13dc:	461a      	mov	r2, r3
 80a13de:	4620      	mov	r0, r4
 80a13e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a13e4:	9300      	str	r3, [sp, #0]
 80a13e6:	f000 f853 	bl	80a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
 80a13ea:	6165      	str	r5, [r4, #20]
                return false;
 80a13ec:	e7c3      	b.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
    } else if (state == CONNECTING) {
 80a13ee:	2f00      	cmp	r7, #0
 80a13f0:	d1c1      	bne.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
 80a13f2:	6963      	ldr	r3, [r4, #20]
 80a13f4:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
 80a13f6:	b178      	cbz	r0, 80a1418 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xec>
 80a13f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a13fc:	4293      	cmp	r3, r2
 80a13fe:	d9ba      	bls.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
 80a1400:	f7ff fa6e 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a1404:	f003 fe3a 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1408:	4913      	ldr	r1, [pc, #76]	; (80a1458 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12c>)
 80a140a:	f003 f880 	bl	80a450e <_ZN5Print7printlnEPKc>
    void disconnect() { client.stop(); }
 80a140e:	6820      	ldr	r0, [r4, #0]
 80a1410:	f002 fe68 	bl	80a40e4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
 80a1414:	7767      	strb	r7, [r4, #29]
            return false;
 80a1416:	e7ae      	b.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
 80a1418:	f241 3288 	movw	r2, #5000	; 0x1388
 80a141c:	4293      	cmp	r3, r2
 80a141e:	d9aa      	bls.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
 80a1420:	6820      	ldr	r0, [r4, #0]
 80a1422:	f002 fe5f 	bl	80a40e4 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
 80a1426:	6820      	ldr	r0, [r4, #0]
 80a1428:	f7ff faf0 	bl	80a0a0c <_ZN22BlynkTransportParticle7connectEv>
 80a142c:	2800      	cmp	r0, #0
 80a142e:	d0dc      	beq.n	80a13ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xbe>
            msgIdOut = 1;
 80a1430:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a1432:	6867      	ldr	r7, [r4, #4]
            msgIdOut = 1;
 80a1434:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a1436:	4638      	mov	r0, r7
 80a1438:	f005 fcb3 	bl	80a6da2 <strlen>
 80a143c:	463b      	mov	r3, r7
 80a143e:	9000      	str	r0, [sp, #0]
 80a1440:	462a      	mov	r2, r5
 80a1442:	211d      	movs	r1, #29
 80a1444:	4620      	mov	r0, r4
 80a1446:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80a144a:	f000 f821 	bl	80a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
 80a144e:	6923      	ldr	r3, [r4, #16]
 80a1450:	6163      	str	r3, [r4, #20]
            return true;
 80a1452:	e790      	b.n	80a1376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
 80a1454:	080a7c4f 	.word	0x080a7c4f
 80a1458:	080a7c61 	.word	0x080a7c61

080a145c <_Z7myDelayi>:
{
 80a145c:	b570      	push	{r4, r5, r6, lr}
for (int i = 0; i<(20*seconds); i++)
 80a145e:	2514      	movs	r5, #20
 80a1460:	2400      	movs	r4, #0
 80a1462:	4345      	muls	r5, r0
    Blynk.run();  
 80a1464:	4e06      	ldr	r6, [pc, #24]	; (80a1480 <_Z7myDelayi+0x24>)
for (int i = 0; i<(20*seconds); i++)
 80a1466:	42a5      	cmp	r5, r4
 80a1468:	dd08      	ble.n	80a147c <_Z7myDelayi+0x20>
    delay(50);
 80a146a:	2032      	movs	r0, #50	; 0x32
 80a146c:	f003 f9d4 	bl	80a4818 <delay>
    Blynk.run();  
 80a1470:	2100      	movs	r1, #0
 80a1472:	4630      	mov	r0, r6
 80a1474:	f7ff ff5a 	bl	80a132c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
for (int i = 0; i<(20*seconds); i++)
 80a1478:	3401      	adds	r4, #1
 80a147a:	e7f4      	b.n	80a1466 <_Z7myDelayi+0xa>
}
 80a147c:	bd70      	pop	{r4, r5, r6, pc}
 80a147e:	bf00      	nop
 80a1480:	200001a8 	.word	0x200001a8

080a1484 <_Z9run_blynkv>:
  Blynk.run();
 80a1484:	2100      	movs	r1, #0
 80a1486:	4801      	ldr	r0, [pc, #4]	; (80a148c <_Z9run_blynkv+0x8>)
 80a1488:	f7ff bf50 	b.w	80a132c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
 80a148c:	200001a8 	.word	0x200001a8

080a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a1490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1494:	b083      	sub	sp, #12
 80a1496:	4604      	mov	r4, r0
 80a1498:	af00      	add	r7, sp, #0
    bool connected() { return client.connected(); }
 80a149a:	6800      	ldr	r0, [r0, #0]
 80a149c:	4688      	mov	r8, r1
 80a149e:	4616      	mov	r6, r2
 80a14a0:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
 80a14a2:	46eb      	mov	fp, sp
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a14a4:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80a14a6:	f002 fe74 	bl	80a4192 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
 80a14aa:	2800      	cmp	r0, #0
 80a14ac:	d07f      	beq.n	80a15ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
 80a14ae:	f1b8 0f1d 	cmp.w	r8, #29
 80a14b2:	d804      	bhi.n	80a14be <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
 80a14b4:	4b4c      	ldr	r3, [pc, #304]	; (80a15e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
 80a14b6:	fa23 f308 	lsr.w	r3, r3, r8
 80a14ba:	07db      	lsls	r3, r3, #31
 80a14bc:	d402      	bmi.n	80a14c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
 80a14be:	7f63      	ldrb	r3, [r4, #29]
 80a14c0:	2b01      	cmp	r3, #1
 80a14c2:	d174      	bne.n	80a15ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
 80a14c4:	b946      	cbnz	r6, 80a14d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
 80a14c6:	8b66      	ldrh	r6, [r4, #26]
 80a14c8:	b936      	cbnz	r6, 80a14d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
 80a14ca:	8b23      	ldrh	r3, [r4, #24]
 80a14cc:	3301      	adds	r3, #1
 80a14ce:	b29b      	uxth	r3, r3
 80a14d0:	2b00      	cmp	r3, #0
 80a14d2:	d071      	beq.n	80a15b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
 80a14d4:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
 80a14d6:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
 80a14d8:	f1a8 030c 	sub.w	r3, r8, #12
 80a14dc:	2b08      	cmp	r3, #8
 80a14de:	d816      	bhi.n	80a150e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
 80a14e0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80a14e4:	4293      	cmp	r3, r2
 80a14e6:	bf38      	it	cc
 80a14e8:	4613      	movcc	r3, r2
 80a14ea:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
 80a14ee:	f002 f877 	bl	80a35e0 <_Z11BlynkMillisv>
 80a14f2:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
 80a14f6:	2800      	cmp	r0, #0
 80a14f8:	db60      	blt.n	80a15bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
 80a14fa:	2100      	movs	r1, #0
 80a14fc:	4620      	mov	r0, r4
 80a14fe:	f7ff ff15 	bl	80a132c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
 80a1502:	f002 f86d 	bl	80a35e0 <_Z11BlynkMillisv>
 80a1506:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
 80a150a:	2800      	cmp	r0, #0
 80a150c:	daf5      	bge.n	80a14fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a150e:	f1b9 0f00 	cmp.w	r9, #0
 80a1512:	d05a      	beq.n	80a15ca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
 80a1514:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
 80a1516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    hdr->msg_id = htons(id);
 80a1518:	ba76      	rev16	r6, r6
                               (data2 ? length2 : 0);
 80a151a:	2a00      	cmp	r2, #0
 80a151c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a151e:	bf08      	it	eq
 80a1520:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a1522:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
 80a1526:	f10a 0307 	add.w	r3, sl, #7
 80a152a:	f023 0307 	bic.w	r3, r3, #7
 80a152e:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
 80a1532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
 80a1534:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
 80a1538:	18ea      	adds	r2, r5, r3
 80a153a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80a153e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
 80a1542:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
 80a1546:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
 80a154a:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
 80a154e:	f1b9 0f00 	cmp.w	r9, #0
 80a1552:	d03c      	beq.n	80a15ce <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
 80a1554:	2d00      	cmp	r5, #0
 80a1556:	d03a      	beq.n	80a15ce <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
 80a1558:	462a      	mov	r2, r5
 80a155a:	4649      	mov	r1, r9
 80a155c:	f10d 0005 	add.w	r0, sp, #5
 80a1560:	f005 fbae 	bl	80a6cc0 <memcpy>
        pos += length;
 80a1564:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
 80a1566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a1568:	b13b      	cbz	r3, 80a157a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
 80a156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a156c:	b12b      	cbz	r3, 80a157a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
 80a156e:	461a      	mov	r2, r3
 80a1570:	687b      	ldr	r3, [r7, #4]
 80a1572:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80a1574:	4418      	add	r0, r3
 80a1576:	f005 fba3 	bl	80a6cc0 <memcpy>
    size_t pos = sizeof(BlynkHeader);
 80a157a:	2500      	movs	r5, #0
    while (wlen < full_length) {
 80a157c:	4555      	cmp	r5, sl
 80a157e:	d22a      	bcs.n	80a15d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
 80a1580:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
 80a1584:	687b      	ldr	r3, [r7, #4]
 80a1586:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80a158a:	bf28      	it	cs
 80a158c:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80a1590:	6820      	ldr	r0, [r4, #0]
 80a1592:	1959      	adds	r1, r3, r5
 80a1594:	f002 fc31 	bl	80a3dfa <_ZN9TCPClient5writeEPKhj>
 80a1598:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
 80a159a:	2000      	movs	r0, #0
 80a159c:	f002 f81e 	bl	80a35dc <_Z10BlynkDelaym>
        if (w == 0) {
 80a15a0:	b9be      	cbnz	r6, 80a15d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
 80a15a2:	6820      	ldr	r0, [r4, #0]
 80a15a4:	f002 fd9e 	bl	80a40e4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
 80a15a8:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
 80a15aa:	f002 f81d 	bl	80a35e8 <BlynkNoOpCbk>
 80a15ae:	46dd      	mov	sp, fp
}
 80a15b0:	370c      	adds	r7, #12
 80a15b2:	46bd      	mov	sp, r7
 80a15b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
 80a15b8:	2301      	movs	r3, #1
 80a15ba:	e78b      	b.n	80a14d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
 80a15bc:	7f21      	ldrb	r1, [r4, #28]
 80a15be:	2900      	cmp	r1, #0
 80a15c0:	d1a5      	bne.n	80a150e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
 80a15c2:	4620      	mov	r0, r4
 80a15c4:	f7ff feb2 	bl	80a132c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
 80a15c8:	e7a1      	b.n	80a150e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a15ca:	2305      	movs	r3, #5
 80a15cc:	e7a3      	b.n	80a1516 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
 80a15ce:	2005      	movs	r0, #5
 80a15d0:	e7c9      	b.n	80a1566 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
 80a15d2:	4435      	add	r5, r6
    while (wlen < full_length) {
 80a15d4:	e7d2      	b.n	80a157c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
 80a15d6:	d003      	beq.n	80a15e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
 80a15d8:	4620      	mov	r0, r4
 80a15da:	f7ff fbd0 	bl	80a0d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
 80a15de:	e7e6      	b.n	80a15ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
 80a15e0:	f001 fffe 	bl	80a35e0 <_Z11BlynkMillisv>
 80a15e4:	6120      	str	r0, [r4, #16]
 80a15e6:	e7e2      	b.n	80a15ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
 80a15e8:	20000045 	.word	0x20000045

080a15ec <_ZN14WidgetTerminal5flushEv>:
    virtual void flush() {
 80a15ec:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (mOutQty) {
 80a15ee:	f890 6049 	ldrb.w	r6, [r0, #73]	; 0x49
    virtual void flush() {
 80a15f2:	4604      	mov	r4, r0
 80a15f4:	b08b      	sub	sp, #44	; 0x2c
        if (mOutQty) {
 80a15f6:	b1e6      	cbz	r6, 80a1632 <_ZN14WidgetTerminal5flushEv+0x46>
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a15f8:	ab05      	add	r3, sp, #20
 80a15fa:	2500      	movs	r5, #0
 80a15fc:	9307      	str	r3, [sp, #28]
 80a15fe:	2308      	movs	r3, #8
            Blynk.virtualWriteBinary(mPin, mOutBuf, mOutQty);
 80a1600:	7a07      	ldrb	r7, [r0, #8]
     * @param len  Length of data
     */
    void virtualWriteBinary(int pin, const void* buff, size_t len) {
        char mem[8];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
 80a1602:	490d      	ldr	r1, [pc, #52]	; (80a1638 <_ZN14WidgetTerminal5flushEv+0x4c>)
 80a1604:	a807      	add	r0, sp, #28
 80a1606:	e9cd 5308 	strd	r5, r3, [sp, #32]
 80a160a:	f7ff f9be 	bl	80a098a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a160e:	4639      	mov	r1, r7
 80a1610:	a807      	add	r0, sp, #28
 80a1612:	f7ff f9d7 	bl	80a09c4 <_ZN10BlynkParam3addEi>
 80a1616:	f104 0309 	add.w	r3, r4, #9
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength(), buff, len);
 80a161a:	9301      	str	r3, [sp, #4]
 80a161c:	9b08      	ldr	r3, [sp, #32]
 80a161e:	462a      	mov	r2, r5
 80a1620:	9300      	str	r3, [sp, #0]
 80a1622:	2114      	movs	r1, #20
 80a1624:	9b07      	ldr	r3, [sp, #28]
 80a1626:	4805      	ldr	r0, [pc, #20]	; (80a163c <_ZN14WidgetTerminal5flushEv+0x50>)
 80a1628:	9602      	str	r6, [sp, #8]
 80a162a:	f7ff ff31 	bl	80a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            mOutQty = 0;
 80a162e:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
    }
 80a1632:	b00b      	add	sp, #44	; 0x2c
 80a1634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1636:	bf00      	nop
 80a1638:	080a7c6f 	.word	0x080a7c6f
 80a163c:	200001a8 	.word	0x200001a8

080a1640 <_Z7printlnPc>:
{
 80a1640:	b510      	push	{r4, lr}
 80a1642:	4604      	mov	r4, r0
  timeStamp();
 80a1644:	f7ff fb56 	bl	80a0cf4 <_Z9timeStampv>
  Serial.println(text);
 80a1648:	f003 fd18 	bl	80a507c <_Z16_fetch_usbserialv>
 80a164c:	4621      	mov	r1, r4
 80a164e:	f002 ff5e 	bl	80a450e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a1652:	4b06      	ldr	r3, [pc, #24]	; (80a166c <_Z7printlnPc+0x2c>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	2b01      	cmp	r3, #1
 80a1658:	d106      	bne.n	80a1668 <_Z7printlnPc+0x28>
    terminal.println(text); // Ausgabe an BLYNK APP terminal
 80a165a:	4621      	mov	r1, r4
 80a165c:	4804      	ldr	r0, [pc, #16]	; (80a1670 <_Z7printlnPc+0x30>)
 80a165e:	f002 ff56 	bl	80a450e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a1662:	4803      	ldr	r0, [pc, #12]	; (80a1670 <_Z7printlnPc+0x30>)
 80a1664:	f7ff ffc2 	bl	80a15ec <_ZN14WidgetTerminal5flushEv>
}
 80a1668:	bd10      	pop	{r4, pc}
 80a166a:	bf00      	nop
 80a166c:	20000368 	.word	0x20000368
 80a1670:	2000036c 	.word	0x2000036c

080a1674 <_Z4helpv>:
{
 80a1674:	b508      	push	{r3, lr}
  println(" Hello ");
 80a1676:	4811      	ldr	r0, [pc, #68]	; (80a16bc <_Z4helpv+0x48>)
 80a1678:	f7ff ffe2 	bl	80a1640 <_Z7printlnPc>
  println(" a : Status");
 80a167c:	4810      	ldr	r0, [pc, #64]	; (80a16c0 <_Z4helpv+0x4c>)
 80a167e:	f7ff ffdf 	bl	80a1640 <_Z7printlnPc>
  println(" b : Blumen giessen");
 80a1682:	4810      	ldr	r0, [pc, #64]	; (80a16c4 <_Z4helpv+0x50>)
 80a1684:	f7ff ffdc 	bl	80a1640 <_Z7printlnPc>
  println(" d : Zeitdauer Giessen verringern");
 80a1688:	480f      	ldr	r0, [pc, #60]	; (80a16c8 <_Z4helpv+0x54>)
 80a168a:	f7ff ffd9 	bl	80a1640 <_Z7printlnPc>
  println(" i : Zeitdauer Giessen erhoehen");
 80a168e:	480f      	ldr	r0, [pc, #60]	; (80a16cc <_Z4helpv+0x58>)
 80a1690:	f7ff ffd6 	bl	80a1640 <_Z7printlnPc>
  println(" s : sleep enabled ");
 80a1694:	480e      	ldr	r0, [pc, #56]	; (80a16d0 <_Z4helpv+0x5c>)
 80a1696:	f7ff ffd3 	bl	80a1640 <_Z7printlnPc>
  println(" p : sleep disabled ");
 80a169a:	480e      	ldr	r0, [pc, #56]	; (80a16d4 <_Z4helpv+0x60>)
 80a169c:	f7ff ffd0 	bl	80a1640 <_Z7printlnPc>
  println(" u : clear reserve repetition counter ");  
 80a16a0:	480d      	ldr	r0, [pc, #52]	; (80a16d8 <_Z4helpv+0x64>)
 80a16a2:	f7ff ffcd 	bl	80a1640 <_Z7printlnPc>
  println(" w : store config to EEPROM ");
 80a16a6:	480d      	ldr	r0, [pc, #52]	; (80a16dc <_Z4helpv+0x68>)
 80a16a8:	f7ff ffca 	bl	80a1640 <_Z7printlnPc>
  println(" y : goto sleep ");  
 80a16ac:	480c      	ldr	r0, [pc, #48]	; (80a16e0 <_Z4helpv+0x6c>)
 80a16ae:	f7ff ffc7 	bl	80a1640 <_Z7printlnPc>
}
 80a16b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  println(" x : ultra sonic measurement ");
 80a16b6:	480b      	ldr	r0, [pc, #44]	; (80a16e4 <_Z4helpv+0x70>)
 80a16b8:	f7ff bfc2 	b.w	80a1640 <_Z7printlnPc>
 80a16bc:	080a7c72 	.word	0x080a7c72
 80a16c0:	080a7c7a 	.word	0x080a7c7a
 80a16c4:	080a7c86 	.word	0x080a7c86
 80a16c8:	080a7c9a 	.word	0x080a7c9a
 80a16cc:	080a7cbc 	.word	0x080a7cbc
 80a16d0:	080a7cdc 	.word	0x080a7cdc
 80a16d4:	080a7cf0 	.word	0x080a7cf0
 80a16d8:	080a7d05 	.word	0x080a7d05
 80a16dc:	080a7d2c 	.word	0x080a7d2c
 80a16e0:	080a7d49 	.word	0x080a7d49
 80a16e4:	080a7d5a 	.word	0x080a7d5a

080a16e8 <BlynkWidgetWrite13>:
{
 80a16e8:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a16ea:	6808      	ldr	r0, [r1, #0]
 80a16ec:	f7ff f8f5 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a16f0:	2801      	cmp	r0, #1
 80a16f2:	d10d      	bne.n	80a1710 <BlynkWidgetWrite13+0x28>
    println(" Terminal disabled  ");
 80a16f4:	4807      	ldr	r0, [pc, #28]	; (80a1714 <BlynkWidgetWrite13+0x2c>)
 80a16f6:	f7ff ffa3 	bl	80a1640 <_Z7printlnPc>
    termEnabled = 0;
 80a16fa:	2300      	movs	r3, #0
 80a16fc:	4a06      	ldr	r2, [pc, #24]	; (80a1718 <BlynkWidgetWrite13+0x30>)
    WriteToDatabase("CONTROL","TERMINAL disabled by Blynk Button");
 80a16fe:	4907      	ldr	r1, [pc, #28]	; (80a171c <BlynkWidgetWrite13+0x34>)
    termEnabled = 0;
 80a1700:	6013      	str	r3, [r2, #0]
    termCounter = 0;
 80a1702:	4a07      	ldr	r2, [pc, #28]	; (80a1720 <BlynkWidgetWrite13+0x38>)
    WriteToDatabase("CONTROL","TERMINAL disabled by Blynk Button");
 80a1704:	4807      	ldr	r0, [pc, #28]	; (80a1724 <BlynkWidgetWrite13+0x3c>)
    termCounter = 0;
 80a1706:	6013      	str	r3, [r2, #0]
}
 80a1708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WriteToDatabase("CONTROL","TERMINAL disabled by Blynk Button");
 80a170c:	f7fe bcf6 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
}
 80a1710:	bd08      	pop	{r3, pc}
 80a1712:	bf00      	nop
 80a1714:	080a7d78 	.word	0x080a7d78
 80a1718:	20000368 	.word	0x20000368
 80a171c:	080a7d8d 	.word	0x080a7d8d
 80a1720:	20000364 	.word	0x20000364
 80a1724:	080a7b73 	.word	0x080a7b73

080a1728 <BlynkWidgetWrite25>:

BLYNK_WRITE(V25)
{
 80a1728:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a172a:	6808      	ldr	r0, [r1, #0]
 80a172c:	f7ff f8d5 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a1730:	2801      	cmp	r0, #1
 80a1732:	d111      	bne.n	80a1758 <BlynkWidgetWrite25+0x30>
  {
    control.dontSleepSW = 1;
 80a1734:	4c09      	ldr	r4, [pc, #36]	; (80a175c <BlynkWidgetWrite25+0x34>)
 80a1736:	6060      	str	r0, [r4, #4]
    EEPROM.put(0, control);
 80a1738:	f003 ff70 	bl	80a561c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a173c:	4621      	mov	r1, r4
 80a173e:	2214      	movs	r2, #20
 80a1740:	2000      	movs	r0, #0
 80a1742:	f001 ffef 	bl	80a3724 <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "SLEEP DISABLED BY BLYNK BUTTON ");
 80a1746:	4806      	ldr	r0, [pc, #24]	; (80a1760 <BlynkWidgetWrite25+0x38>)
 80a1748:	4906      	ldr	r1, [pc, #24]	; (80a1764 <BlynkWidgetWrite25+0x3c>)
 80a174a:	f7fe fcd7 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Sleep Mode Disabled by blynk button ");
  }
}
 80a174e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    println(" Sleep Mode Disabled by blynk button ");
 80a1752:	4805      	ldr	r0, [pc, #20]	; (80a1768 <BlynkWidgetWrite25+0x40>)
 80a1754:	f7ff bf74 	b.w	80a1640 <_Z7printlnPc>
}
 80a1758:	bd10      	pop	{r4, pc}
 80a175a:	bf00      	nop
 80a175c:	20000310 	.word	0x20000310
 80a1760:	080a7b73 	.word	0x080a7b73
 80a1764:	080a7daf 	.word	0x080a7daf
 80a1768:	080a7dcf 	.word	0x080a7dcf

080a176c <BlynkWidgetWrite26>:

BLYNK_WRITE(V26)
{
 80a176c:	b538      	push	{r3, r4, r5, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a176e:	6808      	ldr	r0, [r1, #0]
 80a1770:	f7ff f8b3 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a1774:	2801      	cmp	r0, #1
 80a1776:	d112      	bne.n	80a179e <BlynkWidgetWrite26+0x32>
  {
    control.dontSleepSW = 0;
 80a1778:	2400      	movs	r4, #0
 80a177a:	4d09      	ldr	r5, [pc, #36]	; (80a17a0 <BlynkWidgetWrite26+0x34>)
 80a177c:	606c      	str	r4, [r5, #4]
    EEPROM.put(0, control);
 80a177e:	f003 ff4d 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a1782:	4629      	mov	r1, r5
 80a1784:	4620      	mov	r0, r4
 80a1786:	2214      	movs	r2, #20
 80a1788:	f001 ffcc 	bl	80a3724 <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "SLEEP ENABLED BY BLYNK BUTTON ");
 80a178c:	4805      	ldr	r0, [pc, #20]	; (80a17a4 <BlynkWidgetWrite26+0x38>)
 80a178e:	4906      	ldr	r1, [pc, #24]	; (80a17a8 <BlynkWidgetWrite26+0x3c>)
 80a1790:	f7fe fcb4 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Sleep Mode Enabled by blynk button ");
  }
}
 80a1794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    println(" Sleep Mode Enabled by blynk button ");
 80a1798:	4804      	ldr	r0, [pc, #16]	; (80a17ac <BlynkWidgetWrite26+0x40>)
 80a179a:	f7ff bf51 	b.w	80a1640 <_Z7printlnPc>
}
 80a179e:	bd38      	pop	{r3, r4, r5, pc}
 80a17a0:	20000310 	.word	0x20000310
 80a17a4:	080a7b73 	.word	0x080a7b73
 80a17a8:	080a7df5 	.word	0x080a7df5
 80a17ac:	080a7e14 	.word	0x080a7e14

080a17b0 <BlynkWidgetWrite27>:

BLYNK_WRITE(V27)
{
 80a17b0:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a17b2:	6808      	ldr	r0, [r1, #0]
 80a17b4:	f7ff f891 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a17b8:	2801      	cmp	r0, #1
 80a17ba:	d10b      	bne.n	80a17d4 <BlynkWidgetWrite27+0x24>
  {
    WriteToDatabase("CONTROL", "Tankfuellen gestartet by BLYNK button ");   
 80a17bc:	4906      	ldr	r1, [pc, #24]	; (80a17d8 <BlynkWidgetWrite27+0x28>)
 80a17be:	4807      	ldr	r0, [pc, #28]	; (80a17dc <BlynkWidgetWrite27+0x2c>)
 80a17c0:	f7fe fc9c 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    TankFuellen(250);
 80a17c4:	20fa      	movs	r0, #250	; 0xfa
 80a17c6:	f001 fe53 	bl	80a3470 <_Z11TankFuelleni>

    println(" Tank fuellen by BLYNK button  ");
  }
}
 80a17ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Tank fuellen by BLYNK button  ");
 80a17ce:	4804      	ldr	r0, [pc, #16]	; (80a17e0 <BlynkWidgetWrite27+0x30>)
 80a17d0:	f7ff bf36 	b.w	80a1640 <_Z7printlnPc>
}
 80a17d4:	bd08      	pop	{r3, pc}
 80a17d6:	bf00      	nop
 80a17d8:	080a7e39 	.word	0x080a7e39
 80a17dc:	080a7b73 	.word	0x080a7b73
 80a17e0:	080a7e60 	.word	0x080a7e60

080a17e4 <BlynkWidgetWrite28>:

BLYNK_WRITE(V28)
{
 80a17e4:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a17e6:	6808      	ldr	r0, [r1, #0]
 80a17e8:	f7ff f877 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a17ec:	2801      	cmp	r0, #1
 80a17ee:	d10e      	bne.n	80a180e <BlynkWidgetWrite28+0x2a>
  {
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a17f0:	2100      	movs	r1, #0
 80a17f2:	4608      	mov	r0, r1
 80a17f4:	f001 fd34 	bl	80a3260 <_Z20switch_pumpe_reserveii>
 80a17f8:	4b05      	ldr	r3, [pc, #20]	; (80a1810 <BlynkWidgetWrite28+0x2c>)
    WriteToDatabase("CONTROL", "Reserve Pumpe off by BLYNK button ");
 80a17fa:	4906      	ldr	r1, [pc, #24]	; (80a1814 <BlynkWidgetWrite28+0x30>)
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a17fc:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "Reserve Pumpe off by BLYNK button ");
 80a17fe:	4806      	ldr	r0, [pc, #24]	; (80a1818 <BlynkWidgetWrite28+0x34>)
 80a1800:	f7fe fc7c 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Reserve Pumpe ausgeschaltet by button ");
  }
}
 80a1804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Reserve Pumpe ausgeschaltet by button ");
 80a1808:	4804      	ldr	r0, [pc, #16]	; (80a181c <BlynkWidgetWrite28+0x38>)
 80a180a:	f7ff bf19 	b.w	80a1640 <_Z7printlnPc>
}
 80a180e:	bd08      	pop	{r3, pc}
 80a1810:	20000358 	.word	0x20000358
 80a1814:	080a7e80 	.word	0x080a7e80
 80a1818:	080a7b73 	.word	0x080a7b73
 80a181c:	080a7ea3 	.word	0x080a7ea3

080a1820 <BlynkWidgetWrite29>:

BLYNK_WRITE(V29)
{
 80a1820:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1822:	6808      	ldr	r0, [r1, #0]
 80a1824:	f7ff f859 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a1828:	2801      	cmp	r0, #1
 80a182a:	d111      	bne.n	80a1850 <BlynkWidgetWrite29+0x30>
  {
    control.dontGiessen = 1;
 80a182c:	4c09      	ldr	r4, [pc, #36]	; (80a1854 <BlynkWidgetWrite29+0x34>)
 80a182e:	60a0      	str	r0, [r4, #8]
    EEPROM.put(0, control);
 80a1830:	f003 fef4 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a1834:	4621      	mov	r1, r4
 80a1836:	2214      	movs	r2, #20
 80a1838:	2000      	movs	r0, #0
 80a183a:	f001 ff73 	bl	80a3724 <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "Blumen giessen deaktiviert by Blynk Button ");
 80a183e:	4806      	ldr	r0, [pc, #24]	; (80a1858 <BlynkWidgetWrite29+0x38>)
 80a1840:	4906      	ldr	r1, [pc, #24]	; (80a185c <BlynkWidgetWrite29+0x3c>)
 80a1842:	f7fe fc5b 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println("Blumen giessen deaktiviert ");
  }
}
 80a1846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    println("Blumen giessen deaktiviert ");
 80a184a:	4805      	ldr	r0, [pc, #20]	; (80a1860 <BlynkWidgetWrite29+0x40>)
 80a184c:	f7ff bef8 	b.w	80a1640 <_Z7printlnPc>
}
 80a1850:	bd10      	pop	{r4, pc}
 80a1852:	bf00      	nop
 80a1854:	20000310 	.word	0x20000310
 80a1858:	080a7b73 	.word	0x080a7b73
 80a185c:	080a7ecb 	.word	0x080a7ecb
 80a1860:	080a7ef7 	.word	0x080a7ef7

080a1864 <BlynkWidgetWrite30>:

BLYNK_WRITE(V30)
{
 80a1864:	b538      	push	{r3, r4, r5, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1866:	6808      	ldr	r0, [r1, #0]
 80a1868:	f7ff f837 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a186c:	2801      	cmp	r0, #1
 80a186e:	d112      	bne.n	80a1896 <BlynkWidgetWrite30+0x32>
  {
    control.dontGiessen = 0;
 80a1870:	2400      	movs	r4, #0
 80a1872:	4d09      	ldr	r5, [pc, #36]	; (80a1898 <BlynkWidgetWrite30+0x34>)
 80a1874:	60ac      	str	r4, [r5, #8]
    EEPROM.put(0, control);
 80a1876:	f003 fed1 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a187a:	4629      	mov	r1, r5
 80a187c:	4620      	mov	r0, r4
 80a187e:	2214      	movs	r2, #20
 80a1880:	f001 ff50 	bl	80a3724 <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "Blumen giessen aktiviert by Blynk Button ");
 80a1884:	4805      	ldr	r0, [pc, #20]	; (80a189c <BlynkWidgetWrite30+0x38>)
 80a1886:	4906      	ldr	r1, [pc, #24]	; (80a18a0 <BlynkWidgetWrite30+0x3c>)
 80a1888:	f7fe fc38 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println("Blumen giessen aktiviert ");
  }
}
 80a188c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    println("Blumen giessen aktiviert ");
 80a1890:	4804      	ldr	r0, [pc, #16]	; (80a18a4 <BlynkWidgetWrite30+0x40>)
 80a1892:	f7ff bed5 	b.w	80a1640 <_Z7printlnPc>
}
 80a1896:	bd38      	pop	{r3, r4, r5, pc}
 80a1898:	20000310 	.word	0x20000310
 80a189c:	080a7b73 	.word	0x080a7b73
 80a18a0:	080a7f13 	.word	0x080a7f13
 80a18a4:	080a7f3d 	.word	0x080a7f3d

080a18a8 <BlynkWidgetWrite31>:

BLYNK_WRITE(V31)
{
 80a18a8:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a18aa:	6808      	ldr	r0, [r1, #0]
 80a18ac:	f7ff f815 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a18b0:	2801      	cmp	r0, #1
 80a18b2:	d10e      	bne.n	80a18d2 <BlynkWidgetWrite31+0x2a>
  {
    st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a18b4:	4b07      	ldr	r3, [pc, #28]	; (80a18d4 <BlynkWidgetWrite31+0x2c>)
 80a18b6:	68d9      	ldr	r1, [r3, #12]
 80a18b8:	f001 fc14 	bl	80a30e4 <_Z17switch_pumpe_mainii>
 80a18bc:	4b06      	ldr	r3, [pc, #24]	; (80a18d8 <BlynkWidgetWrite31+0x30>)
    WriteToDatabase("CONTROL", "Main Pumpe eingeschaltet by BLYNK by button ");
 80a18be:	4907      	ldr	r1, [pc, #28]	; (80a18dc <BlynkWidgetWrite31+0x34>)
    st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a18c0:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "Main Pumpe eingeschaltet by BLYNK by button ");
 80a18c2:	4807      	ldr	r0, [pc, #28]	; (80a18e0 <BlynkWidgetWrite31+0x38>)
 80a18c4:	f7fe fc1a 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Main Pumpe eingeschaltet by BLYNK button  ");
  }
}
 80a18c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Main Pumpe eingeschaltet by BLYNK button  ");
 80a18cc:	4805      	ldr	r0, [pc, #20]	; (80a18e4 <BlynkWidgetWrite31+0x3c>)
 80a18ce:	f7ff beb7 	b.w	80a1640 <_Z7printlnPc>
}
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	20000310 	.word	0x20000310
 80a18d8:	20000354 	.word	0x20000354
 80a18dc:	080a7f57 	.word	0x080a7f57
 80a18e0:	080a7b73 	.word	0x080a7b73
 80a18e4:	080a7f84 	.word	0x080a7f84

080a18e8 <BlynkWidgetWrite32>:

BLYNK_WRITE(V32)
{
 80a18e8:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a18ea:	6808      	ldr	r0, [r1, #0]
 80a18ec:	f7fe fff5 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a18f0:	2801      	cmp	r0, #1
 80a18f2:	d10e      	bne.n	80a1912 <BlynkWidgetWrite32+0x2a>
  {
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a18f4:	2100      	movs	r1, #0
 80a18f6:	4608      	mov	r0, r1
 80a18f8:	f001 fbf4 	bl	80a30e4 <_Z17switch_pumpe_mainii>
 80a18fc:	4b05      	ldr	r3, [pc, #20]	; (80a1914 <BlynkWidgetWrite32+0x2c>)
    WriteToDatabase("CONTROL", "Main Pumpe ausgeschaltet by BLYNK button ");
 80a18fe:	4906      	ldr	r1, [pc, #24]	; (80a1918 <BlynkWidgetWrite32+0x30>)
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a1900:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "Main Pumpe ausgeschaltet by BLYNK button ");
 80a1902:	4806      	ldr	r0, [pc, #24]	; (80a191c <BlynkWidgetWrite32+0x34>)
 80a1904:	f7fe fbfa 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Main Pumpe ausgeschaltet by BLYNK button ");
  }
}
 80a1908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Main Pumpe ausgeschaltet by BLYNK button ");
 80a190c:	4804      	ldr	r0, [pc, #16]	; (80a1920 <BlynkWidgetWrite32+0x38>)
 80a190e:	f7ff be97 	b.w	80a1640 <_Z7printlnPc>
}
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	20000354 	.word	0x20000354
 80a1918:	080a7fb1 	.word	0x080a7fb1
 80a191c:	080a7b73 	.word	0x080a7b73
 80a1920:	080a7fb0 	.word	0x080a7fb0

080a1924 <_Z7printlnPc6String>:
{
 80a1924:	b538      	push	{r3, r4, r5, lr}
 80a1926:	4604      	mov	r4, r0
 80a1928:	460d      	mov	r5, r1
  timeStamp();
 80a192a:	f7ff f9e3 	bl	80a0cf4 <_Z9timeStampv>
  sprintf(buffer, "%s %d", text, data.c_str());
 80a192e:	682b      	ldr	r3, [r5, #0]
 80a1930:	4622      	mov	r2, r4
 80a1932:	490a      	ldr	r1, [pc, #40]	; (80a195c <_Z7printlnPc6String+0x38>)
 80a1934:	480a      	ldr	r0, [pc, #40]	; (80a1960 <_Z7printlnPc6String+0x3c>)
 80a1936:	f002 f95d 	bl	80a3bf4 <sprintf>
  Serial.println(buffer);
 80a193a:	f003 fb9f 	bl	80a507c <_Z16_fetch_usbserialv>
 80a193e:	4908      	ldr	r1, [pc, #32]	; (80a1960 <_Z7printlnPc6String+0x3c>)
 80a1940:	f002 fde5 	bl	80a450e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a1944:	4b07      	ldr	r3, [pc, #28]	; (80a1964 <_Z7printlnPc6String+0x40>)
 80a1946:	681b      	ldr	r3, [r3, #0]
 80a1948:	2b01      	cmp	r3, #1
 80a194a:	d106      	bne.n	80a195a <_Z7printlnPc6String+0x36>
    terminal.println(buffer); // Ausgabe an BLYNK APP terminal
 80a194c:	4904      	ldr	r1, [pc, #16]	; (80a1960 <_Z7printlnPc6String+0x3c>)
 80a194e:	4806      	ldr	r0, [pc, #24]	; (80a1968 <_Z7printlnPc6String+0x44>)
 80a1950:	f002 fddd 	bl	80a450e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a1954:	4804      	ldr	r0, [pc, #16]	; (80a1968 <_Z7printlnPc6String+0x44>)
 80a1956:	f7ff fe49 	bl	80a15ec <_ZN14WidgetTerminal5flushEv>
}
 80a195a:	bd38      	pop	{r3, r4, r5, pc}
 80a195c:	080a7fdb 	.word	0x080a7fdb
 80a1960:	20000216 	.word	0x20000216
 80a1964:	20000368 	.word	0x20000368
 80a1968:	2000036c 	.word	0x2000036c

080a196c <_Z7println6String>:
{
 80a196c:	b510      	push	{r4, lr}
 80a196e:	4604      	mov	r4, r0
  timeStamp();
 80a1970:	f7ff f9c0 	bl	80a0cf4 <_Z9timeStampv>
  Serial.println(text);
 80a1974:	f003 fb82 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1978:	6821      	ldr	r1, [r4, #0]
 80a197a:	f002 fdc8 	bl	80a450e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a197e:	4b06      	ldr	r3, [pc, #24]	; (80a1998 <_Z7println6String+0x2c>)
 80a1980:	681b      	ldr	r3, [r3, #0]
 80a1982:	2b01      	cmp	r3, #1
 80a1984:	d106      	bne.n	80a1994 <_Z7println6String+0x28>
    terminal.println(text); // Ausgabe an BLYNK APP terminal
 80a1986:	6821      	ldr	r1, [r4, #0]
 80a1988:	4804      	ldr	r0, [pc, #16]	; (80a199c <_Z7println6String+0x30>)
 80a198a:	f002 fdc0 	bl	80a450e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a198e:	4803      	ldr	r0, [pc, #12]	; (80a199c <_Z7println6String+0x30>)
 80a1990:	f7ff fe2c 	bl	80a15ec <_ZN14WidgetTerminal5flushEv>
}
 80a1994:	bd10      	pop	{r4, pc}
 80a1996:	bf00      	nop
 80a1998:	20000368 	.word	0x20000368
 80a199c:	2000036c 	.word	0x2000036c

080a19a0 <_Z17deviceNameHandlerPKcS0_>:
{
 80a19a0:	b570      	push	{r4, r5, r6, lr}
 80a19a2:	4605      	mov	r5, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a19a4:	4e1e      	ldr	r6, [pc, #120]	; (80a1a20 <_Z17deviceNameHandlerPKcS0_+0x80>)
 80a19a6:	b08c      	sub	sp, #48	; 0x30
 80a19a8:	460c      	mov	r4, r1
 80a19aa:	a804      	add	r0, sp, #16
 80a19ac:	4631      	mov	r1, r6
 80a19ae:	f002 fce1 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
  println("received  : " + String(topic));
 80a19b2:	4629      	mov	r1, r5
 80a19b4:	4668      	mov	r0, sp
 80a19b6:	f002 fcdd 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
 80a19ba:	4669      	mov	r1, sp
 80a19bc:	a804      	add	r0, sp, #16
 80a19be:	f002 fd42 	bl	80a4446 <_ZplRK15StringSumHelperRK6String>
 80a19c2:	4601      	mov	r1, r0
 80a19c4:	a808      	add	r0, sp, #32
 80a19c6:	f002 fd14 	bl	80a43f2 <_ZN6StringC1ERKS_>
 80a19ca:	a808      	add	r0, sp, #32
 80a19cc:	f7ff ffce 	bl	80a196c <_Z7println6String>
 80a19d0:	a808      	add	r0, sp, #32
 80a19d2:	f002 fc85 	bl	80a42e0 <_ZN6StringD1Ev>
 80a19d6:	4668      	mov	r0, sp
 80a19d8:	f002 fc82 	bl	80a42e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a19dc:	a804      	add	r0, sp, #16
 80a19de:	f002 fc7f 	bl	80a42e0 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a19e2:	4631      	mov	r1, r6
 80a19e4:	a804      	add	r0, sp, #16
 80a19e6:	f002 fcc5 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
  println("received  : " + String(data));
 80a19ea:	4621      	mov	r1, r4
 80a19ec:	4668      	mov	r0, sp
 80a19ee:	f002 fcc1 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
 80a19f2:	4669      	mov	r1, sp
 80a19f4:	a804      	add	r0, sp, #16
 80a19f6:	f002 fd26 	bl	80a4446 <_ZplRK15StringSumHelperRK6String>
 80a19fa:	4601      	mov	r1, r0
 80a19fc:	a808      	add	r0, sp, #32
 80a19fe:	f002 fcf8 	bl	80a43f2 <_ZN6StringC1ERKS_>
 80a1a02:	a808      	add	r0, sp, #32
 80a1a04:	f7ff ffb2 	bl	80a196c <_Z7println6String>
 80a1a08:	a808      	add	r0, sp, #32
 80a1a0a:	f002 fc69 	bl	80a42e0 <_ZN6StringD1Ev>
 80a1a0e:	4668      	mov	r0, sp
 80a1a10:	f002 fc66 	bl	80a42e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1a14:	a804      	add	r0, sp, #16
 80a1a16:	f002 fc63 	bl	80a42e0 <_ZN6StringD1Ev>
}
 80a1a1a:	b00c      	add	sp, #48	; 0x30
 80a1a1c:	bd70      	pop	{r4, r5, r6, pc}
 80a1a1e:	bf00      	nop
 80a1a20:	080a7fe1 	.word	0x080a7fe1

080a1a24 <_Z16myWebHookHandlerPKcS0_>:
{
 80a1a24:	b570      	push	{r4, r5, r6, lr}
 80a1a26:	460d      	mov	r5, r1
 80a1a28:	b08c      	sub	sp, #48	; 0x30
	StringSumHelper(const char *p) : String(p) {}
 80a1a2a:	4937      	ldr	r1, [pc, #220]	; (80a1b08 <_Z16myWebHookHandlerPKcS0_+0xe4>)
 80a1a2c:	a804      	add	r0, sp, #16
 80a1a2e:	f002 fca1 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
  println("received  : " + String(data));
 80a1a32:	4629      	mov	r1, r5
 80a1a34:	4668      	mov	r0, sp
 80a1a36:	f002 fc9d 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a3a:	4669      	mov	r1, sp
 80a1a3c:	a804      	add	r0, sp, #16
 80a1a3e:	f002 fd02 	bl	80a4446 <_ZplRK15StringSumHelperRK6String>
 80a1a42:	4601      	mov	r1, r0
 80a1a44:	a808      	add	r0, sp, #32
 80a1a46:	f002 fcd4 	bl	80a43f2 <_ZN6StringC1ERKS_>
 80a1a4a:	a808      	add	r0, sp, #32
 80a1a4c:	f7ff ff8e 	bl	80a196c <_Z7println6String>
 80a1a50:	a808      	add	r0, sp, #32
 80a1a52:	f002 fc45 	bl	80a42e0 <_ZN6StringD1Ev>
 80a1a56:	4668      	mov	r0, sp
 80a1a58:	f002 fc42 	bl	80a42e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1a5c:	a804      	add	r0, sp, #16
 80a1a5e:	f002 fc3f 	bl	80a42e0 <_ZN6StringD1Ev>
  if ((String(data).startsWith("off")) & (control.dontGiessen == 0))
 80a1a62:	4629      	mov	r1, r5
 80a1a64:	a804      	add	r0, sp, #16
 80a1a66:	f002 fc85 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a6a:	4928      	ldr	r1, [pc, #160]	; (80a1b0c <_Z16myWebHookHandlerPKcS0_+0xe8>)
 80a1a6c:	a808      	add	r0, sp, #32
 80a1a6e:	f002 fc81 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a72:	a908      	add	r1, sp, #32
 80a1a74:	a804      	add	r0, sp, #16
 80a1a76:	f002 fd08 	bl	80a448a <_ZNK6String10startsWithERKS_>
 80a1a7a:	4c25      	ldr	r4, [pc, #148]	; (80a1b10 <_Z16myWebHookHandlerPKcS0_+0xec>)
 80a1a7c:	68a3      	ldr	r3, [r4, #8]
 80a1a7e:	2b00      	cmp	r3, #0
 80a1a80:	bf14      	ite	ne
 80a1a82:	2600      	movne	r6, #0
 80a1a84:	f000 0601 	andeq.w	r6, r0, #1
 80a1a88:	a808      	add	r0, sp, #32
 80a1a8a:	f002 fc29 	bl	80a42e0 <_ZN6StringD1Ev>
 80a1a8e:	a804      	add	r0, sp, #16
 80a1a90:	f002 fc26 	bl	80a42e0 <_ZN6StringD1Ev>
 80a1a94:	b166      	cbz	r6, 80a1ab0 <_Z16myWebHookHandlerPKcS0_+0x8c>
    control.dontGiessen = 1;
 80a1a96:	2301      	movs	r3, #1
 80a1a98:	60a3      	str	r3, [r4, #8]
    EEPROM.put(0, control);
 80a1a9a:	f003 fdbf 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a1a9e:	4621      	mov	r1, r4
 80a1aa0:	2000      	movs	r0, #0
 80a1aa2:	2214      	movs	r2, #20
 80a1aa4:	f001 fe3e 	bl	80a3724 <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN DEAKTIVIERT by WebHook");
 80a1aa8:	491a      	ldr	r1, [pc, #104]	; (80a1b14 <_Z16myWebHookHandlerPKcS0_+0xf0>)
 80a1aaa:	481b      	ldr	r0, [pc, #108]	; (80a1b18 <_Z16myWebHookHandlerPKcS0_+0xf4>)
 80a1aac:	f7fe fb26 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if ((String(data).startsWith("on")) & (control.dontGiessen == 1))
 80a1ab0:	4629      	mov	r1, r5
 80a1ab2:	a804      	add	r0, sp, #16
 80a1ab4:	f002 fc5e 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1ab8:	4918      	ldr	r1, [pc, #96]	; (80a1b1c <_Z16myWebHookHandlerPKcS0_+0xf8>)
 80a1aba:	a808      	add	r0, sp, #32
 80a1abc:	f002 fc5a 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1ac0:	a908      	add	r1, sp, #32
 80a1ac2:	a804      	add	r0, sp, #16
 80a1ac4:	f002 fce1 	bl	80a448a <_ZNK6String10startsWithERKS_>
 80a1ac8:	68a3      	ldr	r3, [r4, #8]
 80a1aca:	2b01      	cmp	r3, #1
 80a1acc:	bf14      	ite	ne
 80a1ace:	2500      	movne	r5, #0
 80a1ad0:	f000 0501 	andeq.w	r5, r0, #1
 80a1ad4:	a808      	add	r0, sp, #32
 80a1ad6:	f002 fc03 	bl	80a42e0 <_ZN6StringD1Ev>
 80a1ada:	a804      	add	r0, sp, #16
 80a1adc:	f002 fc00 	bl	80a42e0 <_ZN6StringD1Ev>
 80a1ae0:	b17d      	cbz	r5, 80a1b02 <_Z16myWebHookHandlerPKcS0_+0xde>
    control.dontGiessen = 0;
 80a1ae2:	2500      	movs	r5, #0
 80a1ae4:	60a5      	str	r5, [r4, #8]
    EEPROM.put(0, control);
 80a1ae6:	f003 fd99 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a1aea:	4628      	mov	r0, r5
 80a1aec:	2214      	movs	r2, #20
 80a1aee:	4908      	ldr	r1, [pc, #32]	; (80a1b10 <_Z16myWebHookHandlerPKcS0_+0xec>)
 80a1af0:	f001 fe18 	bl	80a3724 <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN AKTIVIERT by WebHook");
 80a1af4:	490a      	ldr	r1, [pc, #40]	; (80a1b20 <_Z16myWebHookHandlerPKcS0_+0xfc>)
 80a1af6:	4808      	ldr	r0, [pc, #32]	; (80a1b18 <_Z16myWebHookHandlerPKcS0_+0xf4>)
}
 80a1af8:	b00c      	add	sp, #48	; 0x30
 80a1afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN AKTIVIERT by WebHook");
 80a1afe:	f7fe bafd 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
}
 80a1b02:	b00c      	add	sp, #48	; 0x30
 80a1b04:	bd70      	pop	{r4, r5, r6, pc}
 80a1b06:	bf00      	nop
 80a1b08:	080a7fe1 	.word	0x080a7fe1
 80a1b0c:	080a7fee 	.word	0x080a7fee
 80a1b10:	20000310 	.word	0x20000310
 80a1b14:	080a7ff2 	.word	0x080a7ff2
 80a1b18:	080a7b73 	.word	0x080a7b73
 80a1b1c:	080a8392 	.word	0x080a8392
 80a1b20:	080a801f 	.word	0x080a801f

080a1b24 <_Z7printlnPci>:
{
 80a1b24:	b538      	push	{r3, r4, r5, lr}
 80a1b26:	4604      	mov	r4, r0
 80a1b28:	460d      	mov	r5, r1
  timeStamp();
 80a1b2a:	f7ff f8e3 	bl	80a0cf4 <_Z9timeStampv>
  sprintf(buffer, "%s %d", text, data);
 80a1b2e:	462b      	mov	r3, r5
 80a1b30:	4622      	mov	r2, r4
 80a1b32:	490a      	ldr	r1, [pc, #40]	; (80a1b5c <_Z7printlnPci+0x38>)
 80a1b34:	480a      	ldr	r0, [pc, #40]	; (80a1b60 <_Z7printlnPci+0x3c>)
 80a1b36:	f002 f85d 	bl	80a3bf4 <sprintf>
  Serial.println(buffer);
 80a1b3a:	f003 fa9f 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1b3e:	4908      	ldr	r1, [pc, #32]	; (80a1b60 <_Z7printlnPci+0x3c>)
 80a1b40:	f002 fce5 	bl	80a450e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a1b44:	4b07      	ldr	r3, [pc, #28]	; (80a1b64 <_Z7printlnPci+0x40>)
 80a1b46:	681b      	ldr	r3, [r3, #0]
 80a1b48:	2b01      	cmp	r3, #1
 80a1b4a:	d106      	bne.n	80a1b5a <_Z7printlnPci+0x36>
    terminal.println(buffer); // Ausgabe an BLYNK APP terminal
 80a1b4c:	4904      	ldr	r1, [pc, #16]	; (80a1b60 <_Z7printlnPci+0x3c>)
 80a1b4e:	4806      	ldr	r0, [pc, #24]	; (80a1b68 <_Z7printlnPci+0x44>)
 80a1b50:	f002 fcdd 	bl	80a450e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a1b54:	4804      	ldr	r0, [pc, #16]	; (80a1b68 <_Z7printlnPci+0x44>)
 80a1b56:	f7ff fd49 	bl	80a15ec <_ZN14WidgetTerminal5flushEv>
}
 80a1b5a:	bd38      	pop	{r3, r4, r5, pc}
 80a1b5c:	080a7fdb 	.word	0x080a7fdb
 80a1b60:	20000216 	.word	0x20000216
 80a1b64:	20000368 	.word	0x20000368
 80a1b68:	2000036c 	.word	0x2000036c

080a1b6c <_Z11printStatusv>:
{
 80a1b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return network_ready(*this, 0, NULL);
 80a1b6e:	2200      	movs	r2, #0
 80a1b70:	4b43      	ldr	r3, [pc, #268]	; (80a1c80 <_Z11printStatusv+0x114>)
 80a1b72:	4611      	mov	r1, r2
 80a1b74:	6858      	ldr	r0, [r3, #4]
 80a1b76:	f001 ff85 	bl	80a3a84 <network_ready>
 80a1b7a:	4606      	mov	r6, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1b7c:	f001 fff2 	bl	80a3b64 <spark_cloud_flag_connected>
 80a1b80:	4607      	mov	r7, r0
  timeStamp();
 80a1b82:	f7ff f8b7 	bl	80a0cf4 <_Z9timeStampv>
  if (termEnabled == 1)
 80a1b86:	4b3f      	ldr	r3, [pc, #252]	; (80a1c84 <_Z11printStatusv+0x118>)
 80a1b88:	681b      	ldr	r3, [r3, #0]
 80a1b8a:	2b01      	cmp	r3, #1
 80a1b8c:	d103      	bne.n	80a1b96 <_Z11printStatusv+0x2a>
    terminal.println(timebuffer);
 80a1b8e:	493e      	ldr	r1, [pc, #248]	; (80a1c88 <_Z11printStatusv+0x11c>)
 80a1b90:	483e      	ldr	r0, [pc, #248]	; (80a1c8c <_Z11printStatusv+0x120>)
 80a1b92:	f002 fcbc 	bl	80a450e <_ZN5Print7printlnEPKc>
  println(" tnow: ", tnow);
 80a1b96:	4b3e      	ldr	r3, [pc, #248]	; (80a1c90 <_Z11printStatusv+0x124>)
  println("Main    [mV] : ", AiPumpeMain);
 80a1b98:	4d3e      	ldr	r5, [pc, #248]	; (80a1c94 <_Z11printStatusv+0x128>)
  println(" tnow: ", tnow);
 80a1b9a:	6819      	ldr	r1, [r3, #0]
 80a1b9c:	483e      	ldr	r0, [pc, #248]	; (80a1c98 <_Z11printStatusv+0x12c>)
  println("Reserve [mV] : ", AiPumpeReserve);
 80a1b9e:	4c3f      	ldr	r4, [pc, #252]	; (80a1c9c <_Z11printStatusv+0x130>)
  println(" tnow: ", tnow);
 80a1ba0:	f7ff ffc0 	bl	80a1b24 <_Z7printlnPci>
  readAdcChannels();
 80a1ba4:	f7ff f804 	bl	80a0bb0 <_Z15readAdcChannelsv>
  println("Main    [mV] : ", AiPumpeMain);
 80a1ba8:	6829      	ldr	r1, [r5, #0]
 80a1baa:	483d      	ldr	r0, [pc, #244]	; (80a1ca0 <_Z11printStatusv+0x134>)
 80a1bac:	f7ff ffba 	bl	80a1b24 <_Z7printlnPci>
  println("Reserve [mV] : ", AiPumpeReserve);
 80a1bb0:	6821      	ldr	r1, [r4, #0]
 80a1bb2:	483c      	ldr	r0, [pc, #240]	; (80a1ca4 <_Z11printStatusv+0x138>)
 80a1bb4:	f7ff ffb6 	bl	80a1b24 <_Z7printlnPci>
  println("12V     [mV] : ", Ai12V);
 80a1bb8:	4b3b      	ldr	r3, [pc, #236]	; (80a1ca8 <_Z11printStatusv+0x13c>)
 80a1bba:	483c      	ldr	r0, [pc, #240]	; (80a1cac <_Z11printStatusv+0x140>)
 80a1bbc:	6819      	ldr	r1, [r3, #0]
 80a1bbe:	f7ff ffb1 	bl	80a1b24 <_Z7printlnPci>
   if (AiPumpeMain > 1000)
 80a1bc2:	682b      	ldr	r3, [r5, #0]
 80a1bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a1bc8:	d90a      	bls.n	80a1be0 <_Z11printStatusv+0x74>
      Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a1bca:	f003 fa57 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1bce:	682a      	ldr	r2, [r5, #0]
 80a1bd0:	4937      	ldr	r1, [pc, #220]	; (80a1cb0 <_Z11printStatusv+0x144>)
 80a1bd2:	f7fe fa6e 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      WriteToDatabase("ADC", "AiPumpeMain    [mV] : ", AiPumpeMain);
 80a1bd6:	682a      	ldr	r2, [r5, #0]
 80a1bd8:	4936      	ldr	r1, [pc, #216]	; (80a1cb4 <_Z11printStatusv+0x148>)
 80a1bda:	4837      	ldr	r0, [pc, #220]	; (80a1cb8 <_Z11printStatusv+0x14c>)
 80a1bdc:	f7fe fae2 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  if (AiPumpeReserve > 1000)
 80a1be0:	6823      	ldr	r3, [r4, #0]
 80a1be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a1be6:	d90a      	bls.n	80a1bfe <_Z11printStatusv+0x92>
      Serial.printlnf(" AiPumpeReserve : %d [mV]", AiPumpeReserve);
 80a1be8:	f003 fa48 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1bec:	6822      	ldr	r2, [r4, #0]
 80a1bee:	4933      	ldr	r1, [pc, #204]	; (80a1cbc <_Z11printStatusv+0x150>)
 80a1bf0:	f7fe fa5f 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      WriteToDatabase("ADC", "AiPumpeReserve [mV] : ", AiPumpeReserve);
 80a1bf4:	6822      	ldr	r2, [r4, #0]
 80a1bf6:	4932      	ldr	r1, [pc, #200]	; (80a1cc0 <_Z11printStatusv+0x154>)
 80a1bf8:	482f      	ldr	r0, [pc, #188]	; (80a1cb8 <_Z11printStatusv+0x14c>)
 80a1bfa:	f7fe fad3 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1bfe:	2001      	movs	r0, #1
 80a1c00:	f003 fc7a 	bl	80a54f8 <digitalRead>
 80a1c04:	4b2f      	ldr	r3, [pc, #188]	; (80a1cc4 <_Z11printStatusv+0x158>)
  if (st_main_pumpe == HIGH)
 80a1c06:	2801      	cmp	r0, #1
  st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1c08:	6018      	str	r0, [r3, #0]
  if (st_main_pumpe == HIGH)
 80a1c0a:	d106      	bne.n	80a1c1a <_Z11printStatusv+0xae>
    println("MAIN Pumpe is ON");
 80a1c0c:	482e      	ldr	r0, [pc, #184]	; (80a1cc8 <_Z11printStatusv+0x15c>)
 80a1c0e:	f7ff fd17 	bl	80a1640 <_Z7printlnPc>
    WriteToDatabase("STATUS", "MAIN Pumpe is ON ");
 80a1c12:	492e      	ldr	r1, [pc, #184]	; (80a1ccc <_Z11printStatusv+0x160>)
 80a1c14:	482e      	ldr	r0, [pc, #184]	; (80a1cd0 <_Z11printStatusv+0x164>)
 80a1c16:	f7fe fa71 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1c1a:	2002      	movs	r0, #2
 80a1c1c:	f003 fc6c 	bl	80a54f8 <digitalRead>
 80a1c20:	4b2c      	ldr	r3, [pc, #176]	; (80a1cd4 <_Z11printStatusv+0x168>)
  if (st_reserve_pumpe == HIGH)
 80a1c22:	2801      	cmp	r0, #1
  st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1c24:	6018      	str	r0, [r3, #0]
  if (st_reserve_pumpe == HIGH)
 80a1c26:	d106      	bne.n	80a1c36 <_Z11printStatusv+0xca>
    println("RESERVE Pumpe ist ON");
 80a1c28:	482b      	ldr	r0, [pc, #172]	; (80a1cd8 <_Z11printStatusv+0x16c>)
 80a1c2a:	f7ff fd09 	bl	80a1640 <_Z7printlnPc>
    WriteToDatabase("STATUS", "RESERVE Pumpe is ON ");
 80a1c2e:	492b      	ldr	r1, [pc, #172]	; (80a1cdc <_Z11printStatusv+0x170>)
 80a1c30:	4827      	ldr	r0, [pc, #156]	; (80a1cd0 <_Z11printStatusv+0x164>)
 80a1c32:	f7fe fa63 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if (st_funk_pumpe == ON)
 80a1c36:	4b2a      	ldr	r3, [pc, #168]	; (80a1ce0 <_Z11printStatusv+0x174>)
 80a1c38:	681b      	ldr	r3, [r3, #0]
 80a1c3a:	2b01      	cmp	r3, #1
 80a1c3c:	d106      	bne.n	80a1c4c <_Z11printStatusv+0xe0>
    println("FUNK Pumpe ist ON");
 80a1c3e:	4829      	ldr	r0, [pc, #164]	; (80a1ce4 <_Z11printStatusv+0x178>)
 80a1c40:	f7ff fcfe 	bl	80a1640 <_Z7printlnPc>
    WriteToDatabase("STATUS", "FUNK Pumpe is ON ");
 80a1c44:	4928      	ldr	r1, [pc, #160]	; (80a1ce8 <_Z11printStatusv+0x17c>)
 80a1c46:	4822      	ldr	r0, [pc, #136]	; (80a1cd0 <_Z11printStatusv+0x164>)
 80a1c48:	f7fe fa58 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  Serial.printlnf(" waterlevel: %d ", waterlevel);
 80a1c4c:	f003 fa16 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1c50:	4b26      	ldr	r3, [pc, #152]	; (80a1cec <_Z11printStatusv+0x180>)
 80a1c52:	4927      	ldr	r1, [pc, #156]	; (80a1cf0 <_Z11printStatusv+0x184>)
 80a1c54:	681a      	ldr	r2, [r3, #0]
 80a1c56:	f7fe fa2c 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf(" wifi=%s cloud=%s fast_counter=%d ", (wifiReady ? "on" : "off"), (cloudReady ? "on" : "off"), fast_counter);
 80a1c5a:	f003 fa0f 	bl	80a507c <_Z16_fetch_usbserialv>
 80a1c5e:	4b25      	ldr	r3, [pc, #148]	; (80a1cf4 <_Z11printStatusv+0x188>)
 80a1c60:	4925      	ldr	r1, [pc, #148]	; (80a1cf8 <_Z11printStatusv+0x18c>)
 80a1c62:	681b      	ldr	r3, [r3, #0]
 80a1c64:	4a25      	ldr	r2, [pc, #148]	; (80a1cfc <_Z11printStatusv+0x190>)
 80a1c66:	9300      	str	r3, [sp, #0]
 80a1c68:	2f00      	cmp	r7, #0
 80a1c6a:	bf14      	ite	ne
 80a1c6c:	460b      	movne	r3, r1
 80a1c6e:	4613      	moveq	r3, r2
 80a1c70:	2e00      	cmp	r6, #0
 80a1c72:	bf18      	it	ne
 80a1c74:	460a      	movne	r2, r1
 80a1c76:	4922      	ldr	r1, [pc, #136]	; (80a1d00 <_Z11printStatusv+0x194>)
 80a1c78:	f7fe fa1b 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
}
 80a1c7c:	b003      	add	sp, #12
 80a1c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1c80:	200004b0 	.word	0x200004b0
 80a1c84:	20000368 	.word	0x20000368
 80a1c88:	200003bc 	.word	0x200003bc
 80a1c8c:	2000036c 	.word	0x2000036c
 80a1c90:	200003f4 	.word	0x200003f4
 80a1c94:	200001a0 	.word	0x200001a0
 80a1c98:	080a804a 	.word	0x080a804a
 80a1c9c:	200001a4 	.word	0x200001a4
 80a1ca0:	080a8083 	.word	0x080a8083
 80a1ca4:	080a80b8 	.word	0x080a80b8
 80a1ca8:	2000019c 	.word	0x2000019c
 80a1cac:	080a8052 	.word	0x080a8052
 80a1cb0:	080a8062 	.word	0x080a8062
 80a1cb4:	080a807c 	.word	0x080a807c
 80a1cb8:	080a8093 	.word	0x080a8093
 80a1cbc:	080a8097 	.word	0x080a8097
 80a1cc0:	080a80b1 	.word	0x080a80b1
 80a1cc4:	20000354 	.word	0x20000354
 80a1cc8:	080a80c8 	.word	0x080a80c8
 80a1ccc:	080a80d9 	.word	0x080a80d9
 80a1cd0:	080a80eb 	.word	0x080a80eb
 80a1cd4:	20000358 	.word	0x20000358
 80a1cd8:	080a80f2 	.word	0x080a80f2
 80a1cdc:	080a8107 	.word	0x080a8107
 80a1ce0:	20000350 	.word	0x20000350
 80a1ce4:	080a811c 	.word	0x080a811c
 80a1ce8:	080a812e 	.word	0x080a812e
 80a1cec:	20000028 	.word	0x20000028
 80a1cf0:	080a8140 	.word	0x080a8140
 80a1cf4:	2000032c 	.word	0x2000032c
 80a1cf8:	080a8392 	.word	0x080a8392
 80a1cfc:	080a7fee 	.word	0x080a7fee
 80a1d00:	080a8151 	.word	0x080a8151

080a1d04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
 80a1d04:	b500      	push	{lr}
 80a1d06:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
 80a1d08:	ab04      	add	r3, sp, #16
 80a1d0a:	2200      	movs	r2, #0
 80a1d0c:	9301      	str	r3, [sp, #4]
 80a1d0e:	2350      	movs	r3, #80	; 0x50
 80a1d10:	2111      	movs	r1, #17
 80a1d12:	9300      	str	r3, [sp, #0]
 80a1d14:	9202      	str	r2, [sp, #8]
 80a1d16:	4b03      	ldr	r3, [pc, #12]	; (80a1d24 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
 80a1d18:	f7ff fbba 	bl	80a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
 80a1d1c:	b015      	add	sp, #84	; 0x54
 80a1d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1d22:	bf00      	nop
 80a1d24:	080a858c 	.word	0x080a858c

080a1d28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a1d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1d2a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 80a1d2e:	ab08      	add	r3, sp, #32
 80a1d30:	2400      	movs	r4, #0
 80a1d32:	460f      	mov	r7, r1
 80a1d34:	9305      	str	r3, [sp, #20]
 80a1d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a1d3a:	4616      	mov	r6, r2
 80a1d3c:	4605      	mov	r5, r0
        cmd.add("vw");
 80a1d3e:	490e      	ldr	r1, [pc, #56]	; (80a1d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_+0x50>)
 80a1d40:	a805      	add	r0, sp, #20
 80a1d42:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80a1d46:	f7fe fe20 	bl	80a098a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a1d4a:	4639      	mov	r1, r7
 80a1d4c:	a805      	add	r0, sp, #20
 80a1d4e:	f7fe fe39 	bl	80a09c4 <_ZN10BlynkParam3addEi>
        add(last);
 80a1d52:	4631      	mov	r1, r6
 80a1d54:	a805      	add	r0, sp, #20
 80a1d56:	f7fe fe18 	bl	80a098a <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a1d5a:	9b06      	ldr	r3, [sp, #24]
 80a1d5c:	4622      	mov	r2, r4
 80a1d5e:	3b01      	subs	r3, #1
 80a1d60:	9300      	str	r3, [sp, #0]
 80a1d62:	2114      	movs	r1, #20
 80a1d64:	4628      	mov	r0, r5
 80a1d66:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80a1d6a:	9b05      	ldr	r3, [sp, #20]
 80a1d6c:	f7ff fb90 	bl	80a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a1d70:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 80a1d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1d76:	bf00      	nop
 80a1d78:	080a7c6f 	.word	0x080a7c6f

080a1d7c <_Z15printSlowStatusv>:
{
 80a1d7c:	b530      	push	{r4, r5, lr}
        flush();
 80a1d7e:	4c4f      	ldr	r4, [pc, #316]	; (80a1ebc <_Z15printSlowStatusv+0x140>)
 80a1d80:	b087      	sub	sp, #28
 80a1d82:	4620      	mov	r0, r4
 80a1d84:	f7ff fc32 	bl	80a15ec <_ZN14WidgetTerminal5flushEv>
        Blynk.virtualWrite(mPin, "clr");
 80a1d88:	4a4d      	ldr	r2, [pc, #308]	; (80a1ec0 <_Z15printSlowStatusv+0x144>)
 80a1d8a:	7a21      	ldrb	r1, [r4, #8]
 80a1d8c:	484d      	ldr	r0, [pc, #308]	; (80a1ec4 <_Z15printSlowStatusv+0x148>)
 80a1d8e:	f7ff ffcb 	bl	80a1d28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  timeStamp();
 80a1d92:	f7fe ffaf 	bl	80a0cf4 <_Z9timeStampv>
  if (termEnabled == 1)
 80a1d96:	4b4c      	ldr	r3, [pc, #304]	; (80a1ec8 <_Z15printSlowStatusv+0x14c>)
 80a1d98:	681b      	ldr	r3, [r3, #0]
 80a1d9a:	2b01      	cmp	r3, #1
 80a1d9c:	d103      	bne.n	80a1da6 <_Z15printSlowStatusv+0x2a>
    terminal.println(timebuffer);
 80a1d9e:	4620      	mov	r0, r4
 80a1da0:	494a      	ldr	r1, [pc, #296]	; (80a1ecc <_Z15printSlowStatusv+0x150>)
 80a1da2:	f002 fbb4 	bl	80a450e <_ZN5Print7printlnEPKc>
  getSleepTime(55); // time to wake up at minute = 55
 80a1da6:	2037      	movs	r0, #55	; 0x37
 80a1da8:	f7fe fef0 	bl	80a0b8c <_Z12getSleepTimei>
  println(" Photon HW ID ", hwID);
 80a1dac:	4948      	ldr	r1, [pc, #288]	; (80a1ed0 <_Z15printSlowStatusv+0x154>)
 80a1dae:	a802      	add	r0, sp, #8
 80a1db0:	f002 fb1f 	bl	80a43f2 <_ZN6StringC1ERKS_>
 80a1db4:	a902      	add	r1, sp, #8
 80a1db6:	4847      	ldr	r0, [pc, #284]	; (80a1ed4 <_Z15printSlowStatusv+0x158>)
 80a1db8:	f7ff fdb4 	bl	80a1924 <_Z7printlnPc6String>
 80a1dbc:	a802      	add	r0, sp, #8
 80a1dbe:	f002 fa8f 	bl	80a42e0 <_ZN6StringD1Ev>
  Particle.publish("particle/device/name");
 80a1dc2:	4945      	ldr	r1, [pc, #276]	; (80a1ed8 <_Z15printSlowStatusv+0x15c>)
 80a1dc4:	a802      	add	r0, sp, #8
 80a1dc6:	f7fe fda5 	bl	80a0914 <_ZN10CloudClass7publishEPKc.isra.0>
      ~__shared_ptr() = default;
 80a1dca:	a803      	add	r0, sp, #12
 80a1dcc:	f7fe f97f 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(500);
 80a1dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1dd4:	f002 fd20 	bl	80a4818 <delay>
  checkDontSleepPin();
 80a1dd8:	f7fe ff76 	bl	80a0cc8 <_Z17checkDontSleepPinv>
  reportDontSleepPin();
 80a1ddc:	f7fe ff50 	bl	80a0c80 <_Z18reportDontSleepPinv>
 80a1de0:	4b3e      	ldr	r3, [pc, #248]	; (80a1edc <_Z15printSlowStatusv+0x160>)
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a1de2:	4c3f      	ldr	r4, [pc, #252]	; (80a1ee0 <_Z15printSlowStatusv+0x164>)
 80a1de4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a1de6:	4a3f      	ldr	r2, [pc, #252]	; (80a1ee4 <_Z15printSlowStatusv+0x168>)
 80a1de8:	493f      	ldr	r1, [pc, #252]	; (80a1ee8 <_Z15printSlowStatusv+0x16c>)
 80a1dea:	f88d 3000 	strb.w	r3, [sp]
 80a1dee:	a802      	add	r0, sp, #8
 80a1df0:	233c      	movs	r3, #60	; 0x3c
 80a1df2:	f002 ff11 	bl	80a4c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a1df6:	a803      	add	r0, sp, #12
 80a1df8:	f7fe f969 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  EEPROM.get(0, control);
 80a1dfc:	f003 fc0e 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a1e00:	2214      	movs	r2, #20
 80a1e02:	4621      	mov	r1, r4
 80a1e04:	2000      	movs	r0, #0
 80a1e06:	f001 fc85 	bl	80a3714 <HAL_EEPROM_Get>
  println("version            : ", control.version);
 80a1e0a:	6821      	ldr	r1, [r4, #0]
 80a1e0c:	4837      	ldr	r0, [pc, #220]	; (80a1eec <_Z15printSlowStatusv+0x170>)
 80a1e0e:	f7ff fe89 	bl	80a1b24 <_Z7printlnPci>
  println("dontSleep          : ", control.dontSleepSW);
 80a1e12:	6861      	ldr	r1, [r4, #4]
 80a1e14:	4836      	ldr	r0, [pc, #216]	; (80a1ef0 <_Z15printSlowStatusv+0x174>)
 80a1e16:	f7ff fe85 	bl	80a1b24 <_Z7printlnPci>
  println("dontGiessen        : ", control.dontGiessen);
 80a1e1a:	68a1      	ldr	r1, [r4, #8]
 80a1e1c:	4835      	ldr	r0, [pc, #212]	; (80a1ef4 <_Z15printSlowStatusv+0x178>)
 80a1e1e:	f7ff fe81 	bl	80a1b24 <_Z7printlnPci>
  println("pumpe_count_down   : ", control.pumpe_count_down);
 80a1e22:	68e1      	ldr	r1, [r4, #12]
 80a1e24:	4834      	ldr	r0, [pc, #208]	; (80a1ef8 <_Z15printSlowStatusv+0x17c>)
 80a1e26:	f7ff fe7d 	bl	80a1b24 <_Z7printlnPci>
  println("reserve_repetitions: ", control.reserve_repetitions);
 80a1e2a:	6921      	ldr	r1, [r4, #16]
 80a1e2c:	4833      	ldr	r0, [pc, #204]	; (80a1efc <_Z15printSlowStatusv+0x180>)
 80a1e2e:	f7ff fe79 	bl	80a1b24 <_Z7printlnPci>
  WriteToDatabase("WASSER","dontGiessen:", control.dontGiessen);
 80a1e32:	68a2      	ldr	r2, [r4, #8]
 80a1e34:	4932      	ldr	r1, [pc, #200]	; (80a1f00 <_Z15printSlowStatusv+0x184>)
 80a1e36:	4833      	ldr	r0, [pc, #204]	; (80a1f04 <_Z15printSlowStatusv+0x188>)
 80a1e38:	f7fe f9b4 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  WriteToDatabase("WASSER","pumpe count down:", control.pumpe_count_down);
 80a1e3c:	68e2      	ldr	r2, [r4, #12]
 80a1e3e:	4932      	ldr	r1, [pc, #200]	; (80a1f08 <_Z15printSlowStatusv+0x18c>)
 80a1e40:	4830      	ldr	r0, [pc, #192]	; (80a1f04 <_Z15printSlowStatusv+0x188>)
 80a1e42:	f7fe f9af 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  WriteToDatabase("WASSER","reserve_repetitions: ", control.reserve_repetitions);
 80a1e46:	6922      	ldr	r2, [r4, #16]
 80a1e48:	492c      	ldr	r1, [pc, #176]	; (80a1efc <_Z15printSlowStatusv+0x180>)
 80a1e4a:	482e      	ldr	r0, [pc, #184]	; (80a1f04 <_Z15printSlowStatusv+0x188>)
 80a1e4c:	f7fe f9aa 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  waterlevel = ultra_sonic_measure();
 80a1e50:	f7fe fc30 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a1e54:	4b2d      	ldr	r3, [pc, #180]	; (80a1f0c <_Z15printSlowStatusv+0x190>)
 80a1e56:	4602      	mov	r2, r0
 80a1e58:	6018      	str	r0, [r3, #0]
  WriteToDatabase("WASSER","WASSERSTAND : ",waterlevel);
 80a1e5a:	492d      	ldr	r1, [pc, #180]	; (80a1f10 <_Z15printSlowStatusv+0x194>)
 80a1e5c:	4829      	ldr	r0, [pc, #164]	; (80a1f04 <_Z15printSlowStatusv+0x188>)
 80a1e5e:	f7fe f9a1 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
   if (control.dontGiessen == 1)
 80a1e62:	68a3      	ldr	r3, [r4, #8]
 80a1e64:	2b01      	cmp	r3, #1
 80a1e66:	d103      	bne.n	80a1e70 <_Z15printSlowStatusv+0xf4>
    WriteToDatabase("WASSER", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a1e68:	492a      	ldr	r1, [pc, #168]	; (80a1f14 <_Z15printSlowStatusv+0x198>)
 80a1e6a:	4826      	ldr	r0, [pc, #152]	; (80a1f04 <_Z15printSlowStatusv+0x188>)
 80a1e6c:	f7fe f946 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if(control.reserve_repetitions > MAX_NACHFUELL_REPETITIONS)
 80a1e70:	6922      	ldr	r2, [r4, #16]
 80a1e72:	2a05      	cmp	r2, #5
 80a1e74:	d906      	bls.n	80a1e84 <_Z15printSlowStatusv+0x108>
        WriteToDatabase("WASSER", "WARNING : Wiederholungen des Tankfuellens ueberschritten = ",control.reserve_repetitions);    
 80a1e76:	4928      	ldr	r1, [pc, #160]	; (80a1f18 <_Z15printSlowStatusv+0x19c>)
 80a1e78:	4822      	ldr	r0, [pc, #136]	; (80a1f04 <_Z15printSlowStatusv+0x188>)
}
 80a1e7a:	b007      	add	sp, #28
 80a1e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        WriteToDatabase("WASSER", "WARNING : Wiederholungen des Tankfuellens ueberschritten = ",control.reserve_repetitions);    
 80a1e80:	f7fe b990 	b.w	80a01a4 <_Z15WriteToDatabasePcS_i>
  println("temp in  : ", temp_in);
 80a1e84:	4c25      	ldr	r4, [pc, #148]	; (80a1f1c <_Z15printSlowStatusv+0x1a0>)
  println("temp out : ", temp_out);
 80a1e86:	4d26      	ldr	r5, [pc, #152]	; (80a1f20 <_Z15printSlowStatusv+0x1a4>)
  get_Temperature(); 
 80a1e88:	f7fe fcac 	bl	80a07e4 <_Z15get_Temperaturev>
  println("temp in  : ", temp_in);
 80a1e8c:	6821      	ldr	r1, [r4, #0]
 80a1e8e:	4825      	ldr	r0, [pc, #148]	; (80a1f24 <_Z15printSlowStatusv+0x1a8>)
 80a1e90:	f7ff fe48 	bl	80a1b24 <_Z7printlnPci>
  println("temp out : ", temp_out);
 80a1e94:	6829      	ldr	r1, [r5, #0]
 80a1e96:	4824      	ldr	r0, [pc, #144]	; (80a1f28 <_Z15printSlowStatusv+0x1ac>)
 80a1e98:	f7ff fe44 	bl	80a1b24 <_Z7printlnPci>
  sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a1e9c:	682b      	ldr	r3, [r5, #0]
 80a1e9e:	6822      	ldr	r2, [r4, #0]
 80a1ea0:	4922      	ldr	r1, [pc, #136]	; (80a1f2c <_Z15printSlowStatusv+0x1b0>)
 80a1ea2:	480a      	ldr	r0, [pc, #40]	; (80a1ecc <_Z15printSlowStatusv+0x150>)
 80a1ea4:	f001 fea6 	bl	80a3bf4 <sprintf>
  WriteToDatabase("CONTROL", timebuffer);
 80a1ea8:	4908      	ldr	r1, [pc, #32]	; (80a1ecc <_Z15printSlowStatusv+0x150>)
 80a1eaa:	4821      	ldr	r0, [pc, #132]	; (80a1f30 <_Z15printSlowStatusv+0x1b4>)
 80a1eac:	f7fe f926 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  println(" ----------------------- ");
 80a1eb0:	4820      	ldr	r0, [pc, #128]	; (80a1f34 <_Z15printSlowStatusv+0x1b8>)
}
 80a1eb2:	b007      	add	sp, #28
 80a1eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  println(" ----------------------- ");
 80a1eb8:	f7ff bbc2 	b.w	80a1640 <_Z7printlnPc>
 80a1ebc:	2000036c 	.word	0x2000036c
 80a1ec0:	080a8174 	.word	0x080a8174
 80a1ec4:	200001a8 	.word	0x200001a8
 80a1ec8:	20000368 	.word	0x20000368
 80a1ecc:	200003bc 	.word	0x200003bc
 80a1ed0:	20000330 	.word	0x20000330
 80a1ed4:	080a79ce 	.word	0x080a79ce
 80a1ed8:	080a79dd 	.word	0x080a79dd
 80a1edc:	20000215 	.word	0x20000215
 80a1ee0:	20000310 	.word	0x20000310
 80a1ee4:	20000216 	.word	0x20000216
 80a1ee8:	080a8336 	.word	0x080a8336
 80a1eec:	080a8178 	.word	0x080a8178
 80a1ef0:	080a818e 	.word	0x080a818e
 80a1ef4:	080a81a4 	.word	0x080a81a4
 80a1ef8:	080a81ba 	.word	0x080a81ba
 80a1efc:	080a81d0 	.word	0x080a81d0
 80a1f00:	080a81e6 	.word	0x080a81e6
 80a1f04:	080a7a4b 	.word	0x080a7a4b
 80a1f08:	080a81f3 	.word	0x080a81f3
 80a1f0c:	20000028 	.word	0x20000028
 80a1f10:	080a8205 	.word	0x080a8205
 80a1f14:	080a8214 	.word	0x080a8214
 80a1f18:	080a8242 	.word	0x080a8242
 80a1f1c:	2000035c 	.word	0x2000035c
 80a1f20:	20000360 	.word	0x20000360
 80a1f24:	080a827e 	.word	0x080a827e
 80a1f28:	080a828a 	.word	0x080a828a
 80a1f2c:	080a7985 	.word	0x080a7985
 80a1f30:	080a7b73 	.word	0x080a7b73
 80a1f34:	080a8296 	.word	0x080a8296

080a1f38 <_Z5sleepi>:
{
 80a1f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (minutes < 1)
 80a1f3c:	1e05      	subs	r5, r0, #0
{
 80a1f3e:	b088      	sub	sp, #32
  if (minutes < 1)
 80a1f40:	f340 80df 	ble.w	80a2102 <_Z5sleepi+0x1ca>
  if (minutes > 120)
 80a1f44:	2d78      	cmp	r5, #120	; 0x78
 80a1f46:	bfa8      	it	ge
 80a1f48:	2578      	movge	r5, #120	; 0x78
  if ((dontSleepHW == 0) & (control.dontSleepSW == 0) & (st_funk_pumpe == 0))
 80a1f4a:	4f6f      	ldr	r7, [pc, #444]	; (80a2108 <_Z5sleepi+0x1d0>)
 80a1f4c:	4b6f      	ldr	r3, [pc, #444]	; (80a210c <_Z5sleepi+0x1d4>)
 80a1f4e:	687c      	ldr	r4, [r7, #4]
 80a1f50:	681b      	ldr	r3, [r3, #0]
 80a1f52:	4e6f      	ldr	r6, [pc, #444]	; (80a2110 <_Z5sleepi+0x1d8>)
 80a1f54:	431c      	orrs	r4, r3
 80a1f56:	6833      	ldr	r3, [r6, #0]
 80a1f58:	431c      	orrs	r4, r3
 80a1f5a:	f040 80cf 	bne.w	80a20fc <_Z5sleepi+0x1c4>
    println(" *** PREPARE SLEEP *** ");
 80a1f5e:	486d      	ldr	r0, [pc, #436]	; (80a2114 <_Z5sleepi+0x1dc>)
 80a1f60:	f7ff fb6e 	bl	80a1640 <_Z7printlnPc>
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a1f64:	4621      	mov	r1, r4
 80a1f66:	4620      	mov	r0, r4
 80a1f68:	f001 f8bc 	bl	80a30e4 <_Z17switch_pumpe_mainii>
 80a1f6c:	4b6a      	ldr	r3, [pc, #424]	; (80a2118 <_Z5sleepi+0x1e0>)
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1f6e:	4621      	mov	r1, r4
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a1f70:	6018      	str	r0, [r3, #0]
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1f72:	4620      	mov	r0, r4
 80a1f74:	f001 f974 	bl	80a3260 <_Z20switch_pumpe_reserveii>
 80a1f78:	4b68      	ldr	r3, [pc, #416]	; (80a211c <_Z5sleepi+0x1e4>)
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a1f7a:	4621      	mov	r1, r4
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1f7c:	6018      	str	r0, [r3, #0]
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a1f7e:	4620      	mov	r0, r4
 80a1f80:	f001 fa14 	bl	80a33ac <_Z17switch_pumpe_funkii>
    System.sleep(D1, RISING, 60 * minutes); // no reset of device after wakeup
 80a1f84:	f04f 083c 	mov.w	r8, #60	; 0x3c
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a1f88:	6030      	str	r0, [r6, #0]
    digitalWrite(DO_PUMPE_MAIN, 0);
 80a1f8a:	2601      	movs	r6, #1
 80a1f8c:	4621      	mov	r1, r4
 80a1f8e:	2001      	movs	r0, #1
 80a1f90:	f003 fa99 	bl	80a54c6 <digitalWrite>
    digitalWrite(DO_PUMPE_RESERVE, 0);
 80a1f94:	4621      	mov	r1, r4
 80a1f96:	2002      	movs	r0, #2
 80a1f98:	f003 fa95 	bl	80a54c6 <digitalWrite>
    WriteToDatabase("WASSER", "#### SLEEP Minutes #### : ", minutes);
 80a1f9c:	462a      	mov	r2, r5
 80a1f9e:	4960      	ldr	r1, [pc, #384]	; (80a2120 <_Z5sleepi+0x1e8>)
 80a1fa0:	4860      	ldr	r0, [pc, #384]	; (80a2124 <_Z5sleepi+0x1ec>)
 80a1fa2:	f7fe f8ff 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
    delay(1000);
 80a1fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1faa:	f002 fc35 	bl	80a4818 <delay>
    System.sleep(D1, RISING, 60 * minutes); // no reset of device after wakeup
 80a1fae:	fb08 f505 	mul.w	r5, r8, r5
 80a1fb2:	4b5d      	ldr	r3, [pc, #372]	; (80a2128 <_Z5sleepi+0x1f0>)
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 80a1fb4:	4632      	mov	r2, r6
 80a1fb6:	681b      	ldr	r3, [r3, #0]
 80a1fb8:	f10d 0116 	add.w	r1, sp, #22
 80a1fbc:	9302      	str	r3, [sp, #8]
 80a1fbe:	a806      	add	r0, sp, #24
 80a1fc0:	f10d 0315 	add.w	r3, sp, #21
 80a1fc4:	e9cd 6500 	strd	r6, r5, [sp]
 80a1fc8:	f8ad 6016 	strh.w	r6, [sp, #22]
 80a1fcc:	f88d 6015 	strb.w	r6, [sp, #21]
 80a1fd0:	f001 febc 	bl	80a3d4c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    println(" *** WAKE UP *** ");
 80a1fd4:	4855      	ldr	r0, [pc, #340]	; (80a212c <_Z5sleepi+0x1f4>)
 80a1fd6:	f7ff fb33 	bl	80a1640 <_Z7printlnPc>
    WiFi.on();
 80a1fda:	4855      	ldr	r0, [pc, #340]	; (80a2130 <_Z5sleepi+0x1f8>)
 80a1fdc:	f7fe fcaa 	bl	80a0934 <_ZN5spark9WiFiClass2onEv>
    delay(5000);
 80a1fe0:	f241 3088 	movw	r0, #5000	; 0x1388
 80a1fe4:	f002 fc18 	bl	80a4818 <delay>
        spark_cloud_flag_connect();
 80a1fe8:	f001 fdb4 	bl	80a3b54 <spark_cloud_flag_connect>
    delay(5000);
 80a1fec:	f241 3088 	movw	r0, #5000	; 0x1388
 80a1ff0:	f002 fc12 	bl	80a4818 <delay>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1ff4:	f001 fdb6 	bl	80a3b64 <spark_cloud_flag_connected>
    if (Particle.connected() == true)
 80a1ff8:	2800      	cmp	r0, #0
 80a1ffa:	d034      	beq.n	80a2066 <_Z5sleepi+0x12e>
    WriteToDatabase("WAKE UP", "#### WAKE UP ####");
 80a1ffc:	494d      	ldr	r1, [pc, #308]	; (80a2134 <_Z5sleepi+0x1fc>)
 80a1ffe:	484e      	ldr	r0, [pc, #312]	; (80a2138 <_Z5sleepi+0x200>)
 80a2000:	f7fe f87c 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    WriteToDatabase("WAKE UP", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a2004:	68fa      	ldr	r2, [r7, #12]
 80a2006:	494d      	ldr	r1, [pc, #308]	; (80a213c <_Z5sleepi+0x204>)
 80a2008:	484b      	ldr	r0, [pc, #300]	; (80a2138 <_Z5sleepi+0x200>)
 80a200a:	f7fe f8cb 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a200e:	4633      	mov	r3, r6
 80a2010:	4622      	mov	r2, r4
 80a2012:	494b      	ldr	r1, [pc, #300]	; (80a2140 <_Z5sleepi+0x208>)
 80a2014:	e9cd 4400 	strd	r4, r4, [sp]
 80a2018:	484a      	ldr	r0, [pc, #296]	; (80a2144 <_Z5sleepi+0x20c>)
 80a201a:	f001 fdbb 	bl	80a3b94 <spark_subscribe>
 80a201e:	4623      	mov	r3, r4
 80a2020:	4622      	mov	r2, r4
 80a2022:	4949      	ldr	r1, [pc, #292]	; (80a2148 <_Z5sleepi+0x210>)
 80a2024:	e9cd 4400 	strd	r4, r4, [sp]
 80a2028:	4848      	ldr	r0, [pc, #288]	; (80a214c <_Z5sleepi+0x214>)
 80a202a:	f001 fdb3 	bl	80a3b94 <spark_subscribe>
    delay(500);
 80a202e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a2032:	f002 fbf1 	bl	80a4818 <delay>
    Particle.publish("particle/device/name");
 80a2036:	4943      	ldr	r1, [pc, #268]	; (80a2144 <_Z5sleepi+0x20c>)
 80a2038:	a806      	add	r0, sp, #24
 80a203a:	f7fe fc6b 	bl	80a0914 <_ZN10CloudClass7publishEPKc.isra.0>
 80a203e:	a807      	add	r0, sp, #28
 80a2040:	f7fe f845 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(500);
 80a2044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a2048:	f002 fbe6 	bl	80a4818 <delay>
 80a204c:	4b40      	ldr	r3, [pc, #256]	; (80a2150 <_Z5sleepi+0x218>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a204e:	a806      	add	r0, sp, #24
 80a2050:	781b      	ldrb	r3, [r3, #0]
 80a2052:	4a40      	ldr	r2, [pc, #256]	; (80a2154 <_Z5sleepi+0x21c>)
 80a2054:	f88d 3000 	strb.w	r3, [sp]
 80a2058:	493f      	ldr	r1, [pc, #252]	; (80a2158 <_Z5sleepi+0x220>)
 80a205a:	4643      	mov	r3, r8
 80a205c:	f002 fddc 	bl	80a4c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a2060:	a807      	add	r0, sp, #28
 80a2062:	f7fe f834 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    tnow = getTime();
 80a2066:	f7fe fd7b 	bl	80a0b60 <_Z7getTimev>
 80a206a:	4b3c      	ldr	r3, [pc, #240]	; (80a215c <_Z5sleepi+0x224>)
 80a206c:	6018      	str	r0, [r3, #0]
    hwInit();
 80a206e:	f7fe fdc5 	bl	80a0bfc <_Z6hwInitv>
    EEPROM.get(0, control);
 80a2072:	f003 fad3 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a2076:	2214      	movs	r2, #20
 80a2078:	2000      	movs	r0, #0
 80a207a:	4923      	ldr	r1, [pc, #140]	; (80a2108 <_Z5sleepi+0x1d0>)
 80a207c:	f001 fb4a 	bl	80a3714 <HAL_EEPROM_Get>
    if ((control.pumpe_count_down < 30) | (control.pumpe_count_down > 240))
 80a2080:	68fb      	ldr	r3, [r7, #12]
 80a2082:	3b1e      	subs	r3, #30
 80a2084:	2bd2      	cmp	r3, #210	; 0xd2
 80a2086:	d908      	bls.n	80a209a <_Z5sleepi+0x162>
      control.pumpe_count_down = 90;
 80a2088:	235a      	movs	r3, #90	; 0x5a
 80a208a:	60fb      	str	r3, [r7, #12]
      EEPROM.put(0, control);
 80a208c:	f003 fac6 	bl	80a561c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a2090:	2214      	movs	r2, #20
 80a2092:	2000      	movs	r0, #0
 80a2094:	491c      	ldr	r1, [pc, #112]	; (80a2108 <_Z5sleepi+0x1d0>)
 80a2096:	f001 fb45 	bl	80a3724 <HAL_EEPROM_Put>
    if (control.dontGiessen == 1)
 80a209a:	68bb      	ldr	r3, [r7, #8]
 80a209c:	2b01      	cmp	r3, #1
 80a209e:	d103      	bne.n	80a20a8 <_Z5sleepi+0x170>
      WriteToDatabase("WAKE UP", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a20a0:	492f      	ldr	r1, [pc, #188]	; (80a2160 <_Z5sleepi+0x228>)
 80a20a2:	4825      	ldr	r0, [pc, #148]	; (80a2138 <_Z5sleepi+0x200>)
 80a20a4:	f7fe f82a 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    Serial.printlnf("temp in : %d  temp out : %d ", temp_in, temp_out);
 80a20a8:	4c2e      	ldr	r4, [pc, #184]	; (80a2164 <_Z5sleepi+0x22c>)
 80a20aa:	4d2f      	ldr	r5, [pc, #188]	; (80a2168 <_Z5sleepi+0x230>)
    get_Temperature(); 
 80a20ac:	f7fe fb9a 	bl	80a07e4 <_Z15get_Temperaturev>
    Serial.printlnf("temp in : %d  temp out : %d ", temp_in, temp_out);
 80a20b0:	f002 ffe4 	bl	80a507c <_Z16_fetch_usbserialv>
 80a20b4:	6822      	ldr	r2, [r4, #0]
 80a20b6:	682b      	ldr	r3, [r5, #0]
 80a20b8:	492c      	ldr	r1, [pc, #176]	; (80a216c <_Z5sleepi+0x234>)
 80a20ba:	f7fd fffa 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a20be:	6822      	ldr	r2, [r4, #0]
 80a20c0:	682b      	ldr	r3, [r5, #0]
 80a20c2:	492b      	ldr	r1, [pc, #172]	; (80a2170 <_Z5sleepi+0x238>)
 80a20c4:	482b      	ldr	r0, [pc, #172]	; (80a2174 <_Z5sleepi+0x23c>)
 80a20c6:	f001 fd95 	bl	80a3bf4 <sprintf>
    WriteToDatabase("WAKE UP", timebuffer);
 80a20ca:	492a      	ldr	r1, [pc, #168]	; (80a2174 <_Z5sleepi+0x23c>)
 80a20cc:	481a      	ldr	r0, [pc, #104]	; (80a2138 <_Z5sleepi+0x200>)
 80a20ce:	f7fe f815 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    printSlowStatus();
 80a20d2:	f7ff fe53 	bl	80a1d7c <_Z15printSlowStatusv>
    if ((Time.hour()>8) & (Time.hour()<11))
 80a20d6:	f002 fb49 	bl	80a476c <_ZN9TimeClass4hourEv>
 80a20da:	4604      	mov	r4, r0
 80a20dc:	f002 fb46 	bl	80a476c <_ZN9TimeClass4hourEv>
 80a20e0:	2c08      	cmp	r4, #8
 80a20e2:	dd04      	ble.n	80a20ee <_Z5sleepi+0x1b6>
 80a20e4:	280a      	cmp	r0, #10
 80a20e6:	dc02      	bgt.n	80a20ee <_Z5sleepi+0x1b6>
      TankFuellen(LOW_LEVEL_TANKFUELLEN);
 80a20e8:	205f      	movs	r0, #95	; 0x5f
 80a20ea:	f001 f9c1 	bl	80a3470 <_Z11TankFuelleni>
    slow_counter = 0;
 80a20ee:	2300      	movs	r3, #0
 80a20f0:	4a21      	ldr	r2, [pc, #132]	; (80a2178 <_Z5sleepi+0x240>)
 80a20f2:	6013      	str	r3, [r2, #0]
    fast_counter = 0;
 80a20f4:	4a21      	ldr	r2, [pc, #132]	; (80a217c <_Z5sleepi+0x244>)
 80a20f6:	6013      	str	r3, [r2, #0]
    termEnabled = 0;
 80a20f8:	4a21      	ldr	r2, [pc, #132]	; (80a2180 <_Z5sleepi+0x248>)
 80a20fa:	6013      	str	r3, [r2, #0]
}
 80a20fc:	b008      	add	sp, #32
 80a20fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    minutes = 5;
 80a2102:	2505      	movs	r5, #5
 80a2104:	e721      	b.n	80a1f4a <_Z5sleepi+0x12>
 80a2106:	bf00      	nop
 80a2108:	20000310 	.word	0x20000310
 80a210c:	20000328 	.word	0x20000328
 80a2110:	20000350 	.word	0x20000350
 80a2114:	080a82b0 	.word	0x080a82b0
 80a2118:	20000354 	.word	0x20000354
 80a211c:	20000358 	.word	0x20000358
 80a2120:	080a82c8 	.word	0x080a82c8
 80a2124:	080a7a4b 	.word	0x080a7a4b
 80a2128:	20000210 	.word	0x20000210
 80a212c:	080a82e3 	.word	0x080a82e3
 80a2130:	200004b0 	.word	0x200004b0
 80a2134:	080a82f5 	.word	0x080a82f5
 80a2138:	080a8307 	.word	0x080a8307
 80a213c:	080a830f 	.word	0x080a830f
 80a2140:	080a19a1 	.word	0x080a19a1
 80a2144:	080a79dd 	.word	0x080a79dd
 80a2148:	080a1a25 	.word	0x080a1a25
 80a214c:	080a8328 	.word	0x080a8328
 80a2150:	20000215 	.word	0x20000215
 80a2154:	20000216 	.word	0x20000216
 80a2158:	080a8336 	.word	0x080a8336
 80a215c:	200003f4 	.word	0x200003f4
 80a2160:	080a8214 	.word	0x080a8214
 80a2164:	2000035c 	.word	0x2000035c
 80a2168:	20000360 	.word	0x20000360
 80a216c:	080a8343 	.word	0x080a8343
 80a2170:	080a7985 	.word	0x080a7985
 80a2174:	200003bc 	.word	0x200003bc
 80a2178:	2000034c 	.word	0x2000034c
 80a217c:	2000032c 	.word	0x2000032c
 80a2180:	20000368 	.word	0x20000368

080a2184 <BlynkWidgetWrite14>:
{
 80a2184:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2186:	6808      	ldr	r0, [r1, #0]
 80a2188:	f7fe fba7 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a218c:	2801      	cmp	r0, #1
 80a218e:	d111      	bne.n	80a21b4 <BlynkWidgetWrite14+0x30>
    termEnabled = 1;
 80a2190:	4b09      	ldr	r3, [pc, #36]	; (80a21b8 <BlynkWidgetWrite14+0x34>)
 80a2192:	6018      	str	r0, [r3, #0]
    println(" Terminal enabled  ");
 80a2194:	4809      	ldr	r0, [pc, #36]	; (80a21bc <BlynkWidgetWrite14+0x38>)
 80a2196:	f7ff fa53 	bl	80a1640 <_Z7printlnPc>
    WriteToDatabase("CONTROL","TERMINAL enabled by Blynk Button");    
 80a219a:	4909      	ldr	r1, [pc, #36]	; (80a21c0 <BlynkWidgetWrite14+0x3c>)
 80a219c:	4809      	ldr	r0, [pc, #36]	; (80a21c4 <BlynkWidgetWrite14+0x40>)
 80a219e:	f7fd ffad 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    termCounter = 3;
 80a21a2:	2203      	movs	r2, #3
 80a21a4:	4b08      	ldr	r3, [pc, #32]	; (80a21c8 <BlynkWidgetWrite14+0x44>)
 80a21a6:	601a      	str	r2, [r3, #0]
    printSlowStatus();
 80a21a8:	f7ff fde8 	bl	80a1d7c <_Z15printSlowStatusv>
}
 80a21ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printStatus();
 80a21b0:	f7ff bcdc 	b.w	80a1b6c <_Z11printStatusv>
}
 80a21b4:	bd08      	pop	{r3, pc}
 80a21b6:	bf00      	nop
 80a21b8:	20000368 	.word	0x20000368
 80a21bc:	080a8360 	.word	0x080a8360
 80a21c0:	080a8374 	.word	0x080a8374
 80a21c4:	080a7b73 	.word	0x080a7b73
 80a21c8:	20000364 	.word	0x20000364

080a21cc <setup>:
{
 80a21cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a21ce:	b087      	sub	sp, #28
  Serial.begin(115200);
 80a21d0:	f002 ff54 	bl	80a507c <_Z16_fetch_usbserialv>
 80a21d4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a21d8:	f002 ff44 	bl	80a5064 <_ZN9USBSerial5beginEl>
  delay(2000); // Allow board to settle
 80a21dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a21e0:	f002 fb1a 	bl	80a4818 <delay>
  setupWifi();
 80a21e4:	f7fe fc86 	bl	80a0af4 <_Z9setupWifiv>
  Time.zone(+2); // Sommerzeit
 80a21e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80a21ec:	f002 fa72 	bl	80a46d4 <_ZN9TimeClass4zoneEf>
  Serial.printlnf(" ");
 80a21f0:	f002 ff44 	bl	80a507c <_Z16_fetch_usbserialv>
 80a21f4:	4962      	ldr	r1, [pc, #392]	; (80a2380 <setup+0x1b4>)
 80a21f6:	f7fd ff5c 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf(" ");
 80a21fa:	f002 ff3f 	bl	80a507c <_Z16_fetch_usbserialv>
 80a21fe:	4960      	ldr	r1, [pc, #384]	; (80a2380 <setup+0x1b4>)
 80a2200:	f7fd ff57 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("----------------------");
 80a2204:	f002 ff3a 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2208:	495e      	ldr	r1, [pc, #376]	; (80a2384 <setup+0x1b8>)
 80a220a:	f7fd ff52 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("      Welcome");
 80a220e:	f002 ff35 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2212:	495d      	ldr	r1, [pc, #372]	; (80a2388 <setup+0x1bc>)
 80a2214:	f7fd ff4d 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  hwID = System.deviceID();
 80a2218:	4c5c      	ldr	r4, [pc, #368]	; (80a238c <setup+0x1c0>)
  Serial.printlnf("----------------------");
 80a221a:	f002 ff2f 	bl	80a507c <_Z16_fetch_usbserialv>
 80a221e:	4959      	ldr	r1, [pc, #356]	; (80a2384 <setup+0x1b8>)
 80a2220:	f7fd ff47 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
        return spark_deviceID();
 80a2224:	a802      	add	r0, sp, #8
 80a2226:	f001 fca5 	bl	80a3b74 <spark_deviceID>
  hwID = System.deviceID();
 80a222a:	a902      	add	r1, sp, #8
 80a222c:	4620      	mov	r0, r4
 80a222e:	f002 f8eb 	bl	80a4408 <_ZN6StringaSEOS_>
 80a2232:	a802      	add	r0, sp, #8
 80a2234:	f002 f854 	bl	80a42e0 <_ZN6StringD1Ev>
  Serial.printlnf(hwID);
 80a2238:	f002 ff20 	bl	80a507c <_Z16_fetch_usbserialv>
 80a223c:	6821      	ldr	r1, [r4, #0]
 80a223e:	f7fd ff38 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  delay(3000);
 80a2242:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a2246:	f002 fae7 	bl	80a4818 <delay>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a224a:	f001 fc8b 	bl	80a3b64 <spark_cloud_flag_connected>
  if (Particle.connected() == true)
 80a224e:	b320      	cbz	r0, 80a229a <setup+0xce>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a2250:	2400      	movs	r4, #0
 80a2252:	2301      	movs	r3, #1
 80a2254:	4622      	mov	r2, r4
 80a2256:	494e      	ldr	r1, [pc, #312]	; (80a2390 <setup+0x1c4>)
 80a2258:	e9cd 4400 	strd	r4, r4, [sp]
 80a225c:	484d      	ldr	r0, [pc, #308]	; (80a2394 <setup+0x1c8>)
 80a225e:	f001 fc99 	bl	80a3b94 <spark_subscribe>
    Particle.publish("particle/device/name");
 80a2262:	494c      	ldr	r1, [pc, #304]	; (80a2394 <setup+0x1c8>)
 80a2264:	a802      	add	r0, sp, #8
 80a2266:	f7fe fb55 	bl	80a0914 <_ZN10CloudClass7publishEPKc.isra.0>
 80a226a:	a803      	add	r0, sp, #12
 80a226c:	f7fd ff2f 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2270:	4623      	mov	r3, r4
 80a2272:	4622      	mov	r2, r4
 80a2274:	4948      	ldr	r1, [pc, #288]	; (80a2398 <setup+0x1cc>)
 80a2276:	e9cd 4400 	strd	r4, r4, [sp]
 80a227a:	4848      	ldr	r0, [pc, #288]	; (80a239c <setup+0x1d0>)
 80a227c:	f001 fc8a 	bl	80a3b94 <spark_subscribe>
 80a2280:	4b47      	ldr	r3, [pc, #284]	; (80a23a0 <setup+0x1d4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a2282:	a802      	add	r0, sp, #8
 80a2284:	781b      	ldrb	r3, [r3, #0]
 80a2286:	4a47      	ldr	r2, [pc, #284]	; (80a23a4 <setup+0x1d8>)
 80a2288:	f88d 3000 	strb.w	r3, [sp]
 80a228c:	4946      	ldr	r1, [pc, #280]	; (80a23a8 <setup+0x1dc>)
 80a228e:	233c      	movs	r3, #60	; 0x3c
 80a2290:	f002 fcc2 	bl	80a4c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a2294:	a803      	add	r0, sp, #12
 80a2296:	f7fd ff1a 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
 80a229a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a229e:	f001 f99d 	bl	80a35dc <_Z10BlynkDelaym>
        this->authkey = auth;
 80a22a2:	4c42      	ldr	r4, [pc, #264]	; (80a23ac <setup+0x1e0>)
 80a22a4:	4b42      	ldr	r3, [pc, #264]	; (80a23b0 <setup+0x1e4>)
        state = CONNECTING;
 80a22a6:	2600      	movs	r6, #0
        this->authkey = auth;
 80a22a8:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a22aa:	f001 f999 	bl	80a35e0 <_Z11BlynkMillisv>
 80a22ae:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a22b2:	3808      	subs	r0, #8
 80a22b4:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80a22b8:	6160      	str	r0, [r4, #20]
        BLYNK_LOG1(BLYNK_F(BLYNK_NEWLINE
 80a22ba:	f7fe fb11 	bl	80a08e0 <_ZL14BLYNK_LOG_TIMEv>
 80a22be:	f002 fedd 	bl	80a507c <_Z16_fetch_usbserialv>
 80a22c2:	493c      	ldr	r1, [pc, #240]	; (80a23b4 <setup+0x1e8>)
 80a22c4:	f002 f923 	bl	80a450e <_ZN5Print7printlnEPKc>
        this->conn.begin(domain, port);
 80a22c8:	6823      	ldr	r3, [r4, #0]
        domain = d;
 80a22ca:	4a3b      	ldr	r2, [pc, #236]	; (80a23b8 <setup+0x1ec>)
        while ((state != CONNECTED) &&
 80a22cc:	f242 3727 	movw	r7, #8999	; 0x2327
 80a22d0:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
 80a22d2:	2250      	movs	r2, #80	; 0x50
 80a22d4:	871a      	strh	r2, [r3, #56]	; 0x38
    void disconnect() { client.stop(); }
 80a22d6:	6820      	ldr	r0, [r4, #0]
 80a22d8:	f001 ff04 	bl	80a40e4 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
 80a22dc:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
 80a22de:	f001 f97f 	bl	80a35e0 <_Z11BlynkMillisv>
 80a22e2:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
 80a22e4:	7f63      	ldrb	r3, [r4, #29]
 80a22e6:	2b01      	cmp	r3, #1
 80a22e8:	d00c      	beq.n	80a2304 <setup+0x138>
               (BlynkMillis() - started < timeout))
 80a22ea:	f001 f979 	bl	80a35e0 <_Z11BlynkMillisv>
 80a22ee:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
 80a22f0:	42b8      	cmp	r0, r7
 80a22f2:	d804      	bhi.n	80a22fe <setup+0x132>
            run();
 80a22f4:	2100      	movs	r1, #0
 80a22f6:	4620      	mov	r0, r4
 80a22f8:	f7ff f818 	bl	80a132c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
 80a22fc:	e7f2      	b.n	80a22e4 <setup+0x118>
        config(auth, domain, port);
        while(this->connect() != true) {}
 80a22fe:	7f63      	ldrb	r3, [r4, #29]
 80a2300:	2b01      	cmp	r3, #1
 80a2302:	d1e8      	bne.n	80a22d6 <setup+0x10a>
  delay(3000);
 80a2304:	f640 30b8 	movw	r0, #3000	; 0xbb8
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a2308:	4c2c      	ldr	r4, [pc, #176]	; (80a23bc <setup+0x1f0>)
 80a230a:	f002 fa85 	bl	80a4818 <delay>
  WriteToDatabase("RESET", "#### SETUP/RESET Version ",SW_VERSION);
 80a230e:	221a      	movs	r2, #26
 80a2310:	492b      	ldr	r1, [pc, #172]	; (80a23c0 <setup+0x1f4>)
 80a2312:	482c      	ldr	r0, [pc, #176]	; (80a23c4 <setup+0x1f8>)
 80a2314:	f7fd ff46 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  hwInit();
 80a2318:	f7fe fc70 	bl	80a0bfc <_Z6hwInitv>
  EEPROM.get(0, control);
 80a231c:	f003 f97e 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a2320:	2214      	movs	r2, #20
 80a2322:	4621      	mov	r1, r4
 80a2324:	2000      	movs	r0, #0
 80a2326:	f001 f9f5 	bl	80a3714 <HAL_EEPROM_Get>
  if ((control.pumpe_count_down < 30) | (control.pumpe_count_down > 240))
 80a232a:	68e3      	ldr	r3, [r4, #12]
 80a232c:	3b1e      	subs	r3, #30
 80a232e:	2bd2      	cmp	r3, #210	; 0xd2
 80a2330:	d908      	bls.n	80a2344 <setup+0x178>
    control.pumpe_count_down = 90;
 80a2332:	235a      	movs	r3, #90	; 0x5a
 80a2334:	60e3      	str	r3, [r4, #12]
    EEPROM.put(0, control);
 80a2336:	f003 f971 	bl	80a561c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a233a:	2214      	movs	r2, #20
 80a233c:	4621      	mov	r1, r4
 80a233e:	2000      	movs	r0, #0
 80a2340:	f001 f9f0 	bl	80a3724 <HAL_EEPROM_Put>
  WriteToDatabase("RESET", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a2344:	68e2      	ldr	r2, [r4, #12]
 80a2346:	4920      	ldr	r1, [pc, #128]	; (80a23c8 <setup+0x1fc>)
 80a2348:	481e      	ldr	r0, [pc, #120]	; (80a23c4 <setup+0x1f8>)
 80a234a:	f7fd ff2b 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  if (control.dontGiessen == 1)
 80a234e:	68a3      	ldr	r3, [r4, #8]
 80a2350:	2b01      	cmp	r3, #1
 80a2352:	d103      	bne.n	80a235c <setup+0x190>
    WriteToDatabase("RESET", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a2354:	491d      	ldr	r1, [pc, #116]	; (80a23cc <setup+0x200>)
 80a2356:	481b      	ldr	r0, [pc, #108]	; (80a23c4 <setup+0x1f8>)
 80a2358:	f7fd fed0 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  printSlowStatus();
 80a235c:	f7ff fd0e 	bl	80a1d7c <_Z15printSlowStatusv>
  help();
 80a2360:	f7ff f988 	bl	80a1674 <_Z4helpv>
  tnow = getTime();
 80a2364:	f7fe fbfc 	bl	80a0b60 <_Z7getTimev>
  fast_counter = 60000;
 80a2368:	f64e 2260 	movw	r2, #60000	; 0xea60
  tnow = getTime();
 80a236c:	4b18      	ldr	r3, [pc, #96]	; (80a23d0 <setup+0x204>)
 80a236e:	6018      	str	r0, [r3, #0]
  fast_counter = 60000;
 80a2370:	4b18      	ldr	r3, [pc, #96]	; (80a23d4 <setup+0x208>)
 80a2372:	601a      	str	r2, [r3, #0]
  termEnabled = 0;
 80a2374:	2200      	movs	r2, #0
 80a2376:	4b18      	ldr	r3, [pc, #96]	; (80a23d8 <setup+0x20c>)
 80a2378:	601a      	str	r2, [r3, #0]
}
 80a237a:	b007      	add	sp, #28
 80a237c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a237e:	bf00      	nop
 80a2380:	080a875e 	.word	0x080a875e
 80a2384:	080a8395 	.word	0x080a8395
 80a2388:	080a83ac 	.word	0x080a83ac
 80a238c:	20000330 	.word	0x20000330
 80a2390:	080a19a1 	.word	0x080a19a1
 80a2394:	080a79dd 	.word	0x080a79dd
 80a2398:	080a1a25 	.word	0x080a1a25
 80a239c:	080a8328 	.word	0x080a8328
 80a23a0:	20000215 	.word	0x20000215
 80a23a4:	20000216 	.word	0x20000216
 80a23a8:	080a8336 	.word	0x080a8336
 80a23ac:	200001a8 	.word	0x200001a8
 80a23b0:	20000000 	.word	0x20000000
 80a23b4:	080a83ba 	.word	0x080a83ba
 80a23b8:	080a844f 	.word	0x080a844f
 80a23bc:	20000310 	.word	0x20000310
 80a23c0:	080a845f 	.word	0x080a845f
 80a23c4:	080a8479 	.word	0x080a8479
 80a23c8:	080a830f 	.word	0x080a830f
 80a23cc:	080a8214 	.word	0x080a8214
 80a23d0:	200003f4 	.word	0x200003f4
 80a23d4:	2000032c 	.word	0x2000032c
 80a23d8:	20000368 	.word	0x20000368

080a23dc <loop>:
{
 80a23dc:	b570      	push	{r4, r5, r6, lr}
  Blynk.run();
 80a23de:	2100      	movs	r1, #0
 80a23e0:	4840      	ldr	r0, [pc, #256]	; (80a24e4 <loop+0x108>)
 80a23e2:	f7fe ffa3 	bl	80a132c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  fast_counter++;
 80a23e6:	4a40      	ldr	r2, [pc, #256]	; (80a24e8 <loop+0x10c>)
  delay(10);
 80a23e8:	200a      	movs	r0, #10
  fast_counter++;
 80a23ea:	6813      	ldr	r3, [r2, #0]
  tnow = getTime();
 80a23ec:	4e3f      	ldr	r6, [pc, #252]	; (80a24ec <loop+0x110>)
  fast_counter++;
 80a23ee:	3301      	adds	r3, #1
 80a23f0:	6013      	str	r3, [r2, #0]
  delay(10);
 80a23f2:	f002 fa11 	bl	80a4818 <delay>
  tnow = getTime();
 80a23f6:	f7fe fbb3 	bl	80a0b60 <_Z7getTimev>
 80a23fa:	6030      	str	r0, [r6, #0]
  utime = Time.now();
 80a23fc:	f002 f9a5 	bl	80a474a <_ZN9TimeClass3nowEv>
  if ((utime % 2) == 0) // every 2 seconds
 80a2400:	f010 0001 	ands.w	r0, r0, #1
 80a2404:	4c3a      	ldr	r4, [pc, #232]	; (80a24f0 <loop+0x114>)
 80a2406:	d11e      	bne.n	80a2446 <loop+0x6a>
    slow_counter++; 
 80a2408:	6823      	ldr	r3, [r4, #0]
 80a240a:	3301      	adds	r3, #1
 80a240c:	6023      	str	r3, [r4, #0]
    BlumenGiessen(0, ts_giessen);    
 80a240e:	4b39      	ldr	r3, [pc, #228]	; (80a24f4 <loop+0x118>)
 80a2410:	6819      	ldr	r1, [r3, #0]
 80a2412:	f000 ffed 	bl	80a33f0 <_Z13BlumenGiessenii>
    CountDown();
 80a2416:	f001 f873 	bl	80a3500 <_Z9CountDownv>
    if (Time.minute() == 10)     // wir schlafen bis zur nächsten Stunde
 80a241a:	f002 f9b3 	bl	80a4784 <_ZN9TimeClass6minuteEv>
 80a241e:	280a      	cmp	r0, #10
 80a2420:	d10e      	bne.n	80a2440 <loop+0x64>
      if ((Time.hour() > 9) | (Time.hour() < 5))
 80a2422:	f002 f9a3 	bl	80a476c <_ZN9TimeClass4hourEv>
 80a2426:	4605      	mov	r5, r0
 80a2428:	f002 f9a0 	bl	80a476c <_ZN9TimeClass4hourEv>
 80a242c:	2d09      	cmp	r5, #9
 80a242e:	dc01      	bgt.n	80a2434 <loop+0x58>
 80a2430:	2804      	cmp	r0, #4
 80a2432:	dc51      	bgt.n	80a24d8 <loop+0xfc>
        sleep(60+getSleepTime(55));
 80a2434:	2037      	movs	r0, #55	; 0x37
 80a2436:	f7fe fba9 	bl	80a0b8c <_Z12getSleepTimei>
 80a243a:	303c      	adds	r0, #60	; 0x3c
        sleep(getSleepTime(55));
 80a243c:	f7ff fd7c 	bl	80a1f38 <_Z5sleepi>
    myDelay(1);
 80a2440:	2001      	movs	r0, #1
 80a2442:	f7ff f80b 	bl	80a145c <_Z7myDelayi>
  if ((slow_counter % 10) == 0) // every 20 seconds
 80a2446:	210a      	movs	r1, #10
 80a2448:	6825      	ldr	r5, [r4, #0]
 80a244a:	fb95 f3f1 	sdiv	r3, r5, r1
 80a244e:	fb01 5513 	mls	r5, r1, r3, r5
 80a2452:	bb0d      	cbnz	r5, 80a2498 <loop+0xbc>
    printStatus();
 80a2454:	f7ff fb8a 	bl	80a1b6c <_Z11printStatusv>
    dontSleepHW = checkDontSleepPin();
 80a2458:	f7fe fc36 	bl	80a0cc8 <_Z17checkDontSleepPinv>
 80a245c:	4b26      	ldr	r3, [pc, #152]	; (80a24f8 <loop+0x11c>)
    if (tnow == (5*60 + 1))
 80a245e:	6832      	ldr	r2, [r6, #0]
    dontSleepHW = checkDontSleepPin();
 80a2460:	6018      	str	r0, [r3, #0]
    if (tnow == (5*60 + 1))
 80a2462:	f240 132d 	movw	r3, #301	; 0x12d
 80a2466:	429a      	cmp	r2, r3
 80a2468:	d107      	bne.n	80a247a <loop+0x9e>
      conrad_rsl_switch_code(RSL4,0);
 80a246a:	4629      	mov	r1, r5
 80a246c:	2004      	movs	r0, #4
 80a246e:	f000 fd01 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
      WriteToDatabase ( "CONTROL", "RSL4 abgeschaltet");      
 80a2472:	4922      	ldr	r1, [pc, #136]	; (80a24fc <loop+0x120>)
 80a2474:	4822      	ldr	r0, [pc, #136]	; (80a2500 <loop+0x124>)
 80a2476:	f7fd fe41 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    if (tnow == (5*60 + 2))
 80a247a:	6833      	ldr	r3, [r6, #0]
 80a247c:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 80a2480:	d107      	bne.n	80a2492 <loop+0xb6>
      conrad_rsl_switch_code(RSL4,1);
 80a2482:	2101      	movs	r1, #1
 80a2484:	2004      	movs	r0, #4
 80a2486:	f000 fcf5 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
      WriteToDatabase ( "CONTROL", "RSL4 eingeschaltet");     
 80a248a:	491e      	ldr	r1, [pc, #120]	; (80a2504 <loop+0x128>)
 80a248c:	481c      	ldr	r0, [pc, #112]	; (80a2500 <loop+0x124>)
 80a248e:	f7fd fe35 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    slow_counter++;
 80a2492:	6823      	ldr	r3, [r4, #0]
 80a2494:	3301      	adds	r3, #1
 80a2496:	6023      	str	r3, [r4, #0]
  if (slow_counter > 300) // once per 10 minutes
 80a2498:	6823      	ldr	r3, [r4, #0]
 80a249a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80a249e:	dd1f      	ble.n	80a24e0 <loop+0x104>
    slow_counter = 0;
 80a24a0:	2500      	movs	r5, #0
 80a24a2:	6025      	str	r5, [r4, #0]
    printSlowStatus();
 80a24a4:	f7ff fc6a 	bl	80a1d7c <_Z15printSlowStatusv>
    if (tnow > (22*60) + 30)
 80a24a8:	f240 5346 	movw	r3, #1350	; 0x546
 80a24ac:	6832      	ldr	r2, [r6, #0]
 80a24ae:	429a      	cmp	r2, r3
      done_giessen = 0; // armed for the next day
 80a24b0:	bfc8      	it	gt
 80a24b2:	4b15      	ldrgt	r3, [pc, #84]	; (80a2508 <loop+0x12c>)
    if (termCounter > 0)
 80a24b4:	4a15      	ldr	r2, [pc, #84]	; (80a250c <loop+0x130>)
      done_giessen = 0; // armed for the next day
 80a24b6:	bfc8      	it	gt
 80a24b8:	601d      	strgt	r5, [r3, #0]
    if (termCounter > 0)
 80a24ba:	6813      	ldr	r3, [r2, #0]
 80a24bc:	2b00      	cmp	r3, #0
 80a24be:	dd0f      	ble.n	80a24e0 <loop+0x104>
      termCounter--;
 80a24c0:	3b01      	subs	r3, #1
 80a24c2:	6013      	str	r3, [r2, #0]
      if (termCounter == 0)
 80a24c4:	b963      	cbnz	r3, 80a24e0 <loop+0x104>
        println("Terminal disabled");      
 80a24c6:	4812      	ldr	r0, [pc, #72]	; (80a2510 <loop+0x134>)
 80a24c8:	f7ff f8ba 	bl	80a1640 <_Z7printlnPc>
} // loop
 80a24cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        WriteToDatabase("CONTROL","TERMINAL disabled by timeout");
 80a24d0:	4910      	ldr	r1, [pc, #64]	; (80a2514 <loop+0x138>)
 80a24d2:	480b      	ldr	r0, [pc, #44]	; (80a2500 <loop+0x124>)
 80a24d4:	f7fd be12 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
        sleep(getSleepTime(55));
 80a24d8:	2037      	movs	r0, #55	; 0x37
 80a24da:	f7fe fb57 	bl	80a0b8c <_Z12getSleepTimei>
 80a24de:	e7ad      	b.n	80a243c <loop+0x60>
} // loop
 80a24e0:	bd70      	pop	{r4, r5, r6, pc}
 80a24e2:	bf00      	nop
 80a24e4:	200001a8 	.word	0x200001a8
 80a24e8:	2000032c 	.word	0x2000032c
 80a24ec:	200003f4 	.word	0x200003f4
 80a24f0:	2000034c 	.word	0x2000034c
 80a24f4:	20000024 	.word	0x20000024
 80a24f8:	20000328 	.word	0x20000328
 80a24fc:	080a847f 	.word	0x080a847f
 80a2500:	080a7b73 	.word	0x080a7b73
 80a2504:	080a8491 	.word	0x080a8491
 80a2508:	20000324 	.word	0x20000324
 80a250c:	20000364 	.word	0x20000364
 80a2510:	080a84a4 	.word	0x080a84a4
 80a2514:	080a84b6 	.word	0x080a84b6

080a2518 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcS6_EEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a2518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a251c:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80a2520:	461e      	mov	r6, r3
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a2522:	ab08      	add	r3, sp, #32
 80a2524:	2400      	movs	r4, #0
 80a2526:	4688      	mov	r8, r1
 80a2528:	9305      	str	r3, [sp, #20]
 80a252a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a252e:	4617      	mov	r7, r2
 80a2530:	4605      	mov	r5, r0
        cmd.add("vw");
 80a2532:	4910      	ldr	r1, [pc, #64]	; (80a2574 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcS6_EEEviDpT_+0x5c>)
 80a2534:	a805      	add	r0, sp, #20
 80a2536:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80a253a:	f7fe fa26 	bl	80a098a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a253e:	4641      	mov	r1, r8
 80a2540:	a805      	add	r0, sp, #20
 80a2542:	f7fe fa3f 	bl	80a09c4 <_ZN10BlynkParam3addEi>
        add(head);
 80a2546:	4639      	mov	r1, r7
 80a2548:	a805      	add	r0, sp, #20
 80a254a:	f7fe fa1e 	bl	80a098a <_ZN10BlynkParam3addEPKc>
        add(last);
 80a254e:	4631      	mov	r1, r6
 80a2550:	a805      	add	r0, sp, #20
 80a2552:	f7fe fa1a 	bl	80a098a <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a2556:	9b06      	ldr	r3, [sp, #24]
 80a2558:	4622      	mov	r2, r4
 80a255a:	3b01      	subs	r3, #1
 80a255c:	9300      	str	r3, [sp, #0]
 80a255e:	2114      	movs	r1, #20
 80a2560:	4628      	mov	r0, r5
 80a2562:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80a2566:	9b05      	ldr	r3, [sp, #20]
 80a2568:	f7fe ff92 	bl	80a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a256c:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 80a2570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2574:	080a7c6f 	.word	0x080a7c6f

080a2578 <BlynkWidgetWrite22>:
{
 80a2578:	b510      	push	{r4, lr}
 80a257a:	460c      	mov	r4, r1
  Blynk.virtualWrite(V22, "\nYou said:", param.asStr());
 80a257c:	680b      	ldr	r3, [r1, #0]
 80a257e:	4805      	ldr	r0, [pc, #20]	; (80a2594 <BlynkWidgetWrite22+0x1c>)
 80a2580:	2116      	movs	r1, #22
 80a2582:	4a05      	ldr	r2, [pc, #20]	; (80a2598 <BlynkWidgetWrite22+0x20>)
 80a2584:	f7ff ffc8 	bl	80a2518 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcS6_EEEviDpT_>
  c = *param.asStr();
 80a2588:	6823      	ldr	r3, [r4, #0]
}
 80a258a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dispatchCommand(c);
 80a258e:	7818      	ldrb	r0, [r3, #0]
 80a2590:	f7fd be6e 	b.w	80a0270 <_Z15dispatchCommandc>
 80a2594:	200001a8 	.word	0x200001a8
 80a2598:	080a84d3 	.word	0x080a84d3

080a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a259e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a25a2:	ab08      	add	r3, sp, #32
 80a25a4:	2400      	movs	r4, #0
 80a25a6:	460f      	mov	r7, r1
 80a25a8:	9305      	str	r3, [sp, #20]
 80a25aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a25ae:	4616      	mov	r6, r2
 80a25b0:	4605      	mov	r5, r0
        cmd.add("vw");
 80a25b2:	490e      	ldr	r1, [pc, #56]	; (80a25ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
 80a25b4:	a805      	add	r0, sp, #20
 80a25b6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80a25ba:	f7fe f9e6 	bl	80a098a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a25be:	4639      	mov	r1, r7
 80a25c0:	a805      	add	r0, sp, #20
 80a25c2:	f7fe f9ff 	bl	80a09c4 <_ZN10BlynkParam3addEi>
        add(last);
 80a25c6:	4631      	mov	r1, r6
 80a25c8:	a805      	add	r0, sp, #20
 80a25ca:	f7fe f9fb 	bl	80a09c4 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a25ce:	9b06      	ldr	r3, [sp, #24]
 80a25d0:	4622      	mov	r2, r4
 80a25d2:	3b01      	subs	r3, #1
 80a25d4:	9300      	str	r3, [sp, #0]
 80a25d6:	2114      	movs	r1, #20
 80a25d8:	4628      	mov	r0, r5
 80a25da:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80a25de:	9b05      	ldr	r3, [sp, #20]
 80a25e0:	f7fe ff56 	bl	80a1490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a25e4:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 80a25e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a25ea:	bf00      	nop
 80a25ec:	080a7c6f 	.word	0x080a7c6f

080a25f0 <BlynkWidgetWrite1>:
{
 80a25f0:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a25f2:	6808      	ldr	r0, [r1, #0]
 80a25f4:	f7fe f971 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a25f8:	2801      	cmp	r0, #1
 80a25fa:	4604      	mov	r4, r0
 80a25fc:	d10b      	bne.n	80a2616 <BlynkWidgetWrite1+0x26>
    println(" rsl 9 ein ");
 80a25fe:	4806      	ldr	r0, [pc, #24]	; (80a2618 <BlynkWidgetWrite1+0x28>)
 80a2600:	f7ff f81e 	bl	80a1640 <_Z7printlnPc>
    conrad_rsl_switch_code(9, EIN);
 80a2604:	4621      	mov	r1, r4
 80a2606:	2009      	movs	r0, #9
 80a2608:	f000 fc34 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V1, 255);
 80a260c:	22ff      	movs	r2, #255	; 0xff
 80a260e:	4621      	mov	r1, r4
 80a2610:	4802      	ldr	r0, [pc, #8]	; (80a261c <BlynkWidgetWrite1+0x2c>)
 80a2612:	f7ff ffc3 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2616:	bd10      	pop	{r4, pc}
 80a2618:	080a84de 	.word	0x080a84de
 80a261c:	200001a8 	.word	0x200001a8

080a2620 <BlynkWidgetWrite2>:
{
 80a2620:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2622:	6808      	ldr	r0, [r1, #0]
 80a2624:	f7fe f959 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2628:	2801      	cmp	r0, #1
 80a262a:	d10b      	bne.n	80a2644 <BlynkWidgetWrite2+0x24>
    println(" rsl 9 aus ");
 80a262c:	4806      	ldr	r0, [pc, #24]	; (80a2648 <BlynkWidgetWrite2+0x28>)
 80a262e:	f7ff f807 	bl	80a1640 <_Z7printlnPc>
    conrad_rsl_switch_code(9, AUS);
 80a2632:	2100      	movs	r1, #0
 80a2634:	2009      	movs	r0, #9
 80a2636:	f000 fc1d 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V2, 255);
 80a263a:	22ff      	movs	r2, #255	; 0xff
 80a263c:	2102      	movs	r1, #2
 80a263e:	4803      	ldr	r0, [pc, #12]	; (80a264c <BlynkWidgetWrite2+0x2c>)
 80a2640:	f7ff ffac 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2644:	bd08      	pop	{r3, pc}
 80a2646:	bf00      	nop
 80a2648:	080a84ea 	.word	0x080a84ea
 80a264c:	200001a8 	.word	0x200001a8

080a2650 <BlynkWidgetWrite3>:
{
 80a2650:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2652:	6808      	ldr	r0, [r1, #0]
 80a2654:	f7fe f941 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2658:	2801      	cmp	r0, #1
 80a265a:	4604      	mov	r4, r0
 80a265c:	d10b      	bne.n	80a2676 <BlynkWidgetWrite3+0x26>
    println(" rsl 8 ein ");
 80a265e:	4806      	ldr	r0, [pc, #24]	; (80a2678 <BlynkWidgetWrite3+0x28>)
 80a2660:	f7fe ffee 	bl	80a1640 <_Z7printlnPc>
    conrad_rsl_switch_code(8, EIN);
 80a2664:	4621      	mov	r1, r4
 80a2666:	2008      	movs	r0, #8
 80a2668:	f000 fc04 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 255);
 80a266c:	22ff      	movs	r2, #255	; 0xff
 80a266e:	2114      	movs	r1, #20
 80a2670:	4802      	ldr	r0, [pc, #8]	; (80a267c <BlynkWidgetWrite3+0x2c>)
 80a2672:	f7ff ff93 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2676:	bd10      	pop	{r4, pc}
 80a2678:	080a84f6 	.word	0x080a84f6
 80a267c:	200001a8 	.word	0x200001a8

080a2680 <BlynkWidgetWrite4>:
{
 80a2680:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2682:	6808      	ldr	r0, [r1, #0]
 80a2684:	f7fe f929 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2688:	2801      	cmp	r0, #1
 80a268a:	d10d      	bne.n	80a26a8 <BlynkWidgetWrite4+0x28>
    timeStamp();
 80a268c:	f7fe fb32 	bl	80a0cf4 <_Z9timeStampv>
    println(" rsl 8 aus ");
 80a2690:	4806      	ldr	r0, [pc, #24]	; (80a26ac <BlynkWidgetWrite4+0x2c>)
 80a2692:	f7fe ffd5 	bl	80a1640 <_Z7printlnPc>
    conrad_rsl_switch_code(8, AUS);
 80a2696:	2100      	movs	r1, #0
 80a2698:	2008      	movs	r0, #8
 80a269a:	f000 fbeb 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 0);
 80a269e:	2200      	movs	r2, #0
 80a26a0:	2114      	movs	r1, #20
 80a26a2:	4803      	ldr	r0, [pc, #12]	; (80a26b0 <BlynkWidgetWrite4+0x30>)
 80a26a4:	f7ff ff7a 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a26a8:	bd08      	pop	{r3, pc}
 80a26aa:	bf00      	nop
 80a26ac:	080a8502 	.word	0x080a8502
 80a26b0:	200001a8 	.word	0x200001a8

080a26b4 <BlynkWidgetWrite5>:
{
 80a26b4:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a26b6:	6808      	ldr	r0, [r1, #0]
 80a26b8:	f7fe f90f 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a26bc:	2801      	cmp	r0, #1
 80a26be:	4604      	mov	r4, r0
 80a26c0:	d10b      	bne.n	80a26da <BlynkWidgetWrite5+0x26>
    println(" rsl 1 ein ");
 80a26c2:	4806      	ldr	r0, [pc, #24]	; (80a26dc <BlynkWidgetWrite5+0x28>)
 80a26c4:	f7fe ffbc 	bl	80a1640 <_Z7printlnPc>
    conrad_rsl_switch_code(RSL1, EIN);
 80a26c8:	4621      	mov	r1, r4
 80a26ca:	4620      	mov	r0, r4
 80a26cc:	f000 fbd2 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 255);
 80a26d0:	22ff      	movs	r2, #255	; 0xff
 80a26d2:	2114      	movs	r1, #20
 80a26d4:	4802      	ldr	r0, [pc, #8]	; (80a26e0 <BlynkWidgetWrite5+0x2c>)
 80a26d6:	f7ff ff61 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a26da:	bd10      	pop	{r4, pc}
 80a26dc:	080a850e 	.word	0x080a850e
 80a26e0:	200001a8 	.word	0x200001a8

080a26e4 <BlynkWidgetWrite6>:
{
 80a26e4:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a26e6:	6808      	ldr	r0, [r1, #0]
 80a26e8:	f7fe f8f7 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a26ec:	2801      	cmp	r0, #1
 80a26ee:	4604      	mov	r4, r0
 80a26f0:	d10b      	bne.n	80a270a <BlynkWidgetWrite6+0x26>
    println(" rsl 1 aus ");
 80a26f2:	4806      	ldr	r0, [pc, #24]	; (80a270c <BlynkWidgetWrite6+0x28>)
 80a26f4:	f7fe ffa4 	bl	80a1640 <_Z7printlnPc>
    conrad_rsl_switch_code(RSL1, AUS);
 80a26f8:	2100      	movs	r1, #0
 80a26fa:	4620      	mov	r0, r4
 80a26fc:	f000 fbba 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 0);
 80a2700:	2200      	movs	r2, #0
 80a2702:	2114      	movs	r1, #20
 80a2704:	4802      	ldr	r0, [pc, #8]	; (80a2710 <BlynkWidgetWrite6+0x2c>)
 80a2706:	f7ff ff49 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a270a:	bd10      	pop	{r4, pc}
 80a270c:	080a851a 	.word	0x080a851a
 80a2710:	200001a8 	.word	0x200001a8

080a2714 <BlynkWidgetWrite7>:
{
 80a2714:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2716:	6808      	ldr	r0, [r1, #0]
 80a2718:	f7fe f8df 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a271c:	2801      	cmp	r0, #1
 80a271e:	d10b      	bne.n	80a2738 <BlynkWidgetWrite7+0x24>
    done_giessen = 0;
 80a2720:	2200      	movs	r2, #0
 80a2722:	4b06      	ldr	r3, [pc, #24]	; (80a273c <BlynkWidgetWrite7+0x28>)
 80a2724:	601a      	str	r2, [r3, #0]
    BlumenGiessen(1, ts_giessen);
 80a2726:	4b06      	ldr	r3, [pc, #24]	; (80a2740 <BlynkWidgetWrite7+0x2c>)
 80a2728:	6819      	ldr	r1, [r3, #0]
 80a272a:	f000 fe61 	bl	80a33f0 <_Z13BlumenGiessenii>
    Blynk.virtualWrite(V20, 255);
 80a272e:	22ff      	movs	r2, #255	; 0xff
 80a2730:	2114      	movs	r1, #20
 80a2732:	4804      	ldr	r0, [pc, #16]	; (80a2744 <BlynkWidgetWrite7+0x30>)
 80a2734:	f7ff ff32 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2738:	bd08      	pop	{r3, pc}
 80a273a:	bf00      	nop
 80a273c:	20000324 	.word	0x20000324
 80a2740:	20000024 	.word	0x20000024
 80a2744:	200001a8 	.word	0x200001a8

080a2748 <BlynkWidgetWrite8>:
{
 80a2748:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a274a:	6808      	ldr	r0, [r1, #0]
 80a274c:	f7fe f8c5 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2750:	2801      	cmp	r0, #1
 80a2752:	d110      	bne.n	80a2776 <BlynkWidgetWrite8+0x2e>
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a2754:	2100      	movs	r1, #0
 80a2756:	4608      	mov	r0, r1
 80a2758:	f000 fe28 	bl	80a33ac <_Z17switch_pumpe_funkii>
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a275c:	2100      	movs	r1, #0
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a275e:	4b06      	ldr	r3, [pc, #24]	; (80a2778 <BlynkWidgetWrite8+0x30>)
 80a2760:	6018      	str	r0, [r3, #0]
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a2762:	4608      	mov	r0, r1
 80a2764:	f000 fcbe 	bl	80a30e4 <_Z17switch_pumpe_mainii>
 80a2768:	4b04      	ldr	r3, [pc, #16]	; (80a277c <BlynkWidgetWrite8+0x34>)
    Blynk.virtualWrite(V20, 0);
 80a276a:	2200      	movs	r2, #0
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a276c:	6018      	str	r0, [r3, #0]
    Blynk.virtualWrite(V20, 0);
 80a276e:	2114      	movs	r1, #20
 80a2770:	4803      	ldr	r0, [pc, #12]	; (80a2780 <BlynkWidgetWrite8+0x38>)
 80a2772:	f7ff ff13 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2776:	bd08      	pop	{r3, pc}
 80a2778:	20000350 	.word	0x20000350
 80a277c:	20000354 	.word	0x20000354
 80a2780:	200001a8 	.word	0x200001a8

080a2784 <BlynkWidgetWrite9>:
{
 80a2784:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2786:	6808      	ldr	r0, [r1, #0]
 80a2788:	f7fe f8a7 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a278c:	2801      	cmp	r0, #1
 80a278e:	4604      	mov	r4, r0
 80a2790:	d10b      	bne.n	80a27aa <BlynkWidgetWrite9+0x26>
    println(" rsl 3 ein ");
 80a2792:	4806      	ldr	r0, [pc, #24]	; (80a27ac <BlynkWidgetWrite9+0x28>)
 80a2794:	f7fe ff54 	bl	80a1640 <_Z7printlnPc>
    conrad_rsl_switch_code(RSL3, EIN);
 80a2798:	4621      	mov	r1, r4
 80a279a:	2003      	movs	r0, #3
 80a279c:	f000 fb6a 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 255);
 80a27a0:	22ff      	movs	r2, #255	; 0xff
 80a27a2:	2114      	movs	r1, #20
 80a27a4:	4802      	ldr	r0, [pc, #8]	; (80a27b0 <BlynkWidgetWrite9+0x2c>)
 80a27a6:	f7ff fef9 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a27aa:	bd10      	pop	{r4, pc}
 80a27ac:	080a8526 	.word	0x080a8526
 80a27b0:	200001a8 	.word	0x200001a8

080a27b4 <BlynkWidgetWrite10>:
{
 80a27b4:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a27b6:	6808      	ldr	r0, [r1, #0]
 80a27b8:	f7fe f88f 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a27bc:	2801      	cmp	r0, #1
 80a27be:	d10b      	bne.n	80a27d8 <BlynkWidgetWrite10+0x24>
    println(" rsl 3 aus ");
 80a27c0:	4806      	ldr	r0, [pc, #24]	; (80a27dc <BlynkWidgetWrite10+0x28>)
 80a27c2:	f7fe ff3d 	bl	80a1640 <_Z7printlnPc>
    conrad_rsl_switch_code(RSL3, AUS);
 80a27c6:	2100      	movs	r1, #0
 80a27c8:	2003      	movs	r0, #3
 80a27ca:	f000 fb53 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 0);
 80a27ce:	2200      	movs	r2, #0
 80a27d0:	2114      	movs	r1, #20
 80a27d2:	4803      	ldr	r0, [pc, #12]	; (80a27e0 <BlynkWidgetWrite10+0x2c>)
 80a27d4:	f7ff fee2 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a27d8:	bd08      	pop	{r3, pc}
 80a27da:	bf00      	nop
 80a27dc:	080a8532 	.word	0x080a8532
 80a27e0:	200001a8 	.word	0x200001a8

080a27e4 <BlynkWidgetWrite11>:
{
 80a27e4:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a27e6:	6808      	ldr	r0, [r1, #0]
 80a27e8:	f7fe f877 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a27ec:	2801      	cmp	r0, #1
 80a27ee:	4604      	mov	r4, r0
 80a27f0:	d113      	bne.n	80a281a <BlynkWidgetWrite11+0x36>
    println(" weihnachten ein  ");
 80a27f2:	480a      	ldr	r0, [pc, #40]	; (80a281c <BlynkWidgetWrite11+0x38>)
 80a27f4:	f7fe ff24 	bl	80a1640 <_Z7printlnPc>
    elro_switch(1, EIN);
 80a27f8:	4621      	mov	r1, r4
 80a27fa:	4620      	mov	r0, r4
 80a27fc:	f000 fbdc 	bl	80a2fb8 <_Z11elro_switchii>
    elro_switch(2, EIN);
 80a2800:	4621      	mov	r1, r4
 80a2802:	2002      	movs	r0, #2
 80a2804:	f000 fbd8 	bl	80a2fb8 <_Z11elro_switchii>
    elro_switch(3, EIN);
 80a2808:	4621      	mov	r1, r4
 80a280a:	2003      	movs	r0, #3
 80a280c:	f000 fbd4 	bl	80a2fb8 <_Z11elro_switchii>
    Blynk.virtualWrite(V20, 255);
 80a2810:	22ff      	movs	r2, #255	; 0xff
 80a2812:	2114      	movs	r1, #20
 80a2814:	4802      	ldr	r0, [pc, #8]	; (80a2820 <BlynkWidgetWrite11+0x3c>)
 80a2816:	f7ff fec1 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a281a:	bd10      	pop	{r4, pc}
 80a281c:	080a853e 	.word	0x080a853e
 80a2820:	200001a8 	.word	0x200001a8

080a2824 <BlynkWidgetWrite12>:
{
 80a2824:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2826:	6808      	ldr	r0, [r1, #0]
 80a2828:	f7fe f857 	bl	80a08da <_ZNK10BlynkParam5asIntEv.isra.0>
 80a282c:	2801      	cmp	r0, #1
 80a282e:	4604      	mov	r4, r0
 80a2830:	d113      	bne.n	80a285a <BlynkWidgetWrite12+0x36>
    println(" weihnachten aus  ");
 80a2832:	480a      	ldr	r0, [pc, #40]	; (80a285c <BlynkWidgetWrite12+0x38>)
 80a2834:	f7fe ff04 	bl	80a1640 <_Z7printlnPc>
    elro_switch(1, AUS);
 80a2838:	2100      	movs	r1, #0
 80a283a:	4620      	mov	r0, r4
 80a283c:	f000 fbbc 	bl	80a2fb8 <_Z11elro_switchii>
    elro_switch(2, AUS);
 80a2840:	2100      	movs	r1, #0
 80a2842:	2002      	movs	r0, #2
 80a2844:	f000 fbb8 	bl	80a2fb8 <_Z11elro_switchii>
    elro_switch(3, AUS);
 80a2848:	2100      	movs	r1, #0
 80a284a:	2003      	movs	r0, #3
 80a284c:	f000 fbb4 	bl	80a2fb8 <_Z11elro_switchii>
    Blynk.virtualWrite(V20, 0);
 80a2850:	2200      	movs	r2, #0
 80a2852:	2114      	movs	r1, #20
 80a2854:	4802      	ldr	r0, [pc, #8]	; (80a2860 <BlynkWidgetWrite12+0x3c>)
 80a2856:	f7ff fea1 	bl	80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a285a:	bd10      	pop	{r4, pc}
 80a285c:	080a8551 	.word	0x080a8551
 80a2860:	200001a8 	.word	0x200001a8

080a2864 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz>:
}
 80a2864:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
 80a2866:	2400      	movs	r4, #0
 80a2868:	2601      	movs	r6, #1
 80a286a:	4b19      	ldr	r3, [pc, #100]	; (80a28d0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x6c>)
        : domain(NULL), port(0)
 80a286c:	4d19      	ldr	r5, [pc, #100]	; (80a28d4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x70>)
 80a286e:	601c      	str	r4, [r3, #0]
 80a2870:	4b19      	ldr	r3, [pc, #100]	; (80a28d8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x74>)
 80a2872:	4628      	mov	r0, r5
 80a2874:	701c      	strb	r4, [r3, #0]
 80a2876:	4b19      	ldr	r3, [pc, #100]	; (80a28dc <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x78>)
 80a2878:	701e      	strb	r6, [r3, #0]
 80a287a:	f001 fce3 	bl	80a4244 <_ZN9TCPClientC1Ev>
 80a287e:	f105 001c 	add.w	r0, r5, #28
 80a2882:	f002 fb5b 	bl	80a4f3c <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
 80a2886:	4b16      	ldr	r3, [pc, #88]	; (80a28e0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x7c>)
    SleepResult() {}
 80a2888:	4a16      	ldr	r2, [pc, #88]	; (80a28e4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x80>)
 80a288a:	e9c3 5400 	strd	r5, r4, [r3]
 80a288e:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80a2892:	e9c3 4404 	strd	r4, r4, [r3, #16]
 80a2896:	619c      	str	r4, [r3, #24]
 80a2898:	839c      	strh	r4, [r3, #28]
              error_(SYSTEM_ERROR_NONE) {
 80a289a:	4b13      	ldr	r3, [pc, #76]	; (80a28e8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x84>)
        set_system_mode(mode);
 80a289c:	2003      	movs	r0, #3
    SleepResult() {}
 80a289e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 80a28a0:	e9c3 4400 	strd	r4, r4, [r3]
 80a28a4:	636c      	str	r4, [r5, #52]	; 0x34
 80a28a6:	872c      	strh	r4, [r5, #56]	; 0x38
        set_system_mode(mode);
 80a28a8:	f001 f886 	bl	80a39b8 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 80a28ac:	4621      	mov	r1, r4
 80a28ae:	4630      	mov	r0, r6
 80a28b0:	f001 f892 	bl	80a39d8 <system_thread_set_state>
String hwID;
 80a28b4:	490d      	ldr	r1, [pc, #52]	; (80a28ec <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x88>)
 80a28b6:	480e      	ldr	r0, [pc, #56]	; (80a28f0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x8c>)
 80a28b8:	f001 fd5c 	bl	80a4374 <_ZN6StringC1EPK19__FlashStringHelper>
#include <Blynk/BlynkApi.h>

class BlynkWidgetBase
{
public:
    BlynkWidgetBase(uint8_t vPin) : mPin(vPin) {}
 80a28bc:	2216      	movs	r2, #22
 80a28be:	4b0d      	ldr	r3, [pc, #52]	; (80a28f4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x90>)
 80a28c0:	721a      	strb	r2, [r3, #8]
        , mOutQty(0)
 80a28c2:	4a0d      	ldr	r2, [pc, #52]	; (80a28f8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x94>)
    Print() : write_error(0) {}
 80a28c4:	605c      	str	r4, [r3, #4]
 80a28c6:	601a      	str	r2, [r3, #0]
 80a28c8:	f883 4049 	strb.w	r4, [r3, #73]	; 0x49
}
 80a28cc:	bd70      	pop	{r4, r5, r6, pc}
 80a28ce:	bf00      	nop
 80a28d0:	20000210 	.word	0x20000210
 80a28d4:	200001d4 	.word	0x200001d4
 80a28d8:	20000214 	.word	0x20000214
 80a28dc:	20000215 	.word	0x20000215
 80a28e0:	200001a8 	.word	0x200001a8
 80a28e4:	ffff0000 	.word	0xffff0000
 80a28e8:	200001c8 	.word	0x200001c8
 80a28ec:	080a844e 	.word	0x080a844e
 80a28f0:	20000330 	.word	0x20000330
 80a28f4:	2000036c 	.word	0x2000036c
 80a28f8:	080a856c 	.word	0x080a856c

080a28fc <digitalWriteFast>:
#endif

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
 80a28fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a28fe:	4d27      	ldr	r5, [pc, #156]	; (80a299c <digitalWriteFast+0xa0>)
 80a2900:	4604      	mov	r4, r0
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a2902:	782b      	ldrb	r3, [r5, #0]
 80a2904:	4e26      	ldr	r6, [pc, #152]	; (80a29a0 <digitalWriteFast+0xa4>)
 80a2906:	f3bf 8f5b 	dmb	ish
    if (value)
 80a290a:	b319      	cbz	r1, 80a2954 <digitalWriteFast+0x58>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a290c:	07d8      	lsls	r0, r3, #31
 80a290e:	d409      	bmi.n	80a2924 <digitalWriteFast+0x28>
 80a2910:	4628      	mov	r0, r5
 80a2912:	f7fd fbc6 	bl	80a00a2 <__cxa_guard_acquire>
 80a2916:	b128      	cbz	r0, 80a2924 <digitalWriteFast+0x28>
 80a2918:	f000 fe7c 	bl	80a3614 <HAL_Pin_Map>
 80a291c:	6030      	str	r0, [r6, #0]
 80a291e:	4628      	mov	r0, r5
 80a2920:	f7fd fbc4 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a2924:	201c      	movs	r0, #28
 80a2926:	4344      	muls	r4, r0
 80a2928:	6833      	ldr	r3, [r6, #0]
 80a292a:	4423      	add	r3, r4
 80a292c:	889f      	ldrh	r7, [r3, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a292e:	782b      	ldrb	r3, [r5, #0]
 80a2930:	f3bf 8f5b 	dmb	ish
 80a2934:	07d9      	lsls	r1, r3, #31
 80a2936:	d409      	bmi.n	80a294c <digitalWriteFast+0x50>
 80a2938:	4818      	ldr	r0, [pc, #96]	; (80a299c <digitalWriteFast+0xa0>)
 80a293a:	f7fd fbb2 	bl	80a00a2 <__cxa_guard_acquire>
 80a293e:	b128      	cbz	r0, 80a294c <digitalWriteFast+0x50>
 80a2940:	f000 fe68 	bl	80a3614 <HAL_Pin_Map>
 80a2944:	6030      	str	r0, [r6, #0]
 80a2946:	4815      	ldr	r0, [pc, #84]	; (80a299c <digitalWriteFast+0xa0>)
 80a2948:	f7fd fbb0 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a294c:	6833      	ldr	r3, [r6, #0]
 80a294e:	591b      	ldr	r3, [r3, r4]
 80a2950:	831f      	strh	r7, [r3, #24]
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
 80a2952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a2954:	07da      	lsls	r2, r3, #31
 80a2956:	d409      	bmi.n	80a296c <digitalWriteFast+0x70>
 80a2958:	4628      	mov	r0, r5
 80a295a:	f7fd fba2 	bl	80a00a2 <__cxa_guard_acquire>
 80a295e:	b128      	cbz	r0, 80a296c <digitalWriteFast+0x70>
 80a2960:	f000 fe58 	bl	80a3614 <HAL_Pin_Map>
 80a2964:	6030      	str	r0, [r6, #0]
 80a2966:	4628      	mov	r0, r5
 80a2968:	f7fd fba0 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a296c:	201c      	movs	r0, #28
 80a296e:	4344      	muls	r4, r0
 80a2970:	6833      	ldr	r3, [r6, #0]
 80a2972:	4423      	add	r3, r4
 80a2974:	889f      	ldrh	r7, [r3, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a2976:	782b      	ldrb	r3, [r5, #0]
 80a2978:	f3bf 8f5b 	dmb	ish
 80a297c:	07db      	lsls	r3, r3, #31
 80a297e:	d409      	bmi.n	80a2994 <digitalWriteFast+0x98>
 80a2980:	4806      	ldr	r0, [pc, #24]	; (80a299c <digitalWriteFast+0xa0>)
 80a2982:	f7fd fb8e 	bl	80a00a2 <__cxa_guard_acquire>
 80a2986:	b128      	cbz	r0, 80a2994 <digitalWriteFast+0x98>
 80a2988:	f000 fe44 	bl	80a3614 <HAL_Pin_Map>
 80a298c:	6030      	str	r0, [r6, #0]
 80a298e:	4803      	ldr	r0, [pc, #12]	; (80a299c <digitalWriteFast+0xa0>)
 80a2990:	f7fd fb8c 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a2994:	6833      	ldr	r3, [r6, #0]
 80a2996:	591b      	ldr	r3, [r3, r4]
 80a2998:	835f      	strh	r7, [r3, #26]
}
 80a299a:	e7da      	b.n	80a2952 <digitalWriteFast+0x56>
 80a299c:	20000400 	.word	0x20000400
 80a29a0:	20000404 	.word	0x20000404

080a29a4 <_Z17ultra_sonic_setupv>:


#include "05_ultrasonic.h"

 void ultra_sonic_setup()
 {
 80a29a4:	b508      	push	{r3, lr}
   	// Initialize pins for sensor
   	pinMode(trigPin, OUTPUT);
 80a29a6:	2101      	movs	r1, #1
 80a29a8:	2003      	movs	r0, #3
 80a29aa:	f002 fd7b 	bl	80a54a4 <pinMode>
   	digitalWriteFast(trigPin, LOW);
 80a29ae:	2003      	movs	r0, #3
 80a29b0:	2100      	movs	r1, #0
 80a29b2:	f7ff ffa3 	bl	80a28fc <digitalWriteFast>
   	delay(50);
 }
 80a29b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	delay(50);
 80a29ba:	2032      	movs	r0, #50	; 0x32
 80a29bc:	f001 bf2c 	b.w	80a4818 <delay>

080a29c0 <_Z16ultra_sonic_pingv>:


 uint32_t ultra_sonic_ping()
 {
 80a29c0:	b508      	push	{r3, lr}
   	uint32_t duration;
   	pinMode(echoPin, INPUT);
 80a29c2:	2100      	movs	r1, #0
 80a29c4:	2004      	movs	r0, #4
 80a29c6:	f002 fd6d 	bl	80a54a4 <pinMode>
   	pinMode(trigPin, OUTPUT);
 80a29ca:	2101      	movs	r1, #1
 80a29cc:	2003      	movs	r0, #3
 80a29ce:	f002 fd69 	bl	80a54a4 <pinMode>

   	// The sensor is triggered by a HIGH pulse of 10 or more microseconds.
   	digitalWriteFast(trigPin, HIGH);
 80a29d2:	2101      	movs	r1, #1
 80a29d4:	2003      	movs	r0, #3
 80a29d6:	f7ff ff91 	bl	80a28fc <digitalWriteFast>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a29da:	200a      	movs	r0, #10
 80a29dc:	f000 fe82 	bl	80a36e4 <HAL_Delay_Microseconds>
   	delayMicroseconds(10);
   	digitalWriteFast(trigPin, LOW);
 80a29e0:	2100      	movs	r1, #0
 80a29e2:	2003      	movs	r0, #3
 80a29e4:	f7ff ff8a 	bl	80a28fc <digitalWriteFast>

   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin

   	return duration;
 }
 80a29e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin
 80a29ec:	2101      	movs	r1, #1
 80a29ee:	2004      	movs	r0, #4
 80a29f0:	f002 bdd2 	b.w	80a5598 <pulseIn>

080a29f4 <_Z6uMillim>:
uint32_t uMilli(uint32_t microseconds)
{
     // The speed of sound is 340 m/s or 29 microseconds per centimeter.
     // The ping travels out and back, so to find the distance of the
     // object we take half of the distance travelled.
     return ( 10 * microseconds / 29 / 2);
 80a29f4:	230a      	movs	r3, #10
 80a29f6:	4358      	muls	r0, r3
}
 80a29f8:	233a      	movs	r3, #58	; 0x3a
 80a29fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80a29fe:	4770      	bx	lr

080a2a00 <_ZN7OneWire16pinModeFastInputEv.isra.0>:
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a2a00:	2100      	movs	r1, #0
 80a2a02:	f000 be17 	b.w	80a3634 <HAL_Pin_Mode>

080a2a06 <_ZN7OneWire17pinModeFastOutputEv.isra.0>:
      HAL_Pin_Mode(_pin, OUTPUT);
 80a2a06:	2101      	movs	r1, #1
 80a2a08:	f000 be14 	b.w	80a3634 <HAL_Pin_Mode>

080a2a0c <_ZN7OneWire11write_bytesEPKhtb.part.0>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
 80a2a0c:	b510      	push	{r4, lr}
 80a2a0e:	4604      	mov	r4, r0
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
        noInterrupts();
 80a2a10:	f002 fb84 	bl	80a511c <_Z12noInterruptsv>
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a2a14:	221c      	movs	r2, #28
 80a2a16:	8823      	ldrh	r3, [r4, #0]
 80a2a18:	4353      	muls	r3, r2
 80a2a1a:	6862      	ldr	r2, [r4, #4]
 80a2a1c:	18d1      	adds	r1, r2, r3
 80a2a1e:	58d3      	ldr	r3, [r2, r3]
 80a2a20:	888a      	ldrh	r2, [r1, #4]
 80a2a22:	831a      	strh	r2, [r3, #24]

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True
 80a2a24:	8820      	ldrh	r0, [r4, #0]
 80a2a26:	f7ff ffee 	bl	80a2a06 <_ZN7OneWire17pinModeFastOutputEv.isra.0>

        interrupts();
    }
}
 80a2a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        interrupts();
 80a2a2e:	f002 bb77 	b.w	80a5120 <_Z10interruptsv>

080a2a32 <_ZN7OneWire19digitalWriteFastLowEv>:
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a2a32:	221c      	movs	r2, #28
 80a2a34:	8803      	ldrh	r3, [r0, #0]
 80a2a36:	4353      	muls	r3, r2
 80a2a38:	6842      	ldr	r2, [r0, #4]
 80a2a3a:	18d1      	adds	r1, r2, r3
 80a2a3c:	58d3      	ldr	r3, [r2, r3]
 80a2a3e:	888a      	ldrh	r2, [r1, #4]
 80a2a40:	835a      	strh	r2, [r3, #26]
    }
 80a2a42:	4770      	bx	lr

080a2a44 <_ZN7OneWireC1Et>:
OneWire::OneWire(uint16_t pin)
 80a2a44:	b538      	push	{r3, r4, r5, lr}
 80a2a46:	4604      	mov	r4, r0
 80a2a48:	460d      	mov	r5, r1
 80a2a4a:	f000 fde3 	bl	80a3614 <HAL_Pin_Map>
    pinMode(pin, INPUT);
 80a2a4e:	2100      	movs	r1, #0
OneWire::OneWire(uint16_t pin)
 80a2a50:	6060      	str	r0, [r4, #4]
    pinMode(pin, INPUT);
 80a2a52:	4628      	mov	r0, r5
 80a2a54:	f002 fd26 	bl	80a54a4 <pinMode>
}
 80a2a58:	4620      	mov	r0, r4
    _pin = pin;
 80a2a5a:	8025      	strh	r5, [r4, #0]
}
 80a2a5c:	bd38      	pop	{r3, r4, r5, pc}

080a2a5e <_ZN7OneWire5resetEv>:
{
 80a2a5e:	b538      	push	{r3, r4, r5, lr}
 80a2a60:	4605      	mov	r5, r0
    noInterrupts();
 80a2a62:	f002 fb5b 	bl	80a511c <_Z12noInterruptsv>
    pinModeFastInput();
 80a2a66:	8828      	ldrh	r0, [r5, #0]
 80a2a68:	f7ff ffca 	bl	80a2a00 <_ZN7OneWire16pinModeFastInputEv.isra.0>
    interrupts();
 80a2a6c:	247d      	movs	r4, #125	; 0x7d
 80a2a6e:	f002 fb57 	bl	80a5120 <_Z10interruptsv>
        if (--retries == 0) return 0;
 80a2a72:	3c01      	subs	r4, #1
 80a2a74:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a2a78:	d02b      	beq.n	80a2ad2 <_ZN7OneWire5resetEv+0x74>
 80a2a7a:	2002      	movs	r0, #2
 80a2a7c:	f000 fe32 	bl	80a36e4 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a2a80:	8828      	ldrh	r0, [r5, #0]
 80a2a82:	f000 fdef 	bl	80a3664 <HAL_GPIO_Read>
    } while ( !digitalReadFast());
 80a2a86:	b2c0      	uxtb	r0, r0
 80a2a88:	2800      	cmp	r0, #0
 80a2a8a:	d0f2      	beq.n	80a2a72 <_ZN7OneWire5resetEv+0x14>
    noInterrupts();
 80a2a8c:	f002 fb46 	bl	80a511c <_Z12noInterruptsv>
    digitalWriteFastLow();
 80a2a90:	4628      	mov	r0, r5
 80a2a92:	f7ff ffce 	bl	80a2a32 <_ZN7OneWire19digitalWriteFastLowEv>
    pinModeFastOutput();   // drive output low
 80a2a96:	8828      	ldrh	r0, [r5, #0]
 80a2a98:	f7ff ffb5 	bl	80a2a06 <_ZN7OneWire17pinModeFastOutputEv.isra.0>
    interrupts();
 80a2a9c:	f002 fb40 	bl	80a5120 <_Z10interruptsv>
 80a2aa0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a2aa4:	f000 fe1e 	bl	80a36e4 <HAL_Delay_Microseconds>
    noInterrupts();
 80a2aa8:	f002 fb38 	bl	80a511c <_Z12noInterruptsv>
    pinModeFastInput();    // allow it to float
 80a2aac:	8828      	ldrh	r0, [r5, #0]
 80a2aae:	f7ff ffa7 	bl	80a2a00 <_ZN7OneWire16pinModeFastInputEv.isra.0>
 80a2ab2:	2046      	movs	r0, #70	; 0x46
 80a2ab4:	f000 fe16 	bl	80a36e4 <HAL_Delay_Microseconds>
 80a2ab8:	8828      	ldrh	r0, [r5, #0]
 80a2aba:	f000 fdd3 	bl	80a3664 <HAL_GPIO_Read>
    r =! digitalReadFast();
 80a2abe:	b2c4      	uxtb	r4, r0
 80a2ac0:	fab4 f484 	clz	r4, r4
    interrupts();
 80a2ac4:	f002 fb2c 	bl	80a5120 <_Z10interruptsv>
 80a2ac8:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    r =! digitalReadFast();
 80a2acc:	0964      	lsrs	r4, r4, #5
 80a2ace:	f000 fe09 	bl	80a36e4 <HAL_Delay_Microseconds>
}
 80a2ad2:	4620      	mov	r0, r4
 80a2ad4:	bd38      	pop	{r3, r4, r5, pc}

080a2ad6 <_ZN7OneWire9write_bitEh>:
    if (v & 1) {
 80a2ad6:	07cb      	lsls	r3, r1, #31
{
 80a2ad8:	b510      	push	{r4, lr}
 80a2ada:	4604      	mov	r4, r0
    if (v & 1) {
 80a2adc:	d514      	bpl.n	80a2b08 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 80a2ade:	f002 fb1d 	bl	80a511c <_Z12noInterruptsv>
        digitalWriteFastLow();
 80a2ae2:	4620      	mov	r0, r4
 80a2ae4:	f7ff ffa5 	bl	80a2a32 <_ZN7OneWire19digitalWriteFastLowEv>
        pinModeFastOutput();   // drive output low
 80a2ae8:	8820      	ldrh	r0, [r4, #0]
 80a2aea:	f7ff ff8c 	bl	80a2a06 <_ZN7OneWire17pinModeFastOutputEv.isra.0>
 80a2aee:	200a      	movs	r0, #10
 80a2af0:	f000 fdf8 	bl	80a36e4 <HAL_Delay_Microseconds>
        pinModeFastInput();    // float high
 80a2af4:	8820      	ldrh	r0, [r4, #0]
 80a2af6:	f7ff ff83 	bl	80a2a00 <_ZN7OneWire16pinModeFastInputEv.isra.0>
        interrupts();
 80a2afa:	f002 fb11 	bl	80a5120 <_Z10interruptsv>
 80a2afe:	2037      	movs	r0, #55	; 0x37
}
 80a2b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2b04:	f000 bdee 	b.w	80a36e4 <HAL_Delay_Microseconds>
        noInterrupts();
 80a2b08:	f002 fb08 	bl	80a511c <_Z12noInterruptsv>
        digitalWriteFastLow();
 80a2b0c:	4620      	mov	r0, r4
 80a2b0e:	f7ff ff90 	bl	80a2a32 <_ZN7OneWire19digitalWriteFastLowEv>
        pinModeFastOutput();   // drive output low
 80a2b12:	8820      	ldrh	r0, [r4, #0]
 80a2b14:	f7ff ff77 	bl	80a2a06 <_ZN7OneWire17pinModeFastOutputEv.isra.0>
 80a2b18:	2041      	movs	r0, #65	; 0x41
 80a2b1a:	f000 fde3 	bl	80a36e4 <HAL_Delay_Microseconds>
        pinModeFastInput();    // float high
 80a2b1e:	8820      	ldrh	r0, [r4, #0]
 80a2b20:	f7ff ff6e 	bl	80a2a00 <_ZN7OneWire16pinModeFastInputEv.isra.0>
        interrupts();
 80a2b24:	f002 fafc 	bl	80a5120 <_Z10interruptsv>
 80a2b28:	2005      	movs	r0, #5
 80a2b2a:	e7e9      	b.n	80a2b00 <_ZN7OneWire9write_bitEh+0x2a>

080a2b2c <_ZN7OneWire8read_bitEv>:
{
 80a2b2c:	b510      	push	{r4, lr}
 80a2b2e:	4604      	mov	r4, r0
    noInterrupts();
 80a2b30:	f002 faf4 	bl	80a511c <_Z12noInterruptsv>
    digitalWriteFastLow();
 80a2b34:	4620      	mov	r0, r4
 80a2b36:	f7ff ff7c 	bl	80a2a32 <_ZN7OneWire19digitalWriteFastLowEv>
    pinModeFastOutput();
 80a2b3a:	8820      	ldrh	r0, [r4, #0]
 80a2b3c:	f7ff ff63 	bl	80a2a06 <_ZN7OneWire17pinModeFastOutputEv.isra.0>
 80a2b40:	2003      	movs	r0, #3
 80a2b42:	f000 fdcf 	bl	80a36e4 <HAL_Delay_Microseconds>
    pinModeFastInput();    // let pin float, pull up will raise
 80a2b46:	8820      	ldrh	r0, [r4, #0]
 80a2b48:	f7ff ff5a 	bl	80a2a00 <_ZN7OneWire16pinModeFastInputEv.isra.0>
 80a2b4c:	200a      	movs	r0, #10
 80a2b4e:	f000 fdc9 	bl	80a36e4 <HAL_Delay_Microseconds>
 80a2b52:	8820      	ldrh	r0, [r4, #0]
 80a2b54:	f000 fd86 	bl	80a3664 <HAL_GPIO_Read>
 80a2b58:	4604      	mov	r4, r0
    interrupts();
 80a2b5a:	f002 fae1 	bl	80a5120 <_Z10interruptsv>
 80a2b5e:	2035      	movs	r0, #53	; 0x35
 80a2b60:	f000 fdc0 	bl	80a36e4 <HAL_Delay_Microseconds>
}
 80a2b64:	b2e0      	uxtb	r0, r4
 80a2b66:	bd10      	pop	{r4, pc}

080a2b68 <_ZN7OneWire5writeEhh>:
{
 80a2b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b6c:	4605      	mov	r5, r0
 80a2b6e:	4688      	mov	r8, r1
 80a2b70:	4616      	mov	r6, r2
 80a2b72:	2708      	movs	r7, #8
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2b74:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a2b76:	ea18 0f04 	tst.w	r8, r4
 80a2b7a:	bf14      	ite	ne
 80a2b7c:	2101      	movne	r1, #1
 80a2b7e:	2100      	moveq	r1, #0
 80a2b80:	4628      	mov	r0, r5
 80a2b82:	f7ff ffa8 	bl	80a2ad6 <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2b86:	0064      	lsls	r4, r4, #1
 80a2b88:	3f01      	subs	r7, #1
 80a2b8a:	b2e4      	uxtb	r4, r4
 80a2b8c:	d1f3      	bne.n	80a2b76 <_ZN7OneWire5writeEhh+0xe>
    if ( power) {
 80a2b8e:	b126      	cbz	r6, 80a2b9a <_ZN7OneWire5writeEhh+0x32>
 80a2b90:	4628      	mov	r0, r5
}
 80a2b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b96:	f7ff bf39 	b.w	80a2a0c <_ZN7OneWire11write_bytesEPKhtb.part.0>
 80a2b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2b9e <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
 80a2b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2ba0:	4607      	mov	r7, r0
 80a2ba2:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a2ba4:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2ba6:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a2ba8:	4638      	mov	r0, r7
 80a2baa:	f7ff ffbf 	bl	80a2b2c <_ZN7OneWire8read_bitEv>
 80a2bae:	b100      	cbz	r0, 80a2bb2 <_ZN7OneWire4readEv+0x14>
 80a2bb0:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2bb2:	0064      	lsls	r4, r4, #1
 80a2bb4:	3e01      	subs	r6, #1
 80a2bb6:	b2e4      	uxtb	r4, r4
 80a2bb8:	d1f6      	bne.n	80a2ba8 <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
 80a2bba:	4628      	mov	r0, r5
 80a2bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2bbe <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a2bbe:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a2bc0:	2200      	movs	r2, #0
{
 80a2bc2:	460c      	mov	r4, r1
    write(0x55);           // Choose ROM
 80a2bc4:	2155      	movs	r1, #85	; 0x55
{
 80a2bc6:	4606      	mov	r6, r0
    write(0x55);           // Choose ROM
 80a2bc8:	f7ff ffce 	bl	80a2b68 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++) write(rom[i]);
 80a2bcc:	1e65      	subs	r5, r4, #1
 80a2bce:	3407      	adds	r4, #7
 80a2bd0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a2bd4:	2200      	movs	r2, #0
 80a2bd6:	4630      	mov	r0, r6
 80a2bd8:	f7ff ffc6 	bl	80a2b68 <_ZN7OneWire5writeEhh>
 80a2bdc:	42a5      	cmp	r5, r4
 80a2bde:	d1f7      	bne.n	80a2bd0 <_ZN7OneWire6selectEPKh+0x12>
}
 80a2be0:	bd70      	pop	{r4, r5, r6, pc}

080a2be2 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a2be2:	2300      	movs	r3, #0
 80a2be4:	8203      	strh	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a2be6:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a2be8:	6083      	str	r3, [r0, #8]
 80a2bea:	60c3      	str	r3, [r0, #12]
        if ( i == 0) break;
    }
}
 80a2bec:	4770      	bx	lr

080a2bee <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a2bee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a2bf2:	7c85      	ldrb	r5, [r0, #18]
{
 80a2bf4:	4604      	mov	r4, r0
 80a2bf6:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
 80a2bf8:	b175      	cbz	r5, 80a2c18 <_ZN7OneWire6searchEPh+0x2a>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a2bfa:	2000      	movs	r0, #0
 80a2bfc:	8220      	strh	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a2bfe:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a2c00:	f104 0308 	add.w	r3, r4, #8
 80a2c04:	f108 38ff 	add.w	r8, r8, #4294967295
 80a2c08:	3410      	adds	r4, #16
 80a2c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2c0e:	429c      	cmp	r4, r3
 80a2c10:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a2c14:	d1f9      	bne.n	80a2c0a <_ZN7OneWire6searchEPh+0x1c>
 80a2c16:	e004      	b.n	80a2c22 <_ZN7OneWire6searchEPh+0x34>
        if (!reset()){
 80a2c18:	f7ff ff21 	bl	80a2a5e <_ZN7OneWire5resetEv>
 80a2c1c:	b918      	cbnz	r0, 80a2c26 <_ZN7OneWire6searchEPh+0x38>
            LastDiscrepancy = 0;
 80a2c1e:	8220      	strh	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a2c20:	74a0      	strb	r0, [r4, #18]

    return search_result;
}
 80a2c22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rom_byte_mask = 1;
 80a2c26:	2701      	movs	r7, #1
        write(0xF0);
 80a2c28:	462a      	mov	r2, r5
 80a2c2a:	21f0      	movs	r1, #240	; 0xf0
 80a2c2c:	4620      	mov	r0, r4
 80a2c2e:	f7ff ff9b 	bl	80a2b68 <_ZN7OneWire5writeEhh>
    last_zero = 0;
 80a2c32:	46aa      	mov	sl, r5
    id_bit_number = 1;
 80a2c34:	463e      	mov	r6, r7
            id_bit = read_bit();
 80a2c36:	4620      	mov	r0, r4
 80a2c38:	f7ff ff78 	bl	80a2b2c <_ZN7OneWire8read_bitEv>
 80a2c3c:	4681      	mov	r9, r0
 80a2c3e:	4683      	mov	fp, r0
            cmp_id_bit = read_bit();
 80a2c40:	4620      	mov	r0, r4
 80a2c42:	f7ff ff73 	bl	80a2b2c <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a2c46:	f1b9 0f01 	cmp.w	r9, #1
 80a2c4a:	d10f      	bne.n	80a2c6c <_ZN7OneWire6searchEPh+0x7e>
 80a2c4c:	2801      	cmp	r0, #1
 80a2c4e:	d117      	bne.n	80a2c80 <_ZN7OneWire6searchEPh+0x92>
        if (!(id_bit_number < 65))
 80a2c50:	2e40      	cmp	r6, #64	; 0x40
 80a2c52:	d9d2      	bls.n	80a2bfa <_ZN7OneWire6searchEPh+0xc>
            LastDiscrepancy = last_zero;
 80a2c54:	f884 a010 	strb.w	sl, [r4, #16]
            if (LastDiscrepancy == 0)
 80a2c58:	f1ba 0f00 	cmp.w	sl, #0
 80a2c5c:	d101      	bne.n	80a2c62 <_ZN7OneWire6searchEPh+0x74>
                LastDeviceFlag = TRUE;
 80a2c5e:	2301      	movs	r3, #1
 80a2c60:	74a3      	strb	r3, [r4, #18]
    if (!search_result || !ROM_NO[0]){
 80a2c62:	7a23      	ldrb	r3, [r4, #8]
 80a2c64:	2b00      	cmp	r3, #0
 80a2c66:	d0c8      	beq.n	80a2bfa <_ZN7OneWire6searchEPh+0xc>
            search_result = TRUE;
 80a2c68:	2001      	movs	r0, #1
 80a2c6a:	e7c9      	b.n	80a2c00 <_ZN7OneWire6searchEPh+0x12>
                if (id_bit != cmp_id_bit){
 80a2c6c:	4581      	cmp	r9, r0
 80a2c6e:	eb04 0305 	add.w	r3, r4, r5
 80a2c72:	d122      	bne.n	80a2cba <_ZN7OneWire6searchEPh+0xcc>
                    if (id_bit_number < LastDiscrepancy)
 80a2c74:	7c22      	ldrb	r2, [r4, #16]
 80a2c76:	42b2      	cmp	r2, r6
 80a2c78:	d918      	bls.n	80a2cac <_ZN7OneWire6searchEPh+0xbe>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a2c7a:	7a1a      	ldrb	r2, [r3, #8]
                    if (search_direction == 0){
 80a2c7c:	4217      	tst	r7, r2
 80a2c7e:	d016      	beq.n	80a2cae <_ZN7OneWire6searchEPh+0xc0>
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a2c80:	f04f 0b01 	mov.w	fp, #1
 80a2c84:	1962      	adds	r2, r4, r5
 80a2c86:	7a13      	ldrb	r3, [r2, #8]
 80a2c88:	433b      	orrs	r3, r7
 80a2c8a:	7213      	strb	r3, [r2, #8]
                write_bit(search_direction);
 80a2c8c:	4659      	mov	r1, fp
 80a2c8e:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
 80a2c90:	007f      	lsls	r7, r7, #1
                write_bit(search_direction);
 80a2c92:	f7ff ff20 	bl	80a2ad6 <_ZN7OneWire9write_bitEh>
                id_bit_number++;
 80a2c96:	3601      	adds	r6, #1
                if (rom_byte_mask == 0)
 80a2c98:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
                id_bit_number++;
 80a2c9c:	b2f6      	uxtb	r6, r6
                if (rom_byte_mask == 0)
 80a2c9e:	d1ca      	bne.n	80a2c36 <_ZN7OneWire6searchEPh+0x48>
                    rom_byte_number++;
 80a2ca0:	3501      	adds	r5, #1
 80a2ca2:	b2ed      	uxtb	r5, r5
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a2ca4:	2d08      	cmp	r5, #8
 80a2ca6:	d0d3      	beq.n	80a2c50 <_ZN7OneWire6searchEPh+0x62>
                    rom_byte_mask = 1;
 80a2ca8:	2701      	movs	r7, #1
 80a2caa:	e7c4      	b.n	80a2c36 <_ZN7OneWire6searchEPh+0x48>
                    if (search_direction == 0){
 80a2cac:	d0e8      	beq.n	80a2c80 <_ZN7OneWire6searchEPh+0x92>
                        if (last_zero < 9)
 80a2cae:	2e08      	cmp	r6, #8
 80a2cb0:	d800      	bhi.n	80a2cb4 <_ZN7OneWire6searchEPh+0xc6>
                            LastFamilyDiscrepancy = last_zero;
 80a2cb2:	7466      	strb	r6, [r4, #17]
                if (search_direction == 1)
 80a2cb4:	f04f 0b00 	mov.w	fp, #0
 80a2cb8:	46b2      	mov	sl, r6
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a2cba:	7a1a      	ldrb	r2, [r3, #8]
 80a2cbc:	ea22 0207 	bic.w	r2, r2, r7
 80a2cc0:	721a      	strb	r2, [r3, #8]
 80a2cc2:	e7e3      	b.n	80a2c8c <_ZN7OneWire6searchEPh+0x9e>

080a2cc4 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a2cc4:	4603      	mov	r3, r0
    uint8_t crc = 0;
 80a2cc6:	4401      	add	r1, r0
 80a2cc8:	2000      	movs	r0, #0
{
 80a2cca:	b530      	push	{r4, r5, lr}

    while (len--) {
 80a2ccc:	428b      	cmp	r3, r1
 80a2cce:	d015      	beq.n	80a2cfc <_ZN7OneWire4crc8EPhh+0x38>
        uint8_t inbyte = *addr++;
 80a2cd0:	2208      	movs	r2, #8
 80a2cd2:	f813 4b01 	ldrb.w	r4, [r3], #1
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a2cd6:	ea80 0504 	eor.w	r5, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a2cda:	f015 0f01 	tst.w	r5, #1
 80a2cde:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a2ce2:	bf18      	it	ne
 80a2ce4:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
        for (uint8_t i = 8; i; i--) {
 80a2ce8:	f102 32ff 	add.w	r2, r2, #4294967295
            if (mix) crc ^= 0x8C;
 80a2cec:	bf18      	it	ne
 80a2cee:	b2c0      	uxtbne	r0, r0
        for (uint8_t i = 8; i; i--) {
 80a2cf0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                inbyte >>= 1;
 80a2cf4:	ea4f 0454 	mov.w	r4, r4, lsr #1
        for (uint8_t i = 8; i; i--) {
 80a2cf8:	d1ed      	bne.n	80a2cd6 <_ZN7OneWire4crc8EPhh+0x12>
 80a2cfa:	e7e7      	b.n	80a2ccc <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
 80a2cfc:	bd30      	pop	{r4, r5, pc}
	...

080a2d00 <_Z15conrad_rsl_initv>:
/*--------------------------------------------------------------------
Diese Funktion muss einmal von setup() aufgerufen werden
call this function once from setup()
--------------------------------------------------------------------*/
void conrad_rsl_init()  
{
 80a2d00:	b510      	push	{r4, lr}
  pinMode(dpin,OUTPUT);
 80a2d02:	4c07      	ldr	r4, [pc, #28]	; (80a2d20 <_Z15conrad_rsl_initv+0x20>)
 80a2d04:	2101      	movs	r1, #1
 80a2d06:	8820      	ldrh	r0, [r4, #0]
 80a2d08:	f002 fbcc 	bl	80a54a4 <pinMode>
  digitalWrite(dpin,LOW);
 80a2d0c:	8820      	ldrh	r0, [r4, #0]
 80a2d0e:	2100      	movs	r1, #0
 80a2d10:	f002 fbd9 	bl	80a54c6 <digitalWrite>
  delay(500);
}
 80a2d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
 80a2d18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a2d1c:	f001 bd7c 	b.w	80a4818 <delay>
 80a2d20:	20000408 	.word	0x20000408

080a2d24 <_Z19conrad_rsl_transmitPi>:

The next value sets transmitter pin HIGH
------------------------------------------------------------------------------*/
  void conrad_rsl_transmit (int* code)

  {
 80a2d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int rep;
  int i;

   digitalWrite(dpin,LOW);
 80a2d28:	4c2d      	ldr	r4, [pc, #180]	; (80a2de0 <_Z19conrad_rsl_transmitPi+0xbc>)
 80a2d2a:	2100      	movs	r1, #0
  {
 80a2d2c:	4607      	mov	r7, r0
   digitalWrite(dpin,LOW);
 80a2d2e:	8820      	ldrh	r0, [r4, #0]
 80a2d30:	f002 fbc9 	bl	80a54c6 <digitalWrite>
 80a2d34:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2d38:	f000 fcd4 	bl	80a36e4 <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a2d3c:	2100      	movs	r1, #0
 80a2d3e:	8820      	ldrh	r0, [r4, #0]
 80a2d40:	f002 fbc1 	bl	80a54c6 <digitalWrite>
 80a2d44:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2d48:	f000 fccc 	bl	80a36e4 <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a2d4c:	2100      	movs	r1, #0
 80a2d4e:	8820      	ldrh	r0, [r4, #0]
 80a2d50:	f002 fbb9 	bl	80a54c6 <digitalWrite>
 80a2d54:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2d58:	f000 fcc4 	bl	80a36e4 <HAL_Delay_Microseconds>
 80a2d5c:	2608      	movs	r6, #8

    for (rep=0; rep<8; rep++)
     {
       // send the bits from data array

     for (i=0; i < code[0]; i = i+4)
 80a2d5e:	f04f 0800 	mov.w	r8, #0
 80a2d62:	1d3d      	adds	r5, r7, #4
 80a2d64:	683b      	ldr	r3, [r7, #0]
         digitalWrite(dpin,LOW);
         delayMicroseconds(code[i+4]);
     }

        // for RSL switch
    digitalWrite(dpin,HIGH);
 80a2d66:	2101      	movs	r1, #1
     for (i=0; i < code[0]; i = i+4)
 80a2d68:	4543      	cmp	r3, r8
         digitalWrite(dpin,HIGH);
 80a2d6a:	8820      	ldrh	r0, [r4, #0]
     for (i=0; i < code[0]; i = i+4)
 80a2d6c:	f105 0510 	add.w	r5, r5, #16
 80a2d70:	dd20      	ble.n	80a2db4 <_Z19conrad_rsl_transmitPi+0x90>
         digitalWrite(dpin,HIGH);
 80a2d72:	f002 fba8 	bl	80a54c6 <digitalWrite>
 80a2d76:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80a2d7a:	f000 fcb3 	bl	80a36e4 <HAL_Delay_Microseconds>
         digitalWrite(dpin,LOW);
 80a2d7e:	2100      	movs	r1, #0
 80a2d80:	8820      	ldrh	r0, [r4, #0]
 80a2d82:	f002 fba0 	bl	80a54c6 <digitalWrite>
 80a2d86:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 80a2d8a:	f000 fcab 	bl	80a36e4 <HAL_Delay_Microseconds>
         digitalWrite(dpin,HIGH);
 80a2d8e:	2101      	movs	r1, #1
 80a2d90:	8820      	ldrh	r0, [r4, #0]
 80a2d92:	f002 fb98 	bl	80a54c6 <digitalWrite>
 80a2d96:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80a2d9a:	f000 fca3 	bl	80a36e4 <HAL_Delay_Microseconds>
         digitalWrite(dpin,LOW);
 80a2d9e:	2100      	movs	r1, #0
 80a2da0:	8820      	ldrh	r0, [r4, #0]
 80a2da2:	f002 fb90 	bl	80a54c6 <digitalWrite>
 80a2da6:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a2daa:	f000 fc9b 	bl	80a36e4 <HAL_Delay_Microseconds>
     for (i=0; i < code[0]; i = i+4)
 80a2dae:	f108 0804 	add.w	r8, r8, #4
 80a2db2:	e7d7      	b.n	80a2d64 <_Z19conrad_rsl_transmitPi+0x40>
    digitalWrite(dpin,HIGH);
 80a2db4:	f002 fb87 	bl	80a54c6 <digitalWrite>
 80a2db8:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80a2dbc:	f000 fc92 	bl	80a36e4 <HAL_Delay_Microseconds>
    delayMicroseconds(ST);

    // repeat transmitting after given gap

    digitalWrite(dpin,LOW);
 80a2dc0:	2100      	movs	r1, #0
 80a2dc2:	8820      	ldrh	r0, [r4, #0]
 80a2dc4:	f002 fb7f 	bl	80a54c6 <digitalWrite>
 80a2dc8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80a2dcc:	f000 fc8a 	bl	80a36e4 <HAL_Delay_Microseconds>
    for (rep=0; rep<8; rep++)
 80a2dd0:	3e01      	subs	r6, #1
 80a2dd2:	d1c4      	bne.n	80a2d5e <_Z19conrad_rsl_transmitPi+0x3a>
    delayMicroseconds(8000);
    }
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a2dd4:	4631      	mov	r1, r6
 80a2dd6:	8820      	ldrh	r0, [r4, #0]
  }
 80a2dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a2ddc:	f002 bb73 	b.w	80a54c6 <digitalWrite>
 80a2de0:	20000408 	.word	0x20000408

080a2de4 <_Z15conrad_rsl_sendjii>:

  SHORT : dauer des kurzen Pulses in milliseconds
  LONG : dauer des langen Pulses in milliseconds
  --------------------------------------------------------------------*/
  void conrad_rsl_send(unsigned int code, int SHORT, int LONG)
  {
 80a2de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2de8:	b0c6      	sub	sp, #280	; 0x118
 80a2dea:	4605      	mov	r5, r0
 80a2dec:	460e      	mov	r6, r1
 80a2dee:	4617      	mov	r7, r2
    int i = 0;
    int k = 1;
    int tx_code[70];  // speicher tx code sequenz

    Serial.println(code);
 80a2df0:	f002 f944 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2df4:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 80a2df6:	220a      	movs	r2, #10
 80a2df8:	4629      	mov	r1, r5
 80a2dfa:	f001 fb92 	bl	80a4522 <_ZN5Print11printNumberEmh>
        n += println();
 80a2dfe:	4620      	mov	r0, r4
 80a2e00:	f001 fb79 	bl	80a44f6 <_ZN5Print7printlnEv>

    memset(tx_code,0,64);
 80a2e04:	223c      	movs	r2, #60	; 0x3c
 80a2e06:	2100      	movs	r1, #0
 80a2e08:	a801      	add	r0, sp, #4
 80a2e0a:	f003 ff67 	bl	80a6cdc <memset>
    tx_code[0]=64;   // die laenge des tx codes
 80a2e0e:	2340      	movs	r3, #64	; 0x40
 80a2e10:	466c      	mov	r4, sp
    int k = 1;
 80a2e12:	f04f 0801 	mov.w	r8, #1
      }
      else
      {
        tx_code[k] = SHORT;
        tx_code[k+1] = LONG;
        Serial.print("0");
 80a2e16:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80a2e68 <_Z15conrad_rsl_sendjii+0x84>
        Serial.print("1");
 80a2e1a:	f8df a050 	ldr.w	sl, [pc, #80]	; 80a2e6c <_Z15conrad_rsl_sendjii+0x88>
    tx_code[0]=64;   // die laenge des tx codes
 80a2e1e:	9300      	str	r3, [sp, #0]
      if ( (code & 0x80000000) == 0x80000000)
 80a2e20:	2d00      	cmp	r5, #0
 80a2e22:	da1a      	bge.n	80a2e5a <_Z15conrad_rsl_sendjii+0x76>
        tx_code[k+1] = SHORT;
 80a2e24:	e9c4 7601 	strd	r7, r6, [r4, #4]
        Serial.print("1");
 80a2e28:	f002 f928 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2e2c:	4651      	mov	r1, sl
      }
      code = code << 1;
      k=k+2;
 80a2e2e:	f108 0802 	add.w	r8, r8, #2
        Serial.print("0");
 80a2e32:	f001 fb59 	bl	80a44e8 <_ZN5Print5printEPKc>
    for(i=0; i<32; i++)
 80a2e36:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
      code = code << 1;
 80a2e3a:	ea4f 0545 	mov.w	r5, r5, lsl #1
    for(i=0; i<32; i++)
 80a2e3e:	f104 0408 	add.w	r4, r4, #8
 80a2e42:	d1ed      	bne.n	80a2e20 <_Z15conrad_rsl_sendjii+0x3c>
    }
    Serial.println(" ");
 80a2e44:	f002 f91a 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2e48:	4909      	ldr	r1, [pc, #36]	; (80a2e70 <_Z15conrad_rsl_sendjii+0x8c>)
 80a2e4a:	f001 fb60 	bl	80a450e <_ZN5Print7printlnEPKc>
    conrad_rsl_transmit(&tx_code[0]);
 80a2e4e:	4668      	mov	r0, sp
 80a2e50:	f7ff ff68 	bl	80a2d24 <_Z19conrad_rsl_transmitPi>
  }
 80a2e54:	b046      	add	sp, #280	; 0x118
 80a2e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tx_code[k+1] = LONG;
 80a2e5a:	e9c4 6701 	strd	r6, r7, [r4, #4]
        Serial.print("0");
 80a2e5e:	f002 f90d 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2e62:	4649      	mov	r1, r9
 80a2e64:	e7e3      	b.n	80a2e2e <_Z15conrad_rsl_sendjii+0x4a>
 80a2e66:	bf00      	nop
 80a2e68:	080a8689 	.word	0x080a8689
 80a2e6c:	080a86d4 	.word	0x080a86d4
 80a2e70:	080a875e 	.word	0x080a875e

080a2e74 <_Z22conrad_rsl_switch_codeii>:
  void conrad_rsl_switch_code ( int which, int state )
  {

    unsigned int code = 0;

    if (which>11)
 80a2e74:	280b      	cmp	r0, #11
  {
 80a2e76:	b570      	push	{r4, r5, r6, lr}
 80a2e78:	4604      	mov	r4, r0
 80a2e7a:	460d      	mov	r5, r1
    if (which>11)
 80a2e7c:	dd04      	ble.n	80a2e88 <_Z22conrad_rsl_switch_codeii+0x14>
    {
      Serial.println(" ERROR which not valid ");
 80a2e7e:	f002 f8fd 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2e82:	4918      	ldr	r1, [pc, #96]	; (80a2ee4 <_Z22conrad_rsl_switch_codeii+0x70>)
 80a2e84:	f001 fb43 	bl	80a450e <_ZN5Print7printlnEPKc>
    }

    if (state>1)
 80a2e88:	2d01      	cmp	r5, #1
 80a2e8a:	dd04      	ble.n	80a2e96 <_Z22conrad_rsl_switch_codeii+0x22>
    {
      Serial.println(" ERROR state not valid ");
 80a2e8c:	f002 f8f6 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2e90:	4915      	ldr	r1, [pc, #84]	; (80a2ee8 <_Z22conrad_rsl_switch_codeii+0x74>)
 80a2e92:	f001 fb3c 	bl	80a450e <_ZN5Print7printlnEPKc>
    }

    code = codes[state][which];
 80a2e96:	260a      	movs	r6, #10
 80a2e98:	fb06 4405 	mla	r4, r6, r5, r4
 80a2e9c:	4b13      	ldr	r3, [pc, #76]	; (80a2eec <_Z22conrad_rsl_switch_codeii+0x78>)
 80a2e9e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

    if (code != 0)
 80a2ea2:	b1bc      	cbz	r4, 80a2ed4 <_Z22conrad_rsl_switch_codeii+0x60>
    {
      Serial.print("Sende Code : ");
 80a2ea4:	f002 f8ea 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2ea8:	4911      	ldr	r1, [pc, #68]	; (80a2ef0 <_Z22conrad_rsl_switch_codeii+0x7c>)
 80a2eaa:	f001 fb1d 	bl	80a44e8 <_ZN5Print5printEPKc>
      Serial.println(code);
 80a2eae:	f002 f8e5 	bl	80a507c <_Z16_fetch_usbserialv>
 80a2eb2:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80a2eb4:	4632      	mov	r2, r6
 80a2eb6:	4621      	mov	r1, r4
 80a2eb8:	f001 fb33 	bl	80a4522 <_ZN5Print11printNumberEmh>
        n += println();
 80a2ebc:	4628      	mov	r0, r5
 80a2ebe:	f001 fb1a 	bl	80a44f6 <_ZN5Print7printlnEv>
      conrad_rsl_send(code,430,1150);
 80a2ec2:	4620      	mov	r0, r4
    else
    {
      Serial.print(" Fehler : konnte Code nicht finden ");
    }

  }
 80a2ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      conrad_rsl_send(code,430,1150);
 80a2ec8:	f240 427e 	movw	r2, #1150	; 0x47e
 80a2ecc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80a2ed0:	f7ff bf88 	b.w	80a2de4 <_Z15conrad_rsl_sendjii>
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a2ed4:	f002 f8d2 	bl	80a507c <_Z16_fetch_usbserialv>
  }
 80a2ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a2edc:	4905      	ldr	r1, [pc, #20]	; (80a2ef4 <_Z22conrad_rsl_switch_codeii+0x80>)
 80a2ede:	f001 bb03 	b.w	80a44e8 <_ZN5Print5printEPKc>
 80a2ee2:	bf00      	nop
 80a2ee4:	080a85de 	.word	0x080a85de
 80a2ee8:	080a85f6 	.word	0x080a85f6
 80a2eec:	2000002c 	.word	0x2000002c
 80a2ef0:	080a860e 	.word	0x080a860e
 80a2ef4:	080a861c 	.word	0x080a861c

080a2ef8 <_Z13elro_transmitPi>:
/*--------------------------------------------------------------------
toggle transmitter data using the given data array
--------------------------------------------------------------------*/
  void elro_transmit (int* data)

  {
 80a2ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	   int rep;
	   int i;

 	   digitalWrite(datapin,LOW);
 80a2efc:	4c20      	ldr	r4, [pc, #128]	; (80a2f80 <_Z13elro_transmitPi+0x88>)
 80a2efe:	2100      	movs	r1, #0
  {
 80a2f00:	4606      	mov	r6, r0
 	   digitalWrite(datapin,LOW);
 80a2f02:	8820      	ldrh	r0, [r4, #0]
 80a2f04:	f002 fadf 	bl	80a54c6 <digitalWrite>
 80a2f08:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2f0c:	f000 fbea 	bl	80a36e4 <HAL_Delay_Microseconds>
	   delayMicroseconds(5000);

	   digitalWrite(datapin,LOW);
 80a2f10:	2100      	movs	r1, #0
 80a2f12:	8820      	ldrh	r0, [r4, #0]
 80a2f14:	f002 fad7 	bl	80a54c6 <digitalWrite>
 80a2f18:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2f1c:	f000 fbe2 	bl	80a36e4 <HAL_Delay_Microseconds>
	   delayMicroseconds(5000);

	   digitalWrite(datapin,LOW);
 80a2f20:	2100      	movs	r1, #0
 80a2f22:	8820      	ldrh	r0, [r4, #0]
 80a2f24:	f002 facf 	bl	80a54c6 <digitalWrite>
 80a2f28:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2f2c:	f000 fbda 	bl	80a36e4 <HAL_Delay_Microseconds>
 80a2f30:	2508      	movs	r5, #8

	  for (rep=0; rep<8; rep++)
		 {
			 // send the bits from data array

			 for (i=0; i < data[0]; i = i+2)
 80a2f32:	f04f 0800 	mov.w	r8, #0
 80a2f36:	1d37      	adds	r7, r6, #4
 80a2f38:	6833      	ldr	r3, [r6, #0]
 80a2f3a:	3708      	adds	r7, #8
 80a2f3c:	4543      	cmp	r3, r8
 80a2f3e:	dd12      	ble.n	80a2f66 <_Z13elro_transmitPi+0x6e>
			 {
			   digitalWrite(datapin,HIGH);
 80a2f40:	2101      	movs	r1, #1
 80a2f42:	8820      	ldrh	r0, [r4, #0]
 80a2f44:	f002 fabf 	bl	80a54c6 <digitalWrite>
 80a2f48:	f857 0c08 	ldr.w	r0, [r7, #-8]
 80a2f4c:	f000 fbca 	bl	80a36e4 <HAL_Delay_Microseconds>
			   delayMicroseconds(data[i+1]);
			   digitalWrite(datapin,LOW);
 80a2f50:	2100      	movs	r1, #0
 80a2f52:	8820      	ldrh	r0, [r4, #0]
 80a2f54:	f002 fab7 	bl	80a54c6 <digitalWrite>
 80a2f58:	f857 0c04 	ldr.w	r0, [r7, #-4]
 80a2f5c:	f000 fbc2 	bl	80a36e4 <HAL_Delay_Microseconds>
			 for (i=0; i < data[0]; i = i+2)
 80a2f60:	f108 0802 	add.w	r8, r8, #2
 80a2f64:	e7e8      	b.n	80a2f38 <_Z13elro_transmitPi+0x40>
 80a2f66:	f242 60ac 	movw	r0, #9900	; 0x26ac
 80a2f6a:	f000 fbbb 	bl	80a36e4 <HAL_Delay_Microseconds>
	  for (rep=0; rep<8; rep++)
 80a2f6e:	3d01      	subs	r5, #1
 80a2f70:	d1df      	bne.n	80a2f32 <_Z13elro_transmitPi+0x3a>
			   delayMicroseconds(data[i+2]);
			 }

	    delayMicroseconds(9900);
  		}
    digitalWrite(datapin,LOW);
 80a2f72:	4629      	mov	r1, r5
 80a2f74:	8820      	ldrh	r0, [r4, #0]
  }
 80a2f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    digitalWrite(datapin,LOW);
 80a2f7a:	f002 baa4 	b.w	80a54c6 <digitalWrite>
 80a2f7e:	bf00      	nop
 80a2f80:	2000040c 	.word	0x2000040c

080a2f84 <_Z9elro_sendPcii>:
{
	int i = 0;
	int k = 1;
  int ed[90];  // tx code sequenz

	ed[0]=50;
 80a2f84:	2332      	movs	r3, #50	; 0x32
{
 80a2f86:	b530      	push	{r4, r5, lr}
 80a2f88:	b0db      	sub	sp, #364	; 0x16c
	ed[0]=50;
 80a2f8a:	9300      	str	r3, [sp, #0]

	for(i=0; i<24; i++)
 80a2f8c:	466b      	mov	r3, sp
 80a2f8e:	1e44      	subs	r4, r0, #1
 80a2f90:	3017      	adds	r0, #23
	{
		if (code[i]==0x30)
 80a2f92:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80a2f96:	2d30      	cmp	r5, #48	; 0x30
		{
			ed[k] = SHORT;
			ed[k+1] = LONG;
 80a2f98:	bf0c      	ite	eq
 80a2f9a:	e9c3 1201 	strdeq	r1, r2, [r3, #4]
		}
		else
		{
			ed[k] = LONG;
			ed[k+1] = SHORT;
 80a2f9e:	e9c3 2101 	strdne	r2, r1, [r3, #4]
	for(i=0; i<24; i++)
 80a2fa2:	4284      	cmp	r4, r0
 80a2fa4:	f103 0308 	add.w	r3, r3, #8
 80a2fa8:	d1f3      	bne.n	80a2f92 <_Z9elro_sendPcii+0xe>
		}
		k=k+2;
	}
	ed[k] = SHORT;
	ed[k+1] = LONG;
  elro_transmit(&ed[0]);
 80a2faa:	4668      	mov	r0, sp
	ed[k+1] = LONG;
 80a2fac:	e9cd 1231 	strd	r1, r2, [sp, #196]	; 0xc4
  elro_transmit(&ed[0]);
 80a2fb0:	f7ff ffa2 	bl	80a2ef8 <_Z13elro_transmitPi>
}
 80a2fb4:	b05b      	add	sp, #364	; 0x16c
 80a2fb6:	bd30      	pop	{r4, r5, pc}

080a2fb8 <_Z11elro_switchii>:

/*--------------------------------------------------------------------
Control ELRO rc switch
--------------------------------------------------------------------*/
void elro_switch ( int which, int state )
{
 80a2fb8:	b530      	push	{r4, r5, lr}
	char es[34];

	if (which==1)
 80a2fba:	2801      	cmp	r0, #1
{
 80a2fbc:	b08b      	sub	sp, #44	; 0x2c
	if (which==1)
 80a2fbe:	d123      	bne.n	80a3008 <_Z11elro_switchii+0x50>
	{
		if (state==AUS)  strncpy(es,"000100010000010101010010",24);
 80a2fc0:	b999      	cbnz	r1, 80a2fea <_Z11elro_switchii+0x32>
 80a2fc2:	4b30      	ldr	r3, [pc, #192]	; (80a3084 <_Z11elro_switchii+0xcc>)
 80a2fc4:	ac01      	add	r4, sp, #4
 80a2fc6:	f103 0518 	add.w	r5, r3, #24
 80a2fca:	4622      	mov	r2, r4
 80a2fcc:	6818      	ldr	r0, [r3, #0]
 80a2fce:	6859      	ldr	r1, [r3, #4]
 80a2fd0:	3308      	adds	r3, #8
 80a2fd2:	c203      	stmia	r2!, {r0, r1}
 80a2fd4:	42ab      	cmp	r3, r5
 80a2fd6:	4614      	mov	r4, r2
 80a2fd8:	d1f7      	bne.n	80a2fca <_Z11elro_switchii+0x12>
		if (state==EIN)  strncpy(es,"000100010000010101010001",24);
   	elro_send(es,220,940);
 80a2fda:	f44f 726b 	mov.w	r2, #940	; 0x3ac
 80a2fde:	21dc      	movs	r1, #220	; 0xdc
 80a2fe0:	a801      	add	r0, sp, #4
 80a2fe2:	f7ff ffcf 	bl	80a2f84 <_Z9elro_sendPcii>
		if (state==AUS)  strncpy(es,"000100010001010001010010",24);
		if (state==EIN)  strncpy(es,"000100010001010001010001",24);
   	elro_send(es,220,940);
	}

}
 80a2fe6:	b00b      	add	sp, #44	; 0x2c
 80a2fe8:	bd30      	pop	{r4, r5, pc}
		if (state==EIN)  strncpy(es,"000100010000010101010001",24);
 80a2fea:	2901      	cmp	r1, #1
 80a2fec:	d1f5      	bne.n	80a2fda <_Z11elro_switchii+0x22>
 80a2fee:	4b26      	ldr	r3, [pc, #152]	; (80a3088 <_Z11elro_switchii+0xd0>)
 80a2ff0:	aa01      	add	r2, sp, #4
 80a2ff2:	f103 0518 	add.w	r5, r3, #24
 80a2ff6:	4614      	mov	r4, r2
 80a2ff8:	6818      	ldr	r0, [r3, #0]
 80a2ffa:	6859      	ldr	r1, [r3, #4]
 80a2ffc:	3308      	adds	r3, #8
 80a2ffe:	c403      	stmia	r4!, {r0, r1}
 80a3000:	42ab      	cmp	r3, r5
 80a3002:	4622      	mov	r2, r4
 80a3004:	d1f7      	bne.n	80a2ff6 <_Z11elro_switchii+0x3e>
 80a3006:	e7e8      	b.n	80a2fda <_Z11elro_switchii+0x22>
	if (which==2)
 80a3008:	2802      	cmp	r0, #2
 80a300a:	d00f      	beq.n	80a302c <_Z11elro_switchii+0x74>
	if (which==3)
 80a300c:	2803      	cmp	r0, #3
 80a300e:	d1ea      	bne.n	80a2fe6 <_Z11elro_switchii+0x2e>
		if (state==AUS)  strncpy(es,"000100010001010001010010",24);
 80a3010:	bb49      	cbnz	r1, 80a3066 <_Z11elro_switchii+0xae>
 80a3012:	4b1e      	ldr	r3, [pc, #120]	; (80a308c <_Z11elro_switchii+0xd4>)
 80a3014:	ac01      	add	r4, sp, #4
 80a3016:	f103 0518 	add.w	r5, r3, #24
 80a301a:	4622      	mov	r2, r4
 80a301c:	6818      	ldr	r0, [r3, #0]
 80a301e:	6859      	ldr	r1, [r3, #4]
 80a3020:	3308      	adds	r3, #8
 80a3022:	c203      	stmia	r2!, {r0, r1}
 80a3024:	42ab      	cmp	r3, r5
 80a3026:	4614      	mov	r4, r2
 80a3028:	d1f7      	bne.n	80a301a <_Z11elro_switchii+0x62>
 80a302a:	e7d6      	b.n	80a2fda <_Z11elro_switchii+0x22>
		if (state==AUS)  strncpy(es,"000100010001000101010100",24);
 80a302c:	b961      	cbnz	r1, 80a3048 <_Z11elro_switchii+0x90>
 80a302e:	4b18      	ldr	r3, [pc, #96]	; (80a3090 <_Z11elro_switchii+0xd8>)
 80a3030:	ac01      	add	r4, sp, #4
 80a3032:	f103 0518 	add.w	r5, r3, #24
 80a3036:	4622      	mov	r2, r4
 80a3038:	6818      	ldr	r0, [r3, #0]
 80a303a:	6859      	ldr	r1, [r3, #4]
 80a303c:	3308      	adds	r3, #8
 80a303e:	c203      	stmia	r2!, {r0, r1}
 80a3040:	42ab      	cmp	r3, r5
 80a3042:	4614      	mov	r4, r2
 80a3044:	d1f7      	bne.n	80a3036 <_Z11elro_switchii+0x7e>
 80a3046:	e7c8      	b.n	80a2fda <_Z11elro_switchii+0x22>
		if (state==EIN)  strncpy(es,"000100010001000101010001",24);
 80a3048:	2901      	cmp	r1, #1
 80a304a:	d1c6      	bne.n	80a2fda <_Z11elro_switchii+0x22>
 80a304c:	4b11      	ldr	r3, [pc, #68]	; (80a3094 <_Z11elro_switchii+0xdc>)
 80a304e:	aa01      	add	r2, sp, #4
 80a3050:	f103 0518 	add.w	r5, r3, #24
 80a3054:	4614      	mov	r4, r2
 80a3056:	6818      	ldr	r0, [r3, #0]
 80a3058:	6859      	ldr	r1, [r3, #4]
 80a305a:	3308      	adds	r3, #8
 80a305c:	c403      	stmia	r4!, {r0, r1}
 80a305e:	42ab      	cmp	r3, r5
 80a3060:	4622      	mov	r2, r4
 80a3062:	d1f7      	bne.n	80a3054 <_Z11elro_switchii+0x9c>
 80a3064:	e7b9      	b.n	80a2fda <_Z11elro_switchii+0x22>
		if (state==EIN)  strncpy(es,"000100010001010001010001",24);
 80a3066:	2901      	cmp	r1, #1
 80a3068:	d1b7      	bne.n	80a2fda <_Z11elro_switchii+0x22>
 80a306a:	4b0b      	ldr	r3, [pc, #44]	; (80a3098 <_Z11elro_switchii+0xe0>)
 80a306c:	aa01      	add	r2, sp, #4
 80a306e:	f103 0518 	add.w	r5, r3, #24
 80a3072:	4614      	mov	r4, r2
 80a3074:	6818      	ldr	r0, [r3, #0]
 80a3076:	6859      	ldr	r1, [r3, #4]
 80a3078:	3308      	adds	r3, #8
 80a307a:	c403      	stmia	r4!, {r0, r1}
 80a307c:	42ab      	cmp	r3, r5
 80a307e:	4622      	mov	r2, r4
 80a3080:	d1f7      	bne.n	80a3072 <_Z11elro_switchii+0xba>
 80a3082:	e7aa      	b.n	80a2fda <_Z11elro_switchii+0x22>
 80a3084:	080a8640 	.word	0x080a8640
 80a3088:	080a8659 	.word	0x080a8659
 80a308c:	080a86a4 	.word	0x080a86a4
 80a3090:	080a8672 	.word	0x080a8672
 80a3094:	080a868b 	.word	0x080a868b
 80a3098:	080a86bd 	.word	0x080a86bd

080a309c <_Z17switch_pumpe_funkii.part.0>:
}

/*---------------------------------------------------------------------
Funk-Pumpe eines weiteren Wassertanks einschalten bzw. ausschalten
---------------------------------------------------------------------*/
int switch_pumpe_funk(int newState, int laufzeit) // pumpe ein- oder aus
 80a309c:	b510      	push	{r4, lr}

{
    if (newState == ON)
    {
        conrad_rsl_switch_code(RSL2, EIN); // Dosen-Label RSL2
 80a309e:	2101      	movs	r1, #1
int switch_pumpe_funk(int newState, int laufzeit) // pumpe ein- oder aus
 80a30a0:	4604      	mov	r4, r0
        conrad_rsl_switch_code(RSL2, EIN); // Dosen-Label RSL2
 80a30a2:	2002      	movs	r0, #2
 80a30a4:	f7ff fee6 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
        st_funk_pumpe = ON;
 80a30a8:	2201      	movs	r2, #1
 80a30aa:	4b08      	ldr	r3, [pc, #32]	; (80a30cc <_Z17switch_pumpe_funkii.part.0+0x30>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 EINGESCHALTET ");
 80a30ac:	4908      	ldr	r1, [pc, #32]	; (80a30d0 <_Z17switch_pumpe_funkii.part.0+0x34>)
 80a30ae:	4809      	ldr	r0, [pc, #36]	; (80a30d4 <_Z17switch_pumpe_funkii.part.0+0x38>)
        st_funk_pumpe = ON;
 80a30b0:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 EINGESCHALTET ");
 80a30b2:	f7fd f823 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        tnow = getTime();
 80a30b6:	f7fd fd53 	bl	80a0b60 <_Z7getTimev>
 80a30ba:	4b07      	ldr	r3, [pc, #28]	; (80a30d8 <_Z17switch_pumpe_funkii.part.0+0x3c>)
 80a30bc:	6018      	str	r0, [r3, #0]
        tfunk_stop = tsec + laufzeit;
 80a30be:	4b07      	ldr	r3, [pc, #28]	; (80a30dc <_Z17switch_pumpe_funkii.part.0+0x40>)
 80a30c0:	681b      	ldr	r3, [r3, #0]
 80a30c2:	441c      	add	r4, r3
 80a30c4:	4b06      	ldr	r3, [pc, #24]	; (80a30e0 <_Z17switch_pumpe_funkii.part.0+0x44>)
 80a30c6:	601c      	str	r4, [r3, #0]
        st_funk_pumpe = OFF;
        tfunk_stop = 4000;
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
    }
    return (newState);
}
 80a30c8:	bd10      	pop	{r4, pc}
 80a30ca:	bf00      	nop
 80a30cc:	20000350 	.word	0x20000350
 80a30d0:	080a86d6 	.word	0x080a86d6
 80a30d4:	080a7a4b 	.word	0x080a7a4b
 80a30d8:	200003f4 	.word	0x200003f4
 80a30dc:	200003fc 	.word	0x200003fc
 80a30e0:	200003b8 	.word	0x200003b8

080a30e4 <_Z17switch_pumpe_mainii>:
{
 80a30e4:	b570      	push	{r4, r5, r6, lr}
 80a30e6:	4605      	mov	r5, r0
 80a30e8:	460e      	mov	r6, r1
    Serial.printlnf(" --------------------------------------------- ");
 80a30ea:	f001 ffc7 	bl	80a507c <_Z16_fetch_usbserialv>
 80a30ee:	4945      	ldr	r1, [pc, #276]	; (80a3204 <_Z17switch_pumpe_mainii+0x120>)
 80a30f0:	f7fc ffdf 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(" MAIN Pumpe schalten : %d Zeit %d", new_state, laufzeit);
 80a30f4:	f001 ffc2 	bl	80a507c <_Z16_fetch_usbserialv>
 80a30f8:	4633      	mov	r3, r6
 80a30fa:	462a      	mov	r2, r5
 80a30fc:	4942      	ldr	r1, [pc, #264]	; (80a3208 <_Z17switch_pumpe_mainii+0x124>)
 80a30fe:	f7fc ffd8 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a3102:	2101      	movs	r1, #1
 80a3104:	4608      	mov	r0, r1
 80a3106:	f002 f9cd 	bl	80a54a4 <pinMode>
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a310a:	2001      	movs	r0, #1
 80a310c:	f002 f9f4 	bl	80a54f8 <digitalRead>
 80a3110:	4c3e      	ldr	r4, [pc, #248]	; (80a320c <_Z17switch_pumpe_mainii+0x128>)
    if ((new_state == ON) & (st_main_pumpe == OFF))
 80a3112:	2d01      	cmp	r5, #1
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a3114:	6020      	str	r0, [r4, #0]
    if ((new_state == ON) & (st_main_pumpe == OFF))
 80a3116:	d14b      	bne.n	80a31b0 <_Z17switch_pumpe_mainii+0xcc>
 80a3118:	2800      	cmp	r0, #0
 80a311a:	d149      	bne.n	80a31b0 <_Z17switch_pumpe_mainii+0xcc>
        WriteToDatabase("WASSER", "BLUMEN GIESSEN BEGINNT  ");
 80a311c:	493c      	ldr	r1, [pc, #240]	; (80a3210 <_Z17switch_pumpe_mainii+0x12c>)
 80a311e:	483d      	ldr	r0, [pc, #244]	; (80a3214 <_Z17switch_pumpe_mainii+0x130>)
 80a3120:	f7fc ffec 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        old_level = ultra_sonic_measure();
 80a3124:	f7fd fac6 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a3128:	4d3b      	ldr	r5, [pc, #236]	; (80a3218 <_Z17switch_pumpe_mainii+0x134>)
 80a312a:	4602      	mov	r2, r0
 80a312c:	6028      	str	r0, [r5, #0]
        WriteToDatabase("WASSER", "WASSERSTAND before pumpe ON : ", old_level);
 80a312e:	493b      	ldr	r1, [pc, #236]	; (80a321c <_Z17switch_pumpe_mainii+0x138>)
 80a3130:	4838      	ldr	r0, [pc, #224]	; (80a3214 <_Z17switch_pumpe_mainii+0x130>)
 80a3132:	f7fd f837 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        if (old_level < TROCKENLAUF_SCHUTZ_LEVEL)
 80a3136:	682b      	ldr	r3, [r5, #0]
 80a3138:	2b3b      	cmp	r3, #59	; 0x3b
 80a313a:	dc05      	bgt.n	80a3148 <_Z17switch_pumpe_mainii+0x64>
            WriteToDatabase("WASSER", "WASSERSTAND TROCKEN-LAUF-SCHUTZ. PUMPE NICHT EINSCHALTEN");
 80a313c:	4938      	ldr	r1, [pc, #224]	; (80a3220 <_Z17switch_pumpe_mainii+0x13c>)
 80a313e:	4835      	ldr	r0, [pc, #212]	; (80a3214 <_Z17switch_pumpe_mainii+0x130>)
 80a3140:	f7fc ffdc 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    return (st_main_pumpe);
 80a3144:	6820      	ldr	r0, [r4, #0]
}
 80a3146:	bd70      	pop	{r4, r5, r6, pc}
        tnow = getTime();
 80a3148:	f7fd fd0a 	bl	80a0b60 <_Z7getTimev>
 80a314c:	4b35      	ldr	r3, [pc, #212]	; (80a3224 <_Z17switch_pumpe_mainii+0x140>)
 80a314e:	6018      	str	r0, [r3, #0]
        tmain_stop = tsec + laufzeit;
 80a3150:	4b35      	ldr	r3, [pc, #212]	; (80a3228 <_Z17switch_pumpe_mainii+0x144>)
 80a3152:	6819      	ldr	r1, [r3, #0]
 80a3154:	4b35      	ldr	r3, [pc, #212]	; (80a322c <_Z17switch_pumpe_mainii+0x148>)
 80a3156:	440e      	add	r6, r1
        digitalWrite(DO_PUMPE_MAIN, 1);
 80a3158:	2101      	movs	r1, #1
 80a315a:	4608      	mov	r0, r1
        tmain_stop = tsec + laufzeit;
 80a315c:	601e      	str	r6, [r3, #0]
        digitalWrite(DO_PUMPE_MAIN, 1);
 80a315e:	f002 f9b2 	bl	80a54c6 <digitalWrite>
        WriteToDatabase("WASSER", "HAUPT-PUMPE EINGESCHALTET : ", main_countDown);
 80a3162:	4b33      	ldr	r3, [pc, #204]	; (80a3230 <_Z17switch_pumpe_mainii+0x14c>)
 80a3164:	4933      	ldr	r1, [pc, #204]	; (80a3234 <_Z17switch_pumpe_mainii+0x150>)
 80a3166:	681a      	ldr	r2, [r3, #0]
 80a3168:	482a      	ldr	r0, [pc, #168]	; (80a3214 <_Z17switch_pumpe_mainii+0x130>)
 80a316a:	f7fd f81b 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
    delay(250);
 80a316e:	20fa      	movs	r0, #250	; 0xfa
 80a3170:	f001 fb52 	bl	80a4818 <delay>
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a3174:	2001      	movs	r0, #1
 80a3176:	f002 f9bf 	bl	80a54f8 <digitalRead>
    Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a317a:	4d2f      	ldr	r5, [pc, #188]	; (80a3238 <_Z17switch_pumpe_mainii+0x154>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a317c:	6020      	str	r0, [r4, #0]
    Serial.printlnf(" DoPumpeMain    : %d ", st_main_pumpe);
 80a317e:	f001 ff7d 	bl	80a507c <_Z16_fetch_usbserialv>
 80a3182:	6822      	ldr	r2, [r4, #0]
 80a3184:	492d      	ldr	r1, [pc, #180]	; (80a323c <_Z17switch_pumpe_mainii+0x158>)
 80a3186:	f7fc ff94 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    readAdcChannels();
 80a318a:	f7fd fd11 	bl	80a0bb0 <_Z15readAdcChannelsv>
    Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a318e:	f001 ff75 	bl	80a507c <_Z16_fetch_usbserialv>
 80a3192:	682a      	ldr	r2, [r5, #0]
 80a3194:	492a      	ldr	r1, [pc, #168]	; (80a3240 <_Z17switch_pumpe_mainii+0x15c>)
 80a3196:	f7fc ff8c 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeMain [mV] : ", AiPumpeMain);
 80a319a:	682a      	ldr	r2, [r5, #0]
 80a319c:	4929      	ldr	r1, [pc, #164]	; (80a3244 <_Z17switch_pumpe_mainii+0x160>)
 80a319e:	482a      	ldr	r0, [pc, #168]	; (80a3248 <_Z17switch_pumpe_mainii+0x164>)
 80a31a0:	f7fd f800 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
    Serial.printlnf(" --------------------------------------------- ");
 80a31a4:	f001 ff6a 	bl	80a507c <_Z16_fetch_usbserialv>
 80a31a8:	4916      	ldr	r1, [pc, #88]	; (80a3204 <_Z17switch_pumpe_mainii+0x120>)
 80a31aa:	f7fc ff82 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a31ae:	e7c9      	b.n	80a3144 <_Z17switch_pumpe_mainii+0x60>
    if ((new_state == OFF) & (st_main_pumpe == ON))
 80a31b0:	2d00      	cmp	r5, #0
 80a31b2:	d1dc      	bne.n	80a316e <_Z17switch_pumpe_mainii+0x8a>
 80a31b4:	2801      	cmp	r0, #1
 80a31b6:	d1da      	bne.n	80a316e <_Z17switch_pumpe_mainii+0x8a>
        digitalWrite(DO_PUMPE_MAIN, 0);
 80a31b8:	2100      	movs	r1, #0
 80a31ba:	f002 f984 	bl	80a54c6 <digitalWrite>
        main_countDown = 0;
 80a31be:	2200      	movs	r2, #0
 80a31c0:	4b1b      	ldr	r3, [pc, #108]	; (80a3230 <_Z17switch_pumpe_mainii+0x14c>)
        WriteToDatabase("WASSER", "HAUPT-PUMPE AUSGESCHALTET ");
 80a31c2:	4922      	ldr	r1, [pc, #136]	; (80a324c <_Z17switch_pumpe_mainii+0x168>)
 80a31c4:	4813      	ldr	r0, [pc, #76]	; (80a3214 <_Z17switch_pumpe_mainii+0x130>)
        main_countDown = 0;
 80a31c6:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "HAUPT-PUMPE AUSGESCHALTET ");
 80a31c8:	f7fc ff98 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        new_level = ultra_sonic_measure();
 80a31cc:	f7fd fa72 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a31d0:	4d1f      	ldr	r5, [pc, #124]	; (80a3250 <_Z17switch_pumpe_mainii+0x16c>)
        WriteToDatabase("WASSER", "WASSERSTAND gefallen um [mm] : ", old_level - new_level);
 80a31d2:	4e11      	ldr	r6, [pc, #68]	; (80a3218 <_Z17switch_pumpe_mainii+0x134>)
        new_level = ultra_sonic_measure();
 80a31d4:	4602      	mov	r2, r0
        WriteToDatabase("WASSER", "WASSERSTAND after pumpe OFF : ", new_level);
 80a31d6:	491f      	ldr	r1, [pc, #124]	; (80a3254 <_Z17switch_pumpe_mainii+0x170>)
        new_level = ultra_sonic_measure();
 80a31d8:	6028      	str	r0, [r5, #0]
        WriteToDatabase("WASSER", "WASSERSTAND after pumpe OFF : ", new_level);
 80a31da:	480e      	ldr	r0, [pc, #56]	; (80a3214 <_Z17switch_pumpe_mainii+0x130>)
 80a31dc:	f7fc ffe2 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        WriteToDatabase("WASSER", "WASSERSTAND gefallen um [mm] : ", old_level - new_level);
 80a31e0:	682b      	ldr	r3, [r5, #0]
 80a31e2:	6832      	ldr	r2, [r6, #0]
 80a31e4:	491c      	ldr	r1, [pc, #112]	; (80a3258 <_Z17switch_pumpe_mainii+0x174>)
 80a31e6:	1ad2      	subs	r2, r2, r3
 80a31e8:	480a      	ldr	r0, [pc, #40]	; (80a3214 <_Z17switch_pumpe_mainii+0x130>)
 80a31ea:	f7fc ffdb 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        if ((old_level - new_level) > 3)
 80a31ee:	6833      	ldr	r3, [r6, #0]
 80a31f0:	682a      	ldr	r2, [r5, #0]
 80a31f2:	1a9b      	subs	r3, r3, r2
 80a31f4:	2b03      	cmp	r3, #3
 80a31f6:	ddba      	ble.n	80a316e <_Z17switch_pumpe_mainii+0x8a>
            WriteToDatabase("WASSER", "WASSERSTAND BLUMEN GIESSEN ERFOLGREICH BEENDET");
 80a31f8:	4918      	ldr	r1, [pc, #96]	; (80a325c <_Z17switch_pumpe_mainii+0x178>)
 80a31fa:	4806      	ldr	r0, [pc, #24]	; (80a3214 <_Z17switch_pumpe_mainii+0x130>)
 80a31fc:	f7fc ff7e 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a3200:	e7b5      	b.n	80a316e <_Z17switch_pumpe_mainii+0x8a>
 80a3202:	bf00      	nop
 80a3204:	080a86f5 	.word	0x080a86f5
 80a3208:	080a8725 	.word	0x080a8725
 80a320c:	20000354 	.word	0x20000354
 80a3210:	080a8747 	.word	0x080a8747
 80a3214:	080a7a4b 	.word	0x080a7a4b
 80a3218:	20000348 	.word	0x20000348
 80a321c:	080a8760 	.word	0x080a8760
 80a3220:	080a877f 	.word	0x080a877f
 80a3224:	200003f4 	.word	0x200003f4
 80a3228:	200003fc 	.word	0x200003fc
 80a322c:	200003f0 	.word	0x200003f0
 80a3230:	20000340 	.word	0x20000340
 80a3234:	080a87b8 	.word	0x080a87b8
 80a3238:	200001a0 	.word	0x200001a0
 80a323c:	080a885e 	.word	0x080a885e
 80a3240:	080a8062 	.word	0x080a8062
 80a3244:	080a8874 	.word	0x080a8874
 80a3248:	080a8093 	.word	0x080a8093
 80a324c:	080a87d5 	.word	0x080a87d5
 80a3250:	20000344 	.word	0x20000344
 80a3254:	080a87f0 	.word	0x080a87f0
 80a3258:	080a880f 	.word	0x080a880f
 80a325c:	080a882f 	.word	0x080a882f

080a3260 <_Z20switch_pumpe_reserveii>:
{
 80a3260:	b570      	push	{r4, r5, r6, lr}
 80a3262:	4604      	mov	r4, r0
 80a3264:	460e      	mov	r6, r1
    Serial.printlnf(" --------------------------------------------- ");
 80a3266:	f001 ff09 	bl	80a507c <_Z16_fetch_usbserialv>
 80a326a:	493b      	ldr	r1, [pc, #236]	; (80a3358 <_Z20switch_pumpe_reserveii+0xf8>)
 80a326c:	f7fc ff21 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(" RESERVE Pumpe schalten : %d Zeit %d", new_state, laufzeit);
 80a3270:	f001 ff04 	bl	80a507c <_Z16_fetch_usbserialv>
 80a3274:	4633      	mov	r3, r6
 80a3276:	4622      	mov	r2, r4
 80a3278:	4938      	ldr	r1, [pc, #224]	; (80a335c <_Z20switch_pumpe_reserveii+0xfc>)
 80a327a:	f7fc ff1a 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a327e:	2101      	movs	r1, #1
 80a3280:	2002      	movs	r0, #2
 80a3282:	f002 f90f 	bl	80a54a4 <pinMode>
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a3286:	2002      	movs	r0, #2
 80a3288:	f002 f936 	bl	80a54f8 <digitalRead>
 80a328c:	4d34      	ldr	r5, [pc, #208]	; (80a3360 <_Z20switch_pumpe_reserveii+0x100>)
    if ((new_state == ON) & (st_reserve_pumpe == OFF))
 80a328e:	2c01      	cmp	r4, #1
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a3290:	6028      	str	r0, [r5, #0]
    if ((new_state == ON) & (st_reserve_pumpe == OFF))
 80a3292:	d13d      	bne.n	80a3310 <_Z20switch_pumpe_reserveii+0xb0>
 80a3294:	2800      	cmp	r0, #0
 80a3296:	d13b      	bne.n	80a3310 <_Z20switch_pumpe_reserveii+0xb0>
        old_level = ultra_sonic_measure();
 80a3298:	f7fd fa0c 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a329c:	4b31      	ldr	r3, [pc, #196]	; (80a3364 <_Z20switch_pumpe_reserveii+0x104>)
 80a329e:	4602      	mov	r2, r0
 80a32a0:	6018      	str	r0, [r3, #0]
        WriteToDatabase("WASSER", "WASSERSTAND before res-pumpe ON : ", old_level);
 80a32a2:	4931      	ldr	r1, [pc, #196]	; (80a3368 <_Z20switch_pumpe_reserveii+0x108>)
 80a32a4:	4831      	ldr	r0, [pc, #196]	; (80a336c <_Z20switch_pumpe_reserveii+0x10c>)
 80a32a6:	f7fc ff7d 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        digitalWrite(DO_PUMPE_RESERVE, 1);
 80a32aa:	2101      	movs	r1, #1
 80a32ac:	2002      	movs	r0, #2
 80a32ae:	f002 f90a 	bl	80a54c6 <digitalWrite>
        WriteToDatabase("WASSER", "RESERVE-PUMPE EINGESCHALTET ");
 80a32b2:	492f      	ldr	r1, [pc, #188]	; (80a3370 <_Z20switch_pumpe_reserveii+0x110>)
 80a32b4:	482d      	ldr	r0, [pc, #180]	; (80a336c <_Z20switch_pumpe_reserveii+0x10c>)
 80a32b6:	f7fc ff21 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        tnow = getTime();
 80a32ba:	f7fd fc51 	bl	80a0b60 <_Z7getTimev>
 80a32be:	4b2d      	ldr	r3, [pc, #180]	; (80a3374 <_Z20switch_pumpe_reserveii+0x114>)
 80a32c0:	6018      	str	r0, [r3, #0]
        tres_stop = tsec + laufzeit;
 80a32c2:	4b2d      	ldr	r3, [pc, #180]	; (80a3378 <_Z20switch_pumpe_reserveii+0x118>)
 80a32c4:	6819      	ldr	r1, [r3, #0]
 80a32c6:	4b2d      	ldr	r3, [pc, #180]	; (80a337c <_Z20switch_pumpe_reserveii+0x11c>)
 80a32c8:	440e      	add	r6, r1
 80a32ca:	601e      	str	r6, [r3, #0]
    delay(250);
 80a32cc:	20fa      	movs	r0, #250	; 0xfa
 80a32ce:	f001 faa3 	bl	80a4818 <delay>
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a32d2:	2002      	movs	r0, #2
 80a32d4:	f002 f910 	bl	80a54f8 <digitalRead>
    Serial.printlnf(" AiPumpeReserve    : %d [mV]", AiPumpeReserve);
 80a32d8:	4c29      	ldr	r4, [pc, #164]	; (80a3380 <_Z20switch_pumpe_reserveii+0x120>)
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a32da:	6028      	str	r0, [r5, #0]
    Serial.printlnf(" DoPumpeReserve    : %d ", st_reserve_pumpe);
 80a32dc:	f001 fece 	bl	80a507c <_Z16_fetch_usbserialv>
 80a32e0:	682a      	ldr	r2, [r5, #0]
 80a32e2:	4928      	ldr	r1, [pc, #160]	; (80a3384 <_Z20switch_pumpe_reserveii+0x124>)
 80a32e4:	f7fc fee5 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    readAdcChannels();
 80a32e8:	f7fd fc62 	bl	80a0bb0 <_Z15readAdcChannelsv>
    Serial.printlnf(" AiPumpeReserve    : %d [mV]", AiPumpeReserve);
 80a32ec:	f001 fec6 	bl	80a507c <_Z16_fetch_usbserialv>
 80a32f0:	6822      	ldr	r2, [r4, #0]
 80a32f2:	4925      	ldr	r1, [pc, #148]	; (80a3388 <_Z20switch_pumpe_reserveii+0x128>)
 80a32f4:	f7fc fedd 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeReserve [mV] : ", AiPumpeReserve);
 80a32f8:	6822      	ldr	r2, [r4, #0]
 80a32fa:	4924      	ldr	r1, [pc, #144]	; (80a338c <_Z20switch_pumpe_reserveii+0x12c>)
 80a32fc:	4824      	ldr	r0, [pc, #144]	; (80a3390 <_Z20switch_pumpe_reserveii+0x130>)
 80a32fe:	f7fc ff51 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
    Serial.printlnf(" --------------------------------------------- ");
 80a3302:	f001 febb 	bl	80a507c <_Z16_fetch_usbserialv>
 80a3306:	4914      	ldr	r1, [pc, #80]	; (80a3358 <_Z20switch_pumpe_reserveii+0xf8>)
 80a3308:	f7fc fed3 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
}
 80a330c:	6828      	ldr	r0, [r5, #0]
 80a330e:	bd70      	pop	{r4, r5, r6, pc}
    if ((new_state == OFF) & (st_reserve_pumpe == ON))
 80a3310:	2c00      	cmp	r4, #0
 80a3312:	d1db      	bne.n	80a32cc <_Z20switch_pumpe_reserveii+0x6c>
 80a3314:	2801      	cmp	r0, #1
 80a3316:	d1d9      	bne.n	80a32cc <_Z20switch_pumpe_reserveii+0x6c>
        digitalWrite(DO_PUMPE_RESERVE, 0);
 80a3318:	2100      	movs	r1, #0
 80a331a:	2002      	movs	r0, #2
 80a331c:	f002 f8d3 	bl	80a54c6 <digitalWrite>
        WriteToDatabase("WASSER", "RESERVE-PUMPE AUSGESCHALTET. FUELLUNG NR. ",control.reserve_repetitions);
 80a3320:	4b1c      	ldr	r3, [pc, #112]	; (80a3394 <_Z20switch_pumpe_reserveii+0x134>)
 80a3322:	491d      	ldr	r1, [pc, #116]	; (80a3398 <_Z20switch_pumpe_reserveii+0x138>)
 80a3324:	691a      	ldr	r2, [r3, #16]
 80a3326:	4811      	ldr	r0, [pc, #68]	; (80a336c <_Z20switch_pumpe_reserveii+0x10c>)
 80a3328:	f7fc ff3c 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        new_level = ultra_sonic_measure();
 80a332c:	f7fd f9c2 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a3330:	4c1a      	ldr	r4, [pc, #104]	; (80a339c <_Z20switch_pumpe_reserveii+0x13c>)
        WriteToDatabase("WASSER", "WASSERSTAND after res-pumpe OFF : ", new_level);
 80a3332:	491b      	ldr	r1, [pc, #108]	; (80a33a0 <_Z20switch_pumpe_reserveii+0x140>)
        new_level = ultra_sonic_measure();
 80a3334:	4602      	mov	r2, r0
 80a3336:	6020      	str	r0, [r4, #0]
        WriteToDatabase("WASSER", "WASSERSTAND after res-pumpe OFF : ", new_level);
 80a3338:	480c      	ldr	r0, [pc, #48]	; (80a336c <_Z20switch_pumpe_reserveii+0x10c>)
 80a333a:	f7fc ff33 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        if ((new_level - old_level) > 5)
 80a333e:	4a09      	ldr	r2, [pc, #36]	; (80a3364 <_Z20switch_pumpe_reserveii+0x104>)
 80a3340:	6823      	ldr	r3, [r4, #0]
 80a3342:	6812      	ldr	r2, [r2, #0]
            WriteToDatabase("WASSER", " WASSERSTAND ERROR: TANK FUELLEN fehlgeschlagen");
 80a3344:	4809      	ldr	r0, [pc, #36]	; (80a336c <_Z20switch_pumpe_reserveii+0x10c>)
        if ((new_level - old_level) > 5)
 80a3346:	1a9b      	subs	r3, r3, r2
 80a3348:	2b05      	cmp	r3, #5
            WriteToDatabase("WASSER", " WASSERSTAND TANK FUELLEN ERFOLGREICH BEENDET");
 80a334a:	bfcc      	ite	gt
 80a334c:	4915      	ldrgt	r1, [pc, #84]	; (80a33a4 <_Z20switch_pumpe_reserveii+0x144>)
            WriteToDatabase("WASSER", " WASSERSTAND ERROR: TANK FUELLEN fehlgeschlagen");
 80a334e:	4916      	ldrle	r1, [pc, #88]	; (80a33a8 <_Z20switch_pumpe_reserveii+0x148>)
 80a3350:	f7fc fed4 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a3354:	e7ba      	b.n	80a32cc <_Z20switch_pumpe_reserveii+0x6c>
 80a3356:	bf00      	nop
 80a3358:	080a86f5 	.word	0x080a86f5
 80a335c:	080a8888 	.word	0x080a8888
 80a3360:	20000358 	.word	0x20000358
 80a3364:	20000348 	.word	0x20000348
 80a3368:	080a88ad 	.word	0x080a88ad
 80a336c:	080a7a4b 	.word	0x080a7a4b
 80a3370:	080a88d0 	.word	0x080a88d0
 80a3374:	200003f4 	.word	0x200003f4
 80a3378:	200003fc 	.word	0x200003fc
 80a337c:	200003f8 	.word	0x200003f8
 80a3380:	200001a4 	.word	0x200001a4
 80a3384:	080a8999 	.word	0x080a8999
 80a3388:	080a89b2 	.word	0x080a89b2
 80a338c:	080a80b1 	.word	0x080a80b1
 80a3390:	080a8093 	.word	0x080a8093
 80a3394:	20000310 	.word	0x20000310
 80a3398:	080a88ed 	.word	0x080a88ed
 80a339c:	20000344 	.word	0x20000344
 80a33a0:	080a8918 	.word	0x080a8918
 80a33a4:	080a893b 	.word	0x080a893b
 80a33a8:	080a8969 	.word	0x080a8969

080a33ac <_Z17switch_pumpe_funkii>:
{
 80a33ac:	b510      	push	{r4, lr}
 80a33ae:	4604      	mov	r4, r0
    if (newState == ON)
 80a33b0:	2c01      	cmp	r4, #1
{
 80a33b2:	4608      	mov	r0, r1
    if (newState == ON)
 80a33b4:	d103      	bne.n	80a33be <_Z17switch_pumpe_funkii+0x12>
 80a33b6:	f7ff fe71 	bl	80a309c <_Z17switch_pumpe_funkii.part.0>
}
 80a33ba:	4620      	mov	r0, r4
 80a33bc:	bd10      	pop	{r4, pc}
        conrad_rsl_switch_code(RSL2, AUS); // Dosen-Label RSL2
 80a33be:	2100      	movs	r1, #0
 80a33c0:	2002      	movs	r0, #2
 80a33c2:	f7ff fd57 	bl	80a2e74 <_Z22conrad_rsl_switch_codeii>
        st_funk_pumpe = OFF;
 80a33c6:	2200      	movs	r2, #0
 80a33c8:	4b05      	ldr	r3, [pc, #20]	; (80a33e0 <_Z17switch_pumpe_funkii+0x34>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
 80a33ca:	4906      	ldr	r1, [pc, #24]	; (80a33e4 <_Z17switch_pumpe_funkii+0x38>)
        st_funk_pumpe = OFF;
 80a33cc:	601a      	str	r2, [r3, #0]
        tfunk_stop = 4000;
 80a33ce:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80a33d2:	4b05      	ldr	r3, [pc, #20]	; (80a33e8 <_Z17switch_pumpe_funkii+0x3c>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
 80a33d4:	4805      	ldr	r0, [pc, #20]	; (80a33ec <_Z17switch_pumpe_funkii+0x40>)
        tfunk_stop = 4000;
 80a33d6:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
 80a33d8:	f7fc fe90 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a33dc:	e7ed      	b.n	80a33ba <_Z17switch_pumpe_funkii+0xe>
 80a33de:	bf00      	nop
 80a33e0:	20000350 	.word	0x20000350
 80a33e4:	080a89cf 	.word	0x080a89cf
 80a33e8:	200003b8 	.word	0x200003b8
 80a33ec:	080a7a4b 	.word	0x080a7a4b

080a33f0 <_Z13BlumenGiessenii>:
now = 1 : jetzt sofort Giessen
now = 0 : giesse wenn tnow = ts zur geplanten Zeit
done_giessen muß 0 sein
---------------------------------------------------------------------*/
void BlumenGiessen(int now, int ts)
{
 80a33f0:	b538      	push	{r3, r4, r5, lr}
    int day = 0;

    if (done_giessen == 1) return;
 80a33f2:	4c18      	ldr	r4, [pc, #96]	; (80a3454 <_Z13BlumenGiessenii+0x64>)
 80a33f4:	6823      	ldr	r3, [r4, #0]
 80a33f6:	2b01      	cmp	r3, #1
 80a33f8:	d00e      	beq.n	80a3418 <_Z13BlumenGiessenii+0x28>
    
    if (tnow == ts || now == 1)
 80a33fa:	4b17      	ldr	r3, [pc, #92]	; (80a3458 <_Z13BlumenGiessenii+0x68>)
 80a33fc:	681b      	ldr	r3, [r3, #0]
 80a33fe:	428b      	cmp	r3, r1
 80a3400:	d001      	beq.n	80a3406 <_Z13BlumenGiessenii+0x16>
 80a3402:	2801      	cmp	r0, #1
 80a3404:	d108      	bne.n	80a3418 <_Z13BlumenGiessenii+0x28>
    {
        if (control.dontGiessen == 1)
 80a3406:	4b15      	ldr	r3, [pc, #84]	; (80a345c <_Z13BlumenGiessenii+0x6c>)
 80a3408:	689d      	ldr	r5, [r3, #8]
 80a340a:	2d01      	cmp	r5, #1
 80a340c:	d105      	bne.n	80a341a <_Z13BlumenGiessenii+0x2a>
        {
            WriteToDatabase("WASSER", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a340e:	4914      	ldr	r1, [pc, #80]	; (80a3460 <_Z13BlumenGiessenii+0x70>)
 80a3410:	4814      	ldr	r0, [pc, #80]	; (80a3464 <_Z13BlumenGiessenii+0x74>)
 80a3412:	f7fc fe73 	bl	80a00fc <_Z15WriteToDatabasePcS_>
            done_giessen = 1;
 80a3416:	6025      	str	r5, [r4, #0]
            delay(1000);
            st_funk_pumpe = switch_pumpe_funk(ON, 10);
        }
        done_giessen = 1;
    }
}
 80a3418:	bd38      	pop	{r3, r4, r5, pc}
        st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a341a:	68d9      	ldr	r1, [r3, #12]
 80a341c:	2001      	movs	r0, #1
 80a341e:	f7ff fe61 	bl	80a30e4 <_Z17switch_pumpe_mainii>
 80a3422:	4b11      	ldr	r3, [pc, #68]	; (80a3468 <_Z13BlumenGiessenii+0x78>)
 80a3424:	6018      	str	r0, [r3, #0]
        day = Time.weekday(); // North American implementation : Sunday is day number one, Monday is day numer two
 80a3426:	f001 f9d1 	bl	80a47cc <_ZN9TimeClass7weekdayEv>
        if ( (day %2) == 0) // Monday, Wednesday, Friday, Sunday 
 80a342a:	f010 0101 	ands.w	r1, r0, #1
 80a342e:	d10d      	bne.n	80a344c <_Z13BlumenGiessenii+0x5c>
            st_funk_pumpe = switch_pumpe_funk(OFF,0);
 80a3430:	4608      	mov	r0, r1
 80a3432:	f7ff ffbb 	bl	80a33ac <_Z17switch_pumpe_funkii>
 80a3436:	4d0d      	ldr	r5, [pc, #52]	; (80a346c <_Z13BlumenGiessenii+0x7c>)
 80a3438:	6028      	str	r0, [r5, #0]
            delay(1000);
 80a343a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a343e:	f001 f9eb 	bl	80a4818 <delay>
    if (newState == ON)
 80a3442:	200a      	movs	r0, #10
 80a3444:	f7ff fe2a 	bl	80a309c <_Z17switch_pumpe_funkii.part.0>
            st_funk_pumpe = switch_pumpe_funk(ON, 10);
 80a3448:	2301      	movs	r3, #1
 80a344a:	602b      	str	r3, [r5, #0]
        done_giessen = 1;
 80a344c:	2301      	movs	r3, #1
 80a344e:	6023      	str	r3, [r4, #0]
 80a3450:	e7e2      	b.n	80a3418 <_Z13BlumenGiessenii+0x28>
 80a3452:	bf00      	nop
 80a3454:	20000324 	.word	0x20000324
 80a3458:	200003f4 	.word	0x200003f4
 80a345c:	20000310 	.word	0x20000310
 80a3460:	080a8214 	.word	0x080a8214
 80a3464:	080a7a4b 	.word	0x080a7a4b
 80a3468:	20000354 	.word	0x20000354
 80a346c:	20000350 	.word	0x20000350

080a3470 <_Z11TankFuelleni>:
/*---------------------------------------------------------------------
Tank fuellen -> schalte reserve pumpe ein wenn der Wasserstand 
kleiner als der critical level ist
---------------------------------------------------------------------*/
void TankFuellen(int critical_level)
{
 80a3470:	b510      	push	{r4, lr}
 80a3472:	4604      	mov	r4, r0
    println(" Tankfuellen() ");
 80a3474:	4819      	ldr	r0, [pc, #100]	; (80a34dc <_Z11TankFuelleni+0x6c>)
 80a3476:	f7fe f8e3 	bl	80a1640 <_Z7printlnPc>

    waterlevel = ultra_sonic_measure();
 80a347a:	f7fd f91b 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a347e:	4b18      	ldr	r3, [pc, #96]	; (80a34e0 <_Z11TankFuelleni+0x70>)

    if (waterlevel > critical_level)
 80a3480:	42a0      	cmp	r0, r4
    waterlevel = ultra_sonic_measure();
 80a3482:	6018      	str	r0, [r3, #0]
    if (waterlevel > critical_level)
 80a3484:	dd05      	ble.n	80a3492 <_Z11TankFuelleni+0x22>
    {
            WriteToDatabase("WASSER", " TANKFUELLEN : NICHT NOTWENDIG ");
 80a3486:	4917      	ldr	r1, [pc, #92]	; (80a34e4 <_Z11TankFuelleni+0x74>)
    if ((waterlevel > 0) & (waterlevel < critical_level) & (st_reserve_pumpe == OFF))
    {

        if (control.dontGiessen == 1)
        {
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a3488:	4817      	ldr	r0, [pc, #92]	; (80a34e8 <_Z11TankFuelleni+0x78>)
        }

        WriteToDatabase("WASSER", "WASSERSTAND TANK FUELLEN gestartet ");
        st_reserve_pumpe = switch_pumpe_reserve(1, RESERVE_PUMPE_LAUFZEIT);
    }
}
 80a348a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a348e:	f7fc be35 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
    if(control.reserve_repetitions > MAX_NACHFUELL_REPETITIONS)
 80a3492:	4b16      	ldr	r3, [pc, #88]	; (80a34ec <_Z11TankFuelleni+0x7c>)
 80a3494:	691a      	ldr	r2, [r3, #16]
 80a3496:	2a05      	cmp	r2, #5
 80a3498:	d905      	bls.n	80a34a6 <_Z11TankFuelleni+0x36>
}
 80a349a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WriteToDatabase("WASSER", "ERROR - ABORT: Wiederholungen des Tankfuellens ueberschritten = ",control.reserve_repetitions);    
 80a349e:	4914      	ldr	r1, [pc, #80]	; (80a34f0 <_Z11TankFuelleni+0x80>)
 80a34a0:	4811      	ldr	r0, [pc, #68]	; (80a34e8 <_Z11TankFuelleni+0x78>)
 80a34a2:	f7fc be7f 	b.w	80a01a4 <_Z15WriteToDatabasePcS_i>
    if ((waterlevel > 0) & (waterlevel < critical_level) & (st_reserve_pumpe == OFF))
 80a34a6:	2800      	cmp	r0, #0
 80a34a8:	bfd4      	ite	le
 80a34aa:	2200      	movle	r2, #0
 80a34ac:	2201      	movgt	r2, #1
 80a34ae:	42a0      	cmp	r0, r4
 80a34b0:	bfa8      	it	ge
 80a34b2:	2200      	movge	r2, #0
 80a34b4:	b182      	cbz	r2, 80a34d8 <_Z11TankFuelleni+0x68>
 80a34b6:	4c0f      	ldr	r4, [pc, #60]	; (80a34f4 <_Z11TankFuelleni+0x84>)
 80a34b8:	6822      	ldr	r2, [r4, #0]
 80a34ba:	b96a      	cbnz	r2, 80a34d8 <_Z11TankFuelleni+0x68>
        if (control.dontGiessen == 1)
 80a34bc:	689b      	ldr	r3, [r3, #8]
 80a34be:	2b01      	cmp	r3, #1
 80a34c0:	d101      	bne.n	80a34c6 <_Z11TankFuelleni+0x56>
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a34c2:	490d      	ldr	r1, [pc, #52]	; (80a34f8 <_Z11TankFuelleni+0x88>)
 80a34c4:	e7e0      	b.n	80a3488 <_Z11TankFuelleni+0x18>
        WriteToDatabase("WASSER", "WASSERSTAND TANK FUELLEN gestartet ");
 80a34c6:	490d      	ldr	r1, [pc, #52]	; (80a34fc <_Z11TankFuelleni+0x8c>)
 80a34c8:	4807      	ldr	r0, [pc, #28]	; (80a34e8 <_Z11TankFuelleni+0x78>)
 80a34ca:	f7fc fe17 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        st_reserve_pumpe = switch_pumpe_reserve(1, RESERVE_PUMPE_LAUFZEIT);
 80a34ce:	215a      	movs	r1, #90	; 0x5a
 80a34d0:	2001      	movs	r0, #1
 80a34d2:	f7ff fec5 	bl	80a3260 <_Z20switch_pumpe_reserveii>
 80a34d6:	6020      	str	r0, [r4, #0]
}
 80a34d8:	bd10      	pop	{r4, pc}
 80a34da:	bf00      	nop
 80a34dc:	080a89ee 	.word	0x080a89ee
 80a34e0:	20000028 	.word	0x20000028
 80a34e4:	080a89fe 	.word	0x080a89fe
 80a34e8:	080a7a4b 	.word	0x080a7a4b
 80a34ec:	20000310 	.word	0x20000310
 80a34f0:	080a8a1e 	.word	0x080a8a1e
 80a34f4:	20000358 	.word	0x20000358
 80a34f8:	080a8a5f 	.word	0x080a8a5f
 80a34fc:	080a8a99 	.word	0x080a8a99

080a3500 <_Z9CountDownv>:
{
 80a3500:	b570      	push	{r4, r5, r6, lr}
    tnow = getTime();
 80a3502:	f7fd fb2d 	bl	80a0b60 <_Z7getTimev>
 80a3506:	4b2a      	ldr	r3, [pc, #168]	; (80a35b0 <_Z9CountDownv+0xb0>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a3508:	4e2a      	ldr	r6, [pc, #168]	; (80a35b4 <_Z9CountDownv+0xb4>)
    tnow = getTime();
 80a350a:	6018      	str	r0, [r3, #0]
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a350c:	2001      	movs	r0, #1
 80a350e:	f001 fff3 	bl	80a54f8 <digitalRead>
    if (st_main_pumpe == ON)
 80a3512:	2801      	cmp	r0, #1
 80a3514:	4c28      	ldr	r4, [pc, #160]	; (80a35b8 <_Z9CountDownv+0xb8>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a3516:	6030      	str	r0, [r6, #0]
    if (st_main_pumpe == ON)
 80a3518:	d119      	bne.n	80a354e <_Z9CountDownv+0x4e>
        println("tmain stop", tmain_stop);
 80a351a:	4d28      	ldr	r5, [pc, #160]	; (80a35bc <_Z9CountDownv+0xbc>)
        println("tsec", tsec);
 80a351c:	6821      	ldr	r1, [r4, #0]
 80a351e:	4828      	ldr	r0, [pc, #160]	; (80a35c0 <_Z9CountDownv+0xc0>)
 80a3520:	f7fe fb00 	bl	80a1b24 <_Z7printlnPci>
        println("tmain stop", tmain_stop);
 80a3524:	6829      	ldr	r1, [r5, #0]
 80a3526:	4827      	ldr	r0, [pc, #156]	; (80a35c4 <_Z9CountDownv+0xc4>)
 80a3528:	f7fe fafc 	bl	80a1b24 <_Z7printlnPci>
    if ((st_main_pumpe == ON) & (tsec > tmain_stop ))
 80a352c:	6822      	ldr	r2, [r4, #0]
 80a352e:	682b      	ldr	r3, [r5, #0]
 80a3530:	429a      	cmp	r2, r3
 80a3532:	dd0c      	ble.n	80a354e <_Z9CountDownv+0x4e>
 80a3534:	6833      	ldr	r3, [r6, #0]
 80a3536:	2b01      	cmp	r3, #1
 80a3538:	d109      	bne.n	80a354e <_Z9CountDownv+0x4e>
        switch_pumpe_main(OFF, 0);
 80a353a:	2100      	movs	r1, #0
        tmain_stop = 4000;
 80a353c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
        switch_pumpe_main(OFF, 0);
 80a3540:	4608      	mov	r0, r1
        tmain_stop = 4000;
 80a3542:	602b      	str	r3, [r5, #0]
        switch_pumpe_main(OFF, 0);
 80a3544:	f7ff fdce 	bl	80a30e4 <_Z17switch_pumpe_mainii>
        TankFuellen(LOW_LEVEL_TANKFUELLEN);
 80a3548:	205f      	movs	r0, #95	; 0x5f
 80a354a:	f7ff ff91 	bl	80a3470 <_Z11TankFuelleni>
     st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);   
 80a354e:	2002      	movs	r0, #2
 80a3550:	f001 ffd2 	bl	80a54f8 <digitalRead>
 80a3554:	4b1c      	ldr	r3, [pc, #112]	; (80a35c8 <_Z9CountDownv+0xc8>)
    if ((st_reserve_pumpe == ON) & (tsec > tres_stop))
 80a3556:	6821      	ldr	r1, [r4, #0]
     st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);   
 80a3558:	6018      	str	r0, [r3, #0]
    if ((st_reserve_pumpe == ON) & (tsec > tres_stop))
 80a355a:	4b1c      	ldr	r3, [pc, #112]	; (80a35cc <_Z9CountDownv+0xcc>)
 80a355c:	681a      	ldr	r2, [r3, #0]
 80a355e:	4291      	cmp	r1, r2
 80a3560:	dd13      	ble.n	80a358a <_Z9CountDownv+0x8a>
 80a3562:	2801      	cmp	r0, #1
 80a3564:	d111      	bne.n	80a358a <_Z9CountDownv+0x8a>
        tres_stop = 4000;
 80a3566:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
        control.reserve_repetitions++;
 80a356a:	4d19      	ldr	r5, [pc, #100]	; (80a35d0 <_Z9CountDownv+0xd0>)
        tres_stop = 4000;
 80a356c:	601a      	str	r2, [r3, #0]
        control.reserve_repetitions++;
 80a356e:	692b      	ldr	r3, [r5, #16]
 80a3570:	3301      	adds	r3, #1
 80a3572:	612b      	str	r3, [r5, #16]
        EEPROM.put(0, control);            
 80a3574:	f002 f852 	bl	80a561c <_Z21__fetch_global_EEPROMv>
 80a3578:	4629      	mov	r1, r5
 80a357a:	2000      	movs	r0, #0
 80a357c:	2214      	movs	r2, #20
 80a357e:	f000 f8d1 	bl	80a3724 <HAL_EEPROM_Put>
        switch_pumpe_reserve(OFF, 0);
 80a3582:	2100      	movs	r1, #0
 80a3584:	4608      	mov	r0, r1
 80a3586:	f7ff fe6b 	bl	80a3260 <_Z20switch_pumpe_reserveii>
    if ((st_funk_pumpe == ON) & (tsec > tfunk_stop ))
 80a358a:	4b12      	ldr	r3, [pc, #72]	; (80a35d4 <_Z9CountDownv+0xd4>)
 80a358c:	6821      	ldr	r1, [r4, #0]
 80a358e:	681a      	ldr	r2, [r3, #0]
 80a3590:	4291      	cmp	r1, r2
 80a3592:	dd0c      	ble.n	80a35ae <_Z9CountDownv+0xae>
 80a3594:	4a10      	ldr	r2, [pc, #64]	; (80a35d8 <_Z9CountDownv+0xd8>)
 80a3596:	6812      	ldr	r2, [r2, #0]
 80a3598:	2a01      	cmp	r2, #1
 80a359a:	d108      	bne.n	80a35ae <_Z9CountDownv+0xae>
        tfunk_stop = 4000;
 80a359c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
        switch_pumpe_funk(OFF, 0);
 80a35a0:	2100      	movs	r1, #0
        tfunk_stop = 4000;
 80a35a2:	601a      	str	r2, [r3, #0]
        switch_pumpe_funk(OFF, 0);
 80a35a4:	4608      	mov	r0, r1
}
 80a35a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        switch_pumpe_funk(OFF, 0);
 80a35aa:	f7ff beff 	b.w	80a33ac <_Z17switch_pumpe_funkii>
}
 80a35ae:	bd70      	pop	{r4, r5, r6, pc}
 80a35b0:	200003f4 	.word	0x200003f4
 80a35b4:	20000354 	.word	0x20000354
 80a35b8:	200003fc 	.word	0x200003fc
 80a35bc:	200003f0 	.word	0x200003f0
 80a35c0:	080a8abd 	.word	0x080a8abd
 80a35c4:	080a8ac2 	.word	0x080a8ac2
 80a35c8:	20000358 	.word	0x20000358
 80a35cc:	200003f8 	.word	0x200003f8
 80a35d0:	20000310 	.word	0x20000310
 80a35d4:	200003b8 	.word	0x200003b8
 80a35d8:	20000350 	.word	0x20000350

080a35dc <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
 80a35dc:	f001 b91c 	b.w	80a4818 <delay>

080a35e0 <_Z11BlynkMillisv>:
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a35e0:	f000 b888 	b.w	80a36f4 <HAL_Timer_Get_Milli_Seconds>

080a35e4 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
 80a35e4:	4770      	bx	lr

080a35e6 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
 80a35e6:	4770      	bx	lr

080a35e8 <BlynkNoOpCbk>:
{}
 80a35e8:	4770      	bx	lr
	...

080a35ec <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
 80a35ec:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
 80a35ee:	bf5a      	itte	pl
 80a35f0:	4b02      	ldrpl	r3, [pc, #8]	; (80a35fc <GetReadHandler+0x10>)
 80a35f2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
 80a35f6:	2000      	movmi	r0, #0
#endif
}
 80a35f8:	4770      	bx	lr
 80a35fa:	bf00      	nop
 80a35fc:	080a8ad0 	.word	0x080a8ad0

080a3600 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
 80a3600:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
 80a3602:	bf5a      	itte	pl
 80a3604:	4b02      	ldrpl	r3, [pc, #8]	; (80a3610 <GetWriteHandler+0x10>)
 80a3606:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
 80a360a:	2000      	movmi	r0, #0
#endif
}
 80a360c:	4770      	bx	lr
 80a360e:	bf00      	nop
 80a3610:	080a8cd0 	.word	0x080a8cd0

080a3614 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a3614:	b508      	push	{r3, lr}
 80a3616:	4b02      	ldr	r3, [pc, #8]	; (80a3620 <HAL_Pin_Map+0xc>)
 80a3618:	681b      	ldr	r3, [r3, #0]
 80a361a:	681b      	ldr	r3, [r3, #0]
 80a361c:	9301      	str	r3, [sp, #4]
 80a361e:	bd08      	pop	{r3, pc}
 80a3620:	080601b0 	.word	0x080601b0

080a3624 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a3624:	b508      	push	{r3, lr}
 80a3626:	4b02      	ldr	r3, [pc, #8]	; (80a3630 <HAL_Validate_Pin_Function+0xc>)
 80a3628:	681b      	ldr	r3, [r3, #0]
 80a362a:	685b      	ldr	r3, [r3, #4]
 80a362c:	9301      	str	r3, [sp, #4]
 80a362e:	bd08      	pop	{r3, pc}
 80a3630:	080601b0 	.word	0x080601b0

080a3634 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3634:	b508      	push	{r3, lr}
 80a3636:	4b02      	ldr	r3, [pc, #8]	; (80a3640 <HAL_Pin_Mode+0xc>)
 80a3638:	681b      	ldr	r3, [r3, #0]
 80a363a:	689b      	ldr	r3, [r3, #8]
 80a363c:	9301      	str	r3, [sp, #4]
 80a363e:	bd08      	pop	{r3, pc}
 80a3640:	080601b0 	.word	0x080601b0

080a3644 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3644:	b508      	push	{r3, lr}
 80a3646:	4b02      	ldr	r3, [pc, #8]	; (80a3650 <HAL_Get_Pin_Mode+0xc>)
 80a3648:	681b      	ldr	r3, [r3, #0]
 80a364a:	68db      	ldr	r3, [r3, #12]
 80a364c:	9301      	str	r3, [sp, #4]
 80a364e:	bd08      	pop	{r3, pc}
 80a3650:	080601b0 	.word	0x080601b0

080a3654 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3654:	b508      	push	{r3, lr}
 80a3656:	4b02      	ldr	r3, [pc, #8]	; (80a3660 <HAL_GPIO_Write+0xc>)
 80a3658:	681b      	ldr	r3, [r3, #0]
 80a365a:	691b      	ldr	r3, [r3, #16]
 80a365c:	9301      	str	r3, [sp, #4]
 80a365e:	bd08      	pop	{r3, pc}
 80a3660:	080601b0 	.word	0x080601b0

080a3664 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3664:	b508      	push	{r3, lr}
 80a3666:	4b02      	ldr	r3, [pc, #8]	; (80a3670 <HAL_GPIO_Read+0xc>)
 80a3668:	681b      	ldr	r3, [r3, #0]
 80a366a:	695b      	ldr	r3, [r3, #20]
 80a366c:	9301      	str	r3, [sp, #4]
 80a366e:	bd08      	pop	{r3, pc}
 80a3670:	080601b0 	.word	0x080601b0

080a3674 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a3674:	b508      	push	{r3, lr}
 80a3676:	4b02      	ldr	r3, [pc, #8]	; (80a3680 <HAL_Interrupts_Enable_All+0xc>)
 80a3678:	681b      	ldr	r3, [r3, #0]
 80a367a:	6a1b      	ldr	r3, [r3, #32]
 80a367c:	9301      	str	r3, [sp, #4]
 80a367e:	bd08      	pop	{r3, pc}
 80a3680:	080601b0 	.word	0x080601b0

080a3684 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a3684:	b508      	push	{r3, lr}
 80a3686:	4b02      	ldr	r3, [pc, #8]	; (80a3690 <HAL_Interrupts_Disable_All+0xc>)
 80a3688:	681b      	ldr	r3, [r3, #0]
 80a368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a368c:	9301      	str	r3, [sp, #4]
 80a368e:	bd08      	pop	{r3, pc}
 80a3690:	080601b0 	.word	0x080601b0

080a3694 <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a3694:	b508      	push	{r3, lr}
 80a3696:	4b02      	ldr	r3, [pc, #8]	; (80a36a0 <HAL_DAC_Write+0xc>)
 80a3698:	681b      	ldr	r3, [r3, #0]
 80a369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a369c:	9301      	str	r3, [sp, #4]
 80a369e:	bd08      	pop	{r3, pc}
 80a36a0:	080601b0 	.word	0x080601b0

080a36a4 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a36a4:	b508      	push	{r3, lr}
 80a36a6:	4b02      	ldr	r3, [pc, #8]	; (80a36b0 <hal_adc_read+0xc>)
 80a36a8:	681b      	ldr	r3, [r3, #0]
 80a36aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a36ac:	9301      	str	r3, [sp, #4]
 80a36ae:	bd08      	pop	{r3, pc}
 80a36b0:	080601b0 	.word	0x080601b0

080a36b4 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a36b4:	b508      	push	{r3, lr}
 80a36b6:	4b02      	ldr	r3, [pc, #8]	; (80a36c0 <HAL_Pulse_In+0xc>)
 80a36b8:	681b      	ldr	r3, [r3, #0]
 80a36ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a36bc:	9301      	str	r3, [sp, #4]
 80a36be:	bd08      	pop	{r3, pc}
 80a36c0:	080601b0 	.word	0x080601b0

080a36c4 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 80a36c4:	b508      	push	{r3, lr}
 80a36c6:	4b02      	ldr	r3, [pc, #8]	; (80a36d0 <hal_pwm_write_ext+0xc>)
 80a36c8:	681b      	ldr	r3, [r3, #0]
 80a36ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a36cc:	9301      	str	r3, [sp, #4]
 80a36ce:	bd08      	pop	{r3, pc}
 80a36d0:	080601b0 	.word	0x080601b0

080a36d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a36d4:	b508      	push	{r3, lr}
 80a36d6:	4b02      	ldr	r3, [pc, #8]	; (80a36e0 <HAL_RNG_GetRandomNumber+0xc>)
 80a36d8:	681b      	ldr	r3, [r3, #0]
 80a36da:	685b      	ldr	r3, [r3, #4]
 80a36dc:	9301      	str	r3, [sp, #4]
 80a36de:	bd08      	pop	{r3, pc}
 80a36e0:	0806019c 	.word	0x0806019c

080a36e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a36e4:	b508      	push	{r3, lr}
 80a36e6:	4b02      	ldr	r3, [pc, #8]	; (80a36f0 <HAL_Delay_Microseconds+0xc>)
 80a36e8:	681b      	ldr	r3, [r3, #0]
 80a36ea:	68db      	ldr	r3, [r3, #12]
 80a36ec:	9301      	str	r3, [sp, #4]
 80a36ee:	bd08      	pop	{r3, pc}
 80a36f0:	0806019c 	.word	0x0806019c

080a36f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a36f4:	b508      	push	{r3, lr}
 80a36f6:	4b02      	ldr	r3, [pc, #8]	; (80a3700 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a36f8:	681b      	ldr	r3, [r3, #0]
 80a36fa:	695b      	ldr	r3, [r3, #20]
 80a36fc:	9301      	str	r3, [sp, #4]
 80a36fe:	bd08      	pop	{r3, pc}
 80a3700:	0806019c 	.word	0x0806019c

080a3704 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a3704:	b508      	push	{r3, lr}
 80a3706:	4b02      	ldr	r3, [pc, #8]	; (80a3710 <HAL_EEPROM_Init+0xc>)
 80a3708:	681b      	ldr	r3, [r3, #0]
 80a370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a370c:	9301      	str	r3, [sp, #4]
 80a370e:	bd08      	pop	{r3, pc}
 80a3710:	0806019c 	.word	0x0806019c

080a3714 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a3714:	b508      	push	{r3, lr}
 80a3716:	4b02      	ldr	r3, [pc, #8]	; (80a3720 <HAL_EEPROM_Get+0xc>)
 80a3718:	681b      	ldr	r3, [r3, #0]
 80a371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a371c:	9301      	str	r3, [sp, #4]
 80a371e:	bd08      	pop	{r3, pc}
 80a3720:	0806019c 	.word	0x0806019c

080a3724 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a3724:	b508      	push	{r3, lr}
 80a3726:	4b02      	ldr	r3, [pc, #8]	; (80a3730 <HAL_EEPROM_Put+0xc>)
 80a3728:	681b      	ldr	r3, [r3, #0]
 80a372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a372c:	9301      	str	r3, [sp, #4]
 80a372e:	bd08      	pop	{r3, pc}
 80a3730:	0806019c 	.word	0x0806019c

080a3734 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a3734:	b508      	push	{r3, lr}
 80a3736:	4b02      	ldr	r3, [pc, #8]	; (80a3740 <hal_rtc_time_is_valid+0xc>)
 80a3738:	681b      	ldr	r3, [r3, #0]
 80a373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a373c:	9301      	str	r3, [sp, #4]
 80a373e:	bd08      	pop	{r3, pc}
 80a3740:	0806019c 	.word	0x0806019c

080a3744 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a3744:	b508      	push	{r3, lr}
 80a3746:	4b02      	ldr	r3, [pc, #8]	; (80a3750 <hal_rtc_get_time+0xc>)
 80a3748:	681b      	ldr	r3, [r3, #0]
 80a374a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a374c:	9301      	str	r3, [sp, #4]
 80a374e:	bd08      	pop	{r3, pc}
 80a3750:	0806019c 	.word	0x0806019c

080a3754 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3754:	b508      	push	{r3, lr}
 80a3756:	4b02      	ldr	r3, [pc, #8]	; (80a3760 <os_mutex_recursive_create+0xc>)
 80a3758:	681b      	ldr	r3, [r3, #0]
 80a375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a375c:	9301      	str	r3, [sp, #4]
 80a375e:	bd08      	pop	{r3, pc}
 80a3760:	080601d0 	.word	0x080601d0

080a3764 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a3764:	b508      	push	{r3, lr}
 80a3766:	4b02      	ldr	r3, [pc, #8]	; (80a3770 <os_mutex_recursive_destroy+0xc>)
 80a3768:	681b      	ldr	r3, [r3, #0]
 80a376a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a376c:	9301      	str	r3, [sp, #4]
 80a376e:	bd08      	pop	{r3, pc}
 80a3770:	080601d0 	.word	0x080601d0

080a3774 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a3774:	b508      	push	{r3, lr}
 80a3776:	4b02      	ldr	r3, [pc, #8]	; (80a3780 <hal_usart_write+0xc>)
 80a3778:	681b      	ldr	r3, [r3, #0]
 80a377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a377c:	9301      	str	r3, [sp, #4]
 80a377e:	bd08      	pop	{r3, pc}
 80a3780:	080601c4 	.word	0x080601c4

080a3784 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a3784:	b508      	push	{r3, lr}
 80a3786:	4b02      	ldr	r3, [pc, #8]	; (80a3790 <hal_usart_available+0xc>)
 80a3788:	681b      	ldr	r3, [r3, #0]
 80a378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a378c:	9301      	str	r3, [sp, #4]
 80a378e:	bd08      	pop	{r3, pc}
 80a3790:	080601c4 	.word	0x080601c4

080a3794 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a3794:	b508      	push	{r3, lr}
 80a3796:	4b02      	ldr	r3, [pc, #8]	; (80a37a0 <hal_usart_read+0xc>)
 80a3798:	681b      	ldr	r3, [r3, #0]
 80a379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a379c:	9301      	str	r3, [sp, #4]
 80a379e:	bd08      	pop	{r3, pc}
 80a37a0:	080601c4 	.word	0x080601c4

080a37a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a37a4:	b508      	push	{r3, lr}
 80a37a6:	4b02      	ldr	r3, [pc, #8]	; (80a37b0 <hal_usart_peek+0xc>)
 80a37a8:	681b      	ldr	r3, [r3, #0]
 80a37aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a37ac:	9301      	str	r3, [sp, #4]
 80a37ae:	bd08      	pop	{r3, pc}
 80a37b0:	080601c4 	.word	0x080601c4

080a37b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a37b4:	b508      	push	{r3, lr}
 80a37b6:	4b02      	ldr	r3, [pc, #8]	; (80a37c0 <hal_usart_flush+0xc>)
 80a37b8:	681b      	ldr	r3, [r3, #0]
 80a37ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a37bc:	9301      	str	r3, [sp, #4]
 80a37be:	bd08      	pop	{r3, pc}
 80a37c0:	080601c4 	.word	0x080601c4

080a37c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a37c4:	b508      	push	{r3, lr}
 80a37c6:	4b02      	ldr	r3, [pc, #8]	; (80a37d0 <hal_usart_is_enabled+0xc>)
 80a37c8:	681b      	ldr	r3, [r3, #0]
 80a37ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a37cc:	9301      	str	r3, [sp, #4]
 80a37ce:	bd08      	pop	{r3, pc}
 80a37d0:	080601c4 	.word	0x080601c4

080a37d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a37d4:	b508      	push	{r3, lr}
 80a37d6:	4b02      	ldr	r3, [pc, #8]	; (80a37e0 <hal_usart_available_data_for_write+0xc>)
 80a37d8:	681b      	ldr	r3, [r3, #0]
 80a37da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a37dc:	9301      	str	r3, [sp, #4]
 80a37de:	bd08      	pop	{r3, pc}
 80a37e0:	080601c4 	.word	0x080601c4

080a37e4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a37e4:	b508      	push	{r3, lr}
 80a37e6:	4b02      	ldr	r3, [pc, #8]	; (80a37f0 <hal_usart_init_ex+0xc>)
 80a37e8:	681b      	ldr	r3, [r3, #0]
 80a37ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a37ec:	9301      	str	r3, [sp, #4]
 80a37ee:	bd08      	pop	{r3, pc}
 80a37f0:	080601c4 	.word	0x080601c4

080a37f4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a37f4:	b508      	push	{r3, lr}
 80a37f6:	4b02      	ldr	r3, [pc, #8]	; (80a3800 <hal_i2c_write+0xc>)
 80a37f8:	681b      	ldr	r3, [r3, #0]
 80a37fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a37fc:	9301      	str	r3, [sp, #4]
 80a37fe:	bd08      	pop	{r3, pc}
 80a3800:	080601ac 	.word	0x080601ac

080a3804 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a3804:	b508      	push	{r3, lr}
 80a3806:	4b02      	ldr	r3, [pc, #8]	; (80a3810 <hal_i2c_available+0xc>)
 80a3808:	681b      	ldr	r3, [r3, #0]
 80a380a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a380c:	9301      	str	r3, [sp, #4]
 80a380e:	bd08      	pop	{r3, pc}
 80a3810:	080601ac 	.word	0x080601ac

080a3814 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a3814:	b508      	push	{r3, lr}
 80a3816:	4b02      	ldr	r3, [pc, #8]	; (80a3820 <hal_i2c_read+0xc>)
 80a3818:	681b      	ldr	r3, [r3, #0]
 80a381a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a381c:	9301      	str	r3, [sp, #4]
 80a381e:	bd08      	pop	{r3, pc}
 80a3820:	080601ac 	.word	0x080601ac

080a3824 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a3824:	b508      	push	{r3, lr}
 80a3826:	4b02      	ldr	r3, [pc, #8]	; (80a3830 <hal_i2c_peek+0xc>)
 80a3828:	681b      	ldr	r3, [r3, #0]
 80a382a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a382c:	9301      	str	r3, [sp, #4]
 80a382e:	bd08      	pop	{r3, pc}
 80a3830:	080601ac 	.word	0x080601ac

080a3834 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a3834:	b508      	push	{r3, lr}
 80a3836:	4b02      	ldr	r3, [pc, #8]	; (80a3840 <hal_i2c_flush+0xc>)
 80a3838:	681b      	ldr	r3, [r3, #0]
 80a383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a383c:	9301      	str	r3, [sp, #4]
 80a383e:	bd08      	pop	{r3, pc}
 80a3840:	080601ac 	.word	0x080601ac

080a3844 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a3844:	b508      	push	{r3, lr}
 80a3846:	4b02      	ldr	r3, [pc, #8]	; (80a3850 <hal_i2c_is_enabled+0xc>)
 80a3848:	681b      	ldr	r3, [r3, #0]
 80a384a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a384c:	9301      	str	r3, [sp, #4]
 80a384e:	bd08      	pop	{r3, pc}
 80a3850:	080601ac 	.word	0x080601ac

080a3854 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a3854:	b508      	push	{r3, lr}
 80a3856:	4b03      	ldr	r3, [pc, #12]	; (80a3864 <hal_i2c_init+0x10>)
 80a3858:	681b      	ldr	r3, [r3, #0]
 80a385a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a385e:	9301      	str	r3, [sp, #4]
 80a3860:	bd08      	pop	{r3, pc}
 80a3862:	0000      	.short	0x0000
 80a3864:	080601ac 	.word	0x080601ac

080a3868 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a3868:	b508      	push	{r3, lr}
 80a386a:	4b02      	ldr	r3, [pc, #8]	; (80a3874 <socket_active_status+0xc>)
 80a386c:	681b      	ldr	r3, [r3, #0]
 80a386e:	681b      	ldr	r3, [r3, #0]
 80a3870:	9301      	str	r3, [sp, #4]
 80a3872:	bd08      	pop	{r3, pc}
 80a3874:	080601bc 	.word	0x080601bc

080a3878 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a3878:	b508      	push	{r3, lr}
 80a387a:	4b02      	ldr	r3, [pc, #8]	; (80a3884 <socket_handle_valid+0xc>)
 80a387c:	681b      	ldr	r3, [r3, #0]
 80a387e:	685b      	ldr	r3, [r3, #4]
 80a3880:	9301      	str	r3, [sp, #4]
 80a3882:	bd08      	pop	{r3, pc}
 80a3884:	080601bc 	.word	0x080601bc

080a3888 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a3888:	b508      	push	{r3, lr}
 80a388a:	4b02      	ldr	r3, [pc, #8]	; (80a3894 <socket_create+0xc>)
 80a388c:	681b      	ldr	r3, [r3, #0]
 80a388e:	689b      	ldr	r3, [r3, #8]
 80a3890:	9301      	str	r3, [sp, #4]
 80a3892:	bd08      	pop	{r3, pc}
 80a3894:	080601bc 	.word	0x080601bc

080a3898 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a3898:	b508      	push	{r3, lr}
 80a389a:	4b02      	ldr	r3, [pc, #8]	; (80a38a4 <socket_connect+0xc>)
 80a389c:	681b      	ldr	r3, [r3, #0]
 80a389e:	68db      	ldr	r3, [r3, #12]
 80a38a0:	9301      	str	r3, [sp, #4]
 80a38a2:	bd08      	pop	{r3, pc}
 80a38a4:	080601bc 	.word	0x080601bc

080a38a8 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a38a8:	b508      	push	{r3, lr}
 80a38aa:	4b02      	ldr	r3, [pc, #8]	; (80a38b4 <socket_receive+0xc>)
 80a38ac:	681b      	ldr	r3, [r3, #0]
 80a38ae:	691b      	ldr	r3, [r3, #16]
 80a38b0:	9301      	str	r3, [sp, #4]
 80a38b2:	bd08      	pop	{r3, pc}
 80a38b4:	080601bc 	.word	0x080601bc

080a38b8 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a38b8:	b508      	push	{r3, lr}
 80a38ba:	4b02      	ldr	r3, [pc, #8]	; (80a38c4 <socket_close+0xc>)
 80a38bc:	681b      	ldr	r3, [r3, #0]
 80a38be:	6a1b      	ldr	r3, [r3, #32]
 80a38c0:	9301      	str	r3, [sp, #4]
 80a38c2:	bd08      	pop	{r3, pc}
 80a38c4:	080601bc 	.word	0x080601bc

080a38c8 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a38c8:	b508      	push	{r3, lr}
 80a38ca:	4b02      	ldr	r3, [pc, #8]	; (80a38d4 <socket_handle_invalid+0xc>)
 80a38cc:	681b      	ldr	r3, [r3, #0]
 80a38ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a38d0:	9301      	str	r3, [sp, #4]
 80a38d2:	bd08      	pop	{r3, pc}
 80a38d4:	080601bc 	.word	0x080601bc

080a38d8 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a38d8:	b508      	push	{r3, lr}
 80a38da:	4b02      	ldr	r3, [pc, #8]	; (80a38e4 <socket_send_ex+0xc>)
 80a38dc:	681b      	ldr	r3, [r3, #0]
 80a38de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a38e0:	9301      	str	r3, [sp, #4]
 80a38e2:	bd08      	pop	{r3, pc}
 80a38e4:	080601bc 	.word	0x080601bc

080a38e8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a38e8:	b508      	push	{r3, lr}
 80a38ea:	4b02      	ldr	r3, [pc, #8]	; (80a38f4 <hal_spi_init+0xc>)
 80a38ec:	681b      	ldr	r3, [r3, #0]
 80a38ee:	69db      	ldr	r3, [r3, #28]
 80a38f0:	9301      	str	r3, [sp, #4]
 80a38f2:	bd08      	pop	{r3, pc}
 80a38f4:	080601b4 	.word	0x080601b4

080a38f8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a38f8:	b508      	push	{r3, lr}
 80a38fa:	4b02      	ldr	r3, [pc, #8]	; (80a3904 <hal_spi_is_enabled+0xc>)
 80a38fc:	681b      	ldr	r3, [r3, #0]
 80a38fe:	6a1b      	ldr	r3, [r3, #32]
 80a3900:	9301      	str	r3, [sp, #4]
 80a3902:	bd08      	pop	{r3, pc}
 80a3904:	080601b4 	.word	0x080601b4

080a3908 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3908:	b508      	push	{r3, lr}
 80a390a:	4b02      	ldr	r3, [pc, #8]	; (80a3914 <HAL_USB_USART_Init+0xc>)
 80a390c:	681b      	ldr	r3, [r3, #0]
 80a390e:	681b      	ldr	r3, [r3, #0]
 80a3910:	9301      	str	r3, [sp, #4]
 80a3912:	bd08      	pop	{r3, pc}
 80a3914:	080601d8 	.word	0x080601d8

080a3918 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3918:	b508      	push	{r3, lr}
 80a391a:	4b02      	ldr	r3, [pc, #8]	; (80a3924 <HAL_USB_USART_Begin+0xc>)
 80a391c:	681b      	ldr	r3, [r3, #0]
 80a391e:	685b      	ldr	r3, [r3, #4]
 80a3920:	9301      	str	r3, [sp, #4]
 80a3922:	bd08      	pop	{r3, pc}
 80a3924:	080601d8 	.word	0x080601d8

080a3928 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3928:	b508      	push	{r3, lr}
 80a392a:	4b02      	ldr	r3, [pc, #8]	; (80a3934 <HAL_USB_USART_Available_Data+0xc>)
 80a392c:	681b      	ldr	r3, [r3, #0]
 80a392e:	691b      	ldr	r3, [r3, #16]
 80a3930:	9301      	str	r3, [sp, #4]
 80a3932:	bd08      	pop	{r3, pc}
 80a3934:	080601d8 	.word	0x080601d8

080a3938 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3938:	b508      	push	{r3, lr}
 80a393a:	4b02      	ldr	r3, [pc, #8]	; (80a3944 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a393c:	681b      	ldr	r3, [r3, #0]
 80a393e:	695b      	ldr	r3, [r3, #20]
 80a3940:	9301      	str	r3, [sp, #4]
 80a3942:	bd08      	pop	{r3, pc}
 80a3944:	080601d8 	.word	0x080601d8

080a3948 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3948:	b508      	push	{r3, lr}
 80a394a:	4b02      	ldr	r3, [pc, #8]	; (80a3954 <HAL_USB_USART_Receive_Data+0xc>)
 80a394c:	681b      	ldr	r3, [r3, #0]
 80a394e:	699b      	ldr	r3, [r3, #24]
 80a3950:	9301      	str	r3, [sp, #4]
 80a3952:	bd08      	pop	{r3, pc}
 80a3954:	080601d8 	.word	0x080601d8

080a3958 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3958:	b508      	push	{r3, lr}
 80a395a:	4b02      	ldr	r3, [pc, #8]	; (80a3964 <HAL_USB_USART_Send_Data+0xc>)
 80a395c:	681b      	ldr	r3, [r3, #0]
 80a395e:	69db      	ldr	r3, [r3, #28]
 80a3960:	9301      	str	r3, [sp, #4]
 80a3962:	bd08      	pop	{r3, pc}
 80a3964:	080601d8 	.word	0x080601d8

080a3968 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3968:	b508      	push	{r3, lr}
 80a396a:	4b02      	ldr	r3, [pc, #8]	; (80a3974 <HAL_USB_USART_Flush_Data+0xc>)
 80a396c:	681b      	ldr	r3, [r3, #0]
 80a396e:	6a1b      	ldr	r3, [r3, #32]
 80a3970:	9301      	str	r3, [sp, #4]
 80a3972:	bd08      	pop	{r3, pc}
 80a3974:	080601d8 	.word	0x080601d8

080a3978 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a3978:	b508      	push	{r3, lr}
 80a397a:	4b02      	ldr	r3, [pc, #8]	; (80a3984 <HAL_NET_SetNetWatchDog+0xc>)
 80a397c:	681b      	ldr	r3, [r3, #0]
 80a397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3980:	9301      	str	r3, [sp, #4]
 80a3982:	bd08      	pop	{r3, pc}
 80a3984:	080601c0 	.word	0x080601c0

080a3988 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3988:	b508      	push	{r3, lr}
 80a398a:	4b02      	ldr	r3, [pc, #8]	; (80a3994 <inet_gethostbyname+0xc>)
 80a398c:	681b      	ldr	r3, [r3, #0]
 80a398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3990:	9301      	str	r3, [sp, #4]
 80a3992:	bd08      	pop	{r3, pc}
 80a3994:	080601c0 	.word	0x080601c0

080a3998 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a3998:	b508      	push	{r3, lr}
 80a399a:	4b02      	ldr	r3, [pc, #8]	; (80a39a4 <log_message+0xc>)
 80a399c:	681b      	ldr	r3, [r3, #0]
 80a399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a39a0:	9301      	str	r3, [sp, #4]
 80a39a2:	bd08      	pop	{r3, pc}
 80a39a4:	080201a8 	.word	0x080201a8

080a39a8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a39a8:	b508      	push	{r3, lr}
 80a39aa:	4b02      	ldr	r3, [pc, #8]	; (80a39b4 <system_mode+0xc>)
 80a39ac:	681b      	ldr	r3, [r3, #0]
 80a39ae:	681b      	ldr	r3, [r3, #0]
 80a39b0:	9301      	str	r3, [sp, #4]
 80a39b2:	bd08      	pop	{r3, pc}
 80a39b4:	080601a4 	.word	0x080601a4

080a39b8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a39b8:	b508      	push	{r3, lr}
 80a39ba:	4b02      	ldr	r3, [pc, #8]	; (80a39c4 <set_system_mode+0xc>)
 80a39bc:	681b      	ldr	r3, [r3, #0]
 80a39be:	685b      	ldr	r3, [r3, #4]
 80a39c0:	9301      	str	r3, [sp, #4]
 80a39c2:	bd08      	pop	{r3, pc}
 80a39c4:	080601a4 	.word	0x080601a4

080a39c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a39c8:	b508      	push	{r3, lr}
 80a39ca:	4b02      	ldr	r3, [pc, #8]	; (80a39d4 <system_delay_ms+0xc>)
 80a39cc:	681b      	ldr	r3, [r3, #0]
 80a39ce:	695b      	ldr	r3, [r3, #20]
 80a39d0:	9301      	str	r3, [sp, #4]
 80a39d2:	bd08      	pop	{r3, pc}
 80a39d4:	080601a4 	.word	0x080601a4

080a39d8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a39d8:	b508      	push	{r3, lr}
 80a39da:	4b02      	ldr	r3, [pc, #8]	; (80a39e4 <system_thread_set_state+0xc>)
 80a39dc:	681b      	ldr	r3, [r3, #0]
 80a39de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a39e0:	9301      	str	r3, [sp, #4]
 80a39e2:	bd08      	pop	{r3, pc}
 80a39e4:	080601a4 	.word	0x080601a4

080a39e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a39e8:	b508      	push	{r3, lr}
 80a39ea:	4b02      	ldr	r3, [pc, #8]	; (80a39f4 <application_thread_current+0xc>)
 80a39ec:	681b      	ldr	r3, [r3, #0]
 80a39ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a39f0:	9301      	str	r3, [sp, #4]
 80a39f2:	bd08      	pop	{r3, pc}
 80a39f4:	080601a4 	.word	0x080601a4

080a39f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a39f8:	b508      	push	{r3, lr}
 80a39fa:	4b02      	ldr	r3, [pc, #8]	; (80a3a04 <application_thread_invoke+0xc>)
 80a39fc:	681b      	ldr	r3, [r3, #0]
 80a39fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3a00:	9301      	str	r3, [sp, #4]
 80a3a02:	bd08      	pop	{r3, pc}
 80a3a04:	080601a4 	.word	0x080601a4

080a3a08 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a3a08:	b508      	push	{r3, lr}
 80a3a0a:	4b02      	ldr	r3, [pc, #8]	; (80a3a14 <system_thread_get_state+0xc>)
 80a3a0c:	681b      	ldr	r3, [r3, #0]
 80a3a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3a10:	9301      	str	r3, [sp, #4]
 80a3a12:	bd08      	pop	{r3, pc}
 80a3a14:	080601a4 	.word	0x080601a4

080a3a18 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3a18:	b508      	push	{r3, lr}
 80a3a1a:	4b03      	ldr	r3, [pc, #12]	; (80a3a28 <system_ctrl_set_app_request_handler+0x10>)
 80a3a1c:	681b      	ldr	r3, [r3, #0]
 80a3a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a3a22:	9301      	str	r3, [sp, #4]
 80a3a24:	bd08      	pop	{r3, pc}
 80a3a26:	0000      	.short	0x0000
 80a3a28:	080601a4 	.word	0x080601a4

080a3a2c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a3a2c:	b508      	push	{r3, lr}
 80a3a2e:	4b03      	ldr	r3, [pc, #12]	; (80a3a3c <system_ctrl_set_result+0x10>)
 80a3a30:	681b      	ldr	r3, [r3, #0]
 80a3a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3a36:	9301      	str	r3, [sp, #4]
 80a3a38:	bd08      	pop	{r3, pc}
 80a3a3a:	0000      	.short	0x0000
 80a3a3c:	080601a4 	.word	0x080601a4

080a3a40 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80a3a40:	b508      	push	{r3, lr}
 80a3a42:	4b03      	ldr	r3, [pc, #12]	; (80a3a50 <system_sleep_pins+0x10>)
 80a3a44:	681b      	ldr	r3, [r3, #0]
 80a3a46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80a3a4a:	9301      	str	r3, [sp, #4]
 80a3a4c:	bd08      	pop	{r3, pc}
 80a3a4e:	0000      	.short	0x0000
 80a3a50:	080601a4 	.word	0x080601a4

080a3a54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3a54:	b508      	push	{r3, lr}
 80a3a56:	4b02      	ldr	r3, [pc, #8]	; (80a3a60 <network_connect+0xc>)
 80a3a58:	681b      	ldr	r3, [r3, #0]
 80a3a5a:	685b      	ldr	r3, [r3, #4]
 80a3a5c:	9301      	str	r3, [sp, #4]
 80a3a5e:	bd08      	pop	{r3, pc}
 80a3a60:	080601c8 	.word	0x080601c8

080a3a64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3a64:	b508      	push	{r3, lr}
 80a3a66:	4b02      	ldr	r3, [pc, #8]	; (80a3a70 <network_connecting+0xc>)
 80a3a68:	681b      	ldr	r3, [r3, #0]
 80a3a6a:	689b      	ldr	r3, [r3, #8]
 80a3a6c:	9301      	str	r3, [sp, #4]
 80a3a6e:	bd08      	pop	{r3, pc}
 80a3a70:	080601c8 	.word	0x080601c8

080a3a74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3a74:	b508      	push	{r3, lr}
 80a3a76:	4b02      	ldr	r3, [pc, #8]	; (80a3a80 <network_disconnect+0xc>)
 80a3a78:	681b      	ldr	r3, [r3, #0]
 80a3a7a:	68db      	ldr	r3, [r3, #12]
 80a3a7c:	9301      	str	r3, [sp, #4]
 80a3a7e:	bd08      	pop	{r3, pc}
 80a3a80:	080601c8 	.word	0x080601c8

080a3a84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3a84:	b508      	push	{r3, lr}
 80a3a86:	4b02      	ldr	r3, [pc, #8]	; (80a3a90 <network_ready+0xc>)
 80a3a88:	681b      	ldr	r3, [r3, #0]
 80a3a8a:	691b      	ldr	r3, [r3, #16]
 80a3a8c:	9301      	str	r3, [sp, #4]
 80a3a8e:	bd08      	pop	{r3, pc}
 80a3a90:	080601c8 	.word	0x080601c8

080a3a94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3a94:	b508      	push	{r3, lr}
 80a3a96:	4b02      	ldr	r3, [pc, #8]	; (80a3aa0 <network_on+0xc>)
 80a3a98:	681b      	ldr	r3, [r3, #0]
 80a3a9a:	695b      	ldr	r3, [r3, #20]
 80a3a9c:	9301      	str	r3, [sp, #4]
 80a3a9e:	bd08      	pop	{r3, pc}
 80a3aa0:	080601c8 	.word	0x080601c8

080a3aa4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3aa4:	b508      	push	{r3, lr}
 80a3aa6:	4b02      	ldr	r3, [pc, #8]	; (80a3ab0 <network_off+0xc>)
 80a3aa8:	681b      	ldr	r3, [r3, #0]
 80a3aaa:	699b      	ldr	r3, [r3, #24]
 80a3aac:	9301      	str	r3, [sp, #4]
 80a3aae:	bd08      	pop	{r3, pc}
 80a3ab0:	080601c8 	.word	0x080601c8

080a3ab4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3ab4:	b508      	push	{r3, lr}
 80a3ab6:	4b02      	ldr	r3, [pc, #8]	; (80a3ac0 <network_listen+0xc>)
 80a3ab8:	681b      	ldr	r3, [r3, #0]
 80a3aba:	69db      	ldr	r3, [r3, #28]
 80a3abc:	9301      	str	r3, [sp, #4]
 80a3abe:	bd08      	pop	{r3, pc}
 80a3ac0:	080601c8 	.word	0x080601c8

080a3ac4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3ac4:	b508      	push	{r3, lr}
 80a3ac6:	4b02      	ldr	r3, [pc, #8]	; (80a3ad0 <network_listening+0xc>)
 80a3ac8:	681b      	ldr	r3, [r3, #0]
 80a3aca:	6a1b      	ldr	r3, [r3, #32]
 80a3acc:	9301      	str	r3, [sp, #4]
 80a3ace:	bd08      	pop	{r3, pc}
 80a3ad0:	080601c8 	.word	0x080601c8

080a3ad4 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
 80a3ad4:	b508      	push	{r3, lr}
 80a3ad6:	4b02      	ldr	r3, [pc, #8]	; (80a3ae0 <network_has_credentials+0xc>)
 80a3ad8:	681b      	ldr	r3, [r3, #0]
 80a3ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3adc:	9301      	str	r3, [sp, #4]
 80a3ade:	bd08      	pop	{r3, pc}
 80a3ae0:	080601c8 	.word	0x080601c8

080a3ae4 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 80a3ae4:	b508      	push	{r3, lr}
 80a3ae6:	4b02      	ldr	r3, [pc, #8]	; (80a3af0 <network_set_credentials+0xc>)
 80a3ae8:	681b      	ldr	r3, [r3, #0]
 80a3aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3aec:	9301      	str	r3, [sp, #4]
 80a3aee:	bd08      	pop	{r3, pc}
 80a3af0:	080601c8 	.word	0x080601c8

080a3af4 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
 80a3af4:	b508      	push	{r3, lr}
 80a3af6:	4b02      	ldr	r3, [pc, #8]	; (80a3b00 <network_clear_credentials+0xc>)
 80a3af8:	681b      	ldr	r3, [r3, #0]
 80a3afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3afc:	9301      	str	r3, [sp, #4]
 80a3afe:	bd08      	pop	{r3, pc}
 80a3b00:	080601c8 	.word	0x080601c8

080a3b04 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3b04:	b508      	push	{r3, lr}
 80a3b06:	4b02      	ldr	r3, [pc, #8]	; (80a3b10 <network_set_listen_timeout+0xc>)
 80a3b08:	681b      	ldr	r3, [r3, #0]
 80a3b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3b0c:	9301      	str	r3, [sp, #4]
 80a3b0e:	bd08      	pop	{r3, pc}
 80a3b10:	080601c8 	.word	0x080601c8

080a3b14 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a3b14:	b508      	push	{r3, lr}
 80a3b16:	4b02      	ldr	r3, [pc, #8]	; (80a3b20 <network_get_listen_timeout+0xc>)
 80a3b18:	681b      	ldr	r3, [r3, #0]
 80a3b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3b1c:	9301      	str	r3, [sp, #4]
 80a3b1e:	bd08      	pop	{r3, pc}
 80a3b20:	080601c8 	.word	0x080601c8

080a3b24 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a3b24:	b508      	push	{r3, lr}
 80a3b26:	4b02      	ldr	r3, [pc, #8]	; (80a3b30 <network_is_on+0xc>)
 80a3b28:	681b      	ldr	r3, [r3, #0]
 80a3b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3b2c:	9301      	str	r3, [sp, #4]
 80a3b2e:	bd08      	pop	{r3, pc}
 80a3b30:	080601c8 	.word	0x080601c8

080a3b34 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a3b34:	b508      	push	{r3, lr}
 80a3b36:	4b02      	ldr	r3, [pc, #8]	; (80a3b40 <network_is_off+0xc>)
 80a3b38:	681b      	ldr	r3, [r3, #0]
 80a3b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3b3c:	9301      	str	r3, [sp, #4]
 80a3b3e:	bd08      	pop	{r3, pc}
 80a3b40:	080601c8 	.word	0x080601c8

080a3b44 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3b44:	b508      	push	{r3, lr}
 80a3b46:	4b02      	ldr	r3, [pc, #8]	; (80a3b50 <spark_process+0xc>)
 80a3b48:	681b      	ldr	r3, [r3, #0]
 80a3b4a:	689b      	ldr	r3, [r3, #8]
 80a3b4c:	9301      	str	r3, [sp, #4]
 80a3b4e:	bd08      	pop	{r3, pc}
 80a3b50:	080601cc 	.word	0x080601cc

080a3b54 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a3b54:	b508      	push	{r3, lr}
 80a3b56:	4b02      	ldr	r3, [pc, #8]	; (80a3b60 <spark_cloud_flag_connect+0xc>)
 80a3b58:	681b      	ldr	r3, [r3, #0]
 80a3b5a:	68db      	ldr	r3, [r3, #12]
 80a3b5c:	9301      	str	r3, [sp, #4]
 80a3b5e:	bd08      	pop	{r3, pc}
 80a3b60:	080601cc 	.word	0x080601cc

080a3b64 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a3b64:	b508      	push	{r3, lr}
 80a3b66:	4b02      	ldr	r3, [pc, #8]	; (80a3b70 <spark_cloud_flag_connected+0xc>)
 80a3b68:	681b      	ldr	r3, [r3, #0]
 80a3b6a:	695b      	ldr	r3, [r3, #20]
 80a3b6c:	9301      	str	r3, [sp, #4]
 80a3b6e:	bd08      	pop	{r3, pc}
 80a3b70:	080601cc 	.word	0x080601cc

080a3b74 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a3b74:	b508      	push	{r3, lr}
 80a3b76:	4b02      	ldr	r3, [pc, #8]	; (80a3b80 <spark_deviceID+0xc>)
 80a3b78:	681b      	ldr	r3, [r3, #0]
 80a3b7a:	69db      	ldr	r3, [r3, #28]
 80a3b7c:	9301      	str	r3, [sp, #4]
 80a3b7e:	bd08      	pop	{r3, pc}
 80a3b80:	080601cc 	.word	0x080601cc

080a3b84 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a3b84:	b508      	push	{r3, lr}
 80a3b86:	4b02      	ldr	r3, [pc, #8]	; (80a3b90 <spark_send_event+0xc>)
 80a3b88:	681b      	ldr	r3, [r3, #0]
 80a3b8a:	6a1b      	ldr	r3, [r3, #32]
 80a3b8c:	9301      	str	r3, [sp, #4]
 80a3b8e:	bd08      	pop	{r3, pc}
 80a3b90:	080601cc 	.word	0x080601cc

080a3b94 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a3b94:	b508      	push	{r3, lr}
 80a3b96:	4b02      	ldr	r3, [pc, #8]	; (80a3ba0 <spark_subscribe+0xc>)
 80a3b98:	681b      	ldr	r3, [r3, #0]
 80a3b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3b9c:	9301      	str	r3, [sp, #4]
 80a3b9e:	bd08      	pop	{r3, pc}
 80a3ba0:	080601cc 	.word	0x080601cc

080a3ba4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a3ba4:	b508      	push	{r3, lr}
 80a3ba6:	4b02      	ldr	r3, [pc, #8]	; (80a3bb0 <spark_sync_time_pending+0xc>)
 80a3ba8:	681b      	ldr	r3, [r3, #0]
 80a3baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3bac:	9301      	str	r3, [sp, #4]
 80a3bae:	bd08      	pop	{r3, pc}
 80a3bb0:	080601cc 	.word	0x080601cc

080a3bb4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3bb4:	b508      	push	{r3, lr}
 80a3bb6:	4b02      	ldr	r3, [pc, #8]	; (80a3bc0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3bb8:	681b      	ldr	r3, [r3, #0]
 80a3bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3bbc:	9301      	str	r3, [sp, #4]
 80a3bbe:	bd08      	pop	{r3, pc}
 80a3bc0:	080601cc 	.word	0x080601cc

080a3bc4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3bc4:	b508      	push	{r3, lr}
 80a3bc6:	4b02      	ldr	r3, [pc, #8]	; (80a3bd0 <malloc+0xc>)
 80a3bc8:	681b      	ldr	r3, [r3, #0]
 80a3bca:	681b      	ldr	r3, [r3, #0]
 80a3bcc:	9301      	str	r3, [sp, #4]
 80a3bce:	bd08      	pop	{r3, pc}
 80a3bd0:	080601a0 	.word	0x080601a0

080a3bd4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3bd4:	b508      	push	{r3, lr}
 80a3bd6:	4b02      	ldr	r3, [pc, #8]	; (80a3be0 <free+0xc>)
 80a3bd8:	681b      	ldr	r3, [r3, #0]
 80a3bda:	685b      	ldr	r3, [r3, #4]
 80a3bdc:	9301      	str	r3, [sp, #4]
 80a3bde:	bd08      	pop	{r3, pc}
 80a3be0:	080601a0 	.word	0x080601a0

080a3be4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3be4:	b508      	push	{r3, lr}
 80a3be6:	4b02      	ldr	r3, [pc, #8]	; (80a3bf0 <realloc+0xc>)
 80a3be8:	681b      	ldr	r3, [r3, #0]
 80a3bea:	689b      	ldr	r3, [r3, #8]
 80a3bec:	9301      	str	r3, [sp, #4]
 80a3bee:	bd08      	pop	{r3, pc}
 80a3bf0:	080601a0 	.word	0x080601a0

080a3bf4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a3bf4:	b508      	push	{r3, lr}
 80a3bf6:	4b02      	ldr	r3, [pc, #8]	; (80a3c00 <sprintf+0xc>)
 80a3bf8:	681b      	ldr	r3, [r3, #0]
 80a3bfa:	68db      	ldr	r3, [r3, #12]
 80a3bfc:	9301      	str	r3, [sp, #4]
 80a3bfe:	bd08      	pop	{r3, pc}
 80a3c00:	080601a0 	.word	0x080601a0

080a3c04 <siscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a3c04:	b508      	push	{r3, lr}
 80a3c06:	4b02      	ldr	r3, [pc, #8]	; (80a3c10 <siscanf+0xc>)
 80a3c08:	681b      	ldr	r3, [r3, #0]
 80a3c0a:	699b      	ldr	r3, [r3, #24]
 80a3c0c:	9301      	str	r3, [sp, #4]
 80a3c0e:	bd08      	pop	{r3, pc}
 80a3c10:	080601a0 	.word	0x080601a0

080a3c14 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a3c14:	b508      	push	{r3, lr}
 80a3c16:	4b02      	ldr	r3, [pc, #8]	; (80a3c20 <snprintf+0xc>)
 80a3c18:	681b      	ldr	r3, [r3, #0]
 80a3c1a:	69db      	ldr	r3, [r3, #28]
 80a3c1c:	9301      	str	r3, [sp, #4]
 80a3c1e:	bd08      	pop	{r3, pc}
 80a3c20:	080601a0 	.word	0x080601a0

080a3c24 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a3c24:	b508      	push	{r3, lr}
 80a3c26:	4b02      	ldr	r3, [pc, #8]	; (80a3c30 <vsnprintf+0xc>)
 80a3c28:	681b      	ldr	r3, [r3, #0]
 80a3c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3c2c:	9301      	str	r3, [sp, #4]
 80a3c2e:	bd08      	pop	{r3, pc}
 80a3c30:	080601a0 	.word	0x080601a0

080a3c34 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a3c34:	b508      	push	{r3, lr}
 80a3c36:	4b02      	ldr	r3, [pc, #8]	; (80a3c40 <abort+0xc>)
 80a3c38:	681b      	ldr	r3, [r3, #0]
 80a3c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3c3c:	9301      	str	r3, [sp, #4]
 80a3c3e:	bd08      	pop	{r3, pc}
 80a3c40:	080601a0 	.word	0x080601a0

080a3c44 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a3c44:	b508      	push	{r3, lr}
 80a3c46:	4b02      	ldr	r3, [pc, #8]	; (80a3c50 <_malloc_r+0xc>)
 80a3c48:	681b      	ldr	r3, [r3, #0]
 80a3c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3c4c:	9301      	str	r3, [sp, #4]
 80a3c4e:	bd08      	pop	{r3, pc}
 80a3c50:	080601a0 	.word	0x080601a0

080a3c54 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a3c54:	b508      	push	{r3, lr}
 80a3c56:	4b02      	ldr	r3, [pc, #8]	; (80a3c60 <__errno+0xc>)
 80a3c58:	681b      	ldr	r3, [r3, #0]
 80a3c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3c5c:	9301      	str	r3, [sp, #4]
 80a3c5e:	bd08      	pop	{r3, pc}
 80a3c60:	080601a0 	.word	0x080601a0

080a3c64 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a3c64:	b508      	push	{r3, lr}
 80a3c66:	4b02      	ldr	r3, [pc, #8]	; (80a3c70 <__assert_func+0xc>)
 80a3c68:	681b      	ldr	r3, [r3, #0]
 80a3c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3c6c:	9301      	str	r3, [sp, #4]
 80a3c6e:	bd08      	pop	{r3, pc}
 80a3c70:	080601a0 	.word	0x080601a0

080a3c74 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a3c74:	b508      	push	{r3, lr}
 80a3c76:	4b02      	ldr	r3, [pc, #8]	; (80a3c80 <newlib_impure_ptr_callback+0xc>)
 80a3c78:	681b      	ldr	r3, [r3, #0]
 80a3c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3c7c:	9301      	str	r3, [sp, #4]
 80a3c7e:	bd08      	pop	{r3, pc}
 80a3c80:	080601a0 	.word	0x080601a0

080a3c84 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a3c84:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a3c86:	2600      	movs	r6, #0
 80a3c88:	4604      	mov	r4, r0
 80a3c8a:	460d      	mov	r5, r1
 80a3c8c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a3c90:	f7ff fd60 	bl	80a3754 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a3c94:	4628      	mov	r0, r5
    _spi = spi;
 80a3c96:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a3c98:	f7ff fe26 	bl	80a38e8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a3c9c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a3c9e:	6066      	str	r6, [r4, #4]
}
 80a3ca0:	bd70      	pop	{r4, r5, r6, pc}

080a3ca2 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 80a3ca2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80a3ca6:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 80a3ca8:	680a      	ldr	r2, [r1, #0]
 80a3caa:	b933      	cbnz	r3, 80a3cba <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 80a3cac:	b932      	cbnz	r2, 80a3cbc <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
                    break;
                }
            }
        }
        return compatResult_;
 80a3cae:	f8d1 3006 	ldr.w	r3, [r1, #6]
 80a3cb2:	6003      	str	r3, [r0, #0]
 80a3cb4:	894b      	ldrh	r3, [r1, #10]
 80a3cb6:	8083      	strh	r3, [r0, #4]
    }
 80a3cb8:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 80a3cba:	b122      	cbz	r2, 80a3cc6 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 80a3cbc:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 80a3cbe:	2c01      	cmp	r4, #1
 80a3cc0:	d003      	beq.n	80a3cca <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 80a3cc2:	2c04      	cmp	r4, #4
 80a3cc4:	d006      	beq.n	80a3cd4 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a3cc6:	2204      	movs	r2, #4
 80a3cc8:	e005      	b.n	80a3cd6 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80a3cca:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80a3ccc:	718c      	strb	r4, [r1, #6]
 80a3cce:	810b      	strh	r3, [r1, #8]
 80a3cd0:	814a      	strh	r2, [r1, #10]
                    break;
 80a3cd2:	e7ec      	b.n	80a3cae <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80a3cd4:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a3cd6:	810b      	strh	r3, [r1, #8]
 80a3cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3cdc:	718a      	strb	r2, [r1, #6]
 80a3cde:	814b      	strh	r3, [r1, #10]
                    break;
 80a3ce0:	e7e5      	b.n	80a3cae <_ZN17SystemSleepResult13toSleepResultEv+0xc>

080a3ce2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3ce2:	b510      	push	{r4, lr}
 80a3ce4:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3ce6:	6800      	ldr	r0, [r0, #0]
 80a3ce8:	b118      	cbz	r0, 80a3cf2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
 80a3cea:	f7ff ff73 	bl	80a3bd4 <free>
            wakeupSource_ = nullptr;
 80a3cee:	2300      	movs	r3, #0
 80a3cf0:	6023      	str	r3, [r4, #0]
        }
    }
 80a3cf2:	bd10      	pop	{r4, pc}

080a3cf4 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a3cf4:	b538      	push	{r3, r4, r5, lr}
 80a3cf6:	460c      	mov	r4, r1
        error_ = result.error_;
 80a3cf8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a3cfc:	4605      	mov	r5, r0
        error_ = result.error_;
 80a3cfe:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80a3d00:	f8d1 3006 	ldr.w	r3, [r1, #6]
 80a3d04:	f8c0 3006 	str.w	r3, [r0, #6]
 80a3d08:	894b      	ldrh	r3, [r1, #10]
 80a3d0a:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80a3d0c:	f7ff ffe9 	bl	80a3ce2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
 80a3d10:	6823      	ldr	r3, [r4, #0]
 80a3d12:	b113      	cbz	r3, 80a3d1a <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
 80a3d14:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
 80a3d16:	2300      	movs	r3, #0
 80a3d18:	6023      	str	r3, [r4, #0]
    }
 80a3d1a:	bd38      	pop	{r3, r4, r5, pc}

080a3d1c <_ZN11SleepResultC1EiPKtj>:
    log_process_ctrl_request_callback = spark::logProcessControlRequest;
    return true;
}
#endif

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a3d1c:	b510      	push	{r4, lr}
 80a3d1e:	2400      	movs	r4, #0
 80a3d20:	7004      	strb	r4, [r0, #0]
 80a3d22:	8044      	strh	r4, [r0, #2]
 80a3d24:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80a3d28:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a3d2a:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80a3d2c:	dd08      	ble.n	80a3d40 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 80a3d2e:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 80a3d30:	428b      	cmp	r3, r1
 80a3d32:	d904      	bls.n	80a3d3e <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 80a3d34:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80a3d38:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80a3d3a:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 80a3d3c:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 80a3d3e:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 80a3d40:	d101      	bne.n	80a3d46 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80a3d42:	2302      	movs	r3, #2
 80a3d44:	e7fa      	b.n	80a3d3c <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 80a3d46:	8041      	strh	r1, [r0, #2]
 80a3d48:	e7f9      	b.n	80a3d3e <_ZN11SleepResultC1EiPKtj+0x22>
	...

080a3d4c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3d4e:	460d      	mov	r5, r1
 80a3d50:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3d52:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3d54:	b08b      	sub	sp, #44	; 0x2c
 80a3d56:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3d5a:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3d5c:	9301      	str	r3, [sp, #4]
 80a3d5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a3d60:	4631      	mov	r1, r6
 80a3d62:	9300      	str	r3, [sp, #0]
 80a3d64:	4628      	mov	r0, r5
 80a3d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a3d68:	9702      	str	r7, [sp, #8]
 80a3d6a:	f7ff fe69 	bl	80a3a40 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a3d6e:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3d70:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a3d72:	462a      	mov	r2, r5
 80a3d74:	a805      	add	r0, sp, #20
 80a3d76:	f7ff ffd1 	bl	80a3d1c <_ZN11SleepResultC1EiPKtj>
 80a3d7a:	4d0f      	ldr	r5, [pc, #60]	; (80a3db8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 80a3d7c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80a3d80:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80a3d84:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a3d88:	4628      	mov	r0, r5
              compatResult_(r) {
 80a3d8a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 80a3d8e:	a907      	add	r1, sp, #28
 80a3d90:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80a3d94:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80a3d98:	9707      	str	r7, [sp, #28]
 80a3d9a:	f8ad 7020 	strh.w	r7, [sp, #32]
 80a3d9e:	f7ff ffa9 	bl	80a3cf4 <_ZN17SystemSleepResultaSEOS_.isra.0>
        freeWakeupSourceMemory();
 80a3da2:	a807      	add	r0, sp, #28
 80a3da4:	f7ff ff9d 	bl	80a3ce2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        return toSleepResult();
 80a3da8:	4620      	mov	r0, r4
 80a3daa:	4629      	mov	r1, r5
 80a3dac:	f7ff ff79 	bl	80a3ca2 <_ZN17SystemSleepResult13toSleepResultEv>
}
 80a3db0:	4620      	mov	r0, r4
 80a3db2:	b00b      	add	sp, #44	; 0x2c
 80a3db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3db6:	bf00      	nop
 80a3db8:	20000410 	.word	0x20000410

080a3dbc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a3dbc:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a3dbe:	2000      	movs	r0, #0
 80a3dc0:	4b04      	ldr	r3, [pc, #16]	; (80a3dd4 <_GLOBAL__sub_I_System+0x18>)
 80a3dc2:	601a      	str	r2, [r3, #0]
 80a3dc4:	4b04      	ldr	r3, [pc, #16]	; (80a3dd8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a3dc6:	4a05      	ldr	r2, [pc, #20]	; (80a3ddc <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a3dc8:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a3dcc:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3dce:	f7ff bdf3 	b.w	80a39b8 <set_system_mode>
 80a3dd2:	bf00      	nop
 80a3dd4:	2000041c 	.word	0x2000041c
 80a3dd8:	20000410 	.word	0x20000410
 80a3ddc:	ffff0000 	.word	0xffff0000

080a3de0 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3de0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3de2:	6803      	ldr	r3, [r0, #0]
{
 80a3de4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3de8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3dea:	2201      	movs	r2, #1
 80a3dec:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3df0:	f10d 0107 	add.w	r1, sp, #7
 80a3df4:	47a0      	blx	r4
}
 80a3df6:	b002      	add	sp, #8
 80a3df8:	bd10      	pop	{r4, pc}

080a3dfa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3dfa:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3dfc:	6803      	ldr	r3, [r0, #0]
 80a3dfe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3e00:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3e04:	46a4      	mov	ip, r4
}
 80a3e06:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3e08:	4760      	bx	ip

080a3e0a <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3e0a:	b513      	push	{r0, r1, r4, lr}
 80a3e0c:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a3e0e:	6802      	ldr	r2, [r0, #0]
{
 80a3e10:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3e14:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3e16:	f10d 0107 	add.w	r1, sp, #7
 80a3e1a:	2201      	movs	r2, #1
 80a3e1c:	47a0      	blx	r4
}
 80a3e1e:	b002      	add	sp, #8
 80a3e20:	bd10      	pop	{r4, pc}

080a3e22 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a3e22:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a3e24:	6943      	ldr	r3, [r0, #20]
 80a3e26:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3e28:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3e2c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3e30:	429a      	cmp	r2, r3
 80a3e32:	d008      	beq.n	80a3e46 <_ZN9TCPClient4readEv+0x24>
 80a3e34:	6963      	ldr	r3, [r4, #20]
 80a3e36:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3e3a:	1c51      	adds	r1, r2, #1
 80a3e3c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3e40:	4413      	add	r3, r2
 80a3e42:	7918      	ldrb	r0, [r3, #4]
}
 80a3e44:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3e46:	6803      	ldr	r3, [r0, #0]
 80a3e48:	691b      	ldr	r3, [r3, #16]
 80a3e4a:	4798      	blx	r3
 80a3e4c:	2800      	cmp	r0, #0
 80a3e4e:	d1f1      	bne.n	80a3e34 <_ZN9TCPClient4readEv+0x12>
 80a3e50:	f04f 30ff 	mov.w	r0, #4294967295
 80a3e54:	e7f6      	b.n	80a3e44 <_ZN9TCPClient4readEv+0x22>

080a3e56 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a3e56:	4770      	bx	lr

080a3e58 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3e58:	4770      	bx	lr
	...

080a3e5c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3e5c:	b510      	push	{r4, lr}
 80a3e5e:	4604      	mov	r4, r0
	    ||
 80a3e60:	4b06      	ldr	r3, [pc, #24]	; (80a3e7c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3e62:	4608      	mov	r0, r1
	    ||
 80a3e64:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a3e66:	f104 040c 	add.w	r4, r4, #12
 80a3e6a:	d004      	beq.n	80a3e76 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a3e6c:	f001 fc3c 	bl	80a56e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 80a3e70:	2800      	cmp	r0, #0
 80a3e72:	bf08      	it	eq
 80a3e74:	2400      	moveq	r4, #0
      }
 80a3e76:	4620      	mov	r0, r4
 80a3e78:	bd10      	pop	{r4, pc}
 80a3e7a:	bf00      	nop
 80a3e7c:	080a8f08 	.word	0x080a8f08

080a3e80 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3e80:	b510      	push	{r4, lr}
 80a3e82:	4604      	mov	r4, r0
 80a3e84:	21ac      	movs	r1, #172	; 0xac
 80a3e86:	f7fc f90a 	bl	80a009e <_ZdlPvj>
 80a3e8a:	4620      	mov	r0, r4
 80a3e8c:	bd10      	pop	{r4, pc}

080a3e8e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80a3e8e:	21ac      	movs	r1, #172	; 0xac
 80a3e90:	f7fc b905 	b.w	80a009e <_ZdlPvj>

080a3e94 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3e94:	b538      	push	{r3, r4, r5, lr}
 80a3e96:	4b0b      	ldr	r3, [pc, #44]	; (80a3ec4 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3e98:	6984      	ldr	r4, [r0, #24]
 80a3e9a:	4605      	mov	r5, r0
 80a3e9c:	6003      	str	r3, [r0, #0]
 80a3e9e:	b17c      	cbz	r4, 80a3ec0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a3ea0:	6863      	ldr	r3, [r4, #4]
 80a3ea2:	3b01      	subs	r3, #1
 80a3ea4:	6063      	str	r3, [r4, #4]
 80a3ea6:	b95b      	cbnz	r3, 80a3ec0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3ea8:	6823      	ldr	r3, [r4, #0]
 80a3eaa:	4620      	mov	r0, r4
 80a3eac:	689b      	ldr	r3, [r3, #8]
 80a3eae:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3eb0:	68a3      	ldr	r3, [r4, #8]
 80a3eb2:	3b01      	subs	r3, #1
 80a3eb4:	60a3      	str	r3, [r4, #8]
 80a3eb6:	b91b      	cbnz	r3, 80a3ec0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3eb8:	6823      	ldr	r3, [r4, #0]
 80a3eba:	4620      	mov	r0, r4
 80a3ebc:	68db      	ldr	r3, [r3, #12]
 80a3ebe:	4798      	blx	r3
 80a3ec0:	4628      	mov	r0, r5
 80a3ec2:	bd38      	pop	{r3, r4, r5, pc}
 80a3ec4:	080a8f18 	.word	0x080a8f18

080a3ec8 <_ZN9TCPClientD0Ev>:
 80a3ec8:	b510      	push	{r4, lr}
 80a3eca:	4604      	mov	r4, r0
 80a3ecc:	f7ff ffe2 	bl	80a3e94 <_ZN9TCPClientD1Ev>
 80a3ed0:	4620      	mov	r0, r4
 80a3ed2:	211c      	movs	r1, #28
 80a3ed4:	f7fc f8e3 	bl	80a009e <_ZdlPvj>
 80a3ed8:	4620      	mov	r0, r4
 80a3eda:	bd10      	pop	{r4, pc}

080a3edc <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3edc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3ede:	4604      	mov	r4, r0
 80a3ee0:	4606      	mov	r6, r0
      { return _M_ptr; }
 80a3ee2:	694d      	ldr	r5, [r1, #20]
 80a3ee4:	4b04      	ldr	r3, [pc, #16]	; (80a3ef8 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3ee6:	358c      	adds	r5, #140	; 0x8c
 80a3ee8:	f844 3b04 	str.w	r3, [r4], #4
 80a3eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3ef0:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3ef2:	4630      	mov	r0, r6
 80a3ef4:	7023      	strb	r3, [r4, #0]
 80a3ef6:	bd70      	pop	{r4, r5, r6, pc}
 80a3ef8:	080a8fa0 	.word	0x080a8fa0

080a3efc <_ZN9TCPClient4peekEv>:
{
 80a3efc:	b510      	push	{r4, lr}
 80a3efe:	6943      	ldr	r3, [r0, #20]
 80a3f00:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3f02:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3f06:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3f0a:	429a      	cmp	r2, r3
 80a3f0c:	d005      	beq.n	80a3f1a <_ZN9TCPClient4peekEv+0x1e>
 80a3f0e:	6963      	ldr	r3, [r4, #20]
 80a3f10:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3f14:	4413      	add	r3, r2
 80a3f16:	7918      	ldrb	r0, [r3, #4]
}
 80a3f18:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3f1a:	6803      	ldr	r3, [r0, #0]
 80a3f1c:	691b      	ldr	r3, [r3, #16]
 80a3f1e:	4798      	blx	r3
 80a3f20:	2800      	cmp	r0, #0
 80a3f22:	d1f4      	bne.n	80a3f0e <_ZN9TCPClient4peekEv+0x12>
 80a3f24:	f04f 30ff 	mov.w	r0, #4294967295
 80a3f28:	e7f6      	b.n	80a3f18 <_ZN9TCPClient4peekEv+0x1c>

080a3f2a <_ZN9TCPClient4readEPhj>:
{
 80a3f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3f2c:	6943      	ldr	r3, [r0, #20]
 80a3f2e:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a3f30:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3f34:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a3f38:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a3f3a:	429a      	cmp	r2, r3
{
 80a3f3c:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a3f3e:	d016      	beq.n	80a3f6e <_ZN9TCPClient4readEPhj+0x44>
 80a3f40:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3f42:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3f44:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3f48:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a3f4c:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3f4e:	42bc      	cmp	r4, r7
 80a3f50:	bf28      	it	cs
 80a3f52:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3f54:	3304      	adds	r3, #4
 80a3f56:	4622      	mov	r2, r4
 80a3f58:	4419      	add	r1, r3
 80a3f5a:	f002 feb1 	bl	80a6cc0 <memcpy>
 80a3f5e:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3f60:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3f64:	4423      	add	r3, r4
 80a3f66:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a3f6a:	4620      	mov	r0, r4
 80a3f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a3f6e:	6803      	ldr	r3, [r0, #0]
 80a3f70:	691b      	ldr	r3, [r3, #16]
 80a3f72:	4798      	blx	r3
 80a3f74:	2800      	cmp	r0, #0
 80a3f76:	d1e3      	bne.n	80a3f40 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a3f78:	f04f 34ff 	mov.w	r4, #4294967295
 80a3f7c:	e7f5      	b.n	80a3f6a <_ZN9TCPClient4readEPhj+0x40>

080a3f7e <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a3f7e:	2300      	movs	r3, #0
 80a3f80:	6942      	ldr	r2, [r0, #20]
 80a3f82:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3f86:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3f88:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3f8c:	4770      	bx	lr
	...

080a3f90 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a3f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3f94:	461f      	mov	r7, r3
    stop();
 80a3f96:	6803      	ldr	r3, [r0, #0]
{
 80a3f98:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a3f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3f9c:	4605      	mov	r5, r0
 80a3f9e:	460c      	mov	r4, r1
 80a3fa0:	4616      	mov	r6, r2
    stop();
 80a3fa2:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a3fa4:	4638      	mov	r0, r7
 80a3fa6:	f001 fa1d 	bl	80a53e4 <_ZN5spark12NetworkClass4fromEm>
 80a3faa:	6803      	ldr	r3, [r0, #0]
 80a3fac:	68db      	ldr	r3, [r3, #12]
 80a3fae:	4798      	blx	r3
 80a3fb0:	2800      	cmp	r0, #0
 80a3fb2:	d054      	beq.n	80a405e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3fb4:	4633      	mov	r3, r6
 80a3fb6:	2206      	movs	r2, #6
 80a3fb8:	2101      	movs	r1, #1
 80a3fba:	2002      	movs	r0, #2
 80a3fbc:	9700      	str	r7, [sp, #0]
 80a3fbe:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a3fc2:	f7ff fc61 	bl	80a3888 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3fc6:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3fc8:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3fcc:	f04f 0800 	mov.w	r8, #0
 80a3fd0:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a3fd4:	696b      	ldr	r3, [r5, #20]
 80a3fd6:	2001      	movs	r0, #1
 80a3fd8:	681b      	ldr	r3, [r3, #0]
 80a3fda:	4923      	ldr	r1, [pc, #140]	; (80a4068 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3fdc:	9301      	str	r3, [sp, #4]
 80a3fde:	4b23      	ldr	r3, [pc, #140]	; (80a406c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3fe0:	aa02      	add	r2, sp, #8
 80a3fe2:	9300      	str	r3, [sp, #0]
 80a3fe4:	4643      	mov	r3, r8
 80a3fe6:	f7ff fcd7 	bl	80a3998 <log_message>
          if (socket_handle_valid(d_->sock))
 80a3fea:	696b      	ldr	r3, [r5, #20]
 80a3fec:	6818      	ldr	r0, [r3, #0]
 80a3fee:	f7ff fc43 	bl	80a3878 <socket_handle_valid>
 80a3ff2:	2800      	cmp	r0, #0
 80a3ff4:	d033      	beq.n	80a405e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a3ff6:	4628      	mov	r0, r5
 80a3ff8:	f7ff ffc1 	bl	80a3f7e <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a3ffc:	2302      	movs	r3, #2
 80a3ffe:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a4002:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a4004:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a4006:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a400a:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a400c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a4010:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a4014:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a4016:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a401a:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a401e:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a4022:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a4026:	f7ff fca7 	bl	80a3978 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a402a:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a402c:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a402e:	2210      	movs	r2, #16
 80a4030:	6818      	ldr	r0, [r3, #0]
 80a4032:	a902      	add	r1, sp, #8
 80a4034:	f7ff fc30 	bl	80a3898 <socket_connect>
 80a4038:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a403a:	4630      	mov	r0, r6
 80a403c:	f7ff fc9c 	bl	80a3978 <HAL_NET_SetNetWatchDog>
 80a4040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4042:	696e      	ldr	r6, [r5, #20]
 80a4044:	368c      	adds	r6, #140	; 0x8c
 80a4046:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a4048:	6823      	ldr	r3, [r4, #0]
 80a404a:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a404c:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a404e:	f1b9 0f00 	cmp.w	r9, #0
 80a4052:	d007      	beq.n	80a4064 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a4054:	682b      	ldr	r3, [r5, #0]
 80a4056:	4628      	mov	r0, r5
 80a4058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a405a:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a405c:	4640      	mov	r0, r8
}
 80a405e:	b00b      	add	sp, #44	; 0x2c
 80a4060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a4064:	2001      	movs	r0, #1
 80a4066:	e7fa      	b.n	80a405e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a4068:	080a8ed0 	.word	0x080a8ed0
 80a406c:	080a8ed7 	.word	0x080a8ed7

080a4070 <_ZN9TCPClient9availableEv>:
{
 80a4070:	b538      	push	{r3, r4, r5, lr}
 80a4072:	6942      	ldr	r2, [r0, #20]
 80a4074:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a4076:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a407a:	b12b      	cbz	r3, 80a4088 <_ZN9TCPClient9availableEv+0x18>
 80a407c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a4080:	429a      	cmp	r2, r3
 80a4082:	d101      	bne.n	80a4088 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a4084:	f7ff ff7b 	bl	80a3f7e <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a4088:	6920      	ldr	r0, [r4, #16]
 80a408a:	f001 f9ab 	bl	80a53e4 <_ZN5spark12NetworkClass4fromEm>
 80a408e:	6803      	ldr	r3, [r0, #0]
 80a4090:	68db      	ldr	r3, [r3, #12]
 80a4092:	4798      	blx	r3
 80a4094:	b1f8      	cbz	r0, 80a40d6 <_ZN9TCPClient9availableEv+0x66>
 80a4096:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a4098:	6818      	ldr	r0, [r3, #0]
 80a409a:	f7ff fbed 	bl	80a3878 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a409e:	b1d0      	cbz	r0, 80a40d6 <_ZN9TCPClient9availableEv+0x66>
 80a40a0:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a40a2:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a40a6:	297f      	cmp	r1, #127	; 0x7f
 80a40a8:	d815      	bhi.n	80a40d6 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a40aa:	1d05      	adds	r5, r0, #4
 80a40ac:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a40b0:	2300      	movs	r3, #0
 80a40b2:	6800      	ldr	r0, [r0, #0]
 80a40b4:	4429      	add	r1, r5
 80a40b6:	f7ff fbf7 	bl	80a38a8 <socket_receive>
            if (ret > 0)
 80a40ba:	2800      	cmp	r0, #0
 80a40bc:	dd0b      	ble.n	80a40d6 <_ZN9TCPClient9availableEv+0x66>
 80a40be:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a40c0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a40c4:	b90a      	cbnz	r2, 80a40ca <_ZN9TCPClient9availableEv+0x5a>
 80a40c6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a40ca:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a40cc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a40d0:	4410      	add	r0, r2
 80a40d2:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a40d6:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a40d8:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a40dc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a40e0:	1ac0      	subs	r0, r0, r3
 80a40e2:	bd38      	pop	{r3, r4, r5, pc}

080a40e4 <_ZN9TCPClient4stopEv>:
{
 80a40e4:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a40e6:	6943      	ldr	r3, [r0, #20]
{
 80a40e8:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a40ea:	6818      	ldr	r0, [r3, #0]
 80a40ec:	f7ff fbc4 	bl	80a3878 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a40f0:	b118      	cbz	r0, 80a40fa <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a40f2:	6963      	ldr	r3, [r4, #20]
 80a40f4:	6818      	ldr	r0, [r3, #0]
 80a40f6:	f7ff fbdf 	bl	80a38b8 <socket_close>
 80a40fa:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a40fc:	f7ff fbe4 	bl	80a38c8 <socket_handle_invalid>
 80a4100:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a4102:	6960      	ldr	r0, [r4, #20]
 80a4104:	2211      	movs	r2, #17
 80a4106:	2100      	movs	r1, #0
 80a4108:	308c      	adds	r0, #140	; 0x8c
 80a410a:	f002 fde7 	bl	80a6cdc <memset>
  flush_buffer();
 80a410e:	4620      	mov	r0, r4
}
 80a4110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a4114:	f7ff bf33 	b.w	80a3f7e <_ZN9TCPClient12flush_bufferEv>

080a4118 <_ZN9TCPClient6statusEv>:
{
 80a4118:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a411a:	6943      	ldr	r3, [r0, #20]
{
 80a411c:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a411e:	6818      	ldr	r0, [r3, #0]
 80a4120:	f7ff fbaa 	bl	80a3878 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a4124:	b908      	cbnz	r0, 80a412a <_ZN9TCPClient6statusEv+0x12>
 80a4126:	2000      	movs	r0, #0
}
 80a4128:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a412a:	6920      	ldr	r0, [r4, #16]
 80a412c:	f001 f95a 	bl	80a53e4 <_ZN5spark12NetworkClass4fromEm>
 80a4130:	6803      	ldr	r3, [r0, #0]
 80a4132:	68db      	ldr	r3, [r3, #12]
 80a4134:	4798      	blx	r3
 80a4136:	2800      	cmp	r0, #0
 80a4138:	d0f5      	beq.n	80a4126 <_ZN9TCPClient6statusEv+0xe>
 80a413a:	6963      	ldr	r3, [r4, #20]
 80a413c:	6818      	ldr	r0, [r3, #0]
 80a413e:	f7ff fb93 	bl	80a3868 <socket_active_status>
 80a4142:	fab0 f080 	clz	r0, r0
 80a4146:	0940      	lsrs	r0, r0, #5
 80a4148:	e7ee      	b.n	80a4128 <_ZN9TCPClient6statusEv+0x10>

080a414a <_ZN9TCPClientcvbEv>:
{
 80a414a:	b508      	push	{r3, lr}
   return (status()!=0);
 80a414c:	f7ff ffe4 	bl	80a4118 <_ZN9TCPClient6statusEv>
}
 80a4150:	3800      	subs	r0, #0
 80a4152:	bf18      	it	ne
 80a4154:	2001      	movne	r0, #1
 80a4156:	bd08      	pop	{r3, pc}

080a4158 <_ZN9TCPClient5writeEPKhjm>:
{
 80a4158:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a415c:	2700      	movs	r7, #0
 80a415e:	6047      	str	r7, [r0, #4]
 80a4160:	4604      	mov	r4, r0
 80a4162:	460d      	mov	r5, r1
 80a4164:	4616      	mov	r6, r2
 80a4166:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a4168:	f7ff ffd6 	bl	80a4118 <_ZN9TCPClient6statusEv>
 80a416c:	b170      	cbz	r0, 80a418c <_ZN9TCPClient5writeEPKhjm+0x34>
 80a416e:	e9cd 8700 	strd	r8, r7, [sp]
 80a4172:	6960      	ldr	r0, [r4, #20]
 80a4174:	463b      	mov	r3, r7
 80a4176:	4632      	mov	r2, r6
 80a4178:	4629      	mov	r1, r5
 80a417a:	6800      	ldr	r0, [r0, #0]
 80a417c:	f7ff fbac 	bl	80a38d8 <socket_send_ex>
    if (ret < 0) {
 80a4180:	2800      	cmp	r0, #0
 80a4182:	da00      	bge.n	80a4186 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a4184:	6060      	str	r0, [r4, #4]
}
 80a4186:	b002      	add	sp, #8
 80a4188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a418c:	f04f 30ff 	mov.w	r0, #4294967295
 80a4190:	e7f8      	b.n	80a4184 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a4192 <_ZN9TCPClient9connectedEv>:
{
 80a4192:	b570      	push	{r4, r5, r6, lr}
 80a4194:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a4196:	f7ff ffbf 	bl	80a4118 <_ZN9TCPClient6statusEv>
 80a419a:	b9e8      	cbnz	r0, 80a41d8 <_ZN9TCPClient9connectedEv+0x46>
 80a419c:	696b      	ldr	r3, [r5, #20]
 80a419e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a41a2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a41a6:	4291      	cmp	r1, r2
 80a41a8:	d116      	bne.n	80a41d8 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a41aa:	6818      	ldr	r0, [r3, #0]
 80a41ac:	f7ff fb64 	bl	80a3878 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a41b0:	b908      	cbnz	r0, 80a41b6 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a41b2:	2000      	movs	r0, #0
}
 80a41b4:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a41b6:	696b      	ldr	r3, [r5, #20]
 80a41b8:	6818      	ldr	r0, [r3, #0]
 80a41ba:	f7ff fb55 	bl	80a3868 <socket_active_status>
 80a41be:	2801      	cmp	r0, #1
 80a41c0:	4604      	mov	r4, r0
 80a41c2:	d1f6      	bne.n	80a41b2 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a41c4:	682b      	ldr	r3, [r5, #0]
 80a41c6:	4628      	mov	r0, r5
 80a41c8:	691b      	ldr	r3, [r3, #16]
 80a41ca:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a41cc:	b930      	cbnz	r0, 80a41dc <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a41ce:	682b      	ldr	r3, [r5, #0]
 80a41d0:	4628      	mov	r0, r5
 80a41d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a41d4:	4798      	blx	r3
 80a41d6:	e7ec      	b.n	80a41b2 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a41d8:	2001      	movs	r0, #1
 80a41da:	e7eb      	b.n	80a41b4 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a41dc:	4620      	mov	r0, r4
 80a41de:	e7e9      	b.n	80a41b4 <_ZN9TCPClient9connectedEv+0x22>

080a41e0 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a41e0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a41e2:	b510      	push	{r4, lr}
 80a41e4:	4604      	mov	r4, r0
          total(0) {
 80a41e6:	6001      	str	r1, [r0, #0]
 80a41e8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a41ec:	3088      	adds	r0, #136	; 0x88
 80a41ee:	f000 fea5 	bl	80a4f3c <_ZN9IPAddressC1Ev>
}
 80a41f2:	4620      	mov	r0, r4
 80a41f4:	bd10      	pop	{r4, pc}
	...

080a41f8 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a41f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a41fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a41fe:	2300      	movs	r3, #0
 80a4200:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a4204:	4a0d      	ldr	r2, [pc, #52]	; (80a423c <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a4206:	6103      	str	r3, [r0, #16]
 80a4208:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a420a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a420c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a420e:	20ac      	movs	r0, #172	; 0xac
 80a4210:	460e      	mov	r6, r1
 80a4212:	f7fb ff40 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a4216:	1e05      	subs	r5, r0, #0
 80a4218:	f105 070c 	add.w	r7, r5, #12
 80a421c:	d008      	beq.n	80a4230 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a421e:	2301      	movs	r3, #1
 80a4220:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a4224:	4b06      	ldr	r3, [pc, #24]	; (80a4240 <_ZN9TCPClientC1Em+0x48>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a4226:	4631      	mov	r1, r6
 80a4228:	4638      	mov	r0, r7
 80a422a:	602b      	str	r3, [r5, #0]
 80a422c:	f7ff ffd8 	bl	80a41e0 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a4230:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a4232:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a4236:	f7ff fea2 	bl	80a3f7e <_ZN9TCPClient12flush_bufferEv>
}
 80a423a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a423c:	080a8f18 	.word	0x080a8f18
 80a4240:	080a8ef4 	.word	0x080a8ef4

080a4244 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a4244:	b510      	push	{r4, lr}
 80a4246:	4604      	mov	r4, r0
 80a4248:	f7ff fb3e 	bl	80a38c8 <socket_handle_invalid>
 80a424c:	4601      	mov	r1, r0
 80a424e:	4620      	mov	r0, r4
 80a4250:	f7ff ffd2 	bl	80a41f8 <_ZN9TCPClientC1Em>
}
 80a4254:	4620      	mov	r0, r4
 80a4256:	bd10      	pop	{r4, pc}

080a4258 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a4258:	b510      	push	{r4, lr}
 80a425a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a425c:	6800      	ldr	r0, [r0, #0]
 80a425e:	f7ff fb0b 	bl	80a3878 <socket_handle_valid>
 80a4262:	b110      	cbz	r0, 80a426a <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a4264:	6820      	ldr	r0, [r4, #0]
 80a4266:	f7ff fb27 	bl	80a38b8 <socket_close>
    }
}
 80a426a:	4620      	mov	r0, r4
 80a426c:	bd10      	pop	{r4, pc}

080a426e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80a426e:	300c      	adds	r0, #12
 80a4270:	f7ff bff2 	b.w	80a4258 <_ZN9TCPClient4DataD1Ev>

080a4274 <_ZN9TCPClient7connectEPKctm>:
{
 80a4274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4278:	461f      	mov	r7, r3
    stop();
 80a427a:	6803      	ldr	r3, [r0, #0]
{
 80a427c:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a4280:	4606      	mov	r6, r0
 80a4282:	460d      	mov	r5, r1
 80a4284:	4690      	mov	r8, r2
    stop();
 80a4286:	4798      	blx	r3
    if (Network.ready())
 80a4288:	4813      	ldr	r0, [pc, #76]	; (80a42d8 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a428a:	f001 f856 	bl	80a533a <_ZN5spark12NetworkClass5readyEv>
 80a428e:	b1f0      	cbz	r0, 80a42ce <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a4290:	a802      	add	r0, sp, #8
 80a4292:	f000 fe53 	bl	80a4f3c <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a4296:	4628      	mov	r0, r5
 80a4298:	f002 fd83 	bl	80a6da2 <strlen>
 80a429c:	2400      	movs	r4, #0
 80a429e:	b281      	uxth	r1, r0
 80a42a0:	463b      	mov	r3, r7
 80a42a2:	4628      	mov	r0, r5
 80a42a4:	9400      	str	r4, [sp, #0]
 80a42a6:	aa03      	add	r2, sp, #12
 80a42a8:	f7ff fb6e 	bl	80a3988 <inet_gethostbyname>
 80a42ac:	b990      	cbnz	r0, 80a42d4 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a42ae:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a42b0:	ad09      	add	r5, sp, #36	; 0x24
 80a42b2:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a42b6:	4b09      	ldr	r3, [pc, #36]	; (80a42dc <_ZN9TCPClient7connectEPKctm+0x68>)
 80a42b8:	ac03      	add	r4, sp, #12
 80a42ba:	9308      	str	r3, [sp, #32]
 80a42bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a42be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a42c0:	6823      	ldr	r3, [r4, #0]
 80a42c2:	4642      	mov	r2, r8
 80a42c4:	702b      	strb	r3, [r5, #0]
 80a42c6:	4630      	mov	r0, r6
 80a42c8:	463b      	mov	r3, r7
 80a42ca:	a908      	add	r1, sp, #32
 80a42cc:	47c8      	blx	r9
}
 80a42ce:	b00f      	add	sp, #60	; 0x3c
 80a42d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a42d4:	4620      	mov	r0, r4
 80a42d6:	e7fa      	b.n	80a42ce <_ZN9TCPClient7connectEPKctm+0x5a>
 80a42d8:	200004b8 	.word	0x200004b8
 80a42dc:	080a8fa0 	.word	0x080a8fa0

080a42e0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a42e0:	b510      	push	{r4, lr}
 80a42e2:	4604      	mov	r4, r0
{
	free(buffer);
 80a42e4:	6800      	ldr	r0, [r0, #0]
 80a42e6:	f7ff fc75 	bl	80a3bd4 <free>
}
 80a42ea:	4620      	mov	r0, r4
 80a42ec:	bd10      	pop	{r4, pc}

080a42ee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a42ee:	b510      	push	{r4, lr}
 80a42f0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a42f2:	6800      	ldr	r0, [r0, #0]
 80a42f4:	b108      	cbz	r0, 80a42fa <_ZN6String10invalidateEv+0xc>
 80a42f6:	f7ff fc6d 	bl	80a3bd4 <free>
	buffer = NULL;
 80a42fa:	2300      	movs	r3, #0
	capacity = len = 0;
 80a42fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a4300:	6023      	str	r3, [r4, #0]
}
 80a4302:	bd10      	pop	{r4, pc}

080a4304 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a4304:	b538      	push	{r3, r4, r5, lr}
 80a4306:	4604      	mov	r4, r0
 80a4308:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a430a:	6800      	ldr	r0, [r0, #0]
 80a430c:	3101      	adds	r1, #1
 80a430e:	f7ff fc69 	bl	80a3be4 <realloc>
	if (newbuffer) {
 80a4312:	b110      	cbz	r0, 80a431a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a4314:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a4318:	2001      	movs	r0, #1
	}
	return 0;
}
 80a431a:	bd38      	pop	{r3, r4, r5, pc}

080a431c <_ZN6String7reserveEj>:
{
 80a431c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a431e:	6803      	ldr	r3, [r0, #0]
{
 80a4320:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a4322:	b123      	cbz	r3, 80a432e <_ZN6String7reserveEj+0x12>
 80a4324:	6843      	ldr	r3, [r0, #4]
 80a4326:	428b      	cmp	r3, r1
 80a4328:	d301      	bcc.n	80a432e <_ZN6String7reserveEj+0x12>
 80a432a:	2001      	movs	r0, #1
}
 80a432c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a432e:	4620      	mov	r0, r4
 80a4330:	f7ff ffe8 	bl	80a4304 <_ZN6String12changeBufferEj>
 80a4334:	2800      	cmp	r0, #0
 80a4336:	d0f9      	beq.n	80a432c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a4338:	68a3      	ldr	r3, [r4, #8]
 80a433a:	2b00      	cmp	r3, #0
 80a433c:	d1f5      	bne.n	80a432a <_ZN6String7reserveEj+0xe>
 80a433e:	6822      	ldr	r2, [r4, #0]
 80a4340:	7013      	strb	r3, [r2, #0]
 80a4342:	e7f2      	b.n	80a432a <_ZN6String7reserveEj+0xe>

080a4344 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a4344:	b570      	push	{r4, r5, r6, lr}
 80a4346:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a4348:	4611      	mov	r1, r2
{
 80a434a:	4604      	mov	r4, r0
 80a434c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a434e:	f7ff ffe5 	bl	80a431c <_ZN6String7reserveEj>
 80a4352:	b920      	cbnz	r0, 80a435e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a4354:	4620      	mov	r0, r4
 80a4356:	f7ff ffca 	bl	80a42ee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a435a:	4620      	mov	r0, r4
 80a435c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a435e:	462a      	mov	r2, r5
 80a4360:	4631      	mov	r1, r6
 80a4362:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a4364:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a4366:	f002 fcab 	bl	80a6cc0 <memcpy>
	buffer[len] = 0;
 80a436a:	2100      	movs	r1, #0
 80a436c:	6822      	ldr	r2, [r4, #0]
 80a436e:	68a3      	ldr	r3, [r4, #8]
 80a4370:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a4372:	e7f2      	b.n	80a435a <_ZN6String4copyEPKcj+0x16>

080a4374 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a4374:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a4376:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a4378:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a437a:	460d      	mov	r5, r1
	capacity = 0;
 80a437c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4380:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4382:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a4384:	b139      	cbz	r1, 80a4396 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a4386:	4608      	mov	r0, r1
 80a4388:	f002 fd0b 	bl	80a6da2 <strlen>
 80a438c:	4629      	mov	r1, r5
 80a438e:	4602      	mov	r2, r0
 80a4390:	4620      	mov	r0, r4
 80a4392:	f7ff ffd7 	bl	80a4344 <_ZN6String4copyEPKcj>
}
 80a4396:	4620      	mov	r0, r4
 80a4398:	bd38      	pop	{r3, r4, r5, pc}

080a439a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a439a:	b538      	push	{r3, r4, r5, lr}
 80a439c:	4605      	mov	r5, r0
	if (buffer) {
 80a439e:	6800      	ldr	r0, [r0, #0]
{
 80a43a0:	460c      	mov	r4, r1
	if (buffer) {
 80a43a2:	b168      	cbz	r0, 80a43c0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a43a4:	686a      	ldr	r2, [r5, #4]
 80a43a6:	688b      	ldr	r3, [r1, #8]
 80a43a8:	429a      	cmp	r2, r3
 80a43aa:	d307      	bcc.n	80a43bc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a43ac:	6809      	ldr	r1, [r1, #0]
 80a43ae:	f002 fcd5 	bl	80a6d5c <strcpy>
			len = rhs.len;
 80a43b2:	68a3      	ldr	r3, [r4, #8]
 80a43b4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a43b6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a43b8:	60a3      	str	r3, [r4, #8]
}
 80a43ba:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a43bc:	f7ff fc0a 	bl	80a3bd4 <free>
	buffer = rhs.buffer;
 80a43c0:	6823      	ldr	r3, [r4, #0]
 80a43c2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a43c4:	6863      	ldr	r3, [r4, #4]
 80a43c6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a43c8:	68a3      	ldr	r3, [r4, #8]
 80a43ca:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a43cc:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a43ce:	e9c4 3300 	strd	r3, r3, [r4]
 80a43d2:	e7f1      	b.n	80a43b8 <_ZN6String4moveERS_+0x1e>

080a43d4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a43d4:	4288      	cmp	r0, r1
{
 80a43d6:	b510      	push	{r4, lr}
 80a43d8:	460b      	mov	r3, r1
 80a43da:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a43dc:	d004      	beq.n	80a43e8 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a43de:	6809      	ldr	r1, [r1, #0]
 80a43e0:	b121      	cbz	r1, 80a43ec <_ZN6StringaSERKS_+0x18>
 80a43e2:	689a      	ldr	r2, [r3, #8]
 80a43e4:	f7ff ffae 	bl	80a4344 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a43e8:	4620      	mov	r0, r4
 80a43ea:	bd10      	pop	{r4, pc}
	else invalidate();
 80a43ec:	f7ff ff7f 	bl	80a42ee <_ZN6String10invalidateEv>
 80a43f0:	e7fa      	b.n	80a43e8 <_ZN6StringaSERKS_+0x14>

080a43f2 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a43f2:	2300      	movs	r3, #0
String::String(const String &value)
 80a43f4:	b510      	push	{r4, lr}
 80a43f6:	4604      	mov	r4, r0
	capacity = 0;
 80a43f8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a43fc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a43fe:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a4400:	f7ff ffe8 	bl	80a43d4 <_ZN6StringaSERKS_>
}
 80a4404:	4620      	mov	r0, r4
 80a4406:	bd10      	pop	{r4, pc}

080a4408 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a4408:	4288      	cmp	r0, r1
{
 80a440a:	b510      	push	{r4, lr}
 80a440c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a440e:	d001      	beq.n	80a4414 <_ZN6StringaSEOS_+0xc>
 80a4410:	f7ff ffc3 	bl	80a439a <_ZN6String4moveERS_>
	return *this;
}
 80a4414:	4620      	mov	r0, r4
 80a4416:	bd10      	pop	{r4, pc}

080a4418 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a4418:	b570      	push	{r4, r5, r6, lr}
 80a441a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a441c:	460e      	mov	r6, r1
 80a441e:	b909      	cbnz	r1, 80a4424 <_ZN6String6concatEPKcj+0xc>
 80a4420:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a4422:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a4424:	b16a      	cbz	r2, 80a4442 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a4426:	6884      	ldr	r4, [r0, #8]
 80a4428:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a442a:	4621      	mov	r1, r4
 80a442c:	f7ff ff76 	bl	80a431c <_ZN6String7reserveEj>
 80a4430:	2800      	cmp	r0, #0
 80a4432:	d0f5      	beq.n	80a4420 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a4434:	6828      	ldr	r0, [r5, #0]
 80a4436:	68ab      	ldr	r3, [r5, #8]
 80a4438:	4631      	mov	r1, r6
 80a443a:	4418      	add	r0, r3
 80a443c:	f002 fc8e 	bl	80a6d5c <strcpy>
	len = newlen;
 80a4440:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a4442:	2001      	movs	r0, #1
 80a4444:	e7ed      	b.n	80a4422 <_ZN6String6concatEPKcj+0xa>

080a4446 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a4446:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4448:	688a      	ldr	r2, [r1, #8]
 80a444a:	6809      	ldr	r1, [r1, #0]
{
 80a444c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a444e:	f7ff ffe3 	bl	80a4418 <_ZN6String6concatEPKcj>
 80a4452:	b910      	cbnz	r0, 80a445a <_ZplRK15StringSumHelperRK6String+0x14>
 80a4454:	4620      	mov	r0, r4
 80a4456:	f7ff ff4a 	bl	80a42ee <_ZN6String10invalidateEv>
	return a;
}
 80a445a:	4620      	mov	r0, r4
 80a445c:	bd10      	pop	{r4, pc}

080a445e <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 80a445e:	4613      	mov	r3, r2
 80a4460:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a4462:	688a      	ldr	r2, [r1, #8]
 80a4464:	6884      	ldr	r4, [r0, #8]
 80a4466:	1aa4      	subs	r4, r4, r2
 80a4468:	429c      	cmp	r4, r3
 80a446a:	d30a      	bcc.n	80a4482 <_ZNK6String10startsWithERKS_j+0x24>
 80a446c:	6800      	ldr	r0, [r0, #0]
 80a446e:	b138      	cbz	r0, 80a4480 <_ZNK6String10startsWithERKS_j+0x22>
 80a4470:	6809      	ldr	r1, [r1, #0]
 80a4472:	b141      	cbz	r1, 80a4486 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80a4474:	4418      	add	r0, r3
 80a4476:	f002 fc9c 	bl	80a6db2 <strncmp>
 80a447a:	fab0 f080 	clz	r0, r0
 80a447e:	0940      	lsrs	r0, r0, #5
}
 80a4480:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a4482:	2000      	movs	r0, #0
 80a4484:	e7fc      	b.n	80a4480 <_ZNK6String10startsWithERKS_j+0x22>
 80a4486:	4608      	mov	r0, r1
 80a4488:	e7fa      	b.n	80a4480 <_ZNK6String10startsWithERKS_j+0x22>

080a448a <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 80a448a:	6882      	ldr	r2, [r0, #8]
 80a448c:	688b      	ldr	r3, [r1, #8]
 80a448e:	429a      	cmp	r2, r3
 80a4490:	d302      	bcc.n	80a4498 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 80a4492:	2200      	movs	r2, #0
 80a4494:	f7ff bfe3 	b.w	80a445e <_ZNK6String10startsWithERKS_j>
}
 80a4498:	2000      	movs	r0, #0
 80a449a:	4770      	bx	lr

080a449c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a449e:	4606      	mov	r6, r0
 80a44a0:	460d      	mov	r5, r1
  size_t n = 0;
 80a44a2:	2400      	movs	r4, #0
 80a44a4:	188f      	adds	r7, r1, r2
  while (size--) {
 80a44a6:	42bd      	cmp	r5, r7
 80a44a8:	d00c      	beq.n	80a44c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a44aa:	6833      	ldr	r3, [r6, #0]
 80a44ac:	4630      	mov	r0, r6
 80a44ae:	689b      	ldr	r3, [r3, #8]
 80a44b0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a44b4:	4798      	blx	r3
     if (chunk>=0)
 80a44b6:	1e03      	subs	r3, r0, #0
 80a44b8:	db01      	blt.n	80a44be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a44ba:	441c      	add	r4, r3
  while (size--) {
 80a44bc:	e7f3      	b.n	80a44a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a44be:	2c00      	cmp	r4, #0
 80a44c0:	bf08      	it	eq
 80a44c2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a44c4:	4620      	mov	r0, r4
 80a44c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a44c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a44c8:	b570      	push	{r4, r5, r6, lr}
 80a44ca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a44cc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a44ce:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a44d0:	b149      	cbz	r1, 80a44e6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a44d2:	f002 fc66 	bl	80a6da2 <strlen>
 80a44d6:	682b      	ldr	r3, [r5, #0]
 80a44d8:	4602      	mov	r2, r0
 80a44da:	4621      	mov	r1, r4
 80a44dc:	4628      	mov	r0, r5
    }
 80a44de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a44e2:	68db      	ldr	r3, [r3, #12]
 80a44e4:	4718      	bx	r3
    }
 80a44e6:	bd70      	pop	{r4, r5, r6, pc}

080a44e8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a44e8:	b508      	push	{r3, lr}
  return write(str);
 80a44ea:	f7ff ffed 	bl	80a44c8 <_ZN5Print5writeEPKc>
}
 80a44ee:	bd08      	pop	{r3, pc}

080a44f0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a44f0:	6803      	ldr	r3, [r0, #0]
 80a44f2:	689b      	ldr	r3, [r3, #8]
 80a44f4:	4718      	bx	r3

080a44f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a44f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a44f8:	210d      	movs	r1, #13
{
 80a44fa:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a44fc:	f7ff fff8 	bl	80a44f0 <_ZN5Print5printEc>
  n += print('\n');
 80a4500:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a4502:	4604      	mov	r4, r0
  n += print('\n');
 80a4504:	4628      	mov	r0, r5
 80a4506:	f7ff fff3 	bl	80a44f0 <_ZN5Print5printEc>
  return n;
}
 80a450a:	4420      	add	r0, r4
 80a450c:	bd38      	pop	{r3, r4, r5, pc}

080a450e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a450e:	b538      	push	{r3, r4, r5, lr}
 80a4510:	4605      	mov	r5, r0
  return write(str);
 80a4512:	f7ff ffd9 	bl	80a44c8 <_ZN5Print5writeEPKc>
 80a4516:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a4518:	4628      	mov	r0, r5
 80a451a:	f7ff ffec 	bl	80a44f6 <_ZN5Print7printlnEv>
  return n;
}
 80a451e:	4420      	add	r0, r4
 80a4520:	bd38      	pop	{r3, r4, r5, pc}

080a4522 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a4522:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a4524:	2a01      	cmp	r2, #1
 80a4526:	bf98      	it	ls
 80a4528:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a452a:	b530      	push	{r4, r5, lr}
 80a452c:	b08b      	sub	sp, #44	; 0x2c
 80a452e:	460c      	mov	r4, r1
  *str = '\0';
 80a4530:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a4534:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a4536:	4625      	mov	r5, r4
 80a4538:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a453c:	fb04 5312 	mls	r3, r4, r2, r5
 80a4540:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a4542:	2b09      	cmp	r3, #9
 80a4544:	bf94      	ite	ls
 80a4546:	3330      	addls	r3, #48	; 0x30
 80a4548:	3337      	addhi	r3, #55	; 0x37
 80a454a:	b2db      	uxtb	r3, r3
  } while(n);
 80a454c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a454e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a4552:	d9f0      	bls.n	80a4536 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a4554:	f7ff ffb8 	bl	80a44c8 <_ZN5Print5writeEPKc>
}
 80a4558:	b00b      	add	sp, #44	; 0x2c
 80a455a:	bd30      	pop	{r4, r5, pc}

080a455c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4560:	b086      	sub	sp, #24
 80a4562:	af00      	add	r7, sp, #0
 80a4564:	4605      	mov	r5, r0
 80a4566:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a4568:	1d38      	adds	r0, r7, #4
 80a456a:	2114      	movs	r1, #20
{
 80a456c:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a456e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a4570:	f7ff fb58 	bl	80a3c24 <vsnprintf>

    if (n<bufsize)
 80a4574:	2813      	cmp	r0, #19
 80a4576:	d80e      	bhi.n	80a4596 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a4578:	4628      	mov	r0, r5
 80a457a:	1d39      	adds	r1, r7, #4
 80a457c:	f7ff ffa4 	bl	80a44c8 <_ZN5Print5writeEPKc>
 80a4580:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a4582:	b11e      	cbz	r6, 80a458c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a4584:	4628      	mov	r0, r5
 80a4586:	f7ff ffb6 	bl	80a44f6 <_ZN5Print7printlnEv>
 80a458a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a458c:	4620      	mov	r0, r4
 80a458e:	3718      	adds	r7, #24
 80a4590:	46bd      	mov	sp, r7
 80a4592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a4596:	f100 0308 	add.w	r3, r0, #8
 80a459a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a459e:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a45a0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a45a4:	4622      	mov	r2, r4
 80a45a6:	1c41      	adds	r1, r0, #1
 80a45a8:	683b      	ldr	r3, [r7, #0]
 80a45aa:	4668      	mov	r0, sp
 80a45ac:	f7ff fb3a 	bl	80a3c24 <vsnprintf>
  return write(str);
 80a45b0:	4669      	mov	r1, sp
 80a45b2:	4628      	mov	r0, r5
 80a45b4:	f7ff ff88 	bl	80a44c8 <_ZN5Print5writeEPKc>
 80a45b8:	4604      	mov	r4, r0
 80a45ba:	46c5      	mov	sp, r8
 80a45bc:	e7e1      	b.n	80a4582 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a45be <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80a45be:	b510      	push	{r4, lr}
 80a45c0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a45c2:	f7ff f897 	bl	80a36f4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80a45c6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80a45c8:	6823      	ldr	r3, [r4, #0]
 80a45ca:	4620      	mov	r0, r4
 80a45cc:	695b      	ldr	r3, [r3, #20]
 80a45ce:	4798      	blx	r3
    if (c >= 0) return c;
 80a45d0:	2800      	cmp	r0, #0
 80a45d2:	da08      	bge.n	80a45e6 <_ZN6Stream9timedReadEv+0x28>
 80a45d4:	f7ff f88e 	bl	80a36f4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 80a45d8:	68e3      	ldr	r3, [r4, #12]
 80a45da:	1ac0      	subs	r0, r0, r3
 80a45dc:	68a3      	ldr	r3, [r4, #8]
 80a45de:	4298      	cmp	r0, r3
 80a45e0:	d3f2      	bcc.n	80a45c8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 80a45e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a45e6:	bd10      	pop	{r4, pc}

080a45e8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 80a45e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a45ec:	4607      	mov	r7, r0
 80a45ee:	460c      	mov	r4, r1
 80a45f0:	460d      	mov	r5, r1
 80a45f2:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 80a45f4:	42b5      	cmp	r5, r6
 80a45f6:	eba5 0804 	sub.w	r8, r5, r4
 80a45fa:	d007      	beq.n	80a460c <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 80a45fc:	4638      	mov	r0, r7
 80a45fe:	f7ff ffde 	bl	80a45be <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 80a4602:	1e03      	subs	r3, r0, #0
 80a4604:	db02      	blt.n	80a460c <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 80a4606:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 80a460a:	e7f3      	b.n	80a45f4 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 80a460c:	4640      	mov	r0, r8
 80a460e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a4614 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4614:	4b01      	ldr	r3, [pc, #4]	; (80a461c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a4616:	4a02      	ldr	r2, [pc, #8]	; (80a4620 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4618:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a461a:	4770      	bx	lr
 80a461c:	20000420 	.word	0x20000420
 80a4620:	080a8f5c 	.word	0x080a8f5c

080a4624 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a4624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a4628:	4b15      	ldr	r3, [pc, #84]	; (80a4680 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a462a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a4684 <_ZL22Refresh_UnixTime_Cachex+0x60>
    unix_time += time_zone_cache;
 80a462e:	e9d3 6700 	ldrd	r6, r7, [r3]
    unix_time += dst_current_cache;
 80a4632:	4b15      	ldr	r3, [pc, #84]	; (80a4688 <_ZL22Refresh_UnixTime_Cachex+0x64>)
    unix_time += time_zone_cache;
 80a4634:	1980      	adds	r0, r0, r6
 80a4636:	eb47 0701 	adc.w	r7, r7, r1
    unix_time += dst_current_cache;
 80a463a:	e9d3 6100 	ldrd	r6, r1, [r3]
 80a463e:	1986      	adds	r6, r0, r6
 80a4640:	eb47 0701 	adc.w	r7, r7, r1
    if(unix_time != unix_time_cache)
 80a4644:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a4648:	42bb      	cmp	r3, r7
 80a464a:	bf08      	it	eq
 80a464c:	42b2      	cmpeq	r2, r6
{
 80a464e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
 80a4650:	d013      	beq.n	80a467a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a4652:	a903      	add	r1, sp, #12
 80a4654:	4668      	mov	r0, sp
 80a4656:	e9cd 6700 	strd	r6, r7, [sp]
 80a465a:	f002 fa3f 	bl	80a6adc <localtime_r>
	calendar_time.tm_year += 1900;
 80a465e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4660:	4d0a      	ldr	r5, [pc, #40]	; (80a468c <_ZL22Refresh_UnixTime_Cachex+0x68>)
	calendar_time.tm_year += 1900;
 80a4662:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4666:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a4668:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a466a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a466c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a466e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a4672:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4676:	6823      	ldr	r3, [r4, #0]
 80a4678:	602b      	str	r3, [r5, #0]
    }
}
 80a467a:	b00c      	add	sp, #48	; 0x30
 80a467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4680:	20000458 	.word	0x20000458
 80a4684:	20000460 	.word	0x20000460
 80a4688:	20000450 	.word	0x20000450
 80a468c:	20000428 	.word	0x20000428

080a4690 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a4690:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4692:	2000      	movs	r0, #0
 80a4694:	f7ff fa86 	bl	80a3ba4 <spark_sync_time_pending>
 80a4698:	b128      	cbz	r0, 80a46a6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a469a:	f7ff fa63 	bl	80a3b64 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a469e:	f080 0001 	eor.w	r0, r0, #1
 80a46a2:	b2c0      	uxtb	r0, r0
    }
 80a46a4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a46a6:	2001      	movs	r0, #1
 80a46a8:	e7fc      	b.n	80a46a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a46ac <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 80a46ac:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a46ae:	f7ff ffb9 	bl	80a4624 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 80a46b2:	4b02      	ldr	r3, [pc, #8]	; (80a46bc <_ZN9TimeClass7weekdayEx+0x10>)
 80a46b4:	6998      	ldr	r0, [r3, #24]
}
 80a46b6:	3001      	adds	r0, #1
 80a46b8:	bd08      	pop	{r3, pc}
 80a46ba:	bf00      	nop
 80a46bc:	20000428 	.word	0x20000428

080a46c0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a46c0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a46c2:	f7ff ffaf 	bl	80a4624 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a46c6:	4b02      	ldr	r3, [pc, #8]	; (80a46d0 <_ZN9TimeClass5monthEx+0x10>)
 80a46c8:	6918      	ldr	r0, [r3, #16]
}
 80a46ca:	3001      	adds	r0, #1
 80a46cc:	bd08      	pop	{r3, pc}
 80a46ce:	bf00      	nop
 80a46d0:	20000428 	.word	0x20000428

080a46d4 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a46d4:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a46d6:	490a      	ldr	r1, [pc, #40]	; (80a4700 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a46d8:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a46da:	f002 f803 	bl	80a66e4 <__aeabi_fcmplt>
 80a46de:	b968      	cbnz	r0, 80a46fc <_ZN9TimeClass4zoneEf+0x28>
 80a46e0:	4620      	mov	r0, r4
 80a46e2:	4908      	ldr	r1, [pc, #32]	; (80a4704 <_ZN9TimeClass4zoneEf+0x30>)
 80a46e4:	f002 f81c 	bl	80a6720 <__aeabi_fcmpgt>
 80a46e8:	b940      	cbnz	r0, 80a46fc <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a46ea:	4907      	ldr	r1, [pc, #28]	; (80a4708 <_ZN9TimeClass4zoneEf+0x34>)
 80a46ec:	4620      	mov	r0, r4
 80a46ee:	f001 fe5b 	bl	80a63a8 <__aeabi_fmul>
 80a46f2:	f002 f845 	bl	80a6780 <__aeabi_f2lz>
 80a46f6:	4b05      	ldr	r3, [pc, #20]	; (80a470c <_ZN9TimeClass4zoneEf+0x38>)
 80a46f8:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a46fc:	bd10      	pop	{r4, pc}
 80a46fe:	bf00      	nop
 80a4700:	c1400000 	.word	0xc1400000
 80a4704:	41600000 	.word	0x41600000
 80a4708:	45610000 	.word	0x45610000
 80a470c:	20000458 	.word	0x20000458

080a4710 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a4710:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a4712:	2000      	movs	r0, #0
 80a4714:	f7ff f80e 	bl	80a3734 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a4718:	4604      	mov	r4, r0
 80a471a:	b9a0      	cbnz	r0, 80a4746 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a471c:	f7ff f944 	bl	80a39a8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a4720:	2801      	cmp	r0, #1
 80a4722:	d110      	bne.n	80a4746 <_ZN9TimeClass7isValidEv+0x36>
 80a4724:	4620      	mov	r0, r4
 80a4726:	f7ff f96f 	bl	80a3a08 <system_thread_get_state>
 80a472a:	b960      	cbnz	r0, 80a4746 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a472c:	f7ff ffb0 	bl	80a4690 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a4730:	b910      	cbnz	r0, 80a4738 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a4732:	f7ff fa07 	bl	80a3b44 <spark_process>
        while (_while() && !_condition()) {
 80a4736:	e7f9      	b.n	80a472c <_ZN9TimeClass7isValidEv+0x1c>
 80a4738:	f7ff ffaa 	bl	80a4690 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a473c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a4740:	2000      	movs	r0, #0
 80a4742:	f7fe bff7 	b.w	80a3734 <hal_rtc_time_is_valid>
}
 80a4746:	4620      	mov	r0, r4
 80a4748:	bd10      	pop	{r4, pc}

080a474a <_ZN9TimeClass3nowEv>:
{
 80a474a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a474c:	f7ff ffe0 	bl	80a4710 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a4750:	2210      	movs	r2, #16
 80a4752:	2100      	movs	r1, #0
 80a4754:	4668      	mov	r0, sp
 80a4756:	f002 fac1 	bl	80a6cdc <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a475a:	2100      	movs	r1, #0
 80a475c:	4668      	mov	r0, sp
 80a475e:	f7fe fff1 	bl	80a3744 <hal_rtc_get_time>
}
 80a4762:	9800      	ldr	r0, [sp, #0]
 80a4764:	b005      	add	sp, #20
 80a4766:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a476c <_ZN9TimeClass4hourEv>:
{
 80a476c:	b508      	push	{r3, lr}
	return hour(now());
 80a476e:	f7ff ffec 	bl	80a474a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a4772:	17c1      	asrs	r1, r0, #31
 80a4774:	f7ff ff56 	bl	80a4624 <_ZL22Refresh_UnixTime_Cachex>
}
 80a4778:	4b01      	ldr	r3, [pc, #4]	; (80a4780 <_ZN9TimeClass4hourEv+0x14>)
 80a477a:	6898      	ldr	r0, [r3, #8]
 80a477c:	bd08      	pop	{r3, pc}
 80a477e:	bf00      	nop
 80a4780:	20000428 	.word	0x20000428

080a4784 <_ZN9TimeClass6minuteEv>:
{
 80a4784:	b508      	push	{r3, lr}
	return minute(now());
 80a4786:	f7ff ffe0 	bl	80a474a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a478a:	17c1      	asrs	r1, r0, #31
 80a478c:	f7ff ff4a 	bl	80a4624 <_ZL22Refresh_UnixTime_Cachex>
}
 80a4790:	4b01      	ldr	r3, [pc, #4]	; (80a4798 <_ZN9TimeClass6minuteEv+0x14>)
 80a4792:	6858      	ldr	r0, [r3, #4]
 80a4794:	bd08      	pop	{r3, pc}
 80a4796:	bf00      	nop
 80a4798:	20000428 	.word	0x20000428

080a479c <_ZN9TimeClass6secondEv>:
{
 80a479c:	b508      	push	{r3, lr}
	return second(now());
 80a479e:	f7ff ffd4 	bl	80a474a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a47a2:	17c1      	asrs	r1, r0, #31
 80a47a4:	f7ff ff3e 	bl	80a4624 <_ZL22Refresh_UnixTime_Cachex>
}
 80a47a8:	4b01      	ldr	r3, [pc, #4]	; (80a47b0 <_ZN9TimeClass6secondEv+0x14>)
 80a47aa:	6818      	ldr	r0, [r3, #0]
 80a47ac:	bd08      	pop	{r3, pc}
 80a47ae:	bf00      	nop
 80a47b0:	20000428 	.word	0x20000428

080a47b4 <_ZN9TimeClass3dayEv>:
{
 80a47b4:	b508      	push	{r3, lr}
	return day(now());
 80a47b6:	f7ff ffc8 	bl	80a474a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a47ba:	17c1      	asrs	r1, r0, #31
 80a47bc:	f7ff ff32 	bl	80a4624 <_ZL22Refresh_UnixTime_Cachex>
}
 80a47c0:	4b01      	ldr	r3, [pc, #4]	; (80a47c8 <_ZN9TimeClass3dayEv+0x14>)
 80a47c2:	68d8      	ldr	r0, [r3, #12]
 80a47c4:	bd08      	pop	{r3, pc}
 80a47c6:	bf00      	nop
 80a47c8:	20000428 	.word	0x20000428

080a47cc <_ZN9TimeClass7weekdayEv>:
{
 80a47cc:	b508      	push	{r3, lr}
	return weekday(now());
 80a47ce:	f7ff ffbc 	bl	80a474a <_ZN9TimeClass3nowEv>
}
 80a47d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 80a47d6:	17c1      	asrs	r1, r0, #31
 80a47d8:	f7ff bf68 	b.w	80a46ac <_ZN9TimeClass7weekdayEx>

080a47dc <_ZN9TimeClass5monthEv>:
{
 80a47dc:	b508      	push	{r3, lr}
	return month(now());
 80a47de:	f7ff ffb4 	bl	80a474a <_ZN9TimeClass3nowEv>
}
 80a47e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a47e6:	17c1      	asrs	r1, r0, #31
 80a47e8:	f7ff bf6a 	b.w	80a46c0 <_ZN9TimeClass5monthEx>

080a47ec <_ZN9TimeClass4yearEv>:
{
 80a47ec:	b508      	push	{r3, lr}
	return year(now());
 80a47ee:	f7ff ffac 	bl	80a474a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a47f2:	17c1      	asrs	r1, r0, #31
 80a47f4:	f7ff ff16 	bl	80a4624 <_ZL22Refresh_UnixTime_Cachex>
}
 80a47f8:	4b01      	ldr	r3, [pc, #4]	; (80a4800 <_ZN9TimeClass4yearEv+0x14>)
 80a47fa:	6958      	ldr	r0, [r3, #20]
 80a47fc:	bd08      	pop	{r3, pc}
 80a47fe:	bf00      	nop
 80a4800:	20000428 	.word	0x20000428

080a4804 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a4804:	4b02      	ldr	r3, [pc, #8]	; (80a4810 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a4806:	681a      	ldr	r2, [r3, #0]
 80a4808:	4b02      	ldr	r3, [pc, #8]	; (80a4814 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a480a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a480c:	4770      	bx	lr
 80a480e:	bf00      	nop
 80a4810:	2000007c 	.word	0x2000007c
 80a4814:	20000424 	.word	0x20000424

080a4818 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a4818:	2100      	movs	r1, #0
 80a481a:	f7ff b8d5 	b.w	80a39c8 <system_delay_ms>

080a481e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a481e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a4820:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a4822:	4604      	mov	r4, r0
      if (_M_manager)
 80a4824:	b113      	cbz	r3, 80a482c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4826:	2203      	movs	r2, #3
 80a4828:	4601      	mov	r1, r0
 80a482a:	4798      	blx	r3
    }
 80a482c:	4620      	mov	r0, r4
 80a482e:	bd10      	pop	{r4, pc}

080a4830 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80a4830:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4832:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a4834:	460b      	mov	r3, r1
 80a4836:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4838:	c803      	ldmia	r0, {r0, r1}
 80a483a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a483e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a4842:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a4846:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a484a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a484e:	b002      	add	sp, #8
 80a4850:	bd10      	pop	{r4, pc}
	...

080a4854 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a4854:	2200      	movs	r2, #0
 80a4856:	4b01      	ldr	r3, [pc, #4]	; (80a485c <_GLOBAL__sub_I_RGB+0x8>)
 80a4858:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a485a:	4770      	bx	lr
 80a485c:	20000468 	.word	0x20000468

080a4860 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a4860:	4b01      	ldr	r3, [pc, #4]	; (80a4868 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a4862:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a4864:	4770      	bx	lr
 80a4866:	bf00      	nop
 80a4868:	20000080 	.word	0x20000080

080a486c <serialEventRun>:
{
 80a486c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a486e:	4b13      	ldr	r3, [pc, #76]	; (80a48bc <serialEventRun+0x50>)
 80a4870:	b143      	cbz	r3, 80a4884 <serialEventRun+0x18>
 80a4872:	f000 fc03 	bl	80a507c <_Z16_fetch_usbserialv>
 80a4876:	6803      	ldr	r3, [r0, #0]
 80a4878:	691b      	ldr	r3, [r3, #16]
 80a487a:	4798      	blx	r3
 80a487c:	2800      	cmp	r0, #0
 80a487e:	dd01      	ble.n	80a4884 <serialEventRun+0x18>
        serialEvent();
 80a4880:	f7fb fde0 	bl	80a0444 <_Z11serialEventv>
    if (serialEvent1 && Serial1.available()>0)
 80a4884:	4b0e      	ldr	r3, [pc, #56]	; (80a48c0 <serialEventRun+0x54>)
 80a4886:	b143      	cbz	r3, 80a489a <serialEventRun+0x2e>
 80a4888:	f000 fea4 	bl	80a55d4 <_Z22__fetch_global_Serial1v>
 80a488c:	6803      	ldr	r3, [r0, #0]
 80a488e:	691b      	ldr	r3, [r3, #16]
 80a4890:	4798      	blx	r3
 80a4892:	2800      	cmp	r0, #0
 80a4894:	dd01      	ble.n	80a489a <serialEventRun+0x2e>
        serialEvent1();
 80a4896:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a489a:	4b0a      	ldr	r3, [pc, #40]	; (80a48c4 <serialEventRun+0x58>)
 80a489c:	b10b      	cbz	r3, 80a48a2 <serialEventRun+0x36>
 80a489e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a48a2:	4b09      	ldr	r3, [pc, #36]	; (80a48c8 <serialEventRun+0x5c>)
 80a48a4:	b143      	cbz	r3, 80a48b8 <serialEventRun+0x4c>
 80a48a6:	f000 fc15 	bl	80a50d4 <_Z17_fetch_usbserial1v>
 80a48aa:	6803      	ldr	r3, [r0, #0]
 80a48ac:	691b      	ldr	r3, [r3, #16]
 80a48ae:	4798      	blx	r3
 80a48b0:	2800      	cmp	r0, #0
 80a48b2:	dd01      	ble.n	80a48b8 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a48b4:	f3af 8000 	nop.w
}
 80a48b8:	bd08      	pop	{r3, pc}
 80a48ba:	bf00      	nop
 80a48bc:	080a0445 	.word	0x080a0445
	...

080a48cc <_post_loop>:
{
 80a48cc:	b508      	push	{r3, lr}
	serialEventRun();
 80a48ce:	f7ff ffcd 	bl	80a486c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a48d2:	f7fe ff0f 	bl	80a36f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a48d6:	4b01      	ldr	r3, [pc, #4]	; (80a48dc <_post_loop+0x10>)
 80a48d8:	6018      	str	r0, [r3, #0]
}
 80a48da:	bd08      	pop	{r3, pc}
 80a48dc:	200004e8 	.word	0x200004e8

080a48e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a48e0:	4805      	ldr	r0, [pc, #20]	; (80a48f8 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a48e2:	4a06      	ldr	r2, [pc, #24]	; (80a48fc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a48e4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a48e6:	1a12      	subs	r2, r2, r0
 80a48e8:	4905      	ldr	r1, [pc, #20]	; (80a4900 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a48ea:	f002 f9e9 	bl	80a6cc0 <memcpy>
    __backup_sram_signature = signature;
 80a48ee:	4b05      	ldr	r3, [pc, #20]	; (80a4904 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a48f0:	4a05      	ldr	r2, [pc, #20]	; (80a4908 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a48f2:	601a      	str	r2, [r3, #0]
}
 80a48f4:	bd08      	pop	{r3, pc}
 80a48f6:	bf00      	nop
 80a48f8:	40024000 	.word	0x40024000
 80a48fc:	40024004 	.word	0x40024004
 80a4900:	080a9418 	.word	0x080a9418
 80a4904:	40024000 	.word	0x40024000
 80a4908:	9a271c1e 	.word	0x9a271c1e

080a490c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a490c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a490e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4910:	461a      	mov	r2, r3
 80a4912:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4916:	9300      	str	r3, [sp, #0]
 80a4918:	f7ff f888 	bl	80a3a2c <system_ctrl_set_result>
}
 80a491c:	b003      	add	sp, #12
 80a491e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4924 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a4924:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a4926:	8843      	ldrh	r3, [r0, #2]
 80a4928:	2b0a      	cmp	r3, #10
 80a492a:	d008      	beq.n	80a493e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a492c:	2b50      	cmp	r3, #80	; 0x50
 80a492e:	d10b      	bne.n	80a4948 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a4930:	4b09      	ldr	r3, [pc, #36]	; (80a4958 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4932:	681b      	ldr	r3, [r3, #0]
 80a4934:	b14b      	cbz	r3, 80a494a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a4936:	b003      	add	sp, #12
 80a4938:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a493c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a493e:	f7ff ffe5 	bl	80a490c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a4942:	b003      	add	sp, #12
 80a4944:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4948:	2300      	movs	r3, #0
 80a494a:	461a      	mov	r2, r3
 80a494c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4950:	9300      	str	r3, [sp, #0]
 80a4952:	f7ff f86b 	bl	80a3a2c <system_ctrl_set_result>
}
 80a4956:	e7f4      	b.n	80a4942 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a4958:	2000047c 	.word	0x2000047c

080a495c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a495c:	2100      	movs	r1, #0
{
 80a495e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a4960:	4811      	ldr	r0, [pc, #68]	; (80a49a8 <module_user_init_hook+0x4c>)
 80a4962:	f7ff f987 	bl	80a3c74 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a4966:	4b11      	ldr	r3, [pc, #68]	; (80a49ac <module_user_init_hook+0x50>)
 80a4968:	681a      	ldr	r2, [r3, #0]
 80a496a:	4b11      	ldr	r3, [pc, #68]	; (80a49b0 <module_user_init_hook+0x54>)
 80a496c:	429a      	cmp	r2, r3
 80a496e:	bf0c      	ite	eq
 80a4970:	2201      	moveq	r2, #1
 80a4972:	2200      	movne	r2, #0
 80a4974:	4b0f      	ldr	r3, [pc, #60]	; (80a49b4 <module_user_init_hook+0x58>)
 80a4976:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4978:	d001      	beq.n	80a497e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a497a:	f7ff ffb1 	bl	80a48e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a497e:	f7fe fea9 	bl	80a36d4 <HAL_RNG_GetRandomNumber>
 80a4982:	4604      	mov	r4, r0
    srand(seed);
 80a4984:	f002 f9b2 	bl	80a6cec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a4988:	4b0b      	ldr	r3, [pc, #44]	; (80a49b8 <module_user_init_hook+0x5c>)
 80a498a:	b113      	cbz	r3, 80a4992 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a498c:	4620      	mov	r0, r4
 80a498e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4992:	2100      	movs	r1, #0
 80a4994:	4808      	ldr	r0, [pc, #32]	; (80a49b8 <module_user_init_hook+0x5c>)
 80a4996:	f7ff f90d 	bl	80a3bb4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a499a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a499e:	2100      	movs	r1, #0
 80a49a0:	4806      	ldr	r0, [pc, #24]	; (80a49bc <module_user_init_hook+0x60>)
 80a49a2:	f7ff b839 	b.w	80a3a18 <system_ctrl_set_app_request_handler>
 80a49a6:	bf00      	nop
 80a49a8:	080a4861 	.word	0x080a4861
 80a49ac:	40024000 	.word	0x40024000
 80a49b0:	9a271c1e 	.word	0x9a271c1e
 80a49b4:	20000478 	.word	0x20000478
 80a49b8:	00000000 	.word	0x00000000
 80a49bc:	080a4925 	.word	0x080a4925

080a49c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a49c0:	4770      	bx	lr

080a49c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a49c2:	2000      	movs	r0, #0
 80a49c4:	4770      	bx	lr

080a49c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a49c6:	b510      	push	{r4, lr}
 80a49c8:	4604      	mov	r4, r0
 80a49ca:	2110      	movs	r1, #16
 80a49cc:	f7fb fb67 	bl	80a009e <_ZdlPvj>
 80a49d0:	4620      	mov	r0, r4
 80a49d2:	bd10      	pop	{r4, pc}

080a49d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a49d4:	b508      	push	{r3, lr}
      { delete this; }
 80a49d6:	f7ff fff6 	bl	80a49c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a49da:	bd08      	pop	{r3, pc}

080a49dc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a49dc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a49de:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a49e0:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a49e4:	6002      	str	r2, [r0, #0]
 80a49e6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a49e8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a49ea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a49ec:	680c      	ldr	r4, [r1, #0]
 80a49ee:	8085      	strh	r5, [r0, #4]
 80a49f0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a49f2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a49f4:	bd30      	pop	{r4, r5, pc}

080a49f6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a49f6:	b510      	push	{r4, lr}
 80a49f8:	4604      	mov	r4, r0
    free((void*)msg_);
 80a49fa:	6800      	ldr	r0, [r0, #0]
 80a49fc:	f7ff f8ea 	bl	80a3bd4 <free>
}
 80a4a00:	4620      	mov	r0, r4
 80a4a02:	bd10      	pop	{r4, pc}

080a4a04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a4a04:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a4a06:	68c4      	ldr	r4, [r0, #12]
 80a4a08:	b1f4      	cbz	r4, 80a4a48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a4a0a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a4a0c:	2b02      	cmp	r3, #2
 80a4a0e:	d103      	bne.n	80a4a18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a4a10:	f104 000c 	add.w	r0, r4, #12
 80a4a14:	f7ff ffef 	bl	80a49f6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a4a18:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a4a1a:	b135      	cbz	r5, 80a4a2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4a1c:	4628      	mov	r0, r5
 80a4a1e:	f7ff fefe 	bl	80a481e <_ZNSt14_Function_baseD1Ev>
 80a4a22:	2110      	movs	r1, #16
 80a4a24:	4628      	mov	r0, r5
 80a4a26:	f7fb fb3a 	bl	80a009e <_ZdlPvj>
 80a4a2a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a4a2c:	b135      	cbz	r5, 80a4a3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a4a2e:	4628      	mov	r0, r5
 80a4a30:	f7ff fef5 	bl	80a481e <_ZNSt14_Function_baseD1Ev>
 80a4a34:	2110      	movs	r1, #16
 80a4a36:	4628      	mov	r0, r5
 80a4a38:	f7fb fb31 	bl	80a009e <_ZdlPvj>
 80a4a3c:	4620      	mov	r0, r4
 80a4a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4a42:	2114      	movs	r1, #20
 80a4a44:	f7fb bb2b 	b.w	80a009e <_ZdlPvj>
 80a4a48:	bd38      	pop	{r3, r4, r5, pc}

080a4a4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4a4a:	680b      	ldr	r3, [r1, #0]
 80a4a4c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a4a4e:	684b      	ldr	r3, [r1, #4]
 80a4a50:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a4a52:	b113      	cbz	r3, 80a4a5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a4a54:	685a      	ldr	r2, [r3, #4]
 80a4a56:	3201      	adds	r2, #1
 80a4a58:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4a5a:	4770      	bx	lr

080a4a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a4a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4a5e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a4a60:	4668      	mov	r0, sp
 80a4a62:	460d      	mov	r5, r1
 80a4a64:	f7ff fff1 	bl	80a4a4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4a68:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4a6a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4a6c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a4a6e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a4a70:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a4a72:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a4a74:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 80a4a76:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a4a78:	f7fb fb29 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a4a7c:	b135      	cbz	r5, 80a4a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a4a7e:	1d28      	adds	r0, r5, #4
 80a4a80:	f7fb fb25 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4a84:	2108      	movs	r1, #8
 80a4a86:	4628      	mov	r0, r5
 80a4a88:	f7fb fb09 	bl	80a009e <_ZdlPvj>
        return p;
    }
 80a4a8c:	4620      	mov	r0, r4
 80a4a8e:	b003      	add	sp, #12
 80a4a90:	bd30      	pop	{r4, r5, pc}

080a4a92 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4a92:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a4a94:	b510      	push	{r4, lr}
      if (_M_empty())
 80a4a96:	b90a      	cbnz	r2, 80a4a9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a4a98:	f000 fe22 	bl	80a56e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4a9c:	68c3      	ldr	r3, [r0, #12]
    }
 80a4a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4aa2:	4718      	bx	r3

080a4aa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a4aa4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a4aa6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a4aa8:	f100 0110 	add.w	r1, r0, #16
 80a4aac:	f7ff fff1 	bl	80a4a92 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a4ab0:	bd08      	pop	{r3, pc}

080a4ab2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a4ab2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a4ab4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a4ab6:	b90a      	cbnz	r2, 80a4abc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a4ab8:	f000 fe12 	bl	80a56e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4abc:	68c3      	ldr	r3, [r0, #12]
    }
 80a4abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4ac2:	4718      	bx	r3

080a4ac4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a4ac4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a4ac6:	6800      	ldr	r0, [r0, #0]
 80a4ac8:	f100 0110 	add.w	r1, r0, #16
 80a4acc:	f7ff fff1 	bl	80a4ab2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a4ad0:	bd08      	pop	{r3, pc}
	...

080a4ad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4ad4:	b538      	push	{r3, r4, r5, lr}
 80a4ad6:	2300      	movs	r3, #0
 80a4ad8:	4604      	mov	r4, r0
 80a4ada:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4adc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4ade:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4ae0:	f7fb fad9 	bl	80a0096 <_Znwj>
 80a4ae4:	b128      	cbz	r0, 80a4af2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a4ae6:	2301      	movs	r3, #1
 80a4ae8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a4aec:	4b02      	ldr	r3, [pc, #8]	; (80a4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a4aee:	60c5      	str	r5, [r0, #12]
 80a4af0:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4af2:	6020      	str	r0, [r4, #0]
	}
 80a4af4:	4620      	mov	r0, r4
 80a4af6:	bd38      	pop	{r3, r4, r5, pc}
 80a4af8:	080a8f84 	.word	0x080a8f84

080a4afc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a4afc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a4afe:	2300      	movs	r3, #0
 80a4b00:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a4b02:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a4b04:	4604      	mov	r4, r0
 80a4b06:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a4b08:	b12b      	cbz	r3, 80a4b16 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4b0a:	2202      	movs	r2, #2
 80a4b0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4b0e:	68eb      	ldr	r3, [r5, #12]
 80a4b10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4b12:	68ab      	ldr	r3, [r5, #8]
 80a4b14:	60a3      	str	r3, [r4, #8]
    }
 80a4b16:	4620      	mov	r0, r4
 80a4b18:	bd38      	pop	{r3, r4, r5, pc}
	...

080a4b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a4b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4b1e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
 80a4b20:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a4b22:	4668      	mov	r0, sp
 80a4b24:	f7ff ff5a 	bl	80a49dc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a4b28:	f04f 0302 	mov.w	r3, #2
 80a4b2c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a4b30:	2a00      	cmp	r2, #0
 80a4b32:	d103      	bne.n	80a4b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a4b34:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a4b38:	2900      	cmp	r1, #0
 80a4b3a:	d1f7      	bne.n	80a4b2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a4b3c:	d125      	bne.n	80a4b8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a4b3e:	f104 050c 	add.w	r5, r4, #12
 80a4b42:	4669      	mov	r1, sp
 80a4b44:	4628      	mov	r0, r5
 80a4b46:	f7ff ff49 	bl	80a49dc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4b4a:	2301      	movs	r3, #1
 80a4b4c:	f3bf 8f5b 	dmb	ish
 80a4b50:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a4b52:	2000      	movs	r0, #0
 80a4b54:	f3bf 8f5b 	dmb	ish
 80a4b58:	f104 0308 	add.w	r3, r4, #8
 80a4b5c:	e853 6f00 	ldrex	r6, [r3]
 80a4b60:	e843 0200 	strex	r2, r0, [r3]
 80a4b64:	2a00      	cmp	r2, #0
 80a4b66:	d1f9      	bne.n	80a4b5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a4b68:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4b6c:	b16e      	cbz	r6, 80a4b8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a4b6e:	f7fe ff3b 	bl	80a39e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a4b72:	b178      	cbz	r0, 80a4b94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4b74:	4629      	mov	r1, r5
 80a4b76:	4630      	mov	r0, r6
 80a4b78:	f7ff ff8b 	bl	80a4a92 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a4b7c:	4630      	mov	r0, r6
 80a4b7e:	f7ff fe4e 	bl	80a481e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a4b82:	2110      	movs	r1, #16
 80a4b84:	4630      	mov	r0, r6
 80a4b86:	f7fb fa8a 	bl	80a009e <_ZdlPvj>
        p_->setError(std::move(error));
 80a4b8a:	4668      	mov	r0, sp
 80a4b8c:	f7ff ff33 	bl	80a49f6 <_ZN8particle5ErrorD1Ev>
    }
 80a4b90:	b009      	add	sp, #36	; 0x24
 80a4b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4b94:	4631      	mov	r1, r6
 80a4b96:	a802      	add	r0, sp, #8
 80a4b98:	f7ff ffb0 	bl	80a4afc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a4b9c:	68e0      	ldr	r0, [r4, #12]
 80a4b9e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4ba2:	b108      	cbz	r0, 80a4ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a4ba4:	f002 f8e2 	bl	80a6d6c <strdup>
        type_(type) {
 80a4ba8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4baa:	2010      	movs	r0, #16
 80a4bac:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a4bb0:	f7fb fa71 	bl	80a0096 <_Znwj>
 80a4bb4:	4605      	mov	r5, r0
 80a4bb6:	b1e8      	cbz	r0, 80a4bf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a4bb8:	2700      	movs	r7, #0
 80a4bba:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4bbc:	2018      	movs	r0, #24
 80a4bbe:	f7fb fa6a 	bl	80a0096 <_Znwj>
 80a4bc2:	4604      	mov	r4, r0
 80a4bc4:	b188      	cbz	r0, 80a4bea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a4bc6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a4bc8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4bca:	a802      	add	r0, sp, #8
 80a4bcc:	f7ff fe30 	bl	80a4830 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4bd0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a4bd2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4bd4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4bd6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4bd8:	9204      	str	r2, [sp, #16]
 80a4bda:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4bdc:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a4bde:	60e3      	str	r3, [r4, #12]
 80a4be0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a4be4:	9205      	str	r2, [sp, #20]
 80a4be6:	f7ff fef9 	bl	80a49dc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a4bea:	4b08      	ldr	r3, [pc, #32]	; (80a4c0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4bec:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4bee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a4bf0:	4b07      	ldr	r3, [pc, #28]	; (80a4c10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a4bf2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a4bf4:	a806      	add	r0, sp, #24
 80a4bf6:	f7ff fefe 	bl	80a49f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a4bfa:	a802      	add	r0, sp, #8
 80a4bfc:	f7ff fe0f 	bl	80a481e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4c00:	2200      	movs	r2, #0
 80a4c02:	4629      	mov	r1, r5
 80a4c04:	4803      	ldr	r0, [pc, #12]	; (80a4c14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a4c06:	f7fe fef7 	bl	80a39f8 <application_thread_invoke>
 80a4c0a:	e7b7      	b.n	80a4b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a4c0c:	080a4aa5 	.word	0x080a4aa5
 80a4c10:	080a4d31 	.word	0x080a4d31
 80a4c14:	080a51c5 	.word	0x080a51c5

080a4c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a4c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4c1c:	b08a      	sub	sp, #40	; 0x28
 80a4c1e:	4605      	mov	r5, r0
 80a4c20:	460c      	mov	r4, r1
 80a4c22:	4617      	mov	r7, r2
 80a4c24:	4698      	mov	r8, r3
 80a4c26:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4c2a:	f7fe ff9b 	bl	80a3b64 <spark_cloud_flag_connected>
 80a4c2e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a4c30:	4682      	mov	sl, r0
 80a4c32:	bb38      	cbnz	r0, 80a4c84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a4c34:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a4c38:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4c3a:	a905      	add	r1, sp, #20
 80a4c3c:	4630      	mov	r0, r6
 80a4c3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a4c42:	f7ff fecb 	bl	80a49dc <_ZN8particle5ErrorC1EOS0_>
 80a4c46:	2014      	movs	r0, #20
 80a4c48:	f7fb fa25 	bl	80a0096 <_Znwj>
 80a4c4c:	4604      	mov	r4, r0
 80a4c4e:	b148      	cbz	r0, 80a4c64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a4c50:	2302      	movs	r3, #2
 80a4c52:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4c54:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a4c56:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4c5a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a4c5c:	4631      	mov	r1, r6
 80a4c5e:	300c      	adds	r0, #12
 80a4c60:	f7ff febc 	bl	80a49dc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4c64:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a4c66:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4c68:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a4c6c:	f7ff ff32 	bl	80a4ad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4c70:	4630      	mov	r0, r6
 80a4c72:	f7ff fec0 	bl	80a49f6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a4c76:	a805      	add	r0, sp, #20
 80a4c78:	f7ff febd 	bl	80a49f6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a4c7c:	4628      	mov	r0, r5
 80a4c7e:	b00a      	add	sp, #40	; 0x28
 80a4c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a4c84:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a4c86:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a4c8a:	2014      	movs	r0, #20
 80a4c8c:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a4c90:	9307      	str	r3, [sp, #28]
 80a4c92:	f7fb fa00 	bl	80a0096 <_Znwj>
 80a4c96:	4601      	mov	r1, r0
 80a4c98:	b128      	cbz	r0, 80a4ca6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a4c9a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a4c9e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4ca2:	f880 a001 	strb.w	sl, [r0, #1]
 80a4ca6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4ca8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a4caa:	f7ff ff13 	bl	80a4ad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a4cae:	4b1f      	ldr	r3, [pc, #124]	; (80a4d2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a4cb0:	2008      	movs	r0, #8
 80a4cb2:	9308      	str	r3, [sp, #32]
 80a4cb4:	f7fb f9ef 	bl	80a0096 <_Znwj>
 80a4cb8:	4682      	mov	sl, r0
 80a4cba:	b110      	cbz	r0, 80a4cc2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a4cbc:	a903      	add	r1, sp, #12
 80a4cbe:	f7ff fec4 	bl	80a4a4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4cc2:	4642      	mov	r2, r8
 80a4cc4:	4639      	mov	r1, r7
 80a4cc6:	4620      	mov	r0, r4
 80a4cc8:	9600      	str	r6, [sp, #0]
 80a4cca:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a4cce:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4cd2:	f7fe ff57 	bl	80a3b84 <spark_send_event>
 80a4cd6:	b9b8      	cbnz	r0, 80a4d08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a4cd8:	9b03      	ldr	r3, [sp, #12]
 80a4cda:	785b      	ldrb	r3, [r3, #1]
 80a4cdc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a4ce0:	b993      	cbnz	r3, 80a4d08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a4ce2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a4ce6:	a905      	add	r1, sp, #20
 80a4ce8:	a803      	add	r0, sp, #12
 80a4cea:	9205      	str	r2, [sp, #20]
 80a4cec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a4cf0:	f7ff ff14 	bl	80a4b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a4cf4:	a805      	add	r0, sp, #20
 80a4cf6:	f7ff fe7e 	bl	80a49f6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a4cfa:	a805      	add	r0, sp, #20
 80a4cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a4cfe:	f7ff fead 	bl	80a4a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a4d02:	a806      	add	r0, sp, #24
 80a4d04:	f7fb f9e3 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4d08:	a903      	add	r1, sp, #12
 80a4d0a:	a805      	add	r0, sp, #20
 80a4d0c:	f7ff fe9d 	bl	80a4a4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4d10:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4d12:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4d14:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a4d16:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a4d18:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a4d1a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a4d1c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a4d1e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a4d20:	f7fb f9d5 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4d24:	a804      	add	r0, sp, #16
 80a4d26:	f7fb f9d2 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a4d2a:	e7a7      	b.n	80a4c7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a4d2c:	080a4dad 	.word	0x080a4dad

080a4d30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a4d30:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4d34:	4605      	mov	r5, r0
	switch (__op)
 80a4d36:	d103      	bne.n	80a4d40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a4d38:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a4d3a:	6003      	str	r3, [r0, #0]
      }
 80a4d3c:	2000      	movs	r0, #0
 80a4d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a4d40:	2a02      	cmp	r2, #2
 80a4d42:	d010      	beq.n	80a4d66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a4d44:	2a03      	cmp	r2, #3
 80a4d46:	d1f9      	bne.n	80a4d3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a4d48:	6804      	ldr	r4, [r0, #0]
 80a4d4a:	2c00      	cmp	r4, #0
 80a4d4c:	d0f6      	beq.n	80a4d3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a4d4e:	f104 0010 	add.w	r0, r4, #16
 80a4d52:	f7ff fe50 	bl	80a49f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a4d56:	4620      	mov	r0, r4
 80a4d58:	f7ff fd61 	bl	80a481e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a4d5c:	2118      	movs	r1, #24
 80a4d5e:	4620      	mov	r0, r4
 80a4d60:	f7fb f99d 	bl	80a009e <_ZdlPvj>
 80a4d64:	e7ea      	b.n	80a4d3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4d66:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a4d68:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4d6a:	f7fb f994 	bl	80a0096 <_Znwj>
 80a4d6e:	4604      	mov	r4, r0
 80a4d70:	b150      	cbz	r0, 80a4d88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a4d72:	4631      	mov	r1, r6
 80a4d74:	f7ff fec2 	bl	80a4afc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a4d78:	6930      	ldr	r0, [r6, #16]
 80a4d7a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4d7e:	b108      	cbz	r0, 80a4d84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a4d80:	f001 fff4 	bl	80a6d6c <strdup>
        type_(type) {
 80a4d84:	6120      	str	r0, [r4, #16]
 80a4d86:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a4d88:	602c      	str	r4, [r5, #0]
	}
 80a4d8a:	e7d7      	b.n	80a4d3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a4d8c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a4d8c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a4d8e:	2300      	movs	r3, #0
 80a4d90:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a4d92:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a4d94:	4604      	mov	r4, r0
 80a4d96:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a4d98:	b12b      	cbz	r3, 80a4da6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4d9a:	2202      	movs	r2, #2
 80a4d9c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4d9e:	68eb      	ldr	r3, [r5, #12]
 80a4da0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4da2:	68ab      	ldr	r3, [r5, #8]
 80a4da4:	60a3      	str	r3, [r4, #8]
    }
 80a4da6:	4620      	mov	r0, r4
 80a4da8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a4dac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a4dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4dae:	4604      	mov	r4, r0
 80a4db0:	b089      	sub	sp, #36	; 0x24
 80a4db2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a4db4:	a801      	add	r0, sp, #4
 80a4db6:	4611      	mov	r1, r2
 80a4db8:	f7ff fe50 	bl	80a4a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a4dbc:	b1a4      	cbz	r4, 80a4de8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a4dbe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4dc0:	b11d      	cbz	r5, 80a4dca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a4dc2:	4628      	mov	r0, r5
 80a4dc4:	f001 ffd2 	bl	80a6d6c <strdup>
 80a4dc8:	4605      	mov	r5, r0
 80a4dca:	a801      	add	r0, sp, #4
 80a4dcc:	a903      	add	r1, sp, #12
        type_(type) {
 80a4dce:	9503      	str	r5, [sp, #12]
 80a4dd0:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a4dd4:	f7ff fea2 	bl	80a4b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a4dd8:	a803      	add	r0, sp, #12
 80a4dda:	f7ff fe0c 	bl	80a49f6 <_ZN8particle5ErrorD1Ev>
 80a4dde:	a802      	add	r0, sp, #8
 80a4de0:	f7fb f975 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a4de4:	b009      	add	sp, #36	; 0x24
 80a4de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a4de8:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a4dea:	9d01      	ldr	r5, [sp, #4]
 80a4dec:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a4df0:	2a00      	cmp	r2, #0
 80a4df2:	d103      	bne.n	80a4dfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a4df4:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a4df8:	2900      	cmp	r1, #0
 80a4dfa:	d1f7      	bne.n	80a4dec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a4dfc:	d1ef      	bne.n	80a4dde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a4dfe:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4e00:	f3bf 8f5b 	dmb	ish
 80a4e04:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a4e06:	f3bf 8f5b 	dmb	ish
 80a4e0a:	1d2b      	adds	r3, r5, #4
 80a4e0c:	e853 6f00 	ldrex	r6, [r3]
 80a4e10:	e843 4200 	strex	r2, r4, [r3]
 80a4e14:	2a00      	cmp	r2, #0
 80a4e16:	d1f9      	bne.n	80a4e0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a4e18:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4e1c:	2e00      	cmp	r6, #0
 80a4e1e:	d0de      	beq.n	80a4dde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a4e20:	4620      	mov	r0, r4
 80a4e22:	f7fe fde1 	bl	80a39e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a4e26:	4607      	mov	r7, r0
 80a4e28:	b160      	cbz	r0, 80a4e44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4e2a:	4630      	mov	r0, r6
 80a4e2c:	f105 010c 	add.w	r1, r5, #12
 80a4e30:	f7ff fe3f 	bl	80a4ab2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a4e34:	4630      	mov	r0, r6
 80a4e36:	f7ff fcf2 	bl	80a481e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a4e3a:	2110      	movs	r1, #16
 80a4e3c:	4630      	mov	r0, r6
 80a4e3e:	f7fb f92e 	bl	80a009e <_ZdlPvj>
 80a4e42:	e7cc      	b.n	80a4dde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4e44:	4631      	mov	r1, r6
 80a4e46:	a803      	add	r0, sp, #12
 80a4e48:	f7ff ffa0 	bl	80a4d8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4e4c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4e4e:	2010      	movs	r0, #16
 80a4e50:	f88d 301c 	strb.w	r3, [sp, #28]
 80a4e54:	f7fb f91f 	bl	80a0096 <_Znwj>
 80a4e58:	4605      	mov	r5, r0
 80a4e5a:	b1d0      	cbz	r0, 80a4e92 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a4e5c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4e5e:	2014      	movs	r0, #20
 80a4e60:	f7fb f919 	bl	80a0096 <_Znwj>
 80a4e64:	4604      	mov	r4, r0
 80a4e66:	b178      	cbz	r0, 80a4e88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a4e68:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a4e6a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4e6c:	a803      	add	r0, sp, #12
 80a4e6e:	f7ff fcdf 	bl	80a4830 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4e72:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4e74:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4e76:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4e78:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a4e7a:	9205      	str	r2, [sp, #20]
 80a4e7c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4e7e:	60e3      	str	r3, [r4, #12]
 80a4e80:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a4e84:	9206      	str	r2, [sp, #24]
 80a4e86:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4e88:	4b06      	ldr	r3, [pc, #24]	; (80a4ea4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4e8a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4e8c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a4e8e:	4b06      	ldr	r3, [pc, #24]	; (80a4ea8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a4e90:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a4e92:	a803      	add	r0, sp, #12
 80a4e94:	f7ff fcc3 	bl	80a481e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4e98:	2200      	movs	r2, #0
 80a4e9a:	4629      	mov	r1, r5
 80a4e9c:	4803      	ldr	r0, [pc, #12]	; (80a4eac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a4e9e:	f7fe fdab 	bl	80a39f8 <application_thread_invoke>
 80a4ea2:	e7c7      	b.n	80a4e34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a4ea4:	080a4ac5 	.word	0x080a4ac5
 80a4ea8:	080a4eb1 	.word	0x080a4eb1
 80a4eac:	080a51c5 	.word	0x080a51c5

080a4eb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a4eb0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4eb2:	b570      	push	{r4, r5, r6, lr}
 80a4eb4:	4604      	mov	r4, r0
	switch (__op)
 80a4eb6:	d103      	bne.n	80a4ec0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a4eb8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a4eba:	6003      	str	r3, [r0, #0]
      }
 80a4ebc:	2000      	movs	r0, #0
 80a4ebe:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a4ec0:	2a02      	cmp	r2, #2
 80a4ec2:	d00c      	beq.n	80a4ede <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a4ec4:	2a03      	cmp	r2, #3
 80a4ec6:	d1f9      	bne.n	80a4ebc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a4ec8:	6804      	ldr	r4, [r0, #0]
 80a4eca:	2c00      	cmp	r4, #0
 80a4ecc:	d0f6      	beq.n	80a4ebc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a4ece:	4620      	mov	r0, r4
 80a4ed0:	f7ff fca5 	bl	80a481e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a4ed4:	2114      	movs	r1, #20
 80a4ed6:	4620      	mov	r0, r4
 80a4ed8:	f7fb f8e1 	bl	80a009e <_ZdlPvj>
 80a4edc:	e7ee      	b.n	80a4ebc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4ede:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a4ee0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4ee2:	f7fb f8d8 	bl	80a0096 <_Znwj>
 80a4ee6:	4605      	mov	r5, r0
 80a4ee8:	b120      	cbz	r0, 80a4ef4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a4eea:	4631      	mov	r1, r6
 80a4eec:	f7ff ff4e 	bl	80a4d8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a4ef0:	7c33      	ldrb	r3, [r6, #16]
 80a4ef2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a4ef4:	6025      	str	r5, [r4, #0]
	}
 80a4ef6:	e7e1      	b.n	80a4ebc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a4ef8 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 80a4ef8:	4770      	bx	lr

080a4efa <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4efc:	460e      	mov	r6, r1
 80a4efe:	2400      	movs	r4, #0
 80a4f00:	f100 0708 	add.w	r7, r0, #8
 80a4f04:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a4f06:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a4f0a:	220a      	movs	r2, #10
 80a4f0c:	4630      	mov	r0, r6
 80a4f0e:	f7ff fb08 	bl	80a4522 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4f12:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4f14:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4f16:	d101      	bne.n	80a4f1c <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4f18:	4620      	mov	r0, r4
 80a4f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a4f1c:	2c00      	cmp	r4, #0
 80a4f1e:	d0f2      	beq.n	80a4f06 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4f20:	212e      	movs	r1, #46	; 0x2e
 80a4f22:	4630      	mov	r0, r6
 80a4f24:	f7ff fae4 	bl	80a44f0 <_ZN5Print5printEc>
 80a4f28:	4404      	add	r4, r0
 80a4f2a:	e7ec      	b.n	80a4f06 <_ZNK9IPAddress7printToER5Print+0xc>

080a4f2c <_ZN9IPAddressD0Ev>:
 80a4f2c:	b510      	push	{r4, lr}
 80a4f2e:	4604      	mov	r4, r0
 80a4f30:	2118      	movs	r1, #24
 80a4f32:	f7fb f8b4 	bl	80a009e <_ZdlPvj>
 80a4f36:	4620      	mov	r0, r4
 80a4f38:	bd10      	pop	{r4, pc}
	...

080a4f3c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a4f3c:	b510      	push	{r4, lr}
 80a4f3e:	4604      	mov	r4, r0
 80a4f40:	4b04      	ldr	r3, [pc, #16]	; (80a4f54 <_ZN9IPAddressC1Ev+0x18>)
    void clear() { memset(&address, 0, sizeof (address)); }
 80a4f42:	2211      	movs	r2, #17
 80a4f44:	2100      	movs	r1, #0
 80a4f46:	f840 3b04 	str.w	r3, [r0], #4
 80a4f4a:	f001 fec7 	bl	80a6cdc <memset>
}
 80a4f4e:	4620      	mov	r0, r4
 80a4f50:	bd10      	pop	{r4, pc}
 80a4f52:	bf00      	nop
 80a4f54:	080a8fa0 	.word	0x080a8fa0

080a4f58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4f58:	4603      	mov	r3, r0
 80a4f5a:	4a07      	ldr	r2, [pc, #28]	; (80a4f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4f5c:	b510      	push	{r4, lr}
 80a4f5e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4f62:	f101 0210 	add.w	r2, r1, #16
 80a4f66:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4f6a:	4291      	cmp	r1, r2
 80a4f6c:	f843 4b04 	str.w	r4, [r3], #4
 80a4f70:	d1f9      	bne.n	80a4f66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4f72:	780a      	ldrb	r2, [r1, #0]
 80a4f74:	701a      	strb	r2, [r3, #0]
}
 80a4f76:	bd10      	pop	{r4, pc}
 80a4f78:	080a8fa0 	.word	0x080a8fa0

080a4f7c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a4f7c:	4a02      	ldr	r2, [pc, #8]	; (80a4f88 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a4f7e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a4f82:	2204      	movs	r2, #4
 80a4f84:	7502      	strb	r2, [r0, #20]
}
 80a4f86:	4770      	bx	lr
 80a4f88:	080a8fa0 	.word	0x080a8fa0

080a4f8c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4f8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4f8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4f92:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a4f96:	2304      	movs	r3, #4
 80a4f98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4f9c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4fa0:	6044      	str	r4, [r0, #4]
 80a4fa2:	7503      	strb	r3, [r0, #20]
}
 80a4fa4:	bd10      	pop	{r4, pc}
	...

080a4fa8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4fa8:	b513      	push	{r0, r1, r4, lr}
 80a4faa:	4c04      	ldr	r4, [pc, #16]	; (80a4fbc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4fac:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4fae:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a4fb2:	9400      	str	r4, [sp, #0]
 80a4fb4:	f7ff ffea 	bl	80a4f8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4fb8:	b002      	add	sp, #8
 80a4fba:	bd10      	pop	{r4, pc}
 80a4fbc:	080a8fa0 	.word	0x080a8fa0

080a4fc0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4fc0:	7441      	strb	r1, [r0, #17]
}
 80a4fc2:	4770      	bx	lr

080a4fc4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4fc4:	4770      	bx	lr

080a4fc6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4fc6:	4770      	bx	lr

080a4fc8 <_ZN9USBSerial4readEv>:
{
 80a4fc8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4fca:	2100      	movs	r1, #0
 80a4fcc:	7c00      	ldrb	r0, [r0, #16]
 80a4fce:	f7fe fcbb 	bl	80a3948 <HAL_USB_USART_Receive_Data>
}
 80a4fd2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4fd6:	bd08      	pop	{r3, pc}

080a4fd8 <_ZN9USBSerial4peekEv>:
{
 80a4fd8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4fda:	2101      	movs	r1, #1
 80a4fdc:	7c00      	ldrb	r0, [r0, #16]
 80a4fde:	f7fe fcb3 	bl	80a3948 <HAL_USB_USART_Receive_Data>
}
 80a4fe2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4fe6:	bd08      	pop	{r3, pc}

080a4fe8 <_ZN9USBSerial17availableForWriteEv>:
{
 80a4fe8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4fea:	7c00      	ldrb	r0, [r0, #16]
 80a4fec:	f7fe fca4 	bl	80a3938 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4ff0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4ff4:	bd08      	pop	{r3, pc}

080a4ff6 <_ZN9USBSerial9availableEv>:
{
 80a4ff6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4ff8:	7c00      	ldrb	r0, [r0, #16]
 80a4ffa:	f7fe fc95 	bl	80a3928 <HAL_USB_USART_Available_Data>
}
 80a4ffe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a5002:	bd08      	pop	{r3, pc}

080a5004 <_ZN9USBSerial5writeEh>:
{
 80a5004:	b538      	push	{r3, r4, r5, lr}
 80a5006:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a5008:	7c00      	ldrb	r0, [r0, #16]
{
 80a500a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a500c:	f7fe fc94 	bl	80a3938 <HAL_USB_USART_Available_Data_For_Write>
 80a5010:	2800      	cmp	r0, #0
 80a5012:	dc01      	bgt.n	80a5018 <_ZN9USBSerial5writeEh+0x14>
 80a5014:	7c60      	ldrb	r0, [r4, #17]
 80a5016:	b128      	cbz	r0, 80a5024 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a5018:	4629      	mov	r1, r5
 80a501a:	7c20      	ldrb	r0, [r4, #16]
 80a501c:	f7fe fc9c 	bl	80a3958 <HAL_USB_USART_Send_Data>
 80a5020:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a5024:	bd38      	pop	{r3, r4, r5, pc}

080a5026 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a5026:	7c00      	ldrb	r0, [r0, #16]
 80a5028:	f7fe bc9e 	b.w	80a3968 <HAL_USB_USART_Flush_Data>

080a502c <_ZN9USBSerialD0Ev>:
 80a502c:	b510      	push	{r4, lr}
 80a502e:	4604      	mov	r4, r0
 80a5030:	2114      	movs	r1, #20
 80a5032:	f7fb f834 	bl	80a009e <_ZdlPvj>
 80a5036:	4620      	mov	r0, r4
 80a5038:	bd10      	pop	{r4, pc}

080a503a <__tcf_1>:
 80a503a:	4770      	bx	lr

080a503c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a503c:	b510      	push	{r4, lr}
 80a503e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a5042:	4604      	mov	r4, r0
 80a5044:	4608      	mov	r0, r1
 80a5046:	2100      	movs	r1, #0
 80a5048:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a504c:	4b04      	ldr	r3, [pc, #16]	; (80a5060 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a504e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a5050:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a5052:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a5054:	4611      	mov	r1, r2
  _blocking = true;
 80a5056:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a5058:	f7fe fc56 	bl	80a3908 <HAL_USB_USART_Init>
}
 80a505c:	4620      	mov	r0, r4
 80a505e:	bd10      	pop	{r4, pc}
 80a5060:	080a8fb4 	.word	0x080a8fb4

080a5064 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a5064:	2200      	movs	r2, #0
 80a5066:	7c00      	ldrb	r0, [r0, #16]
 80a5068:	f7fe bc56 	b.w	80a3918 <HAL_USB_USART_Begin>

080a506c <_Z19acquireSerialBufferv>:
{
 80a506c:	b510      	push	{r4, lr}
 80a506e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a5070:	2214      	movs	r2, #20
 80a5072:	2100      	movs	r1, #0
 80a5074:	f001 fe32 	bl	80a6cdc <memset>
}
 80a5078:	4620      	mov	r0, r4
 80a507a:	bd10      	pop	{r4, pc}

080a507c <_Z16_fetch_usbserialv>:
{
 80a507c:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a507e:	4d0e      	ldr	r5, [pc, #56]	; (80a50b8 <_Z16_fetch_usbserialv+0x3c>)
{
 80a5080:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a5082:	a801      	add	r0, sp, #4
 80a5084:	f7ff fff2 	bl	80a506c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a5088:	7829      	ldrb	r1, [r5, #0]
 80a508a:	f3bf 8f5b 	dmb	ish
 80a508e:	f011 0401 	ands.w	r4, r1, #1
 80a5092:	d10e      	bne.n	80a50b2 <_Z16_fetch_usbserialv+0x36>
 80a5094:	4628      	mov	r0, r5
 80a5096:	f7fb f804 	bl	80a00a2 <__cxa_guard_acquire>
 80a509a:	b150      	cbz	r0, 80a50b2 <_Z16_fetch_usbserialv+0x36>
 80a509c:	4621      	mov	r1, r4
 80a509e:	aa01      	add	r2, sp, #4
 80a50a0:	4806      	ldr	r0, [pc, #24]	; (80a50bc <_Z16_fetch_usbserialv+0x40>)
 80a50a2:	f7ff ffcb 	bl	80a503c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a50a6:	4628      	mov	r0, r5
 80a50a8:	f7fb f800 	bl	80a00ac <__cxa_guard_release>
 80a50ac:	4804      	ldr	r0, [pc, #16]	; (80a50c0 <_Z16_fetch_usbserialv+0x44>)
 80a50ae:	f001 fd07 	bl	80a6ac0 <atexit>
	return _usbserial;
}
 80a50b2:	4802      	ldr	r0, [pc, #8]	; (80a50bc <_Z16_fetch_usbserialv+0x40>)
 80a50b4:	b007      	add	sp, #28
 80a50b6:	bd30      	pop	{r4, r5, pc}
 80a50b8:	20000480 	.word	0x20000480
 80a50bc:	20000488 	.word	0x20000488
 80a50c0:	080a4fc5 	.word	0x080a4fc5

080a50c4 <_Z23acquireUSBSerial1Bufferv>:
 80a50c4:	b510      	push	{r4, lr}
 80a50c6:	4604      	mov	r4, r0
 80a50c8:	2214      	movs	r2, #20
 80a50ca:	2100      	movs	r1, #0
 80a50cc:	f001 fe06 	bl	80a6cdc <memset>
 80a50d0:	4620      	mov	r0, r4
 80a50d2:	bd10      	pop	{r4, pc}

080a50d4 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a50d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a50d6:	4c0e      	ldr	r4, [pc, #56]	; (80a5110 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a50d8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a50da:	a801      	add	r0, sp, #4
 80a50dc:	f7ff fff2 	bl	80a50c4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a50e0:	7823      	ldrb	r3, [r4, #0]
 80a50e2:	f3bf 8f5b 	dmb	ish
 80a50e6:	07db      	lsls	r3, r3, #31
 80a50e8:	d40e      	bmi.n	80a5108 <_Z17_fetch_usbserial1v+0x34>
 80a50ea:	4620      	mov	r0, r4
 80a50ec:	f7fa ffd9 	bl	80a00a2 <__cxa_guard_acquire>
 80a50f0:	b150      	cbz	r0, 80a5108 <_Z17_fetch_usbserial1v+0x34>
 80a50f2:	2101      	movs	r1, #1
 80a50f4:	aa01      	add	r2, sp, #4
 80a50f6:	4807      	ldr	r0, [pc, #28]	; (80a5114 <_Z17_fetch_usbserial1v+0x40>)
 80a50f8:	f7ff ffa0 	bl	80a503c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a50fc:	4620      	mov	r0, r4
 80a50fe:	f7fa ffd5 	bl	80a00ac <__cxa_guard_release>
 80a5102:	4805      	ldr	r0, [pc, #20]	; (80a5118 <_Z17_fetch_usbserial1v+0x44>)
 80a5104:	f001 fcdc 	bl	80a6ac0 <atexit>
  return _usbserial1;
}
 80a5108:	4802      	ldr	r0, [pc, #8]	; (80a5114 <_Z17_fetch_usbserial1v+0x40>)
 80a510a:	b006      	add	sp, #24
 80a510c:	bd10      	pop	{r4, pc}
 80a510e:	bf00      	nop
 80a5110:	20000484 	.word	0x20000484
 80a5114:	2000049c 	.word	0x2000049c
 80a5118:	080a503b 	.word	0x080a503b

080a511c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a511c:	f7fe bab2 	b.w	80a3684 <HAL_Interrupts_Disable_All>

080a5120 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a5120:	f7fe baa8 	b.w	80a3674 <HAL_Interrupts_Enable_All>

080a5124 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a5124:	4770      	bx	lr

080a5126 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a5126:	7441      	strb	r1, [r0, #17]
}
 80a5128:	4770      	bx	lr

080a512a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a512a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a512c:	7c00      	ldrb	r0, [r0, #16]
 80a512e:	f7fe fb51 	bl	80a37d4 <hal_usart_available_data_for_write>
}
 80a5132:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a5136:	bd08      	pop	{r3, pc}

080a5138 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a5138:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a513a:	7c00      	ldrb	r0, [r0, #16]
 80a513c:	f7fe fb22 	bl	80a3784 <hal_usart_available>
}
 80a5140:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a5144:	bd08      	pop	{r3, pc}

080a5146 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a5146:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a5148:	7c00      	ldrb	r0, [r0, #16]
 80a514a:	f7fe fb2b 	bl	80a37a4 <hal_usart_peek>
}
 80a514e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5152:	bd08      	pop	{r3, pc}

080a5154 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a5154:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a5156:	7c00      	ldrb	r0, [r0, #16]
 80a5158:	f7fe fb1c 	bl	80a3794 <hal_usart_read>
}
 80a515c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5160:	bd08      	pop	{r3, pc}

080a5162 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a5162:	7c00      	ldrb	r0, [r0, #16]
 80a5164:	f7fe bb26 	b.w	80a37b4 <hal_usart_flush>

080a5168 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a5168:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a516a:	7c46      	ldrb	r6, [r0, #17]
{
 80a516c:	4604      	mov	r4, r0
 80a516e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a5170:	b12e      	cbz	r6, 80a517e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a5172:	4629      	mov	r1, r5
 80a5174:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a5176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a517a:	f7fe bafb 	b.w	80a3774 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a517e:	7c00      	ldrb	r0, [r0, #16]
 80a5180:	f7fe fb28 	bl	80a37d4 <hal_usart_available_data_for_write>
 80a5184:	2800      	cmp	r0, #0
 80a5186:	dcf4      	bgt.n	80a5172 <_ZN11USARTSerial5writeEh+0xa>
}
 80a5188:	4630      	mov	r0, r6
 80a518a:	bd70      	pop	{r4, r5, r6, pc}

080a518c <_ZN11USARTSerialD0Ev>:
 80a518c:	b510      	push	{r4, lr}
 80a518e:	4604      	mov	r4, r0
 80a5190:	2114      	movs	r1, #20
 80a5192:	f7fa ff84 	bl	80a009e <_ZdlPvj>
 80a5196:	4620      	mov	r0, r4
 80a5198:	bd10      	pop	{r4, pc}
	...

080a519c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a519c:	b510      	push	{r4, lr}
 80a519e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a51a2:	4604      	mov	r4, r0
 80a51a4:	4608      	mov	r0, r1
 80a51a6:	4611      	mov	r1, r2
 80a51a8:	2200      	movs	r2, #0
 80a51aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a51ae:	4b04      	ldr	r3, [pc, #16]	; (80a51c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a51b0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a51b2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a51b4:	2301      	movs	r3, #1
 80a51b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a51b8:	f7fe fb14 	bl	80a37e4 <hal_usart_init_ex>
}
 80a51bc:	4620      	mov	r0, r4
 80a51be:	bd10      	pop	{r4, pc}
 80a51c0:	080a8fe4 	.word	0x080a8fe4

080a51c4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a51c4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a51c6:	6883      	ldr	r3, [r0, #8]
 80a51c8:	4604      	mov	r4, r0
 80a51ca:	b90b      	cbnz	r3, 80a51d0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a51cc:	f000 fa88 	bl	80a56e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a51d0:	68c3      	ldr	r3, [r0, #12]
 80a51d2:	4798      	blx	r3
      if (_M_manager)
 80a51d4:	68a3      	ldr	r3, [r4, #8]
 80a51d6:	b11b      	cbz	r3, 80a51e0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a51d8:	2203      	movs	r2, #3
 80a51da:	4621      	mov	r1, r4
 80a51dc:	4620      	mov	r0, r4
 80a51de:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a51e0:	4620      	mov	r0, r4
}
 80a51e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a51e6:	2110      	movs	r1, #16
 80a51e8:	f7fa bf59 	b.w	80a009e <_ZdlPvj>

080a51ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a51ec:	4770      	bx	lr

080a51ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a51ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a51f0:	4606      	mov	r6, r0
 80a51f2:	4615      	mov	r5, r2
 80a51f4:	460c      	mov	r4, r1
 80a51f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a51f8:	42bc      	cmp	r4, r7
 80a51fa:	d006      	beq.n	80a520a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a51fc:	6833      	ldr	r3, [r6, #0]
 80a51fe:	4630      	mov	r0, r6
 80a5200:	689b      	ldr	r3, [r3, #8]
 80a5202:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a5206:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a5208:	e7f6      	b.n	80a51f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a520a:	4628      	mov	r0, r5
 80a520c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a520e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a520e:	2200      	movs	r2, #0
 80a5210:	7c00      	ldrb	r0, [r0, #16]
 80a5212:	f7fe baef 	b.w	80a37f4 <hal_i2c_write>

080a5216 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a5216:	2100      	movs	r1, #0
 80a5218:	7c00      	ldrb	r0, [r0, #16]
 80a521a:	f7fe baf3 	b.w	80a3804 <hal_i2c_available>

080a521e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a521e:	2100      	movs	r1, #0
 80a5220:	7c00      	ldrb	r0, [r0, #16]
 80a5222:	f7fe baf7 	b.w	80a3814 <hal_i2c_read>

080a5226 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a5226:	2100      	movs	r1, #0
 80a5228:	7c00      	ldrb	r0, [r0, #16]
 80a522a:	f7fe bafb 	b.w	80a3824 <hal_i2c_peek>

080a522e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a522e:	2100      	movs	r1, #0
 80a5230:	7c00      	ldrb	r0, [r0, #16]
 80a5232:	f7fe baff 	b.w	80a3834 <hal_i2c_flush>

080a5236 <_ZN7TwoWireD0Ev>:
 80a5236:	b510      	push	{r4, lr}
 80a5238:	4604      	mov	r4, r0
 80a523a:	2114      	movs	r1, #20
 80a523c:	f7fa ff2f 	bl	80a009e <_ZdlPvj>
 80a5240:	4620      	mov	r0, r4
 80a5242:	bd10      	pop	{r4, pc}

080a5244 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a5244:	b510      	push	{r4, lr}
 80a5246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a524a:	4604      	mov	r4, r0
 80a524c:	4608      	mov	r0, r1
 80a524e:	2100      	movs	r1, #0
 80a5250:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a5254:	4b03      	ldr	r3, [pc, #12]	; (80a5264 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a5256:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a5258:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a525a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a525c:	f7fe fafa 	bl	80a3854 <hal_i2c_init>
}
 80a5260:	4620      	mov	r0, r4
 80a5262:	bd10      	pop	{r4, pc}
 80a5264:	080a9014 	.word	0x080a9014

080a5268 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a5268:	2200      	movs	r2, #0
 80a526a:	6840      	ldr	r0, [r0, #4]
 80a526c:	4611      	mov	r1, r2
 80a526e:	f7fe bc09 	b.w	80a3a84 <network_ready>

080a5272 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a5272:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5274:	4615      	mov	r5, r2
 80a5276:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a5278:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a527a:	460e      	mov	r6, r1
 80a527c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a527e:	2100      	movs	r1, #0
 80a5280:	a803      	add	r0, sp, #12
 80a5282:	f001 fd2b 	bl	80a6cdc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a5286:	4628      	mov	r0, r5
 80a5288:	f001 fd8b 	bl	80a6da2 <strlen>
 80a528c:	2700      	movs	r7, #0
 80a528e:	b281      	uxth	r1, r0
 80a5290:	6873      	ldr	r3, [r6, #4]
 80a5292:	4628      	mov	r0, r5
 80a5294:	9700      	str	r7, [sp, #0]
 80a5296:	aa03      	add	r2, sp, #12
 80a5298:	f7fe fb76 	bl	80a3988 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a529c:	b130      	cbz	r0, 80a52ac <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a529e:	4639      	mov	r1, r7
 80a52a0:	4620      	mov	r0, r4
 80a52a2:	f7ff fe6b 	bl	80a4f7c <_ZN9IPAddressC1Em>
    }
 80a52a6:	4620      	mov	r0, r4
 80a52a8:	b009      	add	sp, #36	; 0x24
 80a52aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a52ac:	4620      	mov	r0, r4
 80a52ae:	a903      	add	r1, sp, #12
 80a52b0:	f7ff fe52 	bl	80a4f58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a52b4:	e7f7      	b.n	80a52a6 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a52b6 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a52b6:	2200      	movs	r2, #0
 80a52b8:	6840      	ldr	r0, [r0, #4]
 80a52ba:	4611      	mov	r1, r2
 80a52bc:	f7fe bc02 	b.w	80a3ac4 <network_listening>

080a52c0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a52c0:	2200      	movs	r2, #0
 80a52c2:	6840      	ldr	r0, [r0, #4]
 80a52c4:	4611      	mov	r1, r2
 80a52c6:	f7fe bc25 	b.w	80a3b14 <network_get_listen_timeout>

080a52ca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a52ca:	2200      	movs	r2, #0
 80a52cc:	6840      	ldr	r0, [r0, #4]
 80a52ce:	f7fe bc19 	b.w	80a3b04 <network_set_listen_timeout>

080a52d2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a52d2:	2200      	movs	r2, #0
 80a52d4:	6840      	ldr	r0, [r0, #4]
 80a52d6:	f081 0101 	eor.w	r1, r1, #1
 80a52da:	f7fe bbeb 	b.w	80a3ab4 <network_listen>

080a52de <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a52de:	2300      	movs	r3, #0
 80a52e0:	6840      	ldr	r0, [r0, #4]
 80a52e2:	461a      	mov	r2, r3
 80a52e4:	4619      	mov	r1, r3
 80a52e6:	f7fe bbdd 	b.w	80a3aa4 <network_off>

080a52ea <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a52ea:	2200      	movs	r2, #0
 80a52ec:	6840      	ldr	r0, [r0, #4]
 80a52ee:	4611      	mov	r1, r2
 80a52f0:	f7fe bbb8 	b.w	80a3a64 <network_connecting>

080a52f4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a52f4:	2200      	movs	r2, #0
 80a52f6:	2102      	movs	r1, #2
 80a52f8:	6840      	ldr	r0, [r0, #4]
 80a52fa:	f7fe bbbb 	b.w	80a3a74 <network_disconnect>

080a52fe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a52fe:	2300      	movs	r3, #0
 80a5300:	6840      	ldr	r0, [r0, #4]
 80a5302:	461a      	mov	r2, r3
 80a5304:	f7fe bba6 	b.w	80a3a54 <network_connect>

080a5308 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a5308:	2204      	movs	r2, #4
 80a530a:	4b02      	ldr	r3, [pc, #8]	; (80a5314 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a530c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a530e:	4a02      	ldr	r2, [pc, #8]	; (80a5318 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a5310:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a5312:	4770      	bx	lr
 80a5314:	200004b0 	.word	0x200004b0
 80a5318:	080a903c 	.word	0x080a903c

080a531c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a531c:	2300      	movs	r3, #0
 80a531e:	6840      	ldr	r0, [r0, #4]
 80a5320:	461a      	mov	r2, r3
 80a5322:	f7fe bb97 	b.w	80a3a54 <network_connect>

080a5326 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a5326:	2200      	movs	r2, #0
 80a5328:	2102      	movs	r1, #2
 80a532a:	6840      	ldr	r0, [r0, #4]
 80a532c:	f7fe bba2 	b.w	80a3a74 <network_disconnect>

080a5330 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a5330:	2200      	movs	r2, #0
 80a5332:	6840      	ldr	r0, [r0, #4]
 80a5334:	4611      	mov	r1, r2
 80a5336:	f7fe bb95 	b.w	80a3a64 <network_connecting>

080a533a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a533a:	2200      	movs	r2, #0
 80a533c:	6840      	ldr	r0, [r0, #4]
 80a533e:	4611      	mov	r1, r2
 80a5340:	f7fe bba0 	b.w	80a3a84 <network_ready>

080a5344 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a5344:	2300      	movs	r3, #0
 80a5346:	6840      	ldr	r0, [r0, #4]
 80a5348:	461a      	mov	r2, r3
 80a534a:	4619      	mov	r1, r3
 80a534c:	f7fe bba2 	b.w	80a3a94 <network_on>

080a5350 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a5350:	2300      	movs	r3, #0
 80a5352:	6840      	ldr	r0, [r0, #4]
 80a5354:	461a      	mov	r2, r3
 80a5356:	4619      	mov	r1, r3
 80a5358:	f7fe bba4 	b.w	80a3aa4 <network_off>

080a535c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a535c:	2100      	movs	r1, #0
 80a535e:	6840      	ldr	r0, [r0, #4]
 80a5360:	f7fe bbe0 	b.w	80a3b24 <network_is_on>

080a5364 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a5364:	2100      	movs	r1, #0
 80a5366:	6840      	ldr	r0, [r0, #4]
 80a5368:	f7fe bbe4 	b.w	80a3b34 <network_is_off>

080a536c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a536c:	2200      	movs	r2, #0
 80a536e:	6840      	ldr	r0, [r0, #4]
 80a5370:	f081 0101 	eor.w	r1, r1, #1
 80a5374:	f7fe bb9e 	b.w	80a3ab4 <network_listen>

080a5378 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a5378:	2200      	movs	r2, #0
 80a537a:	6840      	ldr	r0, [r0, #4]
 80a537c:	f7fe bbc2 	b.w	80a3b04 <network_set_listen_timeout>

080a5380 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a5380:	2200      	movs	r2, #0
 80a5382:	6840      	ldr	r0, [r0, #4]
 80a5384:	4611      	mov	r1, r2
 80a5386:	f7fe bbc5 	b.w	80a3b14 <network_get_listen_timeout>

080a538a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a538a:	2200      	movs	r2, #0
 80a538c:	6840      	ldr	r0, [r0, #4]
 80a538e:	4611      	mov	r1, r2
 80a5390:	f7fe bb98 	b.w	80a3ac4 <network_listening>

080a5394 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a5394:	b570      	push	{r4, r5, r6, lr}
 80a5396:	4615      	mov	r5, r2
 80a5398:	b08e      	sub	sp, #56	; 0x38
 80a539a:	4604      	mov	r4, r0
    IPAddress addr;
 80a539c:	a808      	add	r0, sp, #32
 80a539e:	f7ff fdcd 	bl	80a4f3c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a53a2:	2211      	movs	r2, #17
 80a53a4:	2100      	movs	r1, #0
 80a53a6:	a803      	add	r0, sp, #12
 80a53a8:	f001 fc98 	bl	80a6cdc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a53ac:	2600      	movs	r6, #0
 80a53ae:	4628      	mov	r0, r5
 80a53b0:	f001 fcf7 	bl	80a6da2 <strlen>
 80a53b4:	4b0a      	ldr	r3, [pc, #40]	; (80a53e0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a53b6:	9600      	str	r6, [sp, #0]
 80a53b8:	b281      	uxth	r1, r0
 80a53ba:	685b      	ldr	r3, [r3, #4]
 80a53bc:	4628      	mov	r0, r5
 80a53be:	aa03      	add	r2, sp, #12
 80a53c0:	f7fe fae2 	bl	80a3988 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a53c4:	b130      	cbz	r0, 80a53d4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a53c6:	4631      	mov	r1, r6
 80a53c8:	4620      	mov	r0, r4
 80a53ca:	f7ff fdd7 	bl	80a4f7c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a53ce:	4620      	mov	r0, r4
 80a53d0:	b00e      	add	sp, #56	; 0x38
 80a53d2:	bd70      	pop	{r4, r5, r6, pc}
 80a53d4:	4620      	mov	r0, r4
 80a53d6:	a903      	add	r1, sp, #12
 80a53d8:	f7ff fdbe 	bl	80a4f58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a53dc:	e7f7      	b.n	80a53ce <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a53de:	bf00      	nop
 80a53e0:	200004b0 	.word	0x200004b0

080a53e4 <_ZN5spark12NetworkClass4fromEm>:
}
 80a53e4:	4a03      	ldr	r2, [pc, #12]	; (80a53f4 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a53e6:	4b04      	ldr	r3, [pc, #16]	; (80a53f8 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a53e8:	2804      	cmp	r0, #4
 80a53ea:	bf14      	ite	ne
 80a53ec:	4610      	movne	r0, r2
 80a53ee:	4618      	moveq	r0, r3
 80a53f0:	4770      	bx	lr
 80a53f2:	bf00      	nop
 80a53f4:	200004b8 	.word	0x200004b8
 80a53f8:	200004b0 	.word	0x200004b0

080a53fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a53fc:	4b02      	ldr	r3, [pc, #8]	; (80a5408 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a53fe:	4a03      	ldr	r2, [pc, #12]	; (80a540c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a5400:	601a      	str	r2, [r3, #0]
 80a5402:	2200      	movs	r2, #0
 80a5404:	605a      	str	r2, [r3, #4]

} // spark
 80a5406:	4770      	bx	lr
 80a5408:	200004b8 	.word	0x200004b8
 80a540c:	080a9078 	.word	0x080a9078

080a5410 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a5410:	4b02      	ldr	r3, [pc, #8]	; (80a541c <__tcf_0+0xc>)
 80a5412:	6898      	ldr	r0, [r3, #8]
 80a5414:	b108      	cbz	r0, 80a541a <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a5416:	f7fe b9a5 	b.w	80a3764 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a541a:	4770      	bx	lr
 80a541c:	200004c4 	.word	0x200004c4

080a5420 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a5420:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a5422:	b570      	push	{r4, r5, r6, lr}
 80a5424:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a5426:	d901      	bls.n	80a542c <pinAvailable+0xc>
    return false;
 80a5428:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a542a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a542c:	f1a0 030d 	sub.w	r3, r0, #13
 80a5430:	2b02      	cmp	r3, #2
 80a5432:	d90b      	bls.n	80a544c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a5434:	2801      	cmp	r0, #1
 80a5436:	d824      	bhi.n	80a5482 <pinAvailable+0x62>
 80a5438:	f000 f92c 	bl	80a5694 <_Z19__fetch_global_Wirev>
 80a543c:	2100      	movs	r1, #0
 80a543e:	7c00      	ldrb	r0, [r0, #16]
 80a5440:	f7fe fa00 	bl	80a3844 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a5444:	f080 0001 	eor.w	r0, r0, #1
 80a5448:	b2c0      	uxtb	r0, r0
 80a544a:	e7ee      	b.n	80a542a <pinAvailable+0xa>
 80a544c:	4e12      	ldr	r6, [pc, #72]	; (80a5498 <pinAvailable+0x78>)
 80a544e:	7831      	ldrb	r1, [r6, #0]
 80a5450:	f3bf 8f5b 	dmb	ish
 80a5454:	f011 0501 	ands.w	r5, r1, #1
 80a5458:	d10d      	bne.n	80a5476 <pinAvailable+0x56>
 80a545a:	4630      	mov	r0, r6
 80a545c:	f7fa fe21 	bl	80a00a2 <__cxa_guard_acquire>
 80a5460:	b148      	cbz	r0, 80a5476 <pinAvailable+0x56>
 80a5462:	4629      	mov	r1, r5
 80a5464:	480d      	ldr	r0, [pc, #52]	; (80a549c <pinAvailable+0x7c>)
 80a5466:	f7fe fc0d 	bl	80a3c84 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a546a:	4630      	mov	r0, r6
 80a546c:	f7fa fe1e 	bl	80a00ac <__cxa_guard_release>
 80a5470:	480b      	ldr	r0, [pc, #44]	; (80a54a0 <pinAvailable+0x80>)
 80a5472:	f001 fb25 	bl	80a6ac0 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5476:	4b09      	ldr	r3, [pc, #36]	; (80a549c <pinAvailable+0x7c>)
 80a5478:	7818      	ldrb	r0, [r3, #0]
 80a547a:	f7fe fa3d 	bl	80a38f8 <hal_spi_is_enabled>
 80a547e:	2800      	cmp	r0, #0
 80a5480:	d1d2      	bne.n	80a5428 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a5482:	3c12      	subs	r4, #18
 80a5484:	2c01      	cmp	r4, #1
 80a5486:	d805      	bhi.n	80a5494 <pinAvailable+0x74>
 80a5488:	f000 f8a4 	bl	80a55d4 <_Z22__fetch_global_Serial1v>
 80a548c:	7c00      	ldrb	r0, [r0, #16]
 80a548e:	f7fe f999 	bl	80a37c4 <hal_usart_is_enabled>
 80a5492:	e7d7      	b.n	80a5444 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a5494:	2001      	movs	r0, #1
 80a5496:	e7c8      	b.n	80a542a <pinAvailable+0xa>
 80a5498:	200004c0 	.word	0x200004c0
 80a549c:	200004c4 	.word	0x200004c4
 80a54a0:	080a5411 	.word	0x080a5411

080a54a4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a54a4:	2817      	cmp	r0, #23
{
 80a54a6:	b538      	push	{r3, r4, r5, lr}
 80a54a8:	4604      	mov	r4, r0
 80a54aa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a54ac:	d80a      	bhi.n	80a54c4 <pinMode+0x20>
 80a54ae:	29ff      	cmp	r1, #255	; 0xff
 80a54b0:	d008      	beq.n	80a54c4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a54b2:	f7ff ffb5 	bl	80a5420 <pinAvailable>
 80a54b6:	b128      	cbz	r0, 80a54c4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a54b8:	4629      	mov	r1, r5
 80a54ba:	4620      	mov	r0, r4
}
 80a54bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a54c0:	f7fe b8b8 	b.w	80a3634 <HAL_Pin_Mode>
}
 80a54c4:	bd38      	pop	{r3, r4, r5, pc}

080a54c6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a54c6:	b538      	push	{r3, r4, r5, lr}
 80a54c8:	4604      	mov	r4, r0
 80a54ca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a54cc:	f7fe f8ba 	bl	80a3644 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a54d0:	28ff      	cmp	r0, #255	; 0xff
 80a54d2:	d010      	beq.n	80a54f6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a54d4:	2806      	cmp	r0, #6
 80a54d6:	d804      	bhi.n	80a54e2 <digitalWrite+0x1c>
 80a54d8:	234d      	movs	r3, #77	; 0x4d
 80a54da:	fa23 f000 	lsr.w	r0, r3, r0
 80a54de:	07c3      	lsls	r3, r0, #31
 80a54e0:	d409      	bmi.n	80a54f6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a54e2:	4620      	mov	r0, r4
 80a54e4:	f7ff ff9c 	bl	80a5420 <pinAvailable>
 80a54e8:	b128      	cbz	r0, 80a54f6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a54ea:	4629      	mov	r1, r5
 80a54ec:	4620      	mov	r0, r4
}
 80a54ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a54f2:	f7fe b8af 	b.w	80a3654 <HAL_GPIO_Write>
}
 80a54f6:	bd38      	pop	{r3, r4, r5, pc}

080a54f8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a54f8:	b510      	push	{r4, lr}
 80a54fa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a54fc:	f7fe f8a2 	bl	80a3644 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a5500:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a5502:	b2db      	uxtb	r3, r3
 80a5504:	2b01      	cmp	r3, #1
 80a5506:	d908      	bls.n	80a551a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a5508:	4620      	mov	r0, r4
 80a550a:	f7ff ff89 	bl	80a5420 <pinAvailable>
 80a550e:	b120      	cbz	r0, 80a551a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a5510:	4620      	mov	r0, r4
}
 80a5512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a5516:	f7fe b8a5 	b.w	80a3664 <HAL_GPIO_Read>
}
 80a551a:	2000      	movs	r0, #0
 80a551c:	bd10      	pop	{r4, pc}

080a551e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a551e:	b510      	push	{r4, lr}
 80a5520:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a5522:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a5524:	bf9c      	itt	ls
 80a5526:	340a      	addls	r4, #10
 80a5528:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a552a:	4620      	mov	r0, r4
 80a552c:	f7ff ff78 	bl	80a5420 <pinAvailable>
 80a5530:	b150      	cbz	r0, 80a5548 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a5532:	2103      	movs	r1, #3
 80a5534:	4620      	mov	r0, r4
 80a5536:	f7fe f875 	bl	80a3624 <HAL_Validate_Pin_Function>
 80a553a:	2803      	cmp	r0, #3
 80a553c:	d104      	bne.n	80a5548 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a553e:	4620      	mov	r0, r4
}
 80a5540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a5544:	f7fe b8ae 	b.w	80a36a4 <hal_adc_read>
}
 80a5548:	2000      	movs	r0, #0
 80a554a:	bd10      	pop	{r4, pc}

080a554c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a554c:	b538      	push	{r3, r4, r5, lr}
 80a554e:	4604      	mov	r4, r0
 80a5550:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a5552:	f7ff ff65 	bl	80a5420 <pinAvailable>
 80a5556:	b1f0      	cbz	r0, 80a5596 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a5558:	2104      	movs	r1, #4
 80a555a:	4620      	mov	r0, r4
 80a555c:	f7fe f862 	bl	80a3624 <HAL_Validate_Pin_Function>
 80a5560:	2804      	cmp	r0, #4
 80a5562:	d105      	bne.n	80a5570 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a5564:	4620      	mov	r0, r4
 80a5566:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 80a5568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 80a556c:	f7fe b892 	b.w	80a3694 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a5570:	2102      	movs	r1, #2
 80a5572:	4620      	mov	r0, r4
 80a5574:	f7fe f856 	bl	80a3624 <HAL_Validate_Pin_Function>
 80a5578:	2802      	cmp	r0, #2
 80a557a:	d10c      	bne.n	80a5596 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a557c:	4620      	mov	r0, r4
 80a557e:	f7fe f861 	bl	80a3644 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a5582:	2801      	cmp	r0, #1
 80a5584:	d001      	beq.n	80a558a <_Z11analogWritetm+0x3e>
 80a5586:	2804      	cmp	r0, #4
 80a5588:	d105      	bne.n	80a5596 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 80a558a:	4629      	mov	r1, r5
 80a558c:	4620      	mov	r0, r4
}
 80a558e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 80a5592:	f7fe b897 	b.w	80a36c4 <hal_pwm_write_ext>
}
 80a5596:	bd38      	pop	{r3, r4, r5, pc}

080a5598 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a5598:	f7fe b88c 	b.w	80a36b4 <HAL_Pulse_In>

080a559c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a559c:	4770      	bx	lr
	...

080a55a0 <_Z20acquireSerial1Bufferv>:
{
 80a55a0:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a55a2:	2514      	movs	r5, #20
{
 80a55a4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a55a6:	462a      	mov	r2, r5
 80a55a8:	2100      	movs	r1, #0
 80a55aa:	f001 fb97 	bl	80a6cdc <memset>
 80a55ae:	8025      	strh	r5, [r4, #0]
 80a55b0:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a55b2:	4e07      	ldr	r6, [pc, #28]	; (80a55d0 <_Z20acquireSerial1Bufferv+0x30>)
 80a55b4:	4628      	mov	r0, r5
 80a55b6:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a55b8:	8125      	strh	r5, [r4, #8]
 80a55ba:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a55bc:	f000 f88e 	bl	80a56dc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a55c0:	4631      	mov	r1, r6
    };
 80a55c2:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a55c4:	4628      	mov	r0, r5
 80a55c6:	f000 f889 	bl	80a56dc <_ZnajRKSt9nothrow_t>
    };
 80a55ca:	60e0      	str	r0, [r4, #12]
}
 80a55cc:	4620      	mov	r0, r4
 80a55ce:	bd70      	pop	{r4, r5, r6, pc}
 80a55d0:	080a90ac 	.word	0x080a90ac

080a55d4 <_Z22__fetch_global_Serial1v>:
{
 80a55d4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a55d6:	4d0e      	ldr	r5, [pc, #56]	; (80a5610 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a55d8:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a55da:	7829      	ldrb	r1, [r5, #0]
 80a55dc:	f3bf 8f5b 	dmb	ish
 80a55e0:	f011 0401 	ands.w	r4, r1, #1
 80a55e4:	d111      	bne.n	80a560a <_Z22__fetch_global_Serial1v+0x36>
 80a55e6:	4628      	mov	r0, r5
 80a55e8:	f7fa fd5b 	bl	80a00a2 <__cxa_guard_acquire>
 80a55ec:	b168      	cbz	r0, 80a560a <_Z22__fetch_global_Serial1v+0x36>
 80a55ee:	a801      	add	r0, sp, #4
 80a55f0:	f7ff ffd6 	bl	80a55a0 <_Z20acquireSerial1Bufferv>
 80a55f4:	4621      	mov	r1, r4
 80a55f6:	aa01      	add	r2, sp, #4
 80a55f8:	4806      	ldr	r0, [pc, #24]	; (80a5614 <_Z22__fetch_global_Serial1v+0x40>)
 80a55fa:	f7ff fdcf 	bl	80a519c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a55fe:	4628      	mov	r0, r5
 80a5600:	f7fa fd54 	bl	80a00ac <__cxa_guard_release>
 80a5604:	4804      	ldr	r0, [pc, #16]	; (80a5618 <_Z22__fetch_global_Serial1v+0x44>)
 80a5606:	f001 fa5b 	bl	80a6ac0 <atexit>
    return serial1;
}
 80a560a:	4802      	ldr	r0, [pc, #8]	; (80a5614 <_Z22__fetch_global_Serial1v+0x40>)
 80a560c:	b007      	add	sp, #28
 80a560e:	bd30      	pop	{r4, r5, pc}
 80a5610:	200004d0 	.word	0x200004d0
 80a5614:	200004d4 	.word	0x200004d4
 80a5618:	080a559d 	.word	0x080a559d

080a561c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a561c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a561e:	4c08      	ldr	r4, [pc, #32]	; (80a5640 <_Z21__fetch_global_EEPROMv+0x24>)
 80a5620:	7823      	ldrb	r3, [r4, #0]
 80a5622:	f3bf 8f5b 	dmb	ish
 80a5626:	07db      	lsls	r3, r3, #31
 80a5628:	d408      	bmi.n	80a563c <_Z21__fetch_global_EEPROMv+0x20>
 80a562a:	4620      	mov	r0, r4
 80a562c:	f7fa fd39 	bl	80a00a2 <__cxa_guard_acquire>
 80a5630:	b120      	cbz	r0, 80a563c <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a5632:	f7fe f867 	bl	80a3704 <HAL_EEPROM_Init>
 80a5636:	4620      	mov	r0, r4
 80a5638:	f7fa fd38 	bl	80a00ac <__cxa_guard_release>
	return eeprom;
}
 80a563c:	4801      	ldr	r0, [pc, #4]	; (80a5644 <_Z21__fetch_global_EEPROMv+0x28>)
 80a563e:	bd10      	pop	{r4, pc}
 80a5640:	200004ec 	.word	0x200004ec
 80a5644:	200004f0 	.word	0x200004f0

080a5648 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a5648:	2300      	movs	r3, #0
 80a564a:	b507      	push	{r0, r1, r2, lr}
 80a564c:	461a      	mov	r2, r3
 80a564e:	4619      	mov	r1, r3
 80a5650:	9300      	str	r3, [sp, #0]
 80a5652:	4803      	ldr	r0, [pc, #12]	; (80a5660 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a5654:	f7ff fca8 	bl	80a4fa8 <_ZN9IPAddressC1Ehhhh>
 80a5658:	b003      	add	sp, #12
 80a565a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a565e:	bf00      	nop
 80a5660:	200004f4 	.word	0x200004f4

080a5664 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5664:	4770      	bx	lr
	...

080a5668 <_Z17acquireWireBufferv>:
{
 80a5668:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a566a:	2314      	movs	r3, #20
 80a566c:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a566e:	4e08      	ldr	r6, [pc, #32]	; (80a5690 <_Z17acquireWireBufferv+0x28>)
{
 80a5670:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a5672:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5674:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a5676:	6085      	str	r5, [r0, #8]
 80a5678:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a567a:	4628      	mov	r0, r5
 80a567c:	f000 f82e 	bl	80a56dc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5680:	4631      	mov	r1, r6
	};
 80a5682:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5684:	4628      	mov	r0, r5
 80a5686:	f000 f829 	bl	80a56dc <_ZnajRKSt9nothrow_t>
	};
 80a568a:	60e0      	str	r0, [r4, #12]
}
 80a568c:	4620      	mov	r0, r4
 80a568e:	bd70      	pop	{r4, r5, r6, pc}
 80a5690:	080a90ac 	.word	0x080a90ac

080a5694 <_Z19__fetch_global_Wirev>:
{
 80a5694:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5696:	4d0e      	ldr	r5, [pc, #56]	; (80a56d0 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a5698:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a569a:	7829      	ldrb	r1, [r5, #0]
 80a569c:	f3bf 8f5b 	dmb	ish
 80a56a0:	f011 0401 	ands.w	r4, r1, #1
 80a56a4:	d111      	bne.n	80a56ca <_Z19__fetch_global_Wirev+0x36>
 80a56a6:	4628      	mov	r0, r5
 80a56a8:	f7fa fcfb 	bl	80a00a2 <__cxa_guard_acquire>
 80a56ac:	b168      	cbz	r0, 80a56ca <_Z19__fetch_global_Wirev+0x36>
 80a56ae:	a801      	add	r0, sp, #4
 80a56b0:	f7ff ffda 	bl	80a5668 <_Z17acquireWireBufferv>
 80a56b4:	4621      	mov	r1, r4
 80a56b6:	aa01      	add	r2, sp, #4
 80a56b8:	4806      	ldr	r0, [pc, #24]	; (80a56d4 <_Z19__fetch_global_Wirev+0x40>)
 80a56ba:	f7ff fdc3 	bl	80a5244 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a56be:	4628      	mov	r0, r5
 80a56c0:	f7fa fcf4 	bl	80a00ac <__cxa_guard_release>
 80a56c4:	4804      	ldr	r0, [pc, #16]	; (80a56d8 <_Z19__fetch_global_Wirev+0x44>)
 80a56c6:	f001 f9fb 	bl	80a6ac0 <atexit>
	return wire;
}
 80a56ca:	4802      	ldr	r0, [pc, #8]	; (80a56d4 <_Z19__fetch_global_Wirev+0x40>)
 80a56cc:	b007      	add	sp, #28
 80a56ce:	bd30      	pop	{r4, r5, pc}
 80a56d0:	2000050c 	.word	0x2000050c
 80a56d4:	20000510 	.word	0x20000510
 80a56d8:	080a5665 	.word	0x080a5665

080a56dc <_ZnajRKSt9nothrow_t>:
 80a56dc:	f7fa bcdd 	b.w	80a009a <_Znaj>

080a56e0 <_ZSt25__throw_bad_function_callv>:
 80a56e0:	b508      	push	{r3, lr}
 80a56e2:	f7fe faa7 	bl	80a3c34 <abort>
	...

080a56e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a56e8:	4901      	ldr	r1, [pc, #4]	; (80a56f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a56ea:	f000 b8fb 	b.w	80a58e4 <_ZNKSt9type_infoeqERKS_>
 80a56ee:	bf00      	nop
 80a56f0:	080a90c8 	.word	0x080a90c8

080a56f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a56f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a56f6:	2400      	movs	r4, #0
 80a56f8:	2310      	movs	r3, #16
 80a56fa:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a56fe:	6803      	ldr	r3, [r0, #0]
 80a5700:	4615      	mov	r5, r2
 80a5702:	699e      	ldr	r6, [r3, #24]
 80a5704:	e9cd 4400 	strd	r4, r4, [sp]
 80a5708:	466b      	mov	r3, sp
 80a570a:	6812      	ldr	r2, [r2, #0]
 80a570c:	47b0      	blx	r6
 80a570e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a5712:	f003 0306 	and.w	r3, r3, #6
 80a5716:	2b06      	cmp	r3, #6
 80a5718:	bf09      	itett	eq
 80a571a:	2001      	moveq	r0, #1
 80a571c:	4620      	movne	r0, r4
 80a571e:	9b00      	ldreq	r3, [sp, #0]
 80a5720:	602b      	streq	r3, [r5, #0]
 80a5722:	b004      	add	sp, #16
 80a5724:	bd70      	pop	{r4, r5, r6, pc}

080a5726 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a5726:	9800      	ldr	r0, [sp, #0]
 80a5728:	4290      	cmp	r0, r2
 80a572a:	bf14      	ite	ne
 80a572c:	2001      	movne	r0, #1
 80a572e:	2006      	moveq	r0, #6
 80a5730:	4770      	bx	lr
	...

080a5734 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a5734:	b510      	push	{r4, lr}
 80a5736:	4604      	mov	r4, r0
 80a5738:	4b02      	ldr	r3, [pc, #8]	; (80a5744 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a573a:	6003      	str	r3, [r0, #0]
 80a573c:	f000 f8cf 	bl	80a58de <_ZNSt9type_infoD1Ev>
 80a5740:	4620      	mov	r0, r4
 80a5742:	bd10      	pop	{r4, pc}
 80a5744:	080a9108 	.word	0x080a9108

080a5748 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a5748:	b510      	push	{r4, lr}
 80a574a:	4604      	mov	r4, r0
 80a574c:	f7ff fff2 	bl	80a5734 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a5750:	4620      	mov	r0, r4
 80a5752:	2108      	movs	r1, #8
 80a5754:	f7fa fca3 	bl	80a009e <_ZdlPvj>
 80a5758:	4620      	mov	r0, r4
 80a575a:	bd10      	pop	{r4, pc}

080a575c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5760:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a5764:	461f      	mov	r7, r3
 80a5766:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a576a:	4598      	cmp	r8, r3
 80a576c:	4606      	mov	r6, r0
 80a576e:	4615      	mov	r5, r2
 80a5770:	d107      	bne.n	80a5782 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a5772:	9907      	ldr	r1, [sp, #28]
 80a5774:	f000 f8b6 	bl	80a58e4 <_ZNKSt9type_infoeqERKS_>
 80a5778:	b118      	cbz	r0, 80a5782 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a577a:	7165      	strb	r5, [r4, #5]
 80a577c:	2000      	movs	r0, #0
 80a577e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5782:	4639      	mov	r1, r7
 80a5784:	4630      	mov	r0, r6
 80a5786:	f000 f8ad 	bl	80a58e4 <_ZNKSt9type_infoeqERKS_>
 80a578a:	2800      	cmp	r0, #0
 80a578c:	d0f6      	beq.n	80a577c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a578e:	2301      	movs	r3, #1
 80a5790:	f8c4 8000 	str.w	r8, [r4]
 80a5794:	7125      	strb	r5, [r4, #4]
 80a5796:	71a3      	strb	r3, [r4, #6]
 80a5798:	e7f0      	b.n	80a577c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a579a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a579a:	b538      	push	{r3, r4, r5, lr}
 80a579c:	4615      	mov	r5, r2
 80a579e:	461c      	mov	r4, r3
 80a57a0:	f000 f8a0 	bl	80a58e4 <_ZNKSt9type_infoeqERKS_>
 80a57a4:	b120      	cbz	r0, 80a57b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a57a6:	2308      	movs	r3, #8
 80a57a8:	60e3      	str	r3, [r4, #12]
 80a57aa:	2306      	movs	r3, #6
 80a57ac:	6025      	str	r5, [r4, #0]
 80a57ae:	7123      	strb	r3, [r4, #4]
 80a57b0:	bd38      	pop	{r3, r4, r5, pc}

080a57b2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a57b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a57b6:	4605      	mov	r5, r0
 80a57b8:	460c      	mov	r4, r1
 80a57ba:	4616      	mov	r6, r2
 80a57bc:	461f      	mov	r7, r3
 80a57be:	f000 f891 	bl	80a58e4 <_ZNKSt9type_infoeqERKS_>
 80a57c2:	b948      	cbnz	r0, 80a57d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a57c4:	2f03      	cmp	r7, #3
 80a57c6:	d807      	bhi.n	80a57d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a57c8:	6823      	ldr	r3, [r4, #0]
 80a57ca:	4632      	mov	r2, r6
 80a57cc:	4629      	mov	r1, r5
 80a57ce:	4620      	mov	r0, r4
 80a57d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a57d4:	695b      	ldr	r3, [r3, #20]
 80a57d6:	4718      	bx	r3
 80a57d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a57dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a57dc:	b510      	push	{r4, lr}
 80a57de:	4604      	mov	r4, r0
 80a57e0:	4b02      	ldr	r3, [pc, #8]	; (80a57ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a57e2:	6003      	str	r3, [r0, #0]
 80a57e4:	f7ff ffa6 	bl	80a5734 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a57e8:	4620      	mov	r0, r4
 80a57ea:	bd10      	pop	{r4, pc}
 80a57ec:	080a9168 	.word	0x080a9168

080a57f0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a57f0:	b510      	push	{r4, lr}
 80a57f2:	4604      	mov	r4, r0
 80a57f4:	f7ff fff2 	bl	80a57dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a57f8:	4620      	mov	r0, r4
 80a57fa:	210c      	movs	r1, #12
 80a57fc:	f7fa fc4f 	bl	80a009e <_ZdlPvj>
 80a5800:	4620      	mov	r0, r4
 80a5802:	bd10      	pop	{r4, pc}

080a5804 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a5804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5808:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a580c:	4606      	mov	r6, r0
 80a580e:	4590      	cmp	r8, r2
 80a5810:	460f      	mov	r7, r1
 80a5812:	4615      	mov	r5, r2
 80a5814:	461c      	mov	r4, r3
 80a5816:	d00b      	beq.n	80a5830 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a5818:	68b0      	ldr	r0, [r6, #8]
 80a581a:	462a      	mov	r2, r5
 80a581c:	6803      	ldr	r3, [r0, #0]
 80a581e:	f8cd 8018 	str.w	r8, [sp, #24]
 80a5822:	6a1e      	ldr	r6, [r3, #32]
 80a5824:	4639      	mov	r1, r7
 80a5826:	4623      	mov	r3, r4
 80a5828:	46b4      	mov	ip, r6
 80a582a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a582e:	4760      	bx	ip
 80a5830:	4619      	mov	r1, r3
 80a5832:	f000 f857 	bl	80a58e4 <_ZNKSt9type_infoeqERKS_>
 80a5836:	2800      	cmp	r0, #0
 80a5838:	d0ee      	beq.n	80a5818 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a583a:	2006      	movs	r0, #6
 80a583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5840 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a5840:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5844:	460d      	mov	r5, r1
 80a5846:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a584a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a584e:	4619      	mov	r1, r3
 80a5850:	4681      	mov	r9, r0
 80a5852:	4617      	mov	r7, r2
 80a5854:	4698      	mov	r8, r3
 80a5856:	f000 f845 	bl	80a58e4 <_ZNKSt9type_infoeqERKS_>
 80a585a:	b190      	cbz	r0, 80a5882 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a585c:	2d00      	cmp	r5, #0
 80a585e:	6034      	str	r4, [r6, #0]
 80a5860:	7137      	strb	r7, [r6, #4]
 80a5862:	db09      	blt.n	80a5878 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a5864:	442c      	add	r4, r5
 80a5866:	45a2      	cmp	sl, r4
 80a5868:	bf0c      	ite	eq
 80a586a:	2406      	moveq	r4, #6
 80a586c:	2401      	movne	r4, #1
 80a586e:	71b4      	strb	r4, [r6, #6]
 80a5870:	2000      	movs	r0, #0
 80a5872:	b001      	add	sp, #4
 80a5874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5878:	3502      	adds	r5, #2
 80a587a:	d1f9      	bne.n	80a5870 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a587c:	2301      	movs	r3, #1
 80a587e:	71b3      	strb	r3, [r6, #6]
 80a5880:	e7f6      	b.n	80a5870 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5882:	4554      	cmp	r4, sl
 80a5884:	d106      	bne.n	80a5894 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a5886:	4659      	mov	r1, fp
 80a5888:	4648      	mov	r0, r9
 80a588a:	f000 f82b 	bl	80a58e4 <_ZNKSt9type_infoeqERKS_>
 80a588e:	b108      	cbz	r0, 80a5894 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a5890:	7177      	strb	r7, [r6, #5]
 80a5892:	e7ed      	b.n	80a5870 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5894:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a5898:	463a      	mov	r2, r7
 80a589a:	6803      	ldr	r3, [r0, #0]
 80a589c:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a58a0:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a58a4:	69dc      	ldr	r4, [r3, #28]
 80a58a6:	4629      	mov	r1, r5
 80a58a8:	4643      	mov	r3, r8
 80a58aa:	46a4      	mov	ip, r4
 80a58ac:	b001      	add	sp, #4
 80a58ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a58b2:	4760      	bx	ip

080a58b4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a58b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a58b8:	4607      	mov	r7, r0
 80a58ba:	460c      	mov	r4, r1
 80a58bc:	4615      	mov	r5, r2
 80a58be:	461e      	mov	r6, r3
 80a58c0:	f7ff ff6b 	bl	80a579a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a58c4:	b948      	cbnz	r0, 80a58da <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a58c6:	68b8      	ldr	r0, [r7, #8]
 80a58c8:	462a      	mov	r2, r5
 80a58ca:	6803      	ldr	r3, [r0, #0]
 80a58cc:	4621      	mov	r1, r4
 80a58ce:	699f      	ldr	r7, [r3, #24]
 80a58d0:	4633      	mov	r3, r6
 80a58d2:	46bc      	mov	ip, r7
 80a58d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a58d8:	4760      	bx	ip
 80a58da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a58de <_ZNSt9type_infoD1Ev>:
 80a58de:	4770      	bx	lr

080a58e0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a58e0:	2000      	movs	r0, #0
 80a58e2:	4770      	bx	lr

080a58e4 <_ZNKSt9type_infoeqERKS_>:
 80a58e4:	4281      	cmp	r1, r0
 80a58e6:	b508      	push	{r3, lr}
 80a58e8:	d00e      	beq.n	80a5908 <_ZNKSt9type_infoeqERKS_+0x24>
 80a58ea:	6840      	ldr	r0, [r0, #4]
 80a58ec:	7803      	ldrb	r3, [r0, #0]
 80a58ee:	2b2a      	cmp	r3, #42	; 0x2a
 80a58f0:	d00c      	beq.n	80a590c <_ZNKSt9type_infoeqERKS_+0x28>
 80a58f2:	6849      	ldr	r1, [r1, #4]
 80a58f4:	780b      	ldrb	r3, [r1, #0]
 80a58f6:	2b2a      	cmp	r3, #42	; 0x2a
 80a58f8:	bf08      	it	eq
 80a58fa:	3101      	addeq	r1, #1
 80a58fc:	f001 fa24 	bl	80a6d48 <strcmp>
 80a5900:	fab0 f080 	clz	r0, r0
 80a5904:	0940      	lsrs	r0, r0, #5
 80a5906:	bd08      	pop	{r3, pc}
 80a5908:	2001      	movs	r0, #1
 80a590a:	e7fc      	b.n	80a5906 <_ZNKSt9type_infoeqERKS_+0x22>
 80a590c:	2000      	movs	r0, #0
 80a590e:	e7fa      	b.n	80a5906 <_ZNKSt9type_infoeqERKS_+0x22>

080a5910 <__aeabi_drsub>:
 80a5910:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a5914:	e002      	b.n	80a591c <__adddf3>
 80a5916:	bf00      	nop

080a5918 <__aeabi_dsub>:
 80a5918:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a591c <__adddf3>:
 80a591c:	b530      	push	{r4, r5, lr}
 80a591e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a5922:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a5926:	ea94 0f05 	teq	r4, r5
 80a592a:	bf08      	it	eq
 80a592c:	ea90 0f02 	teqeq	r0, r2
 80a5930:	bf1f      	itttt	ne
 80a5932:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a5936:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a593a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a593e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5942:	f000 80e2 	beq.w	80a5b0a <__adddf3+0x1ee>
 80a5946:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a594a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a594e:	bfb8      	it	lt
 80a5950:	426d      	neglt	r5, r5
 80a5952:	dd0c      	ble.n	80a596e <__adddf3+0x52>
 80a5954:	442c      	add	r4, r5
 80a5956:	ea80 0202 	eor.w	r2, r0, r2
 80a595a:	ea81 0303 	eor.w	r3, r1, r3
 80a595e:	ea82 0000 	eor.w	r0, r2, r0
 80a5962:	ea83 0101 	eor.w	r1, r3, r1
 80a5966:	ea80 0202 	eor.w	r2, r0, r2
 80a596a:	ea81 0303 	eor.w	r3, r1, r3
 80a596e:	2d36      	cmp	r5, #54	; 0x36
 80a5970:	bf88      	it	hi
 80a5972:	bd30      	pophi	{r4, r5, pc}
 80a5974:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a597c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a5980:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a5984:	d002      	beq.n	80a598c <__adddf3+0x70>
 80a5986:	4240      	negs	r0, r0
 80a5988:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a598c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a5990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5994:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a5998:	d002      	beq.n	80a59a0 <__adddf3+0x84>
 80a599a:	4252      	negs	r2, r2
 80a599c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a59a0:	ea94 0f05 	teq	r4, r5
 80a59a4:	f000 80a7 	beq.w	80a5af6 <__adddf3+0x1da>
 80a59a8:	f1a4 0401 	sub.w	r4, r4, #1
 80a59ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80a59b0:	db0d      	blt.n	80a59ce <__adddf3+0xb2>
 80a59b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a59b6:	fa22 f205 	lsr.w	r2, r2, r5
 80a59ba:	1880      	adds	r0, r0, r2
 80a59bc:	f141 0100 	adc.w	r1, r1, #0
 80a59c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a59c4:	1880      	adds	r0, r0, r2
 80a59c6:	fa43 f305 	asr.w	r3, r3, r5
 80a59ca:	4159      	adcs	r1, r3
 80a59cc:	e00e      	b.n	80a59ec <__adddf3+0xd0>
 80a59ce:	f1a5 0520 	sub.w	r5, r5, #32
 80a59d2:	f10e 0e20 	add.w	lr, lr, #32
 80a59d6:	2a01      	cmp	r2, #1
 80a59d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a59dc:	bf28      	it	cs
 80a59de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a59e2:	fa43 f305 	asr.w	r3, r3, r5
 80a59e6:	18c0      	adds	r0, r0, r3
 80a59e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a59ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a59f0:	d507      	bpl.n	80a5a02 <__adddf3+0xe6>
 80a59f2:	f04f 0e00 	mov.w	lr, #0
 80a59f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a59fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a59fe:	eb6e 0101 	sbc.w	r1, lr, r1
 80a5a02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a5a06:	d31b      	bcc.n	80a5a40 <__adddf3+0x124>
 80a5a08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5a0c:	d30c      	bcc.n	80a5a28 <__adddf3+0x10c>
 80a5a0e:	0849      	lsrs	r1, r1, #1
 80a5a10:	ea5f 0030 	movs.w	r0, r0, rrx
 80a5a14:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a5a18:	f104 0401 	add.w	r4, r4, #1
 80a5a1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5a20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5a24:	f080 809a 	bcs.w	80a5b5c <__adddf3+0x240>
 80a5a28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5a2c:	bf08      	it	eq
 80a5a2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5a32:	f150 0000 	adcs.w	r0, r0, #0
 80a5a36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5a3a:	ea41 0105 	orr.w	r1, r1, r5
 80a5a3e:	bd30      	pop	{r4, r5, pc}
 80a5a40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5a44:	4140      	adcs	r0, r0
 80a5a46:	eb41 0101 	adc.w	r1, r1, r1
 80a5a4a:	3c01      	subs	r4, #1
 80a5a4c:	bf28      	it	cs
 80a5a4e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a5a52:	d2e9      	bcs.n	80a5a28 <__adddf3+0x10c>
 80a5a54:	f091 0f00 	teq	r1, #0
 80a5a58:	bf04      	itt	eq
 80a5a5a:	4601      	moveq	r1, r0
 80a5a5c:	2000      	moveq	r0, #0
 80a5a5e:	fab1 f381 	clz	r3, r1
 80a5a62:	bf08      	it	eq
 80a5a64:	3320      	addeq	r3, #32
 80a5a66:	f1a3 030b 	sub.w	r3, r3, #11
 80a5a6a:	f1b3 0220 	subs.w	r2, r3, #32
 80a5a6e:	da0c      	bge.n	80a5a8a <__adddf3+0x16e>
 80a5a70:	320c      	adds	r2, #12
 80a5a72:	dd08      	ble.n	80a5a86 <__adddf3+0x16a>
 80a5a74:	f102 0c14 	add.w	ip, r2, #20
 80a5a78:	f1c2 020c 	rsb	r2, r2, #12
 80a5a7c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a5a80:	fa21 f102 	lsr.w	r1, r1, r2
 80a5a84:	e00c      	b.n	80a5aa0 <__adddf3+0x184>
 80a5a86:	f102 0214 	add.w	r2, r2, #20
 80a5a8a:	bfd8      	it	le
 80a5a8c:	f1c2 0c20 	rsble	ip, r2, #32
 80a5a90:	fa01 f102 	lsl.w	r1, r1, r2
 80a5a94:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5a98:	bfdc      	itt	le
 80a5a9a:	ea41 010c 	orrle.w	r1, r1, ip
 80a5a9e:	4090      	lslle	r0, r2
 80a5aa0:	1ae4      	subs	r4, r4, r3
 80a5aa2:	bfa2      	ittt	ge
 80a5aa4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a5aa8:	4329      	orrge	r1, r5
 80a5aaa:	bd30      	popge	{r4, r5, pc}
 80a5aac:	ea6f 0404 	mvn.w	r4, r4
 80a5ab0:	3c1f      	subs	r4, #31
 80a5ab2:	da1c      	bge.n	80a5aee <__adddf3+0x1d2>
 80a5ab4:	340c      	adds	r4, #12
 80a5ab6:	dc0e      	bgt.n	80a5ad6 <__adddf3+0x1ba>
 80a5ab8:	f104 0414 	add.w	r4, r4, #20
 80a5abc:	f1c4 0220 	rsb	r2, r4, #32
 80a5ac0:	fa20 f004 	lsr.w	r0, r0, r4
 80a5ac4:	fa01 f302 	lsl.w	r3, r1, r2
 80a5ac8:	ea40 0003 	orr.w	r0, r0, r3
 80a5acc:	fa21 f304 	lsr.w	r3, r1, r4
 80a5ad0:	ea45 0103 	orr.w	r1, r5, r3
 80a5ad4:	bd30      	pop	{r4, r5, pc}
 80a5ad6:	f1c4 040c 	rsb	r4, r4, #12
 80a5ada:	f1c4 0220 	rsb	r2, r4, #32
 80a5ade:	fa20 f002 	lsr.w	r0, r0, r2
 80a5ae2:	fa01 f304 	lsl.w	r3, r1, r4
 80a5ae6:	ea40 0003 	orr.w	r0, r0, r3
 80a5aea:	4629      	mov	r1, r5
 80a5aec:	bd30      	pop	{r4, r5, pc}
 80a5aee:	fa21 f004 	lsr.w	r0, r1, r4
 80a5af2:	4629      	mov	r1, r5
 80a5af4:	bd30      	pop	{r4, r5, pc}
 80a5af6:	f094 0f00 	teq	r4, #0
 80a5afa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a5afe:	bf06      	itte	eq
 80a5b00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a5b04:	3401      	addeq	r4, #1
 80a5b06:	3d01      	subne	r5, #1
 80a5b08:	e74e      	b.n	80a59a8 <__adddf3+0x8c>
 80a5b0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5b0e:	bf18      	it	ne
 80a5b10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5b14:	d029      	beq.n	80a5b6a <__adddf3+0x24e>
 80a5b16:	ea94 0f05 	teq	r4, r5
 80a5b1a:	bf08      	it	eq
 80a5b1c:	ea90 0f02 	teqeq	r0, r2
 80a5b20:	d005      	beq.n	80a5b2e <__adddf3+0x212>
 80a5b22:	ea54 0c00 	orrs.w	ip, r4, r0
 80a5b26:	bf04      	itt	eq
 80a5b28:	4619      	moveq	r1, r3
 80a5b2a:	4610      	moveq	r0, r2
 80a5b2c:	bd30      	pop	{r4, r5, pc}
 80a5b2e:	ea91 0f03 	teq	r1, r3
 80a5b32:	bf1e      	ittt	ne
 80a5b34:	2100      	movne	r1, #0
 80a5b36:	2000      	movne	r0, #0
 80a5b38:	bd30      	popne	{r4, r5, pc}
 80a5b3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a5b3e:	d105      	bne.n	80a5b4c <__adddf3+0x230>
 80a5b40:	0040      	lsls	r0, r0, #1
 80a5b42:	4149      	adcs	r1, r1
 80a5b44:	bf28      	it	cs
 80a5b46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a5b4a:	bd30      	pop	{r4, r5, pc}
 80a5b4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a5b50:	bf3c      	itt	cc
 80a5b52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a5b56:	bd30      	popcc	{r4, r5, pc}
 80a5b58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5b5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a5b60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5b64:	f04f 0000 	mov.w	r0, #0
 80a5b68:	bd30      	pop	{r4, r5, pc}
 80a5b6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5b6e:	bf1a      	itte	ne
 80a5b70:	4619      	movne	r1, r3
 80a5b72:	4610      	movne	r0, r2
 80a5b74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a5b78:	bf1c      	itt	ne
 80a5b7a:	460b      	movne	r3, r1
 80a5b7c:	4602      	movne	r2, r0
 80a5b7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5b82:	bf06      	itte	eq
 80a5b84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5b88:	ea91 0f03 	teqeq	r1, r3
 80a5b8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5b90:	bd30      	pop	{r4, r5, pc}
 80a5b92:	bf00      	nop

080a5b94 <__aeabi_ui2d>:
 80a5b94:	f090 0f00 	teq	r0, #0
 80a5b98:	bf04      	itt	eq
 80a5b9a:	2100      	moveq	r1, #0
 80a5b9c:	4770      	bxeq	lr
 80a5b9e:	b530      	push	{r4, r5, lr}
 80a5ba0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5ba4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5ba8:	f04f 0500 	mov.w	r5, #0
 80a5bac:	f04f 0100 	mov.w	r1, #0
 80a5bb0:	e750      	b.n	80a5a54 <__adddf3+0x138>
 80a5bb2:	bf00      	nop

080a5bb4 <__aeabi_i2d>:
 80a5bb4:	f090 0f00 	teq	r0, #0
 80a5bb8:	bf04      	itt	eq
 80a5bba:	2100      	moveq	r1, #0
 80a5bbc:	4770      	bxeq	lr
 80a5bbe:	b530      	push	{r4, r5, lr}
 80a5bc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5bc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5bc8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5bcc:	bf48      	it	mi
 80a5bce:	4240      	negmi	r0, r0
 80a5bd0:	f04f 0100 	mov.w	r1, #0
 80a5bd4:	e73e      	b.n	80a5a54 <__adddf3+0x138>
 80a5bd6:	bf00      	nop

080a5bd8 <__aeabi_f2d>:
 80a5bd8:	0042      	lsls	r2, r0, #1
 80a5bda:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a5bde:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5be2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a5be6:	bf1f      	itttt	ne
 80a5be8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5bec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5bf0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a5bf4:	4770      	bxne	lr
 80a5bf6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a5bfa:	bf08      	it	eq
 80a5bfc:	4770      	bxeq	lr
 80a5bfe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a5c02:	bf04      	itt	eq
 80a5c04:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a5c08:	4770      	bxeq	lr
 80a5c0a:	b530      	push	{r4, r5, lr}
 80a5c0c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5c10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5c14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5c18:	e71c      	b.n	80a5a54 <__adddf3+0x138>
 80a5c1a:	bf00      	nop

080a5c1c <__aeabi_ul2d>:
 80a5c1c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5c20:	bf08      	it	eq
 80a5c22:	4770      	bxeq	lr
 80a5c24:	b530      	push	{r4, r5, lr}
 80a5c26:	f04f 0500 	mov.w	r5, #0
 80a5c2a:	e00a      	b.n	80a5c42 <__aeabi_l2d+0x16>

080a5c2c <__aeabi_l2d>:
 80a5c2c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5c30:	bf08      	it	eq
 80a5c32:	4770      	bxeq	lr
 80a5c34:	b530      	push	{r4, r5, lr}
 80a5c36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a5c3a:	d502      	bpl.n	80a5c42 <__aeabi_l2d+0x16>
 80a5c3c:	4240      	negs	r0, r0
 80a5c3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5c42:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5c46:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5c4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a5c4e:	f43f aed8 	beq.w	80a5a02 <__adddf3+0xe6>
 80a5c52:	f04f 0203 	mov.w	r2, #3
 80a5c56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5c5a:	bf18      	it	ne
 80a5c5c:	3203      	addne	r2, #3
 80a5c5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5c62:	bf18      	it	ne
 80a5c64:	3203      	addne	r2, #3
 80a5c66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a5c6a:	f1c2 0320 	rsb	r3, r2, #32
 80a5c6e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a5c72:	fa20 f002 	lsr.w	r0, r0, r2
 80a5c76:	fa01 fe03 	lsl.w	lr, r1, r3
 80a5c7a:	ea40 000e 	orr.w	r0, r0, lr
 80a5c7e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5c82:	4414      	add	r4, r2
 80a5c84:	e6bd      	b.n	80a5a02 <__adddf3+0xe6>
 80a5c86:	bf00      	nop

080a5c88 <__aeabi_dmul>:
 80a5c88:	b570      	push	{r4, r5, r6, lr}
 80a5c8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5c8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5c92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5c96:	bf1d      	ittte	ne
 80a5c98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5c9c:	ea94 0f0c 	teqne	r4, ip
 80a5ca0:	ea95 0f0c 	teqne	r5, ip
 80a5ca4:	f000 f8de 	bleq	80a5e64 <__aeabi_dmul+0x1dc>
 80a5ca8:	442c      	add	r4, r5
 80a5caa:	ea81 0603 	eor.w	r6, r1, r3
 80a5cae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5cb2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5cb6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5cba:	bf18      	it	ne
 80a5cbc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5cc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5cc8:	d038      	beq.n	80a5d3c <__aeabi_dmul+0xb4>
 80a5cca:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5cce:	f04f 0500 	mov.w	r5, #0
 80a5cd2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5cd6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5cda:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5cde:	f04f 0600 	mov.w	r6, #0
 80a5ce2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5ce6:	f09c 0f00 	teq	ip, #0
 80a5cea:	bf18      	it	ne
 80a5cec:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5cf0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5cf4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5cf8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5cfc:	d204      	bcs.n	80a5d08 <__aeabi_dmul+0x80>
 80a5cfe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5d02:	416d      	adcs	r5, r5
 80a5d04:	eb46 0606 	adc.w	r6, r6, r6
 80a5d08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5d0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5d10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5d14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5d18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5d1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5d20:	bf88      	it	hi
 80a5d22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5d26:	d81e      	bhi.n	80a5d66 <__aeabi_dmul+0xde>
 80a5d28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5d2c:	bf08      	it	eq
 80a5d2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5d32:	f150 0000 	adcs.w	r0, r0, #0
 80a5d36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5d3a:	bd70      	pop	{r4, r5, r6, pc}
 80a5d3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5d40:	ea46 0101 	orr.w	r1, r6, r1
 80a5d44:	ea40 0002 	orr.w	r0, r0, r2
 80a5d48:	ea81 0103 	eor.w	r1, r1, r3
 80a5d4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5d50:	bfc2      	ittt	gt
 80a5d52:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5d56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5d5a:	bd70      	popgt	{r4, r5, r6, pc}
 80a5d5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5d60:	f04f 0e00 	mov.w	lr, #0
 80a5d64:	3c01      	subs	r4, #1
 80a5d66:	f300 80ab 	bgt.w	80a5ec0 <__aeabi_dmul+0x238>
 80a5d6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5d6e:	bfde      	ittt	le
 80a5d70:	2000      	movle	r0, #0
 80a5d72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5d76:	bd70      	pople	{r4, r5, r6, pc}
 80a5d78:	f1c4 0400 	rsb	r4, r4, #0
 80a5d7c:	3c20      	subs	r4, #32
 80a5d7e:	da35      	bge.n	80a5dec <__aeabi_dmul+0x164>
 80a5d80:	340c      	adds	r4, #12
 80a5d82:	dc1b      	bgt.n	80a5dbc <__aeabi_dmul+0x134>
 80a5d84:	f104 0414 	add.w	r4, r4, #20
 80a5d88:	f1c4 0520 	rsb	r5, r4, #32
 80a5d8c:	fa00 f305 	lsl.w	r3, r0, r5
 80a5d90:	fa20 f004 	lsr.w	r0, r0, r4
 80a5d94:	fa01 f205 	lsl.w	r2, r1, r5
 80a5d98:	ea40 0002 	orr.w	r0, r0, r2
 80a5d9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5da0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5da4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5da8:	fa21 f604 	lsr.w	r6, r1, r4
 80a5dac:	eb42 0106 	adc.w	r1, r2, r6
 80a5db0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5db4:	bf08      	it	eq
 80a5db6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5dba:	bd70      	pop	{r4, r5, r6, pc}
 80a5dbc:	f1c4 040c 	rsb	r4, r4, #12
 80a5dc0:	f1c4 0520 	rsb	r5, r4, #32
 80a5dc4:	fa00 f304 	lsl.w	r3, r0, r4
 80a5dc8:	fa20 f005 	lsr.w	r0, r0, r5
 80a5dcc:	fa01 f204 	lsl.w	r2, r1, r4
 80a5dd0:	ea40 0002 	orr.w	r0, r0, r2
 80a5dd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5dd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5ddc:	f141 0100 	adc.w	r1, r1, #0
 80a5de0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5de4:	bf08      	it	eq
 80a5de6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5dea:	bd70      	pop	{r4, r5, r6, pc}
 80a5dec:	f1c4 0520 	rsb	r5, r4, #32
 80a5df0:	fa00 f205 	lsl.w	r2, r0, r5
 80a5df4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5df8:	fa20 f304 	lsr.w	r3, r0, r4
 80a5dfc:	fa01 f205 	lsl.w	r2, r1, r5
 80a5e00:	ea43 0302 	orr.w	r3, r3, r2
 80a5e04:	fa21 f004 	lsr.w	r0, r1, r4
 80a5e08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5e0c:	fa21 f204 	lsr.w	r2, r1, r4
 80a5e10:	ea20 0002 	bic.w	r0, r0, r2
 80a5e14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5e18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5e1c:	bf08      	it	eq
 80a5e1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5e22:	bd70      	pop	{r4, r5, r6, pc}
 80a5e24:	f094 0f00 	teq	r4, #0
 80a5e28:	d10f      	bne.n	80a5e4a <__aeabi_dmul+0x1c2>
 80a5e2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a5e2e:	0040      	lsls	r0, r0, #1
 80a5e30:	eb41 0101 	adc.w	r1, r1, r1
 80a5e34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5e38:	bf08      	it	eq
 80a5e3a:	3c01      	subeq	r4, #1
 80a5e3c:	d0f7      	beq.n	80a5e2e <__aeabi_dmul+0x1a6>
 80a5e3e:	ea41 0106 	orr.w	r1, r1, r6
 80a5e42:	f095 0f00 	teq	r5, #0
 80a5e46:	bf18      	it	ne
 80a5e48:	4770      	bxne	lr
 80a5e4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a5e4e:	0052      	lsls	r2, r2, #1
 80a5e50:	eb43 0303 	adc.w	r3, r3, r3
 80a5e54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5e58:	bf08      	it	eq
 80a5e5a:	3d01      	subeq	r5, #1
 80a5e5c:	d0f7      	beq.n	80a5e4e <__aeabi_dmul+0x1c6>
 80a5e5e:	ea43 0306 	orr.w	r3, r3, r6
 80a5e62:	4770      	bx	lr
 80a5e64:	ea94 0f0c 	teq	r4, ip
 80a5e68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5e6c:	bf18      	it	ne
 80a5e6e:	ea95 0f0c 	teqne	r5, ip
 80a5e72:	d00c      	beq.n	80a5e8e <__aeabi_dmul+0x206>
 80a5e74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5e78:	bf18      	it	ne
 80a5e7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5e7e:	d1d1      	bne.n	80a5e24 <__aeabi_dmul+0x19c>
 80a5e80:	ea81 0103 	eor.w	r1, r1, r3
 80a5e84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5e88:	f04f 0000 	mov.w	r0, #0
 80a5e8c:	bd70      	pop	{r4, r5, r6, pc}
 80a5e8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5e92:	bf06      	itte	eq
 80a5e94:	4610      	moveq	r0, r2
 80a5e96:	4619      	moveq	r1, r3
 80a5e98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5e9c:	d019      	beq.n	80a5ed2 <__aeabi_dmul+0x24a>
 80a5e9e:	ea94 0f0c 	teq	r4, ip
 80a5ea2:	d102      	bne.n	80a5eaa <__aeabi_dmul+0x222>
 80a5ea4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5ea8:	d113      	bne.n	80a5ed2 <__aeabi_dmul+0x24a>
 80a5eaa:	ea95 0f0c 	teq	r5, ip
 80a5eae:	d105      	bne.n	80a5ebc <__aeabi_dmul+0x234>
 80a5eb0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5eb4:	bf1c      	itt	ne
 80a5eb6:	4610      	movne	r0, r2
 80a5eb8:	4619      	movne	r1, r3
 80a5eba:	d10a      	bne.n	80a5ed2 <__aeabi_dmul+0x24a>
 80a5ebc:	ea81 0103 	eor.w	r1, r1, r3
 80a5ec0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5ec4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5ec8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5ecc:	f04f 0000 	mov.w	r0, #0
 80a5ed0:	bd70      	pop	{r4, r5, r6, pc}
 80a5ed2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5ed6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5eda:	bd70      	pop	{r4, r5, r6, pc}

080a5edc <__aeabi_ddiv>:
 80a5edc:	b570      	push	{r4, r5, r6, lr}
 80a5ede:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5ee2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5ee6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5eea:	bf1d      	ittte	ne
 80a5eec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5ef0:	ea94 0f0c 	teqne	r4, ip
 80a5ef4:	ea95 0f0c 	teqne	r5, ip
 80a5ef8:	f000 f8a7 	bleq	80a604a <__aeabi_ddiv+0x16e>
 80a5efc:	eba4 0405 	sub.w	r4, r4, r5
 80a5f00:	ea81 0e03 	eor.w	lr, r1, r3
 80a5f04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5f08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5f0c:	f000 8088 	beq.w	80a6020 <__aeabi_ddiv+0x144>
 80a5f10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5f14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5f18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5f1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5f20:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5f24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5f28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5f2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5f30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5f34:	429d      	cmp	r5, r3
 80a5f36:	bf08      	it	eq
 80a5f38:	4296      	cmpeq	r6, r2
 80a5f3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5f3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5f42:	d202      	bcs.n	80a5f4a <__aeabi_ddiv+0x6e>
 80a5f44:	085b      	lsrs	r3, r3, #1
 80a5f46:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5f4a:	1ab6      	subs	r6, r6, r2
 80a5f4c:	eb65 0503 	sbc.w	r5, r5, r3
 80a5f50:	085b      	lsrs	r3, r3, #1
 80a5f52:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5f56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5f5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5f5e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5f62:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5f66:	bf22      	ittt	cs
 80a5f68:	1ab6      	subcs	r6, r6, r2
 80a5f6a:	4675      	movcs	r5, lr
 80a5f6c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5f70:	085b      	lsrs	r3, r3, #1
 80a5f72:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5f76:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5f7e:	bf22      	ittt	cs
 80a5f80:	1ab6      	subcs	r6, r6, r2
 80a5f82:	4675      	movcs	r5, lr
 80a5f84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5f88:	085b      	lsrs	r3, r3, #1
 80a5f8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5f8e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5f92:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5f96:	bf22      	ittt	cs
 80a5f98:	1ab6      	subcs	r6, r6, r2
 80a5f9a:	4675      	movcs	r5, lr
 80a5f9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5fa0:	085b      	lsrs	r3, r3, #1
 80a5fa2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5fa6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5faa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5fae:	bf22      	ittt	cs
 80a5fb0:	1ab6      	subcs	r6, r6, r2
 80a5fb2:	4675      	movcs	r5, lr
 80a5fb4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5fb8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5fbc:	d018      	beq.n	80a5ff0 <__aeabi_ddiv+0x114>
 80a5fbe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5fc2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5fc6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5fca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5fce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5fd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5fd6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5fda:	d1c0      	bne.n	80a5f5e <__aeabi_ddiv+0x82>
 80a5fdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5fe0:	d10b      	bne.n	80a5ffa <__aeabi_ddiv+0x11e>
 80a5fe2:	ea41 0100 	orr.w	r1, r1, r0
 80a5fe6:	f04f 0000 	mov.w	r0, #0
 80a5fea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5fee:	e7b6      	b.n	80a5f5e <__aeabi_ddiv+0x82>
 80a5ff0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5ff4:	bf04      	itt	eq
 80a5ff6:	4301      	orreq	r1, r0
 80a5ff8:	2000      	moveq	r0, #0
 80a5ffa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5ffe:	bf88      	it	hi
 80a6000:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a6004:	f63f aeaf 	bhi.w	80a5d66 <__aeabi_dmul+0xde>
 80a6008:	ebb5 0c03 	subs.w	ip, r5, r3
 80a600c:	bf04      	itt	eq
 80a600e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a6012:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a6016:	f150 0000 	adcs.w	r0, r0, #0
 80a601a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a601e:	bd70      	pop	{r4, r5, r6, pc}
 80a6020:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a6024:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a6028:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a602c:	bfc2      	ittt	gt
 80a602e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a6032:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a6036:	bd70      	popgt	{r4, r5, r6, pc}
 80a6038:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a603c:	f04f 0e00 	mov.w	lr, #0
 80a6040:	3c01      	subs	r4, #1
 80a6042:	e690      	b.n	80a5d66 <__aeabi_dmul+0xde>
 80a6044:	ea45 0e06 	orr.w	lr, r5, r6
 80a6048:	e68d      	b.n	80a5d66 <__aeabi_dmul+0xde>
 80a604a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a604e:	ea94 0f0c 	teq	r4, ip
 80a6052:	bf08      	it	eq
 80a6054:	ea95 0f0c 	teqeq	r5, ip
 80a6058:	f43f af3b 	beq.w	80a5ed2 <__aeabi_dmul+0x24a>
 80a605c:	ea94 0f0c 	teq	r4, ip
 80a6060:	d10a      	bne.n	80a6078 <__aeabi_ddiv+0x19c>
 80a6062:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a6066:	f47f af34 	bne.w	80a5ed2 <__aeabi_dmul+0x24a>
 80a606a:	ea95 0f0c 	teq	r5, ip
 80a606e:	f47f af25 	bne.w	80a5ebc <__aeabi_dmul+0x234>
 80a6072:	4610      	mov	r0, r2
 80a6074:	4619      	mov	r1, r3
 80a6076:	e72c      	b.n	80a5ed2 <__aeabi_dmul+0x24a>
 80a6078:	ea95 0f0c 	teq	r5, ip
 80a607c:	d106      	bne.n	80a608c <__aeabi_ddiv+0x1b0>
 80a607e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a6082:	f43f aefd 	beq.w	80a5e80 <__aeabi_dmul+0x1f8>
 80a6086:	4610      	mov	r0, r2
 80a6088:	4619      	mov	r1, r3
 80a608a:	e722      	b.n	80a5ed2 <__aeabi_dmul+0x24a>
 80a608c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a6090:	bf18      	it	ne
 80a6092:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a6096:	f47f aec5 	bne.w	80a5e24 <__aeabi_dmul+0x19c>
 80a609a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a609e:	f47f af0d 	bne.w	80a5ebc <__aeabi_dmul+0x234>
 80a60a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a60a6:	f47f aeeb 	bne.w	80a5e80 <__aeabi_dmul+0x1f8>
 80a60aa:	e712      	b.n	80a5ed2 <__aeabi_dmul+0x24a>

080a60ac <__aeabi_d2uiz>:
 80a60ac:	004a      	lsls	r2, r1, #1
 80a60ae:	d211      	bcs.n	80a60d4 <__aeabi_d2uiz+0x28>
 80a60b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a60b4:	d211      	bcs.n	80a60da <__aeabi_d2uiz+0x2e>
 80a60b6:	d50d      	bpl.n	80a60d4 <__aeabi_d2uiz+0x28>
 80a60b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a60bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a60c0:	d40e      	bmi.n	80a60e0 <__aeabi_d2uiz+0x34>
 80a60c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a60c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a60ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a60ce:	fa23 f002 	lsr.w	r0, r3, r2
 80a60d2:	4770      	bx	lr
 80a60d4:	f04f 0000 	mov.w	r0, #0
 80a60d8:	4770      	bx	lr
 80a60da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a60de:	d102      	bne.n	80a60e6 <__aeabi_d2uiz+0x3a>
 80a60e0:	f04f 30ff 	mov.w	r0, #4294967295
 80a60e4:	4770      	bx	lr
 80a60e6:	f04f 0000 	mov.w	r0, #0
 80a60ea:	4770      	bx	lr

080a60ec <__aeabi_d2f>:
 80a60ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a60f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a60f4:	bf24      	itt	cs
 80a60f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a60fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a60fe:	d90d      	bls.n	80a611c <__aeabi_d2f+0x30>
 80a6100:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6104:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a6108:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a610c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a6110:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a6114:	bf08      	it	eq
 80a6116:	f020 0001 	biceq.w	r0, r0, #1
 80a611a:	4770      	bx	lr
 80a611c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a6120:	d121      	bne.n	80a6166 <__aeabi_d2f+0x7a>
 80a6122:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a6126:	bfbc      	itt	lt
 80a6128:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a612c:	4770      	bxlt	lr
 80a612e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6132:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a6136:	f1c2 0218 	rsb	r2, r2, #24
 80a613a:	f1c2 0c20 	rsb	ip, r2, #32
 80a613e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a6142:	fa20 f002 	lsr.w	r0, r0, r2
 80a6146:	bf18      	it	ne
 80a6148:	f040 0001 	orrne.w	r0, r0, #1
 80a614c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a6150:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a6154:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a6158:	ea40 000c 	orr.w	r0, r0, ip
 80a615c:	fa23 f302 	lsr.w	r3, r3, r2
 80a6160:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a6164:	e7cc      	b.n	80a6100 <__aeabi_d2f+0x14>
 80a6166:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a616a:	d107      	bne.n	80a617c <__aeabi_d2f+0x90>
 80a616c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a6170:	bf1e      	ittt	ne
 80a6172:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a6176:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a617a:	4770      	bxne	lr
 80a617c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a6180:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6184:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6188:	4770      	bx	lr
 80a618a:	bf00      	nop

080a618c <__aeabi_frsub>:
 80a618c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a6190:	e002      	b.n	80a6198 <__addsf3>
 80a6192:	bf00      	nop

080a6194 <__aeabi_fsub>:
 80a6194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a6198 <__addsf3>:
 80a6198:	0042      	lsls	r2, r0, #1
 80a619a:	bf1f      	itttt	ne
 80a619c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a61a0:	ea92 0f03 	teqne	r2, r3
 80a61a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a61a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a61ac:	d06a      	beq.n	80a6284 <__addsf3+0xec>
 80a61ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a61b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a61b6:	bfc1      	itttt	gt
 80a61b8:	18d2      	addgt	r2, r2, r3
 80a61ba:	4041      	eorgt	r1, r0
 80a61bc:	4048      	eorgt	r0, r1
 80a61be:	4041      	eorgt	r1, r0
 80a61c0:	bfb8      	it	lt
 80a61c2:	425b      	neglt	r3, r3
 80a61c4:	2b19      	cmp	r3, #25
 80a61c6:	bf88      	it	hi
 80a61c8:	4770      	bxhi	lr
 80a61ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a61ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a61d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a61d6:	bf18      	it	ne
 80a61d8:	4240      	negne	r0, r0
 80a61da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a61de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a61e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a61e6:	bf18      	it	ne
 80a61e8:	4249      	negne	r1, r1
 80a61ea:	ea92 0f03 	teq	r2, r3
 80a61ee:	d03f      	beq.n	80a6270 <__addsf3+0xd8>
 80a61f0:	f1a2 0201 	sub.w	r2, r2, #1
 80a61f4:	fa41 fc03 	asr.w	ip, r1, r3
 80a61f8:	eb10 000c 	adds.w	r0, r0, ip
 80a61fc:	f1c3 0320 	rsb	r3, r3, #32
 80a6200:	fa01 f103 	lsl.w	r1, r1, r3
 80a6204:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a6208:	d502      	bpl.n	80a6210 <__addsf3+0x78>
 80a620a:	4249      	negs	r1, r1
 80a620c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a6210:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a6214:	d313      	bcc.n	80a623e <__addsf3+0xa6>
 80a6216:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a621a:	d306      	bcc.n	80a622a <__addsf3+0x92>
 80a621c:	0840      	lsrs	r0, r0, #1
 80a621e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a6222:	f102 0201 	add.w	r2, r2, #1
 80a6226:	2afe      	cmp	r2, #254	; 0xfe
 80a6228:	d251      	bcs.n	80a62ce <__addsf3+0x136>
 80a622a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a622e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6232:	bf08      	it	eq
 80a6234:	f020 0001 	biceq.w	r0, r0, #1
 80a6238:	ea40 0003 	orr.w	r0, r0, r3
 80a623c:	4770      	bx	lr
 80a623e:	0049      	lsls	r1, r1, #1
 80a6240:	eb40 0000 	adc.w	r0, r0, r0
 80a6244:	3a01      	subs	r2, #1
 80a6246:	bf28      	it	cs
 80a6248:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a624c:	d2ed      	bcs.n	80a622a <__addsf3+0x92>
 80a624e:	fab0 fc80 	clz	ip, r0
 80a6252:	f1ac 0c08 	sub.w	ip, ip, #8
 80a6256:	ebb2 020c 	subs.w	r2, r2, ip
 80a625a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a625e:	bfaa      	itet	ge
 80a6260:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a6264:	4252      	neglt	r2, r2
 80a6266:	4318      	orrge	r0, r3
 80a6268:	bfbc      	itt	lt
 80a626a:	40d0      	lsrlt	r0, r2
 80a626c:	4318      	orrlt	r0, r3
 80a626e:	4770      	bx	lr
 80a6270:	f092 0f00 	teq	r2, #0
 80a6274:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a6278:	bf06      	itte	eq
 80a627a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a627e:	3201      	addeq	r2, #1
 80a6280:	3b01      	subne	r3, #1
 80a6282:	e7b5      	b.n	80a61f0 <__addsf3+0x58>
 80a6284:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6288:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a628c:	bf18      	it	ne
 80a628e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6292:	d021      	beq.n	80a62d8 <__addsf3+0x140>
 80a6294:	ea92 0f03 	teq	r2, r3
 80a6298:	d004      	beq.n	80a62a4 <__addsf3+0x10c>
 80a629a:	f092 0f00 	teq	r2, #0
 80a629e:	bf08      	it	eq
 80a62a0:	4608      	moveq	r0, r1
 80a62a2:	4770      	bx	lr
 80a62a4:	ea90 0f01 	teq	r0, r1
 80a62a8:	bf1c      	itt	ne
 80a62aa:	2000      	movne	r0, #0
 80a62ac:	4770      	bxne	lr
 80a62ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a62b2:	d104      	bne.n	80a62be <__addsf3+0x126>
 80a62b4:	0040      	lsls	r0, r0, #1
 80a62b6:	bf28      	it	cs
 80a62b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a62bc:	4770      	bx	lr
 80a62be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a62c2:	bf3c      	itt	cc
 80a62c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a62c8:	4770      	bxcc	lr
 80a62ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a62ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a62d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a62d6:	4770      	bx	lr
 80a62d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a62dc:	bf16      	itet	ne
 80a62de:	4608      	movne	r0, r1
 80a62e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a62e4:	4601      	movne	r1, r0
 80a62e6:	0242      	lsls	r2, r0, #9
 80a62e8:	bf06      	itte	eq
 80a62ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a62ee:	ea90 0f01 	teqeq	r0, r1
 80a62f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a62f6:	4770      	bx	lr

080a62f8 <__aeabi_ui2f>:
 80a62f8:	f04f 0300 	mov.w	r3, #0
 80a62fc:	e004      	b.n	80a6308 <__aeabi_i2f+0x8>
 80a62fe:	bf00      	nop

080a6300 <__aeabi_i2f>:
 80a6300:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a6304:	bf48      	it	mi
 80a6306:	4240      	negmi	r0, r0
 80a6308:	ea5f 0c00 	movs.w	ip, r0
 80a630c:	bf08      	it	eq
 80a630e:	4770      	bxeq	lr
 80a6310:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a6314:	4601      	mov	r1, r0
 80a6316:	f04f 0000 	mov.w	r0, #0
 80a631a:	e01c      	b.n	80a6356 <__aeabi_l2f+0x2a>

080a631c <__aeabi_ul2f>:
 80a631c:	ea50 0201 	orrs.w	r2, r0, r1
 80a6320:	bf08      	it	eq
 80a6322:	4770      	bxeq	lr
 80a6324:	f04f 0300 	mov.w	r3, #0
 80a6328:	e00a      	b.n	80a6340 <__aeabi_l2f+0x14>
 80a632a:	bf00      	nop

080a632c <__aeabi_l2f>:
 80a632c:	ea50 0201 	orrs.w	r2, r0, r1
 80a6330:	bf08      	it	eq
 80a6332:	4770      	bxeq	lr
 80a6334:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a6338:	d502      	bpl.n	80a6340 <__aeabi_l2f+0x14>
 80a633a:	4240      	negs	r0, r0
 80a633c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6340:	ea5f 0c01 	movs.w	ip, r1
 80a6344:	bf02      	ittt	eq
 80a6346:	4684      	moveq	ip, r0
 80a6348:	4601      	moveq	r1, r0
 80a634a:	2000      	moveq	r0, #0
 80a634c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a6350:	bf08      	it	eq
 80a6352:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a6356:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a635a:	fabc f28c 	clz	r2, ip
 80a635e:	3a08      	subs	r2, #8
 80a6360:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a6364:	db10      	blt.n	80a6388 <__aeabi_l2f+0x5c>
 80a6366:	fa01 fc02 	lsl.w	ip, r1, r2
 80a636a:	4463      	add	r3, ip
 80a636c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6370:	f1c2 0220 	rsb	r2, r2, #32
 80a6374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a6378:	fa20 f202 	lsr.w	r2, r0, r2
 80a637c:	eb43 0002 	adc.w	r0, r3, r2
 80a6380:	bf08      	it	eq
 80a6382:	f020 0001 	biceq.w	r0, r0, #1
 80a6386:	4770      	bx	lr
 80a6388:	f102 0220 	add.w	r2, r2, #32
 80a638c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6390:	f1c2 0220 	rsb	r2, r2, #32
 80a6394:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a6398:	fa21 f202 	lsr.w	r2, r1, r2
 80a639c:	eb43 0002 	adc.w	r0, r3, r2
 80a63a0:	bf08      	it	eq
 80a63a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a63a6:	4770      	bx	lr

080a63a8 <__aeabi_fmul>:
 80a63a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a63ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a63b0:	bf1e      	ittt	ne
 80a63b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a63b6:	ea92 0f0c 	teqne	r2, ip
 80a63ba:	ea93 0f0c 	teqne	r3, ip
 80a63be:	d06f      	beq.n	80a64a0 <__aeabi_fmul+0xf8>
 80a63c0:	441a      	add	r2, r3
 80a63c2:	ea80 0c01 	eor.w	ip, r0, r1
 80a63c6:	0240      	lsls	r0, r0, #9
 80a63c8:	bf18      	it	ne
 80a63ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a63ce:	d01e      	beq.n	80a640e <__aeabi_fmul+0x66>
 80a63d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a63d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a63d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a63dc:	fba0 3101 	umull	r3, r1, r0, r1
 80a63e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a63e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a63e8:	bf3e      	ittt	cc
 80a63ea:	0049      	lslcc	r1, r1, #1
 80a63ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a63f0:	005b      	lslcc	r3, r3, #1
 80a63f2:	ea40 0001 	orr.w	r0, r0, r1
 80a63f6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a63fa:	2afd      	cmp	r2, #253	; 0xfd
 80a63fc:	d81d      	bhi.n	80a643a <__aeabi_fmul+0x92>
 80a63fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a6402:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6406:	bf08      	it	eq
 80a6408:	f020 0001 	biceq.w	r0, r0, #1
 80a640c:	4770      	bx	lr
 80a640e:	f090 0f00 	teq	r0, #0
 80a6412:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6416:	bf08      	it	eq
 80a6418:	0249      	lsleq	r1, r1, #9
 80a641a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a641e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a6422:	3a7f      	subs	r2, #127	; 0x7f
 80a6424:	bfc2      	ittt	gt
 80a6426:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a642a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a642e:	4770      	bxgt	lr
 80a6430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6434:	f04f 0300 	mov.w	r3, #0
 80a6438:	3a01      	subs	r2, #1
 80a643a:	dc5d      	bgt.n	80a64f8 <__aeabi_fmul+0x150>
 80a643c:	f112 0f19 	cmn.w	r2, #25
 80a6440:	bfdc      	itt	le
 80a6442:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a6446:	4770      	bxle	lr
 80a6448:	f1c2 0200 	rsb	r2, r2, #0
 80a644c:	0041      	lsls	r1, r0, #1
 80a644e:	fa21 f102 	lsr.w	r1, r1, r2
 80a6452:	f1c2 0220 	rsb	r2, r2, #32
 80a6456:	fa00 fc02 	lsl.w	ip, r0, r2
 80a645a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a645e:	f140 0000 	adc.w	r0, r0, #0
 80a6462:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a6466:	bf08      	it	eq
 80a6468:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a646c:	4770      	bx	lr
 80a646e:	f092 0f00 	teq	r2, #0
 80a6472:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a6476:	bf02      	ittt	eq
 80a6478:	0040      	lsleq	r0, r0, #1
 80a647a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a647e:	3a01      	subeq	r2, #1
 80a6480:	d0f9      	beq.n	80a6476 <__aeabi_fmul+0xce>
 80a6482:	ea40 000c 	orr.w	r0, r0, ip
 80a6486:	f093 0f00 	teq	r3, #0
 80a648a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a648e:	bf02      	ittt	eq
 80a6490:	0049      	lsleq	r1, r1, #1
 80a6492:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a6496:	3b01      	subeq	r3, #1
 80a6498:	d0f9      	beq.n	80a648e <__aeabi_fmul+0xe6>
 80a649a:	ea41 010c 	orr.w	r1, r1, ip
 80a649e:	e78f      	b.n	80a63c0 <__aeabi_fmul+0x18>
 80a64a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a64a4:	ea92 0f0c 	teq	r2, ip
 80a64a8:	bf18      	it	ne
 80a64aa:	ea93 0f0c 	teqne	r3, ip
 80a64ae:	d00a      	beq.n	80a64c6 <__aeabi_fmul+0x11e>
 80a64b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a64b4:	bf18      	it	ne
 80a64b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a64ba:	d1d8      	bne.n	80a646e <__aeabi_fmul+0xc6>
 80a64bc:	ea80 0001 	eor.w	r0, r0, r1
 80a64c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a64c4:	4770      	bx	lr
 80a64c6:	f090 0f00 	teq	r0, #0
 80a64ca:	bf17      	itett	ne
 80a64cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a64d0:	4608      	moveq	r0, r1
 80a64d2:	f091 0f00 	teqne	r1, #0
 80a64d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a64da:	d014      	beq.n	80a6506 <__aeabi_fmul+0x15e>
 80a64dc:	ea92 0f0c 	teq	r2, ip
 80a64e0:	d101      	bne.n	80a64e6 <__aeabi_fmul+0x13e>
 80a64e2:	0242      	lsls	r2, r0, #9
 80a64e4:	d10f      	bne.n	80a6506 <__aeabi_fmul+0x15e>
 80a64e6:	ea93 0f0c 	teq	r3, ip
 80a64ea:	d103      	bne.n	80a64f4 <__aeabi_fmul+0x14c>
 80a64ec:	024b      	lsls	r3, r1, #9
 80a64ee:	bf18      	it	ne
 80a64f0:	4608      	movne	r0, r1
 80a64f2:	d108      	bne.n	80a6506 <__aeabi_fmul+0x15e>
 80a64f4:	ea80 0001 	eor.w	r0, r0, r1
 80a64f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a64fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6504:	4770      	bx	lr
 80a6506:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a650a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a650e:	4770      	bx	lr

080a6510 <__aeabi_fdiv>:
 80a6510:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6514:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6518:	bf1e      	ittt	ne
 80a651a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a651e:	ea92 0f0c 	teqne	r2, ip
 80a6522:	ea93 0f0c 	teqne	r3, ip
 80a6526:	d069      	beq.n	80a65fc <__aeabi_fdiv+0xec>
 80a6528:	eba2 0203 	sub.w	r2, r2, r3
 80a652c:	ea80 0c01 	eor.w	ip, r0, r1
 80a6530:	0249      	lsls	r1, r1, #9
 80a6532:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a6536:	d037      	beq.n	80a65a8 <__aeabi_fdiv+0x98>
 80a6538:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a653c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a6540:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a6544:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6548:	428b      	cmp	r3, r1
 80a654a:	bf38      	it	cc
 80a654c:	005b      	lslcc	r3, r3, #1
 80a654e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a6552:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a6556:	428b      	cmp	r3, r1
 80a6558:	bf24      	itt	cs
 80a655a:	1a5b      	subcs	r3, r3, r1
 80a655c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6560:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a6564:	bf24      	itt	cs
 80a6566:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a656a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a656e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a6572:	bf24      	itt	cs
 80a6574:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a6578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a657c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a6580:	bf24      	itt	cs
 80a6582:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a6586:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a658a:	011b      	lsls	r3, r3, #4
 80a658c:	bf18      	it	ne
 80a658e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a6592:	d1e0      	bne.n	80a6556 <__aeabi_fdiv+0x46>
 80a6594:	2afd      	cmp	r2, #253	; 0xfd
 80a6596:	f63f af50 	bhi.w	80a643a <__aeabi_fmul+0x92>
 80a659a:	428b      	cmp	r3, r1
 80a659c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a65a0:	bf08      	it	eq
 80a65a2:	f020 0001 	biceq.w	r0, r0, #1
 80a65a6:	4770      	bx	lr
 80a65a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a65ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a65b0:	327f      	adds	r2, #127	; 0x7f
 80a65b2:	bfc2      	ittt	gt
 80a65b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a65b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a65bc:	4770      	bxgt	lr
 80a65be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a65c2:	f04f 0300 	mov.w	r3, #0
 80a65c6:	3a01      	subs	r2, #1
 80a65c8:	e737      	b.n	80a643a <__aeabi_fmul+0x92>
 80a65ca:	f092 0f00 	teq	r2, #0
 80a65ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a65d2:	bf02      	ittt	eq
 80a65d4:	0040      	lsleq	r0, r0, #1
 80a65d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a65da:	3a01      	subeq	r2, #1
 80a65dc:	d0f9      	beq.n	80a65d2 <__aeabi_fdiv+0xc2>
 80a65de:	ea40 000c 	orr.w	r0, r0, ip
 80a65e2:	f093 0f00 	teq	r3, #0
 80a65e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a65ea:	bf02      	ittt	eq
 80a65ec:	0049      	lsleq	r1, r1, #1
 80a65ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a65f2:	3b01      	subeq	r3, #1
 80a65f4:	d0f9      	beq.n	80a65ea <__aeabi_fdiv+0xda>
 80a65f6:	ea41 010c 	orr.w	r1, r1, ip
 80a65fa:	e795      	b.n	80a6528 <__aeabi_fdiv+0x18>
 80a65fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6600:	ea92 0f0c 	teq	r2, ip
 80a6604:	d108      	bne.n	80a6618 <__aeabi_fdiv+0x108>
 80a6606:	0242      	lsls	r2, r0, #9
 80a6608:	f47f af7d 	bne.w	80a6506 <__aeabi_fmul+0x15e>
 80a660c:	ea93 0f0c 	teq	r3, ip
 80a6610:	f47f af70 	bne.w	80a64f4 <__aeabi_fmul+0x14c>
 80a6614:	4608      	mov	r0, r1
 80a6616:	e776      	b.n	80a6506 <__aeabi_fmul+0x15e>
 80a6618:	ea93 0f0c 	teq	r3, ip
 80a661c:	d104      	bne.n	80a6628 <__aeabi_fdiv+0x118>
 80a661e:	024b      	lsls	r3, r1, #9
 80a6620:	f43f af4c 	beq.w	80a64bc <__aeabi_fmul+0x114>
 80a6624:	4608      	mov	r0, r1
 80a6626:	e76e      	b.n	80a6506 <__aeabi_fmul+0x15e>
 80a6628:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a662c:	bf18      	it	ne
 80a662e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6632:	d1ca      	bne.n	80a65ca <__aeabi_fdiv+0xba>
 80a6634:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a6638:	f47f af5c 	bne.w	80a64f4 <__aeabi_fmul+0x14c>
 80a663c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a6640:	f47f af3c 	bne.w	80a64bc <__aeabi_fmul+0x114>
 80a6644:	e75f      	b.n	80a6506 <__aeabi_fmul+0x15e>
 80a6646:	bf00      	nop

080a6648 <__gesf2>:
 80a6648:	f04f 3cff 	mov.w	ip, #4294967295
 80a664c:	e006      	b.n	80a665c <__cmpsf2+0x4>
 80a664e:	bf00      	nop

080a6650 <__lesf2>:
 80a6650:	f04f 0c01 	mov.w	ip, #1
 80a6654:	e002      	b.n	80a665c <__cmpsf2+0x4>
 80a6656:	bf00      	nop

080a6658 <__cmpsf2>:
 80a6658:	f04f 0c01 	mov.w	ip, #1
 80a665c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6660:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6664:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a666c:	bf18      	it	ne
 80a666e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6672:	d011      	beq.n	80a6698 <__cmpsf2+0x40>
 80a6674:	b001      	add	sp, #4
 80a6676:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a667a:	bf18      	it	ne
 80a667c:	ea90 0f01 	teqne	r0, r1
 80a6680:	bf58      	it	pl
 80a6682:	ebb2 0003 	subspl.w	r0, r2, r3
 80a6686:	bf88      	it	hi
 80a6688:	17c8      	asrhi	r0, r1, #31
 80a668a:	bf38      	it	cc
 80a668c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a6690:	bf18      	it	ne
 80a6692:	f040 0001 	orrne.w	r0, r0, #1
 80a6696:	4770      	bx	lr
 80a6698:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a669c:	d102      	bne.n	80a66a4 <__cmpsf2+0x4c>
 80a669e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a66a2:	d105      	bne.n	80a66b0 <__cmpsf2+0x58>
 80a66a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a66a8:	d1e4      	bne.n	80a6674 <__cmpsf2+0x1c>
 80a66aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a66ae:	d0e1      	beq.n	80a6674 <__cmpsf2+0x1c>
 80a66b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a66b4:	4770      	bx	lr
 80a66b6:	bf00      	nop

080a66b8 <__aeabi_cfrcmple>:
 80a66b8:	4684      	mov	ip, r0
 80a66ba:	4608      	mov	r0, r1
 80a66bc:	4661      	mov	r1, ip
 80a66be:	e7ff      	b.n	80a66c0 <__aeabi_cfcmpeq>

080a66c0 <__aeabi_cfcmpeq>:
 80a66c0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a66c2:	f7ff ffc9 	bl	80a6658 <__cmpsf2>
 80a66c6:	2800      	cmp	r0, #0
 80a66c8:	bf48      	it	mi
 80a66ca:	f110 0f00 	cmnmi.w	r0, #0
 80a66ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a66d0 <__aeabi_fcmpeq>:
 80a66d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a66d4:	f7ff fff4 	bl	80a66c0 <__aeabi_cfcmpeq>
 80a66d8:	bf0c      	ite	eq
 80a66da:	2001      	moveq	r0, #1
 80a66dc:	2000      	movne	r0, #0
 80a66de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a66e2:	bf00      	nop

080a66e4 <__aeabi_fcmplt>:
 80a66e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a66e8:	f7ff ffea 	bl	80a66c0 <__aeabi_cfcmpeq>
 80a66ec:	bf34      	ite	cc
 80a66ee:	2001      	movcc	r0, #1
 80a66f0:	2000      	movcs	r0, #0
 80a66f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a66f6:	bf00      	nop

080a66f8 <__aeabi_fcmple>:
 80a66f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a66fc:	f7ff ffe0 	bl	80a66c0 <__aeabi_cfcmpeq>
 80a6700:	bf94      	ite	ls
 80a6702:	2001      	movls	r0, #1
 80a6704:	2000      	movhi	r0, #0
 80a6706:	f85d fb08 	ldr.w	pc, [sp], #8
 80a670a:	bf00      	nop

080a670c <__aeabi_fcmpge>:
 80a670c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6710:	f7ff ffd2 	bl	80a66b8 <__aeabi_cfrcmple>
 80a6714:	bf94      	ite	ls
 80a6716:	2001      	movls	r0, #1
 80a6718:	2000      	movhi	r0, #0
 80a671a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a671e:	bf00      	nop

080a6720 <__aeabi_fcmpgt>:
 80a6720:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6724:	f7ff ffc8 	bl	80a66b8 <__aeabi_cfrcmple>
 80a6728:	bf34      	ite	cc
 80a672a:	2001      	movcc	r0, #1
 80a672c:	2000      	movcs	r0, #0
 80a672e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6732:	bf00      	nop

080a6734 <__aeabi_f2iz>:
 80a6734:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6738:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a673c:	d30f      	bcc.n	80a675e <__aeabi_f2iz+0x2a>
 80a673e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a6742:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a6746:	d90d      	bls.n	80a6764 <__aeabi_f2iz+0x30>
 80a6748:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a674c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6750:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6754:	fa23 f002 	lsr.w	r0, r3, r2
 80a6758:	bf18      	it	ne
 80a675a:	4240      	negne	r0, r0
 80a675c:	4770      	bx	lr
 80a675e:	f04f 0000 	mov.w	r0, #0
 80a6762:	4770      	bx	lr
 80a6764:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a6768:	d101      	bne.n	80a676e <__aeabi_f2iz+0x3a>
 80a676a:	0242      	lsls	r2, r0, #9
 80a676c:	d105      	bne.n	80a677a <__aeabi_f2iz+0x46>
 80a676e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a6772:	bf08      	it	eq
 80a6774:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6778:	4770      	bx	lr
 80a677a:	f04f 0000 	mov.w	r0, #0
 80a677e:	4770      	bx	lr

080a6780 <__aeabi_f2lz>:
 80a6780:	b510      	push	{r4, lr}
 80a6782:	2100      	movs	r1, #0
 80a6784:	4604      	mov	r4, r0
 80a6786:	f7ff ffad 	bl	80a66e4 <__aeabi_fcmplt>
 80a678a:	b920      	cbnz	r0, 80a6796 <__aeabi_f2lz+0x16>
 80a678c:	4620      	mov	r0, r4
 80a678e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a6792:	f000 b809 	b.w	80a67a8 <__aeabi_f2ulz>
 80a6796:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a679a:	f000 f805 	bl	80a67a8 <__aeabi_f2ulz>
 80a679e:	4240      	negs	r0, r0
 80a67a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a67a4:	bd10      	pop	{r4, pc}
 80a67a6:	bf00      	nop

080a67a8 <__aeabi_f2ulz>:
 80a67a8:	b5d0      	push	{r4, r6, r7, lr}
 80a67aa:	f7ff fa15 	bl	80a5bd8 <__aeabi_f2d>
 80a67ae:	2200      	movs	r2, #0
 80a67b0:	4b0b      	ldr	r3, [pc, #44]	; (80a67e0 <__aeabi_f2ulz+0x38>)
 80a67b2:	4606      	mov	r6, r0
 80a67b4:	460f      	mov	r7, r1
 80a67b6:	f7ff fa67 	bl	80a5c88 <__aeabi_dmul>
 80a67ba:	f7ff fc77 	bl	80a60ac <__aeabi_d2uiz>
 80a67be:	4604      	mov	r4, r0
 80a67c0:	f7ff f9e8 	bl	80a5b94 <__aeabi_ui2d>
 80a67c4:	2200      	movs	r2, #0
 80a67c6:	4b07      	ldr	r3, [pc, #28]	; (80a67e4 <__aeabi_f2ulz+0x3c>)
 80a67c8:	f7ff fa5e 	bl	80a5c88 <__aeabi_dmul>
 80a67cc:	4602      	mov	r2, r0
 80a67ce:	460b      	mov	r3, r1
 80a67d0:	4630      	mov	r0, r6
 80a67d2:	4639      	mov	r1, r7
 80a67d4:	f7ff f8a0 	bl	80a5918 <__aeabi_dsub>
 80a67d8:	f7ff fc68 	bl	80a60ac <__aeabi_d2uiz>
 80a67dc:	4621      	mov	r1, r4
 80a67de:	bdd0      	pop	{r4, r6, r7, pc}
 80a67e0:	3df00000 	.word	0x3df00000
 80a67e4:	41f00000 	.word	0x41f00000

080a67e8 <__udivmoddi4>:
 80a67e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a67ec:	9e08      	ldr	r6, [sp, #32]
 80a67ee:	460d      	mov	r5, r1
 80a67f0:	4604      	mov	r4, r0
 80a67f2:	4688      	mov	r8, r1
 80a67f4:	2b00      	cmp	r3, #0
 80a67f6:	d14d      	bne.n	80a6894 <__udivmoddi4+0xac>
 80a67f8:	428a      	cmp	r2, r1
 80a67fa:	4694      	mov	ip, r2
 80a67fc:	d968      	bls.n	80a68d0 <__udivmoddi4+0xe8>
 80a67fe:	fab2 f282 	clz	r2, r2
 80a6802:	b152      	cbz	r2, 80a681a <__udivmoddi4+0x32>
 80a6804:	fa01 f302 	lsl.w	r3, r1, r2
 80a6808:	f1c2 0120 	rsb	r1, r2, #32
 80a680c:	fa20 f101 	lsr.w	r1, r0, r1
 80a6810:	fa0c fc02 	lsl.w	ip, ip, r2
 80a6814:	ea41 0803 	orr.w	r8, r1, r3
 80a6818:	4094      	lsls	r4, r2
 80a681a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80a681e:	fbb8 f7f1 	udiv	r7, r8, r1
 80a6822:	fa1f fe8c 	uxth.w	lr, ip
 80a6826:	fb01 8817 	mls	r8, r1, r7, r8
 80a682a:	fb07 f00e 	mul.w	r0, r7, lr
 80a682e:	0c23      	lsrs	r3, r4, #16
 80a6830:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a6834:	4298      	cmp	r0, r3
 80a6836:	d90a      	bls.n	80a684e <__udivmoddi4+0x66>
 80a6838:	eb1c 0303 	adds.w	r3, ip, r3
 80a683c:	f107 35ff 	add.w	r5, r7, #4294967295
 80a6840:	f080 811e 	bcs.w	80a6a80 <__udivmoddi4+0x298>
 80a6844:	4298      	cmp	r0, r3
 80a6846:	f240 811b 	bls.w	80a6a80 <__udivmoddi4+0x298>
 80a684a:	3f02      	subs	r7, #2
 80a684c:	4463      	add	r3, ip
 80a684e:	1a1b      	subs	r3, r3, r0
 80a6850:	fbb3 f0f1 	udiv	r0, r3, r1
 80a6854:	fb01 3310 	mls	r3, r1, r0, r3
 80a6858:	fb00 fe0e 	mul.w	lr, r0, lr
 80a685c:	b2a4      	uxth	r4, r4
 80a685e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80a6862:	45a6      	cmp	lr, r4
 80a6864:	d90a      	bls.n	80a687c <__udivmoddi4+0x94>
 80a6866:	eb1c 0404 	adds.w	r4, ip, r4
 80a686a:	f100 33ff 	add.w	r3, r0, #4294967295
 80a686e:	f080 8109 	bcs.w	80a6a84 <__udivmoddi4+0x29c>
 80a6872:	45a6      	cmp	lr, r4
 80a6874:	f240 8106 	bls.w	80a6a84 <__udivmoddi4+0x29c>
 80a6878:	4464      	add	r4, ip
 80a687a:	3802      	subs	r0, #2
 80a687c:	2100      	movs	r1, #0
 80a687e:	eba4 040e 	sub.w	r4, r4, lr
 80a6882:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80a6886:	b11e      	cbz	r6, 80a6890 <__udivmoddi4+0xa8>
 80a6888:	2300      	movs	r3, #0
 80a688a:	40d4      	lsrs	r4, r2
 80a688c:	e9c6 4300 	strd	r4, r3, [r6]
 80a6890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6894:	428b      	cmp	r3, r1
 80a6896:	d908      	bls.n	80a68aa <__udivmoddi4+0xc2>
 80a6898:	2e00      	cmp	r6, #0
 80a689a:	f000 80ee 	beq.w	80a6a7a <__udivmoddi4+0x292>
 80a689e:	2100      	movs	r1, #0
 80a68a0:	e9c6 0500 	strd	r0, r5, [r6]
 80a68a4:	4608      	mov	r0, r1
 80a68a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a68aa:	fab3 f183 	clz	r1, r3
 80a68ae:	2900      	cmp	r1, #0
 80a68b0:	d14a      	bne.n	80a6948 <__udivmoddi4+0x160>
 80a68b2:	42ab      	cmp	r3, r5
 80a68b4:	d302      	bcc.n	80a68bc <__udivmoddi4+0xd4>
 80a68b6:	4282      	cmp	r2, r0
 80a68b8:	f200 80fc 	bhi.w	80a6ab4 <__udivmoddi4+0x2cc>
 80a68bc:	1a84      	subs	r4, r0, r2
 80a68be:	eb65 0303 	sbc.w	r3, r5, r3
 80a68c2:	2001      	movs	r0, #1
 80a68c4:	4698      	mov	r8, r3
 80a68c6:	2e00      	cmp	r6, #0
 80a68c8:	d0e2      	beq.n	80a6890 <__udivmoddi4+0xa8>
 80a68ca:	e9c6 4800 	strd	r4, r8, [r6]
 80a68ce:	e7df      	b.n	80a6890 <__udivmoddi4+0xa8>
 80a68d0:	b902      	cbnz	r2, 80a68d4 <__udivmoddi4+0xec>
 80a68d2:	deff      	udf	#255	; 0xff
 80a68d4:	fab2 f282 	clz	r2, r2
 80a68d8:	2a00      	cmp	r2, #0
 80a68da:	f040 8091 	bne.w	80a6a00 <__udivmoddi4+0x218>
 80a68de:	eba1 000c 	sub.w	r0, r1, ip
 80a68e2:	2101      	movs	r1, #1
 80a68e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a68e8:	fa1f fe8c 	uxth.w	lr, ip
 80a68ec:	fbb0 f3f7 	udiv	r3, r0, r7
 80a68f0:	fb07 0013 	mls	r0, r7, r3, r0
 80a68f4:	0c25      	lsrs	r5, r4, #16
 80a68f6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a68fa:	fb0e f003 	mul.w	r0, lr, r3
 80a68fe:	42a8      	cmp	r0, r5
 80a6900:	d908      	bls.n	80a6914 <__udivmoddi4+0x12c>
 80a6902:	eb1c 0505 	adds.w	r5, ip, r5
 80a6906:	f103 38ff 	add.w	r8, r3, #4294967295
 80a690a:	d202      	bcs.n	80a6912 <__udivmoddi4+0x12a>
 80a690c:	42a8      	cmp	r0, r5
 80a690e:	f200 80ce 	bhi.w	80a6aae <__udivmoddi4+0x2c6>
 80a6912:	4643      	mov	r3, r8
 80a6914:	1a2d      	subs	r5, r5, r0
 80a6916:	fbb5 f0f7 	udiv	r0, r5, r7
 80a691a:	fb07 5510 	mls	r5, r7, r0, r5
 80a691e:	fb0e fe00 	mul.w	lr, lr, r0
 80a6922:	b2a4      	uxth	r4, r4
 80a6924:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a6928:	45a6      	cmp	lr, r4
 80a692a:	d908      	bls.n	80a693e <__udivmoddi4+0x156>
 80a692c:	eb1c 0404 	adds.w	r4, ip, r4
 80a6930:	f100 35ff 	add.w	r5, r0, #4294967295
 80a6934:	d202      	bcs.n	80a693c <__udivmoddi4+0x154>
 80a6936:	45a6      	cmp	lr, r4
 80a6938:	f200 80b6 	bhi.w	80a6aa8 <__udivmoddi4+0x2c0>
 80a693c:	4628      	mov	r0, r5
 80a693e:	eba4 040e 	sub.w	r4, r4, lr
 80a6942:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a6946:	e79e      	b.n	80a6886 <__udivmoddi4+0x9e>
 80a6948:	f1c1 0720 	rsb	r7, r1, #32
 80a694c:	408b      	lsls	r3, r1
 80a694e:	fa22 fc07 	lsr.w	ip, r2, r7
 80a6952:	ea4c 0c03 	orr.w	ip, ip, r3
 80a6956:	fa25 fa07 	lsr.w	sl, r5, r7
 80a695a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a695e:	fbba f8f9 	udiv	r8, sl, r9
 80a6962:	fa20 f307 	lsr.w	r3, r0, r7
 80a6966:	fb09 aa18 	mls	sl, r9, r8, sl
 80a696a:	408d      	lsls	r5, r1
 80a696c:	fa1f fe8c 	uxth.w	lr, ip
 80a6970:	431d      	orrs	r5, r3
 80a6972:	fa00 f301 	lsl.w	r3, r0, r1
 80a6976:	fb08 f00e 	mul.w	r0, r8, lr
 80a697a:	0c2c      	lsrs	r4, r5, #16
 80a697c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80a6980:	42a0      	cmp	r0, r4
 80a6982:	fa02 f201 	lsl.w	r2, r2, r1
 80a6986:	d90b      	bls.n	80a69a0 <__udivmoddi4+0x1b8>
 80a6988:	eb1c 0404 	adds.w	r4, ip, r4
 80a698c:	f108 3aff 	add.w	sl, r8, #4294967295
 80a6990:	f080 8088 	bcs.w	80a6aa4 <__udivmoddi4+0x2bc>
 80a6994:	42a0      	cmp	r0, r4
 80a6996:	f240 8085 	bls.w	80a6aa4 <__udivmoddi4+0x2bc>
 80a699a:	f1a8 0802 	sub.w	r8, r8, #2
 80a699e:	4464      	add	r4, ip
 80a69a0:	1a24      	subs	r4, r4, r0
 80a69a2:	fbb4 f0f9 	udiv	r0, r4, r9
 80a69a6:	fb09 4410 	mls	r4, r9, r0, r4
 80a69aa:	fb00 fe0e 	mul.w	lr, r0, lr
 80a69ae:	b2ad      	uxth	r5, r5
 80a69b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a69b4:	45a6      	cmp	lr, r4
 80a69b6:	d908      	bls.n	80a69ca <__udivmoddi4+0x1e2>
 80a69b8:	eb1c 0404 	adds.w	r4, ip, r4
 80a69bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80a69c0:	d26c      	bcs.n	80a6a9c <__udivmoddi4+0x2b4>
 80a69c2:	45a6      	cmp	lr, r4
 80a69c4:	d96a      	bls.n	80a6a9c <__udivmoddi4+0x2b4>
 80a69c6:	3802      	subs	r0, #2
 80a69c8:	4464      	add	r4, ip
 80a69ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80a69ce:	fba0 9502 	umull	r9, r5, r0, r2
 80a69d2:	eba4 040e 	sub.w	r4, r4, lr
 80a69d6:	42ac      	cmp	r4, r5
 80a69d8:	46c8      	mov	r8, r9
 80a69da:	46ae      	mov	lr, r5
 80a69dc:	d356      	bcc.n	80a6a8c <__udivmoddi4+0x2a4>
 80a69de:	d053      	beq.n	80a6a88 <__udivmoddi4+0x2a0>
 80a69e0:	2e00      	cmp	r6, #0
 80a69e2:	d069      	beq.n	80a6ab8 <__udivmoddi4+0x2d0>
 80a69e4:	ebb3 0208 	subs.w	r2, r3, r8
 80a69e8:	eb64 040e 	sbc.w	r4, r4, lr
 80a69ec:	fa22 f301 	lsr.w	r3, r2, r1
 80a69f0:	fa04 f707 	lsl.w	r7, r4, r7
 80a69f4:	431f      	orrs	r7, r3
 80a69f6:	40cc      	lsrs	r4, r1
 80a69f8:	e9c6 7400 	strd	r7, r4, [r6]
 80a69fc:	2100      	movs	r1, #0
 80a69fe:	e747      	b.n	80a6890 <__udivmoddi4+0xa8>
 80a6a00:	fa0c fc02 	lsl.w	ip, ip, r2
 80a6a04:	f1c2 0120 	rsb	r1, r2, #32
 80a6a08:	fa25 f301 	lsr.w	r3, r5, r1
 80a6a0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a6a10:	fa20 f101 	lsr.w	r1, r0, r1
 80a6a14:	4095      	lsls	r5, r2
 80a6a16:	430d      	orrs	r5, r1
 80a6a18:	fbb3 f1f7 	udiv	r1, r3, r7
 80a6a1c:	fb07 3311 	mls	r3, r7, r1, r3
 80a6a20:	fa1f fe8c 	uxth.w	lr, ip
 80a6a24:	0c28      	lsrs	r0, r5, #16
 80a6a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a6a2a:	fb01 f30e 	mul.w	r3, r1, lr
 80a6a2e:	4283      	cmp	r3, r0
 80a6a30:	fa04 f402 	lsl.w	r4, r4, r2
 80a6a34:	d908      	bls.n	80a6a48 <__udivmoddi4+0x260>
 80a6a36:	eb1c 0000 	adds.w	r0, ip, r0
 80a6a3a:	f101 38ff 	add.w	r8, r1, #4294967295
 80a6a3e:	d22f      	bcs.n	80a6aa0 <__udivmoddi4+0x2b8>
 80a6a40:	4283      	cmp	r3, r0
 80a6a42:	d92d      	bls.n	80a6aa0 <__udivmoddi4+0x2b8>
 80a6a44:	3902      	subs	r1, #2
 80a6a46:	4460      	add	r0, ip
 80a6a48:	1ac0      	subs	r0, r0, r3
 80a6a4a:	fbb0 f3f7 	udiv	r3, r0, r7
 80a6a4e:	fb07 0013 	mls	r0, r7, r3, r0
 80a6a52:	b2ad      	uxth	r5, r5
 80a6a54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a6a58:	fb03 f00e 	mul.w	r0, r3, lr
 80a6a5c:	42a8      	cmp	r0, r5
 80a6a5e:	d908      	bls.n	80a6a72 <__udivmoddi4+0x28a>
 80a6a60:	eb1c 0505 	adds.w	r5, ip, r5
 80a6a64:	f103 38ff 	add.w	r8, r3, #4294967295
 80a6a68:	d216      	bcs.n	80a6a98 <__udivmoddi4+0x2b0>
 80a6a6a:	42a8      	cmp	r0, r5
 80a6a6c:	d914      	bls.n	80a6a98 <__udivmoddi4+0x2b0>
 80a6a6e:	3b02      	subs	r3, #2
 80a6a70:	4465      	add	r5, ip
 80a6a72:	1a28      	subs	r0, r5, r0
 80a6a74:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80a6a78:	e738      	b.n	80a68ec <__udivmoddi4+0x104>
 80a6a7a:	4631      	mov	r1, r6
 80a6a7c:	4630      	mov	r0, r6
 80a6a7e:	e707      	b.n	80a6890 <__udivmoddi4+0xa8>
 80a6a80:	462f      	mov	r7, r5
 80a6a82:	e6e4      	b.n	80a684e <__udivmoddi4+0x66>
 80a6a84:	4618      	mov	r0, r3
 80a6a86:	e6f9      	b.n	80a687c <__udivmoddi4+0x94>
 80a6a88:	454b      	cmp	r3, r9
 80a6a8a:	d2a9      	bcs.n	80a69e0 <__udivmoddi4+0x1f8>
 80a6a8c:	ebb9 0802 	subs.w	r8, r9, r2
 80a6a90:	eb65 0e0c 	sbc.w	lr, r5, ip
 80a6a94:	3801      	subs	r0, #1
 80a6a96:	e7a3      	b.n	80a69e0 <__udivmoddi4+0x1f8>
 80a6a98:	4643      	mov	r3, r8
 80a6a9a:	e7ea      	b.n	80a6a72 <__udivmoddi4+0x28a>
 80a6a9c:	4628      	mov	r0, r5
 80a6a9e:	e794      	b.n	80a69ca <__udivmoddi4+0x1e2>
 80a6aa0:	4641      	mov	r1, r8
 80a6aa2:	e7d1      	b.n	80a6a48 <__udivmoddi4+0x260>
 80a6aa4:	46d0      	mov	r8, sl
 80a6aa6:	e77b      	b.n	80a69a0 <__udivmoddi4+0x1b8>
 80a6aa8:	4464      	add	r4, ip
 80a6aaa:	3802      	subs	r0, #2
 80a6aac:	e747      	b.n	80a693e <__udivmoddi4+0x156>
 80a6aae:	3b02      	subs	r3, #2
 80a6ab0:	4465      	add	r5, ip
 80a6ab2:	e72f      	b.n	80a6914 <__udivmoddi4+0x12c>
 80a6ab4:	4608      	mov	r0, r1
 80a6ab6:	e706      	b.n	80a68c6 <__udivmoddi4+0xde>
 80a6ab8:	4631      	mov	r1, r6
 80a6aba:	e6e9      	b.n	80a6890 <__udivmoddi4+0xa8>

080a6abc <__aeabi_idiv0>:
 80a6abc:	4770      	bx	lr
 80a6abe:	bf00      	nop

080a6ac0 <atexit>:
 80a6ac0:	2300      	movs	r3, #0
 80a6ac2:	4601      	mov	r1, r0
 80a6ac4:	461a      	mov	r2, r3
 80a6ac6:	4618      	mov	r0, r3
 80a6ac8:	f000 bcd4 	b.w	80a7474 <__register_exitproc>

080a6acc <atoi>:
 80a6acc:	220a      	movs	r2, #10
 80a6ace:	2100      	movs	r1, #0
 80a6ad0:	f000 ba12 	b.w	80a6ef8 <strtol>

080a6ad4 <atol>:
 80a6ad4:	220a      	movs	r2, #10
 80a6ad6:	2100      	movs	r1, #0
 80a6ad8:	f000 ba0e 	b.w	80a6ef8 <strtol>

080a6adc <localtime_r>:
 80a6adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6ae0:	460c      	mov	r4, r1
 80a6ae2:	4680      	mov	r8, r0
 80a6ae4:	f000 fd6e 	bl	80a75c4 <__gettzinfo>
 80a6ae8:	4621      	mov	r1, r4
 80a6aea:	4605      	mov	r5, r0
 80a6aec:	4640      	mov	r0, r8
 80a6aee:	f000 fd6d 	bl	80a75cc <gmtime_r>
 80a6af2:	6943      	ldr	r3, [r0, #20]
 80a6af4:	4604      	mov	r4, r0
 80a6af6:	0799      	lsls	r1, r3, #30
 80a6af8:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80a6afc:	d105      	bne.n	80a6b0a <localtime_r+0x2e>
 80a6afe:	2264      	movs	r2, #100	; 0x64
 80a6b00:	fb97 f3f2 	sdiv	r3, r7, r2
 80a6b04:	fb02 7313 	mls	r3, r2, r3, r7
 80a6b08:	bb73      	cbnz	r3, 80a6b68 <localtime_r+0x8c>
 80a6b0a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6b0e:	fb97 f6f3 	sdiv	r6, r7, r3
 80a6b12:	fb03 7616 	mls	r6, r3, r6, r7
 80a6b16:	fab6 f386 	clz	r3, r6
 80a6b1a:	095b      	lsrs	r3, r3, #5
 80a6b1c:	2230      	movs	r2, #48	; 0x30
 80a6b1e:	4e66      	ldr	r6, [pc, #408]	; (80a6cb8 <localtime_r+0x1dc>)
 80a6b20:	fb02 6603 	mla	r6, r2, r3, r6
 80a6b24:	f000 fb12 	bl	80a714c <__tz_lock>
 80a6b28:	f000 fb1c 	bl	80a7164 <_tzset_unlocked>
 80a6b2c:	4b63      	ldr	r3, [pc, #396]	; (80a6cbc <localtime_r+0x1e0>)
 80a6b2e:	681b      	ldr	r3, [r3, #0]
 80a6b30:	b34b      	cbz	r3, 80a6b86 <localtime_r+0xaa>
 80a6b32:	686b      	ldr	r3, [r5, #4]
 80a6b34:	42bb      	cmp	r3, r7
 80a6b36:	d119      	bne.n	80a6b6c <localtime_r+0x90>
 80a6b38:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a6b3c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80a6b40:	682f      	ldr	r7, [r5, #0]
 80a6b42:	b9df      	cbnz	r7, 80a6b7c <localtime_r+0xa0>
 80a6b44:	4282      	cmp	r2, r0
 80a6b46:	eb73 0101 	sbcs.w	r1, r3, r1
 80a6b4a:	da23      	bge.n	80a6b94 <localtime_r+0xb8>
 80a6b4c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a6b50:	4282      	cmp	r2, r0
 80a6b52:	eb73 0701 	sbcs.w	r7, r3, r1
 80a6b56:	bfb4      	ite	lt
 80a6b58:	2701      	movlt	r7, #1
 80a6b5a:	2700      	movge	r7, #0
 80a6b5c:	4282      	cmp	r2, r0
 80a6b5e:	418b      	sbcs	r3, r1
 80a6b60:	6227      	str	r7, [r4, #32]
 80a6b62:	db19      	blt.n	80a6b98 <localtime_r+0xbc>
 80a6b64:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a6b66:	e018      	b.n	80a6b9a <localtime_r+0xbe>
 80a6b68:	2301      	movs	r3, #1
 80a6b6a:	e7d7      	b.n	80a6b1c <localtime_r+0x40>
 80a6b6c:	4638      	mov	r0, r7
 80a6b6e:	f000 fa49 	bl	80a7004 <__tzcalc_limits>
 80a6b72:	2800      	cmp	r0, #0
 80a6b74:	d1e0      	bne.n	80a6b38 <localtime_r+0x5c>
 80a6b76:	f04f 33ff 	mov.w	r3, #4294967295
 80a6b7a:	e004      	b.n	80a6b86 <localtime_r+0xaa>
 80a6b7c:	4282      	cmp	r2, r0
 80a6b7e:	eb73 0101 	sbcs.w	r1, r3, r1
 80a6b82:	da02      	bge.n	80a6b8a <localtime_r+0xae>
 80a6b84:	2300      	movs	r3, #0
 80a6b86:	6223      	str	r3, [r4, #32]
 80a6b88:	e7ec      	b.n	80a6b64 <localtime_r+0x88>
 80a6b8a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a6b8e:	4282      	cmp	r2, r0
 80a6b90:	418b      	sbcs	r3, r1
 80a6b92:	daf7      	bge.n	80a6b84 <localtime_r+0xa8>
 80a6b94:	2301      	movs	r3, #1
 80a6b96:	6223      	str	r3, [r4, #32]
 80a6b98:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a6b9a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80a6b9e:	fb93 f5f2 	sdiv	r5, r3, r2
 80a6ba2:	203c      	movs	r0, #60	; 0x3c
 80a6ba4:	fb02 3315 	mls	r3, r2, r5, r3
 80a6ba8:	fb93 f2f0 	sdiv	r2, r3, r0
 80a6bac:	fb00 3012 	mls	r0, r0, r2, r3
 80a6bb0:	6861      	ldr	r1, [r4, #4]
 80a6bb2:	6823      	ldr	r3, [r4, #0]
 80a6bb4:	1a89      	subs	r1, r1, r2
 80a6bb6:	68a2      	ldr	r2, [r4, #8]
 80a6bb8:	1a1b      	subs	r3, r3, r0
 80a6bba:	1b52      	subs	r2, r2, r5
 80a6bbc:	2b3b      	cmp	r3, #59	; 0x3b
 80a6bbe:	6023      	str	r3, [r4, #0]
 80a6bc0:	6061      	str	r1, [r4, #4]
 80a6bc2:	60a2      	str	r2, [r4, #8]
 80a6bc4:	dd34      	ble.n	80a6c30 <localtime_r+0x154>
 80a6bc6:	3101      	adds	r1, #1
 80a6bc8:	6061      	str	r1, [r4, #4]
 80a6bca:	3b3c      	subs	r3, #60	; 0x3c
 80a6bcc:	6023      	str	r3, [r4, #0]
 80a6bce:	6863      	ldr	r3, [r4, #4]
 80a6bd0:	2b3b      	cmp	r3, #59	; 0x3b
 80a6bd2:	dd33      	ble.n	80a6c3c <localtime_r+0x160>
 80a6bd4:	3201      	adds	r2, #1
 80a6bd6:	60a2      	str	r2, [r4, #8]
 80a6bd8:	3b3c      	subs	r3, #60	; 0x3c
 80a6bda:	6063      	str	r3, [r4, #4]
 80a6bdc:	68a3      	ldr	r3, [r4, #8]
 80a6bde:	2b17      	cmp	r3, #23
 80a6be0:	dd32      	ble.n	80a6c48 <localtime_r+0x16c>
 80a6be2:	69e2      	ldr	r2, [r4, #28]
 80a6be4:	3b18      	subs	r3, #24
 80a6be6:	3201      	adds	r2, #1
 80a6be8:	61e2      	str	r2, [r4, #28]
 80a6bea:	69a2      	ldr	r2, [r4, #24]
 80a6bec:	60a3      	str	r3, [r4, #8]
 80a6bee:	3201      	adds	r2, #1
 80a6bf0:	2a06      	cmp	r2, #6
 80a6bf2:	bfc8      	it	gt
 80a6bf4:	2200      	movgt	r2, #0
 80a6bf6:	61a2      	str	r2, [r4, #24]
 80a6bf8:	68e2      	ldr	r2, [r4, #12]
 80a6bfa:	6923      	ldr	r3, [r4, #16]
 80a6bfc:	3201      	adds	r2, #1
 80a6bfe:	60e2      	str	r2, [r4, #12]
 80a6c00:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80a6c04:	428a      	cmp	r2, r1
 80a6c06:	dd0e      	ble.n	80a6c26 <localtime_r+0x14a>
 80a6c08:	2b0b      	cmp	r3, #11
 80a6c0a:	eba2 0201 	sub.w	r2, r2, r1
 80a6c0e:	60e2      	str	r2, [r4, #12]
 80a6c10:	f103 0201 	add.w	r2, r3, #1
 80a6c14:	bf05      	ittet	eq
 80a6c16:	2200      	moveq	r2, #0
 80a6c18:	6963      	ldreq	r3, [r4, #20]
 80a6c1a:	6122      	strne	r2, [r4, #16]
 80a6c1c:	3301      	addeq	r3, #1
 80a6c1e:	bf02      	ittt	eq
 80a6c20:	6122      	streq	r2, [r4, #16]
 80a6c22:	6163      	streq	r3, [r4, #20]
 80a6c24:	61e2      	streq	r2, [r4, #28]
 80a6c26:	f000 fa97 	bl	80a7158 <__tz_unlock>
 80a6c2a:	4620      	mov	r0, r4
 80a6c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6c30:	2b00      	cmp	r3, #0
 80a6c32:	dacc      	bge.n	80a6bce <localtime_r+0xf2>
 80a6c34:	3901      	subs	r1, #1
 80a6c36:	6061      	str	r1, [r4, #4]
 80a6c38:	333c      	adds	r3, #60	; 0x3c
 80a6c3a:	e7c7      	b.n	80a6bcc <localtime_r+0xf0>
 80a6c3c:	2b00      	cmp	r3, #0
 80a6c3e:	dacd      	bge.n	80a6bdc <localtime_r+0x100>
 80a6c40:	3a01      	subs	r2, #1
 80a6c42:	60a2      	str	r2, [r4, #8]
 80a6c44:	333c      	adds	r3, #60	; 0x3c
 80a6c46:	e7c8      	b.n	80a6bda <localtime_r+0xfe>
 80a6c48:	2b00      	cmp	r3, #0
 80a6c4a:	daec      	bge.n	80a6c26 <localtime_r+0x14a>
 80a6c4c:	69e2      	ldr	r2, [r4, #28]
 80a6c4e:	3318      	adds	r3, #24
 80a6c50:	3a01      	subs	r2, #1
 80a6c52:	61e2      	str	r2, [r4, #28]
 80a6c54:	69a2      	ldr	r2, [r4, #24]
 80a6c56:	60a3      	str	r3, [r4, #8]
 80a6c58:	3a01      	subs	r2, #1
 80a6c5a:	bf48      	it	mi
 80a6c5c:	2206      	movmi	r2, #6
 80a6c5e:	61a2      	str	r2, [r4, #24]
 80a6c60:	68e2      	ldr	r2, [r4, #12]
 80a6c62:	3a01      	subs	r2, #1
 80a6c64:	60e2      	str	r2, [r4, #12]
 80a6c66:	2a00      	cmp	r2, #0
 80a6c68:	d1dd      	bne.n	80a6c26 <localtime_r+0x14a>
 80a6c6a:	6923      	ldr	r3, [r4, #16]
 80a6c6c:	3b01      	subs	r3, #1
 80a6c6e:	d405      	bmi.n	80a6c7c <localtime_r+0x1a0>
 80a6c70:	6123      	str	r3, [r4, #16]
 80a6c72:	6923      	ldr	r3, [r4, #16]
 80a6c74:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80a6c78:	60e3      	str	r3, [r4, #12]
 80a6c7a:	e7d4      	b.n	80a6c26 <localtime_r+0x14a>
 80a6c7c:	230b      	movs	r3, #11
 80a6c7e:	6123      	str	r3, [r4, #16]
 80a6c80:	6963      	ldr	r3, [r4, #20]
 80a6c82:	1e5a      	subs	r2, r3, #1
 80a6c84:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a6c88:	6162      	str	r2, [r4, #20]
 80a6c8a:	079a      	lsls	r2, r3, #30
 80a6c8c:	d105      	bne.n	80a6c9a <localtime_r+0x1be>
 80a6c8e:	2164      	movs	r1, #100	; 0x64
 80a6c90:	fb93 f2f1 	sdiv	r2, r3, r1
 80a6c94:	fb01 3212 	mls	r2, r1, r2, r3
 80a6c98:	b962      	cbnz	r2, 80a6cb4 <localtime_r+0x1d8>
 80a6c9a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6c9e:	fb93 f1f2 	sdiv	r1, r3, r2
 80a6ca2:	fb02 3311 	mls	r3, r2, r1, r3
 80a6ca6:	fab3 f383 	clz	r3, r3
 80a6caa:	095b      	lsrs	r3, r3, #5
 80a6cac:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a6cb0:	61e3      	str	r3, [r4, #28]
 80a6cb2:	e7de      	b.n	80a6c72 <localtime_r+0x196>
 80a6cb4:	2301      	movs	r3, #1
 80a6cb6:	e7f9      	b.n	80a6cac <localtime_r+0x1d0>
 80a6cb8:	080a91a4 	.word	0x080a91a4
 80a6cbc:	20000540 	.word	0x20000540

080a6cc0 <memcpy>:
 80a6cc0:	440a      	add	r2, r1
 80a6cc2:	4291      	cmp	r1, r2
 80a6cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 80a6cc8:	d100      	bne.n	80a6ccc <memcpy+0xc>
 80a6cca:	4770      	bx	lr
 80a6ccc:	b510      	push	{r4, lr}
 80a6cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6cd2:	4291      	cmp	r1, r2
 80a6cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6cd8:	d1f9      	bne.n	80a6cce <memcpy+0xe>
 80a6cda:	bd10      	pop	{r4, pc}

080a6cdc <memset>:
 80a6cdc:	4603      	mov	r3, r0
 80a6cde:	4402      	add	r2, r0
 80a6ce0:	4293      	cmp	r3, r2
 80a6ce2:	d100      	bne.n	80a6ce6 <memset+0xa>
 80a6ce4:	4770      	bx	lr
 80a6ce6:	f803 1b01 	strb.w	r1, [r3], #1
 80a6cea:	e7f9      	b.n	80a6ce0 <memset+0x4>

080a6cec <srand>:
 80a6cec:	b538      	push	{r3, r4, r5, lr}
 80a6cee:	4b10      	ldr	r3, [pc, #64]	; (80a6d30 <srand+0x44>)
 80a6cf0:	4604      	mov	r4, r0
 80a6cf2:	681d      	ldr	r5, [r3, #0]
 80a6cf4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6cf6:	b9b3      	cbnz	r3, 80a6d26 <srand+0x3a>
 80a6cf8:	2018      	movs	r0, #24
 80a6cfa:	f7fc ff63 	bl	80a3bc4 <malloc>
 80a6cfe:	4602      	mov	r2, r0
 80a6d00:	63a8      	str	r0, [r5, #56]	; 0x38
 80a6d02:	b920      	cbnz	r0, 80a6d0e <srand+0x22>
 80a6d04:	2142      	movs	r1, #66	; 0x42
 80a6d06:	4b0b      	ldr	r3, [pc, #44]	; (80a6d34 <srand+0x48>)
 80a6d08:	480b      	ldr	r0, [pc, #44]	; (80a6d38 <srand+0x4c>)
 80a6d0a:	f7fc ffab 	bl	80a3c64 <__assert_func>
 80a6d0e:	490b      	ldr	r1, [pc, #44]	; (80a6d3c <srand+0x50>)
 80a6d10:	4b0b      	ldr	r3, [pc, #44]	; (80a6d40 <srand+0x54>)
 80a6d12:	e9c0 1300 	strd	r1, r3, [r0]
 80a6d16:	4b0b      	ldr	r3, [pc, #44]	; (80a6d44 <srand+0x58>)
 80a6d18:	2100      	movs	r1, #0
 80a6d1a:	6083      	str	r3, [r0, #8]
 80a6d1c:	230b      	movs	r3, #11
 80a6d1e:	8183      	strh	r3, [r0, #12]
 80a6d20:	2001      	movs	r0, #1
 80a6d22:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a6d26:	2200      	movs	r2, #0
 80a6d28:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6d2a:	611c      	str	r4, [r3, #16]
 80a6d2c:	615a      	str	r2, [r3, #20]
 80a6d2e:	bd38      	pop	{r3, r4, r5, pc}
 80a6d30:	20000080 	.word	0x20000080
 80a6d34:	080a9204 	.word	0x080a9204
 80a6d38:	080a921b 	.word	0x080a921b
 80a6d3c:	abcd330e 	.word	0xabcd330e
 80a6d40:	e66d1234 	.word	0xe66d1234
 80a6d44:	0005deec 	.word	0x0005deec

080a6d48 <strcmp>:
 80a6d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6d50:	2a01      	cmp	r2, #1
 80a6d52:	bf28      	it	cs
 80a6d54:	429a      	cmpcs	r2, r3
 80a6d56:	d0f7      	beq.n	80a6d48 <strcmp>
 80a6d58:	1ad0      	subs	r0, r2, r3
 80a6d5a:	4770      	bx	lr

080a6d5c <strcpy>:
 80a6d5c:	4603      	mov	r3, r0
 80a6d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6d62:	f803 2b01 	strb.w	r2, [r3], #1
 80a6d66:	2a00      	cmp	r2, #0
 80a6d68:	d1f9      	bne.n	80a6d5e <strcpy+0x2>
 80a6d6a:	4770      	bx	lr

080a6d6c <strdup>:
 80a6d6c:	4b02      	ldr	r3, [pc, #8]	; (80a6d78 <strdup+0xc>)
 80a6d6e:	4601      	mov	r1, r0
 80a6d70:	6818      	ldr	r0, [r3, #0]
 80a6d72:	f000 b803 	b.w	80a6d7c <_strdup_r>
 80a6d76:	bf00      	nop
 80a6d78:	20000080 	.word	0x20000080

080a6d7c <_strdup_r>:
 80a6d7c:	b570      	push	{r4, r5, r6, lr}
 80a6d7e:	4604      	mov	r4, r0
 80a6d80:	4608      	mov	r0, r1
 80a6d82:	460d      	mov	r5, r1
 80a6d84:	f000 f80d 	bl	80a6da2 <strlen>
 80a6d88:	1c46      	adds	r6, r0, #1
 80a6d8a:	4631      	mov	r1, r6
 80a6d8c:	4620      	mov	r0, r4
 80a6d8e:	f7fc ff59 	bl	80a3c44 <_malloc_r>
 80a6d92:	4604      	mov	r4, r0
 80a6d94:	b118      	cbz	r0, 80a6d9e <_strdup_r+0x22>
 80a6d96:	4632      	mov	r2, r6
 80a6d98:	4629      	mov	r1, r5
 80a6d9a:	f7ff ff91 	bl	80a6cc0 <memcpy>
 80a6d9e:	4620      	mov	r0, r4
 80a6da0:	bd70      	pop	{r4, r5, r6, pc}

080a6da2 <strlen>:
 80a6da2:	4603      	mov	r3, r0
 80a6da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6da8:	2a00      	cmp	r2, #0
 80a6daa:	d1fb      	bne.n	80a6da4 <strlen+0x2>
 80a6dac:	1a18      	subs	r0, r3, r0
 80a6dae:	3801      	subs	r0, #1
 80a6db0:	4770      	bx	lr

080a6db2 <strncmp>:
 80a6db2:	4603      	mov	r3, r0
 80a6db4:	b510      	push	{r4, lr}
 80a6db6:	b172      	cbz	r2, 80a6dd6 <strncmp+0x24>
 80a6db8:	3901      	subs	r1, #1
 80a6dba:	1884      	adds	r4, r0, r2
 80a6dbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a6dc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a6dc4:	4290      	cmp	r0, r2
 80a6dc6:	d101      	bne.n	80a6dcc <strncmp+0x1a>
 80a6dc8:	42a3      	cmp	r3, r4
 80a6dca:	d101      	bne.n	80a6dd0 <strncmp+0x1e>
 80a6dcc:	1a80      	subs	r0, r0, r2
 80a6dce:	bd10      	pop	{r4, pc}
 80a6dd0:	2800      	cmp	r0, #0
 80a6dd2:	d1f3      	bne.n	80a6dbc <strncmp+0xa>
 80a6dd4:	e7fa      	b.n	80a6dcc <strncmp+0x1a>
 80a6dd6:	4610      	mov	r0, r2
 80a6dd8:	e7f9      	b.n	80a6dce <strncmp+0x1c>

080a6dda <strncpy>:
 80a6dda:	4603      	mov	r3, r0
 80a6ddc:	b510      	push	{r4, lr}
 80a6dde:	3901      	subs	r1, #1
 80a6de0:	b132      	cbz	r2, 80a6df0 <strncpy+0x16>
 80a6de2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a6de6:	3a01      	subs	r2, #1
 80a6de8:	f803 4b01 	strb.w	r4, [r3], #1
 80a6dec:	2c00      	cmp	r4, #0
 80a6dee:	d1f7      	bne.n	80a6de0 <strncpy+0x6>
 80a6df0:	2100      	movs	r1, #0
 80a6df2:	441a      	add	r2, r3
 80a6df4:	4293      	cmp	r3, r2
 80a6df6:	d100      	bne.n	80a6dfa <strncpy+0x20>
 80a6df8:	bd10      	pop	{r4, pc}
 80a6dfa:	f803 1b01 	strb.w	r1, [r3], #1
 80a6dfe:	e7f9      	b.n	80a6df4 <strncpy+0x1a>

080a6e00 <_strtol_l.constprop.0>:
 80a6e00:	2b01      	cmp	r3, #1
 80a6e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6e06:	4680      	mov	r8, r0
 80a6e08:	d001      	beq.n	80a6e0e <_strtol_l.constprop.0+0xe>
 80a6e0a:	2b24      	cmp	r3, #36	; 0x24
 80a6e0c:	d906      	bls.n	80a6e1c <_strtol_l.constprop.0+0x1c>
 80a6e0e:	f7fc ff21 	bl	80a3c54 <__errno>
 80a6e12:	2316      	movs	r3, #22
 80a6e14:	6003      	str	r3, [r0, #0]
 80a6e16:	2000      	movs	r0, #0
 80a6e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6e1c:	460d      	mov	r5, r1
 80a6e1e:	4f35      	ldr	r7, [pc, #212]	; (80a6ef4 <_strtol_l.constprop.0+0xf4>)
 80a6e20:	4628      	mov	r0, r5
 80a6e22:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6e26:	5de6      	ldrb	r6, [r4, r7]
 80a6e28:	f016 0608 	ands.w	r6, r6, #8
 80a6e2c:	d1f8      	bne.n	80a6e20 <_strtol_l.constprop.0+0x20>
 80a6e2e:	2c2d      	cmp	r4, #45	; 0x2d
 80a6e30:	d12f      	bne.n	80a6e92 <_strtol_l.constprop.0+0x92>
 80a6e32:	2601      	movs	r6, #1
 80a6e34:	782c      	ldrb	r4, [r5, #0]
 80a6e36:	1c85      	adds	r5, r0, #2
 80a6e38:	2b00      	cmp	r3, #0
 80a6e3a:	d057      	beq.n	80a6eec <_strtol_l.constprop.0+0xec>
 80a6e3c:	2b10      	cmp	r3, #16
 80a6e3e:	d109      	bne.n	80a6e54 <_strtol_l.constprop.0+0x54>
 80a6e40:	2c30      	cmp	r4, #48	; 0x30
 80a6e42:	d107      	bne.n	80a6e54 <_strtol_l.constprop.0+0x54>
 80a6e44:	7828      	ldrb	r0, [r5, #0]
 80a6e46:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a6e4a:	2858      	cmp	r0, #88	; 0x58
 80a6e4c:	d149      	bne.n	80a6ee2 <_strtol_l.constprop.0+0xe2>
 80a6e4e:	2310      	movs	r3, #16
 80a6e50:	786c      	ldrb	r4, [r5, #1]
 80a6e52:	3502      	adds	r5, #2
 80a6e54:	2700      	movs	r7, #0
 80a6e56:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80a6e5a:	f10e 3eff 	add.w	lr, lr, #4294967295
 80a6e5e:	fbbe f9f3 	udiv	r9, lr, r3
 80a6e62:	4638      	mov	r0, r7
 80a6e64:	fb03 ea19 	mls	sl, r3, r9, lr
 80a6e68:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a6e6c:	f1bc 0f09 	cmp.w	ip, #9
 80a6e70:	d814      	bhi.n	80a6e9c <_strtol_l.constprop.0+0x9c>
 80a6e72:	4664      	mov	r4, ip
 80a6e74:	42a3      	cmp	r3, r4
 80a6e76:	dd22      	ble.n	80a6ebe <_strtol_l.constprop.0+0xbe>
 80a6e78:	2f00      	cmp	r7, #0
 80a6e7a:	db1d      	blt.n	80a6eb8 <_strtol_l.constprop.0+0xb8>
 80a6e7c:	4581      	cmp	r9, r0
 80a6e7e:	d31b      	bcc.n	80a6eb8 <_strtol_l.constprop.0+0xb8>
 80a6e80:	d101      	bne.n	80a6e86 <_strtol_l.constprop.0+0x86>
 80a6e82:	45a2      	cmp	sl, r4
 80a6e84:	db18      	blt.n	80a6eb8 <_strtol_l.constprop.0+0xb8>
 80a6e86:	2701      	movs	r7, #1
 80a6e88:	fb00 4003 	mla	r0, r0, r3, r4
 80a6e8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6e90:	e7ea      	b.n	80a6e68 <_strtol_l.constprop.0+0x68>
 80a6e92:	2c2b      	cmp	r4, #43	; 0x2b
 80a6e94:	bf04      	itt	eq
 80a6e96:	782c      	ldrbeq	r4, [r5, #0]
 80a6e98:	1c85      	addeq	r5, r0, #2
 80a6e9a:	e7cd      	b.n	80a6e38 <_strtol_l.constprop.0+0x38>
 80a6e9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a6ea0:	f1bc 0f19 	cmp.w	ip, #25
 80a6ea4:	d801      	bhi.n	80a6eaa <_strtol_l.constprop.0+0xaa>
 80a6ea6:	3c37      	subs	r4, #55	; 0x37
 80a6ea8:	e7e4      	b.n	80a6e74 <_strtol_l.constprop.0+0x74>
 80a6eaa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a6eae:	f1bc 0f19 	cmp.w	ip, #25
 80a6eb2:	d804      	bhi.n	80a6ebe <_strtol_l.constprop.0+0xbe>
 80a6eb4:	3c57      	subs	r4, #87	; 0x57
 80a6eb6:	e7dd      	b.n	80a6e74 <_strtol_l.constprop.0+0x74>
 80a6eb8:	f04f 37ff 	mov.w	r7, #4294967295
 80a6ebc:	e7e6      	b.n	80a6e8c <_strtol_l.constprop.0+0x8c>
 80a6ebe:	2f00      	cmp	r7, #0
 80a6ec0:	da07      	bge.n	80a6ed2 <_strtol_l.constprop.0+0xd2>
 80a6ec2:	2322      	movs	r3, #34	; 0x22
 80a6ec4:	4670      	mov	r0, lr
 80a6ec6:	f8c8 3000 	str.w	r3, [r8]
 80a6eca:	2a00      	cmp	r2, #0
 80a6ecc:	d0a4      	beq.n	80a6e18 <_strtol_l.constprop.0+0x18>
 80a6ece:	1e69      	subs	r1, r5, #1
 80a6ed0:	e005      	b.n	80a6ede <_strtol_l.constprop.0+0xde>
 80a6ed2:	b106      	cbz	r6, 80a6ed6 <_strtol_l.constprop.0+0xd6>
 80a6ed4:	4240      	negs	r0, r0
 80a6ed6:	2a00      	cmp	r2, #0
 80a6ed8:	d09e      	beq.n	80a6e18 <_strtol_l.constprop.0+0x18>
 80a6eda:	2f00      	cmp	r7, #0
 80a6edc:	d1f7      	bne.n	80a6ece <_strtol_l.constprop.0+0xce>
 80a6ede:	6011      	str	r1, [r2, #0]
 80a6ee0:	e79a      	b.n	80a6e18 <_strtol_l.constprop.0+0x18>
 80a6ee2:	2430      	movs	r4, #48	; 0x30
 80a6ee4:	2b00      	cmp	r3, #0
 80a6ee6:	d1b5      	bne.n	80a6e54 <_strtol_l.constprop.0+0x54>
 80a6ee8:	2308      	movs	r3, #8
 80a6eea:	e7b3      	b.n	80a6e54 <_strtol_l.constprop.0+0x54>
 80a6eec:	2c30      	cmp	r4, #48	; 0x30
 80a6eee:	d0a9      	beq.n	80a6e44 <_strtol_l.constprop.0+0x44>
 80a6ef0:	230a      	movs	r3, #10
 80a6ef2:	e7af      	b.n	80a6e54 <_strtol_l.constprop.0+0x54>
 80a6ef4:	080a92d5 	.word	0x080a92d5

080a6ef8 <strtol>:
 80a6ef8:	4613      	mov	r3, r2
 80a6efa:	460a      	mov	r2, r1
 80a6efc:	4601      	mov	r1, r0
 80a6efe:	4802      	ldr	r0, [pc, #8]	; (80a6f08 <strtol+0x10>)
 80a6f00:	6800      	ldr	r0, [r0, #0]
 80a6f02:	f7ff bf7d 	b.w	80a6e00 <_strtol_l.constprop.0>
 80a6f06:	bf00      	nop
 80a6f08:	20000080 	.word	0x20000080

080a6f0c <_strtoul_l.constprop.0>:
 80a6f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6f10:	4686      	mov	lr, r0
 80a6f12:	460d      	mov	r5, r1
 80a6f14:	4f35      	ldr	r7, [pc, #212]	; (80a6fec <_strtoul_l.constprop.0+0xe0>)
 80a6f16:	4628      	mov	r0, r5
 80a6f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6f1c:	5de6      	ldrb	r6, [r4, r7]
 80a6f1e:	f016 0608 	ands.w	r6, r6, #8
 80a6f22:	d1f8      	bne.n	80a6f16 <_strtoul_l.constprop.0+0xa>
 80a6f24:	2c2d      	cmp	r4, #45	; 0x2d
 80a6f26:	d12f      	bne.n	80a6f88 <_strtoul_l.constprop.0+0x7c>
 80a6f28:	2601      	movs	r6, #1
 80a6f2a:	782c      	ldrb	r4, [r5, #0]
 80a6f2c:	1c85      	adds	r5, r0, #2
 80a6f2e:	2b00      	cmp	r3, #0
 80a6f30:	d057      	beq.n	80a6fe2 <_strtoul_l.constprop.0+0xd6>
 80a6f32:	2b10      	cmp	r3, #16
 80a6f34:	d109      	bne.n	80a6f4a <_strtoul_l.constprop.0+0x3e>
 80a6f36:	2c30      	cmp	r4, #48	; 0x30
 80a6f38:	d107      	bne.n	80a6f4a <_strtoul_l.constprop.0+0x3e>
 80a6f3a:	7828      	ldrb	r0, [r5, #0]
 80a6f3c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a6f40:	2858      	cmp	r0, #88	; 0x58
 80a6f42:	d149      	bne.n	80a6fd8 <_strtoul_l.constprop.0+0xcc>
 80a6f44:	2310      	movs	r3, #16
 80a6f46:	786c      	ldrb	r4, [r5, #1]
 80a6f48:	3502      	adds	r5, #2
 80a6f4a:	f04f 38ff 	mov.w	r8, #4294967295
 80a6f4e:	fbb8 f8f3 	udiv	r8, r8, r3
 80a6f52:	2700      	movs	r7, #0
 80a6f54:	fb03 f908 	mul.w	r9, r3, r8
 80a6f58:	4638      	mov	r0, r7
 80a6f5a:	ea6f 0909 	mvn.w	r9, r9
 80a6f5e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a6f62:	f1bc 0f09 	cmp.w	ip, #9
 80a6f66:	d814      	bhi.n	80a6f92 <_strtoul_l.constprop.0+0x86>
 80a6f68:	4664      	mov	r4, ip
 80a6f6a:	42a3      	cmp	r3, r4
 80a6f6c:	dd22      	ble.n	80a6fb4 <_strtoul_l.constprop.0+0xa8>
 80a6f6e:	2f00      	cmp	r7, #0
 80a6f70:	db1d      	blt.n	80a6fae <_strtoul_l.constprop.0+0xa2>
 80a6f72:	4580      	cmp	r8, r0
 80a6f74:	d31b      	bcc.n	80a6fae <_strtoul_l.constprop.0+0xa2>
 80a6f76:	d101      	bne.n	80a6f7c <_strtoul_l.constprop.0+0x70>
 80a6f78:	45a1      	cmp	r9, r4
 80a6f7a:	db18      	blt.n	80a6fae <_strtoul_l.constprop.0+0xa2>
 80a6f7c:	2701      	movs	r7, #1
 80a6f7e:	fb00 4003 	mla	r0, r0, r3, r4
 80a6f82:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6f86:	e7ea      	b.n	80a6f5e <_strtoul_l.constprop.0+0x52>
 80a6f88:	2c2b      	cmp	r4, #43	; 0x2b
 80a6f8a:	bf04      	itt	eq
 80a6f8c:	782c      	ldrbeq	r4, [r5, #0]
 80a6f8e:	1c85      	addeq	r5, r0, #2
 80a6f90:	e7cd      	b.n	80a6f2e <_strtoul_l.constprop.0+0x22>
 80a6f92:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a6f96:	f1bc 0f19 	cmp.w	ip, #25
 80a6f9a:	d801      	bhi.n	80a6fa0 <_strtoul_l.constprop.0+0x94>
 80a6f9c:	3c37      	subs	r4, #55	; 0x37
 80a6f9e:	e7e4      	b.n	80a6f6a <_strtoul_l.constprop.0+0x5e>
 80a6fa0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a6fa4:	f1bc 0f19 	cmp.w	ip, #25
 80a6fa8:	d804      	bhi.n	80a6fb4 <_strtoul_l.constprop.0+0xa8>
 80a6faa:	3c57      	subs	r4, #87	; 0x57
 80a6fac:	e7dd      	b.n	80a6f6a <_strtoul_l.constprop.0+0x5e>
 80a6fae:	f04f 37ff 	mov.w	r7, #4294967295
 80a6fb2:	e7e6      	b.n	80a6f82 <_strtoul_l.constprop.0+0x76>
 80a6fb4:	2f00      	cmp	r7, #0
 80a6fb6:	da07      	bge.n	80a6fc8 <_strtoul_l.constprop.0+0xbc>
 80a6fb8:	2322      	movs	r3, #34	; 0x22
 80a6fba:	f04f 30ff 	mov.w	r0, #4294967295
 80a6fbe:	f8ce 3000 	str.w	r3, [lr]
 80a6fc2:	b932      	cbnz	r2, 80a6fd2 <_strtoul_l.constprop.0+0xc6>
 80a6fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a6fc8:	b106      	cbz	r6, 80a6fcc <_strtoul_l.constprop.0+0xc0>
 80a6fca:	4240      	negs	r0, r0
 80a6fcc:	2a00      	cmp	r2, #0
 80a6fce:	d0f9      	beq.n	80a6fc4 <_strtoul_l.constprop.0+0xb8>
 80a6fd0:	b107      	cbz	r7, 80a6fd4 <_strtoul_l.constprop.0+0xc8>
 80a6fd2:	1e69      	subs	r1, r5, #1
 80a6fd4:	6011      	str	r1, [r2, #0]
 80a6fd6:	e7f5      	b.n	80a6fc4 <_strtoul_l.constprop.0+0xb8>
 80a6fd8:	2430      	movs	r4, #48	; 0x30
 80a6fda:	2b00      	cmp	r3, #0
 80a6fdc:	d1b5      	bne.n	80a6f4a <_strtoul_l.constprop.0+0x3e>
 80a6fde:	2308      	movs	r3, #8
 80a6fe0:	e7b3      	b.n	80a6f4a <_strtoul_l.constprop.0+0x3e>
 80a6fe2:	2c30      	cmp	r4, #48	; 0x30
 80a6fe4:	d0a9      	beq.n	80a6f3a <_strtoul_l.constprop.0+0x2e>
 80a6fe6:	230a      	movs	r3, #10
 80a6fe8:	e7af      	b.n	80a6f4a <_strtoul_l.constprop.0+0x3e>
 80a6fea:	bf00      	nop
 80a6fec:	080a92d5 	.word	0x080a92d5

080a6ff0 <strtoul>:
 80a6ff0:	4613      	mov	r3, r2
 80a6ff2:	460a      	mov	r2, r1
 80a6ff4:	4601      	mov	r1, r0
 80a6ff6:	4802      	ldr	r0, [pc, #8]	; (80a7000 <strtoul+0x10>)
 80a6ff8:	6800      	ldr	r0, [r0, #0]
 80a6ffa:	f7ff bf87 	b.w	80a6f0c <_strtoul_l.constprop.0>
 80a6ffe:	bf00      	nop
 80a7000:	20000080 	.word	0x20000080

080a7004 <__tzcalc_limits>:
 80a7004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7008:	4605      	mov	r5, r0
 80a700a:	f000 fadb 	bl	80a75c4 <__gettzinfo>
 80a700e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a7012:	429d      	cmp	r5, r3
 80a7014:	f340 8094 	ble.w	80a7140 <__tzcalc_limits+0x13c>
 80a7018:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80a701c:	18ac      	adds	r4, r5, r2
 80a701e:	f240 126d 	movw	r2, #365	; 0x16d
 80a7022:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80a7026:	10a4      	asrs	r4, r4, #2
 80a7028:	fb02 4403 	mla	r4, r2, r3, r4
 80a702c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a7030:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80a7034:	fb93 f3f2 	sdiv	r3, r3, r2
 80a7038:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80a703c:	441c      	add	r4, r3
 80a703e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a7042:	186a      	adds	r2, r5, r1
 80a7044:	fbb2 f2f3 	udiv	r2, r2, r3
 80a7048:	fb95 fef3 	sdiv	lr, r5, r3
 80a704c:	4414      	add	r4, r2
 80a704e:	2264      	movs	r2, #100	; 0x64
 80a7050:	fb03 5e1e 	mls	lr, r3, lr, r5
 80a7054:	fb95 fcf2 	sdiv	ip, r5, r2
 80a7058:	fabe f78e 	clz	r7, lr
 80a705c:	4601      	mov	r1, r0
 80a705e:	fb02 5c1c 	mls	ip, r2, ip, r5
 80a7062:	6045      	str	r5, [r0, #4]
 80a7064:	097f      	lsrs	r7, r7, #5
 80a7066:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a706a:	f005 0303 	and.w	r3, r5, #3
 80a706e:	7a0a      	ldrb	r2, [r1, #8]
 80a7070:	694d      	ldr	r5, [r1, #20]
 80a7072:	2a4a      	cmp	r2, #74	; 0x4a
 80a7074:	d12a      	bne.n	80a70cc <__tzcalc_limits+0xc8>
 80a7076:	1962      	adds	r2, r4, r5
 80a7078:	b913      	cbnz	r3, 80a7080 <__tzcalc_limits+0x7c>
 80a707a:	f1bc 0f00 	cmp.w	ip, #0
 80a707e:	d102      	bne.n	80a7086 <__tzcalc_limits+0x82>
 80a7080:	f1be 0f00 	cmp.w	lr, #0
 80a7084:	d120      	bne.n	80a70c8 <__tzcalc_limits+0xc4>
 80a7086:	2d3b      	cmp	r5, #59	; 0x3b
 80a7088:	bfd4      	ite	le
 80a708a:	2500      	movle	r5, #0
 80a708c:	2501      	movgt	r5, #1
 80a708e:	4415      	add	r5, r2
 80a7090:	3d01      	subs	r5, #1
 80a7092:	698e      	ldr	r6, [r1, #24]
 80a7094:	4a2b      	ldr	r2, [pc, #172]	; (80a7144 <__tzcalc_limits+0x140>)
 80a7096:	fb02 6505 	mla	r5, r2, r5, r6
 80a709a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80a709c:	4415      	add	r5, r2
 80a709e:	17ea      	asrs	r2, r5, #31
 80a70a0:	e9c1 5208 	strd	r5, r2, [r1, #32]
 80a70a4:	3128      	adds	r1, #40	; 0x28
 80a70a6:	458b      	cmp	fp, r1
 80a70a8:	d1e1      	bne.n	80a706e <__tzcalc_limits+0x6a>
 80a70aa:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80a70ae:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80a70b2:	428c      	cmp	r4, r1
 80a70b4:	eb72 0303 	sbcs.w	r3, r2, r3
 80a70b8:	bfb4      	ite	lt
 80a70ba:	2301      	movlt	r3, #1
 80a70bc:	2300      	movge	r3, #0
 80a70be:	6003      	str	r3, [r0, #0]
 80a70c0:	2001      	movs	r0, #1
 80a70c2:	b003      	add	sp, #12
 80a70c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a70c8:	2500      	movs	r5, #0
 80a70ca:	e7e0      	b.n	80a708e <__tzcalc_limits+0x8a>
 80a70cc:	2a44      	cmp	r2, #68	; 0x44
 80a70ce:	d101      	bne.n	80a70d4 <__tzcalc_limits+0xd0>
 80a70d0:	4425      	add	r5, r4
 80a70d2:	e7de      	b.n	80a7092 <__tzcalc_limits+0x8e>
 80a70d4:	bb73      	cbnz	r3, 80a7134 <__tzcalc_limits+0x130>
 80a70d6:	f1bc 0f00 	cmp.w	ip, #0
 80a70da:	bf0c      	ite	eq
 80a70dc:	463e      	moveq	r6, r7
 80a70de:	2601      	movne	r6, #1
 80a70e0:	f04f 0830 	mov.w	r8, #48	; 0x30
 80a70e4:	68ca      	ldr	r2, [r1, #12]
 80a70e6:	f04f 0900 	mov.w	r9, #0
 80a70ea:	9201      	str	r2, [sp, #4]
 80a70ec:	4622      	mov	r2, r4
 80a70ee:	f8df a058 	ldr.w	sl, [pc, #88]	; 80a7148 <__tzcalc_limits+0x144>
 80a70f2:	fb08 a606 	mla	r6, r8, r6, sl
 80a70f6:	3e04      	subs	r6, #4
 80a70f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80a70fc:	f109 0901 	add.w	r9, r9, #1
 80a7100:	45c8      	cmp	r8, r9
 80a7102:	f856 a029 	ldr.w	sl, [r6, r9, lsl #2]
 80a7106:	dc17      	bgt.n	80a7138 <__tzcalc_limits+0x134>
 80a7108:	f04f 0807 	mov.w	r8, #7
 80a710c:	1d16      	adds	r6, r2, #4
 80a710e:	fb96 f9f8 	sdiv	r9, r6, r8
 80a7112:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a7116:	eba6 0909 	sub.w	r9, r6, r9
 80a711a:	ebb5 0909 	subs.w	r9, r5, r9
 80a711e:	690d      	ldr	r5, [r1, #16]
 80a7120:	bf48      	it	mi
 80a7122:	44c1      	addmi	r9, r8
 80a7124:	3d01      	subs	r5, #1
 80a7126:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80a712a:	444d      	add	r5, r9
 80a712c:	4555      	cmp	r5, sl
 80a712e:	da05      	bge.n	80a713c <__tzcalc_limits+0x138>
 80a7130:	4415      	add	r5, r2
 80a7132:	e7ae      	b.n	80a7092 <__tzcalc_limits+0x8e>
 80a7134:	463e      	mov	r6, r7
 80a7136:	e7d3      	b.n	80a70e0 <__tzcalc_limits+0xdc>
 80a7138:	4452      	add	r2, sl
 80a713a:	e7dd      	b.n	80a70f8 <__tzcalc_limits+0xf4>
 80a713c:	3d07      	subs	r5, #7
 80a713e:	e7f5      	b.n	80a712c <__tzcalc_limits+0x128>
 80a7140:	2000      	movs	r0, #0
 80a7142:	e7be      	b.n	80a70c2 <__tzcalc_limits+0xbe>
 80a7144:	00015180 	.word	0x00015180
 80a7148:	080a91a4 	.word	0x080a91a4

080a714c <__tz_lock>:
 80a714c:	4801      	ldr	r0, [pc, #4]	; (80a7154 <__tz_lock+0x8>)
 80a714e:	f000 baeb 	b.w	80a7728 <__retarget_lock_acquire>
 80a7152:	bf00      	nop
 80a7154:	200005da 	.word	0x200005da

080a7158 <__tz_unlock>:
 80a7158:	4801      	ldr	r0, [pc, #4]	; (80a7160 <__tz_unlock+0x8>)
 80a715a:	f000 bae7 	b.w	80a772c <__retarget_lock_release>
 80a715e:	bf00      	nop
 80a7160:	200005da 	.word	0x200005da

080a7164 <_tzset_unlocked>:
 80a7164:	4b01      	ldr	r3, [pc, #4]	; (80a716c <_tzset_unlocked+0x8>)
 80a7166:	6818      	ldr	r0, [r3, #0]
 80a7168:	f000 b802 	b.w	80a7170 <_tzset_unlocked_r>
 80a716c:	20000080 	.word	0x20000080

080a7170 <_tzset_unlocked_r>:
 80a7170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7174:	b08d      	sub	sp, #52	; 0x34
 80a7176:	4607      	mov	r7, r0
 80a7178:	f000 fa24 	bl	80a75c4 <__gettzinfo>
 80a717c:	49b1      	ldr	r1, [pc, #708]	; (80a7444 <_tzset_unlocked_r+0x2d4>)
 80a717e:	4605      	mov	r5, r0
 80a7180:	4638      	mov	r0, r7
 80a7182:	f000 fa17 	bl	80a75b4 <_getenv_r>
 80a7186:	4eb0      	ldr	r6, [pc, #704]	; (80a7448 <_tzset_unlocked_r+0x2d8>)
 80a7188:	4604      	mov	r4, r0
 80a718a:	b970      	cbnz	r0, 80a71aa <_tzset_unlocked_r+0x3a>
 80a718c:	4baf      	ldr	r3, [pc, #700]	; (80a744c <_tzset_unlocked_r+0x2dc>)
 80a718e:	4ab0      	ldr	r2, [pc, #704]	; (80a7450 <_tzset_unlocked_r+0x2e0>)
 80a7190:	6018      	str	r0, [r3, #0]
 80a7192:	4bb0      	ldr	r3, [pc, #704]	; (80a7454 <_tzset_unlocked_r+0x2e4>)
 80a7194:	6018      	str	r0, [r3, #0]
 80a7196:	4bb0      	ldr	r3, [pc, #704]	; (80a7458 <_tzset_unlocked_r+0x2e8>)
 80a7198:	6830      	ldr	r0, [r6, #0]
 80a719a:	e9c3 2200 	strd	r2, r2, [r3]
 80a719e:	f7fc fd19 	bl	80a3bd4 <free>
 80a71a2:	6034      	str	r4, [r6, #0]
 80a71a4:	b00d      	add	sp, #52	; 0x34
 80a71a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a71aa:	6831      	ldr	r1, [r6, #0]
 80a71ac:	2900      	cmp	r1, #0
 80a71ae:	d162      	bne.n	80a7276 <_tzset_unlocked_r+0x106>
 80a71b0:	6830      	ldr	r0, [r6, #0]
 80a71b2:	f7fc fd0f 	bl	80a3bd4 <free>
 80a71b6:	4620      	mov	r0, r4
 80a71b8:	f7ff fdf3 	bl	80a6da2 <strlen>
 80a71bc:	1c41      	adds	r1, r0, #1
 80a71be:	4638      	mov	r0, r7
 80a71c0:	f7fc fd40 	bl	80a3c44 <_malloc_r>
 80a71c4:	6030      	str	r0, [r6, #0]
 80a71c6:	2800      	cmp	r0, #0
 80a71c8:	d15a      	bne.n	80a7280 <_tzset_unlocked_r+0x110>
 80a71ca:	7823      	ldrb	r3, [r4, #0]
 80a71cc:	ae0a      	add	r6, sp, #40	; 0x28
 80a71ce:	2b3a      	cmp	r3, #58	; 0x3a
 80a71d0:	bf08      	it	eq
 80a71d2:	3401      	addeq	r4, #1
 80a71d4:	4633      	mov	r3, r6
 80a71d6:	4620      	mov	r0, r4
 80a71d8:	4aa0      	ldr	r2, [pc, #640]	; (80a745c <_tzset_unlocked_r+0x2ec>)
 80a71da:	49a1      	ldr	r1, [pc, #644]	; (80a7460 <_tzset_unlocked_r+0x2f0>)
 80a71dc:	f7fc fd12 	bl	80a3c04 <siscanf>
 80a71e0:	2800      	cmp	r0, #0
 80a71e2:	dddf      	ble.n	80a71a4 <_tzset_unlocked_r+0x34>
 80a71e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a71e6:	18e7      	adds	r7, r4, r3
 80a71e8:	5ce3      	ldrb	r3, [r4, r3]
 80a71ea:	2b2d      	cmp	r3, #45	; 0x2d
 80a71ec:	d14c      	bne.n	80a7288 <_tzset_unlocked_r+0x118>
 80a71ee:	f04f 38ff 	mov.w	r8, #4294967295
 80a71f2:	3701      	adds	r7, #1
 80a71f4:	2400      	movs	r4, #0
 80a71f6:	f10d 0a20 	add.w	sl, sp, #32
 80a71fa:	f10d 0b1e 	add.w	fp, sp, #30
 80a71fe:	4633      	mov	r3, r6
 80a7200:	4638      	mov	r0, r7
 80a7202:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a7206:	4997      	ldr	r1, [pc, #604]	; (80a7464 <_tzset_unlocked_r+0x2f4>)
 80a7208:	9603      	str	r6, [sp, #12]
 80a720a:	f8cd b000 	str.w	fp, [sp]
 80a720e:	aa07      	add	r2, sp, #28
 80a7210:	f8ad 401e 	strh.w	r4, [sp, #30]
 80a7214:	f8ad 4020 	strh.w	r4, [sp, #32]
 80a7218:	f7fc fcf4 	bl	80a3c04 <siscanf>
 80a721c:	42a0      	cmp	r0, r4
 80a721e:	ddc1      	ble.n	80a71a4 <_tzset_unlocked_r+0x34>
 80a7220:	213c      	movs	r1, #60	; 0x3c
 80a7222:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a7226:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a722a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a7468 <_tzset_unlocked_r+0x2f8>
 80a722e:	fb01 3302 	mla	r3, r1, r2, r3
 80a7232:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7236:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a723a:	fb01 3302 	mla	r3, r1, r2, r3
 80a723e:	fb08 f303 	mul.w	r3, r8, r3
 80a7242:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80a7458 <_tzset_unlocked_r+0x2e8>
 80a7246:	62ab      	str	r3, [r5, #40]	; 0x28
 80a7248:	4b84      	ldr	r3, [pc, #528]	; (80a745c <_tzset_unlocked_r+0x2ec>)
 80a724a:	464a      	mov	r2, r9
 80a724c:	f8c8 3000 	str.w	r3, [r8]
 80a7250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7252:	4983      	ldr	r1, [pc, #524]	; (80a7460 <_tzset_unlocked_r+0x2f0>)
 80a7254:	441f      	add	r7, r3
 80a7256:	4638      	mov	r0, r7
 80a7258:	4633      	mov	r3, r6
 80a725a:	f7fc fcd3 	bl	80a3c04 <siscanf>
 80a725e:	42a0      	cmp	r0, r4
 80a7260:	dc18      	bgt.n	80a7294 <_tzset_unlocked_r+0x124>
 80a7262:	f8d8 3000 	ldr.w	r3, [r8]
 80a7266:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7268:	f8c8 3004 	str.w	r3, [r8, #4]
 80a726c:	4b77      	ldr	r3, [pc, #476]	; (80a744c <_tzset_unlocked_r+0x2dc>)
 80a726e:	601a      	str	r2, [r3, #0]
 80a7270:	4b78      	ldr	r3, [pc, #480]	; (80a7454 <_tzset_unlocked_r+0x2e4>)
 80a7272:	601c      	str	r4, [r3, #0]
 80a7274:	e796      	b.n	80a71a4 <_tzset_unlocked_r+0x34>
 80a7276:	f7ff fd67 	bl	80a6d48 <strcmp>
 80a727a:	2800      	cmp	r0, #0
 80a727c:	d198      	bne.n	80a71b0 <_tzset_unlocked_r+0x40>
 80a727e:	e791      	b.n	80a71a4 <_tzset_unlocked_r+0x34>
 80a7280:	4621      	mov	r1, r4
 80a7282:	f7ff fd6b 	bl	80a6d5c <strcpy>
 80a7286:	e7a0      	b.n	80a71ca <_tzset_unlocked_r+0x5a>
 80a7288:	2b2b      	cmp	r3, #43	; 0x2b
 80a728a:	f04f 0801 	mov.w	r8, #1
 80a728e:	bf08      	it	eq
 80a7290:	3701      	addeq	r7, #1
 80a7292:	e7af      	b.n	80a71f4 <_tzset_unlocked_r+0x84>
 80a7294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7296:	f8c8 9004 	str.w	r9, [r8, #4]
 80a729a:	18fc      	adds	r4, r7, r3
 80a729c:	5cfb      	ldrb	r3, [r7, r3]
 80a729e:	2b2d      	cmp	r3, #45	; 0x2d
 80a72a0:	f040 808c 	bne.w	80a73bc <_tzset_unlocked_r+0x24c>
 80a72a4:	f04f 37ff 	mov.w	r7, #4294967295
 80a72a8:	3401      	adds	r4, #1
 80a72aa:	2300      	movs	r3, #0
 80a72ac:	4620      	mov	r0, r4
 80a72ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a72b2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a72b6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a72ba:	930a      	str	r3, [sp, #40]	; 0x28
 80a72bc:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a72c0:	4633      	mov	r3, r6
 80a72c2:	e9cd b600 	strd	fp, r6, [sp]
 80a72c6:	4967      	ldr	r1, [pc, #412]	; (80a7464 <_tzset_unlocked_r+0x2f4>)
 80a72c8:	aa07      	add	r2, sp, #28
 80a72ca:	f7fc fc9b 	bl	80a3c04 <siscanf>
 80a72ce:	2800      	cmp	r0, #0
 80a72d0:	dc7a      	bgt.n	80a73c8 <_tzset_unlocked_r+0x258>
 80a72d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a72d4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a72d8:	462f      	mov	r7, r5
 80a72da:	f04f 0900 	mov.w	r9, #0
 80a72de:	652b      	str	r3, [r5, #80]	; 0x50
 80a72e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a72e2:	441c      	add	r4, r3
 80a72e4:	7823      	ldrb	r3, [r4, #0]
 80a72e6:	2b2c      	cmp	r3, #44	; 0x2c
 80a72e8:	bf08      	it	eq
 80a72ea:	3401      	addeq	r4, #1
 80a72ec:	f894 8000 	ldrb.w	r8, [r4]
 80a72f0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a72f4:	d17a      	bne.n	80a73ec <_tzset_unlocked_r+0x27c>
 80a72f6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a72fa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a72fe:	ab09      	add	r3, sp, #36	; 0x24
 80a7300:	9300      	str	r3, [sp, #0]
 80a7302:	4620      	mov	r0, r4
 80a7304:	4633      	mov	r3, r6
 80a7306:	4959      	ldr	r1, [pc, #356]	; (80a746c <_tzset_unlocked_r+0x2fc>)
 80a7308:	9603      	str	r6, [sp, #12]
 80a730a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a730e:	f7fc fc79 	bl	80a3c04 <siscanf>
 80a7312:	2803      	cmp	r0, #3
 80a7314:	f47f af46 	bne.w	80a71a4 <_tzset_unlocked_r+0x34>
 80a7318:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a731c:	1e4b      	subs	r3, r1, #1
 80a731e:	2b0b      	cmp	r3, #11
 80a7320:	f63f af40 	bhi.w	80a71a4 <_tzset_unlocked_r+0x34>
 80a7324:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a7328:	1e53      	subs	r3, r2, #1
 80a732a:	2b04      	cmp	r3, #4
 80a732c:	f63f af3a 	bhi.w	80a71a4 <_tzset_unlocked_r+0x34>
 80a7330:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a7334:	2b06      	cmp	r3, #6
 80a7336:	f63f af35 	bhi.w	80a71a4 <_tzset_unlocked_r+0x34>
 80a733a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a733e:	f887 8008 	strb.w	r8, [r7, #8]
 80a7342:	617b      	str	r3, [r7, #20]
 80a7344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7346:	eb04 0803 	add.w	r8, r4, r3
 80a734a:	2302      	movs	r3, #2
 80a734c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7350:	2300      	movs	r3, #0
 80a7352:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7356:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a735a:	930a      	str	r3, [sp, #40]	; 0x28
 80a735c:	f898 3000 	ldrb.w	r3, [r8]
 80a7360:	2b2f      	cmp	r3, #47	; 0x2f
 80a7362:	d109      	bne.n	80a7378 <_tzset_unlocked_r+0x208>
 80a7364:	4633      	mov	r3, r6
 80a7366:	4640      	mov	r0, r8
 80a7368:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a736c:	e9cd b600 	strd	fp, r6, [sp]
 80a7370:	493f      	ldr	r1, [pc, #252]	; (80a7470 <_tzset_unlocked_r+0x300>)
 80a7372:	aa07      	add	r2, sp, #28
 80a7374:	f7fc fc46 	bl	80a3c04 <siscanf>
 80a7378:	213c      	movs	r1, #60	; 0x3c
 80a737a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a737e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a7382:	3728      	adds	r7, #40	; 0x28
 80a7384:	fb01 3302 	mla	r3, r1, r2, r3
 80a7388:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a738c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a7390:	fb01 3302 	mla	r3, r1, r2, r3
 80a7394:	f847 3c10 	str.w	r3, [r7, #-16]
 80a7398:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a739a:	4444      	add	r4, r8
 80a739c:	f1b9 0f00 	cmp.w	r9, #0
 80a73a0:	d021      	beq.n	80a73e6 <_tzset_unlocked_r+0x276>
 80a73a2:	6868      	ldr	r0, [r5, #4]
 80a73a4:	f7ff fe2e 	bl	80a7004 <__tzcalc_limits>
 80a73a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a73aa:	4b28      	ldr	r3, [pc, #160]	; (80a744c <_tzset_unlocked_r+0x2dc>)
 80a73ac:	601a      	str	r2, [r3, #0]
 80a73ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a73b0:	1a9b      	subs	r3, r3, r2
 80a73b2:	bf18      	it	ne
 80a73b4:	2301      	movne	r3, #1
 80a73b6:	4a27      	ldr	r2, [pc, #156]	; (80a7454 <_tzset_unlocked_r+0x2e4>)
 80a73b8:	6013      	str	r3, [r2, #0]
 80a73ba:	e6f3      	b.n	80a71a4 <_tzset_unlocked_r+0x34>
 80a73bc:	2b2b      	cmp	r3, #43	; 0x2b
 80a73be:	f04f 0701 	mov.w	r7, #1
 80a73c2:	bf08      	it	eq
 80a73c4:	3401      	addeq	r4, #1
 80a73c6:	e770      	b.n	80a72aa <_tzset_unlocked_r+0x13a>
 80a73c8:	213c      	movs	r1, #60	; 0x3c
 80a73ca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a73ce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a73d2:	fb01 3302 	mla	r3, r1, r2, r3
 80a73d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a73da:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a73de:	fb01 3302 	mla	r3, r1, r2, r3
 80a73e2:	437b      	muls	r3, r7
 80a73e4:	e778      	b.n	80a72d8 <_tzset_unlocked_r+0x168>
 80a73e6:	f04f 0901 	mov.w	r9, #1
 80a73ea:	e77b      	b.n	80a72e4 <_tzset_unlocked_r+0x174>
 80a73ec:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a73f0:	bf0a      	itet	eq
 80a73f2:	4643      	moveq	r3, r8
 80a73f4:	2344      	movne	r3, #68	; 0x44
 80a73f6:	3401      	addeq	r4, #1
 80a73f8:	220a      	movs	r2, #10
 80a73fa:	4620      	mov	r0, r4
 80a73fc:	a90b      	add	r1, sp, #44	; 0x2c
 80a73fe:	9305      	str	r3, [sp, #20]
 80a7400:	f7ff fdf6 	bl	80a6ff0 <strtoul>
 80a7404:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a7408:	9b05      	ldr	r3, [sp, #20]
 80a740a:	45a0      	cmp	r8, r4
 80a740c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a7410:	d114      	bne.n	80a743c <_tzset_unlocked_r+0x2cc>
 80a7412:	234d      	movs	r3, #77	; 0x4d
 80a7414:	f1b9 0f00 	cmp.w	r9, #0
 80a7418:	d107      	bne.n	80a742a <_tzset_unlocked_r+0x2ba>
 80a741a:	2103      	movs	r1, #3
 80a741c:	722b      	strb	r3, [r5, #8]
 80a741e:	2302      	movs	r3, #2
 80a7420:	f8c5 9014 	str.w	r9, [r5, #20]
 80a7424:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a7428:	e78f      	b.n	80a734a <_tzset_unlocked_r+0x1da>
 80a742a:	220b      	movs	r2, #11
 80a742c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a7430:	2301      	movs	r3, #1
 80a7432:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a7436:	2300      	movs	r3, #0
 80a7438:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a743a:	e786      	b.n	80a734a <_tzset_unlocked_r+0x1da>
 80a743c:	b280      	uxth	r0, r0
 80a743e:	723b      	strb	r3, [r7, #8]
 80a7440:	6178      	str	r0, [r7, #20]
 80a7442:	e782      	b.n	80a734a <_tzset_unlocked_r+0x1da>
 80a7444:	080a9298 	.word	0x080a9298
 80a7448:	2000053c 	.word	0x2000053c
 80a744c:	20000544 	.word	0x20000544
 80a7450:	080a929b 	.word	0x080a929b
 80a7454:	20000540 	.word	0x20000540
 80a7458:	200000e4 	.word	0x200000e4
 80a745c:	2000052f 	.word	0x2000052f
 80a7460:	080a929f 	.word	0x080a929f
 80a7464:	080a92c2 	.word	0x080a92c2
 80a7468:	20000524 	.word	0x20000524
 80a746c:	080a92ae 	.word	0x080a92ae
 80a7470:	080a92c1 	.word	0x080a92c1

080a7474 <__register_exitproc>:
 80a7474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a7478:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a7528 <__register_exitproc+0xb4>
 80a747c:	4606      	mov	r6, r0
 80a747e:	f8d8 0000 	ldr.w	r0, [r8]
 80a7482:	461f      	mov	r7, r3
 80a7484:	460d      	mov	r5, r1
 80a7486:	4691      	mov	r9, r2
 80a7488:	f000 f94f 	bl	80a772a <__retarget_lock_acquire_recursive>
 80a748c:	4b27      	ldr	r3, [pc, #156]	; (80a752c <__register_exitproc+0xb8>)
 80a748e:	681c      	ldr	r4, [r3, #0]
 80a7490:	b934      	cbnz	r4, 80a74a0 <__register_exitproc+0x2c>
 80a7492:	4c27      	ldr	r4, [pc, #156]	; (80a7530 <__register_exitproc+0xbc>)
 80a7494:	601c      	str	r4, [r3, #0]
 80a7496:	4b27      	ldr	r3, [pc, #156]	; (80a7534 <__register_exitproc+0xc0>)
 80a7498:	b113      	cbz	r3, 80a74a0 <__register_exitproc+0x2c>
 80a749a:	681b      	ldr	r3, [r3, #0]
 80a749c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a74a0:	6863      	ldr	r3, [r4, #4]
 80a74a2:	2b1f      	cmp	r3, #31
 80a74a4:	dd07      	ble.n	80a74b6 <__register_exitproc+0x42>
 80a74a6:	f8d8 0000 	ldr.w	r0, [r8]
 80a74aa:	f000 f940 	bl	80a772e <__retarget_lock_release_recursive>
 80a74ae:	f04f 30ff 	mov.w	r0, #4294967295
 80a74b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a74b6:	b35e      	cbz	r6, 80a7510 <__register_exitproc+0x9c>
 80a74b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a74bc:	b988      	cbnz	r0, 80a74e2 <__register_exitproc+0x6e>
 80a74be:	4b1e      	ldr	r3, [pc, #120]	; (80a7538 <__register_exitproc+0xc4>)
 80a74c0:	b923      	cbnz	r3, 80a74cc <__register_exitproc+0x58>
 80a74c2:	f8d8 0000 	ldr.w	r0, [r8]
 80a74c6:	f000 f931 	bl	80a772c <__retarget_lock_release>
 80a74ca:	e7f0      	b.n	80a74ae <__register_exitproc+0x3a>
 80a74cc:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a74d0:	f7fc fb78 	bl	80a3bc4 <malloc>
 80a74d4:	2800      	cmp	r0, #0
 80a74d6:	d0f4      	beq.n	80a74c2 <__register_exitproc+0x4e>
 80a74d8:	2300      	movs	r3, #0
 80a74da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a74de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a74e2:	2201      	movs	r2, #1
 80a74e4:	6863      	ldr	r3, [r4, #4]
 80a74e6:	2e02      	cmp	r6, #2
 80a74e8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a74ec:	fa02 f203 	lsl.w	r2, r2, r3
 80a74f0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a74f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a74f8:	ea43 0302 	orr.w	r3, r3, r2
 80a74fc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a7500:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a7504:	bf02      	ittt	eq
 80a7506:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a750a:	4313      	orreq	r3, r2
 80a750c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a7510:	6863      	ldr	r3, [r4, #4]
 80a7512:	f8d8 0000 	ldr.w	r0, [r8]
 80a7516:	1c5a      	adds	r2, r3, #1
 80a7518:	3302      	adds	r3, #2
 80a751a:	6062      	str	r2, [r4, #4]
 80a751c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a7520:	f000 f905 	bl	80a772e <__retarget_lock_release_recursive>
 80a7524:	2000      	movs	r0, #0
 80a7526:	e7c4      	b.n	80a74b2 <__register_exitproc+0x3e>
 80a7528:	200000ec 	.word	0x200000ec
 80a752c:	200005d4 	.word	0x200005d4
 80a7530:	20000548 	.word	0x20000548
 80a7534:	00000000 	.word	0x00000000
 80a7538:	080a3bc5 	.word	0x080a3bc5

080a753c <_findenv_r>:
 80a753c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7540:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80a75b0 <_findenv_r+0x74>
 80a7544:	4607      	mov	r7, r0
 80a7546:	4689      	mov	r9, r1
 80a7548:	4616      	mov	r6, r2
 80a754a:	f000 f8f1 	bl	80a7730 <__env_lock>
 80a754e:	f8da 4000 	ldr.w	r4, [sl]
 80a7552:	b134      	cbz	r4, 80a7562 <_findenv_r+0x26>
 80a7554:	464b      	mov	r3, r9
 80a7556:	4698      	mov	r8, r3
 80a7558:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a755c:	b13a      	cbz	r2, 80a756e <_findenv_r+0x32>
 80a755e:	2a3d      	cmp	r2, #61	; 0x3d
 80a7560:	d1f9      	bne.n	80a7556 <_findenv_r+0x1a>
 80a7562:	4638      	mov	r0, r7
 80a7564:	f000 f8ea 	bl	80a773c <__env_unlock>
 80a7568:	2000      	movs	r0, #0
 80a756a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a756e:	eba8 0809 	sub.w	r8, r8, r9
 80a7572:	46a3      	mov	fp, r4
 80a7574:	f854 0b04 	ldr.w	r0, [r4], #4
 80a7578:	2800      	cmp	r0, #0
 80a757a:	d0f2      	beq.n	80a7562 <_findenv_r+0x26>
 80a757c:	4642      	mov	r2, r8
 80a757e:	4649      	mov	r1, r9
 80a7580:	f7ff fc17 	bl	80a6db2 <strncmp>
 80a7584:	2800      	cmp	r0, #0
 80a7586:	d1f4      	bne.n	80a7572 <_findenv_r+0x36>
 80a7588:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a758c:	eb03 0508 	add.w	r5, r3, r8
 80a7590:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a7594:	2b3d      	cmp	r3, #61	; 0x3d
 80a7596:	d1ec      	bne.n	80a7572 <_findenv_r+0x36>
 80a7598:	f8da 3000 	ldr.w	r3, [sl]
 80a759c:	4638      	mov	r0, r7
 80a759e:	ebab 0303 	sub.w	r3, fp, r3
 80a75a2:	109b      	asrs	r3, r3, #2
 80a75a4:	6033      	str	r3, [r6, #0]
 80a75a6:	f000 f8c9 	bl	80a773c <__env_unlock>
 80a75aa:	1c68      	adds	r0, r5, #1
 80a75ac:	e7dd      	b.n	80a756a <_findenv_r+0x2e>
 80a75ae:	bf00      	nop
 80a75b0:	20000148 	.word	0x20000148

080a75b4 <_getenv_r>:
 80a75b4:	b507      	push	{r0, r1, r2, lr}
 80a75b6:	aa01      	add	r2, sp, #4
 80a75b8:	f7ff ffc0 	bl	80a753c <_findenv_r>
 80a75bc:	b003      	add	sp, #12
 80a75be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a75c4 <__gettzinfo>:
 80a75c4:	4800      	ldr	r0, [pc, #0]	; (80a75c8 <__gettzinfo+0x4>)
 80a75c6:	4770      	bx	lr
 80a75c8:	200000f0 	.word	0x200000f0

080a75cc <gmtime_r>:
 80a75cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a75d0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a75d4:	460c      	mov	r4, r1
 80a75d6:	2300      	movs	r3, #0
 80a75d8:	4630      	mov	r0, r6
 80a75da:	4639      	mov	r1, r7
 80a75dc:	4a4e      	ldr	r2, [pc, #312]	; (80a7718 <gmtime_r+0x14c>)
 80a75de:	f000 f8b3 	bl	80a7748 <__aeabi_ldivmod>
 80a75e2:	4639      	mov	r1, r7
 80a75e4:	4605      	mov	r5, r0
 80a75e6:	2300      	movs	r3, #0
 80a75e8:	4630      	mov	r0, r6
 80a75ea:	4a4b      	ldr	r2, [pc, #300]	; (80a7718 <gmtime_r+0x14c>)
 80a75ec:	f000 f8ac 	bl	80a7748 <__aeabi_ldivmod>
 80a75f0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a75f4:	2a00      	cmp	r2, #0
 80a75f6:	bfbc      	itt	lt
 80a75f8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a75fc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a7600:	fbb2 f1f0 	udiv	r1, r2, r0
 80a7604:	fb00 2211 	mls	r2, r0, r1, r2
 80a7608:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a760c:	60a1      	str	r1, [r4, #8]
 80a760e:	fbb2 f1f0 	udiv	r1, r2, r0
 80a7612:	fb00 2211 	mls	r2, r0, r1, r2
 80a7616:	6061      	str	r1, [r4, #4]
 80a7618:	f04f 0107 	mov.w	r1, #7
 80a761c:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 80a7620:	bfac      	ite	ge
 80a7622:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 80a7626:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 80a762a:	6022      	str	r2, [r4, #0]
 80a762c:	1cda      	adds	r2, r3, #3
 80a762e:	fb92 f1f1 	sdiv	r1, r2, r1
 80a7632:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80a7636:	1a52      	subs	r2, r2, r1
 80a7638:	bf48      	it	mi
 80a763a:	3207      	addmi	r2, #7
 80a763c:	2b00      	cmp	r3, #0
 80a763e:	4d37      	ldr	r5, [pc, #220]	; (80a771c <gmtime_r+0x150>)
 80a7640:	61a2      	str	r2, [r4, #24]
 80a7642:	bfbd      	ittte	lt
 80a7644:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80a7648:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80a764c:	fb92 f5f5 	sdivlt	r5, r2, r5
 80a7650:	fb93 f5f5 	sdivge	r5, r3, r5
 80a7654:	4832      	ldr	r0, [pc, #200]	; (80a7720 <gmtime_r+0x154>)
 80a7656:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a765a:	fb00 3005 	mla	r0, r0, r5, r3
 80a765e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80a7662:	fbb0 f2f2 	udiv	r2, r0, r2
 80a7666:	fbb0 f1f3 	udiv	r1, r0, r3
 80a766a:	4402      	add	r2, r0
 80a766c:	1a52      	subs	r2, r2, r1
 80a766e:	492d      	ldr	r1, [pc, #180]	; (80a7724 <gmtime_r+0x158>)
 80a7670:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a7674:	fbb0 f1f1 	udiv	r1, r0, r1
 80a7678:	1a52      	subs	r2, r2, r1
 80a767a:	fbb2 f1fc 	udiv	r1, r2, ip
 80a767e:	2764      	movs	r7, #100	; 0x64
 80a7680:	fbb2 f3f3 	udiv	r3, r2, r3
 80a7684:	fbb1 f6f7 	udiv	r6, r1, r7
 80a7688:	2299      	movs	r2, #153	; 0x99
 80a768a:	1af3      	subs	r3, r6, r3
 80a768c:	4403      	add	r3, r0
 80a768e:	fb0c 3311 	mls	r3, ip, r1, r3
 80a7692:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80a7696:	f10e 0e02 	add.w	lr, lr, #2
 80a769a:	fbbe f0f2 	udiv	r0, lr, r2
 80a769e:	f04f 0805 	mov.w	r8, #5
 80a76a2:	4342      	muls	r2, r0
 80a76a4:	3202      	adds	r2, #2
 80a76a6:	fbb2 f2f8 	udiv	r2, r2, r8
 80a76aa:	f103 0c01 	add.w	ip, r3, #1
 80a76ae:	ebac 0c02 	sub.w	ip, ip, r2
 80a76b2:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80a76b6:	4596      	cmp	lr, r2
 80a76b8:	bf94      	ite	ls
 80a76ba:	2202      	movls	r2, #2
 80a76bc:	f06f 0209 	mvnhi.w	r2, #9
 80a76c0:	4410      	add	r0, r2
 80a76c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a76c6:	fb02 1505 	mla	r5, r2, r5, r1
 80a76ca:	2801      	cmp	r0, #1
 80a76cc:	bf98      	it	ls
 80a76ce:	3501      	addls	r5, #1
 80a76d0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a76d4:	d30d      	bcc.n	80a76f2 <gmtime_r+0x126>
 80a76d6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a76da:	61e3      	str	r3, [r4, #28]
 80a76dc:	2300      	movs	r3, #0
 80a76de:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a76e2:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80a76e6:	f8c4 c00c 	str.w	ip, [r4, #12]
 80a76ea:	4620      	mov	r0, r4
 80a76ec:	6223      	str	r3, [r4, #32]
 80a76ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a76f2:	078a      	lsls	r2, r1, #30
 80a76f4:	d102      	bne.n	80a76fc <gmtime_r+0x130>
 80a76f6:	fb07 1616 	mls	r6, r7, r6, r1
 80a76fa:	b95e      	cbnz	r6, 80a7714 <gmtime_r+0x148>
 80a76fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a7700:	fbb1 f6f2 	udiv	r6, r1, r2
 80a7704:	fb02 1216 	mls	r2, r2, r6, r1
 80a7708:	fab2 f282 	clz	r2, r2
 80a770c:	0952      	lsrs	r2, r2, #5
 80a770e:	333b      	adds	r3, #59	; 0x3b
 80a7710:	4413      	add	r3, r2
 80a7712:	e7e2      	b.n	80a76da <gmtime_r+0x10e>
 80a7714:	2201      	movs	r2, #1
 80a7716:	e7fa      	b.n	80a770e <gmtime_r+0x142>
 80a7718:	00015180 	.word	0x00015180
 80a771c:	00023ab1 	.word	0x00023ab1
 80a7720:	fffdc54f 	.word	0xfffdc54f
 80a7724:	00023ab0 	.word	0x00023ab0

080a7728 <__retarget_lock_acquire>:
 80a7728:	4770      	bx	lr

080a772a <__retarget_lock_acquire_recursive>:
 80a772a:	4770      	bx	lr

080a772c <__retarget_lock_release>:
 80a772c:	4770      	bx	lr

080a772e <__retarget_lock_release_recursive>:
 80a772e:	4770      	bx	lr

080a7730 <__env_lock>:
 80a7730:	4801      	ldr	r0, [pc, #4]	; (80a7738 <__env_lock+0x8>)
 80a7732:	f7ff bffa 	b.w	80a772a <__retarget_lock_acquire_recursive>
 80a7736:	bf00      	nop
 80a7738:	200005d9 	.word	0x200005d9

080a773c <__env_unlock>:
 80a773c:	4801      	ldr	r0, [pc, #4]	; (80a7744 <__env_unlock+0x8>)
 80a773e:	f7ff bff6 	b.w	80a772e <__retarget_lock_release_recursive>
 80a7742:	bf00      	nop
 80a7744:	200005d9 	.word	0x200005d9

080a7748 <__aeabi_ldivmod>:
 80a7748:	b97b      	cbnz	r3, 80a776a <__aeabi_ldivmod+0x22>
 80a774a:	b972      	cbnz	r2, 80a776a <__aeabi_ldivmod+0x22>
 80a774c:	2900      	cmp	r1, #0
 80a774e:	bfbe      	ittt	lt
 80a7750:	2000      	movlt	r0, #0
 80a7752:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a7756:	e006      	blt.n	80a7766 <__aeabi_ldivmod+0x1e>
 80a7758:	bf08      	it	eq
 80a775a:	2800      	cmpeq	r0, #0
 80a775c:	bf1c      	itt	ne
 80a775e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a7762:	f04f 30ff 	movne.w	r0, #4294967295
 80a7766:	f7ff b9a9 	b.w	80a6abc <__aeabi_idiv0>
 80a776a:	f1ad 0c08 	sub.w	ip, sp, #8
 80a776e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a7772:	2900      	cmp	r1, #0
 80a7774:	db09      	blt.n	80a778a <__aeabi_ldivmod+0x42>
 80a7776:	2b00      	cmp	r3, #0
 80a7778:	db1a      	blt.n	80a77b0 <__aeabi_ldivmod+0x68>
 80a777a:	f7ff f835 	bl	80a67e8 <__udivmoddi4>
 80a777e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a7782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7786:	b004      	add	sp, #16
 80a7788:	4770      	bx	lr
 80a778a:	4240      	negs	r0, r0
 80a778c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a7790:	2b00      	cmp	r3, #0
 80a7792:	db1b      	blt.n	80a77cc <__aeabi_ldivmod+0x84>
 80a7794:	f7ff f828 	bl	80a67e8 <__udivmoddi4>
 80a7798:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a779c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a77a0:	b004      	add	sp, #16
 80a77a2:	4240      	negs	r0, r0
 80a77a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a77a8:	4252      	negs	r2, r2
 80a77aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a77ae:	4770      	bx	lr
 80a77b0:	4252      	negs	r2, r2
 80a77b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a77b6:	f7ff f817 	bl	80a67e8 <__udivmoddi4>
 80a77ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a77be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a77c2:	b004      	add	sp, #16
 80a77c4:	4240      	negs	r0, r0
 80a77c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a77ca:	4770      	bx	lr
 80a77cc:	4252      	negs	r2, r2
 80a77ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a77d2:	f7ff f809 	bl	80a67e8 <__udivmoddi4>
 80a77d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a77da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a77de:	b004      	add	sp, #16
 80a77e0:	4252      	negs	r2, r2
 80a77e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a77e6:	4770      	bx	lr

080a77e8 <dynalib_user>:
 80a77e8:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a77f8:	0000 0000 2323 2023 4157 4e52 4e49 2047     ....### WARNING 
 80a7808:	203a 6f6e 2074 6f63 6e6e 6365 6574 2064     : not connected 
 80a7818:	6f74 6320 6f6c 6475 202e 6163 6e6e 746f     to cloud. cannot
 80a7828:	7720 6972 6574 7420 206f 6164 6174 6162      write to databa
 80a7838:	6573 7b00 7322 6174 7574 2273 223a 7325     se.{"status":"%s
 80a7848:	2c22 7422 6d69 2265 223a 2e25 6432 253a     ","time":"%.2d:%
 80a7858:	322e 3a64 2e25 6432 2c22 6422 7461 2265     .2d:%.2d","date"
 80a7868:	223a 2e25 6432 252e 322e 2e64 2e25 6432     :"%.2d.%.2d.%.2d
 80a7878:	2c22 6c22 6575 7466 7265 3a22 5022 4f48     ","luefter":"PHO
 80a7888:	4f54 224e 222c 706f 6974 6e6f 3a22 2522     TON","option":"%
 80a7898:	2273 007d 6177 7373 7265 7473 6e61 0064     s"}.wasserstand.
 80a78a8:	227b 7473 7461 7375 3a22 2522 2273 222c     {"status":"%s","
 80a78b8:	6974 656d 3a22 2522 322e 3a64 2e25 6432     time":"%.2d:%.2d
 80a78c8:	253a 322e 2264 222c 6164 6574 3a22 2522     :%.2d","date":"%
 80a78d8:	322e 2e64 2e25 6432 252e 322e 2264 222c     .2d.%.2d.%.2d","
 80a78e8:	756c 6665 6574 2272 223a 4850 544f 4e4f     luefter":"PHOTON
 80a78f8:	2c22 6f22 7470 6f69 226e 223a 7325 2520     ","option":"%s %
 80a7908:	6432 7d22 2000 7325 2520 2064 5000 4d55     2d"}. %s %d .PUM
 80a7918:	4550 4d20 4941 204e 4f43 4e55 4454 574f     PE MAIN COUNTDOW
 80a7928:	204e 4f4e 2057 6300 6e6f 7274 6c6f 2000     N NOW .control. 
 80a7938:	6c53 6565 2070 6f4d 6564 6520 616e 6c62     Sleep Mode enabl
 80a7948:	6465 0020 4320 656c 7261 7220 7365 7265     ed . Clear reser
 80a7958:	6576 7220 7065 7465 7469 6f69 206e 6f63     ve repetition co
 80a7968:	6e75 6574 2072 2000 6c53 6565 2070 6f4d     unter . Sleep Mo
 80a7978:	6564 6420 7369 6261 656c 2064 5400 4d45     de disabled .TEM
 80a7988:	2050 4e49 253a 2064 554f 3a54 6425 2000     P IN:%d OUT:%d. 
 80a7998:	7453 726f 2065 4f43 544e 4f52 204c 6e69     Store CONTROL in
 80a79a8:	4520 5045 4f52 204d 2000 6c55 7274 7361      EEPROM . Ultras
 80a79b8:	6e6f 6369 0020 5020 6572 6170 6572 5320     onic . Prepare S
 80a79c8:	656c 7065 0020 5020 6f68 6f74 206e 5748     leep . Photon HW
 80a79d8:	4920 2044 7000 7261 6974 6c63 2f65 6564      ID .particle/de
 80a79e8:	6976 6563 6e2f 6d61 0065 7520 746c 6172     vice/name. ultra
 80a79f8:	7320 6e6f 6369 6420 7369 6174 636e 2065      sonic distance 
 80a7a08:	2000 6c75 7274 2061 6964 7473 6e61 6563     . ultra distance
 80a7a18:	3a20 2520 2064 6d6d 5700 5241 494e 474e      : %d mm.WARNING
 80a7a28:	203a 6146 6c69 6465 7420 206f 6572 6461     : Failed to read
 80a7a38:	7520 746c 6172 6f73 696e 2063 6573 736e      ultrasonic sens
 80a7a48:	726f 5700 5341 4553 0052 7520 746c 6172     or.WASSER. ultra
 80a7a58:	6520 7272 726f 3a20 2520 2064 2000 6c75      error : %d . ul
 80a7a68:	7274 2061 6964 7473 6e61 6563 6120 6576     tra distance ave
 80a7a78:	6172 6567 3a20 2520 2064 6d6d 6400 7369     rage : %d mm.dis
 80a7a88:	6174 636e 2065 203a 2000 6c75 7274 2061     tance : . ultra 
 80a7a98:	656c 6576 206c 7661 7265 6761 2065 203a     level average : 
 80a7aa8:	6425 6d20 006d 4320 4352 4520 7272 726f     %d mm. CRC Error
 80a7ab8:	0020 4720 7465 5420 6d65 6570 6172 7574      . Get Temperatu
 80a7ac8:	6572 0020 6553 736e 726f 4920 2044 6425     re .Sensor ID %d
 80a7ad8:	6e20 6d75 253d 2064 6554 706d 7265 7461      num=%d Temperat
 80a7ae8:	7275 2065 2e25 6632 4320 2020 0d0a 7300     ure %.2f C  ...s
 80a7af8:	6e65 6f73 2072 6469 5d00 0020 6925 2500     ensor id.] .%i.%
 80a7b08:	696c 4300 6e6f 656e 7463 6e69 2067 6f74     li.Connecting to
 80a7b18:	0020 7453 7469 657a 626e 7275 0067 4342      .Stitzenburg.BC
 80a7b28:	5f24 6c63 2475 345f 3732 0037 7020 6f72     $_clu$_4277. pro
 80a7b38:	6f70 6573 2064 6c73 6565 2070 7564 6172     posed sleep dura
 80a7b48:	6974 6e6f 203a 6425 6d20 6e69 7475 7365     tion: %d minutes
 80a7b58:	5300 454c 5045 6420 7369 6261 656c 2064     .SLEEP disabled 
 80a7b68:	7962 4820 2057 6970 206e 4300 4e4f 5254     by HW pin .CONTR
 80a7b78:	4c4f 5300 454c 5045 6420 7369 6261 656c     OL.SLEEP disable
 80a7b88:	2064 7962 5320 2057 2000 6f64 746e 6c53     d by SW . dontSl
 80a7b98:	6565 2070 6970 206e 203a 6425 0020 2520     eep pin : %d . %
 80a7ba8:	322e 2d64 2e25 6432 252d 2064 2e25 6432     .2d-%.2d-%d %.2d
 80a7bb8:	253a 322e 3a64 2e25 6432 0020 6e69 7000     :%.2d:%.2d .in.p
 80a7bc8:	6d77 6400 0077 7761 4900 766e 6c61 6469     wm.dw.aw.Invalid
 80a7bd8:	4820 2057 6d63 3a64 0020 6552 6461 2079      HW cmd: .Ready 
 80a7be8:	7028 6e69 3a67 0020 736d 2e29 4900 766e     (ping: .ms)..Inv
 80a7bf8:	6c61 6469 6120 7475 2068 6f74 656b 006e     alid auth token.
 80a7c08:	6f43 6e6e 6365 2074 6166 6c69 6465 202e     Connect failed. 
 80a7c18:	6f63 6564 203a 5000 6361 656b 2074 6f74     code: .Packet to
 80a7c28:	206f 6962 3a67 0020 6552 6461 0079 6552     o big: .Ready.Re
 80a7c38:	6964 6572 7463 6e69 2067 6f74 0020 6553     directing to .Se
 80a7c48:	7672 7265 203a 4800 6165 7472 6562 7461     rver: .Heartbeat
 80a7c58:	7420 6d69 6f65 7475 4c00 676f 6e69 7420      timeout.Login t
 80a7c68:	6d69 6f65 7475 7600 0077 4820 6c65 6f6c     imeout.vw. Hello
 80a7c78:	0020 6120 3a20 5320 6174 7574 0073 6220      . a : Status. b
 80a7c88:	3a20 4220 756c 656d 206e 6967 7365 6573      : Blumen giesse
 80a7c98:	006e 6420 3a20 5a20 6965 6474 7561 7265     n. d : Zeitdauer
 80a7ca8:	4720 6569 7373 6e65 7620 7265 6972 676e      Giessen verring
 80a7cb8:	7265 006e 6920 3a20 5a20 6965 6474 7561     ern. i : Zeitdau
 80a7cc8:	7265 4720 6569 7373 6e65 6520 6872 656f     er Giessen erhoe
 80a7cd8:	6568 006e 7320 3a20 7320 656c 7065 6520     hen. s : sleep e
 80a7ce8:	616e 6c62 6465 0020 7020 3a20 7320 656c     nabled . p : sle
 80a7cf8:	7065 6420 7369 6261 656c 2064 2000 2075     ep disabled . u 
 80a7d08:	203a 6c63 6165 2072 6572 6573 7672 2065     : clear reserve 
 80a7d18:	6572 6570 6974 6974 6e6f 6320 756f 746e     repetition count
 80a7d28:	7265 0020 7720 3a20 7320 6f74 6572 6320     er . w : store c
 80a7d38:	6e6f 6966 2067 6f74 4520 5045 4f52 204d     onfig to EEPROM 
 80a7d48:	2000 2079 203a 6f67 6f74 7320 656c 7065     . y : goto sleep
 80a7d58:	0020 7820 3a20 7520 746c 6172 7320 6e6f      . x : ultra son
 80a7d68:	6369 6d20 6165 7573 6572 656d 746e 0020     ic measurement .
 80a7d78:	5420 7265 696d 616e 206c 6964 6173 6c62      Terminal disabl
 80a7d88:	6465 2020 5400 5245 494d 414e 204c 6964     ed  .TERMINAL di
 80a7d98:	6173 6c62 6465 6220 2079 6c42 6e79 206b     sabled by Blynk 
 80a7da8:	7542 7474 6e6f 5300 454c 5045 4420 5349     Button.SLEEP DIS
 80a7db8:	4241 454c 2044 5942 4220 594c 4b4e 4220     ABLED BY BLYNK B
 80a7dc8:	5455 4f54 204e 2000 6c53 6565 2070 6f4d     UTTON . Sleep Mo
 80a7dd8:	6564 4420 7369 6261 656c 2064 7962 6220     de Disabled by b
 80a7de8:	796c 6b6e 6220 7475 6f74 206e 5300 454c     lynk button .SLE
 80a7df8:	5045 4520 414e 4c42 4445 4220 2059 4c42     EP ENABLED BY BL
 80a7e08:	4e59 204b 5542 5454 4e4f 0020 5320 656c     YNK BUTTON . Sle
 80a7e18:	7065 4d20 646f 2065 6e45 6261 656c 2064     ep Mode Enabled 
 80a7e28:	7962 6220 796c 6b6e 6220 7475 6f74 206e     by blynk button 
 80a7e38:	5400 6e61 666b 6575 6c6c 6e65 6720 7365     .Tankfuellen ges
 80a7e48:	6174 7472 7465 6220 2079 4c42 4e59 204b     tartet by BLYNK 
 80a7e58:	7562 7474 6e6f 0020 5420 6e61 206b 7566     button . Tank fu
 80a7e68:	6c65 656c 206e 7962 4220 594c 4b4e 6220     ellen by BLYNK b
 80a7e78:	7475 6f74 206e 0020 6552 6573 7672 2065     utton  .Reserve 
 80a7e88:	7550 706d 2065 666f 2066 7962 4220 594c     Pumpe off by BLY
 80a7e98:	4b4e 6220 7475 6f74 206e 2000 6552 6573     NK button . Rese
 80a7ea8:	7672 2065 7550 706d 2065 7561 6773 7365     rve Pumpe ausges
 80a7eb8:	6863 6c61 6574 2074 7962 6220 7475 6f74     chaltet by butto
 80a7ec8:	206e 4200 756c 656d 206e 6967 7365 6573     n .Blumen giesse
 80a7ed8:	206e 6564 6b61 6974 6976 7265 2074 7962     n deaktiviert by
 80a7ee8:	4220 796c 6b6e 4220 7475 6f74 206e 4200      Blynk Button .B
 80a7ef8:	756c 656d 206e 6967 7365 6573 206e 6564     lumen giessen de
 80a7f08:	6b61 6974 6976 7265 2074 4200 756c 656d     aktiviert .Blume
 80a7f18:	206e 6967 7365 6573 206e 6b61 6974 6976     n giessen aktivi
 80a7f28:	7265 2074 7962 4220 796c 6b6e 4220 7475     ert by Blynk But
 80a7f38:	6f74 206e 4200 756c 656d 206e 6967 7365     ton .Blumen gies
 80a7f48:	6573 206e 6b61 6974 6976 7265 2074 4d00     sen aktiviert .M
 80a7f58:	6961 206e 7550 706d 2065 6965 676e 7365     ain Pumpe einges
 80a7f68:	6863 6c61 6574 2074 7962 4220 594c 4b4e     chaltet by BLYNK
 80a7f78:	6220 2079 7562 7474 6e6f 0020 4d20 6961      by button . Mai
 80a7f88:	206e 7550 706d 2065 6965 676e 7365 6863     n Pumpe eingesch
 80a7f98:	6c61 6574 2074 7962 4220 594c 4b4e 6220     altet by BLYNK b
 80a7fa8:	7475 6f74 206e 0020 4d20 6961 206e 7550     utton  . Main Pu
 80a7fb8:	706d 2065 7561 6773 7365 6863 6c61 6574     mpe ausgeschalte
 80a7fc8:	2074 7962 4220 594c 4b4e 6220 7475 6f74     t by BLYNK butto
 80a7fd8:	206e 2500 2073 6425 7200 6365 6965 6576     n .%s %d.receive
 80a7fe8:	2064 3a20 0020 666f 0066 4157 5353 5245     d  : .off.WASSER
 80a7ff8:	5453 4e41 2044 203a 4947 5345 4553 204e     STAND : GIESSEN 
 80a8008:	4544 4b41 4954 4956 5245 2054 7962 5720     DEAKTIVIERT by W
 80a8018:	6265 6f48 6b6f 5700 5341 4553 5352 4154     ebHook.WASSERSTA
 80a8028:	444e 3a20 4720 4549 5353 4e45 4120 544b     ND : GIESSEN AKT
 80a8038:	5649 4549 5452 6220 2079 6557 4862 6f6f     IVIERT by WebHoo
 80a8048:	006b 7420 6f6e 3a77 0020 3231 2056 2020     k. tnow: .12V   
 80a8058:	2020 6d5b 5d56 3a20 0020 4120 5069 6d75       [mV] : . AiPum
 80a8068:	6570 614d 6e69 2020 2020 203a 6425 5b20     peMain    : %d [
 80a8078:	566d 005d 6941 7550 706d 4d65 6961 206e     mV].AiPumpeMain 
 80a8088:	2020 5b20 566d 205d 203a 4100 4344 2000        [mV] : .ADC. 
 80a8098:	6941 7550 706d 5265 7365 7265 6576 3a20     AiPumpeReserve :
 80a80a8:	2520 2064 6d5b 5d56 4100 5069 6d75 6570      %d [mV].AiPumpe
 80a80b8:	6552 6573 7672 2065 6d5b 5d56 3a20 0020     Reserve [mV] : .
 80a80c8:	414d 4e49 5020 6d75 6570 6920 2073 4e4f     MAIN Pumpe is ON
 80a80d8:	4d00 4941 204e 7550 706d 2065 7369 4f20     .MAIN Pumpe is O
 80a80e8:	204e 5300 4154 5554 0053 4552 4553 5652     N .STATUS.RESERV
 80a80f8:	2045 7550 706d 2065 7369 2074 4e4f 5200     E Pumpe ist ON.R
 80a8108:	5345 5245 4556 5020 6d75 6570 6920 2073     ESERVE Pumpe is 
 80a8118:	4e4f 0020 5546 4b4e 5020 6d75 6570 6920     ON .FUNK Pumpe i
 80a8128:	7473 4f20 004e 5546 4b4e 5020 6d75 6570     st ON.FUNK Pumpe
 80a8138:	6920 2073 4e4f 0020 7720 7461 7265 656c      is ON . waterle
 80a8148:	6576 3a6c 2520 2064 2000 6977 6966 253d     vel: %d . wifi=%
 80a8158:	2073 6c63 756f 3d64 7325 6620 7361 5f74     s cloud=%s fast_
 80a8168:	6f63 6e75 6574 3d72 6425 0020 6c63 0072     counter=%d .clr.
 80a8178:	6576 7372 6f69 206e 2020 2020 2020 2020     version         
 80a8188:	2020 3a20 0020 6f64 746e 6c53 6565 2070        : .dontSleep 
 80a8198:	2020 2020 2020 2020 3a20 0020 6f64 746e              : .dont
 80a81a8:	6947 7365 6573 206e 2020 2020 2020 3a20     Giessen        :
 80a81b8:	0020 7570 706d 5f65 6f63 6e75 5f74 6f64      .pumpe_count_do
 80a81c8:	6e77 2020 3a20 0020 6572 6573 7672 5f65     wn   : .reserve_
 80a81d8:	6572 6570 6974 6974 6e6f 3a73 0020 6f64     repetitions: .do
 80a81e8:	746e 6947 7365 6573 3a6e 7000 6d75 6570     ntGiessen:.pumpe
 80a81f8:	6320 756f 746e 6420 776f 3a6e 5700 5341      count down:.WAS
 80a8208:	4553 5352 4154 444e 3a20 0020 4157 5353     SERSTAND : .WASS
 80a8218:	5245 5453 4e41 2044 203a 4c42 4d55 4e45     ERSTAND : BLUMEN
 80a8228:	4720 4549 5353 4e45 4920 5453 4420 4145      GIESSEN IST DEA
 80a8238:	544b 5649 4549 5452 0020 4157 4e52 4e49     KTIVIERT .WARNIN
 80a8248:	2047 203a 6957 6465 7265 6f68 756c 676e     G : Wiederholung
 80a8258:	6e65 6420 7365 5420 6e61 666b 6575 6c6c     en des Tankfuell
 80a8268:	6e65 2073 6575 6562 7372 6863 6972 7474     ens ueberschritt
 80a8278:	6e65 3d20 0020 6574 706d 6920 206e 3a20     en = .temp in  :
 80a8288:	0020 6574 706d 6f20 7475 3a20 0020 2d20      .temp out : . -
 80a8298:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a82a8:	2d2d 2d2d 2d2d 0020 2a20 2a2a 5020 4552     ------ . *** PRE
 80a82b8:	4150 4552 5320 454c 5045 2a20 2a2a 0020     PARE SLEEP *** .
 80a82c8:	2323 2323 5320 454c 5045 4d20 6e69 7475     #### SLEEP Minut
 80a82d8:	7365 2320 2323 2023 203a 2000 2a2a 202a     es #### : . *** 
 80a82e8:	4157 454b 5520 2050 2a2a 202a 2300 2323     WAKE UP *** .###
 80a82f8:	2023 4157 454b 5520 2050 2323 2323 5700     # WAKE UP ####.W
 80a8308:	4b41 2045 5055 5000 4d55 4550 4d20 4941     AKE UP.PUMPE MAI
 80a8318:	204e 4f43 4e55 4454 574f 204e 5349 0020     N COUNTDOWN IS .
 80a8328:	6f68 6b6f 722d 7365 6f70 736e 2f65 6177     hook-response/wa
 80a8338:	6574 4372 6e6f 7274 6c6f 7400 6d65 2070     terControl.temp 
 80a8348:	6e69 3a20 2520 2064 7420 6d65 2070 756f     in : %d  temp ou
 80a8358:	2074 203a 6425 0020 5420 7265 696d 616e     t : %d . Termina
 80a8368:	206c 6e65 6261 656c 2064 0020 4554 4d52     l enabled  .TERM
 80a8378:	4e49 4c41 6520 616e 6c62 6465 6220 2079     INAL enabled by 
 80a8388:	6c42 6e79 206b 7542 7474 6e6f 2d00 2d2d     Blynk Button.---
 80a8398:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a83a8:	2d2d 002d 2020 2020 2020 6557 636c 6d6f     ---.      Welcom
 80a83b8:	0065 0a0d 2020 2020 5f5f 205f 5f20 205f     e...    ___  __ 
 80a83c8:	2020 2020 2020 2020 5f20 0d5f 200a 2020              __..   
 80a83d8:	202f 205f 2f29 2f20 205f 5f5f 5f5f 205f     / _ )/ /_ _____ 
 80a83e8:	2f20 2f20 5f5f 0a0d 2020 202f 205f 2f20      / /__..  / _  /
 80a83f8:	2f20 2f20 202f 202f 205f 2f5c 2020 5f27      / // / _ \/  '_
 80a8408:	0d2f 200a 5f2f 5f5f 2f5f 2f5f 5f5c 202c     /.. /____/_/\_, 
 80a8418:	5f2f 2f2f 2f5f 2f5f 5f5c 0d5c 200a 2020     /_//_/_/\_\..   
 80a8428:	2020 2020 2f20 5f5f 2f5f 7620 2e30 2e36          /___/ v0.6.
 80a8438:	2031 6e6f 5020 7261 6974 6c63 2065 6850     1 on Particle Ph
 80a8448:	746f 6e6f 0a0d 6200 796c 6b6e 632d 6f6c     oton...blynk-clo
 80a8458:	6475 632e 6d6f 2300 2323 2023 4553 5554     ud.com.#### SETU
 80a8468:	2f50 4552 4553 2054 6556 7372 6f69 206e     P/RESET Version 
 80a8478:	5200 5345 5445 5200 4c53 2034 6261 6567     .RESET.RSL4 abge
 80a8488:	6373 6168 746c 7465 5200 4c53 2034 6965     schaltet.RSL4 ei
 80a8498:	676e 7365 6863 6c61 6574 0074 6554 6d72     ngeschaltet.Term
 80a84a8:	6e69 6c61 6420 7369 6261 656c 0064 4554     inal disabled.TE
 80a84b8:	4d52 4e49 4c41 6420 7369 6261 656c 2064     RMINAL disabled 
 80a84c8:	7962 7420 6d69 6f65 7475 0a00 6f59 2075     by timeout..You 
 80a84d8:	6173 6469 003a 7220 6c73 3920 6520 6e69     said:. rsl 9 ein
 80a84e8:	0020 7220 6c73 3920 6120 7375 0020 7220      . rsl 9 aus . r
 80a84f8:	6c73 3820 6520 6e69 0020 7220 6c73 3820     sl 8 ein . rsl 8
 80a8508:	6120 7375 0020 7220 6c73 3120 6520 6e69      aus . rsl 1 ein
 80a8518:	0020 7220 6c73 3120 6120 7375 0020 7220      . rsl 1 aus . r
 80a8528:	6c73 3320 6520 6e69 0020 7220 6c73 3320     sl 3 ein . rsl 3
 80a8538:	6120 7375 0020 7720 6965 6e68 6361 7468      aus . weihnacht
 80a8548:	6e65 6520 6e69 2020 2000 6577 6869 616e     en ein  . weihna
 80a8558:	6863 6574 206e 7561 2073 0020               chten aus  .

080a8564 <_ZTV14WidgetTerminal>:
	...
 80a856c:	08ab 080a 08ad 080a 08bb 080a 449d 080a     .............D..
 80a857c:	15ed 080a 08a5 080a                         ........

080a8584 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
 80a8584:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e36     blnkinf.ver.0.6.
 80a8594:	0031 2d68 6562 7461 3100 0030 7562 6666     1.h-beat.10.buff
 80a85a4:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
 80a85b4:	6974 6c63 2065 6850 746f 6e6f 6200 6975     ticle Photon.bui
 80a85c4:	646c 4a00 6e75 3120 2032 3032 3232 3120     ld.Jun 12 2022 1
 80a85d4:	3a31 3732 323a 0032 0000 4520 5252 524f     1:27:22... ERROR
 80a85e4:	7720 6968 6863 6e20 746f 7620 6c61 6469      which not valid
 80a85f4:	0020 4520 5252 524f 7320 6174 6574 6e20      . ERROR state n
 80a8604:	746f 7620 6c61 6469 0020 6553 646e 2065     ot valid .Sende 
 80a8614:	6f43 6564 3a20 0020 4620 6865 656c 2072     Code : . Fehler 
 80a8624:	203a 6f6b 6e6e 6574 4320 646f 2065 696e     : konnte Code ni
 80a8634:	6863 2074 6966 646e 6e65 0020 3030 3130     cht finden .0001
 80a8644:	3030 3130 3030 3030 3130 3130 3130 3130     0001000001010101
 80a8654:	3030 3031 3000 3030 3031 3030 3031 3030     0010.00010001000
 80a8664:	3030 3031 3031 3031 3031 3030 0031 3030     0010101010001.00
 80a8674:	3130 3030 3130 3030 3130 3030 3130 3130     0100010001000101
 80a8684:	3130 3130 3030 3000 3030 3031 3030 3031     010100.000100010
 80a8694:	3030 3031 3030 3031 3031 3031 3030 0031     001000101010001.
 80a86a4:	3030 3130 3030 3130 3030 3130 3130 3030     0001000100010100
 80a86b4:	3130 3130 3030 3031 3000 3030 3031 3030     01010010.0001000
 80a86c4:	3031 3030 3031 3031 3030 3031 3031 3030     1000101000101000
 80a86d4:	0031 5546 4b4e 502d 4d55 4550 5220 4c53     1.FUNK-PUMPE RSL
 80a86e4:	2032 4945 474e 5345 4843 4c41 4554 2054     2 EINGESCHALTET 
 80a86f4:	2000 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     . --------------
 80a8704:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a8714:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 202d     --------------- 
 80a8724:	2000 414d 4e49 5020 6d75 6570 7320 6863     . MAIN Pumpe sch
 80a8734:	6c61 6574 206e 203a 6425 5a20 6965 2074     alten : %d Zeit 
 80a8744:	6425 4200 554c 454d 204e 4947 5345 4553     %d.BLUMEN GIESSE
 80a8754:	204e 4542 4947 4e4e 2054 0020 4157 5353     N BEGINNT  .WASS
 80a8764:	5245 5453 4e41 2044 6562 6f66 6572 7020     ERSTAND before p
 80a8774:	6d75 6570 4f20 204e 203a 5700 5341 4553     umpe ON : .WASSE
 80a8784:	5352 4154 444e 5420 4f52 4b43 4e45 4c2d     RSTAND TROCKEN-L
 80a8794:	5541 2d46 4353 5548 5a54 202e 5550 504d     AUF-SCHUTZ. PUMP
 80a87a4:	2045 494e 4843 2054 4945 534e 4843 4c41     E NICHT EINSCHAL
 80a87b4:	4554 004e 4148 5055 2d54 5550 504d 2045     TEN.HAUPT-PUMPE 
 80a87c4:	4945 474e 5345 4843 4c41 4554 2054 203a     EINGESCHALTET : 
 80a87d4:	4800 5541 5450 502d 4d55 4550 4120 5355     .HAUPT-PUMPE AUS
 80a87e4:	4547 4353 4148 544c 5445 0020 4157 5353     GESCHALTET .WASS
 80a87f4:	5245 5453 4e41 2044 6661 6574 2072 7570     ERSTAND after pu
 80a8804:	706d 2065 464f 2046 203a 5700 5341 4553     mpe OFF : .WASSE
 80a8814:	5352 4154 444e 6720 6665 6c61 656c 206e     RSTAND gefallen 
 80a8824:	6d75 5b20 6d6d 205d 203a 5700 5341 4553     um [mm] : .WASSE
 80a8834:	5352 4154 444e 4220 554c 454d 204e 4947     RSTAND BLUMEN GI
 80a8844:	5345 4553 204e 5245 4f46 474c 4552 4349     ESSEN ERFOLGREIC
 80a8854:	2048 4542 4e45 4544 0054 4420 506f 6d75     H BEENDET. DoPum
 80a8864:	6570 614d 6e69 2020 2020 203a 6425 0020     peMain    : %d .
 80a8874:	6941 7550 706d 4d65 6961 206e 6d5b 5d56     AiPumpeMain [mV]
 80a8884:	3a20 0020 5220 5345 5245 4556 5020 6d75      : . RESERVE Pum
 80a8894:	6570 7320 6863 6c61 6574 206e 203a 6425     pe schalten : %d
 80a88a4:	5a20 6965 2074 6425 5700 5341 4553 5352      Zeit %d.WASSERS
 80a88b4:	4154 444e 6220 6665 726f 2065 6572 2d73     TAND before res-
 80a88c4:	7570 706d 2065 4e4f 3a20 0020 4552 4553     pumpe ON : .RESE
 80a88d4:	5652 2d45 5550 504d 2045 4945 474e 5345     RVE-PUMPE EINGES
 80a88e4:	4843 4c41 4554 2054 5200 5345 5245 4556     CHALTET .RESERVE
 80a88f4:	502d 4d55 4550 4120 5355 4547 4353 4148     -PUMPE AUSGESCHA
 80a8904:	544c 5445 202e 5546 4c45 554c 474e 4e20     LTET. FUELLUNG N
 80a8914:	2e52 0020 4157 5353 5245 5453 4e41 2044     R. .WASSERSTAND 
 80a8924:	6661 6574 2072 6572 2d73 7570 706d 2065     after res-pumpe 
 80a8934:	464f 2046 203a 2000 4157 5353 5245 5453     OFF : . WASSERST
 80a8944:	4e41 2044 4154 4b4e 4620 4555 4c4c 4e45     AND TANK FUELLEN
 80a8954:	4520 4652 4c4f 5247 4945 4843 4220 4545      ERFOLGREICH BEE
 80a8964:	444e 5445 2000 4157 5353 5245 5453 4e41     NDET. WASSERSTAN
 80a8974:	2044 5245 4f52 3a52 5420 4e41 204b 5546     D ERROR: TANK FU
 80a8984:	4c45 454c 204e 6566 6c68 6567 6373 6c68     ELLEN fehlgeschl
 80a8994:	6761 6e65 2000 6f44 7550 706d 5265 7365     agen. DoPumpeRes
 80a89a4:	7265 6576 2020 2020 203a 6425 0020 4120     erve    : %d . A
 80a89b4:	5069 6d75 6570 6552 6573 7672 2065 2020     iPumpeReserve   
 80a89c4:	3a20 2520 2064 6d5b 5d56 4600 4e55 2d4b      : %d [mV].FUNK-
 80a89d4:	5550 504d 2045 5352 324c 4120 5355 4547     PUMPE RSL2 AUSGE
 80a89e4:	4353 4148 544c 5445 0020 5420 6e61 666b     SCHALTET . Tankf
 80a89f4:	6575 6c6c 6e65 2928 0020 5420 4e41 464b     uellen() . TANKF
 80a8a04:	4555 4c4c 4e45 3a20 4e20 4349 5448 4e20     UELLEN : NICHT N
 80a8a14:	544f 4557 444e 4749 0020 5245 4f52 2052     OTWENDIG .ERROR 
 80a8a24:	202d 4241 524f 3a54 5720 6569 6564 6872     - ABORT: Wiederh
 80a8a34:	6c6f 6e75 6567 206e 6564 2073 6154 6b6e     olungen des Tank
 80a8a44:	7566 6c65 656c 736e 7520 6265 7265 6373     fuellens uebersc
 80a8a54:	7268 7469 6574 206e 203d 5700 5341 4553     hritten = .WASSE
 80a8a64:	5352 4154 444e 5420 4e41 464b 4555 4c4c     RSTAND TANKFUELL
 80a8a74:	4e45 3a20 4220 554c 454d 204e 4947 5345     EN : BLUMEN GIES
 80a8a84:	4553 204e 5349 2054 4544 4b41 4954 4956     SEN IST DEAKTIVI
 80a8a94:	5245 2054 5700 5341 4553 5352 4154 444e     ERT .WASSERSTAND
 80a8aa4:	5420 4e41 204b 5546 4c45 454c 204e 6567      TANK FUELLEN ge
 80a8ab4:	7473 7261 6574 2074 7400 6573 0063 6d74     startet .tsec.tm
 80a8ac4:	6961 206e 7473 706f 0000 0000               ain stop....

080a8ad0 <_ZL22BlynkReadHandlerVector>:
 80a8ad0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8ae0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8af0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b00:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b10:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b20:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b30:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b40:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b50:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b60:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b70:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b80:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8b90:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8ba0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8bb0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8bc0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8bd0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8be0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8bf0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c00:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c10:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c20:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c30:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c40:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c50:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c60:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c70:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c80:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8c90:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8ca0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8cb0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..
 80a8cc0:	35e5 080a 35e5 080a 35e5 080a 35e5 080a     .5...5...5...5..

080a8cd0 <_ZL23BlynkWriteHandlerVector>:
 80a8cd0:	35e7 080a 25f1 080a 2621 080a 2651 080a     .5...%..!&..Q&..
 80a8ce0:	2681 080a 26b5 080a 26e5 080a 2715 080a     .&...&...&...'..
 80a8cf0:	2749 080a 2785 080a 27b5 080a 27e5 080a     I'...'...'...'..
 80a8d00:	2825 080a 16e9 080a 2185 080a 35e7 080a     %(.......!...5..
 80a8d10:	0d4d 080a 0d67 080a 35e7 080a 35e7 080a     M...g....5...5..
 80a8d20:	35e7 080a 35e7 080a 2579 080a 35e7 080a     .5...5..y%...5..
 80a8d30:	35e7 080a 1729 080a 176d 080a 17b1 080a     .5..)...m.......
 80a8d40:	17e5 080a 1821 080a 1865 080a 18a9 080a     ....!...e.......
 80a8d50:	18e9 080a 35e7 080a 35e7 080a 35e7 080a     .....5...5...5..
 80a8d60:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8d70:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8d80:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8d90:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8da0:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8db0:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8dc0:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8dd0:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8de0:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8df0:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e00:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e10:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e20:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e30:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e40:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e50:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e60:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e70:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e80:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8e90:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8ea0:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8eb0:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8ec0:	35e7 080a 35e7 080a 35e7 080a 35e7 080a     .5...5...5...5..
 80a8ed0:	6977 6972 676e 5400 5043 6c43 6569 746e     wiring.TCPClient
 80a8ee0:	7320 636f 656b 3d74 7825 0000                socket=%x..

080a8eec <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a8ef4:	3e59 080a 3e81 080a 426f 080a 3e8f 080a     Y>...>..oB...>..
 80a8f04:	3e5d 080a                                   ]>..

080a8f08 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a8f10 <_ZTV9TCPClient>:
	...
 80a8f18:	3e95 080a 3ec9 080a 3de1 080a 3dfb 080a     .>...>...=...=..
 80a8f28:	4071 080a 3e23 080a 3efd 080a 3e57 080a     q@..#>...>..W>..
 80a8f38:	3f91 080a 4275 080a 3f2b 080a 40e5 080a     .?..uB..+?...@..
 80a8f48:	4193 080a 414b 080a 3e0b 080a 4159 080a     .A..KA...>..YA..
 80a8f58:	3edd 080a 7061 0070 5925 252d 2d6d 6425     .>..app.%Y-%m-%d
 80a8f68:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a8f78:	6d69 0065                                   ime.

080a8f7c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a8f84:	49c1 080a 49c7 080a 4a05 080a 49d5 080a     .I...I...J...I..
 80a8f94:	49c3 080a                                   .I..

080a8f98 <_ZTV9IPAddress>:
	...
 80a8fa0:	4efb 080a 4ef9 080a 4f2d 080a               .N...N..-O..

080a8fac <_ZTV9USBSerial>:
	...
 80a8fb4:	4fc7 080a 502d 080a 5005 080a 449d 080a     .O..-P...P...D..
 80a8fc4:	4ff7 080a 4fc9 080a 4fd9 080a 5027 080a     .O...O...O..'P..
 80a8fd4:	4fe9 080a 4fc1 080a                         .O...O..

080a8fdc <_ZTV11USARTSerial>:
	...
 80a8fe4:	5125 080a 518d 080a 5169 080a 449d 080a     %Q...Q..iQ...D..
 80a8ff4:	5139 080a 5155 080a 5147 080a 5163 080a     9Q..UQ..GQ..cQ..
 80a9004:	5127 080a 512b 080a                         'Q..+Q..

080a900c <_ZTV7TwoWire>:
	...
 80a9014:	51ed 080a 5237 080a 520f 080a 51ef 080a     .Q..7R...R...Q..
 80a9024:	5217 080a 521f 080a 5227 080a 522f 080a     .R...R..'R../R..

080a9034 <_ZTVN5spark9WiFiClassE>:
	...
 80a903c:	52ff 080a 52f5 080a 52eb 080a 5269 080a     .R...R...R..iR..
 80a904c:	0935 080a 52df 080a 535d 080a 5365 080a     5....R..]S..eS..
 80a905c:	52d3 080a 52cb 080a 52c1 080a 52b7 080a     .R...R...R...R..
 80a906c:	5273 080a                                   sR..

080a9070 <_ZTVN5spark12NetworkClassE>:
	...
 80a9078:	531d 080a 5327 080a 5331 080a 533b 080a     .S..'S..1S..;S..
 80a9088:	5345 080a 5351 080a 535d 080a 5365 080a     ES..QS..]S..eS..
 80a9098:	536d 080a 5379 080a 5381 080a 538b 080a     mS..yS...S...S..
 80a90a8:	5395 080a                                   .S..

080a90ac <_ZSt7nothrow>:
	...

080a90ad <_ZTSSt19_Sp_make_shared_tag>:
 80a90ad:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a90bd:	6572 5f64 6174 0067 0000                     red_tag....

080a90c8 <_ZTISt19_Sp_make_shared_tag>:
 80a90c8:	9108 080a 90ad 080a                         ........

080a90d0 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a90d0:	9168 080a 90dc 080a 918c 080a               h...........

080a90dc <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a90dc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a90ec:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a90fc:	0045 0000                                   E...

080a9100 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a9100:	0000 0000 90d0 080a 5735 080a 5749 080a     ........5W..IW..
 80a9110:	58e1 080a 58e1 080a 57b3 080a 56f5 080a     .X...X...W...V..
 80a9120:	579b 080a 575d 080a 5727 080a               .W..]W..'W..

080a912c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a912c:	9168 080a 9138 080a 90d0 080a               h...8.......

080a9138 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a9138:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a9148:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a9158:	666e 456f 0000 0000                         nfoE....

080a9160 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a9160:	0000 0000 912c 080a 57dd 080a 57f1 080a     ....,....W...W..
 80a9170:	58e1 080a 58e1 080a 57b3 080a 56f5 080a     .X...X...W...V..
 80a9180:	58b5 080a 5841 080a 5805 080a               .X..AX...X..

080a918c <_ZTISt9type_info>:
 80a918c:	9108 080a 9194 080a                         ........

080a9194 <_ZTSSt9type_info>:
 80a9194:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

080a91a4 <__month_lengths>:
 80a91a4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a91b4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a91c4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a91d4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a91e4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a91f4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9204:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80a9214:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
 80a9224:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
 80a9234:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
 80a9244:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
 80a9254:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
 80a9264:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
 80a9274:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
 80a9284:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
 80a9294:	2e64 0063 5a54 4700 544d 2500 3031 5e5b     d.c.TZ.GMT.%10[^
 80a92a4:	2d30 2c39 2d2b 255d 006e 254d 7568 6e25     0-9,+-]%n.M%hu%n
 80a92b4:	252e 7568 6e25 252e 7568 6e25 2f00 6825     .%hu%n.%hu%n./%h
 80a92c4:	2575 3a6e 6825 2575 3a6e 6825 2575 006e     u%n:%hu%n:%hu%n.

080a92d4 <_ctype_>:
 80a92d4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a92e4:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a92f4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a9304:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a9314:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a9324:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a9334:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a9344:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a9354:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a93d5 <link_const_variable_data_end>:
 80a93d5:	00          	.byte	0x00
	...

080a93d8 <link_constructors_location>:
 80a93d8:	080a0265 	.word	0x080a0265
 80a93dc:	080a045d 	.word	0x080a045d
 80a93e0:	080a0895 	.word	0x080a0895
 80a93e4:	080a2865 	.word	0x080a2865
 80a93e8:	080a3dbd 	.word	0x080a3dbd
 80a93ec:	080a4615 	.word	0x080a4615
 80a93f0:	080a4805 	.word	0x080a4805
 80a93f4:	080a4855 	.word	0x080a4855
 80a93f8:	080a5309 	.word	0x080a5309
 80a93fc:	080a53fd 	.word	0x080a53fd
 80a9400:	080a5649 	.word	0x080a5649

080a9404 <link_constructors_end>:
	...
