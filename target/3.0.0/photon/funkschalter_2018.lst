
d:/funkschalter_2018/target/3.0.0/photon/funkschalter_2018.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006a64  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a6a80  080a6a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a6a88  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000124  20000000  080a6a8c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000368  20000128  20000128  00040128  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a6bb0  080a6bb0  00036bb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a6bd8  080a6bd8  00036bd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001cd320  00000000  00000000  00036bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001dcb0  00000000  00000000  00203efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001e465  00000000  00000000  00221bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002360  00000000  00000000  00240011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005758  00000000  00000000  00242371  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000318ee  00000000  00000000  00247ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004051e  00000000  00000000  002793b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b6a28  00000000  00000000  002b98d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000061ac  00000000  00000000  00370300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 f815 	bl	80a505c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 f81d 	bl	80a5078 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a6a8c 	.word	0x080a6a8c
 80a004c:	20000124 	.word	0x20000124
 80a0050:	20000128 	.word	0x20000128
 80a0054:	2000048d 	.word	0x2000048d
 80a0058:	2000048d 	.word	0x2000048d

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 ff73 	bl	80a2f48 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a6a50 	.word	0x080a6a50
 80a0080:	080a6a7c 	.word	0x080a6a7c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f001 b848 	b.w	80a1118 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f001 fa31 	bl	80a14f0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 bf1b 	b.w	80a2ecc <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f002 bb21 	b.w	80a26dc <malloc>

080a009a <_Znaj>:
 80a009a:	f002 bb1f 	b.w	80a26dc <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f002 bb25 	b.w	80a26ec <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a00b2:	b40e      	push	{r1, r2, r3}
 80a00b4:	b503      	push	{r0, r1, lr}
 80a00b6:	ab03      	add	r3, sp, #12
 80a00b8:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80a00bc:	2101      	movs	r1, #1
        va_start(args, format);
 80a00be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80a00c0:	f002 fd62 	bl	80a2b88 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a00c4:	b002      	add	sp, #8
 80a00c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80a00ca:	b003      	add	sp, #12
 80a00cc:	4770      	bx	lr

080a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00ce:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00d0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a00d2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a00d4:	b17c      	cbz	r4, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a00d6:	6863      	ldr	r3, [r4, #4]
 80a00d8:	3b01      	subs	r3, #1
 80a00da:	6063      	str	r3, [r4, #4]
 80a00dc:	b95b      	cbnz	r3, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a00de:	6823      	ldr	r3, [r4, #0]
 80a00e0:	4620      	mov	r0, r4
 80a00e2:	689b      	ldr	r3, [r3, #8]
 80a00e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00e6:	68a3      	ldr	r3, [r4, #8]
 80a00e8:	3b01      	subs	r3, #1
 80a00ea:	60a3      	str	r3, [r4, #8]
 80a00ec:	b91b      	cbnz	r3, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00ee:	6823      	ldr	r3, [r4, #0]
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	68db      	ldr	r3, [r3, #12]
 80a00f4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a00f6:	4628      	mov	r0, r5
 80a00f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a00fc <_Z15WriteToDatabasePcS_>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option)
{
 80a00fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0100:	b088      	sub	sp, #32
 80a0102:	4605      	mov	r5, r0
 80a0104:	460c      	mov	r4, r1
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0106:	f002 fab9 	bl	80a267c <spark_cloud_flag_connected>
    if (Particle.connected() == false)
 80a010a:	b938      	cbnz	r0, 80a011c <_Z15WriteToDatabasePcS_+0x20>
    {
        Serial.printlnf("### WARNING : not connected to cloud. cannot write to database");
 80a010c:	f003 faaa 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0110:	491b      	ldr	r1, [pc, #108]	; (80a0180 <_Z15WriteToDatabasePcS_+0x84>)
 80a0112:	f7ff ffce 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
#endif

    Particle.publish("wasserstand", buffer, PRIVATE);
    println(option);
    delay(2000);
}
 80a0116:	b008      	add	sp, #32
 80a0118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s\"}", \
 80a011c:	f002 fe18 	bl	80a2d50 <_ZN9TimeClass4hourEv>
 80a0120:	4606      	mov	r6, r0
 80a0122:	f002 fe21 	bl	80a2d68 <_ZN9TimeClass6minuteEv>
 80a0126:	4607      	mov	r7, r0
 80a0128:	f002 fe2a 	bl	80a2d80 <_ZN9TimeClass6secondEv>
 80a012c:	4680      	mov	r8, r0
 80a012e:	f002 fe33 	bl	80a2d98 <_ZN9TimeClass3dayEv>
 80a0132:	4681      	mov	r9, r0
 80a0134:	f002 fe44 	bl	80a2dc0 <_ZN9TimeClass5monthEv>
 80a0138:	4682      	mov	sl, r0
 80a013a:	f002 fe49 	bl	80a2dd0 <_ZN9TimeClass4yearEv>
 80a013e:	4633      	mov	r3, r6
 80a0140:	462a      	mov	r2, r5
 80a0142:	e9cd 0404 	strd	r0, r4, [sp, #16]
 80a0146:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80a014a:	e9cd 7800 	strd	r7, r8, [sp]
 80a014e:	490d      	ldr	r1, [pc, #52]	; (80a0184 <_Z15WriteToDatabasePcS_+0x88>)
 80a0150:	480d      	ldr	r0, [pc, #52]	; (80a0188 <_Z15WriteToDatabasePcS_+0x8c>)
 80a0152:	f002 fadb 	bl	80a270c <sprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0156:	4b0d      	ldr	r3, [pc, #52]	; (80a018c <_Z15WriteToDatabasePcS_+0x90>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0158:	4a0b      	ldr	r2, [pc, #44]	; (80a0188 <_Z15WriteToDatabasePcS_+0x8c>)
 80a015a:	781b      	ldrb	r3, [r3, #0]
 80a015c:	490c      	ldr	r1, [pc, #48]	; (80a0190 <_Z15WriteToDatabasePcS_+0x94>)
 80a015e:	f88d 3000 	strb.w	r3, [sp]
 80a0162:	a806      	add	r0, sp, #24
 80a0164:	233c      	movs	r3, #60	; 0x3c
 80a0166:	f003 f847 	bl	80a31f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a016a:	a807      	add	r0, sp, #28
 80a016c:	f7ff ffaf 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    println(option);
 80a0170:	4620      	mov	r0, r4
 80a0172:	f000 fd05 	bl	80a0b80 <_Z7printlnPc>
    delay(2000);
 80a0176:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a017a:	f002 fe3f 	bl	80a2dfc <delay>
 80a017e:	e7ca      	b.n	80a0116 <_Z15WriteToDatabasePcS_+0x1a>
 80a0180:	080a59a0 	.word	0x080a59a0
 80a0184:	080a59df 	.word	0x080a59df
 80a0188:	20000196 	.word	0x20000196
 80a018c:	2000012c 	.word	0x2000012c
 80a0190:	080a5a40 	.word	0x080a5a40

080a0194 <_Z15WriteToDatabasePcS_i>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option, int data)
{
 80a0194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0198:	b08b      	sub	sp, #44	; 0x2c
 80a019a:	4606      	mov	r6, r0
 80a019c:	460c      	mov	r4, r1
 80a019e:	4615      	mov	r5, r2
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a01a0:	f002 fa6c 	bl	80a267c <spark_cloud_flag_connected>
    if (Particle.connected() == false)
 80a01a4:	b938      	cbnz	r0, 80a01b6 <_Z15WriteToDatabasePcS_i+0x22>
    {
        Serial.printlnf("### WARNING : not connected to cloud. cannot write to database");
 80a01a6:	f003 fa5d 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a01aa:	4920      	ldr	r1, [pc, #128]	; (80a022c <_Z15WriteToDatabasePcS_i+0x98>)
 80a01ac:	f7ff ff81 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>

    Particle.publish("wasserstand", buffer, PRIVATE);
    sprintf(buffer," %s %d ", option, data);
    println(option,data);
    delay(2000);
}
 80a01b0:	b00b      	add	sp, #44	; 0x2c
 80a01b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s %2d\"}", \
 80a01b6:	f002 fdcb 	bl	80a2d50 <_ZN9TimeClass4hourEv>
 80a01ba:	4607      	mov	r7, r0
 80a01bc:	f002 fdd4 	bl	80a2d68 <_ZN9TimeClass6minuteEv>
 80a01c0:	4680      	mov	r8, r0
 80a01c2:	f002 fddd 	bl	80a2d80 <_ZN9TimeClass6secondEv>
 80a01c6:	4681      	mov	r9, r0
 80a01c8:	f002 fde6 	bl	80a2d98 <_ZN9TimeClass3dayEv>
 80a01cc:	4682      	mov	sl, r0
 80a01ce:	f002 fdf7 	bl	80a2dc0 <_ZN9TimeClass5monthEv>
 80a01d2:	4683      	mov	fp, r0
 80a01d4:	f002 fdfc 	bl	80a2dd0 <_ZN9TimeClass4yearEv>
 80a01d8:	463b      	mov	r3, r7
 80a01da:	4632      	mov	r2, r6
 80a01dc:	e9cd b003 	strd	fp, r0, [sp, #12]
 80a01e0:	e9cd 4505 	strd	r4, r5, [sp, #20]
 80a01e4:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80a01e8:	4911      	ldr	r1, [pc, #68]	; (80a0230 <_Z15WriteToDatabasePcS_i+0x9c>)
 80a01ea:	f8cd 8000 	str.w	r8, [sp]
 80a01ee:	4811      	ldr	r0, [pc, #68]	; (80a0234 <_Z15WriteToDatabasePcS_i+0xa0>)
 80a01f0:	f002 fa8c 	bl	80a270c <sprintf>
 80a01f4:	4b10      	ldr	r3, [pc, #64]	; (80a0238 <_Z15WriteToDatabasePcS_i+0xa4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a01f6:	4a0f      	ldr	r2, [pc, #60]	; (80a0234 <_Z15WriteToDatabasePcS_i+0xa0>)
 80a01f8:	781b      	ldrb	r3, [r3, #0]
 80a01fa:	4910      	ldr	r1, [pc, #64]	; (80a023c <_Z15WriteToDatabasePcS_i+0xa8>)
 80a01fc:	f88d 3000 	strb.w	r3, [sp]
 80a0200:	a808      	add	r0, sp, #32
 80a0202:	233c      	movs	r3, #60	; 0x3c
 80a0204:	f002 fff8 	bl	80a31f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0208:	a809      	add	r0, sp, #36	; 0x24
 80a020a:	f7ff ff60 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sprintf(buffer," %s %d ", option, data);
 80a020e:	462b      	mov	r3, r5
 80a0210:	4622      	mov	r2, r4
 80a0212:	490b      	ldr	r1, [pc, #44]	; (80a0240 <_Z15WriteToDatabasePcS_i+0xac>)
 80a0214:	4807      	ldr	r0, [pc, #28]	; (80a0234 <_Z15WriteToDatabasePcS_i+0xa0>)
 80a0216:	f002 fa79 	bl	80a270c <sprintf>
    println(option,data);
 80a021a:	4620      	mov	r0, r4
 80a021c:	4629      	mov	r1, r5
 80a021e:	f000 fdbb 	bl	80a0d98 <_Z7printlnPci>
    delay(2000);
 80a0222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0226:	f002 fde9 	bl	80a2dfc <delay>
 80a022a:	e7c1      	b.n	80a01b0 <_Z15WriteToDatabasePcS_i+0x1c>
 80a022c:	080a59a0 	.word	0x080a59a0
 80a0230:	080a5a4c 	.word	0x080a5a4c
 80a0234:	20000196 	.word	0x20000196
 80a0238:	2000012c 	.word	0x2000012c
 80a023c:	080a5a40 	.word	0x080a5a40
 80a0240:	080a5ab1 	.word	0x080a5ab1

080a0244 <_GLOBAL__sub_I__Z15WriteToDatabasePcS_>:
        val_(val) {
 80a0244:	2201      	movs	r2, #1
 80a0246:	4b01      	ldr	r3, [pc, #4]	; (80a024c <_GLOBAL__sub_I__Z15WriteToDatabasePcS_+0x8>)
 80a0248:	701a      	strb	r2, [r3, #0]
//       {
//         println(" ERR: no Luefter ");
//         done = 1;
//       }
//     }
}
 80a024a:	4770      	bx	lr
 80a024c:	2000012c 	.word	0x2000012c

080a0250 <_Z15dispatchCommandc>:
/*---------------------------------------------------------------------
Dispatch command
---------------------------------------------------------------------*/

void dispatchCommand(char c)
{
 80a0250:	b530      	push	{r4, r5, lr}
 80a0252:	3861      	subs	r0, #97	; 0x61
 80a0254:	b087      	sub	sp, #28
 80a0256:	2819      	cmp	r0, #25
 80a0258:	d816      	bhi.n	80a0288 <_Z15dispatchCommandc+0x38>
 80a025a:	e8df f000 	tbb	[pc, r0]
 80a025e:	3330      	.short	0x3330
 80a0260:	15152a15 	.word	0x15152a15
 80a0264:	15170d15 	.word	0x15170d15
 80a0268:	15151515 	.word	0x15151515
 80a026c:	15154e15 	.word	0x15154e15
 80a0270:	15475939 	.word	0x15475939
 80a0274:	7e756f67 	.word	0x7e756f67

  switch (c)
  {
  case 'h':
    termEnabled = 1;
 80a0278:	2201      	movs	r2, #1
 80a027a:	4b4d      	ldr	r3, [pc, #308]	; (80a03b0 <_Z15dispatchCommandc+0x160>)
 80a027c:	601a      	str	r2, [r3, #0]
    termCounter = 10;
 80a027e:	220a      	movs	r2, #10
 80a0280:	4b4c      	ldr	r3, [pc, #304]	; (80a03b4 <_Z15dispatchCommandc+0x164>)
 80a0282:	601a      	str	r2, [r3, #0]
    help();
 80a0284:	f000 fc88 	bl	80a0b98 <_Z4helpv>
    println(" Photon HW ID ", System.deviceID() );
    Particle.publish("particle/device/name");
    delay(500); 
  break;  
  }
}
 80a0288:	b007      	add	sp, #28
 80a028a:	bd30      	pop	{r4, r5, pc}
    if (control.pumpe_count_down < 240)
 80a028c:	4c4a      	ldr	r4, [pc, #296]	; (80a03b8 <_Z15dispatchCommandc+0x168>)
 80a028e:	68e3      	ldr	r3, [r4, #12]
 80a0290:	2bef      	cmp	r3, #239	; 0xef
 80a0292:	d801      	bhi.n	80a0298 <_Z15dispatchCommandc+0x48>
      control.pumpe_count_down = control.pumpe_count_down + 10;
 80a0294:	330a      	adds	r3, #10
      control.pumpe_count_down = control.pumpe_count_down - 10;
 80a0296:	60e3      	str	r3, [r4, #12]
    EEPROM.put(0, control);
 80a0298:	f003 fc92 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a029c:	2214      	movs	r2, #20
 80a029e:	2000      	movs	r0, #0
 80a02a0:	4945      	ldr	r1, [pc, #276]	; (80a03b8 <_Z15dispatchCommandc+0x168>)
 80a02a2:	f002 f81b 	bl	80a22dc <HAL_EEPROM_Put>
    WriteToDatabase("control", "PUMPE MAIN COUNTDOWN NOW ", control.pumpe_count_down);
 80a02a6:	68e2      	ldr	r2, [r4, #12]
 80a02a8:	4944      	ldr	r1, [pc, #272]	; (80a03bc <_Z15dispatchCommandc+0x16c>)
 80a02aa:	4845      	ldr	r0, [pc, #276]	; (80a03c0 <_Z15dispatchCommandc+0x170>)
 80a02ac:	f7ff ff72 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
    break;
 80a02b0:	e7ea      	b.n	80a0288 <_Z15dispatchCommandc+0x38>
    if (control.pumpe_count_down > 10)
 80a02b2:	4c41      	ldr	r4, [pc, #260]	; (80a03b8 <_Z15dispatchCommandc+0x168>)
 80a02b4:	68e3      	ldr	r3, [r4, #12]
 80a02b6:	2b0a      	cmp	r3, #10
 80a02b8:	d9ee      	bls.n	80a0298 <_Z15dispatchCommandc+0x48>
      control.pumpe_count_down = control.pumpe_count_down - 10;
 80a02ba:	3b0a      	subs	r3, #10
 80a02bc:	e7eb      	b.n	80a0296 <_Z15dispatchCommandc+0x46>
    printSlowStatus();
 80a02be:	f000 fe59 	bl	80a0f74 <_Z15printSlowStatusv>
    break;
 80a02c2:	e7e1      	b.n	80a0288 <_Z15dispatchCommandc+0x38>
    BlumenGiessen(1, ts_giessen);
 80a02c4:	4b3f      	ldr	r3, [pc, #252]	; (80a03c4 <_Z15dispatchCommandc+0x174>)
 80a02c6:	2001      	movs	r0, #1
 80a02c8:	6819      	ldr	r1, [r3, #0]
 80a02ca:	f001 fe99 	bl	80a2000 <_Z13BlumenGiessenii>
    break;
 80a02ce:	e7db      	b.n	80a0288 <_Z15dispatchCommandc+0x38>
    control.dontSleepSW = 0;
 80a02d0:	2400      	movs	r4, #0
 80a02d2:	4d39      	ldr	r5, [pc, #228]	; (80a03b8 <_Z15dispatchCommandc+0x168>)
    println(" Sleep Mode enabled ");
 80a02d4:	483c      	ldr	r0, [pc, #240]	; (80a03c8 <_Z15dispatchCommandc+0x178>)
    control.dontSleepSW = 0;
 80a02d6:	606c      	str	r4, [r5, #4]
    println(" Sleep Mode enabled ");
 80a02d8:	f000 fc52 	bl	80a0b80 <_Z7printlnPc>
    EEPROM.put(0, control);  
 80a02dc:	f003 fc70 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
 80a02e0:	2214      	movs	r2, #20
 80a02e2:	4629      	mov	r1, r5
 80a02e4:	2000      	movs	r0, #0
 80a02e6:	f001 fff9 	bl	80a22dc <HAL_EEPROM_Put>
        return t;
 80a02ea:	e7cd      	b.n	80a0288 <_Z15dispatchCommandc+0x38>
    control.reserve_repetitions=0;
 80a02ec:	2400      	movs	r4, #0
 80a02ee:	4d32      	ldr	r5, [pc, #200]	; (80a03b8 <_Z15dispatchCommandc+0x168>)
    println(" Clear reserve repetition counter "); 
 80a02f0:	4836      	ldr	r0, [pc, #216]	; (80a03cc <_Z15dispatchCommandc+0x17c>)
 80a02f2:	f000 fc45 	bl	80a0b80 <_Z7printlnPc>
    control.reserve_repetitions=0;
 80a02f6:	612c      	str	r4, [r5, #16]
 80a02f8:	e7f0      	b.n	80a02dc <_Z15dispatchCommandc+0x8c>
    control.dontSleepSW = 1;
 80a02fa:	2301      	movs	r3, #1
 80a02fc:	4c2e      	ldr	r4, [pc, #184]	; (80a03b8 <_Z15dispatchCommandc+0x168>)
    println(" Sleep Mode disabled ");
 80a02fe:	4834      	ldr	r0, [pc, #208]	; (80a03d0 <_Z15dispatchCommandc+0x180>)
    control.dontSleepSW = 1;
 80a0300:	6063      	str	r3, [r4, #4]
    println(" Sleep Mode disabled ");
 80a0302:	f000 fc3d 	bl	80a0b80 <_Z7printlnPc>
    EEPROM.put(0, control);
 80a0306:	f003 fc5b 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a030a:	2214      	movs	r2, #20
 80a030c:	4621      	mov	r1, r4
 80a030e:	e7e9      	b.n	80a02e4 <_Z15dispatchCommandc+0x94>
    get_Temperature();
 80a0310:	f000 fa46 	bl	80a07a0 <_Z15get_Temperaturev>
    sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a0314:	4b2f      	ldr	r3, [pc, #188]	; (80a03d4 <_Z15dispatchCommandc+0x184>)
 80a0316:	4a30      	ldr	r2, [pc, #192]	; (80a03d8 <_Z15dispatchCommandc+0x188>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	6812      	ldr	r2, [r2, #0]
 80a031c:	492f      	ldr	r1, [pc, #188]	; (80a03dc <_Z15dispatchCommandc+0x18c>)
 80a031e:	4830      	ldr	r0, [pc, #192]	; (80a03e0 <_Z15dispatchCommandc+0x190>)
 80a0320:	f002 f9f4 	bl	80a270c <sprintf>
    println(timebuffer);
 80a0324:	482e      	ldr	r0, [pc, #184]	; (80a03e0 <_Z15dispatchCommandc+0x190>)
 80a0326:	f000 fc2b 	bl	80a0b80 <_Z7printlnPc>
    break;
 80a032a:	e7ad      	b.n	80a0288 <_Z15dispatchCommandc+0x38>
    println(" Store CONTROL in EEPROM ");
 80a032c:	482d      	ldr	r0, [pc, #180]	; (80a03e4 <_Z15dispatchCommandc+0x194>)
 80a032e:	f000 fc27 	bl	80a0b80 <_Z7printlnPc>
    EEPROM.put(0, control);
 80a0332:	f003 fc45 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
 80a0336:	2214      	movs	r2, #20
 80a0338:	491f      	ldr	r1, [pc, #124]	; (80a03b8 <_Z15dispatchCommandc+0x168>)
 80a033a:	e7d3      	b.n	80a02e4 <_Z15dispatchCommandc+0x94>
    println(" Ultrasonic ");
 80a033c:	482a      	ldr	r0, [pc, #168]	; (80a03e8 <_Z15dispatchCommandc+0x198>)
 80a033e:	f000 fc1f 	bl	80a0b80 <_Z7printlnPc>
    ultra_sonic_measure();
 80a0342:	f000 f995 	bl	80a0670 <_Z19ultra_sonic_measurev>
    break;
 80a0346:	e79f      	b.n	80a0288 <_Z15dispatchCommandc+0x38>
    println(" Prepare Sleep ");
 80a0348:	4828      	ldr	r0, [pc, #160]	; (80a03ec <_Z15dispatchCommandc+0x19c>)
 80a034a:	f000 fc19 	bl	80a0b80 <_Z7printlnPc>
    sleep(getSleepTime(55));
 80a034e:	2037      	movs	r0, #55	; 0x37
 80a0350:	f000 fb36 	bl	80a09c0 <_Z12getSleepTimei>
 80a0354:	f000 ffb8 	bl	80a12c8 <_Z5sleepi>
    break;  
 80a0358:	e796      	b.n	80a0288 <_Z15dispatchCommandc+0x38>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
 80a035a:	a802      	add	r0, sp, #8
 80a035c:	f002 f996 	bl	80a268c <spark_deviceID>
    println(" Photon HW ID ", System.deviceID() );
 80a0360:	a902      	add	r1, sp, #8
 80a0362:	4823      	ldr	r0, [pc, #140]	; (80a03f0 <_Z15dispatchCommandc+0x1a0>)
 80a0364:	f000 fdee 	bl	80a0f44 <_Z7printlnPc6String>
 80a0368:	a802      	add	r0, sp, #8
 80a036a:	f002 fabb 	bl	80a28e4 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a036e:	4b21      	ldr	r3, [pc, #132]	; (80a03f4 <_Z15dispatchCommandc+0x1a4>)
 80a0370:	2200      	movs	r2, #0
 80a0372:	781b      	ldrb	r3, [r3, #0]
 80a0374:	4920      	ldr	r1, [pc, #128]	; (80a03f8 <_Z15dispatchCommandc+0x1a8>)
 80a0376:	f88d 3000 	strb.w	r3, [sp]
 80a037a:	a802      	add	r0, sp, #8
 80a037c:	233c      	movs	r3, #60	; 0x3c
 80a037e:	f002 ff3b 	bl	80a31f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 80a0382:	9c03      	ldr	r4, [sp, #12]
 80a0384:	b17c      	cbz	r4, 80a03a6 <_Z15dispatchCommandc+0x156>
      if (--_M_use_count == 0)
 80a0386:	6863      	ldr	r3, [r4, #4]
 80a0388:	3b01      	subs	r3, #1
 80a038a:	6063      	str	r3, [r4, #4]
 80a038c:	b95b      	cbnz	r3, 80a03a6 <_Z15dispatchCommandc+0x156>
          _M_dispose();
 80a038e:	6823      	ldr	r3, [r4, #0]
 80a0390:	4620      	mov	r0, r4
 80a0392:	689b      	ldr	r3, [r3, #8]
 80a0394:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0396:	68a3      	ldr	r3, [r4, #8]
 80a0398:	3b01      	subs	r3, #1
 80a039a:	60a3      	str	r3, [r4, #8]
 80a039c:	b91b      	cbnz	r3, 80a03a6 <_Z15dispatchCommandc+0x156>
            _M_destroy();
 80a039e:	6823      	ldr	r3, [r4, #0]
 80a03a0:	4620      	mov	r0, r4
 80a03a2:	68db      	ldr	r3, [r3, #12]
 80a03a4:	4798      	blx	r3
    delay(500); 
 80a03a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a03aa:	f002 fd27 	bl	80a2dfc <delay>
}
 80a03ae:	e76b      	b.n	80a0288 <_Z15dispatchCommandc+0x38>
 80a03b0:	200002e8 	.word	0x200002e8
 80a03b4:	200002e4 	.word	0x200002e4
 80a03b8:	20000290 	.word	0x20000290
 80a03bc:	080a5ab9 	.word	0x080a5ab9
 80a03c0:	080a5ad3 	.word	0x080a5ad3
 80a03c4:	20000000 	.word	0x20000000
 80a03c8:	080a5adb 	.word	0x080a5adb
 80a03cc:	080a5af0 	.word	0x080a5af0
 80a03d0:	080a5b13 	.word	0x080a5b13
 80a03d4:	200002e0 	.word	0x200002e0
 80a03d8:	200002dc 	.word	0x200002dc
 80a03dc:	080a5b29 	.word	0x080a5b29
 80a03e0:	200002f0 	.word	0x200002f0
 80a03e4:	080a5b3b 	.word	0x080a5b3b
 80a03e8:	080a5b55 	.word	0x080a5b55
 80a03ec:	080a5b62 	.word	0x080a5b62
 80a03f0:	080a5b72 	.word	0x080a5b72
 80a03f4:	2000012d 	.word	0x2000012d
 80a03f8:	080a5b81 	.word	0x080a5b81

080a03fc <_Z11serialEventv>:

/*---------------------------------------------------------------------
Dispatch characters from serial port
---------------------------------------------------------------------*/
void serialEvent()
{
 80a03fc:	b508      	push	{r3, lr}
  char c = Serial.read();
 80a03fe:	f003 f931 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0402:	6803      	ldr	r3, [r0, #0]
 80a0404:	695b      	ldr	r3, [r3, #20]
 80a0406:	4798      	blx	r3
  dispatchCommand(c);
}
 80a0408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dispatchCommand(c);
 80a040c:	b2c0      	uxtb	r0, r0
 80a040e:	f7ff bf1f 	b.w	80a0250 <_Z15dispatchCommandc>
	...

080a0414 <_GLOBAL__sub_I__Z15dispatchCommandc>:
        val_(val) {
 80a0414:	2200      	movs	r2, #0
 80a0416:	4b01      	ldr	r3, [pc, #4]	; (80a041c <_GLOBAL__sub_I__Z15dispatchCommandc+0x8>)
 80a0418:	701a      	strb	r2, [r3, #0]
}
 80a041a:	4770      	bx	lr
 80a041c:	2000012d 	.word	0x2000012d

080a0420 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
 80a0420:	2300      	movs	r3, #0
  _celsius = 0;
 80a0422:	2200      	movs	r2, #0
  _raw = 0;
 80a0424:	8303      	strh	r3, [r0, #24]
  _celsius = 0;
 80a0426:	61c2      	str	r2, [r0, #28]
  memset(_addr, 0, sizeof(_addr));
 80a0428:	6203      	str	r3, [r0, #32]
 80a042a:	6243      	str	r3, [r0, #36]	; 0x24
  memset(_data, 0, sizeof(_data));
 80a042c:	6283      	str	r3, [r0, #40]	; 0x28
 80a042e:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a0430:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  _type = WIRE_UNKNOWN;
 80a0434:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  _searchDone = false;
 80a0438:	8643      	strh	r3, [r0, #50]	; 0x32
  _crcError = false;
}
 80a043a:	4770      	bx	lr

080a043c <_ZN4DS18C1Etb>:
DS18::DS18(uint16_t pin, bool parasitic)
 80a043c:	b538      	push	{r3, r4, r5, lr}
 80a043e:	4604      	mov	r4, r0
 80a0440:	4615      	mov	r5, r2
  _conversionTime{1000}
 80a0442:	f001 f9c8 	bl	80a17d6 <_ZN7OneWireC1Et>
 80a0446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  init();
 80a044a:	4620      	mov	r0, r4
  _conversionTime{1000}
 80a044c:	7525      	strb	r5, [r4, #20]
 80a044e:	82e3      	strh	r3, [r4, #22]
  init();
 80a0450:	f7ff ffe6 	bl	80a0420 <_ZN4DS184initEv>
}
 80a0454:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0458 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80a0458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80a045c:	680b      	ldr	r3, [r1, #0]
bool DS18::read(uint8_t addr[8]) {
 80a045e:	4604      	mov	r4, r0
  memcpy(_addr, addr, sizeof(_addr));
 80a0460:	6203      	str	r3, [r0, #32]
 80a0462:	684b      	ldr	r3, [r1, #4]
 80a0464:	f100 0520 	add.w	r5, r0, #32
 80a0468:	6243      	str	r3, [r0, #36]	; 0x24

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80a046a:	780b      	ldrb	r3, [r1, #0]
 80a046c:	2b26      	cmp	r3, #38	; 0x26
 80a046e:	d060      	beq.n	80a0532 <_ZN4DS184readEPh+0xda>
 80a0470:	d808      	bhi.n	80a0484 <_ZN4DS184readEPh+0x2c>
 80a0472:	2b10      	cmp	r3, #16
 80a0474:	d00a      	beq.n	80a048c <_ZN4DS184readEPh+0x34>
 80a0476:	2b22      	cmp	r3, #34	; 0x22
 80a0478:	d059      	beq.n	80a052e <_ZN4DS184readEPh+0xd6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
 80a047a:	2000      	movs	r0, #0
 80a047c:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
      }
  }

  // Got a good reading!
  return true;
}
 80a0480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (addr[0]) {
 80a0484:	2b28      	cmp	r3, #40	; 0x28
 80a0486:	d1f8      	bne.n	80a047a <_ZN4DS184readEPh+0x22>
    case 0x28: _type = WIRE_DS18B20; break;
 80a0488:	2302      	movs	r3, #2
 80a048a:	e000      	b.n	80a048e <_ZN4DS184readEPh+0x36>
    case 0x10: _type = WIRE_DS1820; break;
 80a048c:	2301      	movs	r3, #1
    case 0x26: _type = WIRE_DS2438; break;
 80a048e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  _wire.reset();               // first clear the 1-wire bus
 80a0492:	4620      	mov	r0, r4
 80a0494:	f001 f9ac 	bl	80a17f0 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
 80a0498:	4629      	mov	r1, r5
 80a049a:	4620      	mov	r0, r4
 80a049c:	f001 fa62 	bl	80a1964 <_ZN7OneWire6selectEPKh>
  _wire.write(0x44, power);    // tell it to start a conversion
 80a04a0:	7d22      	ldrb	r2, [r4, #20]
 80a04a2:	2144      	movs	r1, #68	; 0x44
 80a04a4:	4620      	mov	r0, r4
 80a04a6:	f001 fa32 	bl	80a190e <_ZN7OneWire5writeEhh>
  delay(_conversionTime); // wait for conversion to finish
 80a04aa:	8ae0      	ldrh	r0, [r4, #22]
 80a04ac:	f002 fca6 	bl	80a2dfc <delay>
  _wire.reset();
 80a04b0:	4620      	mov	r0, r4
 80a04b2:	f001 f99d 	bl	80a17f0 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a04b6:	4629      	mov	r1, r5
 80a04b8:	4620      	mov	r0, r4
 80a04ba:	f001 fa53 	bl	80a1964 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
 80a04be:	2200      	movs	r2, #0
 80a04c0:	21b8      	movs	r1, #184	; 0xb8
 80a04c2:	4620      	mov	r0, r4
 80a04c4:	f001 fa23 	bl	80a190e <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
 80a04c8:	2200      	movs	r2, #0
 80a04ca:	4620      	mov	r0, r4
 80a04cc:	4611      	mov	r1, r2
 80a04ce:	f001 fa1e 	bl	80a190e <_ZN7OneWire5writeEhh>
  _wire.reset();
 80a04d2:	4620      	mov	r0, r4
 80a04d4:	f001 f98c 	bl	80a17f0 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a04d8:	4629      	mov	r1, r5
 80a04da:	4620      	mov	r0, r4
 80a04dc:	f001 fa42 	bl	80a1964 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
 80a04e0:	2200      	movs	r2, #0
 80a04e2:	21be      	movs	r1, #190	; 0xbe
 80a04e4:	4620      	mov	r0, r4
 80a04e6:	f001 fa12 	bl	80a190e <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
 80a04ea:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a04ee:	2b04      	cmp	r3, #4
 80a04f0:	d104      	bne.n	80a04fc <_ZN4DS184readEPh+0xa4>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
 80a04f2:	2200      	movs	r2, #0
 80a04f4:	4620      	mov	r0, r4
 80a04f6:	4611      	mov	r1, r2
 80a04f8:	f001 fa09 	bl	80a190e <_ZN7OneWire5writeEhh>
 80a04fc:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80a0500:	462e      	mov	r6, r5
 80a0502:	f104 0731 	add.w	r7, r4, #49	; 0x31
    _data[i] = _wire.read();
 80a0506:	4620      	mov	r0, r4
 80a0508:	f001 fa1c 	bl	80a1944 <_ZN7OneWire4readEv>
 80a050c:	f805 0b01 	strb.w	r0, [r5], #1
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
 80a0510:	42af      	cmp	r7, r5
 80a0512:	d1f8      	bne.n	80a0506 <_ZN4DS184readEPh+0xae>
  if (OneWire::crc8(_data, 8) != _data[8]) {
 80a0514:	2108      	movs	r1, #8
 80a0516:	4630      	mov	r0, r6
 80a0518:	f001 faaf 	bl	80a1a7a <_ZN7OneWire4crc8EPhh>
 80a051c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a0520:	4283      	cmp	r3, r0
 80a0522:	d008      	beq.n	80a0536 <_ZN4DS184readEPh+0xde>
    _crcError = true;
 80a0524:	2301      	movs	r3, #1
    return false;
 80a0526:	2000      	movs	r0, #0
    _crcError = true;
 80a0528:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a052c:	e7a8      	b.n	80a0480 <_ZN4DS184readEPh+0x28>
    case 0x22: _type = WIRE_DS1822; break;
 80a052e:	2303      	movs	r3, #3
 80a0530:	e7ad      	b.n	80a048e <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
 80a0532:	2304      	movs	r3, #4
 80a0534:	e7ab      	b.n	80a048e <_ZN4DS184readEPh+0x36>
  _raw = (_data[1] << 8) | _data[0];
 80a0536:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80a053a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80a053e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a0542:	8323      	strh	r3, [r4, #24]
  if (_type == WIRE_DS2438) {
 80a0544:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a0548:	2b04      	cmp	r3, #4
 80a054a:	d147      	bne.n	80a05dc <_ZN4DS184readEPh+0x184>
    _raw = (_data[2] << 8) | _data[1];
 80a054c:	f894 802a 	ldrb.w	r8, [r4, #42]	; 0x2a
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a0550:	08c5      	lsrs	r5, r0, #3
    _raw = (_data[2] << 8) | _data[1];
 80a0552:	ea40 2308 	orr.w	r3, r0, r8, lsl #8
 80a0556:	8323      	strh	r3, [r4, #24]
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a0558:	4640      	mov	r0, r8
 80a055a:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
      if (_data[2] > 127) {
 80a055e:	f004 f89d 	bl	80a469c <__aeabi_ui2f>
 80a0562:	f003 fd0b 	bl	80a3f7c <__aeabi_f2d>
 80a0566:	4606      	mov	r6, r0
 80a0568:	4628      	mov	r0, r5
 80a056a:	460f      	mov	r7, r1
 80a056c:	f004 f896 	bl	80a469c <__aeabi_ui2f>
 80a0570:	f003 fd04 	bl	80a3f7c <__aeabi_f2d>
 80a0574:	2200      	movs	r2, #0
 80a0576:	4b24      	ldr	r3, [pc, #144]	; (80a0608 <_ZN4DS184readEPh+0x1b0>)
 80a0578:	f003 fd58 	bl	80a402c <__aeabi_dmul>
 80a057c:	f018 0f80 	tst.w	r8, #128	; 0x80
 80a0580:	4602      	mov	r2, r0
 80a0582:	460b      	mov	r3, r1
 80a0584:	d025      	beq.n	80a05d2 <_ZN4DS184readEPh+0x17a>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a0586:	4630      	mov	r0, r6
 80a0588:	4639      	mov	r1, r7
 80a058a:	f003 fb97 	bl	80a3cbc <__aeabi_dsub>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a058e:	f003 ff7f 	bl	80a4490 <__aeabi_d2f>
 80a0592:	e015      	b.n	80a05c0 <_ZN4DS184readEPh+0x168>
  byte cfg = (_data[4] & 0x60);
 80a0594:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80a0598:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
 80a059c:	f012 0260 	ands.w	r2, r2, #96	; 0x60
 80a05a0:	d102      	bne.n	80a05a8 <_ZN4DS184readEPh+0x150>
 80a05a2:	f023 0307 	bic.w	r3, r3, #7
 80a05a6:	e02d      	b.n	80a0604 <_ZN4DS184readEPh+0x1ac>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a05a8:	2a20      	cmp	r2, #32
 80a05aa:	d00c      	beq.n	80a05c6 <_ZN4DS184readEPh+0x16e>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a05ac:	2a40      	cmp	r2, #64	; 0x40
 80a05ae:	d00d      	beq.n	80a05cc <_ZN4DS184readEPh+0x174>
      _celsius = (float)_raw * 0.0625;
 80a05b0:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 80a05b4:	f004 f876 	bl	80a46a4 <__aeabi_i2f>
 80a05b8:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a05bc:	f004 f8c6 	bl	80a474c <__aeabi_fmul>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a05c0:	61e0      	str	r0, [r4, #28]
  switch (_type) {
 80a05c2:	2001      	movs	r0, #1
 80a05c4:	e75c      	b.n	80a0480 <_ZN4DS184readEPh+0x28>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a05c6:	f023 0303 	bic.w	r3, r3, #3
 80a05ca:	e01b      	b.n	80a0604 <_ZN4DS184readEPh+0x1ac>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a05cc:	f023 0301 	bic.w	r3, r3, #1
 80a05d0:	e018      	b.n	80a0604 <_ZN4DS184readEPh+0x1ac>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a05d2:	4632      	mov	r2, r6
 80a05d4:	463b      	mov	r3, r7
 80a05d6:	f003 fb73 	bl	80a3cc0 <__adddf3>
 80a05da:	e7d8      	b.n	80a058e <_ZN4DS184readEPh+0x136>
  switch (_type) {
 80a05dc:	2b03      	cmp	r3, #3
 80a05de:	d8f0      	bhi.n	80a05c2 <_ZN4DS184readEPh+0x16a>
 80a05e0:	2b01      	cmp	r3, #1
 80a05e2:	d8d7      	bhi.n	80a0594 <_ZN4DS184readEPh+0x13c>
 80a05e4:	d1ed      	bne.n	80a05c2 <_ZN4DS184readEPh+0x16a>
      _raw = _raw << 3; // 9 bit resolution default
 80a05e6:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a05ea:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
      _raw = _raw << 3; // 9 bit resolution default
 80a05ee:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
 80a05f0:	2a10      	cmp	r2, #16
      _raw = _raw << 3; // 9 bit resolution default
 80a05f2:	8323      	strh	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a05f4:	d1dc      	bne.n	80a05b0 <_ZN4DS184readEPh+0x158>
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
 80a05f6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80a05fa:	f023 030f 	bic.w	r3, r3, #15
 80a05fe:	f1c2 020c 	rsb	r2, r2, #12
 80a0602:	4413      	add	r3, r2
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a0604:	8323      	strh	r3, [r4, #24]
 80a0606:	e7d3      	b.n	80a05b0 <_ZN4DS184readEPh+0x158>
 80a0608:	3fa00000 	.word	0x3fa00000

080a060c <_ZN4DS184readEv>:
bool DS18::read() {
 80a060c:	b538      	push	{r3, r4, r5, lr}
 80a060e:	4604      	mov	r4, r0
  init();
 80a0610:	f7ff ff06 	bl	80a0420 <_ZN4DS184initEv>
  if (!_wire.search(_addr)) {
 80a0614:	f100 0520 	add.w	r5, r0, #32
 80a0618:	4629      	mov	r1, r5
 80a061a:	f001 f9bb 	bl	80a1994 <_ZN7OneWire6searchEPh>
 80a061e:	b938      	cbnz	r0, 80a0630 <_ZN4DS184readEv+0x24>
    _searchDone = true;
 80a0620:	2301      	movs	r3, #1
    _wire.reset_search();
 80a0622:	4620      	mov	r0, r4
    _searchDone = true;
 80a0624:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    _wire.reset_search();
 80a0628:	f001 f9ae 	bl	80a1988 <_ZN7OneWire12reset_searchEv>
}
 80a062c:	2000      	movs	r0, #0
 80a062e:	bd38      	pop	{r3, r4, r5, pc}
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
 80a0630:	2107      	movs	r1, #7
 80a0632:	4628      	mov	r0, r5
 80a0634:	f001 fa21 	bl	80a1a7a <_ZN7OneWire4crc8EPhh>
 80a0638:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80a063c:	4283      	cmp	r3, r0
 80a063e:	d003      	beq.n	80a0648 <_ZN4DS184readEv+0x3c>
    _crcError = true;
 80a0640:	2301      	movs	r3, #1
 80a0642:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a0646:	e7f1      	b.n	80a062c <_ZN4DS184readEv+0x20>
  return read(_addr);
 80a0648:	4629      	mov	r1, r5
 80a064a:	4620      	mov	r0, r4
}
 80a064c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read(_addr);
 80a0650:	f7ff bf02 	b.w	80a0458 <_ZN4DS184readEPh>

080a0654 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
 80a0654:	69c0      	ldr	r0, [r0, #28]
 80a0656:	4770      	bx	lr

080a0658 <_ZN4DS184addrEPh>:
float DS18::fahrenheit() {
  return _celsius * 1.8 + 32.0;
}

void DS18::addr(uint8_t dest[8]) {
  memcpy(dest, _addr, sizeof(_addr));
 80a0658:	f850 3f20 	ldr.w	r3, [r0, #32]!
 80a065c:	600b      	str	r3, [r1, #0]
 80a065e:	6843      	ldr	r3, [r0, #4]
 80a0660:	604b      	str	r3, [r1, #4]
}
 80a0662:	4770      	bx	lr

080a0664 <_ZN4DS1810searchDoneEv>:
  return _type;
}

bool DS18::searchDone() {
  return _searchDone;
}
 80a0664:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 80a0668:	4770      	bx	lr

080a066a <_ZN4DS188crcErrorEv>:

bool DS18::crcError() {
  return _crcError;
}
 80a066a:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 80a066e:	4770      	bx	lr

080a0670 <_Z19ultra_sonic_measurev>:
Ultrasonic distance measurement (tested29.07.2017)
Returns water level in millimeter
---------------------------------------------------------------------*/
int  ultra_sonic_measure()

{
 80a0670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0674:	4e2d      	ldr	r6, [pc, #180]	; (80a072c <_Z19ultra_sonic_measurev+0xbc>)

  int level = 0;
  int error = 0;
  int k = 0;

  Serial.printlnf ( " ultra sonic distance ");
 80a0676:	f002 fff5 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a067a:	492d      	ldr	r1, [pc, #180]	; (80a0730 <_Z19ultra_sonic_measurev+0xc0>)
 80a067c:	f7ff fd19 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a0680:	4637      	mov	r7, r6
 80a0682:	2505      	movs	r5, #5
 80a0684:	4634      	mov	r4, r6
  for (k=0; k<ULTRA_LOOP; k++)
  {
      time = ultra_sonic_ping();
      dist = uMilli(time);
      hs[k] = dist;
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
 80a0686:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80a074c <_Z19ultra_sonic_measurev+0xdc>
      time = ultra_sonic_ping();
 80a068a:	f001 f867 	bl	80a175c <_Z16ultra_sonic_pingv>
      dist = uMilli(time);
 80a068e:	f001 f87f 	bl	80a1790 <_Z6uMillim>
      hs[k] = dist;
 80a0692:	6038      	str	r0, [r7, #0]
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
 80a0694:	f002 ffe6 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0698:	4641      	mov	r1, r8
 80a069a:	f857 2b04 	ldr.w	r2, [r7], #4
 80a069e:	f7ff fd08 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      run_blynk();
 80a06a2:	f000 f969 	bl	80a0978 <_Z9run_blynkv>
      delay(150);
 80a06a6:	2096      	movs	r0, #150	; 0x96
 80a06a8:	f002 fba8 	bl	80a2dfc <delay>
  for (k=0; k<ULTRA_LOOP; k++)
 80a06ac:	3d01      	subs	r5, #1
 80a06ae:	d1ec      	bne.n	80a068a <_Z19ultra_sonic_measurev+0x1a>
  }

  avg = 0;
  for (k=0; k<ULTRA_LOOP; k++)
  {
    avg = avg + hs[k];
 80a06b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80a06b4:	4413      	add	r3, r2
 80a06b6:	68a2      	ldr	r2, [r4, #8]
  int error = 0;
 80a06b8:	462f      	mov	r7, r5
    avg = avg + hs[k];
 80a06ba:	4413      	add	r3, r2
 80a06bc:	68e2      	ldr	r2, [r4, #12]
 80a06be:	4413      	add	r3, r2
 80a06c0:	6922      	ldr	r2, [r4, #16]
  }
  avg = avg / ULTRA_LOOP;
 80a06c2:	2405      	movs	r4, #5
    avg = avg + hs[k];
 80a06c4:	4413      	add	r3, r2
  avg = avg / ULTRA_LOOP;
 80a06c6:	fbb3 f4f4 	udiv	r4, r3, r4

  for (k=0; k<ULTRA_LOOP; k++)
  {
    error = error + (avg-hs[k]);
 80a06ca:	f856 2b04 	ldr.w	r2, [r6], #4
  for (k=0; k<ULTRA_LOOP; k++)
 80a06ce:	3501      	adds	r5, #1
    error = error + (avg-hs[k]);
 80a06d0:	4427      	add	r7, r4
  for (k=0; k<ULTRA_LOOP; k++)
 80a06d2:	2d05      	cmp	r5, #5
    error = error + (avg-hs[k]);
 80a06d4:	eba7 0702 	sub.w	r7, r7, r2
  for (k=0; k<ULTRA_LOOP; k++)
 80a06d8:	d1f7      	bne.n	80a06ca <_Z19ultra_sonic_measurev+0x5a>
  }

  if (avg==0)
 80a06da:	2b04      	cmp	r3, #4
 80a06dc:	d808      	bhi.n	80a06f0 <_Z19ultra_sonic_measurev+0x80>
  {
    level = 1000; // prevent that the second pump is switched on
    WriteToDatabase ( "WASSER", "WARNING: Failed to read ultrasonic sensor");  
 80a06de:	4915      	ldr	r1, [pc, #84]	; (80a0734 <_Z19ultra_sonic_measurev+0xc4>)
 80a06e0:	4815      	ldr	r0, [pc, #84]	; (80a0738 <_Z19ultra_sonic_measurev+0xc8>)
 80a06e2:	f7ff fd0b 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    return(1000);
 80a06e6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8

  //WriteToDatabase("WASSER","WASSERSTAND : ",level);

  return(level);

 80a06ea:	4620      	mov	r0, r4
 80a06ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Serial.printlnf ( " ultra error : %d ", error);
 80a06f0:	f002 ffb8 	bl	80a3664 <_Z16_fetch_usbserialv>
  avg = avg - MessFehler;
 80a06f4:	3c0f      	subs	r4, #15
  Serial.printlnf ( " ultra error : %d ", error);
 80a06f6:	463a      	mov	r2, r7
 80a06f8:	4910      	ldr	r1, [pc, #64]	; (80a073c <_Z19ultra_sonic_measurev+0xcc>)
 80a06fa:	f7ff fcda 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf ( " ultra distance average : %d mm", avg);
 80a06fe:	f002 ffb1 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0702:	4622      	mov	r2, r4
 80a0704:	490e      	ldr	r1, [pc, #56]	; (80a0740 <_Z19ultra_sonic_measurev+0xd0>)
 80a0706:	f7ff fcd4 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  println("distance : ",avg);
 80a070a:	4621      	mov	r1, r4
  level = TankHoehe - avg;
 80a070c:	f5c4 74b4 	rsb	r4, r4, #360	; 0x168
  println("distance : ",avg);
 80a0710:	480c      	ldr	r0, [pc, #48]	; (80a0744 <_Z19ultra_sonic_measurev+0xd4>)
 80a0712:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80a0716:	f000 fb3f 	bl	80a0d98 <_Z7printlnPci>
  Serial.printlnf ( " ultra level average : %d mm", level);
 80a071a:	f002 ffa3 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a071e:	4622      	mov	r2, r4
 80a0720:	4909      	ldr	r1, [pc, #36]	; (80a0748 <_Z19ultra_sonic_measurev+0xd8>)
 80a0722:	f7ff fcc6 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  run_blynk();
 80a0726:	f000 f927 	bl	80a0978 <_Z9run_blynkv>
  return(level);
 80a072a:	e7de      	b.n	80a06ea <_Z19ultra_sonic_measurev+0x7a>
 80a072c:	20000130 	.word	0x20000130
 80a0730:	080a5b96 	.word	0x080a5b96
 80a0734:	080a5bc5 	.word	0x080a5bc5
 80a0738:	080a5bef 	.word	0x080a5bef
 80a073c:	080a5bf6 	.word	0x080a5bf6
 80a0740:	080a5c09 	.word	0x080a5c09
 80a0744:	080a5c29 	.word	0x080a5c29
 80a0748:	080a5c35 	.word	0x080a5c35
 80a074c:	080a5bad 	.word	0x080a5bad

080a0750 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0750:	b40e      	push	{r1, r2, r3}
 80a0752:	b503      	push	{r0, r1, lr}
 80a0754:	ab03      	add	r3, sp, #12
 80a0756:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(false, format, args);
 80a075a:	2100      	movs	r1, #0
        va_start(args, format);
 80a075c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a075e:	f002 fa13 	bl	80a2b88 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 80a0762:	b002      	add	sp, #8
 80a0764:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0768:	b003      	add	sp, #12
 80a076a:	4770      	bx	lr

080a076c <_Z6get_IDv>:

}


uint8_t get_ID()
{
 80a076c:	b507      	push	{r0, r1, r2, lr}
  if (sensor.crcError()) {
 80a076e:	480a      	ldr	r0, [pc, #40]	; (80a0798 <_Z6get_IDv+0x2c>)
 80a0770:	f7ff ff7b 	bl	80a066a <_ZN4DS188crcErrorEv>
 80a0774:	b140      	cbz	r0, 80a0788 <_Z6get_IDv+0x1c>
    Serial.print(" CRC Error ");
 80a0776:	f002 ff75 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a077a:	4908      	ldr	r1, [pc, #32]	; (80a079c <_Z6get_IDv+0x30>)
 80a077c:	f002 f9ca 	bl	80a2b14 <_ZN5Print5printEPKc>
 80a0780:	2000      	movs	r0, #0
  uint8_t id;
  sensor.addr(addr);
  id = addr[7];
  //Serial.printf(" ID=%02X",id);
  return(id);
}
 80a0782:	b003      	add	sp, #12
 80a0784:	f85d fb04 	ldr.w	pc, [sp], #4
  sensor.addr(addr);
 80a0788:	4803      	ldr	r0, [pc, #12]	; (80a0798 <_Z6get_IDv+0x2c>)
 80a078a:	4669      	mov	r1, sp
 80a078c:	f7ff ff64 	bl	80a0658 <_ZN4DS184addrEPh>
  id = addr[7];
 80a0790:	f89d 0007 	ldrb.w	r0, [sp, #7]
  return(id);
 80a0794:	e7f5      	b.n	80a0782 <_Z6get_IDv+0x16>
 80a0796:	bf00      	nop
 80a0798:	20000144 	.word	0x20000144
 80a079c:	080a5c52 	.word	0x080a5c52

080a07a0 <_Z15get_Temperaturev>:
{
 80a07a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
Serial.println(" Get Temperature ");
 80a07a4:	f002 ff5e 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a07a8:	4923      	ldr	r1, [pc, #140]	; (80a0838 <_Z15get_Temperaturev+0x98>)
 80a07aa:	f002 f9c6 	bl	80a2b3a <_ZN5Print7printlnEPKc>
  int k = 0;
 80a07ae:	2600      	movs	r6, #0
    if (sensor.read()) {
 80a07b0:	4d22      	ldr	r5, [pc, #136]	; (80a083c <_Z15get_Temperaturev+0x9c>)
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
 80a07b2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80a0848 <_Z15get_Temperaturev+0xa8>
      println("sensor id",id);
 80a07b6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80a084c <_Z15get_Temperaturev+0xac>
    if (sensor.read()) {
 80a07ba:	4628      	mov	r0, r5
 80a07bc:	f7ff ff26 	bl	80a060c <_ZN4DS184readEv>
 80a07c0:	b320      	cbz	r0, 80a080c <_Z15get_Temperaturev+0x6c>
      id = get_ID();
 80a07c2:	f7ff ffd3 	bl	80a076c <_Z6get_IDv>
 80a07c6:	4604      	mov	r4, r0
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
 80a07c8:	f002 ff4c 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a07cc:	4607      	mov	r7, r0
 80a07ce:	4628      	mov	r0, r5
 80a07d0:	f7ff ff40 	bl	80a0654 <_ZN4DS187celsiusEv>
 80a07d4:	f003 fbd2 	bl	80a3f7c <__aeabi_f2d>
 80a07d8:	4633      	mov	r3, r6
 80a07da:	4622      	mov	r2, r4
 80a07dc:	e9cd 0100 	strd	r0, r1, [sp]
 80a07e0:	4641      	mov	r1, r8
 80a07e2:	4638      	mov	r0, r7
 80a07e4:	f7ff ffb4 	bl	80a0750 <_ZN5Print6printfEPKcz>
      println("sensor id",id);
 80a07e8:	4621      	mov	r1, r4
 80a07ea:	4648      	mov	r0, r9
 80a07ec:	f000 fad4 	bl	80a0d98 <_Z7printlnPci>
      delay(250);
 80a07f0:	20fa      	movs	r0, #250	; 0xfa
 80a07f2:	f002 fb03 	bl	80a2dfc <delay>
      if(id == 37) {
 80a07f6:	2c25      	cmp	r4, #37	; 0x25
      k++;
 80a07f8:	f106 0601 	add.w	r6, r6, #1
      if(id == 37) {
 80a07fc:	d113      	bne.n	80a0826 <_Z15get_Temperaturev+0x86>
        temp_in = sensor.celsius();
 80a07fe:	4628      	mov	r0, r5
 80a0800:	f7ff ff28 	bl	80a0654 <_ZN4DS187celsiusEv>
 80a0804:	f004 f968 	bl	80a4ad8 <__aeabi_f2iz>
 80a0808:	4b0d      	ldr	r3, [pc, #52]	; (80a0840 <_Z15get_Temperaturev+0xa0>)
        temp_out = sensor.celsius();
 80a080a:	6018      	str	r0, [r3, #0]
  } while(sensor.searchDone() == false);
 80a080c:	4628      	mov	r0, r5
 80a080e:	f7ff ff29 	bl	80a0664 <_ZN4DS1810searchDoneEv>
 80a0812:	2800      	cmp	r0, #0
 80a0814:	d0d1      	beq.n	80a07ba <_Z15get_Temperaturev+0x1a>
return(sensor.celsius());
 80a0816:	4809      	ldr	r0, [pc, #36]	; (80a083c <_Z15get_Temperaturev+0x9c>)
 80a0818:	f7ff ff1c 	bl	80a0654 <_ZN4DS187celsiusEv>
 80a081c:	f004 f95c 	bl	80a4ad8 <__aeabi_f2iz>
}
 80a0820:	b003      	add	sp, #12
 80a0822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(id == 151){
 80a0826:	2c97      	cmp	r4, #151	; 0x97
 80a0828:	d1f0      	bne.n	80a080c <_Z15get_Temperaturev+0x6c>
        temp_out = sensor.celsius();
 80a082a:	4628      	mov	r0, r5
 80a082c:	f7ff ff12 	bl	80a0654 <_ZN4DS187celsiusEv>
 80a0830:	f004 f952 	bl	80a4ad8 <__aeabi_f2iz>
 80a0834:	4b03      	ldr	r3, [pc, #12]	; (80a0844 <_Z15get_Temperaturev+0xa4>)
 80a0836:	e7e8      	b.n	80a080a <_Z15get_Temperaturev+0x6a>
 80a0838:	080a5c5e 	.word	0x080a5c5e
 80a083c:	20000144 	.word	0x20000144
 80a0840:	200002dc 	.word	0x200002dc
 80a0844:	200002e0 	.word	0x200002e0
 80a0848:	080a5c70 	.word	0x080a5c70
 80a084c:	080a5c9b 	.word	0x080a5c9b

080a0850 <_GLOBAL__sub_I_sensor>:
DS18 sensor(SENSOR_PIN);  // create sensor instance
 80a0850:	2200      	movs	r2, #0
 80a0852:	2105      	movs	r1, #5
 80a0854:	4801      	ldr	r0, [pc, #4]	; (80a085c <_GLOBAL__sub_I_sensor+0xc>)
 80a0856:	f7ff bdf1 	b.w	80a043c <_ZN4DS18C1Etb>
 80a085a:	bf00      	nop
 80a085c:	20000144 	.word	0x20000144

080a0860 <_ZN11SystemClassD1Ev>:
class SystemClass {
 80a0860:	b510      	push	{r4, lr}
 80a0862:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0864:	6800      	ldr	r0, [r0, #0]
 80a0866:	b108      	cbz	r0, 80a086c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a0868:	f001 ff40 	bl	80a26ec <free>
class SystemClass {
 80a086c:	4620      	mov	r0, r4
 80a086e:	bd10      	pop	{r4, pc}

080a0870 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0>:

inline bool CloudDisconnectOptions::isTimeoutSet() const {
    return (flags_ & OptionFlag::TIMEOUT);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
 80a0870:	b513      	push	{r0, r1, r4, lr}
 80a0872:	4604      	mov	r4, r0
 80a0874:	4b05      	ldr	r3, [pc, #20]	; (80a088c <_ZN10CloudClass7publishEPKc.isra.0.constprop.0+0x1c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0876:	2200      	movs	r2, #0
 80a0878:	781b      	ldrb	r3, [r3, #0]
 80a087a:	4905      	ldr	r1, [pc, #20]	; (80a0890 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0+0x20>)
 80a087c:	f88d 3000 	strb.w	r3, [sp]
 80a0880:	233c      	movs	r3, #60	; 0x3c
 80a0882:	f002 fcb9 	bl	80a31f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
 80a0886:	4620      	mov	r0, r4
 80a0888:	b002      	add	sp, #8
 80a088a:	bd10      	pop	{r4, pc}
 80a088c:	20000194 	.word	0x20000194
 80a0890:	080a5b81 	.word	0x080a5b81

080a0894 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0.constprop.0>:

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data, int ttl) {
    return publish(name, data, ttl, PUBLIC);
}

inline bool CloudClass::subscribe(const char* name, EventHandler handler) {
 80a0894:	b507      	push	{r0, r1, r2, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a0896:	2200      	movs	r2, #0
 80a0898:	2301      	movs	r3, #1
 80a089a:	e9cd 2200 	strd	r2, r2, [sp]
 80a089e:	4903      	ldr	r1, [pc, #12]	; (80a08ac <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0.constprop.0+0x18>)
 80a08a0:	4803      	ldr	r0, [pc, #12]	; (80a08b0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0.constprop.0+0x1c>)
 80a08a2:	f001 ff03 	bl	80a26ac <spark_subscribe>
    return subscribe(name, handler, ALL_DEVICES);
}
 80a08a6:	b003      	add	sp, #12
 80a08a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a08ac:	080a0c25 	.word	0x080a0c25
 80a08b0:	080a5b81 	.word	0x080a5b81

080a08b4 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a08b4:	2300      	movs	r3, #0
 80a08b6:	6840      	ldr	r0, [r0, #4]
 80a08b8:	461a      	mov	r2, r3
 80a08ba:	4619      	mov	r1, r3
 80a08bc:	f001 be76 	b.w	80a25ac <network_on>

080a08c0 <_Z9setupWifiv>:
/*---------------------------------------------------------------------
change WiFi settings
---------------------------------------------------------------------*/

void setupWifi()
{
 80a08c0:	b510      	push	{r4, lr}
WiFi.on();
 80a08c2:	4c16      	ldr	r4, [pc, #88]	; (80a091c <_Z9setupWifiv+0x5c>)
{
 80a08c4:	b094      	sub	sp, #80	; 0x50
WiFi.on();
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	f7ff fff4 	bl	80a08b4 <_ZN5spark9WiFiClass2onEv>
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
 80a08cc:	2200      	movs	r2, #0
 80a08ce:	6860      	ldr	r0, [r4, #4]
 80a08d0:	4611      	mov	r1, r2
 80a08d2:	f001 fe8b 	bl	80a25ec <network_has_credentials>

if(WiFi.hasCredentials())
 80a08d6:	b128      	cbz	r0, 80a08e4 <_Z9setupWifiv+0x24>
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
 80a08d8:	2300      	movs	r3, #0
 80a08da:	6860      	ldr	r0, [r4, #4]
 80a08dc:	461a      	mov	r2, r3
 80a08de:	4619      	mov	r1, r3
 80a08e0:	f001 fe94 	bl	80a260c <network_clear_credentials>
        memset(&creds, 0, sizeof(creds));
 80a08e4:	2238      	movs	r2, #56	; 0x38
 80a08e6:	2100      	movs	r1, #0
 80a08e8:	a806      	add	r0, sp, #24
 80a08ea:	f004 fbc5 	bl	80a5078 <memset>
        creds.size = sizeof(creds);
 80a08ee:	234c      	movs	r3, #76	; 0x4c
 80a08f0:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
 80a08f2:	4b0b      	ldr	r3, [pc, #44]	; (80a0920 <_Z9setupWifiv+0x60>)
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a08f4:	aa01      	add	r2, sp, #4
        creds.ssid = ssid;
 80a08f6:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
 80a08f8:	230b      	movs	r3, #11
 80a08fa:	9303      	str	r3, [sp, #12]
        creds.password = password;
 80a08fc:	4b09      	ldr	r3, [pc, #36]	; (80a0924 <_Z9setupWifiv+0x64>)
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a08fe:	6860      	ldr	r0, [r4, #4]
        creds.password = password;
 80a0900:	9304      	str	r3, [sp, #16]
        creds.password_len = passwordLen;
 80a0902:	230d      	movs	r3, #13
 80a0904:	9305      	str	r3, [sp, #20]
        creds.security = WLanSecurityType(security);
 80a0906:	2303      	movs	r3, #3
 80a0908:	f8ad 3018 	strh.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a090c:	2300      	movs	r3, #0
 80a090e:	4619      	mov	r1, r3
 80a0910:	f001 fe74 	bl	80a25fc <network_set_credentials>
        spark_cloud_flag_connect();
 80a0914:	f001 feaa 	bl	80a266c <spark_cloud_flag_connect>
  WiFi.clearCredentials();
  }

WiFi.setCredentials("Stitzenburg", "BC$_clu$_4277");
Particle.connect();
}
 80a0918:	b014      	add	sp, #80	; 0x50
 80a091a:	bd10      	pop	{r4, pc}
 80a091c:	20000400 	.word	0x20000400
 80a0920:	080a5ca5 	.word	0x080a5ca5
 80a0924:	080a5cb1 	.word	0x080a5cb1

080a0928 <_Z12init_controlv>:
-> init EEPROM the first time
---------------------------------------------------------------------*/

void init_control()

{
 80a0928:	b538      	push	{r3, r4, r5, lr}
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a092a:	4c10      	ldr	r4, [pc, #64]	; (80a096c <_Z12init_controlv+0x44>)
 EEPROM.get(0, control);
 80a092c:	f003 f948 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
 80a0930:	2214      	movs	r2, #20
 80a0932:	4621      	mov	r1, r4
 80a0934:	2000      	movs	r0, #0
 80a0936:	f001 fcc9 	bl	80a22cc <HAL_EEPROM_Get>

 if ((control.pumpe_count_down < 30) | (control.pumpe_count_down > 240))
 80a093a:	68e3      	ldr	r3, [r4, #12]
 80a093c:	3b1e      	subs	r3, #30
 80a093e:	2bd2      	cmp	r3, #210	; 0xd2
 80a0940:	d90c      	bls.n	80a095c <_Z12init_controlv+0x34>
  {
    control.pumpe_count_down = 90;
    control.reserve_repetitions = 0;
 80a0942:	235a      	movs	r3, #90	; 0x5a
 80a0944:	2500      	movs	r5, #0
 80a0946:	e9c4 3503 	strd	r3, r5, [r4, #12]
    control.version = 1;
 80a094a:	2301      	movs	r3, #1
 80a094c:	6023      	str	r3, [r4, #0]
    EEPROM.put(0, control);
 80a094e:	f003 f937 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a0952:	2214      	movs	r2, #20
 80a0954:	4621      	mov	r1, r4
 80a0956:	4628      	mov	r0, r5
 80a0958:	f001 fcc0 	bl	80a22dc <HAL_EEPROM_Put>
  }

  WriteToDatabase("RESET", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a095c:	68e2      	ldr	r2, [r4, #12]
 80a095e:	4904      	ldr	r1, [pc, #16]	; (80a0970 <_Z12init_controlv+0x48>)
 80a0960:	4804      	ldr	r0, [pc, #16]	; (80a0974 <_Z12init_controlv+0x4c>)

}
 80a0962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WriteToDatabase("RESET", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a0966:	f7ff bc15 	b.w	80a0194 <_Z15WriteToDatabasePcS_i>
 80a096a:	bf00      	nop
 80a096c:	20000290 	.word	0x20000290
 80a0970:	080a5cbf 	.word	0x080a5cbf
 80a0974:	080a5cd8 	.word	0x080a5cd8

080a0978 <_Z9run_blynkv>:
* run blynk
*/
void run_blynk()
{

}
 80a0978:	4770      	bx	lr

080a097a <_Z7myDelayi>:

void myDelay ( int seconds)
{
 80a097a:	b538      	push	{r3, r4, r5, lr}
for (int i = 0; i<(20*seconds); i++)
 80a097c:	2514      	movs	r5, #20
 80a097e:	2400      	movs	r4, #0
 80a0980:	4345      	muls	r5, r0
 80a0982:	42a5      	cmp	r5, r4
 80a0984:	dd04      	ble.n	80a0990 <_Z7myDelayi+0x16>
  {
    delay(50);
 80a0986:	2032      	movs	r0, #50	; 0x32
 80a0988:	f002 fa38 	bl	80a2dfc <delay>
for (int i = 0; i<(20*seconds); i++)
 80a098c:	3401      	adds	r4, #1
 80a098e:	e7f8      	b.n	80a0982 <_Z7myDelayi+0x8>
  }
}
 80a0990:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0994 <_Z7getTimev>:

/*
* Return time as "minutes of day" = 60*hour + minutes
*/
int getTime()
{
 80a0994:	b538      	push	{r3, r4, r5, lr}
  tsec = 60 * Time.minute() + Time.second();  
 80a0996:	f002 f9e7 	bl	80a2d68 <_ZN9TimeClass6minuteEv>
 80a099a:	253c      	movs	r5, #60	; 0x3c
 80a099c:	4604      	mov	r4, r0
 80a099e:	f002 f9ef 	bl	80a2d80 <_ZN9TimeClass6secondEv>
 80a09a2:	fb05 0404 	mla	r4, r5, r4, r0
 80a09a6:	4b05      	ldr	r3, [pc, #20]	; (80a09bc <_Z7getTimev+0x28>)
 80a09a8:	601c      	str	r4, [r3, #0]
  return (Time.hour() * 60 + Time.minute());
 80a09aa:	f002 f9d1 	bl	80a2d50 <_ZN9TimeClass4hourEv>
 80a09ae:	4604      	mov	r4, r0
 80a09b0:	f002 f9da 	bl	80a2d68 <_ZN9TimeClass6minuteEv>
}
 80a09b4:	fb05 0004 	mla	r0, r5, r4, r0
 80a09b8:	bd38      	pop	{r3, r4, r5, pc}
 80a09ba:	bf00      	nop
 80a09bc:	20000330 	.word	0x20000330

080a09c0 <_Z12getSleepTimei>:
  min = tnow - (hour * 60);
  Serial.printlnf(" (%02d:%02d)", hour, min);
}

int getSleepTime(int target)
{
 80a09c0:	b510      	push	{r4, lr}
 80a09c2:	4604      	mov	r4, r0
  target = target - Time.minute();
 80a09c4:	f002 f9d0 	bl	80a2d68 <_ZN9TimeClass6minuteEv>
  if (target < 0)
 80a09c8:	1a24      	subs	r4, r4, r0
    target = target + 60;
 80a09ca:	bf48      	it	mi
 80a09cc:	343c      	addmi	r4, #60	; 0x3c
  Serial.printlnf(" proposed sleep duration: %d minutes", target);
 80a09ce:	f002 fe49 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a09d2:	4622      	mov	r2, r4
 80a09d4:	4902      	ldr	r1, [pc, #8]	; (80a09e0 <_Z12getSleepTimei+0x20>)
 80a09d6:	f7ff fb6c 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  return (target);
}
 80a09da:	4620      	mov	r0, r4
 80a09dc:	bd10      	pop	{r4, pc}
 80a09de:	bf00      	nop
 80a09e0:	080a5cde 	.word	0x080a5cde

080a09e4 <_Z15readAdcChannelsv>:
  val = val * 43 / 40960;
  return (val);
}

void readAdcChannels()
{
 80a09e4:	b538      	push	{r3, r4, r5, lr}
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a09e6:	200a      	movs	r0, #10
 80a09e8:	f003 f8d1 	bl	80a3b8e <analogRead>
  val = val * 43 / 40960;
 80a09ec:	f44f 4520 	mov.w	r5, #40960	; 0xa000
 80a09f0:	4c0b      	ldr	r4, [pc, #44]	; (80a0a20 <_Z15readAdcChannelsv+0x3c>)
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a09f2:	4b0c      	ldr	r3, [pc, #48]	; (80a0a24 <_Z15readAdcChannelsv+0x40>)
  val = val * 43 / 40960;
 80a09f4:	4360      	muls	r0, r4
 80a09f6:	fbb0 f0f5 	udiv	r0, r0, r5
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a09fa:	6018      	str	r0, [r3, #0]
  AiPumpeReserve = convertAdcValue(analogRead(A2));
 80a09fc:	200c      	movs	r0, #12
 80a09fe:	f003 f8c6 	bl	80a3b8e <analogRead>
  val = val * 43 / 40960;
 80a0a02:	4360      	muls	r0, r4
 80a0a04:	fbb0 f0f5 	udiv	r0, r0, r5
  AiPumpeReserve = convertAdcValue(analogRead(A2));
 80a0a08:	4b07      	ldr	r3, [pc, #28]	; (80a0a28 <_Z15readAdcChannelsv+0x44>)
 80a0a0a:	6018      	str	r0, [r3, #0]
  Ai12V = convertAdcValue(analogRead(A1));
 80a0a0c:	200b      	movs	r0, #11
 80a0a0e:	f003 f8be 	bl	80a3b8e <analogRead>
  val = val * 43 / 40960;
 80a0a12:	4344      	muls	r4, r0
 80a0a14:	fbb4 f4f5 	udiv	r4, r4, r5
  Ai12V = convertAdcValue(analogRead(A1));
 80a0a18:	4b04      	ldr	r3, [pc, #16]	; (80a0a2c <_Z15readAdcChannelsv+0x48>)
 80a0a1a:	601c      	str	r4, [r3, #0]
}
 80a0a1c:	bd38      	pop	{r3, r4, r5, pc}
 80a0a1e:	bf00      	nop
 80a0a20:	00022a4c 	.word	0x00022a4c
 80a0a24:	2000017c 	.word	0x2000017c
 80a0a28:	20000180 	.word	0x20000180
 80a0a2c:	20000178 	.word	0x20000178

080a0a30 <_Z6hwInitv>:

/*---------------------------------------------------------------------
Hardware Initialisation
---------------------------------------------------------------------*/
void hwInit()
{
 80a0a30:	b508      	push	{r3, lr}
  conrad_rsl_init(); // 433 MHz Sender abschalten
 80a0a32:	f001 f83d 	bl	80a1ab0 <_Z15conrad_rsl_initv>

  ultra_sonic_setup();
 80a0a36:	f000 fe83 	bl	80a1740 <_Z17ultra_sonic_setupv>

  pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a0a3a:	2101      	movs	r1, #1
 80a0a3c:	4608      	mov	r0, r1
 80a0a3e:	f003 f869 	bl	80a3b14 <pinMode>
  pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a0a42:	2101      	movs	r1, #1
 80a0a44:	2002      	movs	r0, #2
 80a0a46:	f003 f865 	bl	80a3b14 <pinMode>

  digitalWrite(DO_PUMPE_RESERVE, 0);
 80a0a4a:	2100      	movs	r1, #0
 80a0a4c:	2002      	movs	r0, #2
 80a0a4e:	f003 f872 	bl	80a3b36 <digitalWrite>
  digitalWrite(DO_PUMPE_MAIN, 0);
 80a0a52:	2100      	movs	r1, #0
 80a0a54:	2001      	movs	r0, #1
 80a0a56:	f003 f86e 	bl	80a3b36 <digitalWrite>

  st_funk_pumpe = switch_pumpe_main(OFF, 0);
 80a0a5a:	2100      	movs	r1, #0
 80a0a5c:	4608      	mov	r0, r1
 80a0a5e:	f001 f947 	bl	80a1cf0 <_Z17switch_pumpe_mainii>
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0a62:	2100      	movs	r1, #0
  st_funk_pumpe = switch_pumpe_main(OFF, 0);
 80a0a64:	4b0e      	ldr	r3, [pc, #56]	; (80a0aa0 <_Z6hwInitv+0x70>)
 80a0a66:	6018      	str	r0, [r3, #0]
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0a68:	4608      	mov	r0, r1
 80a0a6a:	f001 fa01 	bl	80a1e70 <_Z20switch_pumpe_reserveii>
 80a0a6e:	4b0d      	ldr	r3, [pc, #52]	; (80a0aa4 <_Z6hwInitv+0x74>)

  pinMode(BLYNK_LED, OUTPUT);
 80a0a70:	2101      	movs	r1, #1
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0a72:	6018      	str	r0, [r3, #0]
  pinMode(BLYNK_LED, OUTPUT);
 80a0a74:	2007      	movs	r0, #7
 80a0a76:	f003 f84d 	bl	80a3b14 <pinMode>
  pinMode(DONT_SLEEP_PIN, INPUT);
 80a0a7a:	2100      	movs	r1, #0
 80a0a7c:	2006      	movs	r0, #6
 80a0a7e:	f003 f849 	bl	80a3b14 <pinMode>

  EEPROM.get(0, control);
 80a0a82:	f003 f89d 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a0a86:	2214      	movs	r2, #20
 80a0a88:	2000      	movs	r0, #0
 80a0a8a:	4907      	ldr	r1, [pc, #28]	; (80a0aa8 <_Z6hwInitv+0x78>)
 80a0a8c:	f001 fc1e 	bl	80a22cc <HAL_EEPROM_Get>

  ts_giessen = 8 * 60 + 1; // zu dieser Zeit wird die Wasserpumpe eingeschaltet
 80a0a90:	f240 12e1 	movw	r2, #481	; 0x1e1
 80a0a94:	4b05      	ldr	r3, [pc, #20]	; (80a0aac <_Z6hwInitv+0x7c>)
 80a0a96:	601a      	str	r2, [r3, #0]

  done_giessen = 0;
 80a0a98:	2200      	movs	r2, #0
 80a0a9a:	4b05      	ldr	r3, [pc, #20]	; (80a0ab0 <_Z6hwInitv+0x80>)
 80a0a9c:	601a      	str	r2, [r3, #0]
}
 80a0a9e:	bd08      	pop	{r3, pc}
 80a0aa0:	200002d0 	.word	0x200002d0
 80a0aa4:	200002d8 	.word	0x200002d8
 80a0aa8:	20000290 	.word	0x20000290
 80a0aac:	20000000 	.word	0x20000000
 80a0ab0:	200002a4 	.word	0x200002a4

080a0ab4 <_Z18reportDontSleepPinv>:
}
/*---------------------------------------------------------------------
report to database if DontSleepPin is set
---------------------------------------------------------------------*/
int reportDontSleepPin()
{
 80a0ab4:	b538      	push	{r3, r4, r5, lr}
  int dontSleep = 0;

  if (digitalRead(DONT_SLEEP_PIN) == HIGH)
 80a0ab6:	2006      	movs	r0, #6
 80a0ab8:	f003 f856 	bl	80a3b68 <digitalRead>
 80a0abc:	2801      	cmp	r0, #1
 80a0abe:	4604      	mov	r4, r0
 80a0ac0:	d110      	bne.n	80a0ae4 <_Z18reportDontSleepPinv+0x30>
  {
    dontSleepHW = 1;
 80a0ac2:	4b09      	ldr	r3, [pc, #36]	; (80a0ae8 <_Z18reportDontSleepPinv+0x34>)
    dontSleep = 1;
    WriteToDatabase("CONTROL", "SLEEP disabled by HW pin ");
 80a0ac4:	4909      	ldr	r1, [pc, #36]	; (80a0aec <_Z18reportDontSleepPinv+0x38>)
    dontSleepHW = 1;
 80a0ac6:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "SLEEP disabled by HW pin ");
 80a0ac8:	4809      	ldr	r0, [pc, #36]	; (80a0af0 <_Z18reportDontSleepPinv+0x3c>)
 80a0aca:	f7ff fb17 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  }

  if (control.dontSleepSW == 1)
 80a0ace:	4b09      	ldr	r3, [pc, #36]	; (80a0af4 <_Z18reportDontSleepPinv+0x40>)
 80a0ad0:	685d      	ldr	r5, [r3, #4]
 80a0ad2:	2d01      	cmp	r5, #1
 80a0ad4:	d104      	bne.n	80a0ae0 <_Z18reportDontSleepPinv+0x2c>
  {
    dontSleep = 1;
    WriteToDatabase("CONTROL", "SLEEP disabled by SW ");
 80a0ad6:	4908      	ldr	r1, [pc, #32]	; (80a0af8 <_Z18reportDontSleepPinv+0x44>)
 80a0ad8:	4805      	ldr	r0, [pc, #20]	; (80a0af0 <_Z18reportDontSleepPinv+0x3c>)
 80a0ada:	f7ff fb0f 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a0ade:	462c      	mov	r4, r5
  }
  return (dontSleep);
}
 80a0ae0:	4620      	mov	r0, r4
 80a0ae2:	bd38      	pop	{r3, r4, r5, pc}
  int dontSleep = 0;
 80a0ae4:	2400      	movs	r4, #0
 80a0ae6:	e7f2      	b.n	80a0ace <_Z18reportDontSleepPinv+0x1a>
 80a0ae8:	200002a8 	.word	0x200002a8
 80a0aec:	080a5d03 	.word	0x080a5d03
 80a0af0:	080a5d1d 	.word	0x080a5d1d
 80a0af4:	20000290 	.word	0x20000290
 80a0af8:	080a5d25 	.word	0x080a5d25

080a0afc <_Z17checkDontSleepPinv>:

/*---------------------------------------------------------------------
check if DontSleepPin is set
---------------------------------------------------------------------*/
int checkDontSleepPin()
{
 80a0afc:	b510      	push	{r4, lr}
  if (digitalRead(DONT_SLEEP_PIN) == HIGH)
 80a0afe:	2006      	movs	r0, #6
 80a0b00:	f003 f832 	bl	80a3b68 <digitalRead>
 80a0b04:	1e43      	subs	r3, r0, #1
 80a0b06:	4c06      	ldr	r4, [pc, #24]	; (80a0b20 <_Z17checkDontSleepPinv+0x24>)
 80a0b08:	4258      	negs	r0, r3
 80a0b0a:	4158      	adcs	r0, r3
 80a0b0c:	6020      	str	r0, [r4, #0]
  else
  {
    dontSleepHW = 0;
  }

  Serial.printlnf(" dontSleep pin : %d ", dontSleepHW);
 80a0b0e:	f002 fda9 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0b12:	6822      	ldr	r2, [r4, #0]
 80a0b14:	4903      	ldr	r1, [pc, #12]	; (80a0b24 <_Z17checkDontSleepPinv+0x28>)
 80a0b16:	f7ff facc 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  return (dontSleepHW);
}
 80a0b1a:	6820      	ldr	r0, [r4, #0]
 80a0b1c:	bd10      	pop	{r4, pc}
 80a0b1e:	bf00      	nop
 80a0b20:	200002a8 	.word	0x200002a8
 80a0b24:	080a5d3b 	.word	0x080a5d3b

080a0b28 <_Z9timeStampv>:

/*---------------------------------------------------------------------
print timestamp to serial port
---------------------------------------------------------------------*/
void timeStamp()
{
 80a0b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0b2c:	b085      	sub	sp, #20
  sprintf(timebuffer, " %.2d-%.2d-%d %.2d:%.2d:%.2d ",
 80a0b2e:	f002 f933 	bl	80a2d98 <_ZN9TimeClass3dayEv>
 80a0b32:	4604      	mov	r4, r0
 80a0b34:	f002 f944 	bl	80a2dc0 <_ZN9TimeClass5monthEv>
 80a0b38:	4605      	mov	r5, r0
 80a0b3a:	f002 f949 	bl	80a2dd0 <_ZN9TimeClass4yearEv>
 80a0b3e:	4606      	mov	r6, r0
 80a0b40:	f002 f906 	bl	80a2d50 <_ZN9TimeClass4hourEv>
 80a0b44:	4607      	mov	r7, r0
 80a0b46:	f002 f90f 	bl	80a2d68 <_ZN9TimeClass6minuteEv>
 80a0b4a:	4680      	mov	r8, r0
 80a0b4c:	f002 f918 	bl	80a2d80 <_ZN9TimeClass6secondEv>
 80a0b50:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80a0b7c <_Z9timeStampv+0x54>
 80a0b54:	462b      	mov	r3, r5
 80a0b56:	4622      	mov	r2, r4
 80a0b58:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80a0b5c:	4906      	ldr	r1, [pc, #24]	; (80a0b78 <_Z9timeStampv+0x50>)
 80a0b5e:	4648      	mov	r0, r9
 80a0b60:	e9cd 6700 	strd	r6, r7, [sp]
 80a0b64:	f001 fdd2 	bl	80a270c <sprintf>
          Time.year(),
          Time.hour(),
          Time.minute(),
          Time.second());

  Serial.print(timebuffer);
 80a0b68:	f002 fd7c 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0b6c:	4649      	mov	r1, r9
/*   if (termEnabled == 1)
  {
    terminal.print(timebuffer); // Ausgabe an BLYNK APP terminal
    terminal.flush();
  }  */
}
 80a0b6e:	b005      	add	sp, #20
 80a0b70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Serial.print(timebuffer);
 80a0b74:	f001 bfce 	b.w	80a2b14 <_ZN5Print5printEPKc>
 80a0b78:	080a5d50 	.word	0x080a5d50
 80a0b7c:	200002f0 	.word	0x200002f0

080a0b80 <_Z7printlnPc>:

/*---------------------------------------------------------------------
print to serial port and to Blynk terminal
---------------------------------------------------------------------*/
void println(char *text)
{
 80a0b80:	b510      	push	{r4, lr}
 80a0b82:	4604      	mov	r4, r0
  timeStamp();
 80a0b84:	f7ff ffd0 	bl	80a0b28 <_Z9timeStampv>
  Serial.println(text);
 80a0b88:	f002 fd6c 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0b8c:	4621      	mov	r1, r4


}
 80a0b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println(text);
 80a0b92:	f001 bfd2 	b.w	80a2b3a <_ZN5Print7printlnEPKc>
	...

080a0b98 <_Z4helpv>:
{
 80a0b98:	b508      	push	{r3, lr}
  println(" Hello ");
 80a0b9a:	4811      	ldr	r0, [pc, #68]	; (80a0be0 <_Z4helpv+0x48>)
 80a0b9c:	f7ff fff0 	bl	80a0b80 <_Z7printlnPc>
  println(" a : Status");
 80a0ba0:	4810      	ldr	r0, [pc, #64]	; (80a0be4 <_Z4helpv+0x4c>)
 80a0ba2:	f7ff ffed 	bl	80a0b80 <_Z7printlnPc>
  println(" b : Blumen giessen");
 80a0ba6:	4810      	ldr	r0, [pc, #64]	; (80a0be8 <_Z4helpv+0x50>)
 80a0ba8:	f7ff ffea 	bl	80a0b80 <_Z7printlnPc>
  println(" d : Zeitdauer Giessen verringern");
 80a0bac:	480f      	ldr	r0, [pc, #60]	; (80a0bec <_Z4helpv+0x54>)
 80a0bae:	f7ff ffe7 	bl	80a0b80 <_Z7printlnPc>
  println(" i : Zeitdauer Giessen erhoehen");
 80a0bb2:	480f      	ldr	r0, [pc, #60]	; (80a0bf0 <_Z4helpv+0x58>)
 80a0bb4:	f7ff ffe4 	bl	80a0b80 <_Z7printlnPc>
  println(" s : sleep enabled ");
 80a0bb8:	480e      	ldr	r0, [pc, #56]	; (80a0bf4 <_Z4helpv+0x5c>)
 80a0bba:	f7ff ffe1 	bl	80a0b80 <_Z7printlnPc>
  println(" p : sleep disabled ");
 80a0bbe:	480e      	ldr	r0, [pc, #56]	; (80a0bf8 <_Z4helpv+0x60>)
 80a0bc0:	f7ff ffde 	bl	80a0b80 <_Z7printlnPc>
  println(" u : clear reserve repetition counter ");  
 80a0bc4:	480d      	ldr	r0, [pc, #52]	; (80a0bfc <_Z4helpv+0x64>)
 80a0bc6:	f7ff ffdb 	bl	80a0b80 <_Z7printlnPc>
  println(" w : store config to EEPROM ");
 80a0bca:	480d      	ldr	r0, [pc, #52]	; (80a0c00 <_Z4helpv+0x68>)
 80a0bcc:	f7ff ffd8 	bl	80a0b80 <_Z7printlnPc>
  println(" y : goto sleep ");  
 80a0bd0:	480c      	ldr	r0, [pc, #48]	; (80a0c04 <_Z4helpv+0x6c>)
 80a0bd2:	f7ff ffd5 	bl	80a0b80 <_Z7printlnPc>
}
 80a0bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  println(" x : ultra sonic measurement ");
 80a0bda:	480b      	ldr	r0, [pc, #44]	; (80a0c08 <_Z4helpv+0x70>)
 80a0bdc:	f7ff bfd0 	b.w	80a0b80 <_Z7printlnPc>
 80a0be0:	080a5d6e 	.word	0x080a5d6e
 80a0be4:	080a5d76 	.word	0x080a5d76
 80a0be8:	080a5d82 	.word	0x080a5d82
 80a0bec:	080a5d96 	.word	0x080a5d96
 80a0bf0:	080a5db8 	.word	0x080a5db8
 80a0bf4:	080a5dd8 	.word	0x080a5dd8
 80a0bf8:	080a5dec 	.word	0x080a5dec
 80a0bfc:	080a5e01 	.word	0x080a5e01
 80a0c00:	080a5e28 	.word	0x080a5e28
 80a0c04:	080a5e45 	.word	0x080a5e45
 80a0c08:	080a5e56 	.word	0x080a5e56

080a0c0c <_Z7println6String>:
/*---------------------------------------------------------------------
print to serial port and to Blynk terminal
---------------------------------------------------------------------*/

void println(String text)
{
 80a0c0c:	b510      	push	{r4, lr}
 80a0c0e:	4604      	mov	r4, r0
  timeStamp();
 80a0c10:	f7ff ff8a 	bl	80a0b28 <_Z9timeStampv>
  Serial.println(text);
 80a0c14:	f002 fd26 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0c18:	6821      	ldr	r1, [r4, #0]

}
 80a0c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println(text);
 80a0c1e:	f001 bf8c 	b.w	80a2b3a <_ZN5Print7printlnEPKc>
	...

080a0c24 <_Z17deviceNameHandlerPKcS0_>:
{
 80a0c24:	b570      	push	{r4, r5, r6, lr}
 80a0c26:	4605      	mov	r5, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0c28:	4e1e      	ldr	r6, [pc, #120]	; (80a0ca4 <_Z17deviceNameHandlerPKcS0_+0x80>)
 80a0c2a:	b08c      	sub	sp, #48	; 0x30
 80a0c2c:	460c      	mov	r4, r1
 80a0c2e:	a804      	add	r0, sp, #16
 80a0c30:	4631      	mov	r1, r6
 80a0c32:	f001 fea1 	bl	80a2978 <_ZN6StringC1EPKc>
  println("received  : " + String(topic));
 80a0c36:	4629      	mov	r1, r5
 80a0c38:	4668      	mov	r0, sp
 80a0c3a:	f001 fe9d 	bl	80a2978 <_ZN6StringC1EPKc>
 80a0c3e:	4669      	mov	r1, sp
 80a0c40:	a804      	add	r0, sp, #16
 80a0c42:	f001 ff02 	bl	80a2a4a <_ZplRK15StringSumHelperRK6String>
 80a0c46:	4601      	mov	r1, r0
 80a0c48:	a808      	add	r0, sp, #32
 80a0c4a:	f001 fed4 	bl	80a29f6 <_ZN6StringC1ERKS_>
 80a0c4e:	a808      	add	r0, sp, #32
 80a0c50:	f7ff ffdc 	bl	80a0c0c <_Z7println6String>
 80a0c54:	a808      	add	r0, sp, #32
 80a0c56:	f001 fe45 	bl	80a28e4 <_ZN6StringD1Ev>
 80a0c5a:	4668      	mov	r0, sp
 80a0c5c:	f001 fe42 	bl	80a28e4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0c60:	a804      	add	r0, sp, #16
 80a0c62:	f001 fe3f 	bl	80a28e4 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a0c66:	4631      	mov	r1, r6
 80a0c68:	a804      	add	r0, sp, #16
 80a0c6a:	f001 fe85 	bl	80a2978 <_ZN6StringC1EPKc>
  println("received  : " + String(data));
 80a0c6e:	4621      	mov	r1, r4
 80a0c70:	4668      	mov	r0, sp
 80a0c72:	f001 fe81 	bl	80a2978 <_ZN6StringC1EPKc>
 80a0c76:	4669      	mov	r1, sp
 80a0c78:	a804      	add	r0, sp, #16
 80a0c7a:	f001 fee6 	bl	80a2a4a <_ZplRK15StringSumHelperRK6String>
 80a0c7e:	4601      	mov	r1, r0
 80a0c80:	a808      	add	r0, sp, #32
 80a0c82:	f001 feb8 	bl	80a29f6 <_ZN6StringC1ERKS_>
 80a0c86:	a808      	add	r0, sp, #32
 80a0c88:	f7ff ffc0 	bl	80a0c0c <_Z7println6String>
 80a0c8c:	a808      	add	r0, sp, #32
 80a0c8e:	f001 fe29 	bl	80a28e4 <_ZN6StringD1Ev>
 80a0c92:	4668      	mov	r0, sp
 80a0c94:	f001 fe26 	bl	80a28e4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0c98:	a804      	add	r0, sp, #16
 80a0c9a:	f001 fe23 	bl	80a28e4 <_ZN6StringD1Ev>
}
 80a0c9e:	b00c      	add	sp, #48	; 0x30
 80a0ca0:	bd70      	pop	{r4, r5, r6, pc}
 80a0ca2:	bf00      	nop
 80a0ca4:	080a5e74 	.word	0x080a5e74

080a0ca8 <_Z16myWebHookHandlerPKcS0_>:
{
 80a0ca8:	b530      	push	{r4, r5, lr}
 80a0caa:	460c      	mov	r4, r1
 80a0cac:	b08d      	sub	sp, #52	; 0x34
	StringSumHelper(const char *p) : String(p) {}
 80a0cae:	4932      	ldr	r1, [pc, #200]	; (80a0d78 <_Z16myWebHookHandlerPKcS0_+0xd0>)
 80a0cb0:	a804      	add	r0, sp, #16
 80a0cb2:	f001 fe61 	bl	80a2978 <_ZN6StringC1EPKc>
  println("Webhook received <" + String(data) + ">");
 80a0cb6:	4621      	mov	r1, r4
 80a0cb8:	4668      	mov	r0, sp
 80a0cba:	f001 fe5d 	bl	80a2978 <_ZN6StringC1EPKc>
 80a0cbe:	4669      	mov	r1, sp
 80a0cc0:	a804      	add	r0, sp, #16
 80a0cc2:	f001 fec2 	bl	80a2a4a <_ZplRK15StringSumHelperRK6String>
 80a0cc6:	492d      	ldr	r1, [pc, #180]	; (80a0d7c <_Z16myWebHookHandlerPKcS0_+0xd4>)
 80a0cc8:	f001 fecb 	bl	80a2a62 <_ZplRK15StringSumHelperPKc>
 80a0ccc:	4601      	mov	r1, r0
 80a0cce:	a808      	add	r0, sp, #32
 80a0cd0:	f001 fe91 	bl	80a29f6 <_ZN6StringC1ERKS_>
 80a0cd4:	a808      	add	r0, sp, #32
 80a0cd6:	f7ff ff99 	bl	80a0c0c <_Z7println6String>
 80a0cda:	a808      	add	r0, sp, #32
 80a0cdc:	f001 fe02 	bl	80a28e4 <_ZN6StringD1Ev>
 80a0ce0:	4668      	mov	r0, sp
 80a0ce2:	f001 fdff 	bl	80a28e4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0ce6:	a804      	add	r0, sp, #16
 80a0ce8:	f001 fdfc 	bl	80a28e4 <_ZN6StringD1Ev>
  if (String(data).startsWith("off"))
 80a0cec:	4621      	mov	r1, r4
 80a0cee:	a804      	add	r0, sp, #16
 80a0cf0:	f001 fe42 	bl	80a2978 <_ZN6StringC1EPKc>
 80a0cf4:	4922      	ldr	r1, [pc, #136]	; (80a0d80 <_Z16myWebHookHandlerPKcS0_+0xd8>)
 80a0cf6:	a808      	add	r0, sp, #32
 80a0cf8:	f001 fe3e 	bl	80a2978 <_ZN6StringC1EPKc>
 80a0cfc:	a908      	add	r1, sp, #32
 80a0cfe:	a804      	add	r0, sp, #16
 80a0d00:	f001 fed9 	bl	80a2ab6 <_ZNK6String10startsWithERKS_>
 80a0d04:	4605      	mov	r5, r0
 80a0d06:	a808      	add	r0, sp, #32
 80a0d08:	f001 fdec 	bl	80a28e4 <_ZN6StringD1Ev>
 80a0d0c:	a804      	add	r0, sp, #16
 80a0d0e:	f001 fde9 	bl	80a28e4 <_ZN6StringD1Ev>
 80a0d12:	b16d      	cbz	r5, 80a0d30 <_Z16myWebHookHandlerPKcS0_+0x88>
    control.dontGiessen = 1;
 80a0d14:	2301      	movs	r3, #1
 80a0d16:	4d1b      	ldr	r5, [pc, #108]	; (80a0d84 <_Z16myWebHookHandlerPKcS0_+0xdc>)
 80a0d18:	60ab      	str	r3, [r5, #8]
    EEPROM.put(0, control);
 80a0d1a:	f002 ff51 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a0d1e:	4629      	mov	r1, r5
 80a0d20:	2000      	movs	r0, #0
 80a0d22:	2214      	movs	r2, #20
 80a0d24:	f001 fada 	bl	80a22dc <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN DEAKTIVIERT by WebHook");
 80a0d28:	4917      	ldr	r1, [pc, #92]	; (80a0d88 <_Z16myWebHookHandlerPKcS0_+0xe0>)
 80a0d2a:	4818      	ldr	r0, [pc, #96]	; (80a0d8c <_Z16myWebHookHandlerPKcS0_+0xe4>)
 80a0d2c:	f7ff f9e6 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if (String(data).startsWith("on"))
 80a0d30:	4621      	mov	r1, r4
 80a0d32:	a804      	add	r0, sp, #16
 80a0d34:	f001 fe20 	bl	80a2978 <_ZN6StringC1EPKc>
 80a0d38:	4915      	ldr	r1, [pc, #84]	; (80a0d90 <_Z16myWebHookHandlerPKcS0_+0xe8>)
 80a0d3a:	a808      	add	r0, sp, #32
 80a0d3c:	f001 fe1c 	bl	80a2978 <_ZN6StringC1EPKc>
 80a0d40:	a908      	add	r1, sp, #32
 80a0d42:	a804      	add	r0, sp, #16
 80a0d44:	f001 feb7 	bl	80a2ab6 <_ZNK6String10startsWithERKS_>
 80a0d48:	4604      	mov	r4, r0
 80a0d4a:	a808      	add	r0, sp, #32
 80a0d4c:	f001 fdca 	bl	80a28e4 <_ZN6StringD1Ev>
 80a0d50:	a804      	add	r0, sp, #16
 80a0d52:	f001 fdc7 	bl	80a28e4 <_ZN6StringD1Ev>
 80a0d56:	b16c      	cbz	r4, 80a0d74 <_Z16myWebHookHandlerPKcS0_+0xcc>
    control.dontGiessen = 0;
 80a0d58:	2400      	movs	r4, #0
 80a0d5a:	4d0a      	ldr	r5, [pc, #40]	; (80a0d84 <_Z16myWebHookHandlerPKcS0_+0xdc>)
 80a0d5c:	60ac      	str	r4, [r5, #8]
    EEPROM.put(0, control);
 80a0d5e:	f002 ff2f 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
 80a0d62:	4629      	mov	r1, r5
 80a0d64:	4620      	mov	r0, r4
 80a0d66:	2214      	movs	r2, #20
 80a0d68:	f001 fab8 	bl	80a22dc <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN AKTIVIERT by WebHook");
 80a0d6c:	4909      	ldr	r1, [pc, #36]	; (80a0d94 <_Z16myWebHookHandlerPKcS0_+0xec>)
 80a0d6e:	4807      	ldr	r0, [pc, #28]	; (80a0d8c <_Z16myWebHookHandlerPKcS0_+0xe4>)
 80a0d70:	f7ff f9c4 	bl	80a00fc <_Z15WriteToDatabasePcS_>
}
 80a0d74:	b00d      	add	sp, #52	; 0x34
 80a0d76:	bd30      	pop	{r4, r5, pc}
 80a0d78:	080a5e81 	.word	0x080a5e81
 80a0d7c:	080a5e94 	.word	0x080a5e94
 80a0d80:	080a5e96 	.word	0x080a5e96
 80a0d84:	20000290 	.word	0x20000290
 80a0d88:	080a5e9a 	.word	0x080a5e9a
 80a0d8c:	080a5d1d 	.word	0x080a5d1d
 80a0d90:	080a5ec7 	.word	0x080a5ec7
 80a0d94:	080a5eca 	.word	0x080a5eca

080a0d98 <_Z7printlnPci>:

/*---------------------------------------------------------------------
print to serial port and to Blynk terminal
---------------------------------------------------------------------*/
void println(char *text, int data)
{
 80a0d98:	b570      	push	{r4, r5, r6, lr}
 80a0d9a:	4604      	mov	r4, r0
 80a0d9c:	460d      	mov	r5, r1
  timeStamp();
  sprintf(buffer, "%s %d", text, data);
 80a0d9e:	4e08      	ldr	r6, [pc, #32]	; (80a0dc0 <_Z7printlnPci+0x28>)
  timeStamp();
 80a0da0:	f7ff fec2 	bl	80a0b28 <_Z9timeStampv>
  sprintf(buffer, "%s %d", text, data);
 80a0da4:	462b      	mov	r3, r5
 80a0da6:	4622      	mov	r2, r4
 80a0da8:	4906      	ldr	r1, [pc, #24]	; (80a0dc4 <_Z7printlnPci+0x2c>)
 80a0daa:	4630      	mov	r0, r6
 80a0dac:	f001 fcae 	bl	80a270c <sprintf>

  Serial.println(buffer);
 80a0db0:	f002 fc58 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0db4:	4631      	mov	r1, r6

}
 80a0db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Serial.println(buffer);
 80a0dba:	f001 bebe 	b.w	80a2b3a <_ZN5Print7printlnEPKc>
 80a0dbe:	bf00      	nop
 80a0dc0:	20000196 	.word	0x20000196
 80a0dc4:	080a5ef5 	.word	0x080a5ef5

080a0dc8 <_Z11printStatusv>:
{
 80a0dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return network_ready(*this, 0, NULL);
 80a0dca:	2200      	movs	r2, #0
 80a0dcc:	4b3f      	ldr	r3, [pc, #252]	; (80a0ecc <_Z11printStatusv+0x104>)
 80a0dce:	4611      	mov	r1, r2
 80a0dd0:	6858      	ldr	r0, [r3, #4]
 80a0dd2:	f001 fbe3 	bl	80a259c <network_ready>
 80a0dd6:	4605      	mov	r5, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0dd8:	f001 fc50 	bl	80a267c <spark_cloud_flag_connected>
 80a0ddc:	4606      	mov	r6, r0
  timeStamp();
 80a0dde:	f7ff fea3 	bl	80a0b28 <_Z9timeStampv>
  println(" tnow: ", tnow);
 80a0de2:	4b3b      	ldr	r3, [pc, #236]	; (80a0ed0 <_Z11printStatusv+0x108>)
  println("Main    [mV] : ", AiPumpeMain);
 80a0de4:	4f3b      	ldr	r7, [pc, #236]	; (80a0ed4 <_Z11printStatusv+0x10c>)
  println(" tnow: ", tnow);
 80a0de6:	6819      	ldr	r1, [r3, #0]
 80a0de8:	483b      	ldr	r0, [pc, #236]	; (80a0ed8 <_Z11printStatusv+0x110>)
  println("Reserve [mV] : ", AiPumpeReserve);
 80a0dea:	4c3c      	ldr	r4, [pc, #240]	; (80a0edc <_Z11printStatusv+0x114>)
  println(" tnow: ", tnow);
 80a0dec:	f7ff ffd4 	bl	80a0d98 <_Z7printlnPci>
  readAdcChannels();
 80a0df0:	f7ff fdf8 	bl	80a09e4 <_Z15readAdcChannelsv>
  println("Main    [mV] : ", AiPumpeMain);
 80a0df4:	6839      	ldr	r1, [r7, #0]
 80a0df6:	483a      	ldr	r0, [pc, #232]	; (80a0ee0 <_Z11printStatusv+0x118>)
 80a0df8:	f7ff ffce 	bl	80a0d98 <_Z7printlnPci>
  println("Reserve [mV] : ", AiPumpeReserve);
 80a0dfc:	6821      	ldr	r1, [r4, #0]
 80a0dfe:	4839      	ldr	r0, [pc, #228]	; (80a0ee4 <_Z11printStatusv+0x11c>)
 80a0e00:	f7ff ffca 	bl	80a0d98 <_Z7printlnPci>
  println("12V     [mV] : ", Ai12V);
 80a0e04:	4b38      	ldr	r3, [pc, #224]	; (80a0ee8 <_Z11printStatusv+0x120>)
 80a0e06:	4839      	ldr	r0, [pc, #228]	; (80a0eec <_Z11printStatusv+0x124>)
 80a0e08:	6819      	ldr	r1, [r3, #0]
 80a0e0a:	f7ff ffc5 	bl	80a0d98 <_Z7printlnPci>
   if (AiPumpeMain > 1000)
 80a0e0e:	683b      	ldr	r3, [r7, #0]
 80a0e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a0e14:	d90a      	bls.n	80a0e2c <_Z11printStatusv+0x64>
      Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a0e16:	f002 fc25 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0e1a:	683a      	ldr	r2, [r7, #0]
 80a0e1c:	4934      	ldr	r1, [pc, #208]	; (80a0ef0 <_Z11printStatusv+0x128>)
 80a0e1e:	f7ff f948 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      WriteToDatabase("ADC", "AiPumpeMain    [mV] : ", AiPumpeMain);
 80a0e22:	683a      	ldr	r2, [r7, #0]
 80a0e24:	4933      	ldr	r1, [pc, #204]	; (80a0ef4 <_Z11printStatusv+0x12c>)
 80a0e26:	4834      	ldr	r0, [pc, #208]	; (80a0ef8 <_Z11printStatusv+0x130>)
 80a0e28:	f7ff f9b4 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
  if (AiPumpeReserve > 1000)
 80a0e2c:	6823      	ldr	r3, [r4, #0]
 80a0e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a0e32:	d90a      	bls.n	80a0e4a <_Z11printStatusv+0x82>
      Serial.printlnf(" AiPumpeReserve : %d [mV]", AiPumpeReserve);
 80a0e34:	f002 fc16 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0e38:	6822      	ldr	r2, [r4, #0]
 80a0e3a:	4930      	ldr	r1, [pc, #192]	; (80a0efc <_Z11printStatusv+0x134>)
 80a0e3c:	f7ff f939 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      WriteToDatabase("ADC", "AiPumpeReserve [mV] : ", AiPumpeReserve);
 80a0e40:	6822      	ldr	r2, [r4, #0]
 80a0e42:	492f      	ldr	r1, [pc, #188]	; (80a0f00 <_Z11printStatusv+0x138>)
 80a0e44:	482c      	ldr	r0, [pc, #176]	; (80a0ef8 <_Z11printStatusv+0x130>)
 80a0e46:	f7ff f9a5 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
  st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a0e4a:	2001      	movs	r0, #1
 80a0e4c:	f002 fe8c 	bl	80a3b68 <digitalRead>
 80a0e50:	4a2c      	ldr	r2, [pc, #176]	; (80a0f04 <_Z11printStatusv+0x13c>)
  if (st_main_pumpe == HIGH)
 80a0e52:	2801      	cmp	r0, #1
  st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a0e54:	6010      	str	r0, [r2, #0]
  if (st_main_pumpe == HIGH)
 80a0e56:	d106      	bne.n	80a0e66 <_Z11printStatusv+0x9e>
    println("MAIN Pumpe is ON");
 80a0e58:	482b      	ldr	r0, [pc, #172]	; (80a0f08 <_Z11printStatusv+0x140>)
 80a0e5a:	f7ff fe91 	bl	80a0b80 <_Z7printlnPc>
    WriteToDatabase("STATUS", "MAIN Pumpe is ON ");
 80a0e5e:	492b      	ldr	r1, [pc, #172]	; (80a0f0c <_Z11printStatusv+0x144>)
 80a0e60:	482b      	ldr	r0, [pc, #172]	; (80a0f10 <_Z11printStatusv+0x148>)
 80a0e62:	f7ff f94b 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a0e66:	2002      	movs	r0, #2
 80a0e68:	f002 fe7e 	bl	80a3b68 <digitalRead>
 80a0e6c:	4a29      	ldr	r2, [pc, #164]	; (80a0f14 <_Z11printStatusv+0x14c>)
  if (st_reserve_pumpe == HIGH)
 80a0e6e:	2801      	cmp	r0, #1
  st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a0e70:	6010      	str	r0, [r2, #0]
  if (st_reserve_pumpe == HIGH)
 80a0e72:	d106      	bne.n	80a0e82 <_Z11printStatusv+0xba>
    println("RESERVE Pumpe ist ON");
 80a0e74:	4828      	ldr	r0, [pc, #160]	; (80a0f18 <_Z11printStatusv+0x150>)
 80a0e76:	f7ff fe83 	bl	80a0b80 <_Z7printlnPc>
    WriteToDatabase("STATUS", "RESERVE Pumpe is ON ");
 80a0e7a:	4928      	ldr	r1, [pc, #160]	; (80a0f1c <_Z11printStatusv+0x154>)
 80a0e7c:	4824      	ldr	r0, [pc, #144]	; (80a0f10 <_Z11printStatusv+0x148>)
 80a0e7e:	f7ff f93d 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if (st_funk_pumpe == ON)
 80a0e82:	4b27      	ldr	r3, [pc, #156]	; (80a0f20 <_Z11printStatusv+0x158>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	2b01      	cmp	r3, #1
 80a0e88:	d106      	bne.n	80a0e98 <_Z11printStatusv+0xd0>
    println("FUNK Pumpe ist ON");
 80a0e8a:	4826      	ldr	r0, [pc, #152]	; (80a0f24 <_Z11printStatusv+0x15c>)
 80a0e8c:	f7ff fe78 	bl	80a0b80 <_Z7printlnPc>
    WriteToDatabase("STATUS", "FUNK Pumpe is ON ");
 80a0e90:	4925      	ldr	r1, [pc, #148]	; (80a0f28 <_Z11printStatusv+0x160>)
 80a0e92:	481f      	ldr	r0, [pc, #124]	; (80a0f10 <_Z11printStatusv+0x148>)
 80a0e94:	f7ff f932 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  Serial.printlnf(" waterlevel: %d ", waterlevel);
 80a0e98:	f002 fbe4 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0e9c:	4b23      	ldr	r3, [pc, #140]	; (80a0f2c <_Z11printStatusv+0x164>)
 80a0e9e:	4924      	ldr	r1, [pc, #144]	; (80a0f30 <_Z11printStatusv+0x168>)
 80a0ea0:	681a      	ldr	r2, [r3, #0]
 80a0ea2:	f7ff f906 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf(" wifi=%s cloud=%s fast_counter=%d ", (wifiReady ? "on" : "off"), (cloudReady ? "on" : "off"), fast_counter);
 80a0ea6:	f002 fbdd 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0eaa:	4b22      	ldr	r3, [pc, #136]	; (80a0f34 <_Z11printStatusv+0x16c>)
 80a0eac:	4922      	ldr	r1, [pc, #136]	; (80a0f38 <_Z11printStatusv+0x170>)
 80a0eae:	681b      	ldr	r3, [r3, #0]
 80a0eb0:	4a22      	ldr	r2, [pc, #136]	; (80a0f3c <_Z11printStatusv+0x174>)
 80a0eb2:	9300      	str	r3, [sp, #0]
 80a0eb4:	2e00      	cmp	r6, #0
 80a0eb6:	bf14      	ite	ne
 80a0eb8:	460b      	movne	r3, r1
 80a0eba:	4613      	moveq	r3, r2
 80a0ebc:	2d00      	cmp	r5, #0
 80a0ebe:	bf18      	it	ne
 80a0ec0:	460a      	movne	r2, r1
 80a0ec2:	491f      	ldr	r1, [pc, #124]	; (80a0f40 <_Z11printStatusv+0x178>)
 80a0ec4:	f7ff f8f5 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
}
 80a0ec8:	b003      	add	sp, #12
 80a0eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0ecc:	20000400 	.word	0x20000400
 80a0ed0:	20000328 	.word	0x20000328
 80a0ed4:	2000017c 	.word	0x2000017c
 80a0ed8:	080a5efb 	.word	0x080a5efb
 80a0edc:	20000180 	.word	0x20000180
 80a0ee0:	080a5f34 	.word	0x080a5f34
 80a0ee4:	080a5f69 	.word	0x080a5f69
 80a0ee8:	20000178 	.word	0x20000178
 80a0eec:	080a5f03 	.word	0x080a5f03
 80a0ef0:	080a5f13 	.word	0x080a5f13
 80a0ef4:	080a5f2d 	.word	0x080a5f2d
 80a0ef8:	080a5f44 	.word	0x080a5f44
 80a0efc:	080a5f48 	.word	0x080a5f48
 80a0f00:	080a5f62 	.word	0x080a5f62
 80a0f04:	200002d4 	.word	0x200002d4
 80a0f08:	080a5f79 	.word	0x080a5f79
 80a0f0c:	080a5f8a 	.word	0x080a5f8a
 80a0f10:	080a5f9c 	.word	0x080a5f9c
 80a0f14:	200002d8 	.word	0x200002d8
 80a0f18:	080a5fa3 	.word	0x080a5fa3
 80a0f1c:	080a5fb8 	.word	0x080a5fb8
 80a0f20:	200002d0 	.word	0x200002d0
 80a0f24:	080a5fcd 	.word	0x080a5fcd
 80a0f28:	080a5fdf 	.word	0x080a5fdf
 80a0f2c:	20000004 	.word	0x20000004
 80a0f30:	080a5ff1 	.word	0x080a5ff1
 80a0f34:	200002ac 	.word	0x200002ac
 80a0f38:	080a5ec7 	.word	0x080a5ec7
 80a0f3c:	080a5e96 	.word	0x080a5e96
 80a0f40:	080a6002 	.word	0x080a6002

080a0f44 <_Z7printlnPc6String>:

void println(char *text, String data)
{
 80a0f44:	b570      	push	{r4, r5, r6, lr}
 80a0f46:	4604      	mov	r4, r0
 80a0f48:	460d      	mov	r5, r1
  timeStamp();
  sprintf(buffer, "%s %d", text, data.c_str());
 80a0f4a:	4e08      	ldr	r6, [pc, #32]	; (80a0f6c <_Z7printlnPc6String+0x28>)
  timeStamp();
 80a0f4c:	f7ff fdec 	bl	80a0b28 <_Z9timeStampv>
  sprintf(buffer, "%s %d", text, data.c_str());
 80a0f50:	4622      	mov	r2, r4
 80a0f52:	682b      	ldr	r3, [r5, #0]
 80a0f54:	4906      	ldr	r1, [pc, #24]	; (80a0f70 <_Z7printlnPc6String+0x2c>)
 80a0f56:	4630      	mov	r0, r6
 80a0f58:	f001 fbd8 	bl	80a270c <sprintf>

  Serial.println(buffer);
 80a0f5c:	f002 fb82 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a0f60:	4631      	mov	r1, r6

}
 80a0f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Serial.println(buffer);
 80a0f66:	f001 bde8 	b.w	80a2b3a <_ZN5Print7printlnEPKc>
 80a0f6a:	bf00      	nop
 80a0f6c:	20000196 	.word	0x20000196
 80a0f70:	080a5ef5 	.word	0x080a5ef5

080a0f74 <_Z15printSlowStatusv>:
{
 80a0f74:	b530      	push	{r4, r5, lr}
 80a0f76:	b087      	sub	sp, #28
  timeStamp();
 80a0f78:	f7ff fdd6 	bl	80a0b28 <_Z9timeStampv>
  getSleepTime(55); // time to wake up at minute = 55
 80a0f7c:	2037      	movs	r0, #55	; 0x37
 80a0f7e:	f7ff fd1f 	bl	80a09c0 <_Z12getSleepTimei>
  println(" Photon HW ID ", hwID);
 80a0f82:	4949      	ldr	r1, [pc, #292]	; (80a10a8 <_Z15printSlowStatusv+0x134>)
 80a0f84:	a802      	add	r0, sp, #8
 80a0f86:	f001 fd36 	bl	80a29f6 <_ZN6StringC1ERKS_>
 80a0f8a:	a902      	add	r1, sp, #8
 80a0f8c:	4847      	ldr	r0, [pc, #284]	; (80a10ac <_Z15printSlowStatusv+0x138>)
 80a0f8e:	f7ff ffd9 	bl	80a0f44 <_Z7printlnPc6String>
 80a0f92:	a802      	add	r0, sp, #8
 80a0f94:	f001 fca6 	bl	80a28e4 <_ZN6StringD1Ev>
    Particle.subscribe("particle/device/name", deviceNameHandler);
 80a0f98:	f7ff fc7c 	bl	80a0894 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0.constprop.0>
    Particle.publish("particle/device/name");
 80a0f9c:	a802      	add	r0, sp, #8
 80a0f9e:	f7ff fc67 	bl	80a0870 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0>
      ~__shared_ptr() = default;
 80a0fa2:	a803      	add	r0, sp, #12
 80a0fa4:	f7ff f893 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(500);
 80a0fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0fac:	f001 ff26 	bl	80a2dfc <delay>
  checkDontSleepPin();
 80a0fb0:	f7ff fda4 	bl	80a0afc <_Z17checkDontSleepPinv>
  reportDontSleepPin();
 80a0fb4:	f7ff fd7e 	bl	80a0ab4 <_Z18reportDontSleepPinv>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0fb8:	4b3d      	ldr	r3, [pc, #244]	; (80a10b0 <_Z15printSlowStatusv+0x13c>)
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a0fba:	4c3e      	ldr	r4, [pc, #248]	; (80a10b4 <_Z15printSlowStatusv+0x140>)
 80a0fbc:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0fbe:	4a3e      	ldr	r2, [pc, #248]	; (80a10b8 <_Z15printSlowStatusv+0x144>)
 80a0fc0:	493e      	ldr	r1, [pc, #248]	; (80a10bc <_Z15printSlowStatusv+0x148>)
 80a0fc2:	f88d 3000 	strb.w	r3, [sp]
 80a0fc6:	a802      	add	r0, sp, #8
 80a0fc8:	233c      	movs	r3, #60	; 0x3c
 80a0fca:	f002 f915 	bl	80a31f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0fce:	a803      	add	r0, sp, #12
 80a0fd0:	f7ff f87d 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  EEPROM.get(0, control);
 80a0fd4:	f002 fdf4 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
 80a0fd8:	2214      	movs	r2, #20
 80a0fda:	4621      	mov	r1, r4
 80a0fdc:	2000      	movs	r0, #0
 80a0fde:	f001 f975 	bl	80a22cc <HAL_EEPROM_Get>
  println("version            : ", control.version);
 80a0fe2:	6821      	ldr	r1, [r4, #0]
 80a0fe4:	4836      	ldr	r0, [pc, #216]	; (80a10c0 <_Z15printSlowStatusv+0x14c>)
 80a0fe6:	f7ff fed7 	bl	80a0d98 <_Z7printlnPci>
  println("dontSleep          : ", control.dontSleepSW);
 80a0fea:	6861      	ldr	r1, [r4, #4]
 80a0fec:	4835      	ldr	r0, [pc, #212]	; (80a10c4 <_Z15printSlowStatusv+0x150>)
 80a0fee:	f7ff fed3 	bl	80a0d98 <_Z7printlnPci>
  println("dontGiessen        : ", control.dontGiessen);
 80a0ff2:	68a1      	ldr	r1, [r4, #8]
 80a0ff4:	4834      	ldr	r0, [pc, #208]	; (80a10c8 <_Z15printSlowStatusv+0x154>)
 80a0ff6:	f7ff fecf 	bl	80a0d98 <_Z7printlnPci>
  println("pumpe_count_down   : ", control.pumpe_count_down);
 80a0ffa:	68e1      	ldr	r1, [r4, #12]
 80a0ffc:	4833      	ldr	r0, [pc, #204]	; (80a10cc <_Z15printSlowStatusv+0x158>)
 80a0ffe:	f7ff fecb 	bl	80a0d98 <_Z7printlnPci>
  println("reserve_repetitions: ", control.reserve_repetitions);
 80a1002:	6921      	ldr	r1, [r4, #16]
 80a1004:	4832      	ldr	r0, [pc, #200]	; (80a10d0 <_Z15printSlowStatusv+0x15c>)
 80a1006:	f7ff fec7 	bl	80a0d98 <_Z7printlnPci>
  day = Time.weekday(); // North American implementation : Sunday is day number one, Monday is day numer two
 80a100a:	f001 fed1 	bl	80a2db0 <_ZN9TimeClass7weekdayEv>
 80a100e:	4605      	mov	r5, r0
  println("day of week        : ", day);
 80a1010:	4601      	mov	r1, r0
 80a1012:	4830      	ldr	r0, [pc, #192]	; (80a10d4 <_Z15printSlowStatusv+0x160>)
 80a1014:	f7ff fec0 	bl	80a0d98 <_Z7printlnPci>
  WriteToDatabase("WASSER","dontGiessen:", control.dontGiessen);
 80a1018:	68a2      	ldr	r2, [r4, #8]
 80a101a:	492f      	ldr	r1, [pc, #188]	; (80a10d8 <_Z15printSlowStatusv+0x164>)
 80a101c:	482f      	ldr	r0, [pc, #188]	; (80a10dc <_Z15printSlowStatusv+0x168>)
 80a101e:	f7ff f8b9 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
  WriteToDatabase("WASSER","pumpe count down:", control.pumpe_count_down);
 80a1022:	68e2      	ldr	r2, [r4, #12]
 80a1024:	492e      	ldr	r1, [pc, #184]	; (80a10e0 <_Z15printSlowStatusv+0x16c>)
 80a1026:	482d      	ldr	r0, [pc, #180]	; (80a10dc <_Z15printSlowStatusv+0x168>)
 80a1028:	f7ff f8b4 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
  WriteToDatabase("WASSER","reserve_repetitions: ", control.reserve_repetitions);
 80a102c:	6922      	ldr	r2, [r4, #16]
 80a102e:	4928      	ldr	r1, [pc, #160]	; (80a10d0 <_Z15printSlowStatusv+0x15c>)
 80a1030:	482a      	ldr	r0, [pc, #168]	; (80a10dc <_Z15printSlowStatusv+0x168>)
 80a1032:	f7ff f8af 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
  WriteToDatabase("WASSER","day of week: ", day);
 80a1036:	462a      	mov	r2, r5
 80a1038:	492a      	ldr	r1, [pc, #168]	; (80a10e4 <_Z15printSlowStatusv+0x170>)
 80a103a:	4828      	ldr	r0, [pc, #160]	; (80a10dc <_Z15printSlowStatusv+0x168>)
 80a103c:	f7ff f8aa 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
   waterlevel = ultra_sonic_measure();
 80a1040:	f7ff fb16 	bl	80a0670 <_Z19ultra_sonic_measurev>
 80a1044:	4b28      	ldr	r3, [pc, #160]	; (80a10e8 <_Z15printSlowStatusv+0x174>)
 80a1046:	4602      	mov	r2, r0
 80a1048:	6018      	str	r0, [r3, #0]
  WriteToDatabase("WASSER","WASSERSTAND : ",waterlevel);
 80a104a:	4928      	ldr	r1, [pc, #160]	; (80a10ec <_Z15printSlowStatusv+0x178>)
 80a104c:	4823      	ldr	r0, [pc, #140]	; (80a10dc <_Z15printSlowStatusv+0x168>)
 80a104e:	f7ff f8a1 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
   if (control.dontGiessen == 1)
 80a1052:	68a3      	ldr	r3, [r4, #8]
 80a1054:	2b01      	cmp	r3, #1
 80a1056:	d103      	bne.n	80a1060 <_Z15printSlowStatusv+0xec>
    WriteToDatabase("WASSER", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a1058:	4925      	ldr	r1, [pc, #148]	; (80a10f0 <_Z15printSlowStatusv+0x17c>)
 80a105a:	4820      	ldr	r0, [pc, #128]	; (80a10dc <_Z15printSlowStatusv+0x168>)
 80a105c:	f7ff f84e 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if(control.reserve_repetitions > MAX_NACHFUELL_REPETITIONS)
 80a1060:	6922      	ldr	r2, [r4, #16]
 80a1062:	2a05      	cmp	r2, #5
 80a1064:	d905      	bls.n	80a1072 <_Z15printSlowStatusv+0xfe>
        WriteToDatabase("WASSER", "WARNING : Wiederholungen des Tankfuellens ueberschritten = ",control.reserve_repetitions);    
 80a1066:	4923      	ldr	r1, [pc, #140]	; (80a10f4 <_Z15printSlowStatusv+0x180>)
 80a1068:	481c      	ldr	r0, [pc, #112]	; (80a10dc <_Z15printSlowStatusv+0x168>)
 80a106a:	f7ff f893 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
}
 80a106e:	b007      	add	sp, #28
 80a1070:	bd30      	pop	{r4, r5, pc}
  println("temp in  : ", temp_in);
 80a1072:	4c21      	ldr	r4, [pc, #132]	; (80a10f8 <_Z15printSlowStatusv+0x184>)
  println("temp out : ", temp_out);
 80a1074:	4d21      	ldr	r5, [pc, #132]	; (80a10fc <_Z15printSlowStatusv+0x188>)
  get_Temperature(); 
 80a1076:	f7ff fb93 	bl	80a07a0 <_Z15get_Temperaturev>
  println("temp in  : ", temp_in);
 80a107a:	6821      	ldr	r1, [r4, #0]
 80a107c:	4820      	ldr	r0, [pc, #128]	; (80a1100 <_Z15printSlowStatusv+0x18c>)
 80a107e:	f7ff fe8b 	bl	80a0d98 <_Z7printlnPci>
  println("temp out : ", temp_out);
 80a1082:	6829      	ldr	r1, [r5, #0]
 80a1084:	481f      	ldr	r0, [pc, #124]	; (80a1104 <_Z15printSlowStatusv+0x190>)
 80a1086:	f7ff fe87 	bl	80a0d98 <_Z7printlnPci>
  sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a108a:	682b      	ldr	r3, [r5, #0]
 80a108c:	6822      	ldr	r2, [r4, #0]
 80a108e:	491e      	ldr	r1, [pc, #120]	; (80a1108 <_Z15printSlowStatusv+0x194>)
 80a1090:	481e      	ldr	r0, [pc, #120]	; (80a110c <_Z15printSlowStatusv+0x198>)
 80a1092:	f001 fb3b 	bl	80a270c <sprintf>
  WriteToDatabase("CONTROL", timebuffer);
 80a1096:	491d      	ldr	r1, [pc, #116]	; (80a110c <_Z15printSlowStatusv+0x198>)
 80a1098:	481d      	ldr	r0, [pc, #116]	; (80a1110 <_Z15printSlowStatusv+0x19c>)
 80a109a:	f7ff f82f 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  println(" ----------------------- ");
 80a109e:	481d      	ldr	r0, [pc, #116]	; (80a1114 <_Z15printSlowStatusv+0x1a0>)
 80a10a0:	f7ff fd6e 	bl	80a0b80 <_Z7printlnPc>
 80a10a4:	e7e3      	b.n	80a106e <_Z15printSlowStatusv+0xfa>
 80a10a6:	bf00      	nop
 80a10a8:	200002b0 	.word	0x200002b0
 80a10ac:	080a5b72 	.word	0x080a5b72
 80a10b0:	20000195 	.word	0x20000195
 80a10b4:	20000290 	.word	0x20000290
 80a10b8:	20000196 	.word	0x20000196
 80a10bc:	080a61ce 	.word	0x080a61ce
 80a10c0:	080a6025 	.word	0x080a6025
 80a10c4:	080a603b 	.word	0x080a603b
 80a10c8:	080a6051 	.word	0x080a6051
 80a10cc:	080a6067 	.word	0x080a6067
 80a10d0:	080a607d 	.word	0x080a607d
 80a10d4:	080a6093 	.word	0x080a6093
 80a10d8:	080a60a9 	.word	0x080a60a9
 80a10dc:	080a5bef 	.word	0x080a5bef
 80a10e0:	080a60b6 	.word	0x080a60b6
 80a10e4:	080a60c8 	.word	0x080a60c8
 80a10e8:	20000004 	.word	0x20000004
 80a10ec:	080a60d6 	.word	0x080a60d6
 80a10f0:	080a60e5 	.word	0x080a60e5
 80a10f4:	080a6113 	.word	0x080a6113
 80a10f8:	200002dc 	.word	0x200002dc
 80a10fc:	200002e0 	.word	0x200002e0
 80a1100:	080a614f 	.word	0x080a614f
 80a1104:	080a615b 	.word	0x080a615b
 80a1108:	080a5b29 	.word	0x080a5b29
 80a110c:	200002f0 	.word	0x200002f0
 80a1110:	080a5d1d 	.word	0x080a5d1d
 80a1114:	080a6167 	.word	0x080a6167

080a1118 <setup>:
{
 80a1118:	b510      	push	{r4, lr}
 80a111a:	b086      	sub	sp, #24
  Serial.begin(115200);
 80a111c:	f002 faa2 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1120:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a1124:	f002 fa92 	bl	80a364c <_ZN9USBSerial5beginEl>
  delay(2000); // Allow board to settle
 80a1128:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a112c:	f001 fe66 	bl	80a2dfc <delay>
  setupWifi();
 80a1130:	f7ff fbc6 	bl	80a08c0 <_Z9setupWifiv>
  Time.zone(+2); // Sommerzeit
 80a1134:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80a1138:	f001 fdbe 	bl	80a2cb8 <_ZN9TimeClass4zoneEf>
  Serial.printlnf(" ");
 80a113c:	f002 fa92 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1140:	494d      	ldr	r1, [pc, #308]	; (80a1278 <setup+0x160>)
 80a1142:	f7fe ffb6 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf(" ");
 80a1146:	f002 fa8d 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a114a:	494b      	ldr	r1, [pc, #300]	; (80a1278 <setup+0x160>)
 80a114c:	f7fe ffb1 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("----------------------");
 80a1150:	f002 fa88 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1154:	4949      	ldr	r1, [pc, #292]	; (80a127c <setup+0x164>)
 80a1156:	f7fe ffac 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("      Welcome");
 80a115a:	f002 fa83 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a115e:	4948      	ldr	r1, [pc, #288]	; (80a1280 <setup+0x168>)
 80a1160:	f7fe ffa7 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  hwID = System.deviceID();
 80a1164:	4c47      	ldr	r4, [pc, #284]	; (80a1284 <setup+0x16c>)
  Serial.printlnf("----------------------");
 80a1166:	f002 fa7d 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a116a:	4944      	ldr	r1, [pc, #272]	; (80a127c <setup+0x164>)
 80a116c:	f7fe ffa1 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
        return spark_deviceID();
 80a1170:	a802      	add	r0, sp, #8
 80a1172:	f001 fa8b 	bl	80a268c <spark_deviceID>
  hwID = System.deviceID();
 80a1176:	a902      	add	r1, sp, #8
 80a1178:	4620      	mov	r0, r4
 80a117a:	f001 fc47 	bl	80a2a0c <_ZN6StringaSEOS_>
 80a117e:	a802      	add	r0, sp, #8
 80a1180:	f001 fbb0 	bl	80a28e4 <_ZN6StringD1Ev>
  Serial.printlnf(hwID);
 80a1184:	f002 fa6e 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1188:	6821      	ldr	r1, [r4, #0]
 80a118a:	f7fe ff92 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  delay(3000);
 80a118e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a1192:	f001 fe33 	bl	80a2dfc <delay>
  WriteToDatabase("RESET", "#### SETUP/RESET Version ",SW_VERSION);
 80a1196:	2220      	movs	r2, #32
 80a1198:	493b      	ldr	r1, [pc, #236]	; (80a1288 <setup+0x170>)
 80a119a:	483c      	ldr	r0, [pc, #240]	; (80a128c <setup+0x174>)
 80a119c:	f7fe fffa 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
  init_control();
 80a11a0:	f7ff fbc2 	bl	80a0928 <_Z12init_controlv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a11a4:	f001 fa6a 	bl	80a267c <spark_cloud_flag_connected>
  if (Particle.connected() == true)
 80a11a8:	2800      	cmp	r0, #0
 80a11aa:	d05e      	beq.n	80a126a <setup+0x152>
    Serial.printlnf("Connected to Particle Cloud");
 80a11ac:	f002 fa5a 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a11b0:	4937      	ldr	r1, [pc, #220]	; (80a1290 <setup+0x178>)
 80a11b2:	f7fe ff7e 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Particle.subscribe("particle/device/name", deviceNameHandler);
 80a11b6:	f7ff fb6d 	bl	80a0894 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0.constprop.0>
    Particle.publish("particle/device/name");
 80a11ba:	a802      	add	r0, sp, #8
 80a11bc:	f7ff fb58 	bl	80a0870 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0>
 80a11c0:	a803      	add	r0, sp, #12
 80a11c2:	f7fe ff84 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a11c6:	2300      	movs	r3, #0
 80a11c8:	4932      	ldr	r1, [pc, #200]	; (80a1294 <setup+0x17c>)
 80a11ca:	461a      	mov	r2, r3
 80a11cc:	e9cd 3300 	strd	r3, r3, [sp]
 80a11d0:	4831      	ldr	r0, [pc, #196]	; (80a1298 <setup+0x180>)
 80a11d2:	f001 fa6b 	bl	80a26ac <spark_subscribe>
 80a11d6:	4b31      	ldr	r3, [pc, #196]	; (80a129c <setup+0x184>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a11d8:	a802      	add	r0, sp, #8
 80a11da:	781b      	ldrb	r3, [r3, #0]
 80a11dc:	4a30      	ldr	r2, [pc, #192]	; (80a12a0 <setup+0x188>)
 80a11de:	f88d 3000 	strb.w	r3, [sp]
 80a11e2:	4930      	ldr	r1, [pc, #192]	; (80a12a4 <setup+0x18c>)
 80a11e4:	233c      	movs	r3, #60	; 0x3c
 80a11e6:	f002 f807 	bl	80a31f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a11ea:	a803      	add	r0, sp, #12
 80a11ec:	f7fe ff6f 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a11f0:	4c2d      	ldr	r4, [pc, #180]	; (80a12a8 <setup+0x190>)
  hwInit();
 80a11f2:	f7ff fc1d 	bl	80a0a30 <_Z6hwInitv>
  EEPROM.get(0, control);
 80a11f6:	f002 fce3 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
 80a11fa:	2214      	movs	r2, #20
 80a11fc:	4621      	mov	r1, r4
 80a11fe:	2000      	movs	r0, #0
 80a1200:	f001 f864 	bl	80a22cc <HAL_EEPROM_Get>
  if ((control.pumpe_count_down < 30) | (control.pumpe_count_down > 240))
 80a1204:	68e3      	ldr	r3, [r4, #12]
 80a1206:	3b1e      	subs	r3, #30
 80a1208:	2bd2      	cmp	r3, #210	; 0xd2
 80a120a:	d908      	bls.n	80a121e <setup+0x106>
    control.pumpe_count_down = 90;
 80a120c:	235a      	movs	r3, #90	; 0x5a
 80a120e:	60e3      	str	r3, [r4, #12]
    EEPROM.put(0, control);
 80a1210:	f002 fcd6 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a1214:	2214      	movs	r2, #20
 80a1216:	4621      	mov	r1, r4
 80a1218:	2000      	movs	r0, #0
 80a121a:	f001 f85f 	bl	80a22dc <HAL_EEPROM_Put>
  WriteToDatabase("RESET", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a121e:	68e2      	ldr	r2, [r4, #12]
 80a1220:	4922      	ldr	r1, [pc, #136]	; (80a12ac <setup+0x194>)
 80a1222:	481a      	ldr	r0, [pc, #104]	; (80a128c <setup+0x174>)
 80a1224:	f7fe ffb6 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
  if (control.dontGiessen == 1)
 80a1228:	68a3      	ldr	r3, [r4, #8]
 80a122a:	2b01      	cmp	r3, #1
 80a122c:	d103      	bne.n	80a1236 <setup+0x11e>
    WriteToDatabase("RESET", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a122e:	4920      	ldr	r1, [pc, #128]	; (80a12b0 <setup+0x198>)
 80a1230:	4816      	ldr	r0, [pc, #88]	; (80a128c <setup+0x174>)
 80a1232:	f7fe ff63 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  day = Time.weekday(); // North American implementation : Sunday is day number one, Monday is day numer two
 80a1236:	f001 fdbb 	bl	80a2db0 <_ZN9TimeClass7weekdayEv>
 80a123a:	4604      	mov	r4, r0
  Serial.printlnf("Day of week : %d",day);
 80a123c:	f002 fa12 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1240:	4622      	mov	r2, r4
 80a1242:	491c      	ldr	r1, [pc, #112]	; (80a12b4 <setup+0x19c>)
 80a1244:	f7fe ff35 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  printSlowStatus();
 80a1248:	f7ff fe94 	bl	80a0f74 <_Z15printSlowStatusv>
  help();
 80a124c:	f7ff fca4 	bl	80a0b98 <_Z4helpv>
  tnow = getTime();
 80a1250:	f7ff fba0 	bl	80a0994 <_Z7getTimev>
  fast_counter = 60000;
 80a1254:	f64e 2260 	movw	r2, #60000	; 0xea60
  tnow = getTime();
 80a1258:	4b17      	ldr	r3, [pc, #92]	; (80a12b8 <setup+0x1a0>)
 80a125a:	6018      	str	r0, [r3, #0]
  fast_counter = 60000;
 80a125c:	4b17      	ldr	r3, [pc, #92]	; (80a12bc <setup+0x1a4>)
 80a125e:	601a      	str	r2, [r3, #0]
  termEnabled = 0;
 80a1260:	2200      	movs	r2, #0
 80a1262:	4b17      	ldr	r3, [pc, #92]	; (80a12c0 <setup+0x1a8>)
 80a1264:	601a      	str	r2, [r3, #0]
}
 80a1266:	b006      	add	sp, #24
 80a1268:	bd10      	pop	{r4, pc}
     Serial.printlnf("WARNING : NOT Connected to Particle Cloud");     
 80a126a:	f002 f9fb 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a126e:	4915      	ldr	r1, [pc, #84]	; (80a12c4 <setup+0x1ac>)
 80a1270:	f7fe ff1f 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a1274:	e7bc      	b.n	80a11f0 <setup+0xd8>
 80a1276:	bf00      	nop
 80a1278:	080a63e0 	.word	0x080a63e0
 80a127c:	080a6181 	.word	0x080a6181
 80a1280:	080a6198 	.word	0x080a6198
 80a1284:	200002b0 	.word	0x200002b0
 80a1288:	080a61a6 	.word	0x080a61a6
 80a128c:	080a5cd8 	.word	0x080a5cd8
 80a1290:	080a61e9 	.word	0x080a61e9
 80a1294:	080a0ca9 	.word	0x080a0ca9
 80a1298:	080a61c0 	.word	0x080a61c0
 80a129c:	20000195 	.word	0x20000195
 80a12a0:	20000196 	.word	0x20000196
 80a12a4:	080a61ce 	.word	0x080a61ce
 80a12a8:	20000290 	.word	0x20000290
 80a12ac:	080a5cbf 	.word	0x080a5cbf
 80a12b0:	080a60e5 	.word	0x080a60e5
 80a12b4:	080a6205 	.word	0x080a6205
 80a12b8:	20000328 	.word	0x20000328
 80a12bc:	200002ac 	.word	0x200002ac
 80a12c0:	200002e8 	.word	0x200002e8
 80a12c4:	080a61db 	.word	0x080a61db

080a12c8 <_Z5sleepi>:
{
 80a12c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (minutes < 1)
 80a12ca:	1e05      	subs	r5, r0, #0
{
 80a12cc:	b089      	sub	sp, #36	; 0x24
  if (minutes < 1)
 80a12ce:	f340 80d3 	ble.w	80a1478 <_Z5sleepi+0x1b0>
  if (minutes > 120)
 80a12d2:	2d78      	cmp	r5, #120	; 0x78
 80a12d4:	bfa8      	it	ge
 80a12d6:	2578      	movge	r5, #120	; 0x78
  if ((dontSleepHW == 0) & (control.dontSleepSW == 0) & (st_funk_pumpe == 0))
 80a12d8:	4e68      	ldr	r6, [pc, #416]	; (80a147c <_Z5sleepi+0x1b4>)
 80a12da:	4b69      	ldr	r3, [pc, #420]	; (80a1480 <_Z5sleepi+0x1b8>)
 80a12dc:	6874      	ldr	r4, [r6, #4]
 80a12de:	681b      	ldr	r3, [r3, #0]
 80a12e0:	4f68      	ldr	r7, [pc, #416]	; (80a1484 <_Z5sleepi+0x1bc>)
 80a12e2:	431c      	orrs	r4, r3
 80a12e4:	683b      	ldr	r3, [r7, #0]
 80a12e6:	431c      	orrs	r4, r3
 80a12e8:	f040 80c4 	bne.w	80a1474 <_Z5sleepi+0x1ac>
    println(" *** PREPARE SLEEP *** ");
 80a12ec:	4866      	ldr	r0, [pc, #408]	; (80a1488 <_Z5sleepi+0x1c0>)
 80a12ee:	f7ff fc47 	bl	80a0b80 <_Z7printlnPc>
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a12f2:	4621      	mov	r1, r4
 80a12f4:	4620      	mov	r0, r4
 80a12f6:	f000 fcfb 	bl	80a1cf0 <_Z17switch_pumpe_mainii>
 80a12fa:	4b64      	ldr	r3, [pc, #400]	; (80a148c <_Z5sleepi+0x1c4>)
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a12fc:	4621      	mov	r1, r4
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a12fe:	6018      	str	r0, [r3, #0]
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1300:	4620      	mov	r0, r4
 80a1302:	f000 fdb5 	bl	80a1e70 <_Z20switch_pumpe_reserveii>
 80a1306:	4b62      	ldr	r3, [pc, #392]	; (80a1490 <_Z5sleepi+0x1c8>)
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a1308:	4621      	mov	r1, r4
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a130a:	6018      	str	r0, [r3, #0]
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a130c:	4620      	mov	r0, r4
 80a130e:	f000 fe55 	bl	80a1fbc <_Z17switch_pumpe_funkii>
    digitalWrite(DO_PUMPE_MAIN, 0);
 80a1312:	4621      	mov	r1, r4
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a1314:	6038      	str	r0, [r7, #0]
    digitalWrite(DO_PUMPE_MAIN, 0);
 80a1316:	2001      	movs	r0, #1
    System.sleep(D1, RISING, 60 * minutes); // no reset of device after wakeup
 80a1318:	273c      	movs	r7, #60	; 0x3c
    digitalWrite(DO_PUMPE_MAIN, 0);
 80a131a:	f002 fc0c 	bl	80a3b36 <digitalWrite>
    digitalWrite(DO_PUMPE_RESERVE, 0);
 80a131e:	4621      	mov	r1, r4
 80a1320:	2002      	movs	r0, #2
 80a1322:	f002 fc08 	bl	80a3b36 <digitalWrite>
    WriteToDatabase("WASSER", "#### SLEEP Minutes #### : ", minutes);
 80a1326:	462a      	mov	r2, r5
 80a1328:	495a      	ldr	r1, [pc, #360]	; (80a1494 <_Z5sleepi+0x1cc>)
 80a132a:	485b      	ldr	r0, [pc, #364]	; (80a1498 <_Z5sleepi+0x1d0>)
 80a132c:	f7fe ff32 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
    delay(1000);
 80a1330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1334:	f001 fd62 	bl	80a2dfc <delay>
    System.sleep(D1, RISING, 60 * minutes); // no reset of device after wakeup
 80a1338:	2201      	movs	r2, #1
 80a133a:	437d      	muls	r5, r7
 80a133c:	4b57      	ldr	r3, [pc, #348]	; (80a149c <_Z5sleepi+0x1d4>)
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 80a133e:	f10d 0116 	add.w	r1, sp, #22
 80a1342:	681b      	ldr	r3, [r3, #0]
 80a1344:	a806      	add	r0, sp, #24
 80a1346:	e9cd 2500 	strd	r2, r5, [sp]
 80a134a:	9302      	str	r3, [sp, #8]
 80a134c:	f10d 0315 	add.w	r3, sp, #21
 80a1350:	f8ad 2016 	strh.w	r2, [sp, #22]
 80a1354:	f88d 2015 	strb.w	r2, [sp, #21]
 80a1358:	f001 fa6e 	bl	80a2838 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    println(" *** WAKE UP *** ");
 80a135c:	4850      	ldr	r0, [pc, #320]	; (80a14a0 <_Z5sleepi+0x1d8>)
 80a135e:	f7ff fc0f 	bl	80a0b80 <_Z7printlnPc>
    WiFi.on();
 80a1362:	4850      	ldr	r0, [pc, #320]	; (80a14a4 <_Z5sleepi+0x1dc>)
 80a1364:	f7ff faa6 	bl	80a08b4 <_ZN5spark9WiFiClass2onEv>
    delay(5000);
 80a1368:	f241 3088 	movw	r0, #5000	; 0x1388
 80a136c:	f001 fd46 	bl	80a2dfc <delay>
        spark_cloud_flag_connect();
 80a1370:	f001 f97c 	bl	80a266c <spark_cloud_flag_connect>
    delay(5000);
 80a1374:	f241 3088 	movw	r0, #5000	; 0x1388
 80a1378:	f001 fd40 	bl	80a2dfc <delay>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a137c:	f001 f97e 	bl	80a267c <spark_cloud_flag_connected>
    if (Particle.connected() == true)
 80a1380:	b368      	cbz	r0, 80a13de <_Z5sleepi+0x116>
    WriteToDatabase("WAKE UP", "#### WAKE UP ####");
 80a1382:	4949      	ldr	r1, [pc, #292]	; (80a14a8 <_Z5sleepi+0x1e0>)
 80a1384:	4849      	ldr	r0, [pc, #292]	; (80a14ac <_Z5sleepi+0x1e4>)
 80a1386:	f7fe feb9 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    WriteToDatabase("WAKE UP", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a138a:	68f2      	ldr	r2, [r6, #12]
 80a138c:	4948      	ldr	r1, [pc, #288]	; (80a14b0 <_Z5sleepi+0x1e8>)
 80a138e:	4847      	ldr	r0, [pc, #284]	; (80a14ac <_Z5sleepi+0x1e4>)
 80a1390:	f7fe ff00 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
    Particle.subscribe("particle/device/name", deviceNameHandler);
 80a1394:	f7ff fa7e 	bl	80a0894 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0.constprop.0>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a1398:	4623      	mov	r3, r4
 80a139a:	4622      	mov	r2, r4
 80a139c:	4945      	ldr	r1, [pc, #276]	; (80a14b4 <_Z5sleepi+0x1ec>)
 80a139e:	e9cd 4400 	strd	r4, r4, [sp]
 80a13a2:	4845      	ldr	r0, [pc, #276]	; (80a14b8 <_Z5sleepi+0x1f0>)
 80a13a4:	f001 f982 	bl	80a26ac <spark_subscribe>
    delay(500);
 80a13a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a13ac:	f001 fd26 	bl	80a2dfc <delay>
    Particle.publish("particle/device/name");
 80a13b0:	a806      	add	r0, sp, #24
 80a13b2:	f7ff fa5d 	bl	80a0870 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0>
 80a13b6:	a807      	add	r0, sp, #28
 80a13b8:	f7fe fe89 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(500);
 80a13bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a13c0:	f001 fd1c 	bl	80a2dfc <delay>
 80a13c4:	4b3d      	ldr	r3, [pc, #244]	; (80a14bc <_Z5sleepi+0x1f4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a13c6:	a806      	add	r0, sp, #24
 80a13c8:	781b      	ldrb	r3, [r3, #0]
 80a13ca:	4a3d      	ldr	r2, [pc, #244]	; (80a14c0 <_Z5sleepi+0x1f8>)
 80a13cc:	f88d 3000 	strb.w	r3, [sp]
 80a13d0:	493c      	ldr	r1, [pc, #240]	; (80a14c4 <_Z5sleepi+0x1fc>)
 80a13d2:	463b      	mov	r3, r7
 80a13d4:	f001 ff10 	bl	80a31f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a13d8:	a807      	add	r0, sp, #28
 80a13da:	f7fe fe78 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    tnow = getTime();
 80a13de:	f7ff fad9 	bl	80a0994 <_Z7getTimev>
 80a13e2:	4b39      	ldr	r3, [pc, #228]	; (80a14c8 <_Z5sleepi+0x200>)
 80a13e4:	6018      	str	r0, [r3, #0]
    hwInit();
 80a13e6:	f7ff fb23 	bl	80a0a30 <_Z6hwInitv>
    EEPROM.get(0, control);
 80a13ea:	f002 fbe9 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a13ee:	2214      	movs	r2, #20
 80a13f0:	2000      	movs	r0, #0
 80a13f2:	4922      	ldr	r1, [pc, #136]	; (80a147c <_Z5sleepi+0x1b4>)
 80a13f4:	f000 ff6a 	bl	80a22cc <HAL_EEPROM_Get>
    if ((control.pumpe_count_down < 30) | (control.pumpe_count_down > 240))
 80a13f8:	68f3      	ldr	r3, [r6, #12]
 80a13fa:	3b1e      	subs	r3, #30
 80a13fc:	2bd2      	cmp	r3, #210	; 0xd2
 80a13fe:	d908      	bls.n	80a1412 <_Z5sleepi+0x14a>
      control.pumpe_count_down = 90;
 80a1400:	235a      	movs	r3, #90	; 0x5a
 80a1402:	60f3      	str	r3, [r6, #12]
      EEPROM.put(0, control);
 80a1404:	f002 fbdc 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a1408:	2214      	movs	r2, #20
 80a140a:	2000      	movs	r0, #0
 80a140c:	491b      	ldr	r1, [pc, #108]	; (80a147c <_Z5sleepi+0x1b4>)
 80a140e:	f000 ff65 	bl	80a22dc <HAL_EEPROM_Put>
    if (control.dontGiessen == 1)
 80a1412:	68b3      	ldr	r3, [r6, #8]
 80a1414:	2b01      	cmp	r3, #1
 80a1416:	d103      	bne.n	80a1420 <_Z5sleepi+0x158>
      WriteToDatabase("WAKE UP", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a1418:	492c      	ldr	r1, [pc, #176]	; (80a14cc <_Z5sleepi+0x204>)
 80a141a:	4824      	ldr	r0, [pc, #144]	; (80a14ac <_Z5sleepi+0x1e4>)
 80a141c:	f7fe fe6e 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    Serial.printlnf("temp in : %d  temp out : %d ", temp_in, temp_out);
 80a1420:	4c2b      	ldr	r4, [pc, #172]	; (80a14d0 <_Z5sleepi+0x208>)
 80a1422:	4d2c      	ldr	r5, [pc, #176]	; (80a14d4 <_Z5sleepi+0x20c>)
    get_Temperature(); 
 80a1424:	f7ff f9bc 	bl	80a07a0 <_Z15get_Temperaturev>
    Serial.printlnf("temp in : %d  temp out : %d ", temp_in, temp_out);
 80a1428:	f002 f91c 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a142c:	6822      	ldr	r2, [r4, #0]
 80a142e:	682b      	ldr	r3, [r5, #0]
 80a1430:	4929      	ldr	r1, [pc, #164]	; (80a14d8 <_Z5sleepi+0x210>)
 80a1432:	f7fe fe3e 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a1436:	6822      	ldr	r2, [r4, #0]
 80a1438:	682b      	ldr	r3, [r5, #0]
 80a143a:	4928      	ldr	r1, [pc, #160]	; (80a14dc <_Z5sleepi+0x214>)
 80a143c:	4828      	ldr	r0, [pc, #160]	; (80a14e0 <_Z5sleepi+0x218>)
 80a143e:	f001 f965 	bl	80a270c <sprintf>
    WriteToDatabase("WAKE UP", timebuffer);
 80a1442:	4927      	ldr	r1, [pc, #156]	; (80a14e0 <_Z5sleepi+0x218>)
 80a1444:	4819      	ldr	r0, [pc, #100]	; (80a14ac <_Z5sleepi+0x1e4>)
 80a1446:	f7fe fe59 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    printSlowStatus();
 80a144a:	f7ff fd93 	bl	80a0f74 <_Z15printSlowStatusv>
    if ((Time.hour()>8) & (Time.hour()<11))
 80a144e:	f001 fc7f 	bl	80a2d50 <_ZN9TimeClass4hourEv>
 80a1452:	4604      	mov	r4, r0
 80a1454:	f001 fc7c 	bl	80a2d50 <_ZN9TimeClass4hourEv>
 80a1458:	2c08      	cmp	r4, #8
 80a145a:	dd04      	ble.n	80a1466 <_Z5sleepi+0x19e>
 80a145c:	280a      	cmp	r0, #10
 80a145e:	dc02      	bgt.n	80a1466 <_Z5sleepi+0x19e>
      TankFuellen(LOW_LEVEL_TANKFUELLEN);
 80a1460:	205f      	movs	r0, #95	; 0x5f
 80a1462:	f000 fe0d 	bl	80a2080 <_Z11TankFuelleni>
    slow_counter = 0;
 80a1466:	2300      	movs	r3, #0
 80a1468:	4a1e      	ldr	r2, [pc, #120]	; (80a14e4 <_Z5sleepi+0x21c>)
 80a146a:	6013      	str	r3, [r2, #0]
    fast_counter = 0;
 80a146c:	4a1e      	ldr	r2, [pc, #120]	; (80a14e8 <_Z5sleepi+0x220>)
 80a146e:	6013      	str	r3, [r2, #0]
    termEnabled = 0;
 80a1470:	4a1e      	ldr	r2, [pc, #120]	; (80a14ec <_Z5sleepi+0x224>)
 80a1472:	6013      	str	r3, [r2, #0]
}
 80a1474:	b009      	add	sp, #36	; 0x24
 80a1476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    minutes = 5;
 80a1478:	2505      	movs	r5, #5
 80a147a:	e72d      	b.n	80a12d8 <_Z5sleepi+0x10>
 80a147c:	20000290 	.word	0x20000290
 80a1480:	200002a8 	.word	0x200002a8
 80a1484:	200002d0 	.word	0x200002d0
 80a1488:	080a6216 	.word	0x080a6216
 80a148c:	200002d4 	.word	0x200002d4
 80a1490:	200002d8 	.word	0x200002d8
 80a1494:	080a622e 	.word	0x080a622e
 80a1498:	080a5bef 	.word	0x080a5bef
 80a149c:	20000190 	.word	0x20000190
 80a14a0:	080a6249 	.word	0x080a6249
 80a14a4:	20000400 	.word	0x20000400
 80a14a8:	080a625b 	.word	0x080a625b
 80a14ac:	080a626d 	.word	0x080a626d
 80a14b0:	080a5cbf 	.word	0x080a5cbf
 80a14b4:	080a0ca9 	.word	0x080a0ca9
 80a14b8:	080a61c0 	.word	0x080a61c0
 80a14bc:	20000195 	.word	0x20000195
 80a14c0:	20000196 	.word	0x20000196
 80a14c4:	080a61ce 	.word	0x080a61ce
 80a14c8:	20000328 	.word	0x20000328
 80a14cc:	080a60e5 	.word	0x080a60e5
 80a14d0:	200002dc 	.word	0x200002dc
 80a14d4:	200002e0 	.word	0x200002e0
 80a14d8:	080a6275 	.word	0x080a6275
 80a14dc:	080a5b29 	.word	0x080a5b29
 80a14e0:	200002f0 	.word	0x200002f0
 80a14e4:	200002cc 	.word	0x200002cc
 80a14e8:	200002ac 	.word	0x200002ac
 80a14ec:	200002e8 	.word	0x200002e8

080a14f0 <loop>:
{
 80a14f0:	b570      	push	{r4, r5, r6, lr}
  fast_counter++;
 80a14f2:	4a3f      	ldr	r2, [pc, #252]	; (80a15f0 <loop+0x100>)
  delay(10);
 80a14f4:	200a      	movs	r0, #10
  fast_counter++;
 80a14f6:	6813      	ldr	r3, [r2, #0]
  tnow = getTime();
 80a14f8:	4d3e      	ldr	r5, [pc, #248]	; (80a15f4 <loop+0x104>)
  fast_counter++;
 80a14fa:	3301      	adds	r3, #1
 80a14fc:	6013      	str	r3, [r2, #0]
  delay(10);
 80a14fe:	f001 fc7d 	bl	80a2dfc <delay>
  tnow = getTime();
 80a1502:	f7ff fa47 	bl	80a0994 <_Z7getTimev>
 80a1506:	6028      	str	r0, [r5, #0]
  utime = Time.now();
 80a1508:	f001 fc11 	bl	80a2d2e <_ZN9TimeClass3nowEv>
  if ((utime % 2) == 0) // every 2 seconds
 80a150c:	f010 0001 	ands.w	r0, r0, #1
 80a1510:	4c39      	ldr	r4, [pc, #228]	; (80a15f8 <loop+0x108>)
 80a1512:	d11e      	bne.n	80a1552 <loop+0x62>
    slow_counter++; 
 80a1514:	6823      	ldr	r3, [r4, #0]
 80a1516:	3301      	adds	r3, #1
 80a1518:	6023      	str	r3, [r4, #0]
    BlumenGiessen(0, ts_giessen);    
 80a151a:	4b38      	ldr	r3, [pc, #224]	; (80a15fc <loop+0x10c>)
 80a151c:	6819      	ldr	r1, [r3, #0]
 80a151e:	f000 fd6f 	bl	80a2000 <_Z13BlumenGiessenii>
    CountDown();
 80a1522:	f000 fdf5 	bl	80a2110 <_Z9CountDownv>
    if (Time.minute() == 10)     // wir schlafen bis zur nächsten Stunde
 80a1526:	f001 fc1f 	bl	80a2d68 <_ZN9TimeClass6minuteEv>
 80a152a:	280a      	cmp	r0, #10
 80a152c:	d10e      	bne.n	80a154c <loop+0x5c>
      if ((Time.hour() > 9) | (Time.hour() < 5))
 80a152e:	f001 fc0f 	bl	80a2d50 <_ZN9TimeClass4hourEv>
 80a1532:	4606      	mov	r6, r0
 80a1534:	f001 fc0c 	bl	80a2d50 <_ZN9TimeClass4hourEv>
 80a1538:	2e09      	cmp	r6, #9
 80a153a:	dc01      	bgt.n	80a1540 <loop+0x50>
 80a153c:	2804      	cmp	r0, #4
 80a153e:	dc51      	bgt.n	80a15e4 <loop+0xf4>
        sleep(60+getSleepTime(55));
 80a1540:	2037      	movs	r0, #55	; 0x37
 80a1542:	f7ff fa3d 	bl	80a09c0 <_Z12getSleepTimei>
 80a1546:	303c      	adds	r0, #60	; 0x3c
        sleep(getSleepTime(55));
 80a1548:	f7ff febe 	bl	80a12c8 <_Z5sleepi>
    myDelay(1);
 80a154c:	2001      	movs	r0, #1
 80a154e:	f7ff fa14 	bl	80a097a <_Z7myDelayi>
  if ((slow_counter % 10) == 0) // every 20 seconds
 80a1552:	210a      	movs	r1, #10
 80a1554:	6823      	ldr	r3, [r4, #0]
 80a1556:	fb93 f6f1 	sdiv	r6, r3, r1
 80a155a:	fb01 3616 	mls	r6, r1, r6, r3
 80a155e:	bb0e      	cbnz	r6, 80a15a4 <loop+0xb4>
    printStatus();
 80a1560:	f7ff fc32 	bl	80a0dc8 <_Z11printStatusv>
    dontSleepHW = checkDontSleepPin();
 80a1564:	f7ff faca 	bl	80a0afc <_Z17checkDontSleepPinv>
 80a1568:	4b25      	ldr	r3, [pc, #148]	; (80a1600 <loop+0x110>)
    if (tnow == (5*60 + 1))
 80a156a:	682a      	ldr	r2, [r5, #0]
    dontSleepHW = checkDontSleepPin();
 80a156c:	6018      	str	r0, [r3, #0]
    if (tnow == (5*60 + 1))
 80a156e:	f240 132d 	movw	r3, #301	; 0x12d
 80a1572:	429a      	cmp	r2, r3
 80a1574:	d107      	bne.n	80a1586 <loop+0x96>
      conrad_rsl_switch_code(RSL4,0);
 80a1576:	4631      	mov	r1, r6
 80a1578:	2004      	movs	r0, #4
 80a157a:	f000 fb53 	bl	80a1c24 <_Z22conrad_rsl_switch_codeii>
      WriteToDatabase ( "CONTROL", "RSL4 abgeschaltet");      
 80a157e:	4921      	ldr	r1, [pc, #132]	; (80a1604 <loop+0x114>)
 80a1580:	4821      	ldr	r0, [pc, #132]	; (80a1608 <loop+0x118>)
 80a1582:	f7fe fdbb 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    if (tnow == (5*60 + 2))
 80a1586:	682b      	ldr	r3, [r5, #0]
 80a1588:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 80a158c:	d107      	bne.n	80a159e <loop+0xae>
      conrad_rsl_switch_code(RSL4,1);
 80a158e:	2101      	movs	r1, #1
 80a1590:	2004      	movs	r0, #4
 80a1592:	f000 fb47 	bl	80a1c24 <_Z22conrad_rsl_switch_codeii>
      WriteToDatabase ( "CONTROL", "RSL4 eingeschaltet");     
 80a1596:	491d      	ldr	r1, [pc, #116]	; (80a160c <loop+0x11c>)
 80a1598:	481b      	ldr	r0, [pc, #108]	; (80a1608 <loop+0x118>)
 80a159a:	f7fe fdaf 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    slow_counter++;
 80a159e:	6823      	ldr	r3, [r4, #0]
 80a15a0:	3301      	adds	r3, #1
 80a15a2:	6023      	str	r3, [r4, #0]
  if (slow_counter > 300) // once per 10 minutes
 80a15a4:	6823      	ldr	r3, [r4, #0]
 80a15a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80a15aa:	dd1f      	ble.n	80a15ec <loop+0xfc>
    slow_counter = 0;
 80a15ac:	2600      	movs	r6, #0
 80a15ae:	6026      	str	r6, [r4, #0]
    printSlowStatus();
 80a15b0:	f7ff fce0 	bl	80a0f74 <_Z15printSlowStatusv>
    if (tnow > (22*60) + 30)
 80a15b4:	f240 5346 	movw	r3, #1350	; 0x546
 80a15b8:	682a      	ldr	r2, [r5, #0]
 80a15ba:	429a      	cmp	r2, r3
      done_giessen = 0; // armed for the next day
 80a15bc:	bfc8      	it	gt
 80a15be:	4b14      	ldrgt	r3, [pc, #80]	; (80a1610 <loop+0x120>)
    if (termCounter > 0)
 80a15c0:	4a14      	ldr	r2, [pc, #80]	; (80a1614 <loop+0x124>)
      done_giessen = 0; // armed for the next day
 80a15c2:	bfc8      	it	gt
 80a15c4:	601e      	strgt	r6, [r3, #0]
    if (termCounter > 0)
 80a15c6:	6813      	ldr	r3, [r2, #0]
 80a15c8:	2b00      	cmp	r3, #0
 80a15ca:	dd0f      	ble.n	80a15ec <loop+0xfc>
      termCounter--;
 80a15cc:	3b01      	subs	r3, #1
 80a15ce:	6013      	str	r3, [r2, #0]
      if (termCounter == 0)
 80a15d0:	b963      	cbnz	r3, 80a15ec <loop+0xfc>
        println("Terminal disabled");      
 80a15d2:	4811      	ldr	r0, [pc, #68]	; (80a1618 <loop+0x128>)
 80a15d4:	f7ff fad4 	bl	80a0b80 <_Z7printlnPc>
} // loop
 80a15d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        WriteToDatabase("CONTROL","TERMINAL disabled by timeout");
 80a15dc:	490f      	ldr	r1, [pc, #60]	; (80a161c <loop+0x12c>)
 80a15de:	480a      	ldr	r0, [pc, #40]	; (80a1608 <loop+0x118>)
 80a15e0:	f7fe bd8c 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
        sleep(getSleepTime(55));
 80a15e4:	2037      	movs	r0, #55	; 0x37
 80a15e6:	f7ff f9eb 	bl	80a09c0 <_Z12getSleepTimei>
 80a15ea:	e7ad      	b.n	80a1548 <loop+0x58>
} // loop
 80a15ec:	bd70      	pop	{r4, r5, r6, pc}
 80a15ee:	bf00      	nop
 80a15f0:	200002ac 	.word	0x200002ac
 80a15f4:	20000328 	.word	0x20000328
 80a15f8:	200002cc 	.word	0x200002cc
 80a15fc:	20000000 	.word	0x20000000
 80a1600:	200002a8 	.word	0x200002a8
 80a1604:	080a6292 	.word	0x080a6292
 80a1608:	080a5d1d 	.word	0x080a5d1d
 80a160c:	080a62a4 	.word	0x080a62a4
 80a1610:	200002a4 	.word	0x200002a4
 80a1614:	200002e4 	.word	0x200002e4
 80a1618:	080a62b7 	.word	0x080a62b7
 80a161c:	080a62c9 	.word	0x080a62c9

080a1620 <_GLOBAL__sub_I_SystemMode>:
}
 80a1620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 80a1622:	2400      	movs	r4, #0
 80a1624:	2701      	movs	r7, #1
 80a1626:	4b12      	ldr	r3, [pc, #72]	; (80a1670 <_GLOBAL__sub_I_SystemMode+0x50>)
              error_(SYSTEM_ERROR_NONE) {
 80a1628:	4d12      	ldr	r5, [pc, #72]	; (80a1674 <_GLOBAL__sub_I_SystemMode+0x54>)
 80a162a:	601c      	str	r4, [r3, #0]
 80a162c:	4b12      	ldr	r3, [pc, #72]	; (80a1678 <_GLOBAL__sub_I_SystemMode+0x58>)
SYSTEM_MODE(MANUAL);
 80a162e:	4e13      	ldr	r6, [pc, #76]	; (80a167c <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a1630:	701c      	strb	r4, [r3, #0]
 80a1632:	4b13      	ldr	r3, [pc, #76]	; (80a1680 <_GLOBAL__sub_I_SystemMode+0x60>)
        set_system_mode(mode);
 80a1634:	2003      	movs	r0, #3
 80a1636:	701f      	strb	r7, [r3, #0]
    SleepResult() {}
 80a1638:	4b12      	ldr	r3, [pc, #72]	; (80a1684 <_GLOBAL__sub_I_SystemMode+0x64>)
              error_(SYSTEM_ERROR_NONE) {
 80a163a:	602c      	str	r4, [r5, #0]
    SleepResult() {}
 80a163c:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 80a163e:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
 80a1640:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
 80a1642:	f000 ff45 	bl	80a24d0 <set_system_mode>
 80a1646:	4632      	mov	r2, r6
 80a1648:	4628      	mov	r0, r5
 80a164a:	490f      	ldr	r1, [pc, #60]	; (80a1688 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a164c:	f002 fb26 	bl	80a3c9c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 80a1650:	4621      	mov	r1, r4
String hwID;
 80a1652:	4c0e      	ldr	r4, [pc, #56]	; (80a168c <_GLOBAL__sub_I_SystemMode+0x6c>)
SYSTEM_THREAD(ENABLED);
 80a1654:	4638      	mov	r0, r7
 80a1656:	f000 ff4b 	bl	80a24f0 <system_thread_set_state>
String hwID;
 80a165a:	4620      	mov	r0, r4
 80a165c:	490c      	ldr	r1, [pc, #48]	; (80a1690 <_GLOBAL__sub_I_SystemMode+0x70>)
 80a165e:	f001 f98b 	bl	80a2978 <_ZN6StringC1EPKc>
 80a1662:	4632      	mov	r2, r6
 80a1664:	4620      	mov	r0, r4
}
 80a1666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
String hwID;
 80a166a:	490a      	ldr	r1, [pc, #40]	; (80a1694 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a166c:	f002 bb16 	b.w	80a3c9c <__aeabi_atexit>
 80a1670:	20000190 	.word	0x20000190
 80a1674:	20000184 	.word	0x20000184
 80a1678:	20000194 	.word	0x20000194
 80a167c:	20000128 	.word	0x20000128
 80a1680:	20000195 	.word	0x20000195
 80a1684:	ffff0000 	.word	0xffff0000
 80a1688:	080a0861 	.word	0x080a0861
 80a168c:	200002b0 	.word	0x200002b0
 80a1690:	080a5c9a 	.word	0x080a5c9a
 80a1694:	080a28e5 	.word	0x080a28e5

080a1698 <digitalWriteFast>:
#endif

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
 80a1698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a169a:	4d27      	ldr	r5, [pc, #156]	; (80a1738 <digitalWriteFast+0xa0>)
 80a169c:	4606      	mov	r6, r0
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a169e:	782b      	ldrb	r3, [r5, #0]
 80a16a0:	4c26      	ldr	r4, [pc, #152]	; (80a173c <digitalWriteFast+0xa4>)
 80a16a2:	f3bf 8f5b 	dmb	ish
    if (value)
 80a16a6:	b319      	cbz	r1, 80a16f0 <digitalWriteFast+0x58>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a16a8:	07d8      	lsls	r0, r3, #31
 80a16aa:	d409      	bmi.n	80a16c0 <digitalWriteFast+0x28>
 80a16ac:	4628      	mov	r0, r5
 80a16ae:	f7fe fcf8 	bl	80a00a2 <__cxa_guard_acquire>
 80a16b2:	b128      	cbz	r0, 80a16c0 <digitalWriteFast+0x28>
 80a16b4:	f000 fd9a 	bl	80a21ec <HAL_Pin_Map>
 80a16b8:	6020      	str	r0, [r4, #0]
 80a16ba:	4628      	mov	r0, r5
 80a16bc:	f7fe fcf6 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a16c0:	201c      	movs	r0, #28
 80a16c2:	4346      	muls	r6, r0
 80a16c4:	6827      	ldr	r7, [r4, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a16c6:	782b      	ldrb	r3, [r5, #0]
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a16c8:	4437      	add	r7, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a16ca:	07d9      	lsls	r1, r3, #31
 80a16cc:	f3bf 8f5b 	dmb	ish
 80a16d0:	d409      	bmi.n	80a16e6 <digitalWriteFast+0x4e>
 80a16d2:	4819      	ldr	r0, [pc, #100]	; (80a1738 <digitalWriteFast+0xa0>)
 80a16d4:	f7fe fce5 	bl	80a00a2 <__cxa_guard_acquire>
 80a16d8:	b128      	cbz	r0, 80a16e6 <digitalWriteFast+0x4e>
 80a16da:	f000 fd87 	bl	80a21ec <HAL_Pin_Map>
 80a16de:	6020      	str	r0, [r4, #0]
 80a16e0:	4815      	ldr	r0, [pc, #84]	; (80a1738 <digitalWriteFast+0xa0>)
 80a16e2:	f7fe fce3 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a16e6:	6823      	ldr	r3, [r4, #0]
 80a16e8:	88ba      	ldrh	r2, [r7, #4]
 80a16ea:	599b      	ldr	r3, [r3, r6]
 80a16ec:	831a      	strh	r2, [r3, #24]
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
 80a16ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a16f0:	07da      	lsls	r2, r3, #31
 80a16f2:	d409      	bmi.n	80a1708 <digitalWriteFast+0x70>
 80a16f4:	4628      	mov	r0, r5
 80a16f6:	f7fe fcd4 	bl	80a00a2 <__cxa_guard_acquire>
 80a16fa:	b128      	cbz	r0, 80a1708 <digitalWriteFast+0x70>
 80a16fc:	f000 fd76 	bl	80a21ec <HAL_Pin_Map>
 80a1700:	6020      	str	r0, [r4, #0]
 80a1702:	4628      	mov	r0, r5
 80a1704:	f7fe fcd2 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a1708:	201c      	movs	r0, #28
 80a170a:	4346      	muls	r6, r0
 80a170c:	6827      	ldr	r7, [r4, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a170e:	782b      	ldrb	r3, [r5, #0]
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a1710:	4437      	add	r7, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a1712:	07db      	lsls	r3, r3, #31
 80a1714:	f3bf 8f5b 	dmb	ish
 80a1718:	d409      	bmi.n	80a172e <digitalWriteFast+0x96>
 80a171a:	4807      	ldr	r0, [pc, #28]	; (80a1738 <digitalWriteFast+0xa0>)
 80a171c:	f7fe fcc1 	bl	80a00a2 <__cxa_guard_acquire>
 80a1720:	b128      	cbz	r0, 80a172e <digitalWriteFast+0x96>
 80a1722:	f000 fd63 	bl	80a21ec <HAL_Pin_Map>
 80a1726:	6020      	str	r0, [r4, #0]
 80a1728:	4803      	ldr	r0, [pc, #12]	; (80a1738 <digitalWriteFast+0xa0>)
 80a172a:	f7fe fcbf 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a172e:	6823      	ldr	r3, [r4, #0]
 80a1730:	88ba      	ldrh	r2, [r7, #4]
 80a1732:	599b      	ldr	r3, [r3, r6]
 80a1734:	835a      	strh	r2, [r3, #26]
}
 80a1736:	e7da      	b.n	80a16ee <digitalWriteFast+0x56>
 80a1738:	20000334 	.word	0x20000334
 80a173c:	20000338 	.word	0x20000338

080a1740 <_Z17ultra_sonic_setupv>:


#include "05_ultrasonic.h"

 void ultra_sonic_setup()
 {
 80a1740:	b508      	push	{r3, lr}
   	// Initialize pins for sensor
   	pinMode(trigPin, OUTPUT);
 80a1742:	2101      	movs	r1, #1
 80a1744:	2003      	movs	r0, #3
 80a1746:	f002 f9e5 	bl	80a3b14 <pinMode>
   	digitalWriteFast(trigPin, LOW);
 80a174a:	2003      	movs	r0, #3
 80a174c:	2100      	movs	r1, #0
 80a174e:	f7ff ffa3 	bl	80a1698 <digitalWriteFast>
   	delay(50);
 }
 80a1752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	delay(50);
 80a1756:	2032      	movs	r0, #50	; 0x32
 80a1758:	f001 bb50 	b.w	80a2dfc <delay>

080a175c <_Z16ultra_sonic_pingv>:


 uint32_t ultra_sonic_ping()
 {
 80a175c:	b508      	push	{r3, lr}
   	uint32_t duration;
   	pinMode(echoPin, INPUT);
 80a175e:	2100      	movs	r1, #0
 80a1760:	2004      	movs	r0, #4
 80a1762:	f002 f9d7 	bl	80a3b14 <pinMode>
   	pinMode(trigPin, OUTPUT);
 80a1766:	2101      	movs	r1, #1
 80a1768:	2003      	movs	r0, #3
 80a176a:	f002 f9d3 	bl	80a3b14 <pinMode>

   	// The sensor is triggered by a HIGH pulse of 10 or more microseconds.
   	digitalWriteFast(trigPin, HIGH);
 80a176e:	2101      	movs	r1, #1
 80a1770:	2003      	movs	r0, #3
 80a1772:	f7ff ff91 	bl	80a1698 <digitalWriteFast>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a1776:	200a      	movs	r0, #10
 80a1778:	f000 fd90 	bl	80a229c <HAL_Delay_Microseconds>
   	delayMicroseconds(10);
   	digitalWriteFast(trigPin, LOW);
 80a177c:	2100      	movs	r1, #0
 80a177e:	2003      	movs	r0, #3
 80a1780:	f7ff ff8a 	bl	80a1698 <digitalWriteFast>

   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin

   	return duration;
 }
 80a1784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin
 80a1788:	2101      	movs	r1, #1
 80a178a:	2004      	movs	r0, #4
 80a178c:	f002 ba16 	b.w	80a3bbc <pulseIn>

080a1790 <_Z6uMillim>:
uint32_t uMilli(uint32_t microseconds)
{
     // The speed of sound is 340 m/s or 29 microseconds per centimeter.
     // The ping travels out and back, so to find the distance of the
     // object we take half of the distance travelled.
     return ( 10 * microseconds / 29 / 2);
 80a1790:	230a      	movs	r3, #10
 80a1792:	4343      	muls	r3, r0
}
 80a1794:	203a      	movs	r0, #58	; 0x3a
 80a1796:	fbb3 f0f0 	udiv	r0, r3, r0
 80a179a:	4770      	bx	lr

080a179c <_ZN7OneWire11write_bytesEPKhtb.part.0>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
 80a179c:	b510      	push	{r4, lr}
 80a179e:	4604      	mov	r4, r0
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
        noInterrupts();
 80a17a0:	f001 ffb8 	bl	80a3714 <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a17a4:	231c      	movs	r3, #28
 80a17a6:	8822      	ldrh	r2, [r4, #0]
 80a17a8:	4353      	muls	r3, r2
 80a17aa:	6862      	ldr	r2, [r4, #4]
 80a17ac:	18d1      	adds	r1, r2, r3
 80a17ae:	58d3      	ldr	r3, [r2, r3]
 80a17b0:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a17b2:	2101      	movs	r1, #1
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a17b4:	831a      	strh	r2, [r3, #24]
      HAL_Pin_Mode(_pin, OUTPUT);
 80a17b6:	8820      	ldrh	r0, [r4, #0]
 80a17b8:	f000 fd28 	bl	80a220c <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 80a17bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        interrupts();
 80a17c0:	f001 bfaa 	b.w	80a3718 <_Z10interruptsv>

080a17c4 <_ZN7OneWire19digitalWriteFastLowEv>:
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a17c4:	231c      	movs	r3, #28
 80a17c6:	8802      	ldrh	r2, [r0, #0]
 80a17c8:	4353      	muls	r3, r2
 80a17ca:	6842      	ldr	r2, [r0, #4]
 80a17cc:	18d1      	adds	r1, r2, r3
 80a17ce:	58d3      	ldr	r3, [r2, r3]
 80a17d0:	888a      	ldrh	r2, [r1, #4]
 80a17d2:	835a      	strh	r2, [r3, #26]
    }
 80a17d4:	4770      	bx	lr

080a17d6 <_ZN7OneWireC1Et>:
OneWire::OneWire(uint16_t pin)
 80a17d6:	b538      	push	{r3, r4, r5, lr}
 80a17d8:	4604      	mov	r4, r0
 80a17da:	460d      	mov	r5, r1
 80a17dc:	f000 fd06 	bl	80a21ec <HAL_Pin_Map>
    pinMode(pin, INPUT);
 80a17e0:	2100      	movs	r1, #0
OneWire::OneWire(uint16_t pin)
 80a17e2:	6060      	str	r0, [r4, #4]
    pinMode(pin, INPUT);
 80a17e4:	4628      	mov	r0, r5
 80a17e6:	f002 f995 	bl	80a3b14 <pinMode>
}
 80a17ea:	4620      	mov	r0, r4
    _pin = pin;
 80a17ec:	8025      	strh	r5, [r4, #0]
}
 80a17ee:	bd38      	pop	{r3, r4, r5, pc}

080a17f0 <_ZN7OneWire5resetEv>:
{
 80a17f0:	b538      	push	{r3, r4, r5, lr}
 80a17f2:	4605      	mov	r5, r0
    noInterrupts();
 80a17f4:	f001 ff8e 	bl	80a3714 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a17f8:	2100      	movs	r1, #0
 80a17fa:	8828      	ldrh	r0, [r5, #0]
 80a17fc:	f000 fd06 	bl	80a220c <HAL_Pin_Mode>
    interrupts();
 80a1800:	247d      	movs	r4, #125	; 0x7d
 80a1802:	f001 ff89 	bl	80a3718 <_Z10interruptsv>
        if (--retries == 0) return 0;
 80a1806:	3c01      	subs	r4, #1
 80a1808:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a180c:	d02d      	beq.n	80a186a <_ZN7OneWire5resetEv+0x7a>
 80a180e:	2002      	movs	r0, #2
 80a1810:	f000 fd44 	bl	80a229c <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a1814:	8828      	ldrh	r0, [r5, #0]
 80a1816:	f000 fd11 	bl	80a223c <HAL_GPIO_Read>
    } while ( !digitalReadFast());
 80a181a:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a181e:	d0f2      	beq.n	80a1806 <_ZN7OneWire5resetEv+0x16>
    noInterrupts();
 80a1820:	f001 ff78 	bl	80a3714 <_Z12noInterruptsv>
    digitalWriteFastLow();
 80a1824:	4628      	mov	r0, r5
 80a1826:	f7ff ffcd 	bl	80a17c4 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a182a:	2101      	movs	r1, #1
 80a182c:	8828      	ldrh	r0, [r5, #0]
 80a182e:	f000 fced 	bl	80a220c <HAL_Pin_Mode>
    interrupts();
 80a1832:	f001 ff71 	bl	80a3718 <_Z10interruptsv>
 80a1836:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a183a:	f000 fd2f 	bl	80a229c <HAL_Delay_Microseconds>
    noInterrupts();
 80a183e:	f001 ff69 	bl	80a3714 <_Z12noInterruptsv>
      HAL_Pin_Mode(_pin, INPUT);
 80a1842:	2100      	movs	r1, #0
 80a1844:	8828      	ldrh	r0, [r5, #0]
 80a1846:	f000 fce1 	bl	80a220c <HAL_Pin_Mode>
 80a184a:	2046      	movs	r0, #70	; 0x46
 80a184c:	f000 fd26 	bl	80a229c <HAL_Delay_Microseconds>
      return HAL_GPIO_Read(_pin);
 80a1850:	8828      	ldrh	r0, [r5, #0]
 80a1852:	f000 fcf3 	bl	80a223c <HAL_GPIO_Read>
    r =! digitalReadFast();
 80a1856:	b2c4      	uxtb	r4, r0
 80a1858:	fab4 f484 	clz	r4, r4
    interrupts();
 80a185c:	f001 ff5c 	bl	80a3718 <_Z10interruptsv>
 80a1860:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    r =! digitalReadFast();
 80a1864:	0964      	lsrs	r4, r4, #5
 80a1866:	f000 fd19 	bl	80a229c <HAL_Delay_Microseconds>
}
 80a186a:	4620      	mov	r0, r4
 80a186c:	bd38      	pop	{r3, r4, r5, pc}

080a186e <_ZN7OneWire9write_bitEh>:
{
 80a186e:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 80a1870:	f011 0501 	ands.w	r5, r1, #1
{
 80a1874:	4604      	mov	r4, r0
    if (v & 1) {
 80a1876:	d016      	beq.n	80a18a6 <_ZN7OneWire9write_bitEh+0x38>
        noInterrupts();
 80a1878:	f001 ff4c 	bl	80a3714 <_Z12noInterruptsv>
        digitalWriteFastLow();
 80a187c:	4620      	mov	r0, r4
 80a187e:	f7ff ffa1 	bl	80a17c4 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a1882:	2101      	movs	r1, #1
 80a1884:	8820      	ldrh	r0, [r4, #0]
 80a1886:	f000 fcc1 	bl	80a220c <HAL_Pin_Mode>
 80a188a:	200a      	movs	r0, #10
 80a188c:	f000 fd06 	bl	80a229c <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
 80a1890:	8820      	ldrh	r0, [r4, #0]
 80a1892:	2100      	movs	r1, #0
 80a1894:	f000 fcba 	bl	80a220c <HAL_Pin_Mode>
        interrupts();
 80a1898:	f001 ff3e 	bl	80a3718 <_Z10interruptsv>
 80a189c:	2037      	movs	r0, #55	; 0x37
}
 80a189e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a18a2:	f000 bcfb 	b.w	80a229c <HAL_Delay_Microseconds>
        noInterrupts();
 80a18a6:	f001 ff35 	bl	80a3714 <_Z12noInterruptsv>
        digitalWriteFastLow();
 80a18aa:	4620      	mov	r0, r4
 80a18ac:	f7ff ff8a 	bl	80a17c4 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a18b0:	2101      	movs	r1, #1
 80a18b2:	8820      	ldrh	r0, [r4, #0]
 80a18b4:	f000 fcaa 	bl	80a220c <HAL_Pin_Mode>
 80a18b8:	2041      	movs	r0, #65	; 0x41
 80a18ba:	f000 fcef 	bl	80a229c <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
 80a18be:	8820      	ldrh	r0, [r4, #0]
 80a18c0:	4629      	mov	r1, r5
 80a18c2:	f000 fca3 	bl	80a220c <HAL_Pin_Mode>
        interrupts();
 80a18c6:	f001 ff27 	bl	80a3718 <_Z10interruptsv>
 80a18ca:	2005      	movs	r0, #5
 80a18cc:	e7e7      	b.n	80a189e <_ZN7OneWire9write_bitEh+0x30>

080a18ce <_ZN7OneWire8read_bitEv>:
{
 80a18ce:	b510      	push	{r4, lr}
 80a18d0:	4604      	mov	r4, r0
    noInterrupts();
 80a18d2:	f001 ff1f 	bl	80a3714 <_Z12noInterruptsv>
    digitalWriteFastLow();
 80a18d6:	4620      	mov	r0, r4
 80a18d8:	f7ff ff74 	bl	80a17c4 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a18dc:	2101      	movs	r1, #1
 80a18de:	8820      	ldrh	r0, [r4, #0]
 80a18e0:	f000 fc94 	bl	80a220c <HAL_Pin_Mode>
 80a18e4:	2003      	movs	r0, #3
 80a18e6:	f000 fcd9 	bl	80a229c <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
 80a18ea:	2100      	movs	r1, #0
 80a18ec:	8820      	ldrh	r0, [r4, #0]
 80a18ee:	f000 fc8d 	bl	80a220c <HAL_Pin_Mode>
 80a18f2:	200a      	movs	r0, #10
 80a18f4:	f000 fcd2 	bl	80a229c <HAL_Delay_Microseconds>
      return HAL_GPIO_Read(_pin);
 80a18f8:	8820      	ldrh	r0, [r4, #0]
 80a18fa:	f000 fc9f 	bl	80a223c <HAL_GPIO_Read>
 80a18fe:	4604      	mov	r4, r0
    interrupts();
 80a1900:	f001 ff0a 	bl	80a3718 <_Z10interruptsv>
 80a1904:	2035      	movs	r0, #53	; 0x35
 80a1906:	f000 fcc9 	bl	80a229c <HAL_Delay_Microseconds>
}
 80a190a:	b2e0      	uxtb	r0, r4
 80a190c:	bd10      	pop	{r4, pc}

080a190e <_ZN7OneWire5writeEhh>:
{
 80a190e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1912:	4605      	mov	r5, r0
 80a1914:	4688      	mov	r8, r1
 80a1916:	4616      	mov	r6, r2
 80a1918:	2708      	movs	r7, #8
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a191a:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a191c:	ea18 0f04 	tst.w	r8, r4
 80a1920:	bf14      	ite	ne
 80a1922:	2101      	movne	r1, #1
 80a1924:	2100      	moveq	r1, #0
 80a1926:	4628      	mov	r0, r5
 80a1928:	f7ff ffa1 	bl	80a186e <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a192c:	0064      	lsls	r4, r4, #1
 80a192e:	3f01      	subs	r7, #1
 80a1930:	b2e4      	uxtb	r4, r4
 80a1932:	d1f3      	bne.n	80a191c <_ZN7OneWire5writeEhh+0xe>
    if ( power) {
 80a1934:	b126      	cbz	r6, 80a1940 <_ZN7OneWire5writeEhh+0x32>
 80a1936:	4628      	mov	r0, r5
}
 80a1938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a193c:	f7ff bf2e 	b.w	80a179c <_ZN7OneWire11write_bytesEPKhtb.part.0>
 80a1940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1944 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
 80a1944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1946:	4607      	mov	r7, r0
 80a1948:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a194a:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a194c:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a194e:	4638      	mov	r0, r7
 80a1950:	f7ff ffbd 	bl	80a18ce <_ZN7OneWire8read_bitEv>
 80a1954:	b100      	cbz	r0, 80a1958 <_ZN7OneWire4readEv+0x14>
 80a1956:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a1958:	0064      	lsls	r4, r4, #1
 80a195a:	3e01      	subs	r6, #1
 80a195c:	b2e4      	uxtb	r4, r4
 80a195e:	d1f6      	bne.n	80a194e <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
 80a1960:	4628      	mov	r0, r5
 80a1962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1964 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a1964:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a1966:	2200      	movs	r2, #0
{
 80a1968:	460c      	mov	r4, r1
    write(0x55);           // Choose ROM
 80a196a:	2155      	movs	r1, #85	; 0x55
{
 80a196c:	4606      	mov	r6, r0
    write(0x55);           // Choose ROM
 80a196e:	f7ff ffce 	bl	80a190e <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++) write(rom[i]);
 80a1972:	1e65      	subs	r5, r4, #1
 80a1974:	3407      	adds	r4, #7
 80a1976:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a197a:	2200      	movs	r2, #0
 80a197c:	4630      	mov	r0, r6
 80a197e:	f7ff ffc6 	bl	80a190e <_ZN7OneWire5writeEhh>
 80a1982:	42a5      	cmp	r5, r4
 80a1984:	d1f7      	bne.n	80a1976 <_ZN7OneWire6selectEPKh+0x12>
}
 80a1986:	bd70      	pop	{r4, r5, r6, pc}

080a1988 <_ZN7OneWire12reset_searchEv>:
    LastDiscrepancy = 0;
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a1988:	2300      	movs	r3, #0
 80a198a:	e9c0 3302 	strd	r3, r3, [r0, #8]
    LastDiscrepancy = 0;
 80a198e:	8203      	strh	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a1990:	7483      	strb	r3, [r0, #18]
        if ( i == 0) break;
    }
}
 80a1992:	4770      	bx	lr

080a1994 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a1994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a1998:	f890 9012 	ldrb.w	r9, [r0, #18]
{
 80a199c:	4604      	mov	r4, r0
 80a199e:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
 80a19a0:	f1b9 0f00 	cmp.w	r9, #0
 80a19a4:	d00e      	beq.n	80a19c4 <_ZN7OneWire6searchEPh+0x30>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a19a6:	2000      	movs	r0, #0
 80a19a8:	8220      	strh	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a19aa:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a19ac:	f104 0308 	add.w	r3, r4, #8
 80a19b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80a19b4:	3410      	adds	r4, #16
 80a19b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a19ba:	42a3      	cmp	r3, r4
 80a19bc:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a19c0:	d1f9      	bne.n	80a19b6 <_ZN7OneWire6searchEPh+0x22>
 80a19c2:	e004      	b.n	80a19ce <_ZN7OneWire6searchEPh+0x3a>
        if (!reset()){
 80a19c4:	f7ff ff14 	bl	80a17f0 <_ZN7OneWire5resetEv>
 80a19c8:	b918      	cbnz	r0, 80a19d2 <_ZN7OneWire6searchEPh+0x3e>
            LastDiscrepancy = 0;
 80a19ca:	8220      	strh	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a19cc:	74a0      	strb	r0, [r4, #18]

    return search_result;
}
 80a19ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rom_byte_mask = 1;
 80a19d2:	2601      	movs	r6, #1
        write(0xF0);
 80a19d4:	464a      	mov	r2, r9
 80a19d6:	21f0      	movs	r1, #240	; 0xf0
 80a19d8:	4620      	mov	r0, r4
 80a19da:	f7ff ff98 	bl	80a190e <_ZN7OneWire5writeEhh>
    rom_byte_number = 0;
 80a19de:	46ca      	mov	sl, r9
    id_bit_number = 1;
 80a19e0:	4635      	mov	r5, r6
            id_bit = read_bit();
 80a19e2:	4620      	mov	r0, r4
 80a19e4:	f7ff ff73 	bl	80a18ce <_ZN7OneWire8read_bitEv>
 80a19e8:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
 80a19ea:	4620      	mov	r0, r4
 80a19ec:	f7ff ff6f 	bl	80a18ce <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a19f0:	2f01      	cmp	r7, #1
 80a19f2:	d10f      	bne.n	80a1a14 <_ZN7OneWire6searchEPh+0x80>
 80a19f4:	2801      	cmp	r0, #1
 80a19f6:	d127      	bne.n	80a1a48 <_ZN7OneWire6searchEPh+0xb4>
        if (!(id_bit_number < 65))
 80a19f8:	2d40      	cmp	r5, #64	; 0x40
 80a19fa:	d9d4      	bls.n	80a19a6 <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
 80a19fc:	f884 9010 	strb.w	r9, [r4, #16]
            if (LastDiscrepancy == 0)
 80a1a00:	f1b9 0f00 	cmp.w	r9, #0
 80a1a04:	d101      	bne.n	80a1a0a <_ZN7OneWire6searchEPh+0x76>
                LastDeviceFlag = TRUE;
 80a1a06:	2301      	movs	r3, #1
 80a1a08:	74a3      	strb	r3, [r4, #18]
    if (!search_result || !ROM_NO[0]){
 80a1a0a:	7a23      	ldrb	r3, [r4, #8]
 80a1a0c:	2b00      	cmp	r3, #0
 80a1a0e:	d0ca      	beq.n	80a19a6 <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
 80a1a10:	2001      	movs	r0, #1
 80a1a12:	e7cb      	b.n	80a19ac <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit){
 80a1a14:	4287      	cmp	r7, r0
 80a1a16:	eb04 030a 	add.w	r3, r4, sl
 80a1a1a:	d10c      	bne.n	80a1a36 <_ZN7OneWire6searchEPh+0xa2>
                    if (id_bit_number < LastDiscrepancy)
 80a1a1c:	7c22      	ldrb	r2, [r4, #16]
 80a1a1e:	42aa      	cmp	r2, r5
 80a1a20:	d90e      	bls.n	80a1a40 <_ZN7OneWire6searchEPh+0xac>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a1a22:	7a1a      	ldrb	r2, [r3, #8]
 80a1a24:	4216      	tst	r6, r2
 80a1a26:	bf14      	ite	ne
 80a1a28:	2701      	movne	r7, #1
 80a1a2a:	2700      	moveq	r7, #0
                    if (search_direction == 0){
 80a1a2c:	b967      	cbnz	r7, 80a1a48 <_ZN7OneWire6searchEPh+0xb4>
                        if (last_zero < 9)
 80a1a2e:	2d08      	cmp	r5, #8
 80a1a30:	d800      	bhi.n	80a1a34 <_ZN7OneWire6searchEPh+0xa0>
                            LastFamilyDiscrepancy = last_zero;
 80a1a32:	7465      	strb	r5, [r4, #17]
                if (search_direction == 1)
 80a1a34:	46a9      	mov	r9, r5
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a1a36:	7a1a      	ldrb	r2, [r3, #8]
 80a1a38:	ea22 0206 	bic.w	r2, r2, r6
 80a1a3c:	721a      	strb	r2, [r3, #8]
 80a1a3e:	e009      	b.n	80a1a54 <_ZN7OneWire6searchEPh+0xc0>
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a1a40:	bf0c      	ite	eq
 80a1a42:	2701      	moveq	r7, #1
 80a1a44:	2700      	movne	r7, #0
 80a1a46:	e7f1      	b.n	80a1a2c <_ZN7OneWire6searchEPh+0x98>
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a1a48:	2701      	movs	r7, #1
 80a1a4a:	eb04 020a 	add.w	r2, r4, sl
 80a1a4e:	7a13      	ldrb	r3, [r2, #8]
 80a1a50:	4333      	orrs	r3, r6
 80a1a52:	7213      	strb	r3, [r2, #8]
                write_bit(search_direction);
 80a1a54:	4639      	mov	r1, r7
 80a1a56:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
 80a1a58:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
 80a1a5a:	f7ff ff08 	bl	80a186e <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
 80a1a5e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
 80a1a62:	bf02      	ittt	eq
 80a1a64:	f10a 0a01 	addeq.w	sl, sl, #1
 80a1a68:	fa5f fa8a 	uxtbeq.w	sl, sl
                    rom_byte_mask = 1;
 80a1a6c:	2601      	moveq	r6, #1
                id_bit_number++;
 80a1a6e:	3501      	adds	r5, #1
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a1a70:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
 80a1a74:	b2ed      	uxtb	r5, r5
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a1a76:	d9b4      	bls.n	80a19e2 <_ZN7OneWire6searchEPh+0x4e>
 80a1a78:	e7be      	b.n	80a19f8 <_ZN7OneWire6searchEPh+0x64>

080a1a7a <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a1a7a:	4602      	mov	r2, r0
    uint8_t crc = 0;
 80a1a7c:	4401      	add	r1, r0
 80a1a7e:	2000      	movs	r0, #0
{
 80a1a80:	b530      	push	{r4, r5, lr}

    while (len--) {
 80a1a82:	428a      	cmp	r2, r1
 80a1a84:	d013      	beq.n	80a1aae <_ZN7OneWire4crc8EPhh+0x34>
        uint8_t inbyte = *addr++;
 80a1a86:	2408      	movs	r4, #8
 80a1a88:	f812 5b01 	ldrb.w	r5, [r2], #1
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a1a8c:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a1a90:	f013 0f01 	tst.w	r3, #1
 80a1a94:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a1a98:	bf1c      	itt	ne
 80a1a9a:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a1a9e:	b2d8      	uxtbne	r0, r3
                inbyte >>= 1;
 80a1aa0:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--) {
 80a1aa2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
                inbyte >>= 1;
 80a1aa6:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--) {
 80a1aaa:	d1ef      	bne.n	80a1a8c <_ZN7OneWire4crc8EPhh+0x12>
 80a1aac:	e7e9      	b.n	80a1a82 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
 80a1aae:	bd30      	pop	{r4, r5, pc}

080a1ab0 <_Z15conrad_rsl_initv>:
/*--------------------------------------------------------------------
Diese Funktion muss einmal von setup() aufgerufen werden
call this function once from setup()
--------------------------------------------------------------------*/
void conrad_rsl_init()  
{
 80a1ab0:	b510      	push	{r4, lr}
  pinMode(dpin,OUTPUT);
 80a1ab2:	4c07      	ldr	r4, [pc, #28]	; (80a1ad0 <_Z15conrad_rsl_initv+0x20>)
 80a1ab4:	2101      	movs	r1, #1
 80a1ab6:	8820      	ldrh	r0, [r4, #0]
 80a1ab8:	f002 f82c 	bl	80a3b14 <pinMode>
  digitalWrite(dpin,LOW);
 80a1abc:	8820      	ldrh	r0, [r4, #0]
 80a1abe:	2100      	movs	r1, #0
 80a1ac0:	f002 f839 	bl	80a3b36 <digitalWrite>
  delay(500);
}
 80a1ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
 80a1ac8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1acc:	f001 b996 	b.w	80a2dfc <delay>
 80a1ad0:	2000033c 	.word	0x2000033c

080a1ad4 <_Z19conrad_rsl_transmitPi>:

The next value sets transmitter pin HIGH
------------------------------------------------------------------------------*/
  void conrad_rsl_transmit (int* code)

  {
 80a1ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int rep;
  int i;

   digitalWrite(dpin,LOW);
 80a1ad8:	4c2d      	ldr	r4, [pc, #180]	; (80a1b90 <_Z19conrad_rsl_transmitPi+0xbc>)
 80a1ada:	2100      	movs	r1, #0
  {
 80a1adc:	4607      	mov	r7, r0
   digitalWrite(dpin,LOW);
 80a1ade:	8820      	ldrh	r0, [r4, #0]
 80a1ae0:	f002 f829 	bl	80a3b36 <digitalWrite>
 80a1ae4:	f241 3088 	movw	r0, #5000	; 0x1388
 80a1ae8:	f000 fbd8 	bl	80a229c <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a1aec:	2100      	movs	r1, #0
 80a1aee:	8820      	ldrh	r0, [r4, #0]
 80a1af0:	f002 f821 	bl	80a3b36 <digitalWrite>
 80a1af4:	f241 3088 	movw	r0, #5000	; 0x1388
 80a1af8:	f000 fbd0 	bl	80a229c <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a1afc:	2100      	movs	r1, #0
 80a1afe:	8820      	ldrh	r0, [r4, #0]
 80a1b00:	f002 f819 	bl	80a3b36 <digitalWrite>
 80a1b04:	f241 3088 	movw	r0, #5000	; 0x1388
 80a1b08:	f000 fbc8 	bl	80a229c <HAL_Delay_Microseconds>
 80a1b0c:	2608      	movs	r6, #8

    for (rep=0; rep<8; rep++)
     {
       // send the bits from data array

     for (i=0; i < code[0]; i = i+4)
 80a1b0e:	f04f 0800 	mov.w	r8, #0
 80a1b12:	1d3d      	adds	r5, r7, #4
 80a1b14:	683b      	ldr	r3, [r7, #0]
         digitalWrite(dpin,LOW);
         delayMicroseconds(code[i+4]);
     }

        // for RSL switch
    digitalWrite(dpin,HIGH);
 80a1b16:	2101      	movs	r1, #1
     for (i=0; i < code[0]; i = i+4)
 80a1b18:	4543      	cmp	r3, r8
 80a1b1a:	8820      	ldrh	r0, [r4, #0]
 80a1b1c:	f105 0510 	add.w	r5, r5, #16
 80a1b20:	dd20      	ble.n	80a1b64 <_Z19conrad_rsl_transmitPi+0x90>
         digitalWrite(dpin,HIGH);
 80a1b22:	f002 f808 	bl	80a3b36 <digitalWrite>
 80a1b26:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80a1b2a:	f000 fbb7 	bl	80a229c <HAL_Delay_Microseconds>
         digitalWrite(dpin,LOW);
 80a1b2e:	2100      	movs	r1, #0
 80a1b30:	8820      	ldrh	r0, [r4, #0]
 80a1b32:	f002 f800 	bl	80a3b36 <digitalWrite>
 80a1b36:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 80a1b3a:	f000 fbaf 	bl	80a229c <HAL_Delay_Microseconds>
         digitalWrite(dpin,HIGH);
 80a1b3e:	2101      	movs	r1, #1
 80a1b40:	8820      	ldrh	r0, [r4, #0]
 80a1b42:	f001 fff8 	bl	80a3b36 <digitalWrite>
 80a1b46:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80a1b4a:	f000 fba7 	bl	80a229c <HAL_Delay_Microseconds>
         digitalWrite(dpin,LOW);
 80a1b4e:	2100      	movs	r1, #0
 80a1b50:	8820      	ldrh	r0, [r4, #0]
 80a1b52:	f001 fff0 	bl	80a3b36 <digitalWrite>
 80a1b56:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a1b5a:	f000 fb9f 	bl	80a229c <HAL_Delay_Microseconds>
     for (i=0; i < code[0]; i = i+4)
 80a1b5e:	f108 0804 	add.w	r8, r8, #4
 80a1b62:	e7d7      	b.n	80a1b14 <_Z19conrad_rsl_transmitPi+0x40>
    digitalWrite(dpin,HIGH);
 80a1b64:	f001 ffe7 	bl	80a3b36 <digitalWrite>
 80a1b68:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80a1b6c:	f000 fb96 	bl	80a229c <HAL_Delay_Microseconds>
    delayMicroseconds(ST);

    // repeat transmitting after given gap

    digitalWrite(dpin,LOW);
 80a1b70:	2100      	movs	r1, #0
 80a1b72:	8820      	ldrh	r0, [r4, #0]
 80a1b74:	f001 ffdf 	bl	80a3b36 <digitalWrite>
 80a1b78:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80a1b7c:	f000 fb8e 	bl	80a229c <HAL_Delay_Microseconds>
    for (rep=0; rep<8; rep++)
 80a1b80:	3e01      	subs	r6, #1
 80a1b82:	d1c4      	bne.n	80a1b0e <_Z19conrad_rsl_transmitPi+0x3a>
    delayMicroseconds(8000);
    }
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a1b84:	4631      	mov	r1, r6
 80a1b86:	8820      	ldrh	r0, [r4, #0]
  }
 80a1b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a1b8c:	f001 bfd3 	b.w	80a3b36 <digitalWrite>
 80a1b90:	2000033c 	.word	0x2000033c

080a1b94 <_Z15conrad_rsl_sendjii>:

  SHORT : dauer des kurzen Pulses in milliseconds
  LONG : dauer des langen Pulses in milliseconds
  --------------------------------------------------------------------*/
  void conrad_rsl_send(unsigned int code, int SHORT, int LONG)
  {
 80a1b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1b98:	b0c6      	sub	sp, #280	; 0x118
 80a1b9a:	4605      	mov	r5, r0
 80a1b9c:	460e      	mov	r6, r1
 80a1b9e:	4617      	mov	r7, r2
    int i = 0;
    int k = 1;
    int tx_code[70];  // speicher tx code sequenz

    Serial.println(code);
 80a1ba0:	f001 fd60 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1ba4:	4604      	mov	r4, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1ba6:	220a      	movs	r2, #10
 80a1ba8:	4629      	mov	r1, r5
 80a1baa:	f000 ffd0 	bl	80a2b4e <_ZN5Print11printNumberEmh>
        n += println();
 80a1bae:	4620      	mov	r0, r4
 80a1bb0:	f000 ffb7 	bl	80a2b22 <_ZN5Print7printlnEv>

    memset(tx_code,0,64);
 80a1bb4:	223c      	movs	r2, #60	; 0x3c
 80a1bb6:	2100      	movs	r1, #0
 80a1bb8:	a801      	add	r0, sp, #4
 80a1bba:	f003 fa5d 	bl	80a5078 <memset>
    tx_code[0]=64;   // die laenge des tx codes
 80a1bbe:	2340      	movs	r3, #64	; 0x40
 80a1bc0:	466c      	mov	r4, sp
    int k = 1;
 80a1bc2:	f04f 0801 	mov.w	r8, #1
      }
      else
      {
        tx_code[k] = SHORT;
        tx_code[k+1] = LONG;
        Serial.print("0");
 80a1bc6:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a1c1c <_Z15conrad_rsl_sendjii+0x88>
        Serial.print("1");
 80a1bca:	f8df a054 	ldr.w	sl, [pc, #84]	; 80a1c20 <_Z15conrad_rsl_sendjii+0x8c>
    tx_code[0]=64;   // die laenge des tx codes
 80a1bce:	9300      	str	r3, [sp, #0]
      if ( (code & 0x80000000) == 0x80000000)
 80a1bd0:	2d00      	cmp	r5, #0
 80a1bd2:	da1a      	bge.n	80a1c0a <_Z15conrad_rsl_sendjii+0x76>
        tx_code[k+1] = SHORT;
 80a1bd4:	e9c4 7601 	strd	r7, r6, [r4, #4]
        Serial.print("1");
 80a1bd8:	f001 fd44 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1bdc:	4651      	mov	r1, sl
      }
      code = code << 1;
      k=k+2;
 80a1bde:	f108 0802 	add.w	r8, r8, #2
        Serial.print("0");
 80a1be2:	f000 ff97 	bl	80a2b14 <_ZN5Print5printEPKc>
    for(i=0; i<32; i++)
 80a1be6:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
      code = code << 1;
 80a1bea:	ea4f 0545 	mov.w	r5, r5, lsl #1
    for(i=0; i<32; i++)
 80a1bee:	f104 0408 	add.w	r4, r4, #8
 80a1bf2:	d1ed      	bne.n	80a1bd0 <_Z15conrad_rsl_sendjii+0x3c>
    }
    Serial.println(" ");
 80a1bf4:	f001 fd36 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1bf8:	4907      	ldr	r1, [pc, #28]	; (80a1c18 <_Z15conrad_rsl_sendjii+0x84>)
 80a1bfa:	f000 ff9e 	bl	80a2b3a <_ZN5Print7printlnEPKc>
    conrad_rsl_transmit(&tx_code[0]);
 80a1bfe:	4668      	mov	r0, sp
 80a1c00:	f7ff ff68 	bl	80a1ad4 <_Z19conrad_rsl_transmitPi>
  }
 80a1c04:	b046      	add	sp, #280	; 0x118
 80a1c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tx_code[k+1] = LONG;
 80a1c0a:	e9c4 6701 	strd	r6, r7, [r4, #4]
        Serial.print("0");
 80a1c0e:	f001 fd29 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1c12:	4649      	mov	r1, r9
 80a1c14:	e7e3      	b.n	80a1bde <_Z15conrad_rsl_sendjii+0x4a>
 80a1c16:	bf00      	nop
 80a1c18:	080a63e0 	.word	0x080a63e0
 80a1c1c:	080a62e8 	.word	0x080a62e8
 80a1c20:	080a62e6 	.word	0x080a62e6

080a1c24 <_Z22conrad_rsl_switch_codeii>:
  void conrad_rsl_switch_code ( int which, int state )
  {

    unsigned int code = 0;

    if (which>11)
 80a1c24:	280b      	cmp	r0, #11
  {
 80a1c26:	b570      	push	{r4, r5, r6, lr}
 80a1c28:	4605      	mov	r5, r0
 80a1c2a:	460c      	mov	r4, r1
    if (which>11)
 80a1c2c:	dd04      	ble.n	80a1c38 <_Z22conrad_rsl_switch_codeii+0x14>
    {
      Serial.println(" ERROR which not valid ");
 80a1c2e:	f001 fd19 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1c32:	4918      	ldr	r1, [pc, #96]	; (80a1c94 <_Z22conrad_rsl_switch_codeii+0x70>)
 80a1c34:	f000 ff81 	bl	80a2b3a <_ZN5Print7printlnEPKc>
    }

    if (state>1)
 80a1c38:	2c01      	cmp	r4, #1
 80a1c3a:	dd04      	ble.n	80a1c46 <_Z22conrad_rsl_switch_codeii+0x22>
    {
      Serial.println(" ERROR state not valid ");
 80a1c3c:	f001 fd12 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1c40:	4915      	ldr	r1, [pc, #84]	; (80a1c98 <_Z22conrad_rsl_switch_codeii+0x74>)
 80a1c42:	f000 ff7a 	bl	80a2b3a <_ZN5Print7printlnEPKc>
    }

    code = codes[state][which];
 80a1c46:	260a      	movs	r6, #10
 80a1c48:	fb06 5404 	mla	r4, r6, r4, r5
 80a1c4c:	4b13      	ldr	r3, [pc, #76]	; (80a1c9c <_Z22conrad_rsl_switch_codeii+0x78>)
 80a1c4e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

    if (code != 0)
 80a1c52:	b1bc      	cbz	r4, 80a1c84 <_Z22conrad_rsl_switch_codeii+0x60>
    {
      Serial.print("Sende Code : ");
 80a1c54:	f001 fd06 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1c58:	4911      	ldr	r1, [pc, #68]	; (80a1ca0 <_Z22conrad_rsl_switch_codeii+0x7c>)
 80a1c5a:	f000 ff5b 	bl	80a2b14 <_ZN5Print5printEPKc>
      Serial.println(code);
 80a1c5e:	f001 fd01 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1c62:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80a1c64:	4632      	mov	r2, r6
 80a1c66:	4621      	mov	r1, r4
 80a1c68:	f000 ff71 	bl	80a2b4e <_ZN5Print11printNumberEmh>
        n += println();
 80a1c6c:	4628      	mov	r0, r5
 80a1c6e:	f000 ff58 	bl	80a2b22 <_ZN5Print7printlnEv>
      conrad_rsl_send(code,430,1150);
 80a1c72:	4620      	mov	r0, r4
    else
    {
      Serial.print(" Fehler : konnte Code nicht finden ");
    }

  }
 80a1c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      conrad_rsl_send(code,430,1150);
 80a1c78:	f240 427e 	movw	r2, #1150	; 0x47e
 80a1c7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80a1c80:	f7ff bf88 	b.w	80a1b94 <_Z15conrad_rsl_sendjii>
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a1c84:	f001 fcee 	bl	80a3664 <_Z16_fetch_usbserialv>
  }
 80a1c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a1c8c:	4905      	ldr	r1, [pc, #20]	; (80a1ca4 <_Z22conrad_rsl_switch_codeii+0x80>)
 80a1c8e:	f000 bf41 	b.w	80a2b14 <_ZN5Print5printEPKc>
 80a1c92:	bf00      	nop
 80a1c94:	080a62ea 	.word	0x080a62ea
 80a1c98:	080a6302 	.word	0x080a6302
 80a1c9c:	20000008 	.word	0x20000008
 80a1ca0:	080a631a 	.word	0x080a631a
 80a1ca4:	080a6328 	.word	0x080a6328

080a1ca8 <_Z17switch_pumpe_funkii.part.0>:
}

/*---------------------------------------------------------------------
Funk-Pumpe eines weiteren Wassertanks einschalten bzw. ausschalten
---------------------------------------------------------------------*/
int switch_pumpe_funk(int newState, int laufzeit) // pumpe ein- oder aus
 80a1ca8:	b510      	push	{r4, lr}

{
    if (newState == ON)
    {
        conrad_rsl_switch_code(RSL2, EIN); // Dosen-Label RSL2
 80a1caa:	2101      	movs	r1, #1
int switch_pumpe_funk(int newState, int laufzeit) // pumpe ein- oder aus
 80a1cac:	4604      	mov	r4, r0
        conrad_rsl_switch_code(RSL2, EIN); // Dosen-Label RSL2
 80a1cae:	2002      	movs	r0, #2
 80a1cb0:	f7ff ffb8 	bl	80a1c24 <_Z22conrad_rsl_switch_codeii>
        st_funk_pumpe = ON;
 80a1cb4:	2201      	movs	r2, #1
 80a1cb6:	4b08      	ldr	r3, [pc, #32]	; (80a1cd8 <_Z17switch_pumpe_funkii.part.0+0x30>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 EINGESCHALTET ");
 80a1cb8:	4908      	ldr	r1, [pc, #32]	; (80a1cdc <_Z17switch_pumpe_funkii.part.0+0x34>)
 80a1cba:	4809      	ldr	r0, [pc, #36]	; (80a1ce0 <_Z17switch_pumpe_funkii.part.0+0x38>)
        st_funk_pumpe = ON;
 80a1cbc:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 EINGESCHALTET ");
 80a1cbe:	f7fe fa1d 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        tnow = getTime();
 80a1cc2:	f7fe fe67 	bl	80a0994 <_Z7getTimev>
 80a1cc6:	4b07      	ldr	r3, [pc, #28]	; (80a1ce4 <_Z17switch_pumpe_funkii.part.0+0x3c>)
 80a1cc8:	6018      	str	r0, [r3, #0]
        tfunk_stop = tsec + laufzeit;
 80a1cca:	4b07      	ldr	r3, [pc, #28]	; (80a1ce8 <_Z17switch_pumpe_funkii.part.0+0x40>)
 80a1ccc:	681b      	ldr	r3, [r3, #0]
 80a1cce:	441c      	add	r4, r3
 80a1cd0:	4b06      	ldr	r3, [pc, #24]	; (80a1cec <_Z17switch_pumpe_funkii.part.0+0x44>)
 80a1cd2:	601c      	str	r4, [r3, #0]
        st_funk_pumpe = OFF;
        tfunk_stop = 4000;
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
    }
    return (newState);
}
 80a1cd4:	bd10      	pop	{r4, pc}
 80a1cd6:	bf00      	nop
 80a1cd8:	200002d0 	.word	0x200002d0
 80a1cdc:	080a634c 	.word	0x080a634c
 80a1ce0:	080a5bef 	.word	0x080a5bef
 80a1ce4:	20000328 	.word	0x20000328
 80a1ce8:	20000330 	.word	0x20000330
 80a1cec:	200002ec 	.word	0x200002ec

080a1cf0 <_Z17switch_pumpe_mainii>:
{
 80a1cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1cf2:	4604      	mov	r4, r0
 80a1cf4:	460d      	mov	r5, r1
    Serial.printlnf(" --------------------------------------------- ");
 80a1cf6:	f001 fcb5 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1cfa:	4946      	ldr	r1, [pc, #280]	; (80a1e14 <_Z17switch_pumpe_mainii+0x124>)
 80a1cfc:	f7fe f9d9 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(" MAIN Pumpe schalten : State : %d Laufzeit %d", new_state, laufzeit);
 80a1d00:	f001 fcb0 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1d04:	462b      	mov	r3, r5
 80a1d06:	4622      	mov	r2, r4
 80a1d08:	4943      	ldr	r1, [pc, #268]	; (80a1e18 <_Z17switch_pumpe_mainii+0x128>)
 80a1d0a:	f7fe f9d2 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a1d0e:	2101      	movs	r1, #1
 80a1d10:	4608      	mov	r0, r1
 80a1d12:	f001 feff 	bl	80a3b14 <pinMode>
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1d16:	2001      	movs	r0, #1
 80a1d18:	f001 ff26 	bl	80a3b68 <digitalRead>
 80a1d1c:	4f3f      	ldr	r7, [pc, #252]	; (80a1e1c <_Z17switch_pumpe_mainii+0x12c>)
    if ((new_state == ON) & (st_main_pumpe == OFF))
 80a1d1e:	2c01      	cmp	r4, #1
 80a1d20:	463e      	mov	r6, r7
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1d22:	6038      	str	r0, [r7, #0]
    if ((new_state == ON) & (st_main_pumpe == OFF))
 80a1d24:	d14c      	bne.n	80a1dc0 <_Z17switch_pumpe_mainii+0xd0>
 80a1d26:	2800      	cmp	r0, #0
 80a1d28:	d14a      	bne.n	80a1dc0 <_Z17switch_pumpe_mainii+0xd0>
        WriteToDatabase("WASSER", "BLUMEN GIESSEN BEGINNT  ");
 80a1d2a:	493d      	ldr	r1, [pc, #244]	; (80a1e20 <_Z17switch_pumpe_mainii+0x130>)
 80a1d2c:	483d      	ldr	r0, [pc, #244]	; (80a1e24 <_Z17switch_pumpe_mainii+0x134>)
 80a1d2e:	f7fe f9e5 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        old_level = ultra_sonic_measure();
 80a1d32:	f7fe fc9d 	bl	80a0670 <_Z19ultra_sonic_measurev>
 80a1d36:	4c3c      	ldr	r4, [pc, #240]	; (80a1e28 <_Z17switch_pumpe_mainii+0x138>)
 80a1d38:	4602      	mov	r2, r0
 80a1d3a:	6020      	str	r0, [r4, #0]
        WriteToDatabase("WASSER", "WASSERSTAND before pumpe ON : ", old_level);
 80a1d3c:	493b      	ldr	r1, [pc, #236]	; (80a1e2c <_Z17switch_pumpe_mainii+0x13c>)
 80a1d3e:	4839      	ldr	r0, [pc, #228]	; (80a1e24 <_Z17switch_pumpe_mainii+0x134>)
 80a1d40:	f7fe fa28 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
        if (old_level < TROCKENLAUF_SCHUTZ_LEVEL)
 80a1d44:	6823      	ldr	r3, [r4, #0]
 80a1d46:	2b3b      	cmp	r3, #59	; 0x3b
 80a1d48:	dc05      	bgt.n	80a1d56 <_Z17switch_pumpe_mainii+0x66>
            WriteToDatabase("WASSER", "WASSERSTAND TROCKEN-LAUF-SCHUTZ. PUMPE NICHT EINSCHALTEN");
 80a1d4a:	4836      	ldr	r0, [pc, #216]	; (80a1e24 <_Z17switch_pumpe_mainii+0x134>)
 80a1d4c:	4938      	ldr	r1, [pc, #224]	; (80a1e30 <_Z17switch_pumpe_mainii+0x140>)
 80a1d4e:	f7fe f9d5 	bl	80a00fc <_Z15WriteToDatabasePcS_>
            return (st_main_pumpe);
 80a1d52:	6838      	ldr	r0, [r7, #0]
}
 80a1d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tnow = getTime();
 80a1d56:	f7fe fe1d 	bl	80a0994 <_Z7getTimev>
 80a1d5a:	4b36      	ldr	r3, [pc, #216]	; (80a1e34 <_Z17switch_pumpe_mainii+0x144>)
 80a1d5c:	6018      	str	r0, [r3, #0]
        tmain_stop = tsec + laufzeit;
 80a1d5e:	4b36      	ldr	r3, [pc, #216]	; (80a1e38 <_Z17switch_pumpe_mainii+0x148>)
 80a1d60:	6819      	ldr	r1, [r3, #0]
 80a1d62:	4b36      	ldr	r3, [pc, #216]	; (80a1e3c <_Z17switch_pumpe_mainii+0x14c>)
 80a1d64:	440d      	add	r5, r1
        digitalWrite(DO_PUMPE_MAIN, 1);
 80a1d66:	2101      	movs	r1, #1
 80a1d68:	4608      	mov	r0, r1
        tmain_stop = tsec + laufzeit;
 80a1d6a:	601d      	str	r5, [r3, #0]
        digitalWrite(DO_PUMPE_MAIN, 1);
 80a1d6c:	f001 fee3 	bl	80a3b36 <digitalWrite>
        WriteToDatabase("WASSER", "HAUPT-PUMPE EINGESCHALTET : ", main_countDown);
 80a1d70:	4b33      	ldr	r3, [pc, #204]	; (80a1e40 <_Z17switch_pumpe_mainii+0x150>)
 80a1d72:	4934      	ldr	r1, [pc, #208]	; (80a1e44 <_Z17switch_pumpe_mainii+0x154>)
 80a1d74:	681a      	ldr	r2, [r3, #0]
 80a1d76:	482b      	ldr	r0, [pc, #172]	; (80a1e24 <_Z17switch_pumpe_mainii+0x134>)
 80a1d78:	f7fe fa0c 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
    delay(250);
 80a1d7c:	20fa      	movs	r0, #250	; 0xfa
 80a1d7e:	f001 f83d 	bl	80a2dfc <delay>
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1d82:	2001      	movs	r0, #1
 80a1d84:	f001 fef0 	bl	80a3b68 <digitalRead>
    Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a1d88:	4c2f      	ldr	r4, [pc, #188]	; (80a1e48 <_Z17switch_pumpe_mainii+0x158>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1d8a:	6030      	str	r0, [r6, #0]
    Serial.printlnf(" DoPumpeMain    : %d ", st_main_pumpe);
 80a1d8c:	f001 fc6a 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1d90:	6832      	ldr	r2, [r6, #0]
 80a1d92:	492e      	ldr	r1, [pc, #184]	; (80a1e4c <_Z17switch_pumpe_mainii+0x15c>)
 80a1d94:	f7fe f98d 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    readAdcChannels();
 80a1d98:	f7fe fe24 	bl	80a09e4 <_Z15readAdcChannelsv>
    Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a1d9c:	f001 fc62 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1da0:	6822      	ldr	r2, [r4, #0]
 80a1da2:	492b      	ldr	r1, [pc, #172]	; (80a1e50 <_Z17switch_pumpe_mainii+0x160>)
 80a1da4:	f7fe f985 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeMain [mV] : ", AiPumpeMain);
 80a1da8:	6822      	ldr	r2, [r4, #0]
 80a1daa:	492a      	ldr	r1, [pc, #168]	; (80a1e54 <_Z17switch_pumpe_mainii+0x164>)
 80a1dac:	482a      	ldr	r0, [pc, #168]	; (80a1e58 <_Z17switch_pumpe_mainii+0x168>)
 80a1dae:	f7fe f9f1 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
    Serial.printlnf(" --------------------------------------------- ");
 80a1db2:	f001 fc57 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1db6:	4917      	ldr	r1, [pc, #92]	; (80a1e14 <_Z17switch_pumpe_mainii+0x124>)
 80a1db8:	f7fe f97b 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    return (st_main_pumpe);
 80a1dbc:	6830      	ldr	r0, [r6, #0]
 80a1dbe:	e7c9      	b.n	80a1d54 <_Z17switch_pumpe_mainii+0x64>
    if ((new_state == OFF) & (st_main_pumpe == ON))
 80a1dc0:	2c00      	cmp	r4, #0
 80a1dc2:	d1db      	bne.n	80a1d7c <_Z17switch_pumpe_mainii+0x8c>
 80a1dc4:	2801      	cmp	r0, #1
 80a1dc6:	d1d9      	bne.n	80a1d7c <_Z17switch_pumpe_mainii+0x8c>
        digitalWrite(DO_PUMPE_MAIN, 0);
 80a1dc8:	2100      	movs	r1, #0
 80a1dca:	f001 feb4 	bl	80a3b36 <digitalWrite>
        main_countDown = 0;
 80a1dce:	2200      	movs	r2, #0
 80a1dd0:	4b1b      	ldr	r3, [pc, #108]	; (80a1e40 <_Z17switch_pumpe_mainii+0x150>)
        WriteToDatabase("WASSER", "HAUPT-PUMPE AUSGESCHALTET ");
 80a1dd2:	4922      	ldr	r1, [pc, #136]	; (80a1e5c <_Z17switch_pumpe_mainii+0x16c>)
 80a1dd4:	4813      	ldr	r0, [pc, #76]	; (80a1e24 <_Z17switch_pumpe_mainii+0x134>)
        main_countDown = 0;
 80a1dd6:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "HAUPT-PUMPE AUSGESCHALTET ");
 80a1dd8:	f7fe f990 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        new_level = ultra_sonic_measure();
 80a1ddc:	f7fe fc48 	bl	80a0670 <_Z19ultra_sonic_measurev>
 80a1de0:	4c1f      	ldr	r4, [pc, #124]	; (80a1e60 <_Z17switch_pumpe_mainii+0x170>)
        WriteToDatabase("WASSER", "WASSERSTAND gefallen um [mm] : ", old_level - new_level);
 80a1de2:	4d11      	ldr	r5, [pc, #68]	; (80a1e28 <_Z17switch_pumpe_mainii+0x138>)
        new_level = ultra_sonic_measure();
 80a1de4:	4602      	mov	r2, r0
        WriteToDatabase("WASSER", "WASSERSTAND after pumpe OFF : ", new_level);
 80a1de6:	491f      	ldr	r1, [pc, #124]	; (80a1e64 <_Z17switch_pumpe_mainii+0x174>)
        new_level = ultra_sonic_measure();
 80a1de8:	6020      	str	r0, [r4, #0]
        WriteToDatabase("WASSER", "WASSERSTAND after pumpe OFF : ", new_level);
 80a1dea:	480e      	ldr	r0, [pc, #56]	; (80a1e24 <_Z17switch_pumpe_mainii+0x134>)
 80a1dec:	f7fe f9d2 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
        WriteToDatabase("WASSER", "WASSERSTAND gefallen um [mm] : ", old_level - new_level);
 80a1df0:	6823      	ldr	r3, [r4, #0]
 80a1df2:	682a      	ldr	r2, [r5, #0]
 80a1df4:	491c      	ldr	r1, [pc, #112]	; (80a1e68 <_Z17switch_pumpe_mainii+0x178>)
 80a1df6:	1ad2      	subs	r2, r2, r3
 80a1df8:	480a      	ldr	r0, [pc, #40]	; (80a1e24 <_Z17switch_pumpe_mainii+0x134>)
 80a1dfa:	f7fe f9cb 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
        if ((old_level - new_level) > 3)
 80a1dfe:	682b      	ldr	r3, [r5, #0]
 80a1e00:	6822      	ldr	r2, [r4, #0]
 80a1e02:	1a9b      	subs	r3, r3, r2
 80a1e04:	2b03      	cmp	r3, #3
 80a1e06:	ddb9      	ble.n	80a1d7c <_Z17switch_pumpe_mainii+0x8c>
            WriteToDatabase("WASSER", "WASSERSTAND BLUMEN GIESSEN ERFOLGREICH BEENDET");
 80a1e08:	4918      	ldr	r1, [pc, #96]	; (80a1e6c <_Z17switch_pumpe_mainii+0x17c>)
 80a1e0a:	4806      	ldr	r0, [pc, #24]	; (80a1e24 <_Z17switch_pumpe_mainii+0x134>)
 80a1e0c:	f7fe f976 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a1e10:	e7b4      	b.n	80a1d7c <_Z17switch_pumpe_mainii+0x8c>
 80a1e12:	bf00      	nop
 80a1e14:	080a636b 	.word	0x080a636b
 80a1e18:	080a639b 	.word	0x080a639b
 80a1e1c:	200002d4 	.word	0x200002d4
 80a1e20:	080a63c9 	.word	0x080a63c9
 80a1e24:	080a5bef 	.word	0x080a5bef
 80a1e28:	200002c8 	.word	0x200002c8
 80a1e2c:	080a63e2 	.word	0x080a63e2
 80a1e30:	080a6401 	.word	0x080a6401
 80a1e34:	20000328 	.word	0x20000328
 80a1e38:	20000330 	.word	0x20000330
 80a1e3c:	20000324 	.word	0x20000324
 80a1e40:	200002c0 	.word	0x200002c0
 80a1e44:	080a643a 	.word	0x080a643a
 80a1e48:	2000017c 	.word	0x2000017c
 80a1e4c:	080a64e0 	.word	0x080a64e0
 80a1e50:	080a5f13 	.word	0x080a5f13
 80a1e54:	080a64f6 	.word	0x080a64f6
 80a1e58:	080a5f44 	.word	0x080a5f44
 80a1e5c:	080a6457 	.word	0x080a6457
 80a1e60:	200002c4 	.word	0x200002c4
 80a1e64:	080a6472 	.word	0x080a6472
 80a1e68:	080a6491 	.word	0x080a6491
 80a1e6c:	080a64b1 	.word	0x080a64b1

080a1e70 <_Z20switch_pumpe_reserveii>:
{
 80a1e70:	b570      	push	{r4, r5, r6, lr}
 80a1e72:	4605      	mov	r5, r0
 80a1e74:	460e      	mov	r6, r1
    Serial.printlnf(" --------------------------------------------- ");
 80a1e76:	f001 fbf5 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1e7a:	493b      	ldr	r1, [pc, #236]	; (80a1f68 <_Z20switch_pumpe_reserveii+0xf8>)
 80a1e7c:	f7fe f919 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(" RESERVE Pumpe schalten : State : %d Laufzeit %d", new_state, laufzeit);
 80a1e80:	f001 fbf0 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1e84:	4633      	mov	r3, r6
 80a1e86:	462a      	mov	r2, r5
 80a1e88:	4938      	ldr	r1, [pc, #224]	; (80a1f6c <_Z20switch_pumpe_reserveii+0xfc>)
 80a1e8a:	f7fe f912 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a1e8e:	2101      	movs	r1, #1
 80a1e90:	2002      	movs	r0, #2
 80a1e92:	f001 fe3f 	bl	80a3b14 <pinMode>
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1e96:	2002      	movs	r0, #2
 80a1e98:	f001 fe66 	bl	80a3b68 <digitalRead>
 80a1e9c:	4c34      	ldr	r4, [pc, #208]	; (80a1f70 <_Z20switch_pumpe_reserveii+0x100>)
    if ((new_state == ON) & (st_reserve_pumpe == OFF))
 80a1e9e:	2d01      	cmp	r5, #1
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1ea0:	6020      	str	r0, [r4, #0]
    if ((new_state == ON) & (st_reserve_pumpe == OFF))
 80a1ea2:	d13d      	bne.n	80a1f20 <_Z20switch_pumpe_reserveii+0xb0>
 80a1ea4:	2800      	cmp	r0, #0
 80a1ea6:	d13b      	bne.n	80a1f20 <_Z20switch_pumpe_reserveii+0xb0>
        old_level = ultra_sonic_measure();
 80a1ea8:	f7fe fbe2 	bl	80a0670 <_Z19ultra_sonic_measurev>
 80a1eac:	4b31      	ldr	r3, [pc, #196]	; (80a1f74 <_Z20switch_pumpe_reserveii+0x104>)
 80a1eae:	4602      	mov	r2, r0
 80a1eb0:	6018      	str	r0, [r3, #0]
        WriteToDatabase("WASSER", "WASSERSTAND before res-pumpe ON : ", old_level);
 80a1eb2:	4931      	ldr	r1, [pc, #196]	; (80a1f78 <_Z20switch_pumpe_reserveii+0x108>)
 80a1eb4:	4831      	ldr	r0, [pc, #196]	; (80a1f7c <_Z20switch_pumpe_reserveii+0x10c>)
 80a1eb6:	f7fe f96d 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
        digitalWrite(DO_PUMPE_RESERVE, 1);
 80a1eba:	2101      	movs	r1, #1
 80a1ebc:	2002      	movs	r0, #2
 80a1ebe:	f001 fe3a 	bl	80a3b36 <digitalWrite>
        WriteToDatabase("WASSER", "RESERVE-PUMPE EINGESCHALTET ");
 80a1ec2:	492f      	ldr	r1, [pc, #188]	; (80a1f80 <_Z20switch_pumpe_reserveii+0x110>)
 80a1ec4:	482d      	ldr	r0, [pc, #180]	; (80a1f7c <_Z20switch_pumpe_reserveii+0x10c>)
 80a1ec6:	f7fe f919 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        tnow = getTime();
 80a1eca:	f7fe fd63 	bl	80a0994 <_Z7getTimev>
 80a1ece:	4b2d      	ldr	r3, [pc, #180]	; (80a1f84 <_Z20switch_pumpe_reserveii+0x114>)
 80a1ed0:	6018      	str	r0, [r3, #0]
        tres_stop = tsec + laufzeit;
 80a1ed2:	4b2d      	ldr	r3, [pc, #180]	; (80a1f88 <_Z20switch_pumpe_reserveii+0x118>)
 80a1ed4:	6819      	ldr	r1, [r3, #0]
 80a1ed6:	4b2d      	ldr	r3, [pc, #180]	; (80a1f8c <_Z20switch_pumpe_reserveii+0x11c>)
 80a1ed8:	440e      	add	r6, r1
 80a1eda:	601e      	str	r6, [r3, #0]
    delay(250);
 80a1edc:	20fa      	movs	r0, #250	; 0xfa
 80a1ede:	f000 ff8d 	bl	80a2dfc <delay>
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1ee2:	2002      	movs	r0, #2
 80a1ee4:	f001 fe40 	bl	80a3b68 <digitalRead>
    Serial.printlnf(" AiPumpeReserve    : %d [mV]", AiPumpeReserve);
 80a1ee8:	4d29      	ldr	r5, [pc, #164]	; (80a1f90 <_Z20switch_pumpe_reserveii+0x120>)
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1eea:	6020      	str	r0, [r4, #0]
    Serial.printlnf(" DoPumpeReserve    : %d ", st_reserve_pumpe);
 80a1eec:	f001 fbba 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1ef0:	6822      	ldr	r2, [r4, #0]
 80a1ef2:	4928      	ldr	r1, [pc, #160]	; (80a1f94 <_Z20switch_pumpe_reserveii+0x124>)
 80a1ef4:	f7fe f8dd 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    readAdcChannels();
 80a1ef8:	f7fe fd74 	bl	80a09e4 <_Z15readAdcChannelsv>
    Serial.printlnf(" AiPumpeReserve    : %d [mV]", AiPumpeReserve);
 80a1efc:	f001 fbb2 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1f00:	682a      	ldr	r2, [r5, #0]
 80a1f02:	4925      	ldr	r1, [pc, #148]	; (80a1f98 <_Z20switch_pumpe_reserveii+0x128>)
 80a1f04:	f7fe f8d5 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeReserve [mV] : ", AiPumpeReserve);
 80a1f08:	682a      	ldr	r2, [r5, #0]
 80a1f0a:	4924      	ldr	r1, [pc, #144]	; (80a1f9c <_Z20switch_pumpe_reserveii+0x12c>)
 80a1f0c:	4824      	ldr	r0, [pc, #144]	; (80a1fa0 <_Z20switch_pumpe_reserveii+0x130>)
 80a1f0e:	f7fe f941 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
    Serial.printlnf(" --------------------------------------------- ");
 80a1f12:	f001 fba7 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a1f16:	4914      	ldr	r1, [pc, #80]	; (80a1f68 <_Z20switch_pumpe_reserveii+0xf8>)
 80a1f18:	f7fe f8cb 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
}
 80a1f1c:	6820      	ldr	r0, [r4, #0]
 80a1f1e:	bd70      	pop	{r4, r5, r6, pc}
    if ((new_state == OFF) & (st_reserve_pumpe == ON))
 80a1f20:	2d00      	cmp	r5, #0
 80a1f22:	d1db      	bne.n	80a1edc <_Z20switch_pumpe_reserveii+0x6c>
 80a1f24:	2801      	cmp	r0, #1
 80a1f26:	d1d9      	bne.n	80a1edc <_Z20switch_pumpe_reserveii+0x6c>
        digitalWrite(DO_PUMPE_RESERVE, 0);
 80a1f28:	2100      	movs	r1, #0
 80a1f2a:	2002      	movs	r0, #2
 80a1f2c:	f001 fe03 	bl	80a3b36 <digitalWrite>
        WriteToDatabase("WASSER", "RESERVE-PUMPE AUSGESCHALTET. FUELLUNG NR. ",control.reserve_repetitions);
 80a1f30:	4b1c      	ldr	r3, [pc, #112]	; (80a1fa4 <_Z20switch_pumpe_reserveii+0x134>)
 80a1f32:	491d      	ldr	r1, [pc, #116]	; (80a1fa8 <_Z20switch_pumpe_reserveii+0x138>)
 80a1f34:	691a      	ldr	r2, [r3, #16]
 80a1f36:	4811      	ldr	r0, [pc, #68]	; (80a1f7c <_Z20switch_pumpe_reserveii+0x10c>)
 80a1f38:	f7fe f92c 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
        new_level = ultra_sonic_measure();
 80a1f3c:	f7fe fb98 	bl	80a0670 <_Z19ultra_sonic_measurev>
 80a1f40:	4d1a      	ldr	r5, [pc, #104]	; (80a1fac <_Z20switch_pumpe_reserveii+0x13c>)
        WriteToDatabase("WASSER", "WASSERSTAND after res-pumpe OFF : ", new_level);
 80a1f42:	491b      	ldr	r1, [pc, #108]	; (80a1fb0 <_Z20switch_pumpe_reserveii+0x140>)
        new_level = ultra_sonic_measure();
 80a1f44:	4602      	mov	r2, r0
 80a1f46:	6028      	str	r0, [r5, #0]
        WriteToDatabase("WASSER", "WASSERSTAND after res-pumpe OFF : ", new_level);
 80a1f48:	480c      	ldr	r0, [pc, #48]	; (80a1f7c <_Z20switch_pumpe_reserveii+0x10c>)
 80a1f4a:	f7fe f923 	bl	80a0194 <_Z15WriteToDatabasePcS_i>
        if ((new_level - old_level) > 5)
 80a1f4e:	4a09      	ldr	r2, [pc, #36]	; (80a1f74 <_Z20switch_pumpe_reserveii+0x104>)
 80a1f50:	682b      	ldr	r3, [r5, #0]
 80a1f52:	6812      	ldr	r2, [r2, #0]
            WriteToDatabase("WASSER", " WASSERSTAND ERROR: TANK FUELLEN fehlgeschlagen");
 80a1f54:	4809      	ldr	r0, [pc, #36]	; (80a1f7c <_Z20switch_pumpe_reserveii+0x10c>)
        if ((new_level - old_level) > 5)
 80a1f56:	1a9b      	subs	r3, r3, r2
 80a1f58:	2b05      	cmp	r3, #5
            WriteToDatabase("WASSER", " WASSERSTAND TANK FUELLEN ERFOLGREICH BEENDET");
 80a1f5a:	bfcc      	ite	gt
 80a1f5c:	4915      	ldrgt	r1, [pc, #84]	; (80a1fb4 <_Z20switch_pumpe_reserveii+0x144>)
            WriteToDatabase("WASSER", " WASSERSTAND ERROR: TANK FUELLEN fehlgeschlagen");
 80a1f5e:	4916      	ldrle	r1, [pc, #88]	; (80a1fb8 <_Z20switch_pumpe_reserveii+0x148>)
 80a1f60:	f7fe f8cc 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a1f64:	e7ba      	b.n	80a1edc <_Z20switch_pumpe_reserveii+0x6c>
 80a1f66:	bf00      	nop
 80a1f68:	080a636b 	.word	0x080a636b
 80a1f6c:	080a650a 	.word	0x080a650a
 80a1f70:	200002d8 	.word	0x200002d8
 80a1f74:	200002c8 	.word	0x200002c8
 80a1f78:	080a653b 	.word	0x080a653b
 80a1f7c:	080a5bef 	.word	0x080a5bef
 80a1f80:	080a655e 	.word	0x080a655e
 80a1f84:	20000328 	.word	0x20000328
 80a1f88:	20000330 	.word	0x20000330
 80a1f8c:	2000032c 	.word	0x2000032c
 80a1f90:	20000180 	.word	0x20000180
 80a1f94:	080a6627 	.word	0x080a6627
 80a1f98:	080a6640 	.word	0x080a6640
 80a1f9c:	080a5f62 	.word	0x080a5f62
 80a1fa0:	080a5f44 	.word	0x080a5f44
 80a1fa4:	20000290 	.word	0x20000290
 80a1fa8:	080a657b 	.word	0x080a657b
 80a1fac:	200002c4 	.word	0x200002c4
 80a1fb0:	080a65a6 	.word	0x080a65a6
 80a1fb4:	080a65c9 	.word	0x080a65c9
 80a1fb8:	080a65f7 	.word	0x080a65f7

080a1fbc <_Z17switch_pumpe_funkii>:
{
 80a1fbc:	b510      	push	{r4, lr}
 80a1fbe:	4604      	mov	r4, r0
    if (newState == ON)
 80a1fc0:	2c01      	cmp	r4, #1
{
 80a1fc2:	4608      	mov	r0, r1
    if (newState == ON)
 80a1fc4:	d103      	bne.n	80a1fce <_Z17switch_pumpe_funkii+0x12>
 80a1fc6:	f7ff fe6f 	bl	80a1ca8 <_Z17switch_pumpe_funkii.part.0>
}
 80a1fca:	4620      	mov	r0, r4
 80a1fcc:	bd10      	pop	{r4, pc}
        conrad_rsl_switch_code(RSL2, AUS); // Dosen-Label RSL2
 80a1fce:	2100      	movs	r1, #0
 80a1fd0:	2002      	movs	r0, #2
 80a1fd2:	f7ff fe27 	bl	80a1c24 <_Z22conrad_rsl_switch_codeii>
        st_funk_pumpe = OFF;
 80a1fd6:	2200      	movs	r2, #0
 80a1fd8:	4b05      	ldr	r3, [pc, #20]	; (80a1ff0 <_Z17switch_pumpe_funkii+0x34>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
 80a1fda:	4906      	ldr	r1, [pc, #24]	; (80a1ff4 <_Z17switch_pumpe_funkii+0x38>)
        st_funk_pumpe = OFF;
 80a1fdc:	601a      	str	r2, [r3, #0]
        tfunk_stop = 4000;
 80a1fde:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80a1fe2:	4b05      	ldr	r3, [pc, #20]	; (80a1ff8 <_Z17switch_pumpe_funkii+0x3c>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
 80a1fe4:	4805      	ldr	r0, [pc, #20]	; (80a1ffc <_Z17switch_pumpe_funkii+0x40>)
        tfunk_stop = 4000;
 80a1fe6:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
 80a1fe8:	f7fe f888 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a1fec:	e7ed      	b.n	80a1fca <_Z17switch_pumpe_funkii+0xe>
 80a1fee:	bf00      	nop
 80a1ff0:	200002d0 	.word	0x200002d0
 80a1ff4:	080a665d 	.word	0x080a665d
 80a1ff8:	200002ec 	.word	0x200002ec
 80a1ffc:	080a5bef 	.word	0x080a5bef

080a2000 <_Z13BlumenGiessenii>:
now = 1 : jetzt sofort Giessen
now = 0 : giesse wenn tnow = ts zur geplanten Zeit
done_giessen muß 0 sein
---------------------------------------------------------------------*/
void BlumenGiessen(int now, int ts)
{
 80a2000:	b538      	push	{r3, r4, r5, lr}
    int day = 0;

    if (done_giessen == 1) return;
 80a2002:	4c18      	ldr	r4, [pc, #96]	; (80a2064 <_Z13BlumenGiessenii+0x64>)
 80a2004:	6823      	ldr	r3, [r4, #0]
 80a2006:	2b01      	cmp	r3, #1
 80a2008:	d00e      	beq.n	80a2028 <_Z13BlumenGiessenii+0x28>
    
    if (tnow == ts || now == 1)
 80a200a:	4b17      	ldr	r3, [pc, #92]	; (80a2068 <_Z13BlumenGiessenii+0x68>)
 80a200c:	681b      	ldr	r3, [r3, #0]
 80a200e:	428b      	cmp	r3, r1
 80a2010:	d001      	beq.n	80a2016 <_Z13BlumenGiessenii+0x16>
 80a2012:	2801      	cmp	r0, #1
 80a2014:	d108      	bne.n	80a2028 <_Z13BlumenGiessenii+0x28>
    {
        if (control.dontGiessen == 1)
 80a2016:	4b15      	ldr	r3, [pc, #84]	; (80a206c <_Z13BlumenGiessenii+0x6c>)
 80a2018:	689d      	ldr	r5, [r3, #8]
 80a201a:	2d01      	cmp	r5, #1
 80a201c:	d105      	bne.n	80a202a <_Z13BlumenGiessenii+0x2a>
        {
            WriteToDatabase("WASSER", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a201e:	4914      	ldr	r1, [pc, #80]	; (80a2070 <_Z13BlumenGiessenii+0x70>)
 80a2020:	4814      	ldr	r0, [pc, #80]	; (80a2074 <_Z13BlumenGiessenii+0x74>)
 80a2022:	f7fe f86b 	bl	80a00fc <_Z15WriteToDatabasePcS_>
            done_giessen = 1;
 80a2026:	6025      	str	r5, [r4, #0]
            delay(1000);
            st_funk_pumpe = switch_pumpe_funk(ON, FUNK_PUMPE_LAUFZEIT);
        }
        done_giessen = 1;
    }
}
 80a2028:	bd38      	pop	{r3, r4, r5, pc}
        st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a202a:	68d9      	ldr	r1, [r3, #12]
 80a202c:	2001      	movs	r0, #1
 80a202e:	f7ff fe5f 	bl	80a1cf0 <_Z17switch_pumpe_mainii>
 80a2032:	4b11      	ldr	r3, [pc, #68]	; (80a2078 <_Z13BlumenGiessenii+0x78>)
 80a2034:	6018      	str	r0, [r3, #0]
        day = Time.weekday(); // North American implementation : Sunday is day number one, Monday is day numer two
 80a2036:	f000 febb 	bl	80a2db0 <_ZN9TimeClass7weekdayEv>
        if (day < 6) // Funk Pumpe einschalten Sunday to Thursday 
 80a203a:	2805      	cmp	r0, #5
 80a203c:	dc0e      	bgt.n	80a205c <_Z13BlumenGiessenii+0x5c>
            st_funk_pumpe = switch_pumpe_funk(OFF,0);
 80a203e:	2100      	movs	r1, #0
 80a2040:	4608      	mov	r0, r1
 80a2042:	f7ff ffbb 	bl	80a1fbc <_Z17switch_pumpe_funkii>
 80a2046:	4d0d      	ldr	r5, [pc, #52]	; (80a207c <_Z13BlumenGiessenii+0x7c>)
 80a2048:	6028      	str	r0, [r5, #0]
            delay(1000);
 80a204a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a204e:	f000 fed5 	bl	80a2dfc <delay>
    if (newState == ON)
 80a2052:	200c      	movs	r0, #12
 80a2054:	f7ff fe28 	bl	80a1ca8 <_Z17switch_pumpe_funkii.part.0>
            st_funk_pumpe = switch_pumpe_funk(ON, FUNK_PUMPE_LAUFZEIT);
 80a2058:	2301      	movs	r3, #1
 80a205a:	602b      	str	r3, [r5, #0]
        done_giessen = 1;
 80a205c:	2301      	movs	r3, #1
 80a205e:	6023      	str	r3, [r4, #0]
 80a2060:	e7e2      	b.n	80a2028 <_Z13BlumenGiessenii+0x28>
 80a2062:	bf00      	nop
 80a2064:	200002a4 	.word	0x200002a4
 80a2068:	20000328 	.word	0x20000328
 80a206c:	20000290 	.word	0x20000290
 80a2070:	080a60e5 	.word	0x080a60e5
 80a2074:	080a5bef 	.word	0x080a5bef
 80a2078:	200002d4 	.word	0x200002d4
 80a207c:	200002d0 	.word	0x200002d0

080a2080 <_Z11TankFuelleni>:
/*---------------------------------------------------------------------
Tank fuellen -> schalte reserve pumpe ein wenn der Wasserstand 
kleiner als der critical level ist
---------------------------------------------------------------------*/
void TankFuellen(int critical_level)
{
 80a2080:	b510      	push	{r4, lr}
 80a2082:	4604      	mov	r4, r0
    println(" Tankfuellen() ");
 80a2084:	4819      	ldr	r0, [pc, #100]	; (80a20ec <_Z11TankFuelleni+0x6c>)
 80a2086:	f7fe fd7b 	bl	80a0b80 <_Z7printlnPc>

    waterlevel = ultra_sonic_measure();
 80a208a:	f7fe faf1 	bl	80a0670 <_Z19ultra_sonic_measurev>
 80a208e:	4b18      	ldr	r3, [pc, #96]	; (80a20f0 <_Z11TankFuelleni+0x70>)

    if (waterlevel > critical_level)
 80a2090:	42a0      	cmp	r0, r4
    waterlevel = ultra_sonic_measure();
 80a2092:	6018      	str	r0, [r3, #0]
    if (waterlevel > critical_level)
 80a2094:	dd05      	ble.n	80a20a2 <_Z11TankFuelleni+0x22>
    {
            WriteToDatabase("WASSER", " TANKFUELLEN : NICHT NOTWENDIG ");
 80a2096:	4917      	ldr	r1, [pc, #92]	; (80a20f4 <_Z11TankFuelleni+0x74>)
    if ((waterlevel > 0) & (waterlevel < critical_level) & (st_reserve_pumpe == OFF))
    {

        if (control.dontGiessen == 1)
        {
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a2098:	4817      	ldr	r0, [pc, #92]	; (80a20f8 <_Z11TankFuelleni+0x78>)
        }

        WriteToDatabase("WASSER", "WASSERSTAND TANK FUELLEN gestartet ");
        st_reserve_pumpe = switch_pumpe_reserve(1, RESERVE_PUMPE_LAUFZEIT);
    }
}
 80a209a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a209e:	f7fe b82d 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
    if(control.reserve_repetitions > MAX_NACHFUELL_REPETITIONS)
 80a20a2:	4b16      	ldr	r3, [pc, #88]	; (80a20fc <_Z11TankFuelleni+0x7c>)
 80a20a4:	691a      	ldr	r2, [r3, #16]
 80a20a6:	2a05      	cmp	r2, #5
 80a20a8:	d905      	bls.n	80a20b6 <_Z11TankFuelleni+0x36>
}
 80a20aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WriteToDatabase("WASSER", "ERROR - ABORT: Wiederholungen des Tankfuellens ueberschritten = ",control.reserve_repetitions);    
 80a20ae:	4914      	ldr	r1, [pc, #80]	; (80a2100 <_Z11TankFuelleni+0x80>)
 80a20b0:	4811      	ldr	r0, [pc, #68]	; (80a20f8 <_Z11TankFuelleni+0x78>)
 80a20b2:	f7fe b86f 	b.w	80a0194 <_Z15WriteToDatabasePcS_i>
    if ((waterlevel > 0) & (waterlevel < critical_level) & (st_reserve_pumpe == OFF))
 80a20b6:	2800      	cmp	r0, #0
 80a20b8:	bfd4      	ite	le
 80a20ba:	2200      	movle	r2, #0
 80a20bc:	2201      	movgt	r2, #1
 80a20be:	42a0      	cmp	r0, r4
 80a20c0:	bfa8      	it	ge
 80a20c2:	2200      	movge	r2, #0
 80a20c4:	b182      	cbz	r2, 80a20e8 <_Z11TankFuelleni+0x68>
 80a20c6:	4c0f      	ldr	r4, [pc, #60]	; (80a2104 <_Z11TankFuelleni+0x84>)
 80a20c8:	6822      	ldr	r2, [r4, #0]
 80a20ca:	b96a      	cbnz	r2, 80a20e8 <_Z11TankFuelleni+0x68>
        if (control.dontGiessen == 1)
 80a20cc:	689b      	ldr	r3, [r3, #8]
 80a20ce:	2b01      	cmp	r3, #1
 80a20d0:	d101      	bne.n	80a20d6 <_Z11TankFuelleni+0x56>
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a20d2:	490d      	ldr	r1, [pc, #52]	; (80a2108 <_Z11TankFuelleni+0x88>)
 80a20d4:	e7e0      	b.n	80a2098 <_Z11TankFuelleni+0x18>
        WriteToDatabase("WASSER", "WASSERSTAND TANK FUELLEN gestartet ");
 80a20d6:	490d      	ldr	r1, [pc, #52]	; (80a210c <_Z11TankFuelleni+0x8c>)
 80a20d8:	4807      	ldr	r0, [pc, #28]	; (80a20f8 <_Z11TankFuelleni+0x78>)
 80a20da:	f7fe f80f 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        st_reserve_pumpe = switch_pumpe_reserve(1, RESERVE_PUMPE_LAUFZEIT);
 80a20de:	215a      	movs	r1, #90	; 0x5a
 80a20e0:	2001      	movs	r0, #1
 80a20e2:	f7ff fec5 	bl	80a1e70 <_Z20switch_pumpe_reserveii>
 80a20e6:	6020      	str	r0, [r4, #0]
}
 80a20e8:	bd10      	pop	{r4, pc}
 80a20ea:	bf00      	nop
 80a20ec:	080a667c 	.word	0x080a667c
 80a20f0:	20000004 	.word	0x20000004
 80a20f4:	080a668c 	.word	0x080a668c
 80a20f8:	080a5bef 	.word	0x080a5bef
 80a20fc:	20000290 	.word	0x20000290
 80a2100:	080a66ac 	.word	0x080a66ac
 80a2104:	200002d8 	.word	0x200002d8
 80a2108:	080a66ed 	.word	0x080a66ed
 80a210c:	080a6727 	.word	0x080a6727

080a2110 <_Z9CountDownv>:
{
 80a2110:	b570      	push	{r4, r5, r6, lr}
    tnow = getTime();
 80a2112:	f7fe fc3f 	bl	80a0994 <_Z7getTimev>
 80a2116:	4b2a      	ldr	r3, [pc, #168]	; (80a21c0 <_Z9CountDownv+0xb0>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a2118:	4e2a      	ldr	r6, [pc, #168]	; (80a21c4 <_Z9CountDownv+0xb4>)
    tnow = getTime();
 80a211a:	6018      	str	r0, [r3, #0]
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a211c:	2001      	movs	r0, #1
 80a211e:	f001 fd23 	bl	80a3b68 <digitalRead>
    if (st_main_pumpe == ON)
 80a2122:	2801      	cmp	r0, #1
 80a2124:	4c28      	ldr	r4, [pc, #160]	; (80a21c8 <_Z9CountDownv+0xb8>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a2126:	6030      	str	r0, [r6, #0]
    if (st_main_pumpe == ON)
 80a2128:	d119      	bne.n	80a215e <_Z9CountDownv+0x4e>
        println("tmain stop", tmain_stop);
 80a212a:	4d28      	ldr	r5, [pc, #160]	; (80a21cc <_Z9CountDownv+0xbc>)
        println("tsec", tsec);
 80a212c:	6821      	ldr	r1, [r4, #0]
 80a212e:	4828      	ldr	r0, [pc, #160]	; (80a21d0 <_Z9CountDownv+0xc0>)
 80a2130:	f7fe fe32 	bl	80a0d98 <_Z7printlnPci>
        println("tmain stop", tmain_stop);
 80a2134:	6829      	ldr	r1, [r5, #0]
 80a2136:	4827      	ldr	r0, [pc, #156]	; (80a21d4 <_Z9CountDownv+0xc4>)
 80a2138:	f7fe fe2e 	bl	80a0d98 <_Z7printlnPci>
    if ((st_main_pumpe == ON) & (tsec > tmain_stop ))
 80a213c:	6822      	ldr	r2, [r4, #0]
 80a213e:	682b      	ldr	r3, [r5, #0]
 80a2140:	429a      	cmp	r2, r3
 80a2142:	dd0c      	ble.n	80a215e <_Z9CountDownv+0x4e>
 80a2144:	6833      	ldr	r3, [r6, #0]
 80a2146:	2b01      	cmp	r3, #1
 80a2148:	d109      	bne.n	80a215e <_Z9CountDownv+0x4e>
        switch_pumpe_main(OFF, 0);
 80a214a:	2100      	movs	r1, #0
        tmain_stop = 4000;
 80a214c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
        switch_pumpe_main(OFF, 0);
 80a2150:	4608      	mov	r0, r1
        tmain_stop = 4000;
 80a2152:	602b      	str	r3, [r5, #0]
        switch_pumpe_main(OFF, 0);
 80a2154:	f7ff fdcc 	bl	80a1cf0 <_Z17switch_pumpe_mainii>
        TankFuellen(LOW_LEVEL_TANKFUELLEN);
 80a2158:	205f      	movs	r0, #95	; 0x5f
 80a215a:	f7ff ff91 	bl	80a2080 <_Z11TankFuelleni>
     st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);   
 80a215e:	2002      	movs	r0, #2
 80a2160:	f001 fd02 	bl	80a3b68 <digitalRead>
 80a2164:	4b1c      	ldr	r3, [pc, #112]	; (80a21d8 <_Z9CountDownv+0xc8>)
    if ((st_reserve_pumpe == ON) & (tsec > tres_stop))
 80a2166:	6821      	ldr	r1, [r4, #0]
     st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);   
 80a2168:	6018      	str	r0, [r3, #0]
    if ((st_reserve_pumpe == ON) & (tsec > tres_stop))
 80a216a:	4b1c      	ldr	r3, [pc, #112]	; (80a21dc <_Z9CountDownv+0xcc>)
 80a216c:	681a      	ldr	r2, [r3, #0]
 80a216e:	4291      	cmp	r1, r2
 80a2170:	dd13      	ble.n	80a219a <_Z9CountDownv+0x8a>
 80a2172:	2801      	cmp	r0, #1
 80a2174:	d111      	bne.n	80a219a <_Z9CountDownv+0x8a>
        tres_stop = 4000;
 80a2176:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
        control.reserve_repetitions++;
 80a217a:	4d19      	ldr	r5, [pc, #100]	; (80a21e0 <_Z9CountDownv+0xd0>)
        tres_stop = 4000;
 80a217c:	601a      	str	r2, [r3, #0]
        control.reserve_repetitions++;
 80a217e:	692b      	ldr	r3, [r5, #16]
 80a2180:	3301      	adds	r3, #1
 80a2182:	612b      	str	r3, [r5, #16]
        EEPROM.put(0, control);            
 80a2184:	f001 fd1c 	bl	80a3bc0 <_Z21__fetch_global_EEPROMv>
 80a2188:	4629      	mov	r1, r5
 80a218a:	2000      	movs	r0, #0
 80a218c:	2214      	movs	r2, #20
 80a218e:	f000 f8a5 	bl	80a22dc <HAL_EEPROM_Put>
        switch_pumpe_reserve(OFF, 0);
 80a2192:	2100      	movs	r1, #0
 80a2194:	4608      	mov	r0, r1
 80a2196:	f7ff fe6b 	bl	80a1e70 <_Z20switch_pumpe_reserveii>
    if ((st_funk_pumpe == ON) & (tsec > tfunk_stop ))
 80a219a:	4b12      	ldr	r3, [pc, #72]	; (80a21e4 <_Z9CountDownv+0xd4>)
 80a219c:	6821      	ldr	r1, [r4, #0]
 80a219e:	681a      	ldr	r2, [r3, #0]
 80a21a0:	4291      	cmp	r1, r2
 80a21a2:	dd0c      	ble.n	80a21be <_Z9CountDownv+0xae>
 80a21a4:	4a10      	ldr	r2, [pc, #64]	; (80a21e8 <_Z9CountDownv+0xd8>)
 80a21a6:	6812      	ldr	r2, [r2, #0]
 80a21a8:	2a01      	cmp	r2, #1
 80a21aa:	d108      	bne.n	80a21be <_Z9CountDownv+0xae>
        tfunk_stop = 4000;
 80a21ac:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
        switch_pumpe_funk(OFF, 0);
 80a21b0:	2100      	movs	r1, #0
        tfunk_stop = 4000;
 80a21b2:	601a      	str	r2, [r3, #0]
        switch_pumpe_funk(OFF, 0);
 80a21b4:	4608      	mov	r0, r1
}
 80a21b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        switch_pumpe_funk(OFF, 0);
 80a21ba:	f7ff beff 	b.w	80a1fbc <_Z17switch_pumpe_funkii>
}
 80a21be:	bd70      	pop	{r4, r5, r6, pc}
 80a21c0:	20000328 	.word	0x20000328
 80a21c4:	200002d4 	.word	0x200002d4
 80a21c8:	20000330 	.word	0x20000330
 80a21cc:	20000324 	.word	0x20000324
 80a21d0:	080a674b 	.word	0x080a674b
 80a21d4:	080a6750 	.word	0x080a6750
 80a21d8:	200002d8 	.word	0x200002d8
 80a21dc:	2000032c 	.word	0x2000032c
 80a21e0:	20000290 	.word	0x20000290
 80a21e4:	200002ec 	.word	0x200002ec
 80a21e8:	200002d0 	.word	0x200002d0

080a21ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a21ec:	b508      	push	{r3, lr}
 80a21ee:	4b02      	ldr	r3, [pc, #8]	; (80a21f8 <HAL_Pin_Map+0xc>)
 80a21f0:	681b      	ldr	r3, [r3, #0]
 80a21f2:	681b      	ldr	r3, [r3, #0]
 80a21f4:	9301      	str	r3, [sp, #4]
 80a21f6:	bd08      	pop	{r3, pc}
 80a21f8:	080601b0 	.word	0x080601b0

080a21fc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a21fc:	b508      	push	{r3, lr}
 80a21fe:	4b02      	ldr	r3, [pc, #8]	; (80a2208 <HAL_Validate_Pin_Function+0xc>)
 80a2200:	681b      	ldr	r3, [r3, #0]
 80a2202:	685b      	ldr	r3, [r3, #4]
 80a2204:	9301      	str	r3, [sp, #4]
 80a2206:	bd08      	pop	{r3, pc}
 80a2208:	080601b0 	.word	0x080601b0

080a220c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a220c:	b508      	push	{r3, lr}
 80a220e:	4b02      	ldr	r3, [pc, #8]	; (80a2218 <HAL_Pin_Mode+0xc>)
 80a2210:	681b      	ldr	r3, [r3, #0]
 80a2212:	689b      	ldr	r3, [r3, #8]
 80a2214:	9301      	str	r3, [sp, #4]
 80a2216:	bd08      	pop	{r3, pc}
 80a2218:	080601b0 	.word	0x080601b0

080a221c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a221c:	b508      	push	{r3, lr}
 80a221e:	4b02      	ldr	r3, [pc, #8]	; (80a2228 <HAL_Get_Pin_Mode+0xc>)
 80a2220:	681b      	ldr	r3, [r3, #0]
 80a2222:	68db      	ldr	r3, [r3, #12]
 80a2224:	9301      	str	r3, [sp, #4]
 80a2226:	bd08      	pop	{r3, pc}
 80a2228:	080601b0 	.word	0x080601b0

080a222c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a222c:	b508      	push	{r3, lr}
 80a222e:	4b02      	ldr	r3, [pc, #8]	; (80a2238 <HAL_GPIO_Write+0xc>)
 80a2230:	681b      	ldr	r3, [r3, #0]
 80a2232:	691b      	ldr	r3, [r3, #16]
 80a2234:	9301      	str	r3, [sp, #4]
 80a2236:	bd08      	pop	{r3, pc}
 80a2238:	080601b0 	.word	0x080601b0

080a223c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a223c:	b508      	push	{r3, lr}
 80a223e:	4b02      	ldr	r3, [pc, #8]	; (80a2248 <HAL_GPIO_Read+0xc>)
 80a2240:	681b      	ldr	r3, [r3, #0]
 80a2242:	695b      	ldr	r3, [r3, #20]
 80a2244:	9301      	str	r3, [sp, #4]
 80a2246:	bd08      	pop	{r3, pc}
 80a2248:	080601b0 	.word	0x080601b0

080a224c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a224c:	b508      	push	{r3, lr}
 80a224e:	4b02      	ldr	r3, [pc, #8]	; (80a2258 <HAL_Interrupts_Enable_All+0xc>)
 80a2250:	681b      	ldr	r3, [r3, #0]
 80a2252:	6a1b      	ldr	r3, [r3, #32]
 80a2254:	9301      	str	r3, [sp, #4]
 80a2256:	bd08      	pop	{r3, pc}
 80a2258:	080601b0 	.word	0x080601b0

080a225c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a225c:	b508      	push	{r3, lr}
 80a225e:	4b02      	ldr	r3, [pc, #8]	; (80a2268 <HAL_Interrupts_Disable_All+0xc>)
 80a2260:	681b      	ldr	r3, [r3, #0]
 80a2262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2264:	9301      	str	r3, [sp, #4]
 80a2266:	bd08      	pop	{r3, pc}
 80a2268:	080601b0 	.word	0x080601b0

080a226c <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a226c:	b508      	push	{r3, lr}
 80a226e:	4b02      	ldr	r3, [pc, #8]	; (80a2278 <hal_adc_read+0xc>)
 80a2270:	681b      	ldr	r3, [r3, #0]
 80a2272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2274:	9301      	str	r3, [sp, #4]
 80a2276:	bd08      	pop	{r3, pc}
 80a2278:	080601b0 	.word	0x080601b0

080a227c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a227c:	b508      	push	{r3, lr}
 80a227e:	4b02      	ldr	r3, [pc, #8]	; (80a2288 <HAL_Pulse_In+0xc>)
 80a2280:	681b      	ldr	r3, [r3, #0]
 80a2282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2284:	9301      	str	r3, [sp, #4]
 80a2286:	bd08      	pop	{r3, pc}
 80a2288:	080601b0 	.word	0x080601b0

080a228c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a228c:	b508      	push	{r3, lr}
 80a228e:	4b02      	ldr	r3, [pc, #8]	; (80a2298 <HAL_RNG_GetRandomNumber+0xc>)
 80a2290:	681b      	ldr	r3, [r3, #0]
 80a2292:	685b      	ldr	r3, [r3, #4]
 80a2294:	9301      	str	r3, [sp, #4]
 80a2296:	bd08      	pop	{r3, pc}
 80a2298:	0806019c 	.word	0x0806019c

080a229c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a229c:	b508      	push	{r3, lr}
 80a229e:	4b02      	ldr	r3, [pc, #8]	; (80a22a8 <HAL_Delay_Microseconds+0xc>)
 80a22a0:	681b      	ldr	r3, [r3, #0]
 80a22a2:	68db      	ldr	r3, [r3, #12]
 80a22a4:	9301      	str	r3, [sp, #4]
 80a22a6:	bd08      	pop	{r3, pc}
 80a22a8:	0806019c 	.word	0x0806019c

080a22ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a22ac:	b508      	push	{r3, lr}
 80a22ae:	4b02      	ldr	r3, [pc, #8]	; (80a22b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a22b0:	681b      	ldr	r3, [r3, #0]
 80a22b2:	695b      	ldr	r3, [r3, #20]
 80a22b4:	9301      	str	r3, [sp, #4]
 80a22b6:	bd08      	pop	{r3, pc}
 80a22b8:	0806019c 	.word	0x0806019c

080a22bc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a22bc:	b508      	push	{r3, lr}
 80a22be:	4b02      	ldr	r3, [pc, #8]	; (80a22c8 <HAL_EEPROM_Init+0xc>)
 80a22c0:	681b      	ldr	r3, [r3, #0]
 80a22c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a22c4:	9301      	str	r3, [sp, #4]
 80a22c6:	bd08      	pop	{r3, pc}
 80a22c8:	0806019c 	.word	0x0806019c

080a22cc <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a22cc:	b508      	push	{r3, lr}
 80a22ce:	4b02      	ldr	r3, [pc, #8]	; (80a22d8 <HAL_EEPROM_Get+0xc>)
 80a22d0:	681b      	ldr	r3, [r3, #0]
 80a22d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a22d4:	9301      	str	r3, [sp, #4]
 80a22d6:	bd08      	pop	{r3, pc}
 80a22d8:	0806019c 	.word	0x0806019c

080a22dc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a22dc:	b508      	push	{r3, lr}
 80a22de:	4b02      	ldr	r3, [pc, #8]	; (80a22e8 <HAL_EEPROM_Put+0xc>)
 80a22e0:	681b      	ldr	r3, [r3, #0]
 80a22e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a22e4:	9301      	str	r3, [sp, #4]
 80a22e6:	bd08      	pop	{r3, pc}
 80a22e8:	0806019c 	.word	0x0806019c

080a22ec <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a22ec:	b508      	push	{r3, lr}
 80a22ee:	4b02      	ldr	r3, [pc, #8]	; (80a22f8 <hal_rtc_time_is_valid+0xc>)
 80a22f0:	681b      	ldr	r3, [r3, #0]
 80a22f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a22f4:	9301      	str	r3, [sp, #4]
 80a22f6:	bd08      	pop	{r3, pc}
 80a22f8:	0806019c 	.word	0x0806019c

080a22fc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a22fc:	b508      	push	{r3, lr}
 80a22fe:	4b02      	ldr	r3, [pc, #8]	; (80a2308 <hal_rtc_get_time+0xc>)
 80a2300:	681b      	ldr	r3, [r3, #0]
 80a2302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2304:	9301      	str	r3, [sp, #4]
 80a2306:	bd08      	pop	{r3, pc}
 80a2308:	0806019c 	.word	0x0806019c

080a230c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a230c:	b508      	push	{r3, lr}
 80a230e:	4b02      	ldr	r3, [pc, #8]	; (80a2318 <os_mutex_recursive_create+0xc>)
 80a2310:	681b      	ldr	r3, [r3, #0]
 80a2312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2314:	9301      	str	r3, [sp, #4]
 80a2316:	bd08      	pop	{r3, pc}
 80a2318:	080601d0 	.word	0x080601d0

080a231c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a231c:	b508      	push	{r3, lr}
 80a231e:	4b02      	ldr	r3, [pc, #8]	; (80a2328 <os_mutex_recursive_destroy+0xc>)
 80a2320:	681b      	ldr	r3, [r3, #0]
 80a2322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2324:	9301      	str	r3, [sp, #4]
 80a2326:	bd08      	pop	{r3, pc}
 80a2328:	080601d0 	.word	0x080601d0

080a232c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a232c:	b508      	push	{r3, lr}
 80a232e:	4b02      	ldr	r3, [pc, #8]	; (80a2338 <hal_usart_init+0xc>)
 80a2330:	681b      	ldr	r3, [r3, #0]
 80a2332:	699b      	ldr	r3, [r3, #24]
 80a2334:	9301      	str	r3, [sp, #4]
 80a2336:	bd08      	pop	{r3, pc}
 80a2338:	080601c4 	.word	0x080601c4

080a233c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a233c:	b508      	push	{r3, lr}
 80a233e:	4b02      	ldr	r3, [pc, #8]	; (80a2348 <hal_usart_write+0xc>)
 80a2340:	681b      	ldr	r3, [r3, #0]
 80a2342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2344:	9301      	str	r3, [sp, #4]
 80a2346:	bd08      	pop	{r3, pc}
 80a2348:	080601c4 	.word	0x080601c4

080a234c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a234c:	b508      	push	{r3, lr}
 80a234e:	4b02      	ldr	r3, [pc, #8]	; (80a2358 <hal_usart_available+0xc>)
 80a2350:	681b      	ldr	r3, [r3, #0]
 80a2352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2354:	9301      	str	r3, [sp, #4]
 80a2356:	bd08      	pop	{r3, pc}
 80a2358:	080601c4 	.word	0x080601c4

080a235c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a235c:	b508      	push	{r3, lr}
 80a235e:	4b02      	ldr	r3, [pc, #8]	; (80a2368 <hal_usart_read+0xc>)
 80a2360:	681b      	ldr	r3, [r3, #0]
 80a2362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2364:	9301      	str	r3, [sp, #4]
 80a2366:	bd08      	pop	{r3, pc}
 80a2368:	080601c4 	.word	0x080601c4

080a236c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a236c:	b508      	push	{r3, lr}
 80a236e:	4b02      	ldr	r3, [pc, #8]	; (80a2378 <hal_usart_peek+0xc>)
 80a2370:	681b      	ldr	r3, [r3, #0]
 80a2372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2374:	9301      	str	r3, [sp, #4]
 80a2376:	bd08      	pop	{r3, pc}
 80a2378:	080601c4 	.word	0x080601c4

080a237c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a237c:	b508      	push	{r3, lr}
 80a237e:	4b02      	ldr	r3, [pc, #8]	; (80a2388 <hal_usart_flush+0xc>)
 80a2380:	681b      	ldr	r3, [r3, #0]
 80a2382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2384:	9301      	str	r3, [sp, #4]
 80a2386:	bd08      	pop	{r3, pc}
 80a2388:	080601c4 	.word	0x080601c4

080a238c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a238c:	b508      	push	{r3, lr}
 80a238e:	4b02      	ldr	r3, [pc, #8]	; (80a2398 <hal_usart_is_enabled+0xc>)
 80a2390:	681b      	ldr	r3, [r3, #0]
 80a2392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2394:	9301      	str	r3, [sp, #4]
 80a2396:	bd08      	pop	{r3, pc}
 80a2398:	080601c4 	.word	0x080601c4

080a239c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a239c:	b508      	push	{r3, lr}
 80a239e:	4b02      	ldr	r3, [pc, #8]	; (80a23a8 <hal_usart_available_data_for_write+0xc>)
 80a23a0:	681b      	ldr	r3, [r3, #0]
 80a23a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a23a4:	9301      	str	r3, [sp, #4]
 80a23a6:	bd08      	pop	{r3, pc}
 80a23a8:	080601c4 	.word	0x080601c4

080a23ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a23ac:	b508      	push	{r3, lr}
 80a23ae:	4b02      	ldr	r3, [pc, #8]	; (80a23b8 <hal_i2c_write+0xc>)
 80a23b0:	681b      	ldr	r3, [r3, #0]
 80a23b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a23b4:	9301      	str	r3, [sp, #4]
 80a23b6:	bd08      	pop	{r3, pc}
 80a23b8:	080601ac 	.word	0x080601ac

080a23bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a23bc:	b508      	push	{r3, lr}
 80a23be:	4b02      	ldr	r3, [pc, #8]	; (80a23c8 <hal_i2c_available+0xc>)
 80a23c0:	681b      	ldr	r3, [r3, #0]
 80a23c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a23c4:	9301      	str	r3, [sp, #4]
 80a23c6:	bd08      	pop	{r3, pc}
 80a23c8:	080601ac 	.word	0x080601ac

080a23cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a23cc:	b508      	push	{r3, lr}
 80a23ce:	4b02      	ldr	r3, [pc, #8]	; (80a23d8 <hal_i2c_read+0xc>)
 80a23d0:	681b      	ldr	r3, [r3, #0]
 80a23d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a23d4:	9301      	str	r3, [sp, #4]
 80a23d6:	bd08      	pop	{r3, pc}
 80a23d8:	080601ac 	.word	0x080601ac

080a23dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a23dc:	b508      	push	{r3, lr}
 80a23de:	4b02      	ldr	r3, [pc, #8]	; (80a23e8 <hal_i2c_peek+0xc>)
 80a23e0:	681b      	ldr	r3, [r3, #0]
 80a23e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a23e4:	9301      	str	r3, [sp, #4]
 80a23e6:	bd08      	pop	{r3, pc}
 80a23e8:	080601ac 	.word	0x080601ac

080a23ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a23ec:	b508      	push	{r3, lr}
 80a23ee:	4b02      	ldr	r3, [pc, #8]	; (80a23f8 <hal_i2c_flush+0xc>)
 80a23f0:	681b      	ldr	r3, [r3, #0]
 80a23f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a23f4:	9301      	str	r3, [sp, #4]
 80a23f6:	bd08      	pop	{r3, pc}
 80a23f8:	080601ac 	.word	0x080601ac

080a23fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a23fc:	b508      	push	{r3, lr}
 80a23fe:	4b02      	ldr	r3, [pc, #8]	; (80a2408 <hal_i2c_is_enabled+0xc>)
 80a2400:	681b      	ldr	r3, [r3, #0]
 80a2402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2404:	9301      	str	r3, [sp, #4]
 80a2406:	bd08      	pop	{r3, pc}
 80a2408:	080601ac 	.word	0x080601ac

080a240c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a240c:	b508      	push	{r3, lr}
 80a240e:	4b03      	ldr	r3, [pc, #12]	; (80a241c <hal_i2c_init+0x10>)
 80a2410:	681b      	ldr	r3, [r3, #0]
 80a2412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2416:	9301      	str	r3, [sp, #4]
 80a2418:	bd08      	pop	{r3, pc}
 80a241a:	0000      	.short	0x0000
 80a241c:	080601ac 	.word	0x080601ac

080a2420 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a2420:	b508      	push	{r3, lr}
 80a2422:	4b02      	ldr	r3, [pc, #8]	; (80a242c <hal_spi_init+0xc>)
 80a2424:	681b      	ldr	r3, [r3, #0]
 80a2426:	69db      	ldr	r3, [r3, #28]
 80a2428:	9301      	str	r3, [sp, #4]
 80a242a:	bd08      	pop	{r3, pc}
 80a242c:	080601b4 	.word	0x080601b4

080a2430 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a2430:	b508      	push	{r3, lr}
 80a2432:	4b02      	ldr	r3, [pc, #8]	; (80a243c <hal_spi_is_enabled+0xc>)
 80a2434:	681b      	ldr	r3, [r3, #0]
 80a2436:	6a1b      	ldr	r3, [r3, #32]
 80a2438:	9301      	str	r3, [sp, #4]
 80a243a:	bd08      	pop	{r3, pc}
 80a243c:	080601b4 	.word	0x080601b4

080a2440 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2440:	b508      	push	{r3, lr}
 80a2442:	4b02      	ldr	r3, [pc, #8]	; (80a244c <HAL_USB_USART_Init+0xc>)
 80a2444:	681b      	ldr	r3, [r3, #0]
 80a2446:	681b      	ldr	r3, [r3, #0]
 80a2448:	9301      	str	r3, [sp, #4]
 80a244a:	bd08      	pop	{r3, pc}
 80a244c:	080601d8 	.word	0x080601d8

080a2450 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2450:	b508      	push	{r3, lr}
 80a2452:	4b02      	ldr	r3, [pc, #8]	; (80a245c <HAL_USB_USART_Begin+0xc>)
 80a2454:	681b      	ldr	r3, [r3, #0]
 80a2456:	685b      	ldr	r3, [r3, #4]
 80a2458:	9301      	str	r3, [sp, #4]
 80a245a:	bd08      	pop	{r3, pc}
 80a245c:	080601d8 	.word	0x080601d8

080a2460 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2460:	b508      	push	{r3, lr}
 80a2462:	4b02      	ldr	r3, [pc, #8]	; (80a246c <HAL_USB_USART_Available_Data+0xc>)
 80a2464:	681b      	ldr	r3, [r3, #0]
 80a2466:	691b      	ldr	r3, [r3, #16]
 80a2468:	9301      	str	r3, [sp, #4]
 80a246a:	bd08      	pop	{r3, pc}
 80a246c:	080601d8 	.word	0x080601d8

080a2470 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2470:	b508      	push	{r3, lr}
 80a2472:	4b02      	ldr	r3, [pc, #8]	; (80a247c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2474:	681b      	ldr	r3, [r3, #0]
 80a2476:	695b      	ldr	r3, [r3, #20]
 80a2478:	9301      	str	r3, [sp, #4]
 80a247a:	bd08      	pop	{r3, pc}
 80a247c:	080601d8 	.word	0x080601d8

080a2480 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2480:	b508      	push	{r3, lr}
 80a2482:	4b02      	ldr	r3, [pc, #8]	; (80a248c <HAL_USB_USART_Receive_Data+0xc>)
 80a2484:	681b      	ldr	r3, [r3, #0]
 80a2486:	699b      	ldr	r3, [r3, #24]
 80a2488:	9301      	str	r3, [sp, #4]
 80a248a:	bd08      	pop	{r3, pc}
 80a248c:	080601d8 	.word	0x080601d8

080a2490 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2490:	b508      	push	{r3, lr}
 80a2492:	4b02      	ldr	r3, [pc, #8]	; (80a249c <HAL_USB_USART_Send_Data+0xc>)
 80a2494:	681b      	ldr	r3, [r3, #0]
 80a2496:	69db      	ldr	r3, [r3, #28]
 80a2498:	9301      	str	r3, [sp, #4]
 80a249a:	bd08      	pop	{r3, pc}
 80a249c:	080601d8 	.word	0x080601d8

080a24a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a24a0:	b508      	push	{r3, lr}
 80a24a2:	4b02      	ldr	r3, [pc, #8]	; (80a24ac <HAL_USB_USART_Flush_Data+0xc>)
 80a24a4:	681b      	ldr	r3, [r3, #0]
 80a24a6:	6a1b      	ldr	r3, [r3, #32]
 80a24a8:	9301      	str	r3, [sp, #4]
 80a24aa:	bd08      	pop	{r3, pc}
 80a24ac:	080601d8 	.word	0x080601d8

080a24b0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a24b0:	b508      	push	{r3, lr}
 80a24b2:	4b02      	ldr	r3, [pc, #8]	; (80a24bc <inet_gethostbyname+0xc>)
 80a24b4:	681b      	ldr	r3, [r3, #0]
 80a24b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a24b8:	9301      	str	r3, [sp, #4]
 80a24ba:	bd08      	pop	{r3, pc}
 80a24bc:	080601c0 	.word	0x080601c0

080a24c0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a24c0:	b508      	push	{r3, lr}
 80a24c2:	4b02      	ldr	r3, [pc, #8]	; (80a24cc <system_mode+0xc>)
 80a24c4:	681b      	ldr	r3, [r3, #0]
 80a24c6:	681b      	ldr	r3, [r3, #0]
 80a24c8:	9301      	str	r3, [sp, #4]
 80a24ca:	bd08      	pop	{r3, pc}
 80a24cc:	080601a4 	.word	0x080601a4

080a24d0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a24d0:	b508      	push	{r3, lr}
 80a24d2:	4b02      	ldr	r3, [pc, #8]	; (80a24dc <set_system_mode+0xc>)
 80a24d4:	681b      	ldr	r3, [r3, #0]
 80a24d6:	685b      	ldr	r3, [r3, #4]
 80a24d8:	9301      	str	r3, [sp, #4]
 80a24da:	bd08      	pop	{r3, pc}
 80a24dc:	080601a4 	.word	0x080601a4

080a24e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a24e0:	b508      	push	{r3, lr}
 80a24e2:	4b02      	ldr	r3, [pc, #8]	; (80a24ec <system_delay_ms+0xc>)
 80a24e4:	681b      	ldr	r3, [r3, #0]
 80a24e6:	695b      	ldr	r3, [r3, #20]
 80a24e8:	9301      	str	r3, [sp, #4]
 80a24ea:	bd08      	pop	{r3, pc}
 80a24ec:	080601a4 	.word	0x080601a4

080a24f0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a24f0:	b508      	push	{r3, lr}
 80a24f2:	4b02      	ldr	r3, [pc, #8]	; (80a24fc <system_thread_set_state+0xc>)
 80a24f4:	681b      	ldr	r3, [r3, #0]
 80a24f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a24f8:	9301      	str	r3, [sp, #4]
 80a24fa:	bd08      	pop	{r3, pc}
 80a24fc:	080601a4 	.word	0x080601a4

080a2500 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a2500:	b508      	push	{r3, lr}
 80a2502:	4b02      	ldr	r3, [pc, #8]	; (80a250c <application_thread_current+0xc>)
 80a2504:	681b      	ldr	r3, [r3, #0]
 80a2506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2508:	9301      	str	r3, [sp, #4]
 80a250a:	bd08      	pop	{r3, pc}
 80a250c:	080601a4 	.word	0x080601a4

080a2510 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a2510:	b508      	push	{r3, lr}
 80a2512:	4b02      	ldr	r3, [pc, #8]	; (80a251c <application_thread_invoke+0xc>)
 80a2514:	681b      	ldr	r3, [r3, #0]
 80a2516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2518:	9301      	str	r3, [sp, #4]
 80a251a:	bd08      	pop	{r3, pc}
 80a251c:	080601a4 	.word	0x080601a4

080a2520 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a2520:	b508      	push	{r3, lr}
 80a2522:	4b02      	ldr	r3, [pc, #8]	; (80a252c <system_thread_get_state+0xc>)
 80a2524:	681b      	ldr	r3, [r3, #0]
 80a2526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2528:	9301      	str	r3, [sp, #4]
 80a252a:	bd08      	pop	{r3, pc}
 80a252c:	080601a4 	.word	0x080601a4

080a2530 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2530:	b508      	push	{r3, lr}
 80a2532:	4b03      	ldr	r3, [pc, #12]	; (80a2540 <system_ctrl_set_app_request_handler+0x10>)
 80a2534:	681b      	ldr	r3, [r3, #0]
 80a2536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a253a:	9301      	str	r3, [sp, #4]
 80a253c:	bd08      	pop	{r3, pc}
 80a253e:	0000      	.short	0x0000
 80a2540:	080601a4 	.word	0x080601a4

080a2544 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2544:	b508      	push	{r3, lr}
 80a2546:	4b03      	ldr	r3, [pc, #12]	; (80a2554 <system_ctrl_set_result+0x10>)
 80a2548:	681b      	ldr	r3, [r3, #0]
 80a254a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a254e:	9301      	str	r3, [sp, #4]
 80a2550:	bd08      	pop	{r3, pc}
 80a2552:	0000      	.short	0x0000
 80a2554:	080601a4 	.word	0x080601a4

080a2558 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80a2558:	b508      	push	{r3, lr}
 80a255a:	4b03      	ldr	r3, [pc, #12]	; (80a2568 <system_sleep_pins+0x10>)
 80a255c:	681b      	ldr	r3, [r3, #0]
 80a255e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80a2562:	9301      	str	r3, [sp, #4]
 80a2564:	bd08      	pop	{r3, pc}
 80a2566:	0000      	.short	0x0000
 80a2568:	080601a4 	.word	0x080601a4

080a256c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a256c:	b508      	push	{r3, lr}
 80a256e:	4b02      	ldr	r3, [pc, #8]	; (80a2578 <network_connect+0xc>)
 80a2570:	681b      	ldr	r3, [r3, #0]
 80a2572:	685b      	ldr	r3, [r3, #4]
 80a2574:	9301      	str	r3, [sp, #4]
 80a2576:	bd08      	pop	{r3, pc}
 80a2578:	080601c8 	.word	0x080601c8

080a257c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a257c:	b508      	push	{r3, lr}
 80a257e:	4b02      	ldr	r3, [pc, #8]	; (80a2588 <network_connecting+0xc>)
 80a2580:	681b      	ldr	r3, [r3, #0]
 80a2582:	689b      	ldr	r3, [r3, #8]
 80a2584:	9301      	str	r3, [sp, #4]
 80a2586:	bd08      	pop	{r3, pc}
 80a2588:	080601c8 	.word	0x080601c8

080a258c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a258c:	b508      	push	{r3, lr}
 80a258e:	4b02      	ldr	r3, [pc, #8]	; (80a2598 <network_disconnect+0xc>)
 80a2590:	681b      	ldr	r3, [r3, #0]
 80a2592:	68db      	ldr	r3, [r3, #12]
 80a2594:	9301      	str	r3, [sp, #4]
 80a2596:	bd08      	pop	{r3, pc}
 80a2598:	080601c8 	.word	0x080601c8

080a259c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a259c:	b508      	push	{r3, lr}
 80a259e:	4b02      	ldr	r3, [pc, #8]	; (80a25a8 <network_ready+0xc>)
 80a25a0:	681b      	ldr	r3, [r3, #0]
 80a25a2:	691b      	ldr	r3, [r3, #16]
 80a25a4:	9301      	str	r3, [sp, #4]
 80a25a6:	bd08      	pop	{r3, pc}
 80a25a8:	080601c8 	.word	0x080601c8

080a25ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a25ac:	b508      	push	{r3, lr}
 80a25ae:	4b02      	ldr	r3, [pc, #8]	; (80a25b8 <network_on+0xc>)
 80a25b0:	681b      	ldr	r3, [r3, #0]
 80a25b2:	695b      	ldr	r3, [r3, #20]
 80a25b4:	9301      	str	r3, [sp, #4]
 80a25b6:	bd08      	pop	{r3, pc}
 80a25b8:	080601c8 	.word	0x080601c8

080a25bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a25bc:	b508      	push	{r3, lr}
 80a25be:	4b02      	ldr	r3, [pc, #8]	; (80a25c8 <network_off+0xc>)
 80a25c0:	681b      	ldr	r3, [r3, #0]
 80a25c2:	699b      	ldr	r3, [r3, #24]
 80a25c4:	9301      	str	r3, [sp, #4]
 80a25c6:	bd08      	pop	{r3, pc}
 80a25c8:	080601c8 	.word	0x080601c8

080a25cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a25cc:	b508      	push	{r3, lr}
 80a25ce:	4b02      	ldr	r3, [pc, #8]	; (80a25d8 <network_listen+0xc>)
 80a25d0:	681b      	ldr	r3, [r3, #0]
 80a25d2:	69db      	ldr	r3, [r3, #28]
 80a25d4:	9301      	str	r3, [sp, #4]
 80a25d6:	bd08      	pop	{r3, pc}
 80a25d8:	080601c8 	.word	0x080601c8

080a25dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a25dc:	b508      	push	{r3, lr}
 80a25de:	4b02      	ldr	r3, [pc, #8]	; (80a25e8 <network_listening+0xc>)
 80a25e0:	681b      	ldr	r3, [r3, #0]
 80a25e2:	6a1b      	ldr	r3, [r3, #32]
 80a25e4:	9301      	str	r3, [sp, #4]
 80a25e6:	bd08      	pop	{r3, pc}
 80a25e8:	080601c8 	.word	0x080601c8

080a25ec <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
 80a25ec:	b508      	push	{r3, lr}
 80a25ee:	4b02      	ldr	r3, [pc, #8]	; (80a25f8 <network_has_credentials+0xc>)
 80a25f0:	681b      	ldr	r3, [r3, #0]
 80a25f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a25f4:	9301      	str	r3, [sp, #4]
 80a25f6:	bd08      	pop	{r3, pc}
 80a25f8:	080601c8 	.word	0x080601c8

080a25fc <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 80a25fc:	b508      	push	{r3, lr}
 80a25fe:	4b02      	ldr	r3, [pc, #8]	; (80a2608 <network_set_credentials+0xc>)
 80a2600:	681b      	ldr	r3, [r3, #0]
 80a2602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2604:	9301      	str	r3, [sp, #4]
 80a2606:	bd08      	pop	{r3, pc}
 80a2608:	080601c8 	.word	0x080601c8

080a260c <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
 80a260c:	b508      	push	{r3, lr}
 80a260e:	4b02      	ldr	r3, [pc, #8]	; (80a2618 <network_clear_credentials+0xc>)
 80a2610:	681b      	ldr	r3, [r3, #0]
 80a2612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2614:	9301      	str	r3, [sp, #4]
 80a2616:	bd08      	pop	{r3, pc}
 80a2618:	080601c8 	.word	0x080601c8

080a261c <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a261c:	b508      	push	{r3, lr}
 80a261e:	4b02      	ldr	r3, [pc, #8]	; (80a2628 <network_set_listen_timeout+0xc>)
 80a2620:	681b      	ldr	r3, [r3, #0]
 80a2622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2624:	9301      	str	r3, [sp, #4]
 80a2626:	bd08      	pop	{r3, pc}
 80a2628:	080601c8 	.word	0x080601c8

080a262c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a262c:	b508      	push	{r3, lr}
 80a262e:	4b02      	ldr	r3, [pc, #8]	; (80a2638 <network_get_listen_timeout+0xc>)
 80a2630:	681b      	ldr	r3, [r3, #0]
 80a2632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2634:	9301      	str	r3, [sp, #4]
 80a2636:	bd08      	pop	{r3, pc}
 80a2638:	080601c8 	.word	0x080601c8

080a263c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a263c:	b508      	push	{r3, lr}
 80a263e:	4b02      	ldr	r3, [pc, #8]	; (80a2648 <network_is_on+0xc>)
 80a2640:	681b      	ldr	r3, [r3, #0]
 80a2642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2644:	9301      	str	r3, [sp, #4]
 80a2646:	bd08      	pop	{r3, pc}
 80a2648:	080601c8 	.word	0x080601c8

080a264c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a264c:	b508      	push	{r3, lr}
 80a264e:	4b02      	ldr	r3, [pc, #8]	; (80a2658 <network_is_off+0xc>)
 80a2650:	681b      	ldr	r3, [r3, #0]
 80a2652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2654:	9301      	str	r3, [sp, #4]
 80a2656:	bd08      	pop	{r3, pc}
 80a2658:	080601c8 	.word	0x080601c8

080a265c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a265c:	b508      	push	{r3, lr}
 80a265e:	4b02      	ldr	r3, [pc, #8]	; (80a2668 <spark_process+0xc>)
 80a2660:	681b      	ldr	r3, [r3, #0]
 80a2662:	689b      	ldr	r3, [r3, #8]
 80a2664:	9301      	str	r3, [sp, #4]
 80a2666:	bd08      	pop	{r3, pc}
 80a2668:	080601cc 	.word	0x080601cc

080a266c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a266c:	b508      	push	{r3, lr}
 80a266e:	4b02      	ldr	r3, [pc, #8]	; (80a2678 <spark_cloud_flag_connect+0xc>)
 80a2670:	681b      	ldr	r3, [r3, #0]
 80a2672:	68db      	ldr	r3, [r3, #12]
 80a2674:	9301      	str	r3, [sp, #4]
 80a2676:	bd08      	pop	{r3, pc}
 80a2678:	080601cc 	.word	0x080601cc

080a267c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a267c:	b508      	push	{r3, lr}
 80a267e:	4b02      	ldr	r3, [pc, #8]	; (80a2688 <spark_cloud_flag_connected+0xc>)
 80a2680:	681b      	ldr	r3, [r3, #0]
 80a2682:	695b      	ldr	r3, [r3, #20]
 80a2684:	9301      	str	r3, [sp, #4]
 80a2686:	bd08      	pop	{r3, pc}
 80a2688:	080601cc 	.word	0x080601cc

080a268c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a268c:	b508      	push	{r3, lr}
 80a268e:	4b02      	ldr	r3, [pc, #8]	; (80a2698 <spark_deviceID+0xc>)
 80a2690:	681b      	ldr	r3, [r3, #0]
 80a2692:	69db      	ldr	r3, [r3, #28]
 80a2694:	9301      	str	r3, [sp, #4]
 80a2696:	bd08      	pop	{r3, pc}
 80a2698:	080601cc 	.word	0x080601cc

080a269c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a269c:	b508      	push	{r3, lr}
 80a269e:	4b02      	ldr	r3, [pc, #8]	; (80a26a8 <spark_send_event+0xc>)
 80a26a0:	681b      	ldr	r3, [r3, #0]
 80a26a2:	6a1b      	ldr	r3, [r3, #32]
 80a26a4:	9301      	str	r3, [sp, #4]
 80a26a6:	bd08      	pop	{r3, pc}
 80a26a8:	080601cc 	.word	0x080601cc

080a26ac <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a26ac:	b508      	push	{r3, lr}
 80a26ae:	4b02      	ldr	r3, [pc, #8]	; (80a26b8 <spark_subscribe+0xc>)
 80a26b0:	681b      	ldr	r3, [r3, #0]
 80a26b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a26b4:	9301      	str	r3, [sp, #4]
 80a26b6:	bd08      	pop	{r3, pc}
 80a26b8:	080601cc 	.word	0x080601cc

080a26bc <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a26bc:	b508      	push	{r3, lr}
 80a26be:	4b02      	ldr	r3, [pc, #8]	; (80a26c8 <spark_sync_time_pending+0xc>)
 80a26c0:	681b      	ldr	r3, [r3, #0]
 80a26c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a26c4:	9301      	str	r3, [sp, #4]
 80a26c6:	bd08      	pop	{r3, pc}
 80a26c8:	080601cc 	.word	0x080601cc

080a26cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a26cc:	b508      	push	{r3, lr}
 80a26ce:	4b02      	ldr	r3, [pc, #8]	; (80a26d8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a26d0:	681b      	ldr	r3, [r3, #0]
 80a26d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a26d4:	9301      	str	r3, [sp, #4]
 80a26d6:	bd08      	pop	{r3, pc}
 80a26d8:	080601cc 	.word	0x080601cc

080a26dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a26dc:	b508      	push	{r3, lr}
 80a26de:	4b02      	ldr	r3, [pc, #8]	; (80a26e8 <malloc+0xc>)
 80a26e0:	681b      	ldr	r3, [r3, #0]
 80a26e2:	681b      	ldr	r3, [r3, #0]
 80a26e4:	9301      	str	r3, [sp, #4]
 80a26e6:	bd08      	pop	{r3, pc}
 80a26e8:	080601a0 	.word	0x080601a0

080a26ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a26ec:	b508      	push	{r3, lr}
 80a26ee:	4b02      	ldr	r3, [pc, #8]	; (80a26f8 <free+0xc>)
 80a26f0:	681b      	ldr	r3, [r3, #0]
 80a26f2:	685b      	ldr	r3, [r3, #4]
 80a26f4:	9301      	str	r3, [sp, #4]
 80a26f6:	bd08      	pop	{r3, pc}
 80a26f8:	080601a0 	.word	0x080601a0

080a26fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a26fc:	b508      	push	{r3, lr}
 80a26fe:	4b02      	ldr	r3, [pc, #8]	; (80a2708 <realloc+0xc>)
 80a2700:	681b      	ldr	r3, [r3, #0]
 80a2702:	689b      	ldr	r3, [r3, #8]
 80a2704:	9301      	str	r3, [sp, #4]
 80a2706:	bd08      	pop	{r3, pc}
 80a2708:	080601a0 	.word	0x080601a0

080a270c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a270c:	b508      	push	{r3, lr}
 80a270e:	4b02      	ldr	r3, [pc, #8]	; (80a2718 <sprintf+0xc>)
 80a2710:	681b      	ldr	r3, [r3, #0]
 80a2712:	68db      	ldr	r3, [r3, #12]
 80a2714:	9301      	str	r3, [sp, #4]
 80a2716:	bd08      	pop	{r3, pc}
 80a2718:	080601a0 	.word	0x080601a0

080a271c <siscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a271c:	b508      	push	{r3, lr}
 80a271e:	4b02      	ldr	r3, [pc, #8]	; (80a2728 <siscanf+0xc>)
 80a2720:	681b      	ldr	r3, [r3, #0]
 80a2722:	699b      	ldr	r3, [r3, #24]
 80a2724:	9301      	str	r3, [sp, #4]
 80a2726:	bd08      	pop	{r3, pc}
 80a2728:	080601a0 	.word	0x080601a0

080a272c <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a272c:	b508      	push	{r3, lr}
 80a272e:	4b02      	ldr	r3, [pc, #8]	; (80a2738 <vsnprintf+0xc>)
 80a2730:	681b      	ldr	r3, [r3, #0]
 80a2732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2734:	9301      	str	r3, [sp, #4]
 80a2736:	bd08      	pop	{r3, pc}
 80a2738:	080601a0 	.word	0x080601a0

080a273c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a273c:	b508      	push	{r3, lr}
 80a273e:	4b02      	ldr	r3, [pc, #8]	; (80a2748 <abort+0xc>)
 80a2740:	681b      	ldr	r3, [r3, #0]
 80a2742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2744:	9301      	str	r3, [sp, #4]
 80a2746:	bd08      	pop	{r3, pc}
 80a2748:	080601a0 	.word	0x080601a0

080a274c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a274c:	b508      	push	{r3, lr}
 80a274e:	4b02      	ldr	r3, [pc, #8]	; (80a2758 <_malloc_r+0xc>)
 80a2750:	681b      	ldr	r3, [r3, #0]
 80a2752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2754:	9301      	str	r3, [sp, #4]
 80a2756:	bd08      	pop	{r3, pc}
 80a2758:	080601a0 	.word	0x080601a0

080a275c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a275c:	b508      	push	{r3, lr}
 80a275e:	4b02      	ldr	r3, [pc, #8]	; (80a2768 <newlib_impure_ptr_callback+0xc>)
 80a2760:	681b      	ldr	r3, [r3, #0]
 80a2762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2764:	9301      	str	r3, [sp, #4]
 80a2766:	bd08      	pop	{r3, pc}
 80a2768:	080601a0 	.word	0x080601a0

080a276c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a276c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a276e:	2600      	movs	r6, #0
 80a2770:	4604      	mov	r4, r0
 80a2772:	460d      	mov	r5, r1
 80a2774:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a2778:	f7ff fdc8 	bl	80a230c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a277c:	4628      	mov	r0, r5
    _spi = spi;
 80a277e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2780:	f7ff fe4e 	bl	80a2420 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2784:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2786:	6066      	str	r6, [r4, #4]
}
 80a2788:	bd70      	pop	{r4, r5, r6, pc}

080a278a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a278a:	b510      	push	{r4, lr}
 80a278c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a278e:	6800      	ldr	r0, [r0, #0]
 80a2790:	b118      	cbz	r0, 80a279a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a2792:	f7ff ffab 	bl	80a26ec <free>
            wakeupSource_ = nullptr;
 80a2796:	2300      	movs	r3, #0
 80a2798:	6023      	str	r3, [r4, #0]
        }
    }
 80a279a:	bd10      	pop	{r4, pc}

080a279c <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a279c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80a279e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a27a2:	460d      	mov	r5, r1
        error_ = result.error_;
 80a27a4:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80a27a6:	460b      	mov	r3, r1
 80a27a8:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a27ac:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 80a27ae:	f8c0 2006 	str.w	r2, [r0, #6]
 80a27b2:	889b      	ldrh	r3, [r3, #4]
 80a27b4:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80a27b6:	f7ff ffe8 	bl	80a278a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 80a27ba:	682b      	ldr	r3, [r5, #0]
 80a27bc:	b113      	cbz	r3, 80a27c4 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80a27be:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80a27c0:	2300      	movs	r3, #0
 80a27c2:	602b      	str	r3, [r5, #0]
    }
 80a27c4:	4620      	mov	r0, r4
 80a27c6:	bd38      	pop	{r3, r4, r5, pc}

080a27c8 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 80a27c8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80a27cc:	b510      	push	{r4, lr}
 80a27ce:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 80a27d0:	b933      	cbnz	r3, 80a27e0 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 80a27d2:	b932      	cbnz	r2, 80a27e2 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 80a27d4:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80a27d8:	6003      	str	r3, [r0, #0]
 80a27da:	888b      	ldrh	r3, [r1, #4]
 80a27dc:	8083      	strh	r3, [r0, #4]
    }
 80a27de:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 80a27e0:	b122      	cbz	r2, 80a27ec <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 80a27e2:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 80a27e4:	2c01      	cmp	r4, #1
 80a27e6:	d003      	beq.n	80a27f0 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 80a27e8:	2c04      	cmp	r4, #4
 80a27ea:	d006      	beq.n	80a27fa <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a27ec:	2204      	movs	r2, #4
 80a27ee:	e005      	b.n	80a27fc <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80a27f0:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80a27f2:	718c      	strb	r4, [r1, #6]
 80a27f4:	810b      	strh	r3, [r1, #8]
 80a27f6:	814a      	strh	r2, [r1, #10]
                    break;
 80a27f8:	e7ec      	b.n	80a27d4 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80a27fa:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a27fc:	810b      	strh	r3, [r1, #8]
 80a27fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a2802:	718a      	strb	r2, [r1, #6]
 80a2804:	814b      	strh	r3, [r1, #10]
                    break;
 80a2806:	e7e5      	b.n	80a27d4 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

080a2808 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a2808:	b510      	push	{r4, lr}
 80a280a:	2400      	movs	r4, #0
 80a280c:	7004      	strb	r4, [r0, #0]
 80a280e:	8044      	strh	r4, [r0, #2]
 80a2810:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80a2814:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a2816:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80a2818:	dd08      	ble.n	80a282c <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 80a281a:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 80a281c:	428b      	cmp	r3, r1
 80a281e:	d904      	bls.n	80a282a <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 80a2820:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80a2824:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80a2826:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 80a2828:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 80a282a:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 80a282c:	d101      	bne.n	80a2832 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80a282e:	2302      	movs	r3, #2
 80a2830:	e7fa      	b.n	80a2828 <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 80a2832:	8041      	strh	r1, [r0, #2]
 80a2834:	e7f9      	b.n	80a282a <_ZN11SleepResultC1EiPKtj+0x22>
	...

080a2838 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a2838:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a283a:	460d      	mov	r5, r1
 80a283c:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a283e:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a2840:	b08b      	sub	sp, #44	; 0x2c
 80a2842:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a2844:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a2846:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a2848:	9301      	str	r3, [sp, #4]
 80a284a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a284c:	4631      	mov	r1, r6
 80a284e:	9300      	str	r3, [sp, #0]
 80a2850:	4628      	mov	r0, r5
 80a2852:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a2854:	9702      	str	r7, [sp, #8]
 80a2856:	f7ff fe7f 	bl	80a2558 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a285a:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a285c:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a285e:	462a      	mov	r2, r5
 80a2860:	a805      	add	r0, sp, #20
 80a2862:	f7ff ffd1 	bl	80a2808 <_ZN11SleepResultC1EiPKtj>
 80a2866:	4d0f      	ldr	r5, [pc, #60]	; (80a28a4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 80a2868:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80a286c:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80a2870:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
 80a2874:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 80a2878:	4628      	mov	r0, r5
 80a287a:	a907      	add	r1, sp, #28
 80a287c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80a2880:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80a2884:	9707      	str	r7, [sp, #28]
 80a2886:	f8ad 7020 	strh.w	r7, [sp, #32]
 80a288a:	f7ff ff87 	bl	80a279c <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 80a288e:	a807      	add	r0, sp, #28
 80a2890:	f7ff ff7b 	bl	80a278a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 80a2894:	4620      	mov	r0, r4
 80a2896:	4629      	mov	r1, r5
 80a2898:	f7ff ff96 	bl	80a27c8 <_ZN17SystemSleepResult13toSleepResultEv>
}
 80a289c:	4620      	mov	r0, r4
 80a289e:	b00b      	add	sp, #44	; 0x2c
 80a28a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a28a2:	bf00      	nop
 80a28a4:	20000340 	.word	0x20000340

080a28a8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a28a8:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a28aa:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a28ac:	b510      	push	{r4, lr}
 80a28ae:	4b08      	ldr	r3, [pc, #32]	; (80a28d0 <_GLOBAL__sub_I_System+0x28>)
 80a28b0:	4c08      	ldr	r4, [pc, #32]	; (80a28d4 <_GLOBAL__sub_I_System+0x2c>)
 80a28b2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a28b4:	4b08      	ldr	r3, [pc, #32]	; (80a28d8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a28b6:	6020      	str	r0, [r4, #0]
 80a28b8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a28ba:	71a0      	strb	r0, [r4, #6]
 80a28bc:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a28be:	f7ff fe07 	bl	80a24d0 <set_system_mode>
SystemClass System;
 80a28c2:	4620      	mov	r0, r4
 80a28c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a28c8:	4a04      	ldr	r2, [pc, #16]	; (80a28dc <_GLOBAL__sub_I_System+0x34>)
 80a28ca:	4905      	ldr	r1, [pc, #20]	; (80a28e0 <_GLOBAL__sub_I_System+0x38>)
 80a28cc:	f001 b9e6 	b.w	80a3c9c <__aeabi_atexit>
 80a28d0:	2000034c 	.word	0x2000034c
 80a28d4:	20000340 	.word	0x20000340
 80a28d8:	ffff0000 	.word	0xffff0000
 80a28dc:	20000128 	.word	0x20000128
 80a28e0:	080a0861 	.word	0x080a0861

080a28e4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a28e4:	b510      	push	{r4, lr}
 80a28e6:	4604      	mov	r4, r0
{
	free(buffer);
 80a28e8:	6800      	ldr	r0, [r0, #0]
 80a28ea:	f7ff feff 	bl	80a26ec <free>
}
 80a28ee:	4620      	mov	r0, r4
 80a28f0:	bd10      	pop	{r4, pc}

080a28f2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a28f2:	b510      	push	{r4, lr}
 80a28f4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a28f6:	6800      	ldr	r0, [r0, #0]
 80a28f8:	b108      	cbz	r0, 80a28fe <_ZN6String10invalidateEv+0xc>
 80a28fa:	f7ff fef7 	bl	80a26ec <free>
	buffer = NULL;
 80a28fe:	2300      	movs	r3, #0
	capacity = len = 0;
 80a2900:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a2904:	6023      	str	r3, [r4, #0]
}
 80a2906:	bd10      	pop	{r4, pc}

080a2908 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2908:	b538      	push	{r3, r4, r5, lr}
 80a290a:	4604      	mov	r4, r0
 80a290c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a290e:	6800      	ldr	r0, [r0, #0]
 80a2910:	3101      	adds	r1, #1
 80a2912:	f7ff fef3 	bl	80a26fc <realloc>
	if (newbuffer) {
 80a2916:	b110      	cbz	r0, 80a291e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2918:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a291c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a291e:	bd38      	pop	{r3, r4, r5, pc}

080a2920 <_ZN6String7reserveEj>:
{
 80a2920:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2922:	6803      	ldr	r3, [r0, #0]
{
 80a2924:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2926:	b123      	cbz	r3, 80a2932 <_ZN6String7reserveEj+0x12>
 80a2928:	6843      	ldr	r3, [r0, #4]
 80a292a:	428b      	cmp	r3, r1
 80a292c:	d301      	bcc.n	80a2932 <_ZN6String7reserveEj+0x12>
 80a292e:	2001      	movs	r0, #1
}
 80a2930:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a2932:	4620      	mov	r0, r4
 80a2934:	f7ff ffe8 	bl	80a2908 <_ZN6String12changeBufferEj>
 80a2938:	2800      	cmp	r0, #0
 80a293a:	d0f9      	beq.n	80a2930 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a293c:	68a3      	ldr	r3, [r4, #8]
 80a293e:	2b00      	cmp	r3, #0
 80a2940:	d1f5      	bne.n	80a292e <_ZN6String7reserveEj+0xe>
 80a2942:	6822      	ldr	r2, [r4, #0]
 80a2944:	7013      	strb	r3, [r2, #0]
 80a2946:	e7f2      	b.n	80a292e <_ZN6String7reserveEj+0xe>

080a2948 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2948:	b570      	push	{r4, r5, r6, lr}
 80a294a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a294c:	4611      	mov	r1, r2
{
 80a294e:	4604      	mov	r4, r0
 80a2950:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2952:	f7ff ffe5 	bl	80a2920 <_ZN6String7reserveEj>
 80a2956:	b920      	cbnz	r0, 80a2962 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2958:	4620      	mov	r0, r4
 80a295a:	f7ff ffca 	bl	80a28f2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a295e:	4620      	mov	r0, r4
 80a2960:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a2962:	462a      	mov	r2, r5
 80a2964:	4631      	mov	r1, r6
 80a2966:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2968:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a296a:	f002 fb77 	bl	80a505c <memcpy>
	buffer[len] = 0;
 80a296e:	2100      	movs	r1, #0
 80a2970:	6822      	ldr	r2, [r4, #0]
 80a2972:	68a3      	ldr	r3, [r4, #8]
 80a2974:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2976:	e7f2      	b.n	80a295e <_ZN6String4copyEPKcj+0x16>

080a2978 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a2978:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a297a:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a297c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a297e:	460d      	mov	r5, r1
	capacity = 0;
 80a2980:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2984:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2986:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2988:	b139      	cbz	r1, 80a299a <_ZN6StringC1EPKc+0x22>
 80a298a:	4608      	mov	r0, r1
 80a298c:	f002 fbcd 	bl	80a512a <strlen>
 80a2990:	4629      	mov	r1, r5
 80a2992:	4602      	mov	r2, r0
 80a2994:	4620      	mov	r0, r4
 80a2996:	f7ff ffd7 	bl	80a2948 <_ZN6String4copyEPKcj>
}
 80a299a:	4620      	mov	r0, r4
 80a299c:	bd38      	pop	{r3, r4, r5, pc}

080a299e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a299e:	b538      	push	{r3, r4, r5, lr}
 80a29a0:	4605      	mov	r5, r0
	if (buffer) {
 80a29a2:	6800      	ldr	r0, [r0, #0]
{
 80a29a4:	460c      	mov	r4, r1
	if (buffer) {
 80a29a6:	b168      	cbz	r0, 80a29c4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a29a8:	686a      	ldr	r2, [r5, #4]
 80a29aa:	688b      	ldr	r3, [r1, #8]
 80a29ac:	429a      	cmp	r2, r3
 80a29ae:	d307      	bcc.n	80a29c0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a29b0:	6809      	ldr	r1, [r1, #0]
 80a29b2:	f002 fb97 	bl	80a50e4 <strcpy>
			len = rhs.len;
 80a29b6:	68a3      	ldr	r3, [r4, #8]
 80a29b8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a29ba:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a29bc:	60a3      	str	r3, [r4, #8]
}
 80a29be:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a29c0:	f7ff fe94 	bl	80a26ec <free>
	buffer = rhs.buffer;
 80a29c4:	6823      	ldr	r3, [r4, #0]
 80a29c6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a29c8:	6863      	ldr	r3, [r4, #4]
 80a29ca:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a29cc:	68a3      	ldr	r3, [r4, #8]
 80a29ce:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a29d0:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a29d2:	e9c4 3300 	strd	r3, r3, [r4]
 80a29d6:	e7f1      	b.n	80a29bc <_ZN6String4moveERS_+0x1e>

080a29d8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a29d8:	4288      	cmp	r0, r1
{
 80a29da:	b510      	push	{r4, lr}
 80a29dc:	460b      	mov	r3, r1
 80a29de:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a29e0:	d004      	beq.n	80a29ec <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a29e2:	6809      	ldr	r1, [r1, #0]
 80a29e4:	b121      	cbz	r1, 80a29f0 <_ZN6StringaSERKS_+0x18>
 80a29e6:	689a      	ldr	r2, [r3, #8]
 80a29e8:	f7ff ffae 	bl	80a2948 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a29ec:	4620      	mov	r0, r4
 80a29ee:	bd10      	pop	{r4, pc}
	else invalidate();
 80a29f0:	f7ff ff7f 	bl	80a28f2 <_ZN6String10invalidateEv>
 80a29f4:	e7fa      	b.n	80a29ec <_ZN6StringaSERKS_+0x14>

080a29f6 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a29f6:	2300      	movs	r3, #0
String::String(const String &value)
 80a29f8:	b510      	push	{r4, lr}
 80a29fa:	4604      	mov	r4, r0
	capacity = 0;
 80a29fc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2a00:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2a02:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a2a04:	f7ff ffe8 	bl	80a29d8 <_ZN6StringaSERKS_>
}
 80a2a08:	4620      	mov	r0, r4
 80a2a0a:	bd10      	pop	{r4, pc}

080a2a0c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a2a0c:	4288      	cmp	r0, r1
{
 80a2a0e:	b510      	push	{r4, lr}
 80a2a10:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a2a12:	d001      	beq.n	80a2a18 <_ZN6StringaSEOS_+0xc>
 80a2a14:	f7ff ffc3 	bl	80a299e <_ZN6String4moveERS_>
	return *this;
}
 80a2a18:	4620      	mov	r0, r4
 80a2a1a:	bd10      	pop	{r4, pc}

080a2a1c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a2a1c:	b570      	push	{r4, r5, r6, lr}
 80a2a1e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a2a20:	460e      	mov	r6, r1
 80a2a22:	b909      	cbnz	r1, 80a2a28 <_ZN6String6concatEPKcj+0xc>
 80a2a24:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a2a26:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a2a28:	b16a      	cbz	r2, 80a2a46 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a2a2a:	6884      	ldr	r4, [r0, #8]
 80a2a2c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a2a2e:	4621      	mov	r1, r4
 80a2a30:	f7ff ff76 	bl	80a2920 <_ZN6String7reserveEj>
 80a2a34:	2800      	cmp	r0, #0
 80a2a36:	d0f5      	beq.n	80a2a24 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a2a38:	6828      	ldr	r0, [r5, #0]
 80a2a3a:	68ab      	ldr	r3, [r5, #8]
 80a2a3c:	4631      	mov	r1, r6
 80a2a3e:	4418      	add	r0, r3
 80a2a40:	f002 fb50 	bl	80a50e4 <strcpy>
	len = newlen;
 80a2a44:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a2a46:	2001      	movs	r0, #1
 80a2a48:	e7ed      	b.n	80a2a26 <_ZN6String6concatEPKcj+0xa>

080a2a4a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a2a4a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2a4c:	688a      	ldr	r2, [r1, #8]
 80a2a4e:	6809      	ldr	r1, [r1, #0]
{
 80a2a50:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2a52:	f7ff ffe3 	bl	80a2a1c <_ZN6String6concatEPKcj>
 80a2a56:	b910      	cbnz	r0, 80a2a5e <_ZplRK15StringSumHelperRK6String+0x14>
 80a2a58:	4620      	mov	r0, r4
 80a2a5a:	f7ff ff4a 	bl	80a28f2 <_ZN6String10invalidateEv>
	return a;
}
 80a2a5e:	4620      	mov	r0, r4
 80a2a60:	bd10      	pop	{r4, pc}

080a2a62 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a2a62:	b538      	push	{r3, r4, r5, lr}
 80a2a64:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a2a66:	460d      	mov	r5, r1
 80a2a68:	b921      	cbnz	r1, 80a2a74 <_ZplRK15StringSumHelperPKc+0x12>
 80a2a6a:	4620      	mov	r0, r4
 80a2a6c:	f7ff ff41 	bl	80a28f2 <_ZN6String10invalidateEv>
	return a;
}
 80a2a70:	4620      	mov	r0, r4
 80a2a72:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a2a74:	4608      	mov	r0, r1
 80a2a76:	f002 fb58 	bl	80a512a <strlen>
 80a2a7a:	4629      	mov	r1, r5
 80a2a7c:	4602      	mov	r2, r0
 80a2a7e:	4620      	mov	r0, r4
 80a2a80:	f7ff ffcc 	bl	80a2a1c <_ZN6String6concatEPKcj>
 80a2a84:	2800      	cmp	r0, #0
 80a2a86:	d0f0      	beq.n	80a2a6a <_ZplRK15StringSumHelperPKc+0x8>
 80a2a88:	e7f2      	b.n	80a2a70 <_ZplRK15StringSumHelperPKc+0xe>

080a2a8a <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 80a2a8a:	4613      	mov	r3, r2
 80a2a8c:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a2a8e:	688a      	ldr	r2, [r1, #8]
 80a2a90:	6884      	ldr	r4, [r0, #8]
 80a2a92:	1aa4      	subs	r4, r4, r2
 80a2a94:	429c      	cmp	r4, r3
 80a2a96:	d30a      	bcc.n	80a2aae <_ZNK6String10startsWithERKS_j+0x24>
 80a2a98:	6800      	ldr	r0, [r0, #0]
 80a2a9a:	b138      	cbz	r0, 80a2aac <_ZNK6String10startsWithERKS_j+0x22>
 80a2a9c:	6809      	ldr	r1, [r1, #0]
 80a2a9e:	b141      	cbz	r1, 80a2ab2 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80a2aa0:	4418      	add	r0, r3
 80a2aa2:	f002 fb4a 	bl	80a513a <strncmp>
 80a2aa6:	fab0 f080 	clz	r0, r0
 80a2aaa:	0940      	lsrs	r0, r0, #5
}
 80a2aac:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a2aae:	2000      	movs	r0, #0
 80a2ab0:	e7fc      	b.n	80a2aac <_ZNK6String10startsWithERKS_j+0x22>
 80a2ab2:	4608      	mov	r0, r1
 80a2ab4:	e7fa      	b.n	80a2aac <_ZNK6String10startsWithERKS_j+0x22>

080a2ab6 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 80a2ab6:	6882      	ldr	r2, [r0, #8]
 80a2ab8:	688b      	ldr	r3, [r1, #8]
 80a2aba:	429a      	cmp	r2, r3
 80a2abc:	d302      	bcc.n	80a2ac4 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 80a2abe:	2200      	movs	r2, #0
 80a2ac0:	f7ff bfe3 	b.w	80a2a8a <_ZNK6String10startsWithERKS_j>
}
 80a2ac4:	2000      	movs	r0, #0
 80a2ac6:	4770      	bx	lr

080a2ac8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2aca:	4606      	mov	r6, r0
 80a2acc:	460d      	mov	r5, r1
  size_t n = 0;
 80a2ace:	2400      	movs	r4, #0
 80a2ad0:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2ad2:	42bd      	cmp	r5, r7
 80a2ad4:	d00c      	beq.n	80a2af0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2ad6:	6833      	ldr	r3, [r6, #0]
 80a2ad8:	4630      	mov	r0, r6
 80a2ada:	689b      	ldr	r3, [r3, #8]
 80a2adc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2ae0:	4798      	blx	r3
     if (chunk>=0)
 80a2ae2:	1e03      	subs	r3, r0, #0
 80a2ae4:	db01      	blt.n	80a2aea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2ae6:	441c      	add	r4, r3
  while (size--) {
 80a2ae8:	e7f3      	b.n	80a2ad2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2aea:	2c00      	cmp	r4, #0
 80a2aec:	bf08      	it	eq
 80a2aee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2af0:	4620      	mov	r0, r4
 80a2af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2af4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2af4:	b570      	push	{r4, r5, r6, lr}
 80a2af6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2af8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2afa:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2afc:	b149      	cbz	r1, 80a2b12 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2afe:	f002 fb14 	bl	80a512a <strlen>
 80a2b02:	682b      	ldr	r3, [r5, #0]
 80a2b04:	4602      	mov	r2, r0
 80a2b06:	4621      	mov	r1, r4
 80a2b08:	4628      	mov	r0, r5
    }
 80a2b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2b0e:	68db      	ldr	r3, [r3, #12]
 80a2b10:	4718      	bx	r3
    }
 80a2b12:	bd70      	pop	{r4, r5, r6, pc}

080a2b14 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a2b14:	b508      	push	{r3, lr}
  return write(str);
 80a2b16:	f7ff ffed 	bl	80a2af4 <_ZN5Print5writeEPKc>
}
 80a2b1a:	bd08      	pop	{r3, pc}

080a2b1c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a2b1c:	6803      	ldr	r3, [r0, #0]
 80a2b1e:	689b      	ldr	r3, [r3, #8]
 80a2b20:	4718      	bx	r3

080a2b22 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2b22:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2b24:	210d      	movs	r1, #13
{
 80a2b26:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2b28:	f7ff fff8 	bl	80a2b1c <_ZN5Print5printEc>
  n += print('\n');
 80a2b2c:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a2b2e:	4604      	mov	r4, r0
  n += print('\n');
 80a2b30:	4628      	mov	r0, r5
 80a2b32:	f7ff fff3 	bl	80a2b1c <_ZN5Print5printEc>
  return n;
}
 80a2b36:	4420      	add	r0, r4
 80a2b38:	bd38      	pop	{r3, r4, r5, pc}

080a2b3a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2b3a:	b538      	push	{r3, r4, r5, lr}
 80a2b3c:	4605      	mov	r5, r0
  return write(str);
 80a2b3e:	f7ff ffd9 	bl	80a2af4 <_ZN5Print5writeEPKc>
 80a2b42:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2b44:	4628      	mov	r0, r5
 80a2b46:	f7ff ffec 	bl	80a2b22 <_ZN5Print7printlnEv>
  return n;
}
 80a2b4a:	4420      	add	r0, r4
 80a2b4c:	bd38      	pop	{r3, r4, r5, pc}

080a2b4e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2b4e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2b50:	2a01      	cmp	r2, #1
 80a2b52:	bf98      	it	ls
 80a2b54:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2b56:	b530      	push	{r4, r5, lr}
 80a2b58:	b08b      	sub	sp, #44	; 0x2c
 80a2b5a:	460c      	mov	r4, r1
  *str = '\0';
 80a2b5c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2b60:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2b62:	4625      	mov	r5, r4
 80a2b64:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2b68:	fb04 5312 	mls	r3, r4, r2, r5
 80a2b6c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2b6e:	2b09      	cmp	r3, #9
 80a2b70:	bf94      	ite	ls
 80a2b72:	3330      	addls	r3, #48	; 0x30
 80a2b74:	3337      	addhi	r3, #55	; 0x37
 80a2b76:	b2db      	uxtb	r3, r3
  } while(n);
 80a2b78:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2b7a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a2b7e:	d9f0      	bls.n	80a2b62 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2b80:	f7ff ffb8 	bl	80a2af4 <_ZN5Print5writeEPKc>
}
 80a2b84:	b00b      	add	sp, #44	; 0x2c
 80a2b86:	bd30      	pop	{r4, r5, pc}

080a2b88 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a2b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b8c:	b086      	sub	sp, #24
 80a2b8e:	af00      	add	r7, sp, #0
 80a2b90:	4605      	mov	r5, r0
 80a2b92:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2b94:	1d38      	adds	r0, r7, #4
 80a2b96:	2114      	movs	r1, #20
{
 80a2b98:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a2b9a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2b9c:	f7ff fdc6 	bl	80a272c <vsnprintf>

    if (n<bufsize)
 80a2ba0:	2813      	cmp	r0, #19
 80a2ba2:	d80e      	bhi.n	80a2bc2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a2ba4:	4628      	mov	r0, r5
 80a2ba6:	1d39      	adds	r1, r7, #4
 80a2ba8:	f7ff ffa4 	bl	80a2af4 <_ZN5Print5writeEPKc>
 80a2bac:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a2bae:	b11e      	cbz	r6, 80a2bb8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a2bb0:	4628      	mov	r0, r5
 80a2bb2:	f7ff ffb6 	bl	80a2b22 <_ZN5Print7printlnEv>
 80a2bb6:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a2bb8:	4620      	mov	r0, r4
 80a2bba:	3718      	adds	r7, #24
 80a2bbc:	46bd      	mov	sp, r7
 80a2bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a2bc2:	f100 0308 	add.w	r3, r0, #8
 80a2bc6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a2bca:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a2bcc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a2bd0:	4622      	mov	r2, r4
 80a2bd2:	1c41      	adds	r1, r0, #1
 80a2bd4:	683b      	ldr	r3, [r7, #0]
 80a2bd6:	4668      	mov	r0, sp
 80a2bd8:	f7ff fda8 	bl	80a272c <vsnprintf>
  return write(str);
 80a2bdc:	4669      	mov	r1, sp
 80a2bde:	4628      	mov	r0, r5
 80a2be0:	f7ff ff88 	bl	80a2af4 <_ZN5Print5writeEPKc>
 80a2be4:	4604      	mov	r4, r0
 80a2be6:	46c5      	mov	sp, r8
 80a2be8:	e7e1      	b.n	80a2bae <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a2bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a2bea:	680b      	ldr	r3, [r1, #0]
 80a2bec:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a2bee:	b113      	cbz	r3, 80a2bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a2bf0:	685a      	ldr	r2, [r3, #4]
 80a2bf2:	3201      	adds	r2, #1
 80a2bf4:	605a      	str	r2, [r3, #4]
      }
 80a2bf6:	4770      	bx	lr

080a2bf8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2bf8:	4b01      	ldr	r3, [pc, #4]	; (80a2c00 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2bfa:	4a02      	ldr	r2, [pc, #8]	; (80a2c04 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2bfc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a2bfe:	4770      	bx	lr
 80a2c00:	20000350 	.word	0x20000350
 80a2c04:	080a675b 	.word	0x080a675b

080a2c08 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a2c0c:	4a15      	ldr	r2, [pc, #84]	; (80a2c64 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2c0e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80a2c70 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80a2c12:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a2c16:	18c0      	adds	r0, r0, r3
 80a2c18:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80a2c1c:	4a12      	ldr	r2, [pc, #72]	; (80a2c68 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80a2c1e:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80a2c20:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a2c24:	18c6      	adds	r6, r0, r3
 80a2c26:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80a2c2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a2c2e:	42bb      	cmp	r3, r7
 80a2c30:	bf08      	it	eq
 80a2c32:	42b2      	cmpeq	r2, r6
 80a2c34:	d013      	beq.n	80a2c5e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a2c36:	a903      	add	r1, sp, #12
 80a2c38:	4668      	mov	r0, sp
 80a2c3a:	e9cd 6700 	strd	r6, r7, [sp]
 80a2c3e:	f002 f917 	bl	80a4e70 <localtime_r>
	calendar_time.tm_year += 1900;
 80a2c42:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2c44:	4d09      	ldr	r5, [pc, #36]	; (80a2c6c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 80a2c46:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2c4a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a2c4c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a2c56:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2c5a:	6823      	ldr	r3, [r4, #0]
 80a2c5c:	602b      	str	r3, [r5, #0]
    }
}
 80a2c5e:	b00c      	add	sp, #48	; 0x30
 80a2c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2c64:	20000388 	.word	0x20000388
 80a2c68:	20000380 	.word	0x20000380
 80a2c6c:	20000358 	.word	0x20000358
 80a2c70:	20000390 	.word	0x20000390

080a2c74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a2c74:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2c76:	2000      	movs	r0, #0
 80a2c78:	f7ff fd20 	bl	80a26bc <spark_sync_time_pending>
 80a2c7c:	b128      	cbz	r0, 80a2c8a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2c7e:	f7ff fcfd 	bl	80a267c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2c82:	f080 0001 	eor.w	r0, r0, #1
 80a2c86:	b2c0      	uxtb	r0, r0
    }
 80a2c88:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2c8a:	2001      	movs	r0, #1
 80a2c8c:	e7fc      	b.n	80a2c88 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a2c90 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 80a2c90:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a2c92:	f7ff ffb9 	bl	80a2c08 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 80a2c96:	4b02      	ldr	r3, [pc, #8]	; (80a2ca0 <_ZN9TimeClass7weekdayEx+0x10>)
 80a2c98:	6998      	ldr	r0, [r3, #24]
}
 80a2c9a:	3001      	adds	r0, #1
 80a2c9c:	bd08      	pop	{r3, pc}
 80a2c9e:	bf00      	nop
 80a2ca0:	20000358 	.word	0x20000358

080a2ca4 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a2ca4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a2ca6:	f7ff ffaf 	bl	80a2c08 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a2caa:	4b02      	ldr	r3, [pc, #8]	; (80a2cb4 <_ZN9TimeClass5monthEx+0x10>)
 80a2cac:	6918      	ldr	r0, [r3, #16]
}
 80a2cae:	3001      	adds	r0, #1
 80a2cb0:	bd08      	pop	{r3, pc}
 80a2cb2:	bf00      	nop
 80a2cb4:	20000358 	.word	0x20000358

080a2cb8 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2cb8:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2cba:	490a      	ldr	r1, [pc, #40]	; (80a2ce4 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a2cbc:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2cbe:	f001 fee3 	bl	80a4a88 <__aeabi_fcmplt>
 80a2cc2:	b968      	cbnz	r0, 80a2ce0 <_ZN9TimeClass4zoneEf+0x28>
 80a2cc4:	4620      	mov	r0, r4
 80a2cc6:	4908      	ldr	r1, [pc, #32]	; (80a2ce8 <_ZN9TimeClass4zoneEf+0x30>)
 80a2cc8:	f001 fefc 	bl	80a4ac4 <__aeabi_fcmpgt>
 80a2ccc:	b940      	cbnz	r0, 80a2ce0 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a2cce:	4907      	ldr	r1, [pc, #28]	; (80a2cec <_ZN9TimeClass4zoneEf+0x34>)
 80a2cd0:	4620      	mov	r0, r4
 80a2cd2:	f001 fd3b 	bl	80a474c <__aeabi_fmul>
 80a2cd6:	f001 ff25 	bl	80a4b24 <__aeabi_f2lz>
 80a2cda:	4b05      	ldr	r3, [pc, #20]	; (80a2cf0 <_ZN9TimeClass4zoneEf+0x38>)
 80a2cdc:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a2ce0:	bd10      	pop	{r4, pc}
 80a2ce2:	bf00      	nop
 80a2ce4:	c1400000 	.word	0xc1400000
 80a2ce8:	41600000 	.word	0x41600000
 80a2cec:	45610000 	.word	0x45610000
 80a2cf0:	20000388 	.word	0x20000388

080a2cf4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2cf4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a2cf6:	2000      	movs	r0, #0
 80a2cf8:	f7ff faf8 	bl	80a22ec <hal_rtc_time_is_valid>
    if (rtcstate)
 80a2cfc:	4604      	mov	r4, r0
 80a2cfe:	b9a0      	cbnz	r0, 80a2d2a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2d00:	f7ff fbde 	bl	80a24c0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2d04:	2801      	cmp	r0, #1
 80a2d06:	d110      	bne.n	80a2d2a <_ZN9TimeClass7isValidEv+0x36>
 80a2d08:	4620      	mov	r0, r4
 80a2d0a:	f7ff fc09 	bl	80a2520 <system_thread_get_state>
 80a2d0e:	b960      	cbnz	r0, 80a2d2a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a2d10:	f7ff ffb0 	bl	80a2c74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2d14:	b910      	cbnz	r0, 80a2d1c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a2d16:	f7ff fca1 	bl	80a265c <spark_process>
        while (_while() && !_condition()) {
 80a2d1a:	e7f9      	b.n	80a2d10 <_ZN9TimeClass7isValidEv+0x1c>
 80a2d1c:	f7ff ffaa 	bl	80a2c74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a2d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a2d24:	2000      	movs	r0, #0
 80a2d26:	f7ff bae1 	b.w	80a22ec <hal_rtc_time_is_valid>
}
 80a2d2a:	4620      	mov	r0, r4
 80a2d2c:	bd10      	pop	{r4, pc}

080a2d2e <_ZN9TimeClass3nowEv>:
{
 80a2d2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a2d30:	f7ff ffe0 	bl	80a2cf4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a2d34:	2210      	movs	r2, #16
 80a2d36:	2100      	movs	r1, #0
 80a2d38:	4668      	mov	r0, sp
 80a2d3a:	f002 f99d 	bl	80a5078 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a2d3e:	2100      	movs	r1, #0
 80a2d40:	4668      	mov	r0, sp
 80a2d42:	f7ff fadb 	bl	80a22fc <hal_rtc_get_time>
}
 80a2d46:	9800      	ldr	r0, [sp, #0]
 80a2d48:	b005      	add	sp, #20
 80a2d4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2d50 <_ZN9TimeClass4hourEv>:
{
 80a2d50:	b508      	push	{r3, lr}
	return hour(now());
 80a2d52:	f7ff ffec 	bl	80a2d2e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2d56:	17c1      	asrs	r1, r0, #31
 80a2d58:	f7ff ff56 	bl	80a2c08 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2d5c:	4b01      	ldr	r3, [pc, #4]	; (80a2d64 <_ZN9TimeClass4hourEv+0x14>)
 80a2d5e:	6898      	ldr	r0, [r3, #8]
 80a2d60:	bd08      	pop	{r3, pc}
 80a2d62:	bf00      	nop
 80a2d64:	20000358 	.word	0x20000358

080a2d68 <_ZN9TimeClass6minuteEv>:
{
 80a2d68:	b508      	push	{r3, lr}
	return minute(now());
 80a2d6a:	f7ff ffe0 	bl	80a2d2e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2d6e:	17c1      	asrs	r1, r0, #31
 80a2d70:	f7ff ff4a 	bl	80a2c08 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2d74:	4b01      	ldr	r3, [pc, #4]	; (80a2d7c <_ZN9TimeClass6minuteEv+0x14>)
 80a2d76:	6858      	ldr	r0, [r3, #4]
 80a2d78:	bd08      	pop	{r3, pc}
 80a2d7a:	bf00      	nop
 80a2d7c:	20000358 	.word	0x20000358

080a2d80 <_ZN9TimeClass6secondEv>:
{
 80a2d80:	b508      	push	{r3, lr}
	return second(now());
 80a2d82:	f7ff ffd4 	bl	80a2d2e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2d86:	17c1      	asrs	r1, r0, #31
 80a2d88:	f7ff ff3e 	bl	80a2c08 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2d8c:	4b01      	ldr	r3, [pc, #4]	; (80a2d94 <_ZN9TimeClass6secondEv+0x14>)
 80a2d8e:	6818      	ldr	r0, [r3, #0]
 80a2d90:	bd08      	pop	{r3, pc}
 80a2d92:	bf00      	nop
 80a2d94:	20000358 	.word	0x20000358

080a2d98 <_ZN9TimeClass3dayEv>:
{
 80a2d98:	b508      	push	{r3, lr}
	return day(now());
 80a2d9a:	f7ff ffc8 	bl	80a2d2e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2d9e:	17c1      	asrs	r1, r0, #31
 80a2da0:	f7ff ff32 	bl	80a2c08 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2da4:	4b01      	ldr	r3, [pc, #4]	; (80a2dac <_ZN9TimeClass3dayEv+0x14>)
 80a2da6:	68d8      	ldr	r0, [r3, #12]
 80a2da8:	bd08      	pop	{r3, pc}
 80a2daa:	bf00      	nop
 80a2dac:	20000358 	.word	0x20000358

080a2db0 <_ZN9TimeClass7weekdayEv>:
{
 80a2db0:	b508      	push	{r3, lr}
	return weekday(now());
 80a2db2:	f7ff ffbc 	bl	80a2d2e <_ZN9TimeClass3nowEv>
}
 80a2db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 80a2dba:	17c1      	asrs	r1, r0, #31
 80a2dbc:	f7ff bf68 	b.w	80a2c90 <_ZN9TimeClass7weekdayEx>

080a2dc0 <_ZN9TimeClass5monthEv>:
{
 80a2dc0:	b508      	push	{r3, lr}
	return month(now());
 80a2dc2:	f7ff ffb4 	bl	80a2d2e <_ZN9TimeClass3nowEv>
}
 80a2dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a2dca:	17c1      	asrs	r1, r0, #31
 80a2dcc:	f7ff bf6a 	b.w	80a2ca4 <_ZN9TimeClass5monthEx>

080a2dd0 <_ZN9TimeClass4yearEv>:
{
 80a2dd0:	b508      	push	{r3, lr}
	return year(now());
 80a2dd2:	f7ff ffac 	bl	80a2d2e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2dd6:	17c1      	asrs	r1, r0, #31
 80a2dd8:	f7ff ff16 	bl	80a2c08 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2ddc:	4b01      	ldr	r3, [pc, #4]	; (80a2de4 <_ZN9TimeClass4yearEv+0x14>)
 80a2dde:	6958      	ldr	r0, [r3, #20]
 80a2de0:	bd08      	pop	{r3, pc}
 80a2de2:	bf00      	nop
 80a2de4:	20000358 	.word	0x20000358

080a2de8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2de8:	4b02      	ldr	r3, [pc, #8]	; (80a2df4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2dea:	681a      	ldr	r2, [r3, #0]
 80a2dec:	4b02      	ldr	r3, [pc, #8]	; (80a2df8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2dee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a2df0:	4770      	bx	lr
 80a2df2:	bf00      	nop
 80a2df4:	20000058 	.word	0x20000058
 80a2df8:	20000354 	.word	0x20000354

080a2dfc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2dfc:	2100      	movs	r1, #0
 80a2dfe:	f7ff bb6f 	b.w	80a24e0 <system_delay_ms>

080a2e02 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2e02:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2e04:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a2e06:	4604      	mov	r4, r0
      if (_M_manager)
 80a2e08:	b113      	cbz	r3, 80a2e10 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2e0a:	2203      	movs	r2, #3
 80a2e0c:	4601      	mov	r1, r0
 80a2e0e:	4798      	blx	r3
    }
 80a2e10:	4620      	mov	r0, r4
 80a2e12:	bd10      	pop	{r4, pc}

080a2e14 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2e14:	b510      	push	{r4, lr}
 80a2e16:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2e18:	f7ff fff3 	bl	80a2e02 <_ZNSt14_Function_baseD1Ev>
 80a2e1c:	4620      	mov	r0, r4
 80a2e1e:	bd10      	pop	{r4, pc}

080a2e20 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a2e20:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2e22:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a2e24:	460b      	mov	r3, r1
 80a2e26:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2e28:	c803      	ldmia	r0, {r0, r1}
 80a2e2a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a2e2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2e32:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a2e3a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a2e3e:	b002      	add	sp, #8
 80a2e40:	bd10      	pop	{r4, pc}
	...

080a2e44 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2e44:	2300      	movs	r3, #0
 80a2e46:	4803      	ldr	r0, [pc, #12]	; (80a2e54 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2e48:	4a03      	ldr	r2, [pc, #12]	; (80a2e58 <_GLOBAL__sub_I_RGB+0x14>)
 80a2e4a:	4904      	ldr	r1, [pc, #16]	; (80a2e5c <_GLOBAL__sub_I_RGB+0x18>)
 80a2e4c:	6083      	str	r3, [r0, #8]
 80a2e4e:	f000 bf25 	b.w	80a3c9c <__aeabi_atexit>
 80a2e52:	bf00      	nop
 80a2e54:	20000398 	.word	0x20000398
 80a2e58:	20000128 	.word	0x20000128
 80a2e5c:	080a2e15 	.word	0x080a2e15

080a2e60 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2e60:	4b01      	ldr	r3, [pc, #4]	; (80a2e68 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2e62:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2e64:	4770      	bx	lr
 80a2e66:	bf00      	nop
 80a2e68:	2000005c 	.word	0x2000005c

080a2e6c <serialEventRun>:
{
 80a2e6c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2e6e:	4b13      	ldr	r3, [pc, #76]	; (80a2ebc <serialEventRun+0x50>)
 80a2e70:	b143      	cbz	r3, 80a2e84 <serialEventRun+0x18>
 80a2e72:	f000 fbf7 	bl	80a3664 <_Z16_fetch_usbserialv>
 80a2e76:	6803      	ldr	r3, [r0, #0]
 80a2e78:	691b      	ldr	r3, [r3, #16]
 80a2e7a:	4798      	blx	r3
 80a2e7c:	2800      	cmp	r0, #0
 80a2e7e:	dd01      	ble.n	80a2e84 <serialEventRun+0x18>
        serialEvent();
 80a2e80:	f7fd fabc 	bl	80a03fc <_Z11serialEventv>
    if (serialEvent1 && Serial1.available()>0)
 80a2e84:	4b0e      	ldr	r3, [pc, #56]	; (80a2ec0 <serialEventRun+0x54>)
 80a2e86:	b143      	cbz	r3, 80a2e9a <serialEventRun+0x2e>
 80a2e88:	f000 fc9a 	bl	80a37c0 <_Z22__fetch_global_Serial1v>
 80a2e8c:	6803      	ldr	r3, [r0, #0]
 80a2e8e:	691b      	ldr	r3, [r3, #16]
 80a2e90:	4798      	blx	r3
 80a2e92:	2800      	cmp	r0, #0
 80a2e94:	dd01      	ble.n	80a2e9a <serialEventRun+0x2e>
        serialEvent1();
 80a2e96:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2e9a:	4b0a      	ldr	r3, [pc, #40]	; (80a2ec4 <serialEventRun+0x58>)
 80a2e9c:	b10b      	cbz	r3, 80a2ea2 <serialEventRun+0x36>
 80a2e9e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2ea2:	4b09      	ldr	r3, [pc, #36]	; (80a2ec8 <serialEventRun+0x5c>)
 80a2ea4:	b143      	cbz	r3, 80a2eb8 <serialEventRun+0x4c>
 80a2ea6:	f000 fc0d 	bl	80a36c4 <_Z17_fetch_usbserial1v>
 80a2eaa:	6803      	ldr	r3, [r0, #0]
 80a2eac:	691b      	ldr	r3, [r3, #16]
 80a2eae:	4798      	blx	r3
 80a2eb0:	2800      	cmp	r0, #0
 80a2eb2:	dd01      	ble.n	80a2eb8 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2eb4:	f3af 8000 	nop.w
}
 80a2eb8:	bd08      	pop	{r3, pc}
 80a2eba:	bf00      	nop
 80a2ebc:	080a03fd 	.word	0x080a03fd
	...

080a2ecc <_post_loop>:
{
 80a2ecc:	b508      	push	{r3, lr}
	serialEventRun();
 80a2ece:	f7ff ffcd 	bl	80a2e6c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2ed2:	f7ff f9eb 	bl	80a22ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2ed6:	4b01      	ldr	r3, [pc, #4]	; (80a2edc <_post_loop+0x10>)
 80a2ed8:	6018      	str	r0, [r3, #0]
}
 80a2eda:	bd08      	pop	{r3, pc}
 80a2edc:	20000420 	.word	0x20000420

080a2ee0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2ee0:	4802      	ldr	r0, [pc, #8]	; (80a2eec <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2ee2:	4a03      	ldr	r2, [pc, #12]	; (80a2ef0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2ee4:	4903      	ldr	r1, [pc, #12]	; (80a2ef4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2ee6:	1a12      	subs	r2, r2, r0
 80a2ee8:	f002 b8b8 	b.w	80a505c <memcpy>
 80a2eec:	40024000 	.word	0x40024000
 80a2ef0:	40024004 	.word	0x40024004
 80a2ef4:	080a6a88 	.word	0x080a6a88

080a2ef8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2ef8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2efa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2efc:	461a      	mov	r2, r3
 80a2efe:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2f02:	9300      	str	r3, [sp, #0]
 80a2f04:	f7ff fb1e 	bl	80a2544 <system_ctrl_set_result>
}
 80a2f08:	b003      	add	sp, #12
 80a2f0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2f10 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2f10:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2f12:	8843      	ldrh	r3, [r0, #2]
 80a2f14:	2b0a      	cmp	r3, #10
 80a2f16:	d008      	beq.n	80a2f2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2f18:	2b50      	cmp	r3, #80	; 0x50
 80a2f1a:	d10b      	bne.n	80a2f34 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2f1c:	4b09      	ldr	r3, [pc, #36]	; (80a2f44 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2f1e:	681b      	ldr	r3, [r3, #0]
 80a2f20:	b14b      	cbz	r3, 80a2f36 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2f22:	b003      	add	sp, #12
 80a2f24:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2f28:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2f2a:	f7ff ffe5 	bl	80a2ef8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2f2e:	b003      	add	sp, #12
 80a2f30:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2f34:	2300      	movs	r3, #0
 80a2f36:	461a      	mov	r2, r3
 80a2f38:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2f3c:	9300      	str	r3, [sp, #0]
 80a2f3e:	f7ff fb01 	bl	80a2544 <system_ctrl_set_result>
}
 80a2f42:	e7f4      	b.n	80a2f2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2f44:	200003ac 	.word	0x200003ac

080a2f48 <module_user_init_hook>:
{
 80a2f48:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2f4a:	4c12      	ldr	r4, [pc, #72]	; (80a2f94 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2f4c:	2100      	movs	r1, #0
 80a2f4e:	4812      	ldr	r0, [pc, #72]	; (80a2f98 <module_user_init_hook+0x50>)
 80a2f50:	f7ff fc04 	bl	80a275c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2f54:	4d11      	ldr	r5, [pc, #68]	; (80a2f9c <module_user_init_hook+0x54>)
 80a2f56:	6823      	ldr	r3, [r4, #0]
 80a2f58:	42ab      	cmp	r3, r5
 80a2f5a:	bf0c      	ite	eq
 80a2f5c:	2201      	moveq	r2, #1
 80a2f5e:	2200      	movne	r2, #0
 80a2f60:	4b0f      	ldr	r3, [pc, #60]	; (80a2fa0 <module_user_init_hook+0x58>)
 80a2f62:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2f64:	d002      	beq.n	80a2f6c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a2f66:	f7ff ffbb 	bl	80a2ee0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2f6a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2f6c:	f7ff f98e 	bl	80a228c <HAL_RNG_GetRandomNumber>
 80a2f70:	4604      	mov	r4, r0
    srand(seed);
 80a2f72:	f002 f889 	bl	80a5088 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2f76:	4b0b      	ldr	r3, [pc, #44]	; (80a2fa4 <module_user_init_hook+0x5c>)
 80a2f78:	b113      	cbz	r3, 80a2f80 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a2f7a:	4620      	mov	r0, r4
 80a2f7c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2f80:	2100      	movs	r1, #0
 80a2f82:	4808      	ldr	r0, [pc, #32]	; (80a2fa4 <module_user_init_hook+0x5c>)
 80a2f84:	f7ff fba2 	bl	80a26cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2f8c:	2100      	movs	r1, #0
 80a2f8e:	4806      	ldr	r0, [pc, #24]	; (80a2fa8 <module_user_init_hook+0x60>)
 80a2f90:	f7ff bace 	b.w	80a2530 <system_ctrl_set_app_request_handler>
 80a2f94:	40024000 	.word	0x40024000
 80a2f98:	080a2e61 	.word	0x080a2e61
 80a2f9c:	9a271c1e 	.word	0x9a271c1e
 80a2fa0:	200003a8 	.word	0x200003a8
 80a2fa4:	00000000 	.word	0x00000000
 80a2fa8:	080a2f11 	.word	0x080a2f11

080a2fac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2fac:	4770      	bx	lr

080a2fae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a2fae:	2000      	movs	r0, #0
 80a2fb0:	4770      	bx	lr

080a2fb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2fb2:	b510      	push	{r4, lr}
 80a2fb4:	4604      	mov	r4, r0
 80a2fb6:	2110      	movs	r1, #16
 80a2fb8:	f000 fe75 	bl	80a3ca6 <_ZdlPvj>
 80a2fbc:	4620      	mov	r0, r4
 80a2fbe:	bd10      	pop	{r4, pc}

080a2fc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a2fc0:	b508      	push	{r3, lr}
      { delete this; }
 80a2fc2:	f7ff fff6 	bl	80a2fb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a2fc6:	bd08      	pop	{r3, pc}

080a2fc8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2fc8:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a2fca:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a2fcc:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a2fd0:	6002      	str	r2, [r0, #0]
 80a2fd2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2fd4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2fd6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2fd8:	680c      	ldr	r4, [r1, #0]
 80a2fda:	8085      	strh	r5, [r0, #4]
 80a2fdc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2fde:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a2fe0:	bd30      	pop	{r4, r5, pc}

080a2fe2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a2fe2:	b510      	push	{r4, lr}
 80a2fe4:	4604      	mov	r4, r0
    free((void*)msg_);
 80a2fe6:	6800      	ldr	r0, [r0, #0]
 80a2fe8:	f7ff fb80 	bl	80a26ec <free>
}
 80a2fec:	4620      	mov	r0, r4
 80a2fee:	bd10      	pop	{r4, pc}

080a2ff0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a2ff0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2ff2:	68c4      	ldr	r4, [r0, #12]
 80a2ff4:	b1f4      	cbz	r4, 80a3034 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a2ff6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2ff8:	2b02      	cmp	r3, #2
 80a2ffa:	d103      	bne.n	80a3004 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a2ffc:	f104 000c 	add.w	r0, r4, #12
 80a3000:	f7ff ffef 	bl	80a2fe2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a3004:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a3006:	b135      	cbz	r5, 80a3016 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a3008:	4628      	mov	r0, r5
 80a300a:	f7ff fefa 	bl	80a2e02 <_ZNSt14_Function_baseD1Ev>
 80a300e:	2110      	movs	r1, #16
 80a3010:	4628      	mov	r0, r5
 80a3012:	f000 fe48 	bl	80a3ca6 <_ZdlPvj>
 80a3016:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a3018:	b135      	cbz	r5, 80a3028 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a301a:	4628      	mov	r0, r5
 80a301c:	f7ff fef1 	bl	80a2e02 <_ZNSt14_Function_baseD1Ev>
 80a3020:	2110      	movs	r1, #16
 80a3022:	4628      	mov	r0, r5
 80a3024:	f000 fe3f 	bl	80a3ca6 <_ZdlPvj>
 80a3028:	4620      	mov	r0, r4
 80a302a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a302e:	2114      	movs	r1, #20
 80a3030:	f000 be39 	b.w	80a3ca6 <_ZdlPvj>
 80a3034:	bd38      	pop	{r3, r4, r5, pc}

080a3036 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a3036:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3038:	460e      	mov	r6, r1
 80a303a:	4604      	mov	r4, r0
 80a303c:	f856 3b04 	ldr.w	r3, [r6], #4
 80a3040:	460d      	mov	r5, r1
 80a3042:	a801      	add	r0, sp, #4
 80a3044:	4631      	mov	r1, r6
 80a3046:	9300      	str	r3, [sp, #0]
 80a3048:	f7ff fdcf 	bl	80a2bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a304c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a304e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3050:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a3052:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a3054:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a3056:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a3058:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a305a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a305c:	f7fd f837 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3060:	4630      	mov	r0, r6
 80a3062:	f7fd f834 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a3066:	4628      	mov	r0, r5
 80a3068:	2108      	movs	r1, #8
 80a306a:	f000 fe1c 	bl	80a3ca6 <_ZdlPvj>
        return p;
    }
 80a306e:	4620      	mov	r0, r4
 80a3070:	b002      	add	sp, #8
 80a3072:	bd70      	pop	{r4, r5, r6, pc}

080a3074 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3074:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a3076:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3078:	b90a      	cbnz	r2, 80a307e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a307a:	f000 fe18 	bl	80a3cae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a307e:	68c3      	ldr	r3, [r0, #12]
    }
 80a3080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3084:	4718      	bx	r3

080a3086 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3086:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a3088:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a308a:	f100 0110 	add.w	r1, r0, #16
 80a308e:	f7ff fff1 	bl	80a3074 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a3092:	bd08      	pop	{r3, pc}

080a3094 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a3094:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a3096:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3098:	b90a      	cbnz	r2, 80a309e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a309a:	f000 fe08 	bl	80a3cae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a309e:	68c3      	ldr	r3, [r0, #12]
    }
 80a30a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a30a4:	4718      	bx	r3

080a30a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a30a6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a30a8:	6800      	ldr	r0, [r0, #0]
 80a30aa:	f100 0110 	add.w	r1, r0, #16
 80a30ae:	f7ff fff1 	bl	80a3094 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a30b2:	bd08      	pop	{r3, pc}

080a30b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a30b4:	b538      	push	{r3, r4, r5, lr}
 80a30b6:	2300      	movs	r3, #0
 80a30b8:	4604      	mov	r4, r0
 80a30ba:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a30bc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a30be:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a30c0:	f7fc ffe9 	bl	80a0096 <_Znwj>
 80a30c4:	b128      	cbz	r0, 80a30d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a30c6:	2301      	movs	r3, #1
 80a30c8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a30cc:	4b02      	ldr	r3, [pc, #8]	; (80a30d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a30ce:	60c5      	str	r5, [r0, #12]
 80a30d0:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a30d2:	6020      	str	r0, [r4, #0]
	}
 80a30d4:	4620      	mov	r0, r4
 80a30d6:	bd38      	pop	{r3, r4, r5, pc}
 80a30d8:	080a6784 	.word	0x080a6784

080a30dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a30dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a30de:	2300      	movs	r3, #0
 80a30e0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a30e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a30e4:	4604      	mov	r4, r0
 80a30e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a30e8:	b12b      	cbz	r3, 80a30f6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a30ea:	2202      	movs	r2, #2
 80a30ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a30ee:	68eb      	ldr	r3, [r5, #12]
 80a30f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a30f2:	68ab      	ldr	r3, [r5, #8]
 80a30f4:	60a3      	str	r3, [r4, #8]
    }
 80a30f6:	4620      	mov	r0, r4
 80a30f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a30fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a30fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a30fe:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3100:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a3102:	4668      	mov	r0, sp
 80a3104:	f7ff ff60 	bl	80a2fc8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a3108:	f04f 0302 	mov.w	r3, #2
 80a310c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a3110:	2a00      	cmp	r2, #0
 80a3112:	d103      	bne.n	80a311c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a3114:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a3118:	2900      	cmp	r1, #0
 80a311a:	d1f7      	bne.n	80a310c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a311c:	d125      	bne.n	80a316a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a311e:	f104 050c 	add.w	r5, r4, #12
 80a3122:	4669      	mov	r1, sp
 80a3124:	4628      	mov	r0, r5
 80a3126:	f7ff ff4f 	bl	80a2fc8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a312a:	2301      	movs	r3, #1
 80a312c:	f3bf 8f5b 	dmb	ish
 80a3130:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a3132:	2000      	movs	r0, #0
 80a3134:	f3bf 8f5b 	dmb	ish
 80a3138:	f104 0308 	add.w	r3, r4, #8
 80a313c:	e853 6f00 	ldrex	r6, [r3]
 80a3140:	e843 0200 	strex	r2, r0, [r3]
 80a3144:	2a00      	cmp	r2, #0
 80a3146:	d1f9      	bne.n	80a313c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a3148:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a314c:	b16e      	cbz	r6, 80a316a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a314e:	f7ff f9d7 	bl	80a2500 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a3152:	b178      	cbz	r0, 80a3174 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3154:	4629      	mov	r1, r5
 80a3156:	4630      	mov	r0, r6
 80a3158:	f7ff ff8c 	bl	80a3074 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a315c:	4630      	mov	r0, r6
 80a315e:	f7ff fe50 	bl	80a2e02 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a3162:	2110      	movs	r1, #16
 80a3164:	4630      	mov	r0, r6
 80a3166:	f000 fd9e 	bl	80a3ca6 <_ZdlPvj>
        p_->setError(std::move(error));
 80a316a:	4668      	mov	r0, sp
 80a316c:	f7ff ff39 	bl	80a2fe2 <_ZN8particle5ErrorD1Ev>
    }
 80a3170:	b009      	add	sp, #36	; 0x24
 80a3172:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3174:	4631      	mov	r1, r6
 80a3176:	a802      	add	r0, sp, #8
 80a3178:	f7ff ffb0 	bl	80a30dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a317c:	68e0      	ldr	r0, [r4, #12]
 80a317e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a3182:	b108      	cbz	r0, 80a3188 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a3184:	f001 ffb6 	bl	80a50f4 <strdup>
        type_(type) {
 80a3188:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a318a:	2010      	movs	r0, #16
 80a318c:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a3190:	f7fc ff81 	bl	80a0096 <_Znwj>
 80a3194:	4605      	mov	r5, r0
 80a3196:	b1e8      	cbz	r0, 80a31d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a3198:	2700      	movs	r7, #0
 80a319a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a319c:	2018      	movs	r0, #24
 80a319e:	f7fc ff7a 	bl	80a0096 <_Znwj>
 80a31a2:	4604      	mov	r4, r0
 80a31a4:	b188      	cbz	r0, 80a31ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a31a6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a31a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a31aa:	a802      	add	r0, sp, #8
 80a31ac:	f7ff fe38 	bl	80a2e20 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a31b0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a31b2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a31b4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a31b6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a31b8:	9204      	str	r2, [sp, #16]
 80a31ba:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a31bc:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a31be:	60e3      	str	r3, [r4, #12]
 80a31c0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a31c4:	9205      	str	r2, [sp, #20]
 80a31c6:	f7ff feff 	bl	80a2fc8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a31ca:	4b08      	ldr	r3, [pc, #32]	; (80a31ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a31cc:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a31ce:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a31d0:	4b07      	ldr	r3, [pc, #28]	; (80a31f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a31d2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a31d4:	a806      	add	r0, sp, #24
 80a31d6:	f7ff ff04 	bl	80a2fe2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a31da:	a802      	add	r0, sp, #8
 80a31dc:	f7ff fe11 	bl	80a2e02 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a31e0:	2200      	movs	r2, #0
 80a31e2:	4629      	mov	r1, r5
 80a31e4:	4803      	ldr	r0, [pc, #12]	; (80a31f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a31e6:	f7ff f993 	bl	80a2510 <application_thread_invoke>
 80a31ea:	e7b7      	b.n	80a315c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a31ec:	080a3087 	.word	0x080a3087
 80a31f0:	080a331d 	.word	0x080a331d
 80a31f4:	080a3845 	.word	0x080a3845

080a31f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a31f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a31fc:	b08a      	sub	sp, #40	; 0x28
 80a31fe:	4605      	mov	r5, r0
 80a3200:	460c      	mov	r4, r1
 80a3202:	4617      	mov	r7, r2
 80a3204:	4698      	mov	r8, r3
 80a3206:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a320a:	f7ff fa37 	bl	80a267c <spark_cloud_flag_connected>
 80a320e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a3210:	4682      	mov	sl, r0
 80a3212:	bb38      	cbnz	r0, 80a3264 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a3214:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a3218:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a321a:	a905      	add	r1, sp, #20
 80a321c:	4630      	mov	r0, r6
 80a321e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a3222:	f7ff fed1 	bl	80a2fc8 <_ZN8particle5ErrorC1EOS0_>
 80a3226:	2014      	movs	r0, #20
 80a3228:	f7fc ff35 	bl	80a0096 <_Znwj>
 80a322c:	4604      	mov	r4, r0
 80a322e:	b148      	cbz	r0, 80a3244 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a3230:	2302      	movs	r3, #2
 80a3232:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3234:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3236:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a323a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a323c:	4631      	mov	r1, r6
 80a323e:	300c      	adds	r0, #12
 80a3240:	f7ff fec2 	bl	80a2fc8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3244:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a3246:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3248:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a324c:	f7ff ff32 	bl	80a30b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3250:	4630      	mov	r0, r6
 80a3252:	f7ff fec6 	bl	80a2fe2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a3256:	a805      	add	r0, sp, #20
 80a3258:	f7ff fec3 	bl	80a2fe2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a325c:	4628      	mov	r0, r5
 80a325e:	b00a      	add	sp, #40	; 0x28
 80a3260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a3264:	230c      	movs	r3, #12
 80a3266:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a326a:	2014      	movs	r0, #20
 80a326c:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a3270:	9307      	str	r3, [sp, #28]
 80a3272:	f7fc ff10 	bl	80a0096 <_Znwj>
 80a3276:	4601      	mov	r1, r0
 80a3278:	b128      	cbz	r0, 80a3286 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a327a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a327e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3282:	f880 a001 	strb.w	sl, [r0, #1]
 80a3286:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3288:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a328a:	f7ff ff13 	bl	80a30b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a328e:	4b22      	ldr	r3, [pc, #136]	; (80a3318 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a3290:	2008      	movs	r0, #8
 80a3292:	9308      	str	r3, [sp, #32]
 80a3294:	f7fc feff 	bl	80a0096 <_Znwj>
 80a3298:	4682      	mov	sl, r0
 80a329a:	b128      	cbz	r0, 80a32a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a329c:	9b03      	ldr	r3, [sp, #12]
 80a329e:	a904      	add	r1, sp, #16
 80a32a0:	f840 3b04 	str.w	r3, [r0], #4
 80a32a4:	f7ff fca1 	bl	80a2bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a32a8:	4642      	mov	r2, r8
 80a32aa:	4639      	mov	r1, r7
 80a32ac:	4620      	mov	r0, r4
 80a32ae:	9600      	str	r6, [sp, #0]
 80a32b0:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a32b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a32b8:	f7ff f9f0 	bl	80a269c <spark_send_event>
 80a32bc:	b9b8      	cbnz	r0, 80a32ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a32be:	9b03      	ldr	r3, [sp, #12]
 80a32c0:	785b      	ldrb	r3, [r3, #1]
 80a32c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a32c6:	b993      	cbnz	r3, 80a32ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a32c8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a32cc:	a905      	add	r1, sp, #20
 80a32ce:	a803      	add	r0, sp, #12
 80a32d0:	9205      	str	r2, [sp, #20]
 80a32d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a32d6:	f7ff ff11 	bl	80a30fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a32da:	a805      	add	r0, sp, #20
 80a32dc:	f7ff fe81 	bl	80a2fe2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a32e0:	a805      	add	r0, sp, #20
 80a32e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a32e4:	f7ff fea7 	bl	80a3036 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a32e8:	a806      	add	r0, sp, #24
 80a32ea:	f7fc fef0 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a32ee:	9b03      	ldr	r3, [sp, #12]
 80a32f0:	a904      	add	r1, sp, #16
 80a32f2:	a806      	add	r0, sp, #24
 80a32f4:	9305      	str	r3, [sp, #20]
 80a32f6:	f7ff fc78 	bl	80a2bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a32fa:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a32fc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a32fe:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a3300:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a3302:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a3304:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a3306:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a3308:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a330a:	f7fc fee0 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a330e:	a804      	add	r0, sp, #16
 80a3310:	f7fc fedd 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a3314:	e7a2      	b.n	80a325c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a3316:	bf00      	nop
 80a3318:	080a33e1 	.word	0x080a33e1

080a331c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a331c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a331e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3320:	4605      	mov	r5, r0
	  switch (__op)
 80a3322:	d007      	beq.n	80a3334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a3324:	2a03      	cmp	r2, #3
 80a3326:	d018      	beq.n	80a335a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a3328:	2a01      	cmp	r2, #1
 80a332a:	d101      	bne.n	80a3330 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a332c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a332e:	6003      	str	r3, [r0, #0]
	}
 80a3330:	2000      	movs	r0, #0
 80a3332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3334:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a3336:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3338:	f7fc fead 	bl	80a0096 <_Znwj>
 80a333c:	4604      	mov	r4, r0
 80a333e:	b150      	cbz	r0, 80a3356 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3340:	4631      	mov	r1, r6
 80a3342:	f7ff fecb 	bl	80a30dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a3346:	6930      	ldr	r0, [r6, #16]
 80a3348:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a334c:	b108      	cbz	r0, 80a3352 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a334e:	f001 fed1 	bl	80a50f4 <strdup>
        type_(type) {
 80a3352:	6120      	str	r0, [r4, #16]
 80a3354:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a3356:	602c      	str	r4, [r5, #0]
	}
 80a3358:	e7ea      	b.n	80a3330 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a335a:	6804      	ldr	r4, [r0, #0]
 80a335c:	2c00      	cmp	r4, #0
 80a335e:	d0e7      	beq.n	80a3330 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a3360:	f104 0010 	add.w	r0, r4, #16
 80a3364:	f7ff fe3d 	bl	80a2fe2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a3368:	4620      	mov	r0, r4
 80a336a:	f7ff fd4a 	bl	80a2e02 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a336e:	2118      	movs	r1, #24
 80a3370:	4620      	mov	r0, r4
 80a3372:	f000 fc98 	bl	80a3ca6 <_ZdlPvj>
 80a3376:	e7db      	b.n	80a3330 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a3378 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a3378:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a337a:	2300      	movs	r3, #0
 80a337c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a337e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a3380:	4604      	mov	r4, r0
 80a3382:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a3384:	b12b      	cbz	r3, 80a3392 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3386:	2202      	movs	r2, #2
 80a3388:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a338a:	68eb      	ldr	r3, [r5, #12]
 80a338c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a338e:	68ab      	ldr	r3, [r5, #8]
 80a3390:	60a3      	str	r3, [r4, #8]
    }
 80a3392:	4620      	mov	r0, r4
 80a3394:	bd38      	pop	{r3, r4, r5, pc}

080a3396 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a3396:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3398:	b570      	push	{r4, r5, r6, lr}
 80a339a:	4604      	mov	r4, r0
	  switch (__op)
 80a339c:	d007      	beq.n	80a33ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a339e:	2a03      	cmp	r2, #3
 80a33a0:	d012      	beq.n	80a33c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a33a2:	2a01      	cmp	r2, #1
 80a33a4:	d101      	bne.n	80a33aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a33a6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a33a8:	6003      	str	r3, [r0, #0]
	}
 80a33aa:	2000      	movs	r0, #0
 80a33ac:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a33ae:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a33b0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a33b2:	f7fc fe70 	bl	80a0096 <_Znwj>
 80a33b6:	4605      	mov	r5, r0
 80a33b8:	b120      	cbz	r0, 80a33c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a33ba:	4631      	mov	r1, r6
 80a33bc:	f7ff ffdc 	bl	80a3378 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a33c0:	7c33      	ldrb	r3, [r6, #16]
 80a33c2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a33c4:	6025      	str	r5, [r4, #0]
	}
 80a33c6:	e7f0      	b.n	80a33aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a33c8:	6804      	ldr	r4, [r0, #0]
 80a33ca:	2c00      	cmp	r4, #0
 80a33cc:	d0ed      	beq.n	80a33aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a33ce:	4620      	mov	r0, r4
 80a33d0:	f7ff fd17 	bl	80a2e02 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a33d4:	2114      	movs	r1, #20
 80a33d6:	4620      	mov	r0, r4
 80a33d8:	f000 fc65 	bl	80a3ca6 <_ZdlPvj>
 80a33dc:	e7e5      	b.n	80a33aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a33e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a33e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a33e2:	4604      	mov	r4, r0
 80a33e4:	b089      	sub	sp, #36	; 0x24
 80a33e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a33e8:	a801      	add	r0, sp, #4
 80a33ea:	4611      	mov	r1, r2
 80a33ec:	f7ff fe23 	bl	80a3036 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a33f0:	b1a4      	cbz	r4, 80a341c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a33f2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a33f4:	b11d      	cbz	r5, 80a33fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a33f6:	4628      	mov	r0, r5
 80a33f8:	f001 fe7c 	bl	80a50f4 <strdup>
 80a33fc:	4605      	mov	r5, r0
 80a33fe:	a801      	add	r0, sp, #4
 80a3400:	a903      	add	r1, sp, #12
        type_(type) {
 80a3402:	9503      	str	r5, [sp, #12]
 80a3404:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a3408:	f7ff fe78 	bl	80a30fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a340c:	a803      	add	r0, sp, #12
 80a340e:	f7ff fde8 	bl	80a2fe2 <_ZN8particle5ErrorD1Ev>
 80a3412:	a802      	add	r0, sp, #8
 80a3414:	f7fc fe5b 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a3418:	b009      	add	sp, #36	; 0x24
 80a341a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a341c:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a341e:	9d01      	ldr	r5, [sp, #4]
 80a3420:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a3424:	2a00      	cmp	r2, #0
 80a3426:	d103      	bne.n	80a3430 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a3428:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a342c:	2900      	cmp	r1, #0
 80a342e:	d1f7      	bne.n	80a3420 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a3430:	d1ef      	bne.n	80a3412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a3432:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a3434:	f3bf 8f5b 	dmb	ish
 80a3438:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a343a:	f3bf 8f5b 	dmb	ish
 80a343e:	1d2b      	adds	r3, r5, #4
 80a3440:	e853 6f00 	ldrex	r6, [r3]
 80a3444:	e843 4200 	strex	r2, r4, [r3]
 80a3448:	2a00      	cmp	r2, #0
 80a344a:	d1f9      	bne.n	80a3440 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a344c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a3450:	2e00      	cmp	r6, #0
 80a3452:	d0de      	beq.n	80a3412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a3454:	4620      	mov	r0, r4
 80a3456:	f7ff f853 	bl	80a2500 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a345a:	4607      	mov	r7, r0
 80a345c:	b160      	cbz	r0, 80a3478 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a345e:	4630      	mov	r0, r6
 80a3460:	f105 010c 	add.w	r1, r5, #12
 80a3464:	f7ff fe16 	bl	80a3094 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a3468:	4630      	mov	r0, r6
 80a346a:	f7ff fcca 	bl	80a2e02 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a346e:	2110      	movs	r1, #16
 80a3470:	4630      	mov	r0, r6
 80a3472:	f000 fc18 	bl	80a3ca6 <_ZdlPvj>
 80a3476:	e7cc      	b.n	80a3412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3478:	4631      	mov	r1, r6
 80a347a:	a803      	add	r0, sp, #12
 80a347c:	f7ff ff7c 	bl	80a3378 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a3480:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a3482:	2010      	movs	r0, #16
 80a3484:	f88d 301c 	strb.w	r3, [sp, #28]
 80a3488:	f7fc fe05 	bl	80a0096 <_Znwj>
 80a348c:	4605      	mov	r5, r0
 80a348e:	b1d0      	cbz	r0, 80a34c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a3490:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3492:	2014      	movs	r0, #20
 80a3494:	f7fc fdff 	bl	80a0096 <_Znwj>
 80a3498:	4604      	mov	r4, r0
 80a349a:	b178      	cbz	r0, 80a34bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a349c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a349e:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a34a0:	a803      	add	r0, sp, #12
 80a34a2:	f7ff fcbd 	bl	80a2e20 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a34a6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a34a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a34aa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a34ac:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a34ae:	9205      	str	r2, [sp, #20]
 80a34b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a34b2:	60e3      	str	r3, [r4, #12]
 80a34b4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a34b8:	9206      	str	r2, [sp, #24]
 80a34ba:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a34bc:	4b06      	ldr	r3, [pc, #24]	; (80a34d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a34be:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a34c0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a34c2:	4b06      	ldr	r3, [pc, #24]	; (80a34dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a34c4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a34c6:	a803      	add	r0, sp, #12
 80a34c8:	f7ff fc9b 	bl	80a2e02 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a34cc:	2200      	movs	r2, #0
 80a34ce:	4629      	mov	r1, r5
 80a34d0:	4803      	ldr	r0, [pc, #12]	; (80a34e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a34d2:	f7ff f81d 	bl	80a2510 <application_thread_invoke>
 80a34d6:	e7c7      	b.n	80a3468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a34d8:	080a30a7 	.word	0x080a30a7
 80a34dc:	080a3397 	.word	0x080a3397
 80a34e0:	080a3845 	.word	0x080a3845

080a34e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a34e4:	4770      	bx	lr

080a34e6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a34e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a34e8:	460e      	mov	r6, r1
 80a34ea:	2400      	movs	r4, #0
 80a34ec:	f100 0708 	add.w	r7, r0, #8
 80a34f0:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a34f2:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a34f6:	220a      	movs	r2, #10
 80a34f8:	4630      	mov	r0, r6
 80a34fa:	f7ff fb28 	bl	80a2b4e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a34fe:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3500:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a3502:	d101      	bne.n	80a3508 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a3504:	4620      	mov	r0, r4
 80a3506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a3508:	2c00      	cmp	r4, #0
 80a350a:	d0f2      	beq.n	80a34f2 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a350c:	212e      	movs	r1, #46	; 0x2e
 80a350e:	4630      	mov	r0, r6
 80a3510:	f7ff fb04 	bl	80a2b1c <_ZN5Print5printEc>
 80a3514:	4404      	add	r4, r0
 80a3516:	e7ec      	b.n	80a34f2 <_ZNK9IPAddress7printToER5Print+0xc>

080a3518 <_ZN9IPAddressD0Ev>:
 80a3518:	b510      	push	{r4, lr}
 80a351a:	4604      	mov	r4, r0
 80a351c:	2118      	movs	r1, #24
 80a351e:	f000 fbc2 	bl	80a3ca6 <_ZdlPvj>
 80a3522:	4620      	mov	r0, r4
 80a3524:	bd10      	pop	{r4, pc}
	...

080a3528 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a3528:	b510      	push	{r4, lr}
 80a352a:	4604      	mov	r4, r0
 80a352c:	4b04      	ldr	r3, [pc, #16]	; (80a3540 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a352e:	2211      	movs	r2, #17
 80a3530:	2100      	movs	r1, #0
 80a3532:	f840 3b04 	str.w	r3, [r0], #4
 80a3536:	f001 fd9f 	bl	80a5078 <memset>
}
 80a353a:	4620      	mov	r0, r4
 80a353c:	bd10      	pop	{r4, pc}
 80a353e:	bf00      	nop
 80a3540:	080a67a0 	.word	0x080a67a0

080a3544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3544:	4603      	mov	r3, r0
 80a3546:	4a07      	ldr	r2, [pc, #28]	; (80a3564 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3548:	b510      	push	{r4, lr}
 80a354a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a354e:	f101 0210 	add.w	r2, r1, #16
 80a3552:	f851 4b04 	ldr.w	r4, [r1], #4
 80a3556:	4291      	cmp	r1, r2
 80a3558:	f843 4b04 	str.w	r4, [r3], #4
 80a355c:	d1f9      	bne.n	80a3552 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a355e:	780a      	ldrb	r2, [r1, #0]
 80a3560:	701a      	strb	r2, [r3, #0]
}
 80a3562:	bd10      	pop	{r4, pc}
 80a3564:	080a67a0 	.word	0x080a67a0

080a3568 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a3568:	4a02      	ldr	r2, [pc, #8]	; (80a3574 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a356a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a356e:	2204      	movs	r2, #4
 80a3570:	7502      	strb	r2, [r0, #20]
}
 80a3572:	4770      	bx	lr
 80a3574:	080a67a0 	.word	0x080a67a0

080a3578 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a3578:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a357a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a357e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a3582:	2304      	movs	r3, #4
 80a3584:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3588:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a358c:	6044      	str	r4, [r0, #4]
 80a358e:	7503      	strb	r3, [r0, #20]
}
 80a3590:	bd10      	pop	{r4, pc}
	...

080a3594 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a3594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3596:	4d04      	ldr	r5, [pc, #16]	; (80a35a8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3598:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a359a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a359e:	9500      	str	r5, [sp, #0]
 80a35a0:	f7ff ffea 	bl	80a3578 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a35a4:	b003      	add	sp, #12
 80a35a6:	bd30      	pop	{r4, r5, pc}
 80a35a8:	080a67a0 	.word	0x080a67a0

080a35ac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a35ac:	7441      	strb	r1, [r0, #17]
}
 80a35ae:	4770      	bx	lr

080a35b0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a35b0:	4770      	bx	lr

080a35b2 <_ZN9USBSerial4readEv>:
{
 80a35b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a35b4:	2100      	movs	r1, #0
 80a35b6:	7c00      	ldrb	r0, [r0, #16]
 80a35b8:	f7fe ff62 	bl	80a2480 <HAL_USB_USART_Receive_Data>
}
 80a35bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a35c0:	bd08      	pop	{r3, pc}

080a35c2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a35c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a35c4:	2101      	movs	r1, #1
 80a35c6:	7c00      	ldrb	r0, [r0, #16]
 80a35c8:	f7fe ff5a 	bl	80a2480 <HAL_USB_USART_Receive_Data>
}
 80a35cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a35d0:	bd08      	pop	{r3, pc}

080a35d2 <_ZN9USBSerial17availableForWriteEv>:
{
 80a35d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a35d4:	7c00      	ldrb	r0, [r0, #16]
 80a35d6:	f7fe ff4b 	bl	80a2470 <HAL_USB_USART_Available_Data_For_Write>
}
 80a35da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a35de:	bd08      	pop	{r3, pc}

080a35e0 <_ZN9USBSerial9availableEv>:
{
 80a35e0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a35e2:	7c00      	ldrb	r0, [r0, #16]
 80a35e4:	f7fe ff3c 	bl	80a2460 <HAL_USB_USART_Available_Data>
}
 80a35e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a35ec:	bd08      	pop	{r3, pc}

080a35ee <_ZN9USBSerial5writeEh>:
{
 80a35ee:	b538      	push	{r3, r4, r5, lr}
 80a35f0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a35f2:	7c00      	ldrb	r0, [r0, #16]
{
 80a35f4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a35f6:	f7fe ff3b 	bl	80a2470 <HAL_USB_USART_Available_Data_For_Write>
 80a35fa:	2800      	cmp	r0, #0
 80a35fc:	dc01      	bgt.n	80a3602 <_ZN9USBSerial5writeEh+0x14>
 80a35fe:	7c60      	ldrb	r0, [r4, #17]
 80a3600:	b128      	cbz	r0, 80a360e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3602:	4629      	mov	r1, r5
 80a3604:	7c20      	ldrb	r0, [r4, #16]
 80a3606:	f7fe ff43 	bl	80a2490 <HAL_USB_USART_Send_Data>
 80a360a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a360e:	bd38      	pop	{r3, r4, r5, pc}

080a3610 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a3610:	7c00      	ldrb	r0, [r0, #16]
 80a3612:	f7fe bf45 	b.w	80a24a0 <HAL_USB_USART_Flush_Data>

080a3616 <_ZN9USBSerialD0Ev>:
 80a3616:	b510      	push	{r4, lr}
 80a3618:	4604      	mov	r4, r0
 80a361a:	2114      	movs	r1, #20
 80a361c:	f000 fb43 	bl	80a3ca6 <_ZdlPvj>
 80a3620:	4620      	mov	r0, r4
 80a3622:	bd10      	pop	{r4, pc}

080a3624 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3624:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a362a:	4604      	mov	r4, r0
 80a362c:	4608      	mov	r0, r1
 80a362e:	2100      	movs	r1, #0
 80a3630:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3634:	4b04      	ldr	r3, [pc, #16]	; (80a3648 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3636:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3638:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a363a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a363c:	4611      	mov	r1, r2
  _blocking = true;
 80a363e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a3640:	f7fe fefe 	bl	80a2440 <HAL_USB_USART_Init>
}
 80a3644:	4620      	mov	r0, r4
 80a3646:	bd10      	pop	{r4, pc}
 80a3648:	080a67b4 	.word	0x080a67b4

080a364c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a364c:	2200      	movs	r2, #0
 80a364e:	7c00      	ldrb	r0, [r0, #16]
 80a3650:	f7fe befe 	b.w	80a2450 <HAL_USB_USART_Begin>

080a3654 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3654:	b510      	push	{r4, lr}
 80a3656:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3658:	2214      	movs	r2, #20
 80a365a:	2100      	movs	r1, #0
 80a365c:	f001 fd0c 	bl	80a5078 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3660:	4620      	mov	r0, r4
 80a3662:	bd10      	pop	{r4, pc}

080a3664 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3664:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3666:	4d0f      	ldr	r5, [pc, #60]	; (80a36a4 <_Z16_fetch_usbserialv+0x40>)
{
 80a3668:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a366a:	a801      	add	r0, sp, #4
 80a366c:	f7ff fff2 	bl	80a3654 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3670:	7829      	ldrb	r1, [r5, #0]
 80a3672:	f3bf 8f5b 	dmb	ish
 80a3676:	f011 0401 	ands.w	r4, r1, #1
 80a367a:	d110      	bne.n	80a369e <_Z16_fetch_usbserialv+0x3a>
 80a367c:	4628      	mov	r0, r5
 80a367e:	f7fc fd10 	bl	80a00a2 <__cxa_guard_acquire>
 80a3682:	b160      	cbz	r0, 80a369e <_Z16_fetch_usbserialv+0x3a>
 80a3684:	4621      	mov	r1, r4
 80a3686:	aa01      	add	r2, sp, #4
 80a3688:	4807      	ldr	r0, [pc, #28]	; (80a36a8 <_Z16_fetch_usbserialv+0x44>)
 80a368a:	f7ff ffcb 	bl	80a3624 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a368e:	4628      	mov	r0, r5
 80a3690:	f7fc fd0c 	bl	80a00ac <__cxa_guard_release>
 80a3694:	4a05      	ldr	r2, [pc, #20]	; (80a36ac <_Z16_fetch_usbserialv+0x48>)
 80a3696:	4906      	ldr	r1, [pc, #24]	; (80a36b0 <_Z16_fetch_usbserialv+0x4c>)
 80a3698:	4803      	ldr	r0, [pc, #12]	; (80a36a8 <_Z16_fetch_usbserialv+0x44>)
 80a369a:	f000 faff 	bl	80a3c9c <__aeabi_atexit>
	return _usbserial;
}
 80a369e:	4802      	ldr	r0, [pc, #8]	; (80a36a8 <_Z16_fetch_usbserialv+0x44>)
 80a36a0:	b007      	add	sp, #28
 80a36a2:	bd30      	pop	{r4, r5, pc}
 80a36a4:	200003b0 	.word	0x200003b0
 80a36a8:	200003b8 	.word	0x200003b8
 80a36ac:	20000128 	.word	0x20000128
 80a36b0:	080a35b1 	.word	0x080a35b1

080a36b4 <_Z23acquireUSBSerial1Bufferv>:
 80a36b4:	b510      	push	{r4, lr}
 80a36b6:	4604      	mov	r4, r0
 80a36b8:	2214      	movs	r2, #20
 80a36ba:	2100      	movs	r1, #0
 80a36bc:	f001 fcdc 	bl	80a5078 <memset>
 80a36c0:	4620      	mov	r0, r4
 80a36c2:	bd10      	pop	{r4, pc}

080a36c4 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a36c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a36c6:	4c0f      	ldr	r4, [pc, #60]	; (80a3704 <_Z17_fetch_usbserial1v+0x40>)
{
 80a36c8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a36ca:	a801      	add	r0, sp, #4
 80a36cc:	f7ff fff2 	bl	80a36b4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a36d0:	7823      	ldrb	r3, [r4, #0]
 80a36d2:	f3bf 8f5b 	dmb	ish
 80a36d6:	07db      	lsls	r3, r3, #31
 80a36d8:	d410      	bmi.n	80a36fc <_Z17_fetch_usbserial1v+0x38>
 80a36da:	4620      	mov	r0, r4
 80a36dc:	f7fc fce1 	bl	80a00a2 <__cxa_guard_acquire>
 80a36e0:	b160      	cbz	r0, 80a36fc <_Z17_fetch_usbserial1v+0x38>
 80a36e2:	2101      	movs	r1, #1
 80a36e4:	aa01      	add	r2, sp, #4
 80a36e6:	4808      	ldr	r0, [pc, #32]	; (80a3708 <_Z17_fetch_usbserial1v+0x44>)
 80a36e8:	f7ff ff9c 	bl	80a3624 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a36ec:	4620      	mov	r0, r4
 80a36ee:	f7fc fcdd 	bl	80a00ac <__cxa_guard_release>
 80a36f2:	4a06      	ldr	r2, [pc, #24]	; (80a370c <_Z17_fetch_usbserial1v+0x48>)
 80a36f4:	4906      	ldr	r1, [pc, #24]	; (80a3710 <_Z17_fetch_usbserial1v+0x4c>)
 80a36f6:	4804      	ldr	r0, [pc, #16]	; (80a3708 <_Z17_fetch_usbserial1v+0x44>)
 80a36f8:	f000 fad0 	bl	80a3c9c <__aeabi_atexit>
  return _usbserial1;
}
 80a36fc:	4802      	ldr	r0, [pc, #8]	; (80a3708 <_Z17_fetch_usbserial1v+0x44>)
 80a36fe:	b006      	add	sp, #24
 80a3700:	bd10      	pop	{r4, pc}
 80a3702:	bf00      	nop
 80a3704:	200003b4 	.word	0x200003b4
 80a3708:	200003cc 	.word	0x200003cc
 80a370c:	20000128 	.word	0x20000128
 80a3710:	080a35b1 	.word	0x080a35b1

080a3714 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a3714:	f7fe bda2 	b.w	80a225c <HAL_Interrupts_Disable_All>

080a3718 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a3718:	f7fe bd98 	b.w	80a224c <HAL_Interrupts_Enable_All>

080a371c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a371c:	4770      	bx	lr

080a371e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a371e:	7441      	strb	r1, [r0, #17]
}
 80a3720:	4770      	bx	lr

080a3722 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a3722:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a3724:	7c00      	ldrb	r0, [r0, #16]
 80a3726:	f7fe fe39 	bl	80a239c <hal_usart_available_data_for_write>
}
 80a372a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a372e:	bd08      	pop	{r3, pc}

080a3730 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3730:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a3732:	7c00      	ldrb	r0, [r0, #16]
 80a3734:	f7fe fe0a 	bl	80a234c <hal_usart_available>
}
 80a3738:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a373c:	bd08      	pop	{r3, pc}

080a373e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a373e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3740:	7c00      	ldrb	r0, [r0, #16]
 80a3742:	f7fe fe13 	bl	80a236c <hal_usart_peek>
}
 80a3746:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a374a:	bd08      	pop	{r3, pc}

080a374c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a374c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a374e:	7c00      	ldrb	r0, [r0, #16]
 80a3750:	f7fe fe04 	bl	80a235c <hal_usart_read>
}
 80a3754:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3758:	bd08      	pop	{r3, pc}

080a375a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a375a:	7c00      	ldrb	r0, [r0, #16]
 80a375c:	f7fe be0e 	b.w	80a237c <hal_usart_flush>

080a3760 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3760:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3762:	7c46      	ldrb	r6, [r0, #17]
{
 80a3764:	4604      	mov	r4, r0
 80a3766:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3768:	b12e      	cbz	r6, 80a3776 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a376a:	4629      	mov	r1, r5
 80a376c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a376e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a3772:	f7fe bde3 	b.w	80a233c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3776:	7c00      	ldrb	r0, [r0, #16]
 80a3778:	f7fe fe10 	bl	80a239c <hal_usart_available_data_for_write>
 80a377c:	2800      	cmp	r0, #0
 80a377e:	dcf4      	bgt.n	80a376a <_ZN11USARTSerial5writeEh+0xa>
}
 80a3780:	4630      	mov	r0, r6
 80a3782:	bd70      	pop	{r4, r5, r6, pc}

080a3784 <_ZN11USARTSerialD0Ev>:
 80a3784:	b510      	push	{r4, lr}
 80a3786:	4604      	mov	r4, r0
 80a3788:	2114      	movs	r1, #20
 80a378a:	f000 fa8c 	bl	80a3ca6 <_ZdlPvj>
 80a378e:	4620      	mov	r0, r4
 80a3790:	bd10      	pop	{r4, pc}
	...

080a3794 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a3794:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3798:	b510      	push	{r4, lr}
 80a379a:	4604      	mov	r4, r0
 80a379c:	4608      	mov	r0, r1
 80a379e:	4611      	mov	r1, r2
 80a37a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a37a4:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a37a8:	4a04      	ldr	r2, [pc, #16]	; (80a37bc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a37aa:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a37ac:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a37ae:	2201      	movs	r2, #1
 80a37b0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a37b2:	461a      	mov	r2, r3
 80a37b4:	f7fe fdba 	bl	80a232c <hal_usart_init>
}
 80a37b8:	4620      	mov	r0, r4
 80a37ba:	bd10      	pop	{r4, pc}
 80a37bc:	080a67e4 	.word	0x080a67e4

080a37c0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a37c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a37c2:	4c1a      	ldr	r4, [pc, #104]	; (80a382c <_Z22__fetch_global_Serial1v+0x6c>)
 80a37c4:	6826      	ldr	r6, [r4, #0]
 80a37c6:	b94e      	cbnz	r6, 80a37dc <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a37c8:	2084      	movs	r0, #132	; 0x84
 80a37ca:	f7fc fc64 	bl	80a0096 <_Znwj>
 80a37ce:	4605      	mov	r5, r0
 80a37d0:	b118      	cbz	r0, 80a37da <_Z22__fetch_global_Serial1v+0x1a>
 80a37d2:	2284      	movs	r2, #132	; 0x84
 80a37d4:	4631      	mov	r1, r6
 80a37d6:	f001 fc4f 	bl	80a5078 <memset>
 80a37da:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a37dc:	4d14      	ldr	r5, [pc, #80]	; (80a3830 <_Z22__fetch_global_Serial1v+0x70>)
 80a37de:	682f      	ldr	r7, [r5, #0]
 80a37e0:	b94f      	cbnz	r7, 80a37f6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a37e2:	2084      	movs	r0, #132	; 0x84
 80a37e4:	f7fc fc57 	bl	80a0096 <_Znwj>
 80a37e8:	4606      	mov	r6, r0
 80a37ea:	b118      	cbz	r0, 80a37f4 <_Z22__fetch_global_Serial1v+0x34>
 80a37ec:	2284      	movs	r2, #132	; 0x84
 80a37ee:	4639      	mov	r1, r7
 80a37f0:	f001 fc42 	bl	80a5078 <memset>
 80a37f4:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a37f6:	4f0f      	ldr	r7, [pc, #60]	; (80a3834 <_Z22__fetch_global_Serial1v+0x74>)
 80a37f8:	7839      	ldrb	r1, [r7, #0]
 80a37fa:	f3bf 8f5b 	dmb	ish
 80a37fe:	f011 0601 	ands.w	r6, r1, #1
 80a3802:	d111      	bne.n	80a3828 <_Z22__fetch_global_Serial1v+0x68>
 80a3804:	4638      	mov	r0, r7
 80a3806:	f7fc fc4c 	bl	80a00a2 <__cxa_guard_acquire>
 80a380a:	b168      	cbz	r0, 80a3828 <_Z22__fetch_global_Serial1v+0x68>
 80a380c:	4631      	mov	r1, r6
 80a380e:	6822      	ldr	r2, [r4, #0]
 80a3810:	682b      	ldr	r3, [r5, #0]
 80a3812:	4809      	ldr	r0, [pc, #36]	; (80a3838 <_Z22__fetch_global_Serial1v+0x78>)
 80a3814:	f7ff ffbe 	bl	80a3794 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a3818:	4638      	mov	r0, r7
 80a381a:	f7fc fc47 	bl	80a00ac <__cxa_guard_release>
 80a381e:	4a07      	ldr	r2, [pc, #28]	; (80a383c <_Z22__fetch_global_Serial1v+0x7c>)
 80a3820:	4907      	ldr	r1, [pc, #28]	; (80a3840 <_Z22__fetch_global_Serial1v+0x80>)
 80a3822:	4805      	ldr	r0, [pc, #20]	; (80a3838 <_Z22__fetch_global_Serial1v+0x78>)
 80a3824:	f000 fa3a 	bl	80a3c9c <__aeabi_atexit>
#endif
	return serial1;
}
 80a3828:	4803      	ldr	r0, [pc, #12]	; (80a3838 <_Z22__fetch_global_Serial1v+0x78>)
 80a382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a382c:	200003e4 	.word	0x200003e4
 80a3830:	200003e8 	.word	0x200003e8
 80a3834:	200003e0 	.word	0x200003e0
 80a3838:	200003ec 	.word	0x200003ec
 80a383c:	20000128 	.word	0x20000128
 80a3840:	080a371d 	.word	0x080a371d

080a3844 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3844:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3846:	6883      	ldr	r3, [r0, #8]
 80a3848:	4604      	mov	r4, r0
 80a384a:	b90b      	cbnz	r3, 80a3850 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a384c:	f000 fa2f 	bl	80a3cae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3850:	68c3      	ldr	r3, [r0, #12]
 80a3852:	4798      	blx	r3
      if (_M_manager)
 80a3854:	68a3      	ldr	r3, [r4, #8]
 80a3856:	b11b      	cbz	r3, 80a3860 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3858:	2203      	movs	r2, #3
 80a385a:	4621      	mov	r1, r4
 80a385c:	4620      	mov	r0, r4
 80a385e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3860:	4620      	mov	r0, r4
}
 80a3862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a3866:	2110      	movs	r1, #16
 80a3868:	f000 ba1d 	b.w	80a3ca6 <_ZdlPvj>

080a386c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a386c:	4770      	bx	lr

080a386e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a386e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3870:	4606      	mov	r6, r0
 80a3872:	4615      	mov	r5, r2
 80a3874:	460c      	mov	r4, r1
 80a3876:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3878:	42bc      	cmp	r4, r7
 80a387a:	d006      	beq.n	80a388a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a387c:	6833      	ldr	r3, [r6, #0]
 80a387e:	4630      	mov	r0, r6
 80a3880:	689b      	ldr	r3, [r3, #8]
 80a3882:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3886:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a3888:	e7f6      	b.n	80a3878 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a388a:	4628      	mov	r0, r5
 80a388c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a388e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a388e:	2200      	movs	r2, #0
 80a3890:	7c00      	ldrb	r0, [r0, #16]
 80a3892:	f7fe bd8b 	b.w	80a23ac <hal_i2c_write>

080a3896 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a3896:	2100      	movs	r1, #0
 80a3898:	7c00      	ldrb	r0, [r0, #16]
 80a389a:	f7fe bd8f 	b.w	80a23bc <hal_i2c_available>

080a389e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a389e:	2100      	movs	r1, #0
 80a38a0:	7c00      	ldrb	r0, [r0, #16]
 80a38a2:	f7fe bd93 	b.w	80a23cc <hal_i2c_read>

080a38a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a38a6:	2100      	movs	r1, #0
 80a38a8:	7c00      	ldrb	r0, [r0, #16]
 80a38aa:	f7fe bd97 	b.w	80a23dc <hal_i2c_peek>

080a38ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a38ae:	2100      	movs	r1, #0
 80a38b0:	7c00      	ldrb	r0, [r0, #16]
 80a38b2:	f7fe bd9b 	b.w	80a23ec <hal_i2c_flush>

080a38b6 <_ZN7TwoWireD0Ev>:
 80a38b6:	b510      	push	{r4, lr}
 80a38b8:	4604      	mov	r4, r0
 80a38ba:	2114      	movs	r1, #20
 80a38bc:	f000 f9f3 	bl	80a3ca6 <_ZdlPvj>
 80a38c0:	4620      	mov	r0, r4
 80a38c2:	bd10      	pop	{r4, pc}

080a38c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a38c4:	b510      	push	{r4, lr}
 80a38c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a38ca:	4604      	mov	r4, r0
 80a38cc:	4608      	mov	r0, r1
 80a38ce:	2100      	movs	r1, #0
 80a38d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a38d4:	4b03      	ldr	r3, [pc, #12]	; (80a38e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a38d6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a38d8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a38da:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a38dc:	f7fe fd96 	bl	80a240c <hal_i2c_init>
}
 80a38e0:	4620      	mov	r0, r4
 80a38e2:	bd10      	pop	{r4, pc}
 80a38e4:	080a6814 	.word	0x080a6814

080a38e8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a38e8:	2200      	movs	r2, #0
 80a38ea:	6840      	ldr	r0, [r0, #4]
 80a38ec:	4611      	mov	r1, r2
 80a38ee:	f7fe be55 	b.w	80a259c <network_ready>

080a38f2 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a38f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a38f4:	4615      	mov	r5, r2
 80a38f6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a38f8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a38fa:	460e      	mov	r6, r1
 80a38fc:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a38fe:	2100      	movs	r1, #0
 80a3900:	a803      	add	r0, sp, #12
 80a3902:	f001 fbb9 	bl	80a5078 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3906:	4628      	mov	r0, r5
 80a3908:	f001 fc0f 	bl	80a512a <strlen>
 80a390c:	2700      	movs	r7, #0
 80a390e:	b281      	uxth	r1, r0
 80a3910:	6873      	ldr	r3, [r6, #4]
 80a3912:	4628      	mov	r0, r5
 80a3914:	9700      	str	r7, [sp, #0]
 80a3916:	aa03      	add	r2, sp, #12
 80a3918:	f7fe fdca 	bl	80a24b0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a391c:	b130      	cbz	r0, 80a392c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a391e:	4639      	mov	r1, r7
 80a3920:	4620      	mov	r0, r4
 80a3922:	f7ff fe21 	bl	80a3568 <_ZN9IPAddressC1Em>
    }
 80a3926:	4620      	mov	r0, r4
 80a3928:	b009      	add	sp, #36	; 0x24
 80a392a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a392c:	4620      	mov	r0, r4
 80a392e:	a903      	add	r1, sp, #12
 80a3930:	f7ff fe08 	bl	80a3544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a3934:	e7f7      	b.n	80a3926 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a3936 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a3936:	2200      	movs	r2, #0
 80a3938:	6840      	ldr	r0, [r0, #4]
 80a393a:	4611      	mov	r1, r2
 80a393c:	f7fe be4e 	b.w	80a25dc <network_listening>

080a3940 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a3940:	2200      	movs	r2, #0
 80a3942:	6840      	ldr	r0, [r0, #4]
 80a3944:	4611      	mov	r1, r2
 80a3946:	f7fe be71 	b.w	80a262c <network_get_listen_timeout>

080a394a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a394a:	2200      	movs	r2, #0
 80a394c:	6840      	ldr	r0, [r0, #4]
 80a394e:	f7fe be65 	b.w	80a261c <network_set_listen_timeout>

080a3952 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3952:	2200      	movs	r2, #0
 80a3954:	6840      	ldr	r0, [r0, #4]
 80a3956:	f081 0101 	eor.w	r1, r1, #1
 80a395a:	f7fe be37 	b.w	80a25cc <network_listen>

080a395e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a395e:	2300      	movs	r3, #0
 80a3960:	6840      	ldr	r0, [r0, #4]
 80a3962:	461a      	mov	r2, r3
 80a3964:	4619      	mov	r1, r3
 80a3966:	f7fe be29 	b.w	80a25bc <network_off>

080a396a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a396a:	2200      	movs	r2, #0
 80a396c:	6840      	ldr	r0, [r0, #4]
 80a396e:	4611      	mov	r1, r2
 80a3970:	f7fe be04 	b.w	80a257c <network_connecting>

080a3974 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3974:	2200      	movs	r2, #0
 80a3976:	2102      	movs	r1, #2
 80a3978:	6840      	ldr	r0, [r0, #4]
 80a397a:	f7fe be07 	b.w	80a258c <network_disconnect>

080a397e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a397e:	2300      	movs	r3, #0
 80a3980:	6840      	ldr	r0, [r0, #4]
 80a3982:	461a      	mov	r2, r3
 80a3984:	f7fe bdf2 	b.w	80a256c <network_connect>

080a3988 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3988:	2204      	movs	r2, #4
 80a398a:	4b02      	ldr	r3, [pc, #8]	; (80a3994 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a398c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a398e:	4a02      	ldr	r2, [pc, #8]	; (80a3998 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3990:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a3992:	4770      	bx	lr
 80a3994:	20000400 	.word	0x20000400
 80a3998:	080a683c 	.word	0x080a683c

080a399c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a399c:	2300      	movs	r3, #0
 80a399e:	6840      	ldr	r0, [r0, #4]
 80a39a0:	461a      	mov	r2, r3
 80a39a2:	f7fe bde3 	b.w	80a256c <network_connect>

080a39a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a39a6:	2200      	movs	r2, #0
 80a39a8:	2102      	movs	r1, #2
 80a39aa:	6840      	ldr	r0, [r0, #4]
 80a39ac:	f7fe bdee 	b.w	80a258c <network_disconnect>

080a39b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a39b0:	2200      	movs	r2, #0
 80a39b2:	6840      	ldr	r0, [r0, #4]
 80a39b4:	4611      	mov	r1, r2
 80a39b6:	f7fe bde1 	b.w	80a257c <network_connecting>

080a39ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a39ba:	2200      	movs	r2, #0
 80a39bc:	6840      	ldr	r0, [r0, #4]
 80a39be:	4611      	mov	r1, r2
 80a39c0:	f7fe bdec 	b.w	80a259c <network_ready>

080a39c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a39c4:	2300      	movs	r3, #0
 80a39c6:	6840      	ldr	r0, [r0, #4]
 80a39c8:	461a      	mov	r2, r3
 80a39ca:	4619      	mov	r1, r3
 80a39cc:	f7fe bdee 	b.w	80a25ac <network_on>

080a39d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a39d0:	2300      	movs	r3, #0
 80a39d2:	6840      	ldr	r0, [r0, #4]
 80a39d4:	461a      	mov	r2, r3
 80a39d6:	4619      	mov	r1, r3
 80a39d8:	f7fe bdf0 	b.w	80a25bc <network_off>

080a39dc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a39dc:	2100      	movs	r1, #0
 80a39de:	6840      	ldr	r0, [r0, #4]
 80a39e0:	f7fe be2c 	b.w	80a263c <network_is_on>

080a39e4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a39e4:	2100      	movs	r1, #0
 80a39e6:	6840      	ldr	r0, [r0, #4]
 80a39e8:	f7fe be30 	b.w	80a264c <network_is_off>

080a39ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a39ec:	2200      	movs	r2, #0
 80a39ee:	6840      	ldr	r0, [r0, #4]
 80a39f0:	f081 0101 	eor.w	r1, r1, #1
 80a39f4:	f7fe bdea 	b.w	80a25cc <network_listen>

080a39f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a39f8:	2200      	movs	r2, #0
 80a39fa:	6840      	ldr	r0, [r0, #4]
 80a39fc:	f7fe be0e 	b.w	80a261c <network_set_listen_timeout>

080a3a00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a3a00:	2200      	movs	r2, #0
 80a3a02:	6840      	ldr	r0, [r0, #4]
 80a3a04:	4611      	mov	r1, r2
 80a3a06:	f7fe be11 	b.w	80a262c <network_get_listen_timeout>

080a3a0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3a0a:	2200      	movs	r2, #0
 80a3a0c:	6840      	ldr	r0, [r0, #4]
 80a3a0e:	4611      	mov	r1, r2
 80a3a10:	f7fe bde4 	b.w	80a25dc <network_listening>

080a3a14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a3a14:	b570      	push	{r4, r5, r6, lr}
 80a3a16:	4615      	mov	r5, r2
 80a3a18:	b08e      	sub	sp, #56	; 0x38
 80a3a1a:	4604      	mov	r4, r0
    IPAddress addr;
 80a3a1c:	a808      	add	r0, sp, #32
 80a3a1e:	f7ff fd83 	bl	80a3528 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a3a22:	2211      	movs	r2, #17
 80a3a24:	2100      	movs	r1, #0
 80a3a26:	a803      	add	r0, sp, #12
 80a3a28:	f001 fb26 	bl	80a5078 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3a2c:	2600      	movs	r6, #0
 80a3a2e:	4628      	mov	r0, r5
 80a3a30:	f001 fb7b 	bl	80a512a <strlen>
 80a3a34:	4b0a      	ldr	r3, [pc, #40]	; (80a3a60 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a3a36:	9600      	str	r6, [sp, #0]
 80a3a38:	b281      	uxth	r1, r0
 80a3a3a:	685b      	ldr	r3, [r3, #4]
 80a3a3c:	4628      	mov	r0, r5
 80a3a3e:	aa03      	add	r2, sp, #12
 80a3a40:	f7fe fd36 	bl	80a24b0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3a44:	b130      	cbz	r0, 80a3a54 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a3a46:	4631      	mov	r1, r6
 80a3a48:	4620      	mov	r0, r4
 80a3a4a:	f7ff fd8d 	bl	80a3568 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3a4e:	4620      	mov	r0, r4
 80a3a50:	b00e      	add	sp, #56	; 0x38
 80a3a52:	bd70      	pop	{r4, r5, r6, pc}
 80a3a54:	4620      	mov	r0, r4
 80a3a56:	a903      	add	r1, sp, #12
 80a3a58:	f7ff fd74 	bl	80a3544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a3a5c:	e7f7      	b.n	80a3a4e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a3a5e:	bf00      	nop
 80a3a60:	20000400 	.word	0x20000400

080a3a64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3a64:	4b02      	ldr	r3, [pc, #8]	; (80a3a70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a3a66:	4a03      	ldr	r2, [pc, #12]	; (80a3a74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3a68:	601a      	str	r2, [r3, #0]
 80a3a6a:	2200      	movs	r2, #0
 80a3a6c:	605a      	str	r2, [r3, #4]

} // spark
 80a3a6e:	4770      	bx	lr
 80a3a70:	20000408 	.word	0x20000408
 80a3a74:	080a6878 	.word	0x080a6878

080a3a78 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a3a78:	b510      	push	{r4, lr}
 80a3a7a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a3a7c:	6880      	ldr	r0, [r0, #8]
 80a3a7e:	b108      	cbz	r0, 80a3a84 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a3a80:	f7fe fc4c 	bl	80a231c <os_mutex_recursive_destroy>
 80a3a84:	4620      	mov	r0, r4
 80a3a86:	bd10      	pop	{r4, pc}

080a3a88 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a3a88:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a3a8a:	b570      	push	{r4, r5, r6, lr}
 80a3a8c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a3a8e:	d901      	bls.n	80a3a94 <pinAvailable+0xc>
    return false;
 80a3a90:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a3a92:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3a94:	f1a0 030d 	sub.w	r3, r0, #13
 80a3a98:	2b02      	cmp	r3, #2
 80a3a9a:	d90b      	bls.n	80a3ab4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a3a9c:	2801      	cmp	r0, #1
 80a3a9e:	d826      	bhi.n	80a3aee <pinAvailable+0x66>
 80a3aa0:	f000 f8d4 	bl	80a3c4c <_Z19__fetch_global_Wirev>
 80a3aa4:	2100      	movs	r1, #0
 80a3aa6:	7c00      	ldrb	r0, [r0, #16]
 80a3aa8:	f7fe fca8 	bl	80a23fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3aac:	f080 0001 	eor.w	r0, r0, #1
 80a3ab0:	b2c0      	uxtb	r0, r0
 80a3ab2:	e7ee      	b.n	80a3a92 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a3ab4:	4e13      	ldr	r6, [pc, #76]	; (80a3b04 <pinAvailable+0x7c>)
 80a3ab6:	7831      	ldrb	r1, [r6, #0]
 80a3ab8:	f3bf 8f5b 	dmb	ish
 80a3abc:	f011 0501 	ands.w	r5, r1, #1
 80a3ac0:	d10f      	bne.n	80a3ae2 <pinAvailable+0x5a>
 80a3ac2:	4630      	mov	r0, r6
 80a3ac4:	f7fc faed 	bl	80a00a2 <__cxa_guard_acquire>
 80a3ac8:	b158      	cbz	r0, 80a3ae2 <pinAvailable+0x5a>
 80a3aca:	4629      	mov	r1, r5
 80a3acc:	480e      	ldr	r0, [pc, #56]	; (80a3b08 <pinAvailable+0x80>)
 80a3ace:	f7fe fe4d 	bl	80a276c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a3ad2:	4630      	mov	r0, r6
 80a3ad4:	f7fc faea 	bl	80a00ac <__cxa_guard_release>
 80a3ad8:	4a0c      	ldr	r2, [pc, #48]	; (80a3b0c <pinAvailable+0x84>)
 80a3ada:	490d      	ldr	r1, [pc, #52]	; (80a3b10 <pinAvailable+0x88>)
 80a3adc:	480a      	ldr	r0, [pc, #40]	; (80a3b08 <pinAvailable+0x80>)
 80a3ade:	f000 f8dd 	bl	80a3c9c <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3ae2:	4b09      	ldr	r3, [pc, #36]	; (80a3b08 <pinAvailable+0x80>)
 80a3ae4:	7818      	ldrb	r0, [r3, #0]
 80a3ae6:	f7fe fca3 	bl	80a2430 <hal_spi_is_enabled>
 80a3aea:	2800      	cmp	r0, #0
 80a3aec:	d1d0      	bne.n	80a3a90 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3aee:	3c12      	subs	r4, #18
 80a3af0:	2c01      	cmp	r4, #1
 80a3af2:	d805      	bhi.n	80a3b00 <pinAvailable+0x78>
 80a3af4:	f7ff fe64 	bl	80a37c0 <_Z22__fetch_global_Serial1v>
 80a3af8:	7c00      	ldrb	r0, [r0, #16]
 80a3afa:	f7fe fc47 	bl	80a238c <hal_usart_is_enabled>
 80a3afe:	e7d5      	b.n	80a3aac <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3b00:	2001      	movs	r0, #1
 80a3b02:	e7c6      	b.n	80a3a92 <pinAvailable+0xa>
 80a3b04:	20000410 	.word	0x20000410
 80a3b08:	20000414 	.word	0x20000414
 80a3b0c:	20000128 	.word	0x20000128
 80a3b10:	080a3a79 	.word	0x080a3a79

080a3b14 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3b14:	2817      	cmp	r0, #23
{
 80a3b16:	b538      	push	{r3, r4, r5, lr}
 80a3b18:	4604      	mov	r4, r0
 80a3b1a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3b1c:	d80a      	bhi.n	80a3b34 <pinMode+0x20>
 80a3b1e:	29ff      	cmp	r1, #255	; 0xff
 80a3b20:	d008      	beq.n	80a3b34 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3b22:	f7ff ffb1 	bl	80a3a88 <pinAvailable>
 80a3b26:	b128      	cbz	r0, 80a3b34 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3b28:	4629      	mov	r1, r5
 80a3b2a:	4620      	mov	r0, r4
}
 80a3b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3b30:	f7fe bb6c 	b.w	80a220c <HAL_Pin_Mode>
}
 80a3b34:	bd38      	pop	{r3, r4, r5, pc}

080a3b36 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3b36:	b538      	push	{r3, r4, r5, lr}
 80a3b38:	4604      	mov	r4, r0
 80a3b3a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3b3c:	f7fe fb6e 	bl	80a221c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3b40:	28ff      	cmp	r0, #255	; 0xff
 80a3b42:	d010      	beq.n	80a3b66 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3b44:	2806      	cmp	r0, #6
 80a3b46:	d804      	bhi.n	80a3b52 <digitalWrite+0x1c>
 80a3b48:	234d      	movs	r3, #77	; 0x4d
 80a3b4a:	fa23 f000 	lsr.w	r0, r3, r0
 80a3b4e:	07c3      	lsls	r3, r0, #31
 80a3b50:	d409      	bmi.n	80a3b66 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3b52:	4620      	mov	r0, r4
 80a3b54:	f7ff ff98 	bl	80a3a88 <pinAvailable>
 80a3b58:	b128      	cbz	r0, 80a3b66 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3b5a:	4629      	mov	r1, r5
 80a3b5c:	4620      	mov	r0, r4
}
 80a3b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3b62:	f7fe bb63 	b.w	80a222c <HAL_GPIO_Write>
}
 80a3b66:	bd38      	pop	{r3, r4, r5, pc}

080a3b68 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3b68:	b510      	push	{r4, lr}
 80a3b6a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3b6c:	f7fe fb56 	bl	80a221c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a3b70:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a3b72:	b2db      	uxtb	r3, r3
 80a3b74:	2b01      	cmp	r3, #1
 80a3b76:	d908      	bls.n	80a3b8a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3b78:	4620      	mov	r0, r4
 80a3b7a:	f7ff ff85 	bl	80a3a88 <pinAvailable>
 80a3b7e:	b120      	cbz	r0, 80a3b8a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3b80:	4620      	mov	r0, r4
}
 80a3b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a3b86:	f7fe bb59 	b.w	80a223c <HAL_GPIO_Read>
}
 80a3b8a:	2000      	movs	r0, #0
 80a3b8c:	bd10      	pop	{r4, pc}

080a3b8e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a3b8e:	b510      	push	{r4, lr}
 80a3b90:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a3b92:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a3b94:	bf9c      	itt	ls
 80a3b96:	340a      	addls	r4, #10
 80a3b98:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3b9a:	4620      	mov	r0, r4
 80a3b9c:	f7ff ff74 	bl	80a3a88 <pinAvailable>
 80a3ba0:	b150      	cbz	r0, 80a3bb8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a3ba2:	2103      	movs	r1, #3
 80a3ba4:	4620      	mov	r0, r4
 80a3ba6:	f7fe fb29 	bl	80a21fc <HAL_Validate_Pin_Function>
 80a3baa:	2803      	cmp	r0, #3
 80a3bac:	d104      	bne.n	80a3bb8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a3bae:	4620      	mov	r0, r4
}
 80a3bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a3bb4:	f7fe bb5a 	b.w	80a226c <hal_adc_read>
}
 80a3bb8:	2000      	movs	r0, #0
 80a3bba:	bd10      	pop	{r4, pc}

080a3bbc <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a3bbc:	f7fe bb5e 	b.w	80a227c <HAL_Pulse_In>

080a3bc0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a3bc0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a3bc2:	4c08      	ldr	r4, [pc, #32]	; (80a3be4 <_Z21__fetch_global_EEPROMv+0x24>)
 80a3bc4:	7823      	ldrb	r3, [r4, #0]
 80a3bc6:	f3bf 8f5b 	dmb	ish
 80a3bca:	07db      	lsls	r3, r3, #31
 80a3bcc:	d408      	bmi.n	80a3be0 <_Z21__fetch_global_EEPROMv+0x20>
 80a3bce:	4620      	mov	r0, r4
 80a3bd0:	f7fc fa67 	bl	80a00a2 <__cxa_guard_acquire>
 80a3bd4:	b120      	cbz	r0, 80a3be0 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a3bd6:	f7fe fb71 	bl	80a22bc <HAL_EEPROM_Init>
 80a3bda:	4620      	mov	r0, r4
 80a3bdc:	f7fc fa66 	bl	80a00ac <__cxa_guard_release>
	return eeprom;
}
 80a3be0:	4801      	ldr	r0, [pc, #4]	; (80a3be8 <_Z21__fetch_global_EEPROMv+0x28>)
 80a3be2:	bd10      	pop	{r4, pc}
 80a3be4:	20000424 	.word	0x20000424
 80a3be8:	20000428 	.word	0x20000428

080a3bec <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3bec:	2300      	movs	r3, #0
 80a3bee:	b513      	push	{r0, r1, r4, lr}
 80a3bf0:	4c07      	ldr	r4, [pc, #28]	; (80a3c10 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3bf2:	461a      	mov	r2, r3
 80a3bf4:	4619      	mov	r1, r3
 80a3bf6:	4620      	mov	r0, r4
 80a3bf8:	9300      	str	r3, [sp, #0]
 80a3bfa:	f7ff fccb 	bl	80a3594 <_ZN9IPAddressC1Ehhhh>
 80a3bfe:	4620      	mov	r0, r4
 80a3c00:	4a04      	ldr	r2, [pc, #16]	; (80a3c14 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3c02:	4905      	ldr	r1, [pc, #20]	; (80a3c18 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3c04:	b002      	add	sp, #8
 80a3c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3c0a:	f000 b847 	b.w	80a3c9c <__aeabi_atexit>
 80a3c0e:	bf00      	nop
 80a3c10:	2000042c 	.word	0x2000042c
 80a3c14:	20000128 	.word	0x20000128
 80a3c18:	080a34e5 	.word	0x080a34e5

080a3c1c <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a3c1c:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a3c1e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a3c20:	2520      	movs	r5, #32
 80a3c22:	8043      	strh	r3, [r0, #2]
 80a3c24:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c26:	4e08      	ldr	r6, [pc, #32]	; (80a3c48 <_Z17acquireWireBufferv+0x2c>)
{
 80a3c28:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3c2a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c2c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3c2e:	6085      	str	r5, [r0, #8]
 80a3c30:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c32:	4628      	mov	r0, r5
 80a3c34:	f000 f839 	bl	80a3caa <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c38:	4631      	mov	r1, r6
	};
 80a3c3a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c3c:	4628      	mov	r0, r5
 80a3c3e:	f000 f834 	bl	80a3caa <_ZnajRKSt9nothrow_t>
	};
 80a3c42:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a3c44:	4620      	mov	r0, r4
 80a3c46:	bd70      	pop	{r4, r5, r6, pc}
 80a3c48:	080a68ac 	.word	0x080a68ac

080a3c4c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3c4c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3c4e:	4d0f      	ldr	r5, [pc, #60]	; (80a3c8c <_Z19__fetch_global_Wirev+0x40>)
{
 80a3c50:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3c52:	7829      	ldrb	r1, [r5, #0]
 80a3c54:	f3bf 8f5b 	dmb	ish
 80a3c58:	f011 0401 	ands.w	r4, r1, #1
 80a3c5c:	d113      	bne.n	80a3c86 <_Z19__fetch_global_Wirev+0x3a>
 80a3c5e:	4628      	mov	r0, r5
 80a3c60:	f7fc fa1f 	bl	80a00a2 <__cxa_guard_acquire>
 80a3c64:	b178      	cbz	r0, 80a3c86 <_Z19__fetch_global_Wirev+0x3a>
 80a3c66:	a801      	add	r0, sp, #4
 80a3c68:	f7ff ffd8 	bl	80a3c1c <_Z17acquireWireBufferv>
 80a3c6c:	4621      	mov	r1, r4
 80a3c6e:	aa01      	add	r2, sp, #4
 80a3c70:	4807      	ldr	r0, [pc, #28]	; (80a3c90 <_Z19__fetch_global_Wirev+0x44>)
 80a3c72:	f7ff fe27 	bl	80a38c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a3c76:	4628      	mov	r0, r5
 80a3c78:	f7fc fa18 	bl	80a00ac <__cxa_guard_release>
 80a3c7c:	4a05      	ldr	r2, [pc, #20]	; (80a3c94 <_Z19__fetch_global_Wirev+0x48>)
 80a3c7e:	4906      	ldr	r1, [pc, #24]	; (80a3c98 <_Z19__fetch_global_Wirev+0x4c>)
 80a3c80:	4803      	ldr	r0, [pc, #12]	; (80a3c90 <_Z19__fetch_global_Wirev+0x44>)
 80a3c82:	f000 f80b 	bl	80a3c9c <__aeabi_atexit>
	return wire;
}
 80a3c86:	4802      	ldr	r0, [pc, #8]	; (80a3c90 <_Z19__fetch_global_Wirev+0x44>)
 80a3c88:	b007      	add	sp, #28
 80a3c8a:	bd30      	pop	{r4, r5, pc}
 80a3c8c:	20000444 	.word	0x20000444
 80a3c90:	20000448 	.word	0x20000448
 80a3c94:	20000128 	.word	0x20000128
 80a3c98:	080a386d 	.word	0x080a386d

080a3c9c <__aeabi_atexit>:
 80a3c9c:	460b      	mov	r3, r1
 80a3c9e:	4601      	mov	r1, r0
 80a3ca0:	4618      	mov	r0, r3
 80a3ca2:	f001 b8d7 	b.w	80a4e54 <__cxa_atexit>

080a3ca6 <_ZdlPvj>:
 80a3ca6:	f7fc b9fa 	b.w	80a009e <_ZdlPv>

080a3caa <_ZnajRKSt9nothrow_t>:
 80a3caa:	f7fc b9f6 	b.w	80a009a <_Znaj>

080a3cae <_ZSt25__throw_bad_function_callv>:
 80a3cae:	b508      	push	{r3, lr}
 80a3cb0:	f7fe fd44 	bl	80a273c <abort>

080a3cb4 <__aeabi_drsub>:
 80a3cb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3cb8:	e002      	b.n	80a3cc0 <__adddf3>
 80a3cba:	bf00      	nop

080a3cbc <__aeabi_dsub>:
 80a3cbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3cc0 <__adddf3>:
 80a3cc0:	b530      	push	{r4, r5, lr}
 80a3cc2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3cc6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3cca:	ea94 0f05 	teq	r4, r5
 80a3cce:	bf08      	it	eq
 80a3cd0:	ea90 0f02 	teqeq	r0, r2
 80a3cd4:	bf1f      	itttt	ne
 80a3cd6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3cda:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3cde:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3ce2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3ce6:	f000 80e2 	beq.w	80a3eae <__adddf3+0x1ee>
 80a3cea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3cee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3cf2:	bfb8      	it	lt
 80a3cf4:	426d      	neglt	r5, r5
 80a3cf6:	dd0c      	ble.n	80a3d12 <__adddf3+0x52>
 80a3cf8:	442c      	add	r4, r5
 80a3cfa:	ea80 0202 	eor.w	r2, r0, r2
 80a3cfe:	ea81 0303 	eor.w	r3, r1, r3
 80a3d02:	ea82 0000 	eor.w	r0, r2, r0
 80a3d06:	ea83 0101 	eor.w	r1, r3, r1
 80a3d0a:	ea80 0202 	eor.w	r2, r0, r2
 80a3d0e:	ea81 0303 	eor.w	r3, r1, r3
 80a3d12:	2d36      	cmp	r5, #54	; 0x36
 80a3d14:	bf88      	it	hi
 80a3d16:	bd30      	pophi	{r4, r5, pc}
 80a3d18:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3d1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3d20:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3d24:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3d28:	d002      	beq.n	80a3d30 <__adddf3+0x70>
 80a3d2a:	4240      	negs	r0, r0
 80a3d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3d30:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3d34:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3d38:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3d3c:	d002      	beq.n	80a3d44 <__adddf3+0x84>
 80a3d3e:	4252      	negs	r2, r2
 80a3d40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3d44:	ea94 0f05 	teq	r4, r5
 80a3d48:	f000 80a7 	beq.w	80a3e9a <__adddf3+0x1da>
 80a3d4c:	f1a4 0401 	sub.w	r4, r4, #1
 80a3d50:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3d54:	db0d      	blt.n	80a3d72 <__adddf3+0xb2>
 80a3d56:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3d5a:	fa22 f205 	lsr.w	r2, r2, r5
 80a3d5e:	1880      	adds	r0, r0, r2
 80a3d60:	f141 0100 	adc.w	r1, r1, #0
 80a3d64:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3d68:	1880      	adds	r0, r0, r2
 80a3d6a:	fa43 f305 	asr.w	r3, r3, r5
 80a3d6e:	4159      	adcs	r1, r3
 80a3d70:	e00e      	b.n	80a3d90 <__adddf3+0xd0>
 80a3d72:	f1a5 0520 	sub.w	r5, r5, #32
 80a3d76:	f10e 0e20 	add.w	lr, lr, #32
 80a3d7a:	2a01      	cmp	r2, #1
 80a3d7c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3d80:	bf28      	it	cs
 80a3d82:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3d86:	fa43 f305 	asr.w	r3, r3, r5
 80a3d8a:	18c0      	adds	r0, r0, r3
 80a3d8c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3d90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3d94:	d507      	bpl.n	80a3da6 <__adddf3+0xe6>
 80a3d96:	f04f 0e00 	mov.w	lr, #0
 80a3d9a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3d9e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3da2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3da6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3daa:	d31b      	bcc.n	80a3de4 <__adddf3+0x124>
 80a3dac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3db0:	d30c      	bcc.n	80a3dcc <__adddf3+0x10c>
 80a3db2:	0849      	lsrs	r1, r1, #1
 80a3db4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3db8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3dbc:	f104 0401 	add.w	r4, r4, #1
 80a3dc0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3dc4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3dc8:	f080 809a 	bcs.w	80a3f00 <__adddf3+0x240>
 80a3dcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3dd0:	bf08      	it	eq
 80a3dd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3dd6:	f150 0000 	adcs.w	r0, r0, #0
 80a3dda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3dde:	ea41 0105 	orr.w	r1, r1, r5
 80a3de2:	bd30      	pop	{r4, r5, pc}
 80a3de4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3de8:	4140      	adcs	r0, r0
 80a3dea:	eb41 0101 	adc.w	r1, r1, r1
 80a3dee:	3c01      	subs	r4, #1
 80a3df0:	bf28      	it	cs
 80a3df2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a3df6:	d2e9      	bcs.n	80a3dcc <__adddf3+0x10c>
 80a3df8:	f091 0f00 	teq	r1, #0
 80a3dfc:	bf04      	itt	eq
 80a3dfe:	4601      	moveq	r1, r0
 80a3e00:	2000      	moveq	r0, #0
 80a3e02:	fab1 f381 	clz	r3, r1
 80a3e06:	bf08      	it	eq
 80a3e08:	3320      	addeq	r3, #32
 80a3e0a:	f1a3 030b 	sub.w	r3, r3, #11
 80a3e0e:	f1b3 0220 	subs.w	r2, r3, #32
 80a3e12:	da0c      	bge.n	80a3e2e <__adddf3+0x16e>
 80a3e14:	320c      	adds	r2, #12
 80a3e16:	dd08      	ble.n	80a3e2a <__adddf3+0x16a>
 80a3e18:	f102 0c14 	add.w	ip, r2, #20
 80a3e1c:	f1c2 020c 	rsb	r2, r2, #12
 80a3e20:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3e24:	fa21 f102 	lsr.w	r1, r1, r2
 80a3e28:	e00c      	b.n	80a3e44 <__adddf3+0x184>
 80a3e2a:	f102 0214 	add.w	r2, r2, #20
 80a3e2e:	bfd8      	it	le
 80a3e30:	f1c2 0c20 	rsble	ip, r2, #32
 80a3e34:	fa01 f102 	lsl.w	r1, r1, r2
 80a3e38:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3e3c:	bfdc      	itt	le
 80a3e3e:	ea41 010c 	orrle.w	r1, r1, ip
 80a3e42:	4090      	lslle	r0, r2
 80a3e44:	1ae4      	subs	r4, r4, r3
 80a3e46:	bfa2      	ittt	ge
 80a3e48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3e4c:	4329      	orrge	r1, r5
 80a3e4e:	bd30      	popge	{r4, r5, pc}
 80a3e50:	ea6f 0404 	mvn.w	r4, r4
 80a3e54:	3c1f      	subs	r4, #31
 80a3e56:	da1c      	bge.n	80a3e92 <__adddf3+0x1d2>
 80a3e58:	340c      	adds	r4, #12
 80a3e5a:	dc0e      	bgt.n	80a3e7a <__adddf3+0x1ba>
 80a3e5c:	f104 0414 	add.w	r4, r4, #20
 80a3e60:	f1c4 0220 	rsb	r2, r4, #32
 80a3e64:	fa20 f004 	lsr.w	r0, r0, r4
 80a3e68:	fa01 f302 	lsl.w	r3, r1, r2
 80a3e6c:	ea40 0003 	orr.w	r0, r0, r3
 80a3e70:	fa21 f304 	lsr.w	r3, r1, r4
 80a3e74:	ea45 0103 	orr.w	r1, r5, r3
 80a3e78:	bd30      	pop	{r4, r5, pc}
 80a3e7a:	f1c4 040c 	rsb	r4, r4, #12
 80a3e7e:	f1c4 0220 	rsb	r2, r4, #32
 80a3e82:	fa20 f002 	lsr.w	r0, r0, r2
 80a3e86:	fa01 f304 	lsl.w	r3, r1, r4
 80a3e8a:	ea40 0003 	orr.w	r0, r0, r3
 80a3e8e:	4629      	mov	r1, r5
 80a3e90:	bd30      	pop	{r4, r5, pc}
 80a3e92:	fa21 f004 	lsr.w	r0, r1, r4
 80a3e96:	4629      	mov	r1, r5
 80a3e98:	bd30      	pop	{r4, r5, pc}
 80a3e9a:	f094 0f00 	teq	r4, #0
 80a3e9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3ea2:	bf06      	itte	eq
 80a3ea4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3ea8:	3401      	addeq	r4, #1
 80a3eaa:	3d01      	subne	r5, #1
 80a3eac:	e74e      	b.n	80a3d4c <__adddf3+0x8c>
 80a3eae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3eb2:	bf18      	it	ne
 80a3eb4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3eb8:	d029      	beq.n	80a3f0e <__adddf3+0x24e>
 80a3eba:	ea94 0f05 	teq	r4, r5
 80a3ebe:	bf08      	it	eq
 80a3ec0:	ea90 0f02 	teqeq	r0, r2
 80a3ec4:	d005      	beq.n	80a3ed2 <__adddf3+0x212>
 80a3ec6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3eca:	bf04      	itt	eq
 80a3ecc:	4619      	moveq	r1, r3
 80a3ece:	4610      	moveq	r0, r2
 80a3ed0:	bd30      	pop	{r4, r5, pc}
 80a3ed2:	ea91 0f03 	teq	r1, r3
 80a3ed6:	bf1e      	ittt	ne
 80a3ed8:	2100      	movne	r1, #0
 80a3eda:	2000      	movne	r0, #0
 80a3edc:	bd30      	popne	{r4, r5, pc}
 80a3ede:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3ee2:	d105      	bne.n	80a3ef0 <__adddf3+0x230>
 80a3ee4:	0040      	lsls	r0, r0, #1
 80a3ee6:	4149      	adcs	r1, r1
 80a3ee8:	bf28      	it	cs
 80a3eea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3eee:	bd30      	pop	{r4, r5, pc}
 80a3ef0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3ef4:	bf3c      	itt	cc
 80a3ef6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3efa:	bd30      	popcc	{r4, r5, pc}
 80a3efc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3f00:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3f04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3f08:	f04f 0000 	mov.w	r0, #0
 80a3f0c:	bd30      	pop	{r4, r5, pc}
 80a3f0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3f12:	bf1a      	itte	ne
 80a3f14:	4619      	movne	r1, r3
 80a3f16:	4610      	movne	r0, r2
 80a3f18:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3f1c:	bf1c      	itt	ne
 80a3f1e:	460b      	movne	r3, r1
 80a3f20:	4602      	movne	r2, r0
 80a3f22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3f26:	bf06      	itte	eq
 80a3f28:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3f2c:	ea91 0f03 	teqeq	r1, r3
 80a3f30:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3f34:	bd30      	pop	{r4, r5, pc}
 80a3f36:	bf00      	nop

080a3f38 <__aeabi_ui2d>:
 80a3f38:	f090 0f00 	teq	r0, #0
 80a3f3c:	bf04      	itt	eq
 80a3f3e:	2100      	moveq	r1, #0
 80a3f40:	4770      	bxeq	lr
 80a3f42:	b530      	push	{r4, r5, lr}
 80a3f44:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3f48:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3f4c:	f04f 0500 	mov.w	r5, #0
 80a3f50:	f04f 0100 	mov.w	r1, #0
 80a3f54:	e750      	b.n	80a3df8 <__adddf3+0x138>
 80a3f56:	bf00      	nop

080a3f58 <__aeabi_i2d>:
 80a3f58:	f090 0f00 	teq	r0, #0
 80a3f5c:	bf04      	itt	eq
 80a3f5e:	2100      	moveq	r1, #0
 80a3f60:	4770      	bxeq	lr
 80a3f62:	b530      	push	{r4, r5, lr}
 80a3f64:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3f68:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3f6c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3f70:	bf48      	it	mi
 80a3f72:	4240      	negmi	r0, r0
 80a3f74:	f04f 0100 	mov.w	r1, #0
 80a3f78:	e73e      	b.n	80a3df8 <__adddf3+0x138>
 80a3f7a:	bf00      	nop

080a3f7c <__aeabi_f2d>:
 80a3f7c:	0042      	lsls	r2, r0, #1
 80a3f7e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3f82:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3f86:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3f8a:	bf1f      	itttt	ne
 80a3f8c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3f90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3f94:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3f98:	4770      	bxne	lr
 80a3f9a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a3f9e:	bf08      	it	eq
 80a3fa0:	4770      	bxeq	lr
 80a3fa2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a3fa6:	bf04      	itt	eq
 80a3fa8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a3fac:	4770      	bxeq	lr
 80a3fae:	b530      	push	{r4, r5, lr}
 80a3fb0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3fb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3fb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3fbc:	e71c      	b.n	80a3df8 <__adddf3+0x138>
 80a3fbe:	bf00      	nop

080a3fc0 <__aeabi_ul2d>:
 80a3fc0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3fc4:	bf08      	it	eq
 80a3fc6:	4770      	bxeq	lr
 80a3fc8:	b530      	push	{r4, r5, lr}
 80a3fca:	f04f 0500 	mov.w	r5, #0
 80a3fce:	e00a      	b.n	80a3fe6 <__aeabi_l2d+0x16>

080a3fd0 <__aeabi_l2d>:
 80a3fd0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3fd4:	bf08      	it	eq
 80a3fd6:	4770      	bxeq	lr
 80a3fd8:	b530      	push	{r4, r5, lr}
 80a3fda:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3fde:	d502      	bpl.n	80a3fe6 <__aeabi_l2d+0x16>
 80a3fe0:	4240      	negs	r0, r0
 80a3fe2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3fe6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3fea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3fee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3ff2:	f43f aed8 	beq.w	80a3da6 <__adddf3+0xe6>
 80a3ff6:	f04f 0203 	mov.w	r2, #3
 80a3ffa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3ffe:	bf18      	it	ne
 80a4000:	3203      	addne	r2, #3
 80a4002:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4006:	bf18      	it	ne
 80a4008:	3203      	addne	r2, #3
 80a400a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a400e:	f1c2 0320 	rsb	r3, r2, #32
 80a4012:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4016:	fa20 f002 	lsr.w	r0, r0, r2
 80a401a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a401e:	ea40 000e 	orr.w	r0, r0, lr
 80a4022:	fa21 f102 	lsr.w	r1, r1, r2
 80a4026:	4414      	add	r4, r2
 80a4028:	e6bd      	b.n	80a3da6 <__adddf3+0xe6>
 80a402a:	bf00      	nop

080a402c <__aeabi_dmul>:
 80a402c:	b570      	push	{r4, r5, r6, lr}
 80a402e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4032:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4036:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a403a:	bf1d      	ittte	ne
 80a403c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4040:	ea94 0f0c 	teqne	r4, ip
 80a4044:	ea95 0f0c 	teqne	r5, ip
 80a4048:	f000 f8de 	bleq	80a4208 <__aeabi_dmul+0x1dc>
 80a404c:	442c      	add	r4, r5
 80a404e:	ea81 0603 	eor.w	r6, r1, r3
 80a4052:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4056:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a405a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a405e:	bf18      	it	ne
 80a4060:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4064:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a406c:	d038      	beq.n	80a40e0 <__aeabi_dmul+0xb4>
 80a406e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4072:	f04f 0500 	mov.w	r5, #0
 80a4076:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a407a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a407e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4082:	f04f 0600 	mov.w	r6, #0
 80a4086:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a408a:	f09c 0f00 	teq	ip, #0
 80a408e:	bf18      	it	ne
 80a4090:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4094:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4098:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a409c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a40a0:	d204      	bcs.n	80a40ac <__aeabi_dmul+0x80>
 80a40a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a40a6:	416d      	adcs	r5, r5
 80a40a8:	eb46 0606 	adc.w	r6, r6, r6
 80a40ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a40b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a40b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a40b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a40bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a40c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a40c4:	bf88      	it	hi
 80a40c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a40ca:	d81e      	bhi.n	80a410a <__aeabi_dmul+0xde>
 80a40cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a40d0:	bf08      	it	eq
 80a40d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a40d6:	f150 0000 	adcs.w	r0, r0, #0
 80a40da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a40de:	bd70      	pop	{r4, r5, r6, pc}
 80a40e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a40e4:	ea46 0101 	orr.w	r1, r6, r1
 80a40e8:	ea40 0002 	orr.w	r0, r0, r2
 80a40ec:	ea81 0103 	eor.w	r1, r1, r3
 80a40f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a40f4:	bfc2      	ittt	gt
 80a40f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a40fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a40fe:	bd70      	popgt	{r4, r5, r6, pc}
 80a4100:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4104:	f04f 0e00 	mov.w	lr, #0
 80a4108:	3c01      	subs	r4, #1
 80a410a:	f300 80ab 	bgt.w	80a4264 <__aeabi_dmul+0x238>
 80a410e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4112:	bfde      	ittt	le
 80a4114:	2000      	movle	r0, #0
 80a4116:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a411a:	bd70      	pople	{r4, r5, r6, pc}
 80a411c:	f1c4 0400 	rsb	r4, r4, #0
 80a4120:	3c20      	subs	r4, #32
 80a4122:	da35      	bge.n	80a4190 <__aeabi_dmul+0x164>
 80a4124:	340c      	adds	r4, #12
 80a4126:	dc1b      	bgt.n	80a4160 <__aeabi_dmul+0x134>
 80a4128:	f104 0414 	add.w	r4, r4, #20
 80a412c:	f1c4 0520 	rsb	r5, r4, #32
 80a4130:	fa00 f305 	lsl.w	r3, r0, r5
 80a4134:	fa20 f004 	lsr.w	r0, r0, r4
 80a4138:	fa01 f205 	lsl.w	r2, r1, r5
 80a413c:	ea40 0002 	orr.w	r0, r0, r2
 80a4140:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4144:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4148:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a414c:	fa21 f604 	lsr.w	r6, r1, r4
 80a4150:	eb42 0106 	adc.w	r1, r2, r6
 80a4154:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4158:	bf08      	it	eq
 80a415a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a415e:	bd70      	pop	{r4, r5, r6, pc}
 80a4160:	f1c4 040c 	rsb	r4, r4, #12
 80a4164:	f1c4 0520 	rsb	r5, r4, #32
 80a4168:	fa00 f304 	lsl.w	r3, r0, r4
 80a416c:	fa20 f005 	lsr.w	r0, r0, r5
 80a4170:	fa01 f204 	lsl.w	r2, r1, r4
 80a4174:	ea40 0002 	orr.w	r0, r0, r2
 80a4178:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a417c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4180:	f141 0100 	adc.w	r1, r1, #0
 80a4184:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4188:	bf08      	it	eq
 80a418a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a418e:	bd70      	pop	{r4, r5, r6, pc}
 80a4190:	f1c4 0520 	rsb	r5, r4, #32
 80a4194:	fa00 f205 	lsl.w	r2, r0, r5
 80a4198:	ea4e 0e02 	orr.w	lr, lr, r2
 80a419c:	fa20 f304 	lsr.w	r3, r0, r4
 80a41a0:	fa01 f205 	lsl.w	r2, r1, r5
 80a41a4:	ea43 0302 	orr.w	r3, r3, r2
 80a41a8:	fa21 f004 	lsr.w	r0, r1, r4
 80a41ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a41b0:	fa21 f204 	lsr.w	r2, r1, r4
 80a41b4:	ea20 0002 	bic.w	r0, r0, r2
 80a41b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a41bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a41c0:	bf08      	it	eq
 80a41c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a41c6:	bd70      	pop	{r4, r5, r6, pc}
 80a41c8:	f094 0f00 	teq	r4, #0
 80a41cc:	d10f      	bne.n	80a41ee <__aeabi_dmul+0x1c2>
 80a41ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a41d2:	0040      	lsls	r0, r0, #1
 80a41d4:	eb41 0101 	adc.w	r1, r1, r1
 80a41d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a41dc:	bf08      	it	eq
 80a41de:	3c01      	subeq	r4, #1
 80a41e0:	d0f7      	beq.n	80a41d2 <__aeabi_dmul+0x1a6>
 80a41e2:	ea41 0106 	orr.w	r1, r1, r6
 80a41e6:	f095 0f00 	teq	r5, #0
 80a41ea:	bf18      	it	ne
 80a41ec:	4770      	bxne	lr
 80a41ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a41f2:	0052      	lsls	r2, r2, #1
 80a41f4:	eb43 0303 	adc.w	r3, r3, r3
 80a41f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a41fc:	bf08      	it	eq
 80a41fe:	3d01      	subeq	r5, #1
 80a4200:	d0f7      	beq.n	80a41f2 <__aeabi_dmul+0x1c6>
 80a4202:	ea43 0306 	orr.w	r3, r3, r6
 80a4206:	4770      	bx	lr
 80a4208:	ea94 0f0c 	teq	r4, ip
 80a420c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4210:	bf18      	it	ne
 80a4212:	ea95 0f0c 	teqne	r5, ip
 80a4216:	d00c      	beq.n	80a4232 <__aeabi_dmul+0x206>
 80a4218:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a421c:	bf18      	it	ne
 80a421e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4222:	d1d1      	bne.n	80a41c8 <__aeabi_dmul+0x19c>
 80a4224:	ea81 0103 	eor.w	r1, r1, r3
 80a4228:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a422c:	f04f 0000 	mov.w	r0, #0
 80a4230:	bd70      	pop	{r4, r5, r6, pc}
 80a4232:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4236:	bf06      	itte	eq
 80a4238:	4610      	moveq	r0, r2
 80a423a:	4619      	moveq	r1, r3
 80a423c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4240:	d019      	beq.n	80a4276 <__aeabi_dmul+0x24a>
 80a4242:	ea94 0f0c 	teq	r4, ip
 80a4246:	d102      	bne.n	80a424e <__aeabi_dmul+0x222>
 80a4248:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a424c:	d113      	bne.n	80a4276 <__aeabi_dmul+0x24a>
 80a424e:	ea95 0f0c 	teq	r5, ip
 80a4252:	d105      	bne.n	80a4260 <__aeabi_dmul+0x234>
 80a4254:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4258:	bf1c      	itt	ne
 80a425a:	4610      	movne	r0, r2
 80a425c:	4619      	movne	r1, r3
 80a425e:	d10a      	bne.n	80a4276 <__aeabi_dmul+0x24a>
 80a4260:	ea81 0103 	eor.w	r1, r1, r3
 80a4264:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4268:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4270:	f04f 0000 	mov.w	r0, #0
 80a4274:	bd70      	pop	{r4, r5, r6, pc}
 80a4276:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a427a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a427e:	bd70      	pop	{r4, r5, r6, pc}

080a4280 <__aeabi_ddiv>:
 80a4280:	b570      	push	{r4, r5, r6, lr}
 80a4282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a428a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a428e:	bf1d      	ittte	ne
 80a4290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4294:	ea94 0f0c 	teqne	r4, ip
 80a4298:	ea95 0f0c 	teqne	r5, ip
 80a429c:	f000 f8a7 	bleq	80a43ee <__aeabi_ddiv+0x16e>
 80a42a0:	eba4 0405 	sub.w	r4, r4, r5
 80a42a4:	ea81 0e03 	eor.w	lr, r1, r3
 80a42a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a42ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a42b0:	f000 8088 	beq.w	80a43c4 <__aeabi_ddiv+0x144>
 80a42b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a42b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a42bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a42c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a42c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a42c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a42cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a42d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a42d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a42d8:	429d      	cmp	r5, r3
 80a42da:	bf08      	it	eq
 80a42dc:	4296      	cmpeq	r6, r2
 80a42de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a42e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a42e6:	d202      	bcs.n	80a42ee <__aeabi_ddiv+0x6e>
 80a42e8:	085b      	lsrs	r3, r3, #1
 80a42ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a42ee:	1ab6      	subs	r6, r6, r2
 80a42f0:	eb65 0503 	sbc.w	r5, r5, r3
 80a42f4:	085b      	lsrs	r3, r3, #1
 80a42f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a42fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a42fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4302:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4306:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a430a:	bf22      	ittt	cs
 80a430c:	1ab6      	subcs	r6, r6, r2
 80a430e:	4675      	movcs	r5, lr
 80a4310:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4314:	085b      	lsrs	r3, r3, #1
 80a4316:	ea4f 0232 	mov.w	r2, r2, rrx
 80a431a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a431e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4322:	bf22      	ittt	cs
 80a4324:	1ab6      	subcs	r6, r6, r2
 80a4326:	4675      	movcs	r5, lr
 80a4328:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a432c:	085b      	lsrs	r3, r3, #1
 80a432e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4332:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4336:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a433a:	bf22      	ittt	cs
 80a433c:	1ab6      	subcs	r6, r6, r2
 80a433e:	4675      	movcs	r5, lr
 80a4340:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4344:	085b      	lsrs	r3, r3, #1
 80a4346:	ea4f 0232 	mov.w	r2, r2, rrx
 80a434a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a434e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4352:	bf22      	ittt	cs
 80a4354:	1ab6      	subcs	r6, r6, r2
 80a4356:	4675      	movcs	r5, lr
 80a4358:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a435c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4360:	d018      	beq.n	80a4394 <__aeabi_ddiv+0x114>
 80a4362:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4366:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a436a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a436e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4372:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4376:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a437a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a437e:	d1c0      	bne.n	80a4302 <__aeabi_ddiv+0x82>
 80a4380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4384:	d10b      	bne.n	80a439e <__aeabi_ddiv+0x11e>
 80a4386:	ea41 0100 	orr.w	r1, r1, r0
 80a438a:	f04f 0000 	mov.w	r0, #0
 80a438e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4392:	e7b6      	b.n	80a4302 <__aeabi_ddiv+0x82>
 80a4394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4398:	bf04      	itt	eq
 80a439a:	4301      	orreq	r1, r0
 80a439c:	2000      	moveq	r0, #0
 80a439e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a43a2:	bf88      	it	hi
 80a43a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a43a8:	f63f aeaf 	bhi.w	80a410a <__aeabi_dmul+0xde>
 80a43ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80a43b0:	bf04      	itt	eq
 80a43b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a43b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a43ba:	f150 0000 	adcs.w	r0, r0, #0
 80a43be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a43c2:	bd70      	pop	{r4, r5, r6, pc}
 80a43c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a43c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a43cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a43d0:	bfc2      	ittt	gt
 80a43d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a43d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a43da:	bd70      	popgt	{r4, r5, r6, pc}
 80a43dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a43e0:	f04f 0e00 	mov.w	lr, #0
 80a43e4:	3c01      	subs	r4, #1
 80a43e6:	e690      	b.n	80a410a <__aeabi_dmul+0xde>
 80a43e8:	ea45 0e06 	orr.w	lr, r5, r6
 80a43ec:	e68d      	b.n	80a410a <__aeabi_dmul+0xde>
 80a43ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a43f2:	ea94 0f0c 	teq	r4, ip
 80a43f6:	bf08      	it	eq
 80a43f8:	ea95 0f0c 	teqeq	r5, ip
 80a43fc:	f43f af3b 	beq.w	80a4276 <__aeabi_dmul+0x24a>
 80a4400:	ea94 0f0c 	teq	r4, ip
 80a4404:	d10a      	bne.n	80a441c <__aeabi_ddiv+0x19c>
 80a4406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a440a:	f47f af34 	bne.w	80a4276 <__aeabi_dmul+0x24a>
 80a440e:	ea95 0f0c 	teq	r5, ip
 80a4412:	f47f af25 	bne.w	80a4260 <__aeabi_dmul+0x234>
 80a4416:	4610      	mov	r0, r2
 80a4418:	4619      	mov	r1, r3
 80a441a:	e72c      	b.n	80a4276 <__aeabi_dmul+0x24a>
 80a441c:	ea95 0f0c 	teq	r5, ip
 80a4420:	d106      	bne.n	80a4430 <__aeabi_ddiv+0x1b0>
 80a4422:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4426:	f43f aefd 	beq.w	80a4224 <__aeabi_dmul+0x1f8>
 80a442a:	4610      	mov	r0, r2
 80a442c:	4619      	mov	r1, r3
 80a442e:	e722      	b.n	80a4276 <__aeabi_dmul+0x24a>
 80a4430:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4434:	bf18      	it	ne
 80a4436:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a443a:	f47f aec5 	bne.w	80a41c8 <__aeabi_dmul+0x19c>
 80a443e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4442:	f47f af0d 	bne.w	80a4260 <__aeabi_dmul+0x234>
 80a4446:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a444a:	f47f aeeb 	bne.w	80a4224 <__aeabi_dmul+0x1f8>
 80a444e:	e712      	b.n	80a4276 <__aeabi_dmul+0x24a>

080a4450 <__aeabi_d2uiz>:
 80a4450:	004a      	lsls	r2, r1, #1
 80a4452:	d211      	bcs.n	80a4478 <__aeabi_d2uiz+0x28>
 80a4454:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4458:	d211      	bcs.n	80a447e <__aeabi_d2uiz+0x2e>
 80a445a:	d50d      	bpl.n	80a4478 <__aeabi_d2uiz+0x28>
 80a445c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4460:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4464:	d40e      	bmi.n	80a4484 <__aeabi_d2uiz+0x34>
 80a4466:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a446a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a446e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4472:	fa23 f002 	lsr.w	r0, r3, r2
 80a4476:	4770      	bx	lr
 80a4478:	f04f 0000 	mov.w	r0, #0
 80a447c:	4770      	bx	lr
 80a447e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4482:	d102      	bne.n	80a448a <__aeabi_d2uiz+0x3a>
 80a4484:	f04f 30ff 	mov.w	r0, #4294967295
 80a4488:	4770      	bx	lr
 80a448a:	f04f 0000 	mov.w	r0, #0
 80a448e:	4770      	bx	lr

080a4490 <__aeabi_d2f>:
 80a4490:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4494:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4498:	bf24      	itt	cs
 80a449a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a449e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a44a2:	d90d      	bls.n	80a44c0 <__aeabi_d2f+0x30>
 80a44a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a44a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a44ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a44b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a44b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a44b8:	bf08      	it	eq
 80a44ba:	f020 0001 	biceq.w	r0, r0, #1
 80a44be:	4770      	bx	lr
 80a44c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a44c4:	d121      	bne.n	80a450a <__aeabi_d2f+0x7a>
 80a44c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a44ca:	bfbc      	itt	lt
 80a44cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a44d0:	4770      	bxlt	lr
 80a44d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a44d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a44da:	f1c2 0218 	rsb	r2, r2, #24
 80a44de:	f1c2 0c20 	rsb	ip, r2, #32
 80a44e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80a44e6:	fa20 f002 	lsr.w	r0, r0, r2
 80a44ea:	bf18      	it	ne
 80a44ec:	f040 0001 	orrne.w	r0, r0, #1
 80a44f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a44f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a44f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a44fc:	ea40 000c 	orr.w	r0, r0, ip
 80a4500:	fa23 f302 	lsr.w	r3, r3, r2
 80a4504:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4508:	e7cc      	b.n	80a44a4 <__aeabi_d2f+0x14>
 80a450a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a450e:	d107      	bne.n	80a4520 <__aeabi_d2f+0x90>
 80a4510:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4514:	bf1e      	ittt	ne
 80a4516:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a451a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a451e:	4770      	bxne	lr
 80a4520:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4524:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4528:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a452c:	4770      	bx	lr
 80a452e:	bf00      	nop

080a4530 <__aeabi_frsub>:
 80a4530:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4534:	e002      	b.n	80a453c <__addsf3>
 80a4536:	bf00      	nop

080a4538 <__aeabi_fsub>:
 80a4538:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a453c <__addsf3>:
 80a453c:	0042      	lsls	r2, r0, #1
 80a453e:	bf1f      	itttt	ne
 80a4540:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4544:	ea92 0f03 	teqne	r2, r3
 80a4548:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a454c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4550:	d06a      	beq.n	80a4628 <__addsf3+0xec>
 80a4552:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4556:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a455a:	bfc1      	itttt	gt
 80a455c:	18d2      	addgt	r2, r2, r3
 80a455e:	4041      	eorgt	r1, r0
 80a4560:	4048      	eorgt	r0, r1
 80a4562:	4041      	eorgt	r1, r0
 80a4564:	bfb8      	it	lt
 80a4566:	425b      	neglt	r3, r3
 80a4568:	2b19      	cmp	r3, #25
 80a456a:	bf88      	it	hi
 80a456c:	4770      	bxhi	lr
 80a456e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4572:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4576:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a457a:	bf18      	it	ne
 80a457c:	4240      	negne	r0, r0
 80a457e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4582:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4586:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a458a:	bf18      	it	ne
 80a458c:	4249      	negne	r1, r1
 80a458e:	ea92 0f03 	teq	r2, r3
 80a4592:	d03f      	beq.n	80a4614 <__addsf3+0xd8>
 80a4594:	f1a2 0201 	sub.w	r2, r2, #1
 80a4598:	fa41 fc03 	asr.w	ip, r1, r3
 80a459c:	eb10 000c 	adds.w	r0, r0, ip
 80a45a0:	f1c3 0320 	rsb	r3, r3, #32
 80a45a4:	fa01 f103 	lsl.w	r1, r1, r3
 80a45a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a45ac:	d502      	bpl.n	80a45b4 <__addsf3+0x78>
 80a45ae:	4249      	negs	r1, r1
 80a45b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a45b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a45b8:	d313      	bcc.n	80a45e2 <__addsf3+0xa6>
 80a45ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a45be:	d306      	bcc.n	80a45ce <__addsf3+0x92>
 80a45c0:	0840      	lsrs	r0, r0, #1
 80a45c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a45c6:	f102 0201 	add.w	r2, r2, #1
 80a45ca:	2afe      	cmp	r2, #254	; 0xfe
 80a45cc:	d251      	bcs.n	80a4672 <__addsf3+0x136>
 80a45ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a45d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a45d6:	bf08      	it	eq
 80a45d8:	f020 0001 	biceq.w	r0, r0, #1
 80a45dc:	ea40 0003 	orr.w	r0, r0, r3
 80a45e0:	4770      	bx	lr
 80a45e2:	0049      	lsls	r1, r1, #1
 80a45e4:	eb40 0000 	adc.w	r0, r0, r0
 80a45e8:	3a01      	subs	r2, #1
 80a45ea:	bf28      	it	cs
 80a45ec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a45f0:	d2ed      	bcs.n	80a45ce <__addsf3+0x92>
 80a45f2:	fab0 fc80 	clz	ip, r0
 80a45f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80a45fa:	ebb2 020c 	subs.w	r2, r2, ip
 80a45fe:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4602:	bfaa      	itet	ge
 80a4604:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4608:	4252      	neglt	r2, r2
 80a460a:	4318      	orrge	r0, r3
 80a460c:	bfbc      	itt	lt
 80a460e:	40d0      	lsrlt	r0, r2
 80a4610:	4318      	orrlt	r0, r3
 80a4612:	4770      	bx	lr
 80a4614:	f092 0f00 	teq	r2, #0
 80a4618:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a461c:	bf06      	itte	eq
 80a461e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4622:	3201      	addeq	r2, #1
 80a4624:	3b01      	subne	r3, #1
 80a4626:	e7b5      	b.n	80a4594 <__addsf3+0x58>
 80a4628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a462c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4630:	bf18      	it	ne
 80a4632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4636:	d021      	beq.n	80a467c <__addsf3+0x140>
 80a4638:	ea92 0f03 	teq	r2, r3
 80a463c:	d004      	beq.n	80a4648 <__addsf3+0x10c>
 80a463e:	f092 0f00 	teq	r2, #0
 80a4642:	bf08      	it	eq
 80a4644:	4608      	moveq	r0, r1
 80a4646:	4770      	bx	lr
 80a4648:	ea90 0f01 	teq	r0, r1
 80a464c:	bf1c      	itt	ne
 80a464e:	2000      	movne	r0, #0
 80a4650:	4770      	bxne	lr
 80a4652:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4656:	d104      	bne.n	80a4662 <__addsf3+0x126>
 80a4658:	0040      	lsls	r0, r0, #1
 80a465a:	bf28      	it	cs
 80a465c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4660:	4770      	bx	lr
 80a4662:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4666:	bf3c      	itt	cc
 80a4668:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a466c:	4770      	bxcc	lr
 80a466e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4672:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4676:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a467a:	4770      	bx	lr
 80a467c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4680:	bf16      	itet	ne
 80a4682:	4608      	movne	r0, r1
 80a4684:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4688:	4601      	movne	r1, r0
 80a468a:	0242      	lsls	r2, r0, #9
 80a468c:	bf06      	itte	eq
 80a468e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4692:	ea90 0f01 	teqeq	r0, r1
 80a4696:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a469a:	4770      	bx	lr

080a469c <__aeabi_ui2f>:
 80a469c:	f04f 0300 	mov.w	r3, #0
 80a46a0:	e004      	b.n	80a46ac <__aeabi_i2f+0x8>
 80a46a2:	bf00      	nop

080a46a4 <__aeabi_i2f>:
 80a46a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a46a8:	bf48      	it	mi
 80a46aa:	4240      	negmi	r0, r0
 80a46ac:	ea5f 0c00 	movs.w	ip, r0
 80a46b0:	bf08      	it	eq
 80a46b2:	4770      	bxeq	lr
 80a46b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a46b8:	4601      	mov	r1, r0
 80a46ba:	f04f 0000 	mov.w	r0, #0
 80a46be:	e01c      	b.n	80a46fa <__aeabi_l2f+0x2a>

080a46c0 <__aeabi_ul2f>:
 80a46c0:	ea50 0201 	orrs.w	r2, r0, r1
 80a46c4:	bf08      	it	eq
 80a46c6:	4770      	bxeq	lr
 80a46c8:	f04f 0300 	mov.w	r3, #0
 80a46cc:	e00a      	b.n	80a46e4 <__aeabi_l2f+0x14>
 80a46ce:	bf00      	nop

080a46d0 <__aeabi_l2f>:
 80a46d0:	ea50 0201 	orrs.w	r2, r0, r1
 80a46d4:	bf08      	it	eq
 80a46d6:	4770      	bxeq	lr
 80a46d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a46dc:	d502      	bpl.n	80a46e4 <__aeabi_l2f+0x14>
 80a46de:	4240      	negs	r0, r0
 80a46e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a46e4:	ea5f 0c01 	movs.w	ip, r1
 80a46e8:	bf02      	ittt	eq
 80a46ea:	4684      	moveq	ip, r0
 80a46ec:	4601      	moveq	r1, r0
 80a46ee:	2000      	moveq	r0, #0
 80a46f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a46f4:	bf08      	it	eq
 80a46f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a46fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a46fe:	fabc f28c 	clz	r2, ip
 80a4702:	3a08      	subs	r2, #8
 80a4704:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4708:	db10      	blt.n	80a472c <__aeabi_l2f+0x5c>
 80a470a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a470e:	4463      	add	r3, ip
 80a4710:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4714:	f1c2 0220 	rsb	r2, r2, #32
 80a4718:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a471c:	fa20 f202 	lsr.w	r2, r0, r2
 80a4720:	eb43 0002 	adc.w	r0, r3, r2
 80a4724:	bf08      	it	eq
 80a4726:	f020 0001 	biceq.w	r0, r0, #1
 80a472a:	4770      	bx	lr
 80a472c:	f102 0220 	add.w	r2, r2, #32
 80a4730:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4734:	f1c2 0220 	rsb	r2, r2, #32
 80a4738:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a473c:	fa21 f202 	lsr.w	r2, r1, r2
 80a4740:	eb43 0002 	adc.w	r0, r3, r2
 80a4744:	bf08      	it	eq
 80a4746:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a474a:	4770      	bx	lr

080a474c <__aeabi_fmul>:
 80a474c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4750:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4754:	bf1e      	ittt	ne
 80a4756:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a475a:	ea92 0f0c 	teqne	r2, ip
 80a475e:	ea93 0f0c 	teqne	r3, ip
 80a4762:	d06f      	beq.n	80a4844 <__aeabi_fmul+0xf8>
 80a4764:	441a      	add	r2, r3
 80a4766:	ea80 0c01 	eor.w	ip, r0, r1
 80a476a:	0240      	lsls	r0, r0, #9
 80a476c:	bf18      	it	ne
 80a476e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4772:	d01e      	beq.n	80a47b2 <__aeabi_fmul+0x66>
 80a4774:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4778:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a477c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4780:	fba0 3101 	umull	r3, r1, r0, r1
 80a4784:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4788:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a478c:	bf3e      	ittt	cc
 80a478e:	0049      	lslcc	r1, r1, #1
 80a4790:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4794:	005b      	lslcc	r3, r3, #1
 80a4796:	ea40 0001 	orr.w	r0, r0, r1
 80a479a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a479e:	2afd      	cmp	r2, #253	; 0xfd
 80a47a0:	d81d      	bhi.n	80a47de <__aeabi_fmul+0x92>
 80a47a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a47a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a47aa:	bf08      	it	eq
 80a47ac:	f020 0001 	biceq.w	r0, r0, #1
 80a47b0:	4770      	bx	lr
 80a47b2:	f090 0f00 	teq	r0, #0
 80a47b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a47ba:	bf08      	it	eq
 80a47bc:	0249      	lsleq	r1, r1, #9
 80a47be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a47c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a47c6:	3a7f      	subs	r2, #127	; 0x7f
 80a47c8:	bfc2      	ittt	gt
 80a47ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a47ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a47d2:	4770      	bxgt	lr
 80a47d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a47d8:	f04f 0300 	mov.w	r3, #0
 80a47dc:	3a01      	subs	r2, #1
 80a47de:	dc5d      	bgt.n	80a489c <__aeabi_fmul+0x150>
 80a47e0:	f112 0f19 	cmn.w	r2, #25
 80a47e4:	bfdc      	itt	le
 80a47e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a47ea:	4770      	bxle	lr
 80a47ec:	f1c2 0200 	rsb	r2, r2, #0
 80a47f0:	0041      	lsls	r1, r0, #1
 80a47f2:	fa21 f102 	lsr.w	r1, r1, r2
 80a47f6:	f1c2 0220 	rsb	r2, r2, #32
 80a47fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80a47fe:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4802:	f140 0000 	adc.w	r0, r0, #0
 80a4806:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a480a:	bf08      	it	eq
 80a480c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4810:	4770      	bx	lr
 80a4812:	f092 0f00 	teq	r2, #0
 80a4816:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a481a:	bf02      	ittt	eq
 80a481c:	0040      	lsleq	r0, r0, #1
 80a481e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4822:	3a01      	subeq	r2, #1
 80a4824:	d0f9      	beq.n	80a481a <__aeabi_fmul+0xce>
 80a4826:	ea40 000c 	orr.w	r0, r0, ip
 80a482a:	f093 0f00 	teq	r3, #0
 80a482e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4832:	bf02      	ittt	eq
 80a4834:	0049      	lsleq	r1, r1, #1
 80a4836:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a483a:	3b01      	subeq	r3, #1
 80a483c:	d0f9      	beq.n	80a4832 <__aeabi_fmul+0xe6>
 80a483e:	ea41 010c 	orr.w	r1, r1, ip
 80a4842:	e78f      	b.n	80a4764 <__aeabi_fmul+0x18>
 80a4844:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4848:	ea92 0f0c 	teq	r2, ip
 80a484c:	bf18      	it	ne
 80a484e:	ea93 0f0c 	teqne	r3, ip
 80a4852:	d00a      	beq.n	80a486a <__aeabi_fmul+0x11e>
 80a4854:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4858:	bf18      	it	ne
 80a485a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a485e:	d1d8      	bne.n	80a4812 <__aeabi_fmul+0xc6>
 80a4860:	ea80 0001 	eor.w	r0, r0, r1
 80a4864:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4868:	4770      	bx	lr
 80a486a:	f090 0f00 	teq	r0, #0
 80a486e:	bf17      	itett	ne
 80a4870:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4874:	4608      	moveq	r0, r1
 80a4876:	f091 0f00 	teqne	r1, #0
 80a487a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a487e:	d014      	beq.n	80a48aa <__aeabi_fmul+0x15e>
 80a4880:	ea92 0f0c 	teq	r2, ip
 80a4884:	d101      	bne.n	80a488a <__aeabi_fmul+0x13e>
 80a4886:	0242      	lsls	r2, r0, #9
 80a4888:	d10f      	bne.n	80a48aa <__aeabi_fmul+0x15e>
 80a488a:	ea93 0f0c 	teq	r3, ip
 80a488e:	d103      	bne.n	80a4898 <__aeabi_fmul+0x14c>
 80a4890:	024b      	lsls	r3, r1, #9
 80a4892:	bf18      	it	ne
 80a4894:	4608      	movne	r0, r1
 80a4896:	d108      	bne.n	80a48aa <__aeabi_fmul+0x15e>
 80a4898:	ea80 0001 	eor.w	r0, r0, r1
 80a489c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a48a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a48a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a48a8:	4770      	bx	lr
 80a48aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a48ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a48b2:	4770      	bx	lr

080a48b4 <__aeabi_fdiv>:
 80a48b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a48b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a48bc:	bf1e      	ittt	ne
 80a48be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a48c2:	ea92 0f0c 	teqne	r2, ip
 80a48c6:	ea93 0f0c 	teqne	r3, ip
 80a48ca:	d069      	beq.n	80a49a0 <__aeabi_fdiv+0xec>
 80a48cc:	eba2 0203 	sub.w	r2, r2, r3
 80a48d0:	ea80 0c01 	eor.w	ip, r0, r1
 80a48d4:	0249      	lsls	r1, r1, #9
 80a48d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a48da:	d037      	beq.n	80a494c <__aeabi_fdiv+0x98>
 80a48dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a48e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a48e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a48e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a48ec:	428b      	cmp	r3, r1
 80a48ee:	bf38      	it	cc
 80a48f0:	005b      	lslcc	r3, r3, #1
 80a48f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a48f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a48fa:	428b      	cmp	r3, r1
 80a48fc:	bf24      	itt	cs
 80a48fe:	1a5b      	subcs	r3, r3, r1
 80a4900:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4904:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4908:	bf24      	itt	cs
 80a490a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a490e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4912:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4916:	bf24      	itt	cs
 80a4918:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a491c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4920:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4924:	bf24      	itt	cs
 80a4926:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a492a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a492e:	011b      	lsls	r3, r3, #4
 80a4930:	bf18      	it	ne
 80a4932:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4936:	d1e0      	bne.n	80a48fa <__aeabi_fdiv+0x46>
 80a4938:	2afd      	cmp	r2, #253	; 0xfd
 80a493a:	f63f af50 	bhi.w	80a47de <__aeabi_fmul+0x92>
 80a493e:	428b      	cmp	r3, r1
 80a4940:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4944:	bf08      	it	eq
 80a4946:	f020 0001 	biceq.w	r0, r0, #1
 80a494a:	4770      	bx	lr
 80a494c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4950:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4954:	327f      	adds	r2, #127	; 0x7f
 80a4956:	bfc2      	ittt	gt
 80a4958:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a495c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4960:	4770      	bxgt	lr
 80a4962:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4966:	f04f 0300 	mov.w	r3, #0
 80a496a:	3a01      	subs	r2, #1
 80a496c:	e737      	b.n	80a47de <__aeabi_fmul+0x92>
 80a496e:	f092 0f00 	teq	r2, #0
 80a4972:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4976:	bf02      	ittt	eq
 80a4978:	0040      	lsleq	r0, r0, #1
 80a497a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a497e:	3a01      	subeq	r2, #1
 80a4980:	d0f9      	beq.n	80a4976 <__aeabi_fdiv+0xc2>
 80a4982:	ea40 000c 	orr.w	r0, r0, ip
 80a4986:	f093 0f00 	teq	r3, #0
 80a498a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a498e:	bf02      	ittt	eq
 80a4990:	0049      	lsleq	r1, r1, #1
 80a4992:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4996:	3b01      	subeq	r3, #1
 80a4998:	d0f9      	beq.n	80a498e <__aeabi_fdiv+0xda>
 80a499a:	ea41 010c 	orr.w	r1, r1, ip
 80a499e:	e795      	b.n	80a48cc <__aeabi_fdiv+0x18>
 80a49a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a49a4:	ea92 0f0c 	teq	r2, ip
 80a49a8:	d108      	bne.n	80a49bc <__aeabi_fdiv+0x108>
 80a49aa:	0242      	lsls	r2, r0, #9
 80a49ac:	f47f af7d 	bne.w	80a48aa <__aeabi_fmul+0x15e>
 80a49b0:	ea93 0f0c 	teq	r3, ip
 80a49b4:	f47f af70 	bne.w	80a4898 <__aeabi_fmul+0x14c>
 80a49b8:	4608      	mov	r0, r1
 80a49ba:	e776      	b.n	80a48aa <__aeabi_fmul+0x15e>
 80a49bc:	ea93 0f0c 	teq	r3, ip
 80a49c0:	d104      	bne.n	80a49cc <__aeabi_fdiv+0x118>
 80a49c2:	024b      	lsls	r3, r1, #9
 80a49c4:	f43f af4c 	beq.w	80a4860 <__aeabi_fmul+0x114>
 80a49c8:	4608      	mov	r0, r1
 80a49ca:	e76e      	b.n	80a48aa <__aeabi_fmul+0x15e>
 80a49cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a49d0:	bf18      	it	ne
 80a49d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a49d6:	d1ca      	bne.n	80a496e <__aeabi_fdiv+0xba>
 80a49d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a49dc:	f47f af5c 	bne.w	80a4898 <__aeabi_fmul+0x14c>
 80a49e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a49e4:	f47f af3c 	bne.w	80a4860 <__aeabi_fmul+0x114>
 80a49e8:	e75f      	b.n	80a48aa <__aeabi_fmul+0x15e>
 80a49ea:	bf00      	nop

080a49ec <__gesf2>:
 80a49ec:	f04f 3cff 	mov.w	ip, #4294967295
 80a49f0:	e006      	b.n	80a4a00 <__cmpsf2+0x4>
 80a49f2:	bf00      	nop

080a49f4 <__lesf2>:
 80a49f4:	f04f 0c01 	mov.w	ip, #1
 80a49f8:	e002      	b.n	80a4a00 <__cmpsf2+0x4>
 80a49fa:	bf00      	nop

080a49fc <__cmpsf2>:
 80a49fc:	f04f 0c01 	mov.w	ip, #1
 80a4a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4a04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4a08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4a0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4a10:	bf18      	it	ne
 80a4a12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4a16:	d011      	beq.n	80a4a3c <__cmpsf2+0x40>
 80a4a18:	b001      	add	sp, #4
 80a4a1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a4a1e:	bf18      	it	ne
 80a4a20:	ea90 0f01 	teqne	r0, r1
 80a4a24:	bf58      	it	pl
 80a4a26:	ebb2 0003 	subspl.w	r0, r2, r3
 80a4a2a:	bf88      	it	hi
 80a4a2c:	17c8      	asrhi	r0, r1, #31
 80a4a2e:	bf38      	it	cc
 80a4a30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a4a34:	bf18      	it	ne
 80a4a36:	f040 0001 	orrne.w	r0, r0, #1
 80a4a3a:	4770      	bx	lr
 80a4a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4a40:	d102      	bne.n	80a4a48 <__cmpsf2+0x4c>
 80a4a42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a4a46:	d105      	bne.n	80a4a54 <__cmpsf2+0x58>
 80a4a48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4a4c:	d1e4      	bne.n	80a4a18 <__cmpsf2+0x1c>
 80a4a4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a4a52:	d0e1      	beq.n	80a4a18 <__cmpsf2+0x1c>
 80a4a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4a58:	4770      	bx	lr
 80a4a5a:	bf00      	nop

080a4a5c <__aeabi_cfrcmple>:
 80a4a5c:	4684      	mov	ip, r0
 80a4a5e:	4608      	mov	r0, r1
 80a4a60:	4661      	mov	r1, ip
 80a4a62:	e7ff      	b.n	80a4a64 <__aeabi_cfcmpeq>

080a4a64 <__aeabi_cfcmpeq>:
 80a4a64:	b50f      	push	{r0, r1, r2, r3, lr}
 80a4a66:	f7ff ffc9 	bl	80a49fc <__cmpsf2>
 80a4a6a:	2800      	cmp	r0, #0
 80a4a6c:	bf48      	it	mi
 80a4a6e:	f110 0f00 	cmnmi.w	r0, #0
 80a4a72:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a4a74 <__aeabi_fcmpeq>:
 80a4a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4a78:	f7ff fff4 	bl	80a4a64 <__aeabi_cfcmpeq>
 80a4a7c:	bf0c      	ite	eq
 80a4a7e:	2001      	moveq	r0, #1
 80a4a80:	2000      	movne	r0, #0
 80a4a82:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4a86:	bf00      	nop

080a4a88 <__aeabi_fcmplt>:
 80a4a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4a8c:	f7ff ffea 	bl	80a4a64 <__aeabi_cfcmpeq>
 80a4a90:	bf34      	ite	cc
 80a4a92:	2001      	movcc	r0, #1
 80a4a94:	2000      	movcs	r0, #0
 80a4a96:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4a9a:	bf00      	nop

080a4a9c <__aeabi_fcmple>:
 80a4a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4aa0:	f7ff ffe0 	bl	80a4a64 <__aeabi_cfcmpeq>
 80a4aa4:	bf94      	ite	ls
 80a4aa6:	2001      	movls	r0, #1
 80a4aa8:	2000      	movhi	r0, #0
 80a4aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4aae:	bf00      	nop

080a4ab0 <__aeabi_fcmpge>:
 80a4ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ab4:	f7ff ffd2 	bl	80a4a5c <__aeabi_cfrcmple>
 80a4ab8:	bf94      	ite	ls
 80a4aba:	2001      	movls	r0, #1
 80a4abc:	2000      	movhi	r0, #0
 80a4abe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4ac2:	bf00      	nop

080a4ac4 <__aeabi_fcmpgt>:
 80a4ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ac8:	f7ff ffc8 	bl	80a4a5c <__aeabi_cfrcmple>
 80a4acc:	bf34      	ite	cc
 80a4ace:	2001      	movcc	r0, #1
 80a4ad0:	2000      	movcs	r0, #0
 80a4ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4ad6:	bf00      	nop

080a4ad8 <__aeabi_f2iz>:
 80a4ad8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4adc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4ae0:	d30f      	bcc.n	80a4b02 <__aeabi_f2iz+0x2a>
 80a4ae2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a4ae6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a4aea:	d90d      	bls.n	80a4b08 <__aeabi_f2iz+0x30>
 80a4aec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4af4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4af8:	fa23 f002 	lsr.w	r0, r3, r2
 80a4afc:	bf18      	it	ne
 80a4afe:	4240      	negne	r0, r0
 80a4b00:	4770      	bx	lr
 80a4b02:	f04f 0000 	mov.w	r0, #0
 80a4b06:	4770      	bx	lr
 80a4b08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a4b0c:	d101      	bne.n	80a4b12 <__aeabi_f2iz+0x3a>
 80a4b0e:	0242      	lsls	r2, r0, #9
 80a4b10:	d105      	bne.n	80a4b1e <__aeabi_f2iz+0x46>
 80a4b12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a4b16:	bf08      	it	eq
 80a4b18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4b1c:	4770      	bx	lr
 80a4b1e:	f04f 0000 	mov.w	r0, #0
 80a4b22:	4770      	bx	lr

080a4b24 <__aeabi_f2lz>:
 80a4b24:	b510      	push	{r4, lr}
 80a4b26:	2100      	movs	r1, #0
 80a4b28:	4604      	mov	r4, r0
 80a4b2a:	f7ff ffad 	bl	80a4a88 <__aeabi_fcmplt>
 80a4b2e:	b920      	cbnz	r0, 80a4b3a <__aeabi_f2lz+0x16>
 80a4b30:	4620      	mov	r0, r4
 80a4b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a4b36:	f000 b809 	b.w	80a4b4c <__aeabi_f2ulz>
 80a4b3a:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a4b3e:	f000 f805 	bl	80a4b4c <__aeabi_f2ulz>
 80a4b42:	4240      	negs	r0, r0
 80a4b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4b48:	bd10      	pop	{r4, pc}
 80a4b4a:	bf00      	nop

080a4b4c <__aeabi_f2ulz>:
 80a4b4c:	b5d0      	push	{r4, r6, r7, lr}
 80a4b4e:	f7ff fa15 	bl	80a3f7c <__aeabi_f2d>
 80a4b52:	2200      	movs	r2, #0
 80a4b54:	4b0b      	ldr	r3, [pc, #44]	; (80a4b84 <__aeabi_f2ulz+0x38>)
 80a4b56:	4606      	mov	r6, r0
 80a4b58:	460f      	mov	r7, r1
 80a4b5a:	f7ff fa67 	bl	80a402c <__aeabi_dmul>
 80a4b5e:	f7ff fc77 	bl	80a4450 <__aeabi_d2uiz>
 80a4b62:	4604      	mov	r4, r0
 80a4b64:	f7ff f9e8 	bl	80a3f38 <__aeabi_ui2d>
 80a4b68:	2200      	movs	r2, #0
 80a4b6a:	4b07      	ldr	r3, [pc, #28]	; (80a4b88 <__aeabi_f2ulz+0x3c>)
 80a4b6c:	f7ff fa5e 	bl	80a402c <__aeabi_dmul>
 80a4b70:	4602      	mov	r2, r0
 80a4b72:	460b      	mov	r3, r1
 80a4b74:	4630      	mov	r0, r6
 80a4b76:	4639      	mov	r1, r7
 80a4b78:	f7ff f8a0 	bl	80a3cbc <__aeabi_dsub>
 80a4b7c:	f7ff fc68 	bl	80a4450 <__aeabi_d2uiz>
 80a4b80:	4621      	mov	r1, r4
 80a4b82:	bdd0      	pop	{r4, r6, r7, pc}
 80a4b84:	3df00000 	.word	0x3df00000
 80a4b88:	41f00000 	.word	0x41f00000

080a4b8c <__udivmoddi4>:
 80a4b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4b90:	9e08      	ldr	r6, [sp, #32]
 80a4b92:	460d      	mov	r5, r1
 80a4b94:	4604      	mov	r4, r0
 80a4b96:	468e      	mov	lr, r1
 80a4b98:	2b00      	cmp	r3, #0
 80a4b9a:	f040 8083 	bne.w	80a4ca4 <__udivmoddi4+0x118>
 80a4b9e:	428a      	cmp	r2, r1
 80a4ba0:	4617      	mov	r7, r2
 80a4ba2:	d947      	bls.n	80a4c34 <__udivmoddi4+0xa8>
 80a4ba4:	fab2 f382 	clz	r3, r2
 80a4ba8:	b14b      	cbz	r3, 80a4bbe <__udivmoddi4+0x32>
 80a4baa:	f1c3 0120 	rsb	r1, r3, #32
 80a4bae:	fa05 fe03 	lsl.w	lr, r5, r3
 80a4bb2:	fa20 f101 	lsr.w	r1, r0, r1
 80a4bb6:	409f      	lsls	r7, r3
 80a4bb8:	ea41 0e0e 	orr.w	lr, r1, lr
 80a4bbc:	409c      	lsls	r4, r3
 80a4bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a4bc2:	fbbe fcf8 	udiv	ip, lr, r8
 80a4bc6:	fa1f f987 	uxth.w	r9, r7
 80a4bca:	fb08 e21c 	mls	r2, r8, ip, lr
 80a4bce:	fb0c f009 	mul.w	r0, ip, r9
 80a4bd2:	0c21      	lsrs	r1, r4, #16
 80a4bd4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a4bd8:	4290      	cmp	r0, r2
 80a4bda:	d90a      	bls.n	80a4bf2 <__udivmoddi4+0x66>
 80a4bdc:	18ba      	adds	r2, r7, r2
 80a4bde:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a4be2:	f080 8118 	bcs.w	80a4e16 <__udivmoddi4+0x28a>
 80a4be6:	4290      	cmp	r0, r2
 80a4be8:	f240 8115 	bls.w	80a4e16 <__udivmoddi4+0x28a>
 80a4bec:	f1ac 0c02 	sub.w	ip, ip, #2
 80a4bf0:	443a      	add	r2, r7
 80a4bf2:	1a12      	subs	r2, r2, r0
 80a4bf4:	fbb2 f0f8 	udiv	r0, r2, r8
 80a4bf8:	fb08 2210 	mls	r2, r8, r0, r2
 80a4bfc:	fb00 f109 	mul.w	r1, r0, r9
 80a4c00:	b2a4      	uxth	r4, r4
 80a4c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4c06:	42a1      	cmp	r1, r4
 80a4c08:	d909      	bls.n	80a4c1e <__udivmoddi4+0x92>
 80a4c0a:	193c      	adds	r4, r7, r4
 80a4c0c:	f100 32ff 	add.w	r2, r0, #4294967295
 80a4c10:	f080 8103 	bcs.w	80a4e1a <__udivmoddi4+0x28e>
 80a4c14:	42a1      	cmp	r1, r4
 80a4c16:	f240 8100 	bls.w	80a4e1a <__udivmoddi4+0x28e>
 80a4c1a:	3802      	subs	r0, #2
 80a4c1c:	443c      	add	r4, r7
 80a4c1e:	1a64      	subs	r4, r4, r1
 80a4c20:	2100      	movs	r1, #0
 80a4c22:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a4c26:	b11e      	cbz	r6, 80a4c30 <__udivmoddi4+0xa4>
 80a4c28:	2200      	movs	r2, #0
 80a4c2a:	40dc      	lsrs	r4, r3
 80a4c2c:	e9c6 4200 	strd	r4, r2, [r6]
 80a4c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4c34:	b902      	cbnz	r2, 80a4c38 <__udivmoddi4+0xac>
 80a4c36:	deff      	udf	#255	; 0xff
 80a4c38:	fab2 f382 	clz	r3, r2
 80a4c3c:	2b00      	cmp	r3, #0
 80a4c3e:	d14f      	bne.n	80a4ce0 <__udivmoddi4+0x154>
 80a4c40:	1a8d      	subs	r5, r1, r2
 80a4c42:	2101      	movs	r1, #1
 80a4c44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a4c48:	fa1f f882 	uxth.w	r8, r2
 80a4c4c:	fbb5 fcfe 	udiv	ip, r5, lr
 80a4c50:	fb0e 551c 	mls	r5, lr, ip, r5
 80a4c54:	fb08 f00c 	mul.w	r0, r8, ip
 80a4c58:	0c22      	lsrs	r2, r4, #16
 80a4c5a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a4c5e:	42a8      	cmp	r0, r5
 80a4c60:	d907      	bls.n	80a4c72 <__udivmoddi4+0xe6>
 80a4c62:	197d      	adds	r5, r7, r5
 80a4c64:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a4c68:	d202      	bcs.n	80a4c70 <__udivmoddi4+0xe4>
 80a4c6a:	42a8      	cmp	r0, r5
 80a4c6c:	f200 80e9 	bhi.w	80a4e42 <__udivmoddi4+0x2b6>
 80a4c70:	4694      	mov	ip, r2
 80a4c72:	1a2d      	subs	r5, r5, r0
 80a4c74:	fbb5 f0fe 	udiv	r0, r5, lr
 80a4c78:	fb0e 5510 	mls	r5, lr, r0, r5
 80a4c7c:	fb08 f800 	mul.w	r8, r8, r0
 80a4c80:	b2a4      	uxth	r4, r4
 80a4c82:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a4c86:	45a0      	cmp	r8, r4
 80a4c88:	d907      	bls.n	80a4c9a <__udivmoddi4+0x10e>
 80a4c8a:	193c      	adds	r4, r7, r4
 80a4c8c:	f100 32ff 	add.w	r2, r0, #4294967295
 80a4c90:	d202      	bcs.n	80a4c98 <__udivmoddi4+0x10c>
 80a4c92:	45a0      	cmp	r8, r4
 80a4c94:	f200 80d9 	bhi.w	80a4e4a <__udivmoddi4+0x2be>
 80a4c98:	4610      	mov	r0, r2
 80a4c9a:	eba4 0408 	sub.w	r4, r4, r8
 80a4c9e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a4ca2:	e7c0      	b.n	80a4c26 <__udivmoddi4+0x9a>
 80a4ca4:	428b      	cmp	r3, r1
 80a4ca6:	d908      	bls.n	80a4cba <__udivmoddi4+0x12e>
 80a4ca8:	2e00      	cmp	r6, #0
 80a4caa:	f000 80b1 	beq.w	80a4e10 <__udivmoddi4+0x284>
 80a4cae:	2100      	movs	r1, #0
 80a4cb0:	e9c6 0500 	strd	r0, r5, [r6]
 80a4cb4:	4608      	mov	r0, r1
 80a4cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4cba:	fab3 f183 	clz	r1, r3
 80a4cbe:	2900      	cmp	r1, #0
 80a4cc0:	d14b      	bne.n	80a4d5a <__udivmoddi4+0x1ce>
 80a4cc2:	42ab      	cmp	r3, r5
 80a4cc4:	d302      	bcc.n	80a4ccc <__udivmoddi4+0x140>
 80a4cc6:	4282      	cmp	r2, r0
 80a4cc8:	f200 80b9 	bhi.w	80a4e3e <__udivmoddi4+0x2b2>
 80a4ccc:	1a84      	subs	r4, r0, r2
 80a4cce:	eb65 0303 	sbc.w	r3, r5, r3
 80a4cd2:	2001      	movs	r0, #1
 80a4cd4:	469e      	mov	lr, r3
 80a4cd6:	2e00      	cmp	r6, #0
 80a4cd8:	d0aa      	beq.n	80a4c30 <__udivmoddi4+0xa4>
 80a4cda:	e9c6 4e00 	strd	r4, lr, [r6]
 80a4cde:	e7a7      	b.n	80a4c30 <__udivmoddi4+0xa4>
 80a4ce0:	409f      	lsls	r7, r3
 80a4ce2:	f1c3 0220 	rsb	r2, r3, #32
 80a4ce6:	40d1      	lsrs	r1, r2
 80a4ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a4cec:	fbb1 f0fe 	udiv	r0, r1, lr
 80a4cf0:	fa1f f887 	uxth.w	r8, r7
 80a4cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 80a4cf8:	fa24 f202 	lsr.w	r2, r4, r2
 80a4cfc:	409d      	lsls	r5, r3
 80a4cfe:	fb00 fc08 	mul.w	ip, r0, r8
 80a4d02:	432a      	orrs	r2, r5
 80a4d04:	0c15      	lsrs	r5, r2, #16
 80a4d06:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a4d0a:	45ac      	cmp	ip, r5
 80a4d0c:	fa04 f403 	lsl.w	r4, r4, r3
 80a4d10:	d909      	bls.n	80a4d26 <__udivmoddi4+0x19a>
 80a4d12:	197d      	adds	r5, r7, r5
 80a4d14:	f100 31ff 	add.w	r1, r0, #4294967295
 80a4d18:	f080 808f 	bcs.w	80a4e3a <__udivmoddi4+0x2ae>
 80a4d1c:	45ac      	cmp	ip, r5
 80a4d1e:	f240 808c 	bls.w	80a4e3a <__udivmoddi4+0x2ae>
 80a4d22:	3802      	subs	r0, #2
 80a4d24:	443d      	add	r5, r7
 80a4d26:	eba5 050c 	sub.w	r5, r5, ip
 80a4d2a:	fbb5 f1fe 	udiv	r1, r5, lr
 80a4d2e:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a4d32:	fb01 f908 	mul.w	r9, r1, r8
 80a4d36:	b295      	uxth	r5, r2
 80a4d38:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a4d3c:	45a9      	cmp	r9, r5
 80a4d3e:	d907      	bls.n	80a4d50 <__udivmoddi4+0x1c4>
 80a4d40:	197d      	adds	r5, r7, r5
 80a4d42:	f101 32ff 	add.w	r2, r1, #4294967295
 80a4d46:	d274      	bcs.n	80a4e32 <__udivmoddi4+0x2a6>
 80a4d48:	45a9      	cmp	r9, r5
 80a4d4a:	d972      	bls.n	80a4e32 <__udivmoddi4+0x2a6>
 80a4d4c:	3902      	subs	r1, #2
 80a4d4e:	443d      	add	r5, r7
 80a4d50:	eba5 0509 	sub.w	r5, r5, r9
 80a4d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a4d58:	e778      	b.n	80a4c4c <__udivmoddi4+0xc0>
 80a4d5a:	f1c1 0720 	rsb	r7, r1, #32
 80a4d5e:	408b      	lsls	r3, r1
 80a4d60:	fa22 fc07 	lsr.w	ip, r2, r7
 80a4d64:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4d68:	fa25 f407 	lsr.w	r4, r5, r7
 80a4d6c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a4d70:	fbb4 f9fe 	udiv	r9, r4, lr
 80a4d74:	fa1f f88c 	uxth.w	r8, ip
 80a4d78:	fb0e 4419 	mls	r4, lr, r9, r4
 80a4d7c:	fa20 f307 	lsr.w	r3, r0, r7
 80a4d80:	fb09 fa08 	mul.w	sl, r9, r8
 80a4d84:	408d      	lsls	r5, r1
 80a4d86:	431d      	orrs	r5, r3
 80a4d88:	0c2b      	lsrs	r3, r5, #16
 80a4d8a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a4d8e:	45a2      	cmp	sl, r4
 80a4d90:	fa02 f201 	lsl.w	r2, r2, r1
 80a4d94:	fa00 f301 	lsl.w	r3, r0, r1
 80a4d98:	d909      	bls.n	80a4dae <__udivmoddi4+0x222>
 80a4d9a:	eb1c 0404 	adds.w	r4, ip, r4
 80a4d9e:	f109 30ff 	add.w	r0, r9, #4294967295
 80a4da2:	d248      	bcs.n	80a4e36 <__udivmoddi4+0x2aa>
 80a4da4:	45a2      	cmp	sl, r4
 80a4da6:	d946      	bls.n	80a4e36 <__udivmoddi4+0x2aa>
 80a4da8:	f1a9 0902 	sub.w	r9, r9, #2
 80a4dac:	4464      	add	r4, ip
 80a4dae:	eba4 040a 	sub.w	r4, r4, sl
 80a4db2:	fbb4 f0fe 	udiv	r0, r4, lr
 80a4db6:	fb0e 4410 	mls	r4, lr, r0, r4
 80a4dba:	fb00 fa08 	mul.w	sl, r0, r8
 80a4dbe:	b2ad      	uxth	r5, r5
 80a4dc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a4dc4:	45a2      	cmp	sl, r4
 80a4dc6:	d908      	bls.n	80a4dda <__udivmoddi4+0x24e>
 80a4dc8:	eb1c 0404 	adds.w	r4, ip, r4
 80a4dcc:	f100 35ff 	add.w	r5, r0, #4294967295
 80a4dd0:	d22d      	bcs.n	80a4e2e <__udivmoddi4+0x2a2>
 80a4dd2:	45a2      	cmp	sl, r4
 80a4dd4:	d92b      	bls.n	80a4e2e <__udivmoddi4+0x2a2>
 80a4dd6:	3802      	subs	r0, #2
 80a4dd8:	4464      	add	r4, ip
 80a4dda:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a4dde:	fba0 8902 	umull	r8, r9, r0, r2
 80a4de2:	eba4 040a 	sub.w	r4, r4, sl
 80a4de6:	454c      	cmp	r4, r9
 80a4de8:	46c6      	mov	lr, r8
 80a4dea:	464d      	mov	r5, r9
 80a4dec:	d319      	bcc.n	80a4e22 <__udivmoddi4+0x296>
 80a4dee:	d016      	beq.n	80a4e1e <__udivmoddi4+0x292>
 80a4df0:	b15e      	cbz	r6, 80a4e0a <__udivmoddi4+0x27e>
 80a4df2:	ebb3 020e 	subs.w	r2, r3, lr
 80a4df6:	eb64 0405 	sbc.w	r4, r4, r5
 80a4dfa:	fa04 f707 	lsl.w	r7, r4, r7
 80a4dfe:	fa22 f301 	lsr.w	r3, r2, r1
 80a4e02:	431f      	orrs	r7, r3
 80a4e04:	40cc      	lsrs	r4, r1
 80a4e06:	e9c6 7400 	strd	r7, r4, [r6]
 80a4e0a:	2100      	movs	r1, #0
 80a4e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4e10:	4631      	mov	r1, r6
 80a4e12:	4630      	mov	r0, r6
 80a4e14:	e70c      	b.n	80a4c30 <__udivmoddi4+0xa4>
 80a4e16:	468c      	mov	ip, r1
 80a4e18:	e6eb      	b.n	80a4bf2 <__udivmoddi4+0x66>
 80a4e1a:	4610      	mov	r0, r2
 80a4e1c:	e6ff      	b.n	80a4c1e <__udivmoddi4+0x92>
 80a4e1e:	4543      	cmp	r3, r8
 80a4e20:	d2e6      	bcs.n	80a4df0 <__udivmoddi4+0x264>
 80a4e22:	ebb8 0e02 	subs.w	lr, r8, r2
 80a4e26:	eb69 050c 	sbc.w	r5, r9, ip
 80a4e2a:	3801      	subs	r0, #1
 80a4e2c:	e7e0      	b.n	80a4df0 <__udivmoddi4+0x264>
 80a4e2e:	4628      	mov	r0, r5
 80a4e30:	e7d3      	b.n	80a4dda <__udivmoddi4+0x24e>
 80a4e32:	4611      	mov	r1, r2
 80a4e34:	e78c      	b.n	80a4d50 <__udivmoddi4+0x1c4>
 80a4e36:	4681      	mov	r9, r0
 80a4e38:	e7b9      	b.n	80a4dae <__udivmoddi4+0x222>
 80a4e3a:	4608      	mov	r0, r1
 80a4e3c:	e773      	b.n	80a4d26 <__udivmoddi4+0x19a>
 80a4e3e:	4608      	mov	r0, r1
 80a4e40:	e749      	b.n	80a4cd6 <__udivmoddi4+0x14a>
 80a4e42:	f1ac 0c02 	sub.w	ip, ip, #2
 80a4e46:	443d      	add	r5, r7
 80a4e48:	e713      	b.n	80a4c72 <__udivmoddi4+0xe6>
 80a4e4a:	3802      	subs	r0, #2
 80a4e4c:	443c      	add	r4, r7
 80a4e4e:	e724      	b.n	80a4c9a <__udivmoddi4+0x10e>

080a4e50 <__aeabi_idiv0>:
 80a4e50:	4770      	bx	lr
 80a4e52:	bf00      	nop

080a4e54 <__cxa_atexit>:
 80a4e54:	b510      	push	{r4, lr}
 80a4e56:	4604      	mov	r4, r0
 80a4e58:	4804      	ldr	r0, [pc, #16]	; (80a4e6c <__cxa_atexit+0x18>)
 80a4e5a:	4613      	mov	r3, r2
 80a4e5c:	b120      	cbz	r0, 80a4e68 <__cxa_atexit+0x14>
 80a4e5e:	460a      	mov	r2, r1
 80a4e60:	2002      	movs	r0, #2
 80a4e62:	4621      	mov	r1, r4
 80a4e64:	f3af 8000 	nop.w
 80a4e68:	bd10      	pop	{r4, pc}
 80a4e6a:	bf00      	nop
 80a4e6c:	00000000 	.word	0x00000000

080a4e70 <localtime_r>:
 80a4e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4e74:	460c      	mov	r4, r1
 80a4e76:	4607      	mov	r7, r0
 80a4e78:	f000 fc74 	bl	80a5764 <__gettzinfo>
 80a4e7c:	4621      	mov	r1, r4
 80a4e7e:	4680      	mov	r8, r0
 80a4e80:	4638      	mov	r0, r7
 80a4e82:	f000 fc73 	bl	80a576c <gmtime_r>
 80a4e86:	6943      	ldr	r3, [r0, #20]
 80a4e88:	4604      	mov	r4, r0
 80a4e8a:	079a      	lsls	r2, r3, #30
 80a4e8c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a4e90:	d105      	bne.n	80a4e9e <localtime_r+0x2e>
 80a4e92:	2264      	movs	r2, #100	; 0x64
 80a4e94:	fb96 f3f2 	sdiv	r3, r6, r2
 80a4e98:	fb02 6313 	mls	r3, r2, r3, r6
 80a4e9c:	bb7b      	cbnz	r3, 80a4efe <localtime_r+0x8e>
 80a4e9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a4ea2:	fb96 f5f3 	sdiv	r5, r6, r3
 80a4ea6:	fb03 6515 	mls	r5, r3, r5, r6
 80a4eaa:	fab5 f585 	clz	r5, r5
 80a4eae:	096d      	lsrs	r5, r5, #5
 80a4eb0:	2230      	movs	r2, #48	; 0x30
 80a4eb2:	4b68      	ldr	r3, [pc, #416]	; (80a5054 <localtime_r+0x1e4>)
 80a4eb4:	fb02 3505 	mla	r5, r2, r5, r3
 80a4eb8:	f000 fa80 	bl	80a53bc <__tz_lock>
 80a4ebc:	f000 fa8a 	bl	80a53d4 <_tzset_unlocked>
 80a4ec0:	4b65      	ldr	r3, [pc, #404]	; (80a5058 <localtime_r+0x1e8>)
 80a4ec2:	681b      	ldr	r3, [r3, #0]
 80a4ec4:	b353      	cbz	r3, 80a4f1c <localtime_r+0xac>
 80a4ec6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a4eca:	42b3      	cmp	r3, r6
 80a4ecc:	d119      	bne.n	80a4f02 <localtime_r+0x92>
 80a4ece:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a4ed2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a4ed6:	f8d8 1000 	ldr.w	r1, [r8]
 80a4eda:	b9d1      	cbnz	r1, 80a4f12 <localtime_r+0xa2>
 80a4edc:	4296      	cmp	r6, r2
 80a4ede:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4ee2:	da23      	bge.n	80a4f2c <localtime_r+0xbc>
 80a4ee4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a4ee8:	4296      	cmp	r6, r2
 80a4eea:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4eee:	bfb4      	ite	lt
 80a4ef0:	2301      	movlt	r3, #1
 80a4ef2:	2300      	movge	r3, #0
 80a4ef4:	6223      	str	r3, [r4, #32]
 80a4ef6:	db1b      	blt.n	80a4f30 <localtime_r+0xc0>
 80a4ef8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a4efc:	e01a      	b.n	80a4f34 <localtime_r+0xc4>
 80a4efe:	2501      	movs	r5, #1
 80a4f00:	e7d6      	b.n	80a4eb0 <localtime_r+0x40>
 80a4f02:	4630      	mov	r0, r6
 80a4f04:	f000 f9b2 	bl	80a526c <__tzcalc_limits>
 80a4f08:	2800      	cmp	r0, #0
 80a4f0a:	d1e0      	bne.n	80a4ece <localtime_r+0x5e>
 80a4f0c:	f04f 33ff 	mov.w	r3, #4294967295
 80a4f10:	e004      	b.n	80a4f1c <localtime_r+0xac>
 80a4f12:	4296      	cmp	r6, r2
 80a4f14:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4f18:	da02      	bge.n	80a4f20 <localtime_r+0xb0>
 80a4f1a:	2300      	movs	r3, #0
 80a4f1c:	6223      	str	r3, [r4, #32]
 80a4f1e:	e7eb      	b.n	80a4ef8 <localtime_r+0x88>
 80a4f20:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a4f24:	4296      	cmp	r6, r2
 80a4f26:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4f2a:	daf6      	bge.n	80a4f1a <localtime_r+0xaa>
 80a4f2c:	2301      	movs	r3, #1
 80a4f2e:	6223      	str	r3, [r4, #32]
 80a4f30:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a4f34:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4f38:	fb91 f6f3 	sdiv	r6, r1, r3
 80a4f3c:	203c      	movs	r0, #60	; 0x3c
 80a4f3e:	fb03 1316 	mls	r3, r3, r6, r1
 80a4f42:	fb93 f2f0 	sdiv	r2, r3, r0
 80a4f46:	fb00 3012 	mls	r0, r0, r2, r3
 80a4f4a:	6861      	ldr	r1, [r4, #4]
 80a4f4c:	6823      	ldr	r3, [r4, #0]
 80a4f4e:	1a89      	subs	r1, r1, r2
 80a4f50:	68a2      	ldr	r2, [r4, #8]
 80a4f52:	1a1b      	subs	r3, r3, r0
 80a4f54:	1b92      	subs	r2, r2, r6
 80a4f56:	2b3b      	cmp	r3, #59	; 0x3b
 80a4f58:	6023      	str	r3, [r4, #0]
 80a4f5a:	6061      	str	r1, [r4, #4]
 80a4f5c:	60a2      	str	r2, [r4, #8]
 80a4f5e:	dd34      	ble.n	80a4fca <localtime_r+0x15a>
 80a4f60:	3101      	adds	r1, #1
 80a4f62:	6061      	str	r1, [r4, #4]
 80a4f64:	3b3c      	subs	r3, #60	; 0x3c
 80a4f66:	6023      	str	r3, [r4, #0]
 80a4f68:	6863      	ldr	r3, [r4, #4]
 80a4f6a:	2b3b      	cmp	r3, #59	; 0x3b
 80a4f6c:	dd33      	ble.n	80a4fd6 <localtime_r+0x166>
 80a4f6e:	3201      	adds	r2, #1
 80a4f70:	60a2      	str	r2, [r4, #8]
 80a4f72:	3b3c      	subs	r3, #60	; 0x3c
 80a4f74:	6063      	str	r3, [r4, #4]
 80a4f76:	68a3      	ldr	r3, [r4, #8]
 80a4f78:	2b17      	cmp	r3, #23
 80a4f7a:	dd32      	ble.n	80a4fe2 <localtime_r+0x172>
 80a4f7c:	69e2      	ldr	r2, [r4, #28]
 80a4f7e:	3b18      	subs	r3, #24
 80a4f80:	3201      	adds	r2, #1
 80a4f82:	61e2      	str	r2, [r4, #28]
 80a4f84:	69a2      	ldr	r2, [r4, #24]
 80a4f86:	60a3      	str	r3, [r4, #8]
 80a4f88:	3201      	adds	r2, #1
 80a4f8a:	2a06      	cmp	r2, #6
 80a4f8c:	bfc8      	it	gt
 80a4f8e:	2200      	movgt	r2, #0
 80a4f90:	61a2      	str	r2, [r4, #24]
 80a4f92:	68e2      	ldr	r2, [r4, #12]
 80a4f94:	6923      	ldr	r3, [r4, #16]
 80a4f96:	3201      	adds	r2, #1
 80a4f98:	60e2      	str	r2, [r4, #12]
 80a4f9a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a4f9e:	428a      	cmp	r2, r1
 80a4fa0:	dd0e      	ble.n	80a4fc0 <localtime_r+0x150>
 80a4fa2:	2b0b      	cmp	r3, #11
 80a4fa4:	eba2 0201 	sub.w	r2, r2, r1
 80a4fa8:	60e2      	str	r2, [r4, #12]
 80a4faa:	f103 0201 	add.w	r2, r3, #1
 80a4fae:	bf05      	ittet	eq
 80a4fb0:	2200      	moveq	r2, #0
 80a4fb2:	6963      	ldreq	r3, [r4, #20]
 80a4fb4:	6122      	strne	r2, [r4, #16]
 80a4fb6:	3301      	addeq	r3, #1
 80a4fb8:	bf02      	ittt	eq
 80a4fba:	6122      	streq	r2, [r4, #16]
 80a4fbc:	6163      	streq	r3, [r4, #20]
 80a4fbe:	61e2      	streq	r2, [r4, #28]
 80a4fc0:	f000 fa02 	bl	80a53c8 <__tz_unlock>
 80a4fc4:	4620      	mov	r0, r4
 80a4fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4fca:	2b00      	cmp	r3, #0
 80a4fcc:	dacc      	bge.n	80a4f68 <localtime_r+0xf8>
 80a4fce:	3901      	subs	r1, #1
 80a4fd0:	6061      	str	r1, [r4, #4]
 80a4fd2:	333c      	adds	r3, #60	; 0x3c
 80a4fd4:	e7c7      	b.n	80a4f66 <localtime_r+0xf6>
 80a4fd6:	2b00      	cmp	r3, #0
 80a4fd8:	dacd      	bge.n	80a4f76 <localtime_r+0x106>
 80a4fda:	3a01      	subs	r2, #1
 80a4fdc:	60a2      	str	r2, [r4, #8]
 80a4fde:	333c      	adds	r3, #60	; 0x3c
 80a4fe0:	e7c8      	b.n	80a4f74 <localtime_r+0x104>
 80a4fe2:	2b00      	cmp	r3, #0
 80a4fe4:	daec      	bge.n	80a4fc0 <localtime_r+0x150>
 80a4fe6:	69e2      	ldr	r2, [r4, #28]
 80a4fe8:	3318      	adds	r3, #24
 80a4fea:	3a01      	subs	r2, #1
 80a4fec:	61e2      	str	r2, [r4, #28]
 80a4fee:	69a2      	ldr	r2, [r4, #24]
 80a4ff0:	60a3      	str	r3, [r4, #8]
 80a4ff2:	3a01      	subs	r2, #1
 80a4ff4:	bf48      	it	mi
 80a4ff6:	2206      	movmi	r2, #6
 80a4ff8:	61a2      	str	r2, [r4, #24]
 80a4ffa:	68e2      	ldr	r2, [r4, #12]
 80a4ffc:	3a01      	subs	r2, #1
 80a4ffe:	60e2      	str	r2, [r4, #12]
 80a5000:	2a00      	cmp	r2, #0
 80a5002:	d1dd      	bne.n	80a4fc0 <localtime_r+0x150>
 80a5004:	6923      	ldr	r3, [r4, #16]
 80a5006:	3b01      	subs	r3, #1
 80a5008:	d405      	bmi.n	80a5016 <localtime_r+0x1a6>
 80a500a:	6123      	str	r3, [r4, #16]
 80a500c:	6923      	ldr	r3, [r4, #16]
 80a500e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a5012:	60e3      	str	r3, [r4, #12]
 80a5014:	e7d4      	b.n	80a4fc0 <localtime_r+0x150>
 80a5016:	230b      	movs	r3, #11
 80a5018:	6123      	str	r3, [r4, #16]
 80a501a:	6963      	ldr	r3, [r4, #20]
 80a501c:	1e5a      	subs	r2, r3, #1
 80a501e:	6162      	str	r2, [r4, #20]
 80a5020:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a5024:	0793      	lsls	r3, r2, #30
 80a5026:	d105      	bne.n	80a5034 <localtime_r+0x1c4>
 80a5028:	2164      	movs	r1, #100	; 0x64
 80a502a:	fb92 f3f1 	sdiv	r3, r2, r1
 80a502e:	fb01 2313 	mls	r3, r1, r3, r2
 80a5032:	b963      	cbnz	r3, 80a504e <localtime_r+0x1de>
 80a5034:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5038:	fb92 f3f1 	sdiv	r3, r2, r1
 80a503c:	fb01 2313 	mls	r3, r1, r3, r2
 80a5040:	fab3 f383 	clz	r3, r3
 80a5044:	095b      	lsrs	r3, r3, #5
 80a5046:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a504a:	61e3      	str	r3, [r4, #28]
 80a504c:	e7de      	b.n	80a500c <localtime_r+0x19c>
 80a504e:	2301      	movs	r3, #1
 80a5050:	e7f9      	b.n	80a5046 <localtime_r+0x1d6>
 80a5052:	bf00      	nop
 80a5054:	080a68b0 	.word	0x080a68b0
 80a5058:	20000478 	.word	0x20000478

080a505c <memcpy>:
 80a505c:	440a      	add	r2, r1
 80a505e:	4291      	cmp	r1, r2
 80a5060:	f100 33ff 	add.w	r3, r0, #4294967295
 80a5064:	d100      	bne.n	80a5068 <memcpy+0xc>
 80a5066:	4770      	bx	lr
 80a5068:	b510      	push	{r4, lr}
 80a506a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a506e:	4291      	cmp	r1, r2
 80a5070:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a5074:	d1f9      	bne.n	80a506a <memcpy+0xe>
 80a5076:	bd10      	pop	{r4, pc}

080a5078 <memset>:
 80a5078:	4603      	mov	r3, r0
 80a507a:	4402      	add	r2, r0
 80a507c:	4293      	cmp	r3, r2
 80a507e:	d100      	bne.n	80a5082 <memset+0xa>
 80a5080:	4770      	bx	lr
 80a5082:	f803 1b01 	strb.w	r1, [r3], #1
 80a5086:	e7f9      	b.n	80a507c <memset+0x4>

080a5088 <srand>:
 80a5088:	b538      	push	{r3, r4, r5, lr}
 80a508a:	4b0d      	ldr	r3, [pc, #52]	; (80a50c0 <srand+0x38>)
 80a508c:	4604      	mov	r4, r0
 80a508e:	681d      	ldr	r5, [r3, #0]
 80a5090:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a5092:	b97b      	cbnz	r3, 80a50b4 <srand+0x2c>
 80a5094:	2018      	movs	r0, #24
 80a5096:	f7fd fb21 	bl	80a26dc <malloc>
 80a509a:	4a0a      	ldr	r2, [pc, #40]	; (80a50c4 <srand+0x3c>)
 80a509c:	4b0a      	ldr	r3, [pc, #40]	; (80a50c8 <srand+0x40>)
 80a509e:	63a8      	str	r0, [r5, #56]	; 0x38
 80a50a0:	e9c0 2300 	strd	r2, r3, [r0]
 80a50a4:	4b09      	ldr	r3, [pc, #36]	; (80a50cc <srand+0x44>)
 80a50a6:	2201      	movs	r2, #1
 80a50a8:	6083      	str	r3, [r0, #8]
 80a50aa:	230b      	movs	r3, #11
 80a50ac:	8183      	strh	r3, [r0, #12]
 80a50ae:	2300      	movs	r3, #0
 80a50b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a50b4:	2200      	movs	r2, #0
 80a50b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a50b8:	611c      	str	r4, [r3, #16]
 80a50ba:	615a      	str	r2, [r3, #20]
 80a50bc:	bd38      	pop	{r3, r4, r5, pc}
 80a50be:	bf00      	nop
 80a50c0:	2000005c 	.word	0x2000005c
 80a50c4:	abcd330e 	.word	0xabcd330e
 80a50c8:	e66d1234 	.word	0xe66d1234
 80a50cc:	0005deec 	.word	0x0005deec

080a50d0 <strcmp>:
 80a50d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a50d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a50d8:	2a01      	cmp	r2, #1
 80a50da:	bf28      	it	cs
 80a50dc:	429a      	cmpcs	r2, r3
 80a50de:	d0f7      	beq.n	80a50d0 <strcmp>
 80a50e0:	1ad0      	subs	r0, r2, r3
 80a50e2:	4770      	bx	lr

080a50e4 <strcpy>:
 80a50e4:	4603      	mov	r3, r0
 80a50e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a50ea:	f803 2b01 	strb.w	r2, [r3], #1
 80a50ee:	2a00      	cmp	r2, #0
 80a50f0:	d1f9      	bne.n	80a50e6 <strcpy+0x2>
 80a50f2:	4770      	bx	lr

080a50f4 <strdup>:
 80a50f4:	4b02      	ldr	r3, [pc, #8]	; (80a5100 <strdup+0xc>)
 80a50f6:	4601      	mov	r1, r0
 80a50f8:	6818      	ldr	r0, [r3, #0]
 80a50fa:	f000 b803 	b.w	80a5104 <_strdup_r>
 80a50fe:	bf00      	nop
 80a5100:	2000005c 	.word	0x2000005c

080a5104 <_strdup_r>:
 80a5104:	b570      	push	{r4, r5, r6, lr}
 80a5106:	4604      	mov	r4, r0
 80a5108:	4608      	mov	r0, r1
 80a510a:	460d      	mov	r5, r1
 80a510c:	f000 f80d 	bl	80a512a <strlen>
 80a5110:	1c46      	adds	r6, r0, #1
 80a5112:	4631      	mov	r1, r6
 80a5114:	4620      	mov	r0, r4
 80a5116:	f7fd fb19 	bl	80a274c <_malloc_r>
 80a511a:	4604      	mov	r4, r0
 80a511c:	b118      	cbz	r0, 80a5126 <_strdup_r+0x22>
 80a511e:	4632      	mov	r2, r6
 80a5120:	4629      	mov	r1, r5
 80a5122:	f7ff ff9b 	bl	80a505c <memcpy>
 80a5126:	4620      	mov	r0, r4
 80a5128:	bd70      	pop	{r4, r5, r6, pc}

080a512a <strlen>:
 80a512a:	4603      	mov	r3, r0
 80a512c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5130:	2a00      	cmp	r2, #0
 80a5132:	d1fb      	bne.n	80a512c <strlen+0x2>
 80a5134:	1a18      	subs	r0, r3, r0
 80a5136:	3801      	subs	r0, #1
 80a5138:	4770      	bx	lr

080a513a <strncmp>:
 80a513a:	b510      	push	{r4, lr}
 80a513c:	b16a      	cbz	r2, 80a515a <strncmp+0x20>
 80a513e:	3901      	subs	r1, #1
 80a5140:	1884      	adds	r4, r0, r2
 80a5142:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a5146:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a514a:	4293      	cmp	r3, r2
 80a514c:	d103      	bne.n	80a5156 <strncmp+0x1c>
 80a514e:	42a0      	cmp	r0, r4
 80a5150:	d001      	beq.n	80a5156 <strncmp+0x1c>
 80a5152:	2b00      	cmp	r3, #0
 80a5154:	d1f5      	bne.n	80a5142 <strncmp+0x8>
 80a5156:	1a98      	subs	r0, r3, r2
 80a5158:	bd10      	pop	{r4, pc}
 80a515a:	4610      	mov	r0, r2
 80a515c:	e7fc      	b.n	80a5158 <strncmp+0x1e>
	...

080a5160 <_strtoul_l.isra.0>:
 80a5160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a5164:	468c      	mov	ip, r1
 80a5166:	4686      	mov	lr, r0
 80a5168:	4e3a      	ldr	r6, [pc, #232]	; (80a5254 <_strtoul_l.isra.0+0xf4>)
 80a516a:	4660      	mov	r0, ip
 80a516c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a5170:	5da5      	ldrb	r5, [r4, r6]
 80a5172:	f015 0508 	ands.w	r5, r5, #8
 80a5176:	d1f8      	bne.n	80a516a <_strtoul_l.isra.0+0xa>
 80a5178:	2c2d      	cmp	r4, #45	; 0x2d
 80a517a:	d134      	bne.n	80a51e6 <_strtoul_l.isra.0+0x86>
 80a517c:	f04f 0801 	mov.w	r8, #1
 80a5180:	f89c 4000 	ldrb.w	r4, [ip]
 80a5184:	f100 0c02 	add.w	ip, r0, #2
 80a5188:	2b00      	cmp	r3, #0
 80a518a:	d05e      	beq.n	80a524a <_strtoul_l.isra.0+0xea>
 80a518c:	2b10      	cmp	r3, #16
 80a518e:	d10c      	bne.n	80a51aa <_strtoul_l.isra.0+0x4a>
 80a5190:	2c30      	cmp	r4, #48	; 0x30
 80a5192:	d10a      	bne.n	80a51aa <_strtoul_l.isra.0+0x4a>
 80a5194:	f89c 0000 	ldrb.w	r0, [ip]
 80a5198:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a519c:	2858      	cmp	r0, #88	; 0x58
 80a519e:	d14f      	bne.n	80a5240 <_strtoul_l.isra.0+0xe0>
 80a51a0:	2310      	movs	r3, #16
 80a51a2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a51a6:	f10c 0c02 	add.w	ip, ip, #2
 80a51aa:	f04f 37ff 	mov.w	r7, #4294967295
 80a51ae:	fbb7 f7f3 	udiv	r7, r7, r3
 80a51b2:	2500      	movs	r5, #0
 80a51b4:	fb03 f907 	mul.w	r9, r3, r7
 80a51b8:	4628      	mov	r0, r5
 80a51ba:	ea6f 0909 	mvn.w	r9, r9
 80a51be:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a51c2:	2e09      	cmp	r6, #9
 80a51c4:	d818      	bhi.n	80a51f8 <_strtoul_l.isra.0+0x98>
 80a51c6:	4634      	mov	r4, r6
 80a51c8:	42a3      	cmp	r3, r4
 80a51ca:	dd24      	ble.n	80a5216 <_strtoul_l.isra.0+0xb6>
 80a51cc:	2d00      	cmp	r5, #0
 80a51ce:	db1f      	blt.n	80a5210 <_strtoul_l.isra.0+0xb0>
 80a51d0:	4287      	cmp	r7, r0
 80a51d2:	d31d      	bcc.n	80a5210 <_strtoul_l.isra.0+0xb0>
 80a51d4:	d101      	bne.n	80a51da <_strtoul_l.isra.0+0x7a>
 80a51d6:	45a1      	cmp	r9, r4
 80a51d8:	db1a      	blt.n	80a5210 <_strtoul_l.isra.0+0xb0>
 80a51da:	2501      	movs	r5, #1
 80a51dc:	fb00 4003 	mla	r0, r0, r3, r4
 80a51e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a51e4:	e7eb      	b.n	80a51be <_strtoul_l.isra.0+0x5e>
 80a51e6:	2c2b      	cmp	r4, #43	; 0x2b
 80a51e8:	bf08      	it	eq
 80a51ea:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a51ee:	46a8      	mov	r8, r5
 80a51f0:	bf08      	it	eq
 80a51f2:	f100 0c02 	addeq.w	ip, r0, #2
 80a51f6:	e7c7      	b.n	80a5188 <_strtoul_l.isra.0+0x28>
 80a51f8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a51fc:	2e19      	cmp	r6, #25
 80a51fe:	d801      	bhi.n	80a5204 <_strtoul_l.isra.0+0xa4>
 80a5200:	3c37      	subs	r4, #55	; 0x37
 80a5202:	e7e1      	b.n	80a51c8 <_strtoul_l.isra.0+0x68>
 80a5204:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a5208:	2e19      	cmp	r6, #25
 80a520a:	d804      	bhi.n	80a5216 <_strtoul_l.isra.0+0xb6>
 80a520c:	3c57      	subs	r4, #87	; 0x57
 80a520e:	e7db      	b.n	80a51c8 <_strtoul_l.isra.0+0x68>
 80a5210:	f04f 35ff 	mov.w	r5, #4294967295
 80a5214:	e7e4      	b.n	80a51e0 <_strtoul_l.isra.0+0x80>
 80a5216:	2d00      	cmp	r5, #0
 80a5218:	da07      	bge.n	80a522a <_strtoul_l.isra.0+0xca>
 80a521a:	2322      	movs	r3, #34	; 0x22
 80a521c:	f04f 30ff 	mov.w	r0, #4294967295
 80a5220:	f8ce 3000 	str.w	r3, [lr]
 80a5224:	b942      	cbnz	r2, 80a5238 <_strtoul_l.isra.0+0xd8>
 80a5226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a522a:	f1b8 0f00 	cmp.w	r8, #0
 80a522e:	d000      	beq.n	80a5232 <_strtoul_l.isra.0+0xd2>
 80a5230:	4240      	negs	r0, r0
 80a5232:	2a00      	cmp	r2, #0
 80a5234:	d0f7      	beq.n	80a5226 <_strtoul_l.isra.0+0xc6>
 80a5236:	b10d      	cbz	r5, 80a523c <_strtoul_l.isra.0+0xdc>
 80a5238:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a523c:	6011      	str	r1, [r2, #0]
 80a523e:	e7f2      	b.n	80a5226 <_strtoul_l.isra.0+0xc6>
 80a5240:	2430      	movs	r4, #48	; 0x30
 80a5242:	2b00      	cmp	r3, #0
 80a5244:	d1b1      	bne.n	80a51aa <_strtoul_l.isra.0+0x4a>
 80a5246:	2308      	movs	r3, #8
 80a5248:	e7af      	b.n	80a51aa <_strtoul_l.isra.0+0x4a>
 80a524a:	2c30      	cmp	r4, #48	; 0x30
 80a524c:	d0a2      	beq.n	80a5194 <_strtoul_l.isra.0+0x34>
 80a524e:	230a      	movs	r3, #10
 80a5250:	e7ab      	b.n	80a51aa <_strtoul_l.isra.0+0x4a>
 80a5252:	bf00      	nop
 80a5254:	080a694d 	.word	0x080a694d

080a5258 <strtoul>:
 80a5258:	4613      	mov	r3, r2
 80a525a:	460a      	mov	r2, r1
 80a525c:	4601      	mov	r1, r0
 80a525e:	4802      	ldr	r0, [pc, #8]	; (80a5268 <strtoul+0x10>)
 80a5260:	6800      	ldr	r0, [r0, #0]
 80a5262:	f7ff bf7d 	b.w	80a5160 <_strtoul_l.isra.0>
 80a5266:	bf00      	nop
 80a5268:	2000005c 	.word	0x2000005c

080a526c <__tzcalc_limits>:
 80a526c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5270:	4680      	mov	r8, r0
 80a5272:	f000 fa77 	bl	80a5764 <__gettzinfo>
 80a5276:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a527a:	4598      	cmp	r8, r3
 80a527c:	f340 8097 	ble.w	80a53ae <__tzcalc_limits+0x142>
 80a5280:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a5284:	f240 126d 	movw	r2, #365	; 0x16d
 80a5288:	4443      	add	r3, r8
 80a528a:	109b      	asrs	r3, r3, #2
 80a528c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a5290:	fb02 3505 	mla	r5, r2, r5, r3
 80a5294:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a5298:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a529c:	fb93 f3f2 	sdiv	r3, r3, r2
 80a52a0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a52a4:	441d      	add	r5, r3
 80a52a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a52aa:	4442      	add	r2, r8
 80a52ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80a52b0:	fb98 f7f3 	sdiv	r7, r8, r3
 80a52b4:	4415      	add	r5, r2
 80a52b6:	2264      	movs	r2, #100	; 0x64
 80a52b8:	fb03 8717 	mls	r7, r3, r7, r8
 80a52bc:	fb98 f6f2 	sdiv	r6, r8, r2
 80a52c0:	fab7 fc87 	clz	ip, r7
 80a52c4:	4604      	mov	r4, r0
 80a52c6:	f04f 0e07 	mov.w	lr, #7
 80a52ca:	fb02 8616 	mls	r6, r2, r6, r8
 80a52ce:	f008 0303 	and.w	r3, r8, #3
 80a52d2:	f8c0 8004 	str.w	r8, [r0, #4]
 80a52d6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a52da:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a52de:	9300      	str	r3, [sp, #0]
 80a52e0:	7a22      	ldrb	r2, [r4, #8]
 80a52e2:	6963      	ldr	r3, [r4, #20]
 80a52e4:	2a4a      	cmp	r2, #74	; 0x4a
 80a52e6:	d128      	bne.n	80a533a <__tzcalc_limits+0xce>
 80a52e8:	9900      	ldr	r1, [sp, #0]
 80a52ea:	18ea      	adds	r2, r5, r3
 80a52ec:	b901      	cbnz	r1, 80a52f0 <__tzcalc_limits+0x84>
 80a52ee:	b906      	cbnz	r6, 80a52f2 <__tzcalc_limits+0x86>
 80a52f0:	bb0f      	cbnz	r7, 80a5336 <__tzcalc_limits+0xca>
 80a52f2:	2b3b      	cmp	r3, #59	; 0x3b
 80a52f4:	bfd4      	ite	le
 80a52f6:	2300      	movle	r3, #0
 80a52f8:	2301      	movgt	r3, #1
 80a52fa:	4413      	add	r3, r2
 80a52fc:	1e5a      	subs	r2, r3, #1
 80a52fe:	69a3      	ldr	r3, [r4, #24]
 80a5300:	492c      	ldr	r1, [pc, #176]	; (80a53b4 <__tzcalc_limits+0x148>)
 80a5302:	3428      	adds	r4, #40	; 0x28
 80a5304:	fb01 3202 	mla	r2, r1, r2, r3
 80a5308:	6823      	ldr	r3, [r4, #0]
 80a530a:	4413      	add	r3, r2
 80a530c:	461a      	mov	r2, r3
 80a530e:	17db      	asrs	r3, r3, #31
 80a5310:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a5314:	45a3      	cmp	fp, r4
 80a5316:	d1e3      	bne.n	80a52e0 <__tzcalc_limits+0x74>
 80a5318:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a531c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a5320:	4294      	cmp	r4, r2
 80a5322:	eb75 0303 	sbcs.w	r3, r5, r3
 80a5326:	bfb4      	ite	lt
 80a5328:	2301      	movlt	r3, #1
 80a532a:	2300      	movge	r3, #0
 80a532c:	6003      	str	r3, [r0, #0]
 80a532e:	2001      	movs	r0, #1
 80a5330:	b003      	add	sp, #12
 80a5332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5336:	2300      	movs	r3, #0
 80a5338:	e7df      	b.n	80a52fa <__tzcalc_limits+0x8e>
 80a533a:	2a44      	cmp	r2, #68	; 0x44
 80a533c:	d101      	bne.n	80a5342 <__tzcalc_limits+0xd6>
 80a533e:	18ea      	adds	r2, r5, r3
 80a5340:	e7dd      	b.n	80a52fe <__tzcalc_limits+0x92>
 80a5342:	9a00      	ldr	r2, [sp, #0]
 80a5344:	bb6a      	cbnz	r2, 80a53a2 <__tzcalc_limits+0x136>
 80a5346:	2e00      	cmp	r6, #0
 80a5348:	bf0c      	ite	eq
 80a534a:	46e0      	moveq	r8, ip
 80a534c:	f04f 0801 	movne.w	r8, #1
 80a5350:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a5354:	68e2      	ldr	r2, [r4, #12]
 80a5356:	f04f 0900 	mov.w	r9, #0
 80a535a:	9201      	str	r2, [sp, #4]
 80a535c:	462a      	mov	r2, r5
 80a535e:	4916      	ldr	r1, [pc, #88]	; (80a53b8 <__tzcalc_limits+0x14c>)
 80a5360:	fb0a 1808 	mla	r8, sl, r8, r1
 80a5364:	f1a8 0804 	sub.w	r8, r8, #4
 80a5368:	9901      	ldr	r1, [sp, #4]
 80a536a:	f109 0901 	add.w	r9, r9, #1
 80a536e:	4549      	cmp	r1, r9
 80a5370:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a5374:	dc17      	bgt.n	80a53a6 <__tzcalc_limits+0x13a>
 80a5376:	f102 0804 	add.w	r8, r2, #4
 80a537a:	fb98 f9fe 	sdiv	r9, r8, lr
 80a537e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a5382:	eba8 0909 	sub.w	r9, r8, r9
 80a5386:	ebb3 0909 	subs.w	r9, r3, r9
 80a538a:	6923      	ldr	r3, [r4, #16]
 80a538c:	bf48      	it	mi
 80a538e:	f109 0907 	addmi.w	r9, r9, #7
 80a5392:	3b01      	subs	r3, #1
 80a5394:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5398:	444b      	add	r3, r9
 80a539a:	4553      	cmp	r3, sl
 80a539c:	da05      	bge.n	80a53aa <__tzcalc_limits+0x13e>
 80a539e:	441a      	add	r2, r3
 80a53a0:	e7ad      	b.n	80a52fe <__tzcalc_limits+0x92>
 80a53a2:	46e0      	mov	r8, ip
 80a53a4:	e7d4      	b.n	80a5350 <__tzcalc_limits+0xe4>
 80a53a6:	4452      	add	r2, sl
 80a53a8:	e7de      	b.n	80a5368 <__tzcalc_limits+0xfc>
 80a53aa:	3b07      	subs	r3, #7
 80a53ac:	e7f5      	b.n	80a539a <__tzcalc_limits+0x12e>
 80a53ae:	2000      	movs	r0, #0
 80a53b0:	e7be      	b.n	80a5330 <__tzcalc_limits+0xc4>
 80a53b2:	bf00      	nop
 80a53b4:	00015180 	.word	0x00015180
 80a53b8:	080a68b0 	.word	0x080a68b0

080a53bc <__tz_lock>:
 80a53bc:	4801      	ldr	r0, [pc, #4]	; (80a53c4 <__tz_lock+0x8>)
 80a53be:	f000 ba85 	b.w	80a58cc <__retarget_lock_acquire>
 80a53c2:	bf00      	nop
 80a53c4:	2000048b 	.word	0x2000048b

080a53c8 <__tz_unlock>:
 80a53c8:	4801      	ldr	r0, [pc, #4]	; (80a53d0 <__tz_unlock+0x8>)
 80a53ca:	f000 ba81 	b.w	80a58d0 <__retarget_lock_release>
 80a53ce:	bf00      	nop
 80a53d0:	2000048b 	.word	0x2000048b

080a53d4 <_tzset_unlocked>:
 80a53d4:	4b01      	ldr	r3, [pc, #4]	; (80a53dc <_tzset_unlocked+0x8>)
 80a53d6:	6818      	ldr	r0, [r3, #0]
 80a53d8:	f000 b802 	b.w	80a53e0 <_tzset_unlocked_r>
 80a53dc:	2000005c 	.word	0x2000005c

080a53e0 <_tzset_unlocked_r>:
 80a53e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a53e4:	b08d      	sub	sp, #52	; 0x34
 80a53e6:	4607      	mov	r7, r0
 80a53e8:	f000 f9bc 	bl	80a5764 <__gettzinfo>
 80a53ec:	49b0      	ldr	r1, [pc, #704]	; (80a56b0 <_tzset_unlocked_r+0x2d0>)
 80a53ee:	4605      	mov	r5, r0
 80a53f0:	4638      	mov	r0, r7
 80a53f2:	f000 f9af 	bl	80a5754 <_getenv_r>
 80a53f6:	4eaf      	ldr	r6, [pc, #700]	; (80a56b4 <_tzset_unlocked_r+0x2d4>)
 80a53f8:	4604      	mov	r4, r0
 80a53fa:	b970      	cbnz	r0, 80a541a <_tzset_unlocked_r+0x3a>
 80a53fc:	4bae      	ldr	r3, [pc, #696]	; (80a56b8 <_tzset_unlocked_r+0x2d8>)
 80a53fe:	4aaf      	ldr	r2, [pc, #700]	; (80a56bc <_tzset_unlocked_r+0x2dc>)
 80a5400:	6018      	str	r0, [r3, #0]
 80a5402:	4baf      	ldr	r3, [pc, #700]	; (80a56c0 <_tzset_unlocked_r+0x2e0>)
 80a5404:	6018      	str	r0, [r3, #0]
 80a5406:	4baf      	ldr	r3, [pc, #700]	; (80a56c4 <_tzset_unlocked_r+0x2e4>)
 80a5408:	6830      	ldr	r0, [r6, #0]
 80a540a:	e9c3 2200 	strd	r2, r2, [r3]
 80a540e:	f7fd f96d 	bl	80a26ec <free>
 80a5412:	6034      	str	r4, [r6, #0]
 80a5414:	b00d      	add	sp, #52	; 0x34
 80a5416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a541a:	6831      	ldr	r1, [r6, #0]
 80a541c:	2900      	cmp	r1, #0
 80a541e:	d15f      	bne.n	80a54e0 <_tzset_unlocked_r+0x100>
 80a5420:	6830      	ldr	r0, [r6, #0]
 80a5422:	f7fd f963 	bl	80a26ec <free>
 80a5426:	4620      	mov	r0, r4
 80a5428:	f7ff fe7f 	bl	80a512a <strlen>
 80a542c:	1c41      	adds	r1, r0, #1
 80a542e:	4638      	mov	r0, r7
 80a5430:	f7fd f98c 	bl	80a274c <_malloc_r>
 80a5434:	6030      	str	r0, [r6, #0]
 80a5436:	2800      	cmp	r0, #0
 80a5438:	d157      	bne.n	80a54ea <_tzset_unlocked_r+0x10a>
 80a543a:	7823      	ldrb	r3, [r4, #0]
 80a543c:	ae0a      	add	r6, sp, #40	; 0x28
 80a543e:	2b3a      	cmp	r3, #58	; 0x3a
 80a5440:	bf08      	it	eq
 80a5442:	3401      	addeq	r4, #1
 80a5444:	4633      	mov	r3, r6
 80a5446:	4620      	mov	r0, r4
 80a5448:	4a9f      	ldr	r2, [pc, #636]	; (80a56c8 <_tzset_unlocked_r+0x2e8>)
 80a544a:	49a0      	ldr	r1, [pc, #640]	; (80a56cc <_tzset_unlocked_r+0x2ec>)
 80a544c:	f7fd f966 	bl	80a271c <siscanf>
 80a5450:	2800      	cmp	r0, #0
 80a5452:	dddf      	ble.n	80a5414 <_tzset_unlocked_r+0x34>
 80a5454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5456:	18e7      	adds	r7, r4, r3
 80a5458:	5ce3      	ldrb	r3, [r4, r3]
 80a545a:	2b2d      	cmp	r3, #45	; 0x2d
 80a545c:	d149      	bne.n	80a54f2 <_tzset_unlocked_r+0x112>
 80a545e:	f04f 34ff 	mov.w	r4, #4294967295
 80a5462:	3701      	adds	r7, #1
 80a5464:	f04f 0800 	mov.w	r8, #0
 80a5468:	f10d 0a20 	add.w	sl, sp, #32
 80a546c:	f10d 0b1e 	add.w	fp, sp, #30
 80a5470:	4633      	mov	r3, r6
 80a5472:	4638      	mov	r0, r7
 80a5474:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a5478:	4995      	ldr	r1, [pc, #596]	; (80a56d0 <_tzset_unlocked_r+0x2f0>)
 80a547a:	9603      	str	r6, [sp, #12]
 80a547c:	f8cd b000 	str.w	fp, [sp]
 80a5480:	aa07      	add	r2, sp, #28
 80a5482:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a5486:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a548a:	f7fd f947 	bl	80a271c <siscanf>
 80a548e:	4540      	cmp	r0, r8
 80a5490:	ddc0      	ble.n	80a5414 <_tzset_unlocked_r+0x34>
 80a5492:	213c      	movs	r1, #60	; 0x3c
 80a5494:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a5498:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a549c:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a56dc <_tzset_unlocked_r+0x2fc>
 80a54a0:	fb01 2203 	mla	r2, r1, r3, r2
 80a54a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a54a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a54ac:	fb01 2303 	mla	r3, r1, r3, r2
 80a54b0:	435c      	muls	r4, r3
 80a54b2:	4b85      	ldr	r3, [pc, #532]	; (80a56c8 <_tzset_unlocked_r+0x2e8>)
 80a54b4:	62ac      	str	r4, [r5, #40]	; 0x28
 80a54b6:	4c83      	ldr	r4, [pc, #524]	; (80a56c4 <_tzset_unlocked_r+0x2e4>)
 80a54b8:	464a      	mov	r2, r9
 80a54ba:	6023      	str	r3, [r4, #0]
 80a54bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a54be:	4983      	ldr	r1, [pc, #524]	; (80a56cc <_tzset_unlocked_r+0x2ec>)
 80a54c0:	441f      	add	r7, r3
 80a54c2:	4638      	mov	r0, r7
 80a54c4:	4633      	mov	r3, r6
 80a54c6:	f7fd f929 	bl	80a271c <siscanf>
 80a54ca:	4540      	cmp	r0, r8
 80a54cc:	dc17      	bgt.n	80a54fe <_tzset_unlocked_r+0x11e>
 80a54ce:	6823      	ldr	r3, [r4, #0]
 80a54d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a54d2:	6063      	str	r3, [r4, #4]
 80a54d4:	4b78      	ldr	r3, [pc, #480]	; (80a56b8 <_tzset_unlocked_r+0x2d8>)
 80a54d6:	601a      	str	r2, [r3, #0]
 80a54d8:	4b79      	ldr	r3, [pc, #484]	; (80a56c0 <_tzset_unlocked_r+0x2e0>)
 80a54da:	f8c3 8000 	str.w	r8, [r3]
 80a54de:	e799      	b.n	80a5414 <_tzset_unlocked_r+0x34>
 80a54e0:	f7ff fdf6 	bl	80a50d0 <strcmp>
 80a54e4:	2800      	cmp	r0, #0
 80a54e6:	d19b      	bne.n	80a5420 <_tzset_unlocked_r+0x40>
 80a54e8:	e794      	b.n	80a5414 <_tzset_unlocked_r+0x34>
 80a54ea:	4621      	mov	r1, r4
 80a54ec:	f7ff fdfa 	bl	80a50e4 <strcpy>
 80a54f0:	e7a3      	b.n	80a543a <_tzset_unlocked_r+0x5a>
 80a54f2:	2b2b      	cmp	r3, #43	; 0x2b
 80a54f4:	f04f 0401 	mov.w	r4, #1
 80a54f8:	bf08      	it	eq
 80a54fa:	3701      	addeq	r7, #1
 80a54fc:	e7b2      	b.n	80a5464 <_tzset_unlocked_r+0x84>
 80a54fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5500:	f8c4 9004 	str.w	r9, [r4, #4]
 80a5504:	18fc      	adds	r4, r7, r3
 80a5506:	5cfb      	ldrb	r3, [r7, r3]
 80a5508:	2b2d      	cmp	r3, #45	; 0x2d
 80a550a:	f040 808c 	bne.w	80a5626 <_tzset_unlocked_r+0x246>
 80a550e:	f04f 37ff 	mov.w	r7, #4294967295
 80a5512:	3401      	adds	r4, #1
 80a5514:	2300      	movs	r3, #0
 80a5516:	4620      	mov	r0, r4
 80a5518:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a551c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5520:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5524:	930a      	str	r3, [sp, #40]	; 0x28
 80a5526:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a552a:	4633      	mov	r3, r6
 80a552c:	e9cd b600 	strd	fp, r6, [sp]
 80a5530:	4967      	ldr	r1, [pc, #412]	; (80a56d0 <_tzset_unlocked_r+0x2f0>)
 80a5532:	aa07      	add	r2, sp, #28
 80a5534:	f7fd f8f2 	bl	80a271c <siscanf>
 80a5538:	2800      	cmp	r0, #0
 80a553a:	dc7a      	bgt.n	80a5632 <_tzset_unlocked_r+0x252>
 80a553c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a553e:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a5542:	652f      	str	r7, [r5, #80]	; 0x50
 80a5544:	f04f 0900 	mov.w	r9, #0
 80a5548:	462f      	mov	r7, r5
 80a554a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a554c:	441c      	add	r4, r3
 80a554e:	7823      	ldrb	r3, [r4, #0]
 80a5550:	2b2c      	cmp	r3, #44	; 0x2c
 80a5552:	bf08      	it	eq
 80a5554:	3401      	addeq	r4, #1
 80a5556:	f894 8000 	ldrb.w	r8, [r4]
 80a555a:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a555e:	d17a      	bne.n	80a5656 <_tzset_unlocked_r+0x276>
 80a5560:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a5564:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a5568:	ab09      	add	r3, sp, #36	; 0x24
 80a556a:	9300      	str	r3, [sp, #0]
 80a556c:	4620      	mov	r0, r4
 80a556e:	4633      	mov	r3, r6
 80a5570:	4958      	ldr	r1, [pc, #352]	; (80a56d4 <_tzset_unlocked_r+0x2f4>)
 80a5572:	9603      	str	r6, [sp, #12]
 80a5574:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a5578:	f7fd f8d0 	bl	80a271c <siscanf>
 80a557c:	2803      	cmp	r0, #3
 80a557e:	f47f af49 	bne.w	80a5414 <_tzset_unlocked_r+0x34>
 80a5582:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a5586:	1e4b      	subs	r3, r1, #1
 80a5588:	2b0b      	cmp	r3, #11
 80a558a:	f63f af43 	bhi.w	80a5414 <_tzset_unlocked_r+0x34>
 80a558e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a5592:	1e53      	subs	r3, r2, #1
 80a5594:	2b04      	cmp	r3, #4
 80a5596:	f63f af3d 	bhi.w	80a5414 <_tzset_unlocked_r+0x34>
 80a559a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a559e:	2b06      	cmp	r3, #6
 80a55a0:	f63f af38 	bhi.w	80a5414 <_tzset_unlocked_r+0x34>
 80a55a4:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a55a8:	f887 8008 	strb.w	r8, [r7, #8]
 80a55ac:	617b      	str	r3, [r7, #20]
 80a55ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a55b0:	eb04 0803 	add.w	r8, r4, r3
 80a55b4:	2302      	movs	r3, #2
 80a55b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a55ba:	2300      	movs	r3, #0
 80a55bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a55c0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a55c4:	930a      	str	r3, [sp, #40]	; 0x28
 80a55c6:	f898 3000 	ldrb.w	r3, [r8]
 80a55ca:	2b2f      	cmp	r3, #47	; 0x2f
 80a55cc:	d109      	bne.n	80a55e2 <_tzset_unlocked_r+0x202>
 80a55ce:	4633      	mov	r3, r6
 80a55d0:	4640      	mov	r0, r8
 80a55d2:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a55d6:	e9cd b600 	strd	fp, r6, [sp]
 80a55da:	493f      	ldr	r1, [pc, #252]	; (80a56d8 <_tzset_unlocked_r+0x2f8>)
 80a55dc:	aa07      	add	r2, sp, #28
 80a55de:	f7fd f89d 	bl	80a271c <siscanf>
 80a55e2:	213c      	movs	r1, #60	; 0x3c
 80a55e4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a55e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a55ec:	3728      	adds	r7, #40	; 0x28
 80a55ee:	fb01 2203 	mla	r2, r1, r3, r2
 80a55f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a55f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a55fa:	fb01 2303 	mla	r3, r1, r3, r2
 80a55fe:	f847 3c10 	str.w	r3, [r7, #-16]
 80a5602:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a5604:	4444      	add	r4, r8
 80a5606:	f1b9 0f00 	cmp.w	r9, #0
 80a560a:	d021      	beq.n	80a5650 <_tzset_unlocked_r+0x270>
 80a560c:	6868      	ldr	r0, [r5, #4]
 80a560e:	f7ff fe2d 	bl	80a526c <__tzcalc_limits>
 80a5612:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a5614:	4b28      	ldr	r3, [pc, #160]	; (80a56b8 <_tzset_unlocked_r+0x2d8>)
 80a5616:	601a      	str	r2, [r3, #0]
 80a5618:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a561a:	1a9b      	subs	r3, r3, r2
 80a561c:	bf18      	it	ne
 80a561e:	2301      	movne	r3, #1
 80a5620:	4a27      	ldr	r2, [pc, #156]	; (80a56c0 <_tzset_unlocked_r+0x2e0>)
 80a5622:	6013      	str	r3, [r2, #0]
 80a5624:	e6f6      	b.n	80a5414 <_tzset_unlocked_r+0x34>
 80a5626:	2b2b      	cmp	r3, #43	; 0x2b
 80a5628:	f04f 0701 	mov.w	r7, #1
 80a562c:	bf08      	it	eq
 80a562e:	3401      	addeq	r4, #1
 80a5630:	e770      	b.n	80a5514 <_tzset_unlocked_r+0x134>
 80a5632:	213c      	movs	r1, #60	; 0x3c
 80a5634:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a5638:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a563c:	fb01 2203 	mla	r2, r1, r3, r2
 80a5640:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5644:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a5648:	fb01 2303 	mla	r3, r1, r3, r2
 80a564c:	435f      	muls	r7, r3
 80a564e:	e778      	b.n	80a5542 <_tzset_unlocked_r+0x162>
 80a5650:	f04f 0901 	mov.w	r9, #1
 80a5654:	e77b      	b.n	80a554e <_tzset_unlocked_r+0x16e>
 80a5656:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a565a:	bf0a      	itet	eq
 80a565c:	4643      	moveq	r3, r8
 80a565e:	2344      	movne	r3, #68	; 0x44
 80a5660:	3401      	addeq	r4, #1
 80a5662:	220a      	movs	r2, #10
 80a5664:	4620      	mov	r0, r4
 80a5666:	a90b      	add	r1, sp, #44	; 0x2c
 80a5668:	9305      	str	r3, [sp, #20]
 80a566a:	f7ff fdf5 	bl	80a5258 <strtoul>
 80a566e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a5672:	9b05      	ldr	r3, [sp, #20]
 80a5674:	45a0      	cmp	r8, r4
 80a5676:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a567a:	d114      	bne.n	80a56a6 <_tzset_unlocked_r+0x2c6>
 80a567c:	234d      	movs	r3, #77	; 0x4d
 80a567e:	f1b9 0f00 	cmp.w	r9, #0
 80a5682:	d107      	bne.n	80a5694 <_tzset_unlocked_r+0x2b4>
 80a5684:	2103      	movs	r1, #3
 80a5686:	722b      	strb	r3, [r5, #8]
 80a5688:	2302      	movs	r3, #2
 80a568a:	f8c5 9014 	str.w	r9, [r5, #20]
 80a568e:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a5692:	e78f      	b.n	80a55b4 <_tzset_unlocked_r+0x1d4>
 80a5694:	220b      	movs	r2, #11
 80a5696:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a569a:	2301      	movs	r3, #1
 80a569c:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a56a0:	2300      	movs	r3, #0
 80a56a2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a56a4:	e786      	b.n	80a55b4 <_tzset_unlocked_r+0x1d4>
 80a56a6:	b280      	uxth	r0, r0
 80a56a8:	723b      	strb	r3, [r7, #8]
 80a56aa:	6178      	str	r0, [r7, #20]
 80a56ac:	e782      	b.n	80a55b4 <_tzset_unlocked_r+0x1d4>
 80a56ae:	bf00      	nop
 80a56b0:	080a6910 	.word	0x080a6910
 80a56b4:	20000474 	.word	0x20000474
 80a56b8:	2000047c 	.word	0x2000047c
 80a56bc:	080a6913 	.word	0x080a6913
 80a56c0:	20000478 	.word	0x20000478
 80a56c4:	200000c0 	.word	0x200000c0
 80a56c8:	20000467 	.word	0x20000467
 80a56cc:	080a6917 	.word	0x080a6917
 80a56d0:	080a693a 	.word	0x080a693a
 80a56d4:	080a6926 	.word	0x080a6926
 80a56d8:	080a6939 	.word	0x080a6939
 80a56dc:	2000045c 	.word	0x2000045c

080a56e0 <_findenv_r>:
 80a56e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a56e4:	4607      	mov	r7, r0
 80a56e6:	4689      	mov	r9, r1
 80a56e8:	4616      	mov	r6, r2
 80a56ea:	f000 f8f3 	bl	80a58d4 <__env_lock>
 80a56ee:	4b18      	ldr	r3, [pc, #96]	; (80a5750 <_findenv_r+0x70>)
 80a56f0:	681c      	ldr	r4, [r3, #0]
 80a56f2:	469a      	mov	sl, r3
 80a56f4:	b134      	cbz	r4, 80a5704 <_findenv_r+0x24>
 80a56f6:	464b      	mov	r3, r9
 80a56f8:	4698      	mov	r8, r3
 80a56fa:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a56fe:	b139      	cbz	r1, 80a5710 <_findenv_r+0x30>
 80a5700:	293d      	cmp	r1, #61	; 0x3d
 80a5702:	d1f9      	bne.n	80a56f8 <_findenv_r+0x18>
 80a5704:	4638      	mov	r0, r7
 80a5706:	f000 f8eb 	bl	80a58e0 <__env_unlock>
 80a570a:	2000      	movs	r0, #0
 80a570c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5710:	eba8 0809 	sub.w	r8, r8, r9
 80a5714:	46a3      	mov	fp, r4
 80a5716:	f854 0b04 	ldr.w	r0, [r4], #4
 80a571a:	2800      	cmp	r0, #0
 80a571c:	d0f2      	beq.n	80a5704 <_findenv_r+0x24>
 80a571e:	4642      	mov	r2, r8
 80a5720:	4649      	mov	r1, r9
 80a5722:	f7ff fd0a 	bl	80a513a <strncmp>
 80a5726:	2800      	cmp	r0, #0
 80a5728:	d1f4      	bne.n	80a5714 <_findenv_r+0x34>
 80a572a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a572e:	eb03 0508 	add.w	r5, r3, r8
 80a5732:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a5736:	2b3d      	cmp	r3, #61	; 0x3d
 80a5738:	d1ec      	bne.n	80a5714 <_findenv_r+0x34>
 80a573a:	f8da 3000 	ldr.w	r3, [sl]
 80a573e:	4638      	mov	r0, r7
 80a5740:	ebab 0303 	sub.w	r3, fp, r3
 80a5744:	109b      	asrs	r3, r3, #2
 80a5746:	6033      	str	r3, [r6, #0]
 80a5748:	f000 f8ca 	bl	80a58e0 <__env_unlock>
 80a574c:	1c68      	adds	r0, r5, #1
 80a574e:	e7dd      	b.n	80a570c <_findenv_r+0x2c>
 80a5750:	20000120 	.word	0x20000120

080a5754 <_getenv_r>:
 80a5754:	b507      	push	{r0, r1, r2, lr}
 80a5756:	aa01      	add	r2, sp, #4
 80a5758:	f7ff ffc2 	bl	80a56e0 <_findenv_r>
 80a575c:	b003      	add	sp, #12
 80a575e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a5764 <__gettzinfo>:
 80a5764:	4800      	ldr	r0, [pc, #0]	; (80a5768 <__gettzinfo+0x4>)
 80a5766:	4770      	bx	lr
 80a5768:	200000c8 	.word	0x200000c8

080a576c <gmtime_r>:
 80a576c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5770:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a5774:	460c      	mov	r4, r1
 80a5776:	2300      	movs	r3, #0
 80a5778:	4630      	mov	r0, r6
 80a577a:	4639      	mov	r1, r7
 80a577c:	4a4f      	ldr	r2, [pc, #316]	; (80a58bc <gmtime_r+0x150>)
 80a577e:	f000 f8b5 	bl	80a58ec <__aeabi_ldivmod>
 80a5782:	4639      	mov	r1, r7
 80a5784:	4605      	mov	r5, r0
 80a5786:	2300      	movs	r3, #0
 80a5788:	4630      	mov	r0, r6
 80a578a:	4a4c      	ldr	r2, [pc, #304]	; (80a58bc <gmtime_r+0x150>)
 80a578c:	f000 f8ae 	bl	80a58ec <__aeabi_ldivmod>
 80a5790:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5794:	2a00      	cmp	r2, #0
 80a5796:	bfbc      	itt	lt
 80a5798:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a579c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a57a0:	fbb2 f3f1 	udiv	r3, r2, r1
 80a57a4:	fb01 2213 	mls	r2, r1, r3, r2
 80a57a8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a57ac:	60a3      	str	r3, [r4, #8]
 80a57ae:	fbb2 f3f1 	udiv	r3, r2, r1
 80a57b2:	fb01 2213 	mls	r2, r1, r3, r2
 80a57b6:	6022      	str	r2, [r4, #0]
 80a57b8:	f04f 0207 	mov.w	r2, #7
 80a57bc:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a57c0:	bfac      	ite	ge
 80a57c2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a57c6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a57ca:	6063      	str	r3, [r4, #4]
 80a57cc:	1cc3      	adds	r3, r0, #3
 80a57ce:	fb93 f2f2 	sdiv	r2, r3, r2
 80a57d2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a57d6:	1a9b      	subs	r3, r3, r2
 80a57d8:	bf48      	it	mi
 80a57da:	3307      	addmi	r3, #7
 80a57dc:	2800      	cmp	r0, #0
 80a57de:	4938      	ldr	r1, [pc, #224]	; (80a58c0 <gmtime_r+0x154>)
 80a57e0:	61a3      	str	r3, [r4, #24]
 80a57e2:	bfbd      	ittte	lt
 80a57e4:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a57e8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a57ec:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a57f0:	fb90 f1f1 	sdivge	r1, r0, r1
 80a57f4:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a57f8:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a57fc:	4b31      	ldr	r3, [pc, #196]	; (80a58c4 <gmtime_r+0x158>)
 80a57fe:	f240 176d 	movw	r7, #365	; 0x16d
 80a5802:	fb03 0001 	mla	r0, r3, r1, r0
 80a5806:	fbb0 f2f2 	udiv	r2, r0, r2
 80a580a:	fbb0 f3fc 	udiv	r3, r0, ip
 80a580e:	4402      	add	r2, r0
 80a5810:	1ad2      	subs	r2, r2, r3
 80a5812:	4b2d      	ldr	r3, [pc, #180]	; (80a58c8 <gmtime_r+0x15c>)
 80a5814:	2664      	movs	r6, #100	; 0x64
 80a5816:	fbb0 f3f3 	udiv	r3, r0, r3
 80a581a:	1ad3      	subs	r3, r2, r3
 80a581c:	fbb3 f5f7 	udiv	r5, r3, r7
 80a5820:	fbb3 f3fc 	udiv	r3, r3, ip
 80a5824:	fbb5 f2f6 	udiv	r2, r5, r6
 80a5828:	1ad3      	subs	r3, r2, r3
 80a582a:	4403      	add	r3, r0
 80a582c:	2099      	movs	r0, #153	; 0x99
 80a582e:	fb07 3315 	mls	r3, r7, r5, r3
 80a5832:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a5836:	f10c 0c02 	add.w	ip, ip, #2
 80a583a:	fbbc f7f0 	udiv	r7, ip, r0
 80a583e:	f04f 0805 	mov.w	r8, #5
 80a5842:	4378      	muls	r0, r7
 80a5844:	3002      	adds	r0, #2
 80a5846:	fbb0 f0f8 	udiv	r0, r0, r8
 80a584a:	f103 0e01 	add.w	lr, r3, #1
 80a584e:	ebae 0000 	sub.w	r0, lr, r0
 80a5852:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a5856:	45f4      	cmp	ip, lr
 80a5858:	bf94      	ite	ls
 80a585a:	f04f 0c02 	movls.w	ip, #2
 80a585e:	f06f 0c09 	mvnhi.w	ip, #9
 80a5862:	4467      	add	r7, ip
 80a5864:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a5868:	fb0c 5101 	mla	r1, ip, r1, r5
 80a586c:	2f01      	cmp	r7, #1
 80a586e:	bf98      	it	ls
 80a5870:	3101      	addls	r1, #1
 80a5872:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a5876:	d30c      	bcc.n	80a5892 <gmtime_r+0x126>
 80a5878:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a587c:	61e3      	str	r3, [r4, #28]
 80a587e:	2300      	movs	r3, #0
 80a5880:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a5884:	60e0      	str	r0, [r4, #12]
 80a5886:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a588a:	4620      	mov	r0, r4
 80a588c:	6223      	str	r3, [r4, #32]
 80a588e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5892:	f015 0f03 	tst.w	r5, #3
 80a5896:	d102      	bne.n	80a589e <gmtime_r+0x132>
 80a5898:	fb06 5212 	mls	r2, r6, r2, r5
 80a589c:	b95a      	cbnz	r2, 80a58b6 <gmtime_r+0x14a>
 80a589e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a58a2:	fbb5 f2f6 	udiv	r2, r5, r6
 80a58a6:	fb06 5212 	mls	r2, r6, r2, r5
 80a58aa:	fab2 f282 	clz	r2, r2
 80a58ae:	0952      	lsrs	r2, r2, #5
 80a58b0:	333b      	adds	r3, #59	; 0x3b
 80a58b2:	4413      	add	r3, r2
 80a58b4:	e7e2      	b.n	80a587c <gmtime_r+0x110>
 80a58b6:	2201      	movs	r2, #1
 80a58b8:	e7fa      	b.n	80a58b0 <gmtime_r+0x144>
 80a58ba:	bf00      	nop
 80a58bc:	00015180 	.word	0x00015180
 80a58c0:	00023ab1 	.word	0x00023ab1
 80a58c4:	fffdc54f 	.word	0xfffdc54f
 80a58c8:	00023ab0 	.word	0x00023ab0

080a58cc <__retarget_lock_acquire>:
 80a58cc:	4770      	bx	lr

080a58ce <__retarget_lock_acquire_recursive>:
 80a58ce:	4770      	bx	lr

080a58d0 <__retarget_lock_release>:
 80a58d0:	4770      	bx	lr

080a58d2 <__retarget_lock_release_recursive>:
 80a58d2:	4770      	bx	lr

080a58d4 <__env_lock>:
 80a58d4:	4801      	ldr	r0, [pc, #4]	; (80a58dc <__env_lock+0x8>)
 80a58d6:	f7ff bffa 	b.w	80a58ce <__retarget_lock_acquire_recursive>
 80a58da:	bf00      	nop
 80a58dc:	2000048a 	.word	0x2000048a

080a58e0 <__env_unlock>:
 80a58e0:	4801      	ldr	r0, [pc, #4]	; (80a58e8 <__env_unlock+0x8>)
 80a58e2:	f7ff bff6 	b.w	80a58d2 <__retarget_lock_release_recursive>
 80a58e6:	bf00      	nop
 80a58e8:	2000048a 	.word	0x2000048a

080a58ec <__aeabi_ldivmod>:
 80a58ec:	b97b      	cbnz	r3, 80a590e <__aeabi_ldivmod+0x22>
 80a58ee:	b972      	cbnz	r2, 80a590e <__aeabi_ldivmod+0x22>
 80a58f0:	2900      	cmp	r1, #0
 80a58f2:	bfbe      	ittt	lt
 80a58f4:	2000      	movlt	r0, #0
 80a58f6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a58fa:	e006      	blt.n	80a590a <__aeabi_ldivmod+0x1e>
 80a58fc:	bf08      	it	eq
 80a58fe:	2800      	cmpeq	r0, #0
 80a5900:	bf1c      	itt	ne
 80a5902:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a5906:	f04f 30ff 	movne.w	r0, #4294967295
 80a590a:	f7ff baa1 	b.w	80a4e50 <__aeabi_idiv0>
 80a590e:	f1ad 0c08 	sub.w	ip, sp, #8
 80a5912:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a5916:	2900      	cmp	r1, #0
 80a5918:	db09      	blt.n	80a592e <__aeabi_ldivmod+0x42>
 80a591a:	2b00      	cmp	r3, #0
 80a591c:	db1a      	blt.n	80a5954 <__aeabi_ldivmod+0x68>
 80a591e:	f7ff f935 	bl	80a4b8c <__udivmoddi4>
 80a5922:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a5926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a592a:	b004      	add	sp, #16
 80a592c:	4770      	bx	lr
 80a592e:	4240      	negs	r0, r0
 80a5930:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5934:	2b00      	cmp	r3, #0
 80a5936:	db1b      	blt.n	80a5970 <__aeabi_ldivmod+0x84>
 80a5938:	f7ff f928 	bl	80a4b8c <__udivmoddi4>
 80a593c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a5940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5944:	b004      	add	sp, #16
 80a5946:	4240      	negs	r0, r0
 80a5948:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a594c:	4252      	negs	r2, r2
 80a594e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5952:	4770      	bx	lr
 80a5954:	4252      	negs	r2, r2
 80a5956:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a595a:	f7ff f917 	bl	80a4b8c <__udivmoddi4>
 80a595e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a5962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5966:	b004      	add	sp, #16
 80a5968:	4240      	negs	r0, r0
 80a596a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a596e:	4770      	bx	lr
 80a5970:	4252      	negs	r2, r2
 80a5972:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5976:	f7ff f909 	bl	80a4b8c <__udivmoddi4>
 80a597a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a597e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5982:	b004      	add	sp, #16
 80a5984:	4252      	negs	r2, r2
 80a5986:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a598a:	4770      	bx	lr

080a598c <dynalib_user>:
 80a598c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a599c:	0000 0000 2323 2023 4157 4e52 4e49 2047     ....### WARNING 
 80a59ac:	203a 6f6e 2074 6f63 6e6e 6365 6574 2064     : not connected 
 80a59bc:	6f74 6320 6f6c 6475 202e 6163 6e6e 746f     to cloud. cannot
 80a59cc:	7720 6972 6574 7420 206f 6164 6174 6162      write to databa
 80a59dc:	6573 7b00 7322 6174 7574 2273 223a 7325     se.{"status":"%s
 80a59ec:	2c22 7422 6d69 2265 223a 2e25 6432 253a     ","time":"%.2d:%
 80a59fc:	322e 3a64 2e25 6432 2c22 6422 7461 2265     .2d:%.2d","date"
 80a5a0c:	223a 2e25 6432 252e 322e 2e64 2e25 6432     :"%.2d.%.2d.%.2d
 80a5a1c:	2c22 6c22 6575 7466 7265 3a22 5022 4f48     ","luefter":"PHO
 80a5a2c:	4f54 224e 222c 706f 6974 6e6f 3a22 2522     TON","option":"%
 80a5a3c:	2273 007d 6177 7373 7265 7473 6e61 0064     s"}.wasserstand.
 80a5a4c:	227b 7473 7461 7375 3a22 2522 2273 222c     {"status":"%s","
 80a5a5c:	6974 656d 3a22 2522 322e 3a64 2e25 6432     time":"%.2d:%.2d
 80a5a6c:	253a 322e 2264 222c 6164 6574 3a22 2522     :%.2d","date":"%
 80a5a7c:	322e 2e64 2e25 6432 252e 322e 2264 222c     .2d.%.2d.%.2d","
 80a5a8c:	756c 6665 6574 2272 223a 4850 544f 4e4f     luefter":"PHOTON
 80a5a9c:	2c22 6f22 7470 6f69 226e 223a 7325 2520     ","option":"%s %
 80a5aac:	6432 7d22 2000 7325 2520 2064 5000 4d55     2d"}. %s %d .PUM
 80a5abc:	4550 4d20 4941 204e 4f43 4e55 4454 574f     PE MAIN COUNTDOW
 80a5acc:	204e 4f4e 2057 6300 6e6f 7274 6c6f 2000     N NOW .control. 
 80a5adc:	6c53 6565 2070 6f4d 6564 6520 616e 6c62     Sleep Mode enabl
 80a5aec:	6465 0020 4320 656c 7261 7220 7365 7265     ed . Clear reser
 80a5afc:	6576 7220 7065 7465 7469 6f69 206e 6f63     ve repetition co
 80a5b0c:	6e75 6574 2072 2000 6c53 6565 2070 6f4d     unter . Sleep Mo
 80a5b1c:	6564 6420 7369 6261 656c 2064 5400 4d45     de disabled .TEM
 80a5b2c:	2050 4e49 253a 2064 554f 3a54 6425 2000     P IN:%d OUT:%d. 
 80a5b3c:	7453 726f 2065 4f43 544e 4f52 204c 6e69     Store CONTROL in
 80a5b4c:	4520 5045 4f52 204d 2000 6c55 7274 7361      EEPROM . Ultras
 80a5b5c:	6e6f 6369 0020 5020 6572 6170 6572 5320     onic . Prepare S
 80a5b6c:	656c 7065 0020 5020 6f68 6f74 206e 5748     leep . Photon HW
 80a5b7c:	4920 2044 7000 7261 6974 6c63 2f65 6564      ID .particle/de
 80a5b8c:	6976 6563 6e2f 6d61 0065 7520 746c 6172     vice/name. ultra
 80a5b9c:	7320 6e6f 6369 6420 7369 6174 636e 2065      sonic distance 
 80a5bac:	2000 6c75 7274 2061 6964 7473 6e61 6563     . ultra distance
 80a5bbc:	3a20 2520 2064 6d6d 5700 5241 494e 474e      : %d mm.WARNING
 80a5bcc:	203a 6146 6c69 6465 7420 206f 6572 6461     : Failed to read
 80a5bdc:	7520 746c 6172 6f73 696e 2063 6573 736e      ultrasonic sens
 80a5bec:	726f 5700 5341 4553 0052 7520 746c 6172     or.WASSER. ultra
 80a5bfc:	6520 7272 726f 3a20 2520 2064 2000 6c75      error : %d . ul
 80a5c0c:	7274 2061 6964 7473 6e61 6563 6120 6576     tra distance ave
 80a5c1c:	6172 6567 3a20 2520 2064 6d6d 6400 7369     rage : %d mm.dis
 80a5c2c:	6174 636e 2065 203a 2000 6c75 7274 2061     tance : . ultra 
 80a5c3c:	656c 6576 206c 7661 7265 6761 2065 203a     level average : 
 80a5c4c:	6425 6d20 006d 4320 4352 4520 7272 726f     %d mm. CRC Error
 80a5c5c:	0020 4720 7465 5420 6d65 6570 6172 7574      . Get Temperatu
 80a5c6c:	6572 0020 6553 736e 726f 4920 2044 6425     re .Sensor ID %d
 80a5c7c:	6e20 6d75 253d 2064 6554 706d 7265 7461      num=%d Temperat
 80a5c8c:	7275 2065 2e25 6632 4320 2020 0d0a 7300     ure %.2f C  ...s
 80a5c9c:	6e65 6f73 2072 6469 5300 6974 7a74 6e65     ensor id.Stitzen
 80a5cac:	7562 6772 4200 2443 635f 756c 5f24 3234     burg.BC$_clu$_42
 80a5cbc:	3737 5000 4d55 4550 4d20 4941 204e 4f43     77.PUMPE MAIN CO
 80a5ccc:	4e55 4454 574f 204e 5349 0020 4552 4553     UNTDOWN IS .RESE
 80a5cdc:	0054 7020 6f72 6f70 6573 2064 6c73 6565     T. proposed slee
 80a5cec:	2070 7564 6172 6974 6e6f 203a 6425 6d20     p duration: %d m
 80a5cfc:	6e69 7475 7365 5300 454c 5045 6420 7369     inutes.SLEEP dis
 80a5d0c:	6261 656c 2064 7962 4820 2057 6970 206e     abled by HW pin 
 80a5d1c:	4300 4e4f 5254 4c4f 5300 454c 5045 6420     .CONTROL.SLEEP d
 80a5d2c:	7369 6261 656c 2064 7962 5320 2057 2000     isabled by SW . 
 80a5d3c:	6f64 746e 6c53 6565 2070 6970 206e 203a     dontSleep pin : 
 80a5d4c:	6425 0020 2520 322e 2d64 2e25 6432 252d     %d . %.2d-%.2d-%
 80a5d5c:	2064 2e25 6432 253a 322e 3a64 2e25 6432     d %.2d:%.2d:%.2d
 80a5d6c:	0020 4820 6c65 6f6c 0020 6120 3a20 5320      . Hello . a : S
 80a5d7c:	6174 7574 0073 6220 3a20 4220 756c 656d     tatus. b : Blume
 80a5d8c:	206e 6967 7365 6573 006e 6420 3a20 5a20     n giessen. d : Z
 80a5d9c:	6965 6474 7561 7265 4720 6569 7373 6e65     eitdauer Giessen
 80a5dac:	7620 7265 6972 676e 7265 006e 6920 3a20      verringern. i :
 80a5dbc:	5a20 6965 6474 7561 7265 4720 6569 7373      Zeitdauer Giess
 80a5dcc:	6e65 6520 6872 656f 6568 006e 7320 3a20     en erhoehen. s :
 80a5ddc:	7320 656c 7065 6520 616e 6c62 6465 0020      sleep enabled .
 80a5dec:	7020 3a20 7320 656c 7065 6420 7369 6261      p : sleep disab
 80a5dfc:	656c 2064 2000 2075 203a 6c63 6165 2072     led . u : clear 
 80a5e0c:	6572 6573 7672 2065 6572 6570 6974 6974     reserve repetiti
 80a5e1c:	6e6f 6320 756f 746e 7265 0020 7720 3a20     on counter . w :
 80a5e2c:	7320 6f74 6572 6320 6e6f 6966 2067 6f74      store config to
 80a5e3c:	4520 5045 4f52 204d 2000 2079 203a 6f67      EEPROM . y : go
 80a5e4c:	6f74 7320 656c 7065 0020 7820 3a20 7520     to sleep . x : u
 80a5e5c:	746c 6172 7320 6e6f 6369 6d20 6165 7573     ltra sonic measu
 80a5e6c:	6572 656d 746e 0020 6572 6563 7669 6465     rement .received
 80a5e7c:	2020 203a 5700 6265 6f68 6b6f 7220 6365       : .Webhook rec
 80a5e8c:	6965 6576 2064 003c 003e 666f 0066 4157     eived <.>.off.WA
 80a5e9c:	5353 5245 5453 4e41 2044 203a 4947 5345     SSERSTAND : GIES
 80a5eac:	4553 204e 4544 4b41 4954 4956 5245 2054     SEN DEAKTIVIERT 
 80a5ebc:	7962 5720 6265 6f48 6b6f 6f00 006e 4157     by WebHook.on.WA
 80a5ecc:	5353 5245 5453 4e41 2044 203a 4947 5345     SSERSTAND : GIES
 80a5edc:	4553 204e 4b41 4954 4956 5245 2054 7962     SEN AKTIVIERT by
 80a5eec:	5720 6265 6f48 6b6f 2500 2073 6425 2000      WebHook.%s %d. 
 80a5efc:	6e74 776f 203a 3100 5632 2020 2020 5b20     tnow: .12V     [
 80a5f0c:	566d 205d 203a 2000 6941 7550 706d 4d65     mV] : . AiPumpeM
 80a5f1c:	6961 206e 2020 3a20 2520 2064 6d5b 5d56     ain    : %d [mV]
 80a5f2c:	4100 5069 6d75 6570 614d 6e69 2020 2020     .AiPumpeMain    
 80a5f3c:	6d5b 5d56 3a20 0020 4441 0043 4120 5069     [mV] : .ADC. AiP
 80a5f4c:	6d75 6570 6552 6573 7672 2065 203a 6425     umpeReserve : %d
 80a5f5c:	5b20 566d 005d 6941 7550 706d 5265 7365      [mV].AiPumpeRes
 80a5f6c:	7265 6576 5b20 566d 205d 203a 4d00 4941     erve [mV] : .MAI
 80a5f7c:	204e 7550 706d 2065 7369 4f20 004e 414d     N Pumpe is ON.MA
 80a5f8c:	4e49 5020 6d75 6570 6920 2073 4e4f 0020     IN Pumpe is ON .
 80a5f9c:	5453 5441 5355 5200 5345 5245 4556 5020     STATUS.RESERVE P
 80a5fac:	6d75 6570 6920 7473 4f20 004e 4552 4553     umpe ist ON.RESE
 80a5fbc:	5652 2045 7550 706d 2065 7369 4f20 204e     RVE Pumpe is ON 
 80a5fcc:	4600 4e55 204b 7550 706d 2065 7369 2074     .FUNK Pumpe ist 
 80a5fdc:	4e4f 4600 4e55 204b 7550 706d 2065 7369     ON.FUNK Pumpe is
 80a5fec:	4f20 204e 2000 6177 6574 6c72 7665 6c65      ON . waterlevel
 80a5ffc:	203a 6425 0020 7720 6669 3d69 7325 6320     : %d . wifi=%s c
 80a600c:	6f6c 6475 253d 2073 6166 7473 635f 756f     loud=%s fast_cou
 80a601c:	746e 7265 253d 2064 7600 7265 6973 6e6f     nter=%d .version
 80a602c:	2020 2020 2020 2020 2020 2020 203a 6400                 : .d
 80a603c:	6e6f 5374 656c 7065 2020 2020 2020 2020     ontSleep        
 80a604c:	2020 203a 6400 6e6f 4774 6569 7373 6e65       : .dontGiessen
 80a605c:	2020 2020 2020 2020 203a 7000 6d75 6570             : .pumpe
 80a606c:	635f 756f 746e 645f 776f 206e 2020 203a     _count_down   : 
 80a607c:	7200 7365 7265 6576 725f 7065 7465 7469     .reserve_repetit
 80a608c:	6f69 736e 203a 6400 7961 6f20 2066 6577     ions: .day of we
 80a609c:	6b65 2020 2020 2020 2020 203a 6400 6e6f     ek        : .don
 80a60ac:	4774 6569 7373 6e65 003a 7570 706d 2065     tGiessen:.pumpe 
 80a60bc:	6f63 6e75 2074 6f64 6e77 003a 6164 2079     count down:.day 
 80a60cc:	666f 7720 6565 3a6b 0020 4157 5353 5245     of week: .WASSER
 80a60dc:	5453 4e41 2044 203a 5700 5341 4553 5352     STAND : .WASSERS
 80a60ec:	4154 444e 3a20 4220 554c 454d 204e 4947     TAND : BLUMEN GI
 80a60fc:	5345 4553 204e 5349 2054 4544 4b41 4954     ESSEN IST DEAKTI
 80a610c:	4956 5245 2054 5700 5241 494e 474e 3a20     VIERT .WARNING :
 80a611c:	5720 6569 6564 6872 6c6f 6e75 6567 206e      Wiederholungen 
 80a612c:	6564 2073 6154 6b6e 7566 6c65 656c 736e     des Tankfuellens
 80a613c:	7520 6265 7265 6373 7268 7469 6574 206e      ueberschritten 
 80a614c:	203d 7400 6d65 2070 6e69 2020 203a 7400     = .temp in  : .t
 80a615c:	6d65 2070 756f 2074 203a 2000 2d2d 2d2d     emp out : . ----
 80a616c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a617c:	2d2d 202d 2d00 2d2d 2d2d 2d2d 2d2d 2d2d     --- .-----------
 80a618c:	2d2d 2d2d 2d2d 2d2d 2d2d 002d 2020 2020     -----------.    
 80a619c:	2020 6557 636c 6d6f 0065 2323 2323 5320       Welcome.#### S
 80a61ac:	5445 5055 522f 5345 5445 5620 7265 6973     ETUP/RESET Versi
 80a61bc:	6e6f 0020 6f68 6b6f 722d 7365 6f70 736e     on .hook-respons
 80a61cc:	2f65 6177 6574 4372 6e6f 7274 6c6f 5700     e/waterControl.W
 80a61dc:	5241 494e 474e 3a20 4e20 544f 4320 6e6f     ARNING : NOT Con
 80a61ec:	656e 7463 6465 7420 206f 6150 7472 6369     nected to Partic
 80a61fc:	656c 4320 6f6c 6475 4400 7961 6f20 2066     le Cloud.Day of 
 80a620c:	6577 6b65 3a20 2520 0064 2a20 2a2a 5020     week : %d. *** P
 80a621c:	4552 4150 4552 5320 454c 5045 2a20 2a2a     REPARE SLEEP ***
 80a622c:	0020 2323 2323 5320 454c 5045 4d20 6e69      .#### SLEEP Min
 80a623c:	7475 7365 2320 2323 2023 203a 2000 2a2a     utes #### : . **
 80a624c:	202a 4157 454b 5520 2050 2a2a 202a 2300     * WAKE UP *** .#
 80a625c:	2323 2023 4157 454b 5520 2050 2323 2323     ### WAKE UP ####
 80a626c:	5700 4b41 2045 5055 7400 6d65 2070 6e69     .WAKE UP.temp in
 80a627c:	3a20 2520 2064 7420 6d65 2070 756f 2074      : %d  temp out 
 80a628c:	203a 6425 0020 5352 344c 6120 6762 7365     : %d .RSL4 abges
 80a629c:	6863 6c61 6574 0074 5352 344c 6520 6e69     chaltet.RSL4 ein
 80a62ac:	6567 6373 6168 746c 7465 5400 7265 696d     geschaltet.Termi
 80a62bc:	616e 206c 6964 6173 6c62 6465 5400 5245     nal disabled.TER
 80a62cc:	494d 414e 204c 6964 6173 6c62 6465 6220     MINAL disabled b
 80a62dc:	2079 6974 656d 756f 0074 0031 0030 4520     y timeout.1.0. E
 80a62ec:	5252 524f 7720 6968 6863 6e20 746f 7620     RROR which not v
 80a62fc:	6c61 6469 0020 4520 5252 524f 7320 6174     alid . ERROR sta
 80a630c:	6574 6e20 746f 7620 6c61 6469 0020 6553     te not valid .Se
 80a631c:	646e 2065 6f43 6564 3a20 0020 4620 6865     nde Code : . Feh
 80a632c:	656c 2072 203a 6f6b 6e6e 6574 4320 646f     ler : konnte Cod
 80a633c:	2065 696e 6863 2074 6966 646e 6e65 0020     e nicht finden .
 80a634c:	5546 4b4e 502d 4d55 4550 5220 4c53 2032     FUNK-PUMPE RSL2 
 80a635c:	4945 474e 5345 4843 4c41 4554 2054 2000     EINGESCHALTET . 
 80a636c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a637c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a638c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 202d 2000     ------------- . 
 80a639c:	414d 4e49 5020 6d75 6570 7320 6863 6c61     MAIN Pumpe schal
 80a63ac:	6574 206e 203a 7453 7461 2065 203a 6425     ten : State : %d
 80a63bc:	4c20 7561 7a66 6965 2074 6425 4200 554c      Laufzeit %d.BLU
 80a63cc:	454d 204e 4947 5345 4553 204e 4542 4947     MEN GIESSEN BEGI
 80a63dc:	4e4e 2054 0020 4157 5353 5245 5453 4e41     NNT  .WASSERSTAN
 80a63ec:	2044 6562 6f66 6572 7020 6d75 6570 4f20     D before pumpe O
 80a63fc:	204e 203a 5700 5341 4553 5352 4154 444e     N : .WASSERSTAND
 80a640c:	5420 4f52 4b43 4e45 4c2d 5541 2d46 4353      TROCKEN-LAUF-SC
 80a641c:	5548 5a54 202e 5550 504d 2045 494e 4843     HUTZ. PUMPE NICH
 80a642c:	2054 4945 534e 4843 4c41 4554 004e 4148     T EINSCHALTEN.HA
 80a643c:	5055 2d54 5550 504d 2045 4945 474e 5345     UPT-PUMPE EINGES
 80a644c:	4843 4c41 4554 2054 203a 4800 5541 5450     CHALTET : .HAUPT
 80a645c:	502d 4d55 4550 4120 5355 4547 4353 4148     -PUMPE AUSGESCHA
 80a646c:	544c 5445 0020 4157 5353 5245 5453 4e41     LTET .WASSERSTAN
 80a647c:	2044 6661 6574 2072 7570 706d 2065 464f     D after pumpe OF
 80a648c:	2046 203a 5700 5341 4553 5352 4154 444e     F : .WASSERSTAND
 80a649c:	6720 6665 6c61 656c 206e 6d75 5b20 6d6d      gefallen um [mm
 80a64ac:	205d 203a 5700 5341 4553 5352 4154 444e     ] : .WASSERSTAND
 80a64bc:	4220 554c 454d 204e 4947 5345 4553 204e      BLUMEN GIESSEN 
 80a64cc:	5245 4f46 474c 4552 4349 2048 4542 4e45     ERFOLGREICH BEEN
 80a64dc:	4544 0054 4420 506f 6d75 6570 614d 6e69     DET. DoPumpeMain
 80a64ec:	2020 2020 203a 6425 0020 6941 7550 706d         : %d .AiPump
 80a64fc:	4d65 6961 206e 6d5b 5d56 3a20 0020 5220     eMain [mV] : . R
 80a650c:	5345 5245 4556 5020 6d75 6570 7320 6863     ESERVE Pumpe sch
 80a651c:	6c61 6574 206e 203a 7453 7461 2065 203a     alten : State : 
 80a652c:	6425 4c20 7561 7a66 6965 2074 6425 5700     %d Laufzeit %d.W
 80a653c:	5341 4553 5352 4154 444e 6220 6665 726f     ASSERSTAND befor
 80a654c:	2065 6572 2d73 7570 706d 2065 4e4f 3a20     e res-pumpe ON :
 80a655c:	0020 4552 4553 5652 2d45 5550 504d 2045      .RESERVE-PUMPE 
 80a656c:	4945 474e 5345 4843 4c41 4554 2054 5200     EINGESCHALTET .R
 80a657c:	5345 5245 4556 502d 4d55 4550 4120 5355     ESERVE-PUMPE AUS
 80a658c:	4547 4353 4148 544c 5445 202e 5546 4c45     GESCHALTET. FUEL
 80a659c:	554c 474e 4e20 2e52 0020 4157 5353 5245     LUNG NR. .WASSER
 80a65ac:	5453 4e41 2044 6661 6574 2072 6572 2d73     STAND after res-
 80a65bc:	7570 706d 2065 464f 2046 203a 2000 4157     pumpe OFF : . WA
 80a65cc:	5353 5245 5453 4e41 2044 4154 4b4e 4620     SSERSTAND TANK F
 80a65dc:	4555 4c4c 4e45 4520 4652 4c4f 5247 4945     UELLEN ERFOLGREI
 80a65ec:	4843 4220 4545 444e 5445 2000 4157 5353     CH BEENDET. WASS
 80a65fc:	5245 5453 4e41 2044 5245 4f52 3a52 5420     ERSTAND ERROR: T
 80a660c:	4e41 204b 5546 4c45 454c 204e 6566 6c68     ANK FUELLEN fehl
 80a661c:	6567 6373 6c68 6761 6e65 2000 6f44 7550     geschlagen. DoPu
 80a662c:	706d 5265 7365 7265 6576 2020 2020 203a     mpeReserve    : 
 80a663c:	6425 0020 4120 5069 6d75 6570 6552 6573     %d . AiPumpeRese
 80a664c:	7672 2065 2020 3a20 2520 2064 6d5b 5d56     rve    : %d [mV]
 80a665c:	4600 4e55 2d4b 5550 504d 2045 5352 324c     .FUNK-PUMPE RSL2
 80a666c:	4120 5355 4547 4353 4148 544c 5445 0020      AUSGESCHALTET .
 80a667c:	5420 6e61 666b 6575 6c6c 6e65 2928 0020      Tankfuellen() .
 80a668c:	5420 4e41 464b 4555 4c4c 4e45 3a20 4e20      TANKFUELLEN : N
 80a669c:	4349 5448 4e20 544f 4557 444e 4749 0020     ICHT NOTWENDIG .
 80a66ac:	5245 4f52 2052 202d 4241 524f 3a54 5720     ERROR - ABORT: W
 80a66bc:	6569 6564 6872 6c6f 6e75 6567 206e 6564     iederholungen de
 80a66cc:	2073 6154 6b6e 7566 6c65 656c 736e 7520     s Tankfuellens u
 80a66dc:	6265 7265 6373 7268 7469 6574 206e 203d     eberschritten = 
 80a66ec:	5700 5341 4553 5352 4154 444e 5420 4e41     .WASSERSTAND TAN
 80a66fc:	464b 4555 4c4c 4e45 3a20 4220 554c 454d     KFUELLEN : BLUME
 80a670c:	204e 4947 5345 4553 204e 5349 2054 4544     N GIESSEN IST DE
 80a671c:	4b41 4954 4956 5245 2054 5700 5341 4553     AKTIVIERT .WASSE
 80a672c:	5352 4154 444e 5420 4e41 204b 5546 4c45     RSTAND TANK FUEL
 80a673c:	454c 204e 6567 7473 7261 6574 2074 7400     LEN gestartet .t
 80a674c:	6573 0063 6d74 6961 206e 7473 706f 6100     sec.tmain stop.a
 80a675c:	7070 2500 2d59 6d25 252d 5464 4825 253a     pp.%Y-%m-%dT%H:%
 80a676c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a677c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a6784:	2fad 080a 2fb3 080a 2ff1 080a 2fc1 080a     ./.../.../.../..
 80a6794:	2faf 080a                                   ./..

080a6798 <_ZTV9IPAddress>:
	...
 80a67a0:	34e7 080a 34e5 080a 3519 080a               .4...4...5..

080a67ac <_ZTV9USBSerial>:
	...
 80a67b4:	35b1 080a 3617 080a 35ef 080a 2ac9 080a     .5...6...5...*..
 80a67c4:	35e1 080a 35b3 080a 35c3 080a 3611 080a     .5...5...5...6..
 80a67d4:	35d3 080a 35ad 080a                         .5...5..

080a67dc <_ZTV11USARTSerial>:
	...
 80a67e4:	371d 080a 3785 080a 3761 080a 2ac9 080a     .7...7..a7...*..
 80a67f4:	3731 080a 374d 080a 373f 080a 375b 080a     17..M7..?7..[7..
 80a6804:	371f 080a 3723 080a                         .7..#7..

080a680c <_ZTV7TwoWire>:
	...
 80a6814:	386d 080a 38b7 080a 388f 080a 386f 080a     m8...8...8..o8..
 80a6824:	3897 080a 389f 080a 38a7 080a 38af 080a     .8...8...8...8..

080a6834 <_ZTVN5spark9WiFiClassE>:
	...
 80a683c:	397f 080a 3975 080a 396b 080a 38e9 080a     .9..u9..k9...8..
 80a684c:	08b5 080a 395f 080a 39dd 080a 39e5 080a     ...._9...9...9..
 80a685c:	3953 080a 394b 080a 3941 080a 3937 080a     S9..K9..A9..79..
 80a686c:	38f3 080a                                   .8..

080a6870 <_ZTVN5spark12NetworkClassE>:
	...
 80a6878:	399d 080a 39a7 080a 39b1 080a 39bb 080a     .9...9...9...9..
 80a6888:	39c5 080a 39d1 080a 39dd 080a 39e5 080a     .9...9...9...9..
 80a6898:	39ed 080a 39f9 080a 3a01 080a 3a0b 080a     .9...9...:...:..
 80a68a8:	3a15 080a                                   .:..

080a68ac <_ZSt7nothrow>:
 80a68ac:	0000 0000                                   ....

080a68b0 <__month_lengths>:
 80a68b0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a68c0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a68d0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a68e0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a68f0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a6900:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a6910:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a6920:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a6930:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a6940:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a694c <_ctype_>:
 80a694c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a695c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a696c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a697c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a698c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a699c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a69ac:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a69bc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a69cc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a6a4d <link_const_variable_data_end>:
 80a6a4d:	00          	.byte	0x00
	...

080a6a50 <link_constructors_location>:
 80a6a50:	080a0245 	.word	0x080a0245
 80a6a54:	080a0415 	.word	0x080a0415
 80a6a58:	080a0851 	.word	0x080a0851
 80a6a5c:	080a1621 	.word	0x080a1621
 80a6a60:	080a28a9 	.word	0x080a28a9
 80a6a64:	080a2bf9 	.word	0x080a2bf9
 80a6a68:	080a2de9 	.word	0x080a2de9
 80a6a6c:	080a2e45 	.word	0x080a2e45
 80a6a70:	080a3989 	.word	0x080a3989
 80a6a74:	080a3a65 	.word	0x080a3a65
 80a6a78:	080a3bed 	.word	0x080a3bed

080a6a7c <link_constructors_end>:
 80a6a7c:	00000000 	.word	0x00000000
