
d:/funkschalter_2018/target/3.0.0/photon/funkschalter_2018.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008fa4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a8fc0  080a8fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a8fc8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000124  20000000  080a8fcc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003f8  20000128  20000128  00040128  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a90f0  080a90f0  000390f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a9118  080a9118  00039118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00249c11  00000000  00000000  0003911c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000246c3  00000000  00000000  00282d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00026bac  00000000  00000000  002a73f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ac0  00000000  00000000  002cdf9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006fd0  00000000  00000000  002d0a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000392c6  00000000  00000000  002d7a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004fb69  00000000  00000000  00310cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000bf39e  00000000  00000000  0036085b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000790c  00000000  00000000  0041fbfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f006 fd0f 	bl	80a6a50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f006 fd17 	bl	80a6a6c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a8fcc 	.word	0x080a8fcc
 80a004c:	20000124 	.word	0x20000124
 80a0050:	20000128 	.word	0x20000128
 80a0054:	2000051d 	.word	0x2000051d
 80a0058:	2000051d 	.word	0x2000051d

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f004 fb1f 	bl	80a46a0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a8f94 	.word	0x080a8f94
 80a0080:	080a8fc0 	.word	0x080a8fc0

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f002 b970 	b.w	80a2368 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f002 fa63 	bl	80a2554 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f004 bac7 	b.w	80a4624 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f003 bc39 	b.w	80a390c <malloc>

080a009a <_Znaj>:
 80a009a:	f003 bc37 	b.w	80a390c <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f003 bc3d 	b.w	80a391c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a00b2:	b40e      	push	{r1, r2, r3}
 80a00b4:	b503      	push	{r0, r1, lr}
 80a00b6:	ab03      	add	r3, sp, #12
 80a00b8:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80a00bc:	2101      	movs	r1, #1
        va_start(args, format);
 80a00be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80a00c0:	f004 f8f4 	bl	80a42ac <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a00c4:	b002      	add	sp, #8
 80a00c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80a00ca:	b003      	add	sp, #12
 80a00cc:	4770      	bx	lr

080a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00ce:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00d0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a00d2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a00d4:	b17c      	cbz	r4, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a00d6:	6863      	ldr	r3, [r4, #4]
 80a00d8:	3b01      	subs	r3, #1
 80a00da:	6063      	str	r3, [r4, #4]
 80a00dc:	b95b      	cbnz	r3, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a00de:	6823      	ldr	r3, [r4, #0]
 80a00e0:	4620      	mov	r0, r4
 80a00e2:	689b      	ldr	r3, [r3, #8]
 80a00e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00e6:	68a3      	ldr	r3, [r4, #8]
 80a00e8:	3b01      	subs	r3, #1
 80a00ea:	60a3      	str	r3, [r4, #8]
 80a00ec:	b91b      	cbnz	r3, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00ee:	6823      	ldr	r3, [r4, #0]
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	68db      	ldr	r3, [r3, #12]
 80a00f4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a00f6:	4628      	mov	r0, r5
 80a00f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a00fc <_Z15WriteToDatabasePcS_>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option)
{
 80a00fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0100:	b089      	sub	sp, #36	; 0x24
 80a0102:	460c      	mov	r4, r1
 80a0104:	4606      	mov	r6, r0
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s\"}", \
 80a0106:	f004 f9d7 	bl	80a44b8 <_ZN9TimeClass4hourEv>
 80a010a:	4607      	mov	r7, r0
 80a010c:	f004 f9e0 	bl	80a44d0 <_ZN9TimeClass6minuteEv>
 80a0110:	4680      	mov	r8, r0
 80a0112:	f004 f9e9 	bl	80a44e8 <_ZN9TimeClass6secondEv>
 80a0116:	4681      	mov	r9, r0
 80a0118:	f004 f9f2 	bl	80a4500 <_ZN9TimeClass3dayEv>
 80a011c:	4682      	mov	sl, r0
 80a011e:	f004 f9fb 	bl	80a4518 <_ZN9TimeClass5monthEv>
 80a0122:	4683      	mov	fp, r0
 80a0124:	f004 fa00 	bl	80a4528 <_ZN9TimeClass4yearEv>
 80a0128:	4d13      	ldr	r5, [pc, #76]	; (80a0178 <_Z15WriteToDatabasePcS_+0x7c>)
 80a012a:	463b      	mov	r3, r7
 80a012c:	4632      	mov	r2, r6
 80a012e:	e9cd 0404 	strd	r0, r4, [sp, #16]
 80a0132:	4912      	ldr	r1, [pc, #72]	; (80a017c <_Z15WriteToDatabasePcS_+0x80>)
 80a0134:	4628      	mov	r0, r5
 80a0136:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80a013a:	e9cd 8900 	strd	r8, r9, [sp]
 80a013e:	f003 fbfd 	bl	80a393c <sprintf>
                    status,Time.hour(),Time.minute(),Time.second(),Time.day(),Time.month(),Time.year(),option);

    Serial.printlnf(buffer);
 80a0142:	f004 fe3b 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0146:	4629      	mov	r1, r5
 80a0148:	f7ff ffb3 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a014c:	4b0c      	ldr	r3, [pc, #48]	; (80a0180 <_Z15WriteToDatabasePcS_+0x84>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a014e:	462a      	mov	r2, r5
 80a0150:	781b      	ldrb	r3, [r3, #0]
 80a0152:	490c      	ldr	r1, [pc, #48]	; (80a0184 <_Z15WriteToDatabasePcS_+0x88>)
 80a0154:	f88d 3000 	strb.w	r3, [sp]
 80a0158:	a806      	add	r0, sp, #24
 80a015a:	233c      	movs	r3, #60	; 0x3c
 80a015c:	f004 fbf8 	bl	80a4950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0160:	a807      	add	r0, sp, #28
 80a0162:	f7ff ffb4 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("wasserstand", buffer, PRIVATE);
    println(option);
 80a0166:	4620      	mov	r0, r4
 80a0168:	f001 f9e2 	bl	80a1530 <_Z7printlnPc>
    delay(200);
 80a016c:	20c8      	movs	r0, #200	; 0xc8
 80a016e:	f004 f9f1 	bl	80a4554 <delay>
}
 80a0172:	b009      	add	sp, #36	; 0x24
 80a0174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0178:	200001de 	.word	0x200001de
 80a017c:	080a74c0 	.word	0x080a74c0
 80a0180:	2000012c 	.word	0x2000012c
 80a0184:	080a7521 	.word	0x080a7521

080a0188 <_Z15WriteToDatabasePcS_i>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option, int data)
{
 80a0188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a018c:	b08d      	sub	sp, #52	; 0x34
 80a018e:	460c      	mov	r4, r1
 80a0190:	4615      	mov	r5, r2
 80a0192:	4607      	mov	r7, r0
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s %2d\"}", \
 80a0194:	f004 f990 	bl	80a44b8 <_ZN9TimeClass4hourEv>
 80a0198:	4680      	mov	r8, r0
 80a019a:	f004 f999 	bl	80a44d0 <_ZN9TimeClass6minuteEv>
 80a019e:	4681      	mov	r9, r0
 80a01a0:	f004 f9a2 	bl	80a44e8 <_ZN9TimeClass6secondEv>
 80a01a4:	4682      	mov	sl, r0
 80a01a6:	f004 f9ab 	bl	80a4500 <_ZN9TimeClass3dayEv>
 80a01aa:	4683      	mov	fp, r0
 80a01ac:	f004 f9b4 	bl	80a4518 <_ZN9TimeClass5monthEv>
 80a01b0:	9009      	str	r0, [sp, #36]	; 0x24
 80a01b2:	f004 f9b9 	bl	80a4528 <_ZN9TimeClass4yearEv>
 80a01b6:	4e18      	ldr	r6, [pc, #96]	; (80a0218 <_Z15WriteToDatabasePcS_i+0x90>)
 80a01b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a01ba:	463a      	mov	r2, r7
 80a01bc:	e9cd b302 	strd	fp, r3, [sp, #8]
 80a01c0:	4916      	ldr	r1, [pc, #88]	; (80a021c <_Z15WriteToDatabasePcS_i+0x94>)
 80a01c2:	4643      	mov	r3, r8
 80a01c4:	9004      	str	r0, [sp, #16]
 80a01c6:	e9cd 4505 	strd	r4, r5, [sp, #20]
 80a01ca:	4630      	mov	r0, r6
 80a01cc:	e9cd 9a00 	strd	r9, sl, [sp]
 80a01d0:	f003 fbb4 	bl	80a393c <sprintf>
                    status,Time.hour(),Time.minute(),Time.second(),Time.day(),Time.month(),Time.year(),option,data);

    Serial.printlnf(buffer);
 80a01d4:	f004 fdf2 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a01d8:	4631      	mov	r1, r6
 80a01da:	f7ff ff6a 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a01de:	4b10      	ldr	r3, [pc, #64]	; (80a0220 <_Z15WriteToDatabasePcS_i+0x98>)
 80a01e0:	4632      	mov	r2, r6
 80a01e2:	781b      	ldrb	r3, [r3, #0]
 80a01e4:	490f      	ldr	r1, [pc, #60]	; (80a0224 <_Z15WriteToDatabasePcS_i+0x9c>)
 80a01e6:	f88d 3000 	strb.w	r3, [sp]
 80a01ea:	a80a      	add	r0, sp, #40	; 0x28
 80a01ec:	233c      	movs	r3, #60	; 0x3c
 80a01ee:	f004 fbaf 	bl	80a4950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a01f2:	a80b      	add	r0, sp, #44	; 0x2c
 80a01f4:	f7ff ff6b 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("wasserstand", buffer, PRIVATE);
    sprintf(buffer," %s %d ", option, data);
 80a01f8:	462b      	mov	r3, r5
 80a01fa:	4622      	mov	r2, r4
 80a01fc:	4630      	mov	r0, r6
 80a01fe:	490a      	ldr	r1, [pc, #40]	; (80a0228 <_Z15WriteToDatabasePcS_i+0xa0>)
 80a0200:	f003 fb9c 	bl	80a393c <sprintf>
    println(option,data);
 80a0204:	4629      	mov	r1, r5
 80a0206:	4620      	mov	r0, r4
 80a0208:	f001 fd14 	bl	80a1c34 <_Z7printlnPci>
    delay(200);
 80a020c:	20c8      	movs	r0, #200	; 0xc8
 80a020e:	f004 f9a1 	bl	80a4554 <delay>
}
 80a0212:	b00d      	add	sp, #52	; 0x34
 80a0214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0218:	200001de 	.word	0x200001de
 80a021c:	080a752d 	.word	0x080a752d
 80a0220:	2000012c 	.word	0x2000012c
 80a0224:	080a7521 	.word	0x080a7521
 80a0228:	080a7592 	.word	0x080a7592

080a022c <_GLOBAL__sub_I__Z15WriteToDatabasePcS_>:
        val_(val) {
 80a022c:	2201      	movs	r2, #1
 80a022e:	4b01      	ldr	r3, [pc, #4]	; (80a0234 <_GLOBAL__sub_I__Z15WriteToDatabasePcS_+0x8>)
 80a0230:	701a      	strb	r2, [r3, #0]
//       {
//         println(" ERR: no Luefter ");
//         done = 1;
//       }
//     }
}
 80a0232:	4770      	bx	lr
 80a0234:	2000012c 	.word	0x2000012c

080a0238 <_Z15dispatchCommandc>:
/*---------------------------------------------------------------------
Dispatch command
---------------------------------------------------------------------*/

void dispatchCommand(char c)
{
 80a0238:	b530      	push	{r4, r5, lr}
 80a023a:	3861      	subs	r0, #97	; 0x61
 80a023c:	b087      	sub	sp, #28
 80a023e:	2819      	cmp	r0, #25
 80a0240:	d816      	bhi.n	80a0270 <_Z15dispatchCommandc+0x38>
 80a0242:	e8df f000 	tbb	[pc, r0]
 80a0246:	3532      	.short	0x3532
 80a0248:	15152b15 	.word	0x15152b15
 80a024c:	15170d15 	.word	0x15170d15
 80a0250:	15151515 	.word	0x15151515
 80a0254:	15155015 	.word	0x15155015
 80a0258:	15495b3b 	.word	0x15495b3b
 80a025c:	80777169 	.word	0x80777169

  switch (c)
  {
  case 'h':
    termEnabled = 1;
 80a0260:	2201      	movs	r2, #1
 80a0262:	4b4e      	ldr	r3, [pc, #312]	; (80a039c <_Z15dispatchCommandc+0x164>)
 80a0264:	601a      	str	r2, [r3, #0]
    termCounter = 10;
 80a0266:	220a      	movs	r2, #10
 80a0268:	4b4d      	ldr	r3, [pc, #308]	; (80a03a0 <_Z15dispatchCommandc+0x168>)
 80a026a:	601a      	str	r2, [r3, #0]
    help();
 80a026c:	f001 fa80 	bl	80a1770 <_Z4helpv>
    println(" Photon HW ID ", System.deviceID() );
    Particle.publish("particle/device/name");
    delay(500); 
  break;  
  }
}
 80a0270:	b007      	add	sp, #28
 80a0272:	bd30      	pop	{r4, r5, pc}
    if (control.pumpe_count_down < 40)
 80a0274:	4c4b      	ldr	r4, [pc, #300]	; (80a03a4 <_Z15dispatchCommandc+0x16c>)
 80a0276:	68e3      	ldr	r3, [r4, #12]
 80a0278:	2b27      	cmp	r3, #39	; 0x27
      control.pumpe_count_down = 40;
 80a027a:	bf8c      	ite	hi
 80a027c:	2328      	movhi	r3, #40	; 0x28
      control.pumpe_count_down = control.pumpe_count_down + 4;
 80a027e:	3304      	addls	r3, #4
 80a0280:	60e3      	str	r3, [r4, #12]
    EEPROM.put(0, control);
 80a0282:	f005 f87b 	bl	80a537c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a0286:	2214      	movs	r2, #20
 80a0288:	2000      	movs	r0, #0
 80a028a:	4946      	ldr	r1, [pc, #280]	; (80a03a4 <_Z15dispatchCommandc+0x16c>)
 80a028c:	f003 f916 	bl	80a34bc <HAL_EEPROM_Put>
    WriteToDatabase("control", "PUMPE MAIN COUNTDOWN NOW ", control.pumpe_count_down);
 80a0290:	68e2      	ldr	r2, [r4, #12]
 80a0292:	4945      	ldr	r1, [pc, #276]	; (80a03a8 <_Z15dispatchCommandc+0x170>)
 80a0294:	4845      	ldr	r0, [pc, #276]	; (80a03ac <_Z15dispatchCommandc+0x174>)
 80a0296:	f7ff ff77 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
    break;
 80a029a:	e7e9      	b.n	80a0270 <_Z15dispatchCommandc+0x38>
    if (control.pumpe_count_down > 6)
 80a029c:	4c41      	ldr	r4, [pc, #260]	; (80a03a4 <_Z15dispatchCommandc+0x16c>)
 80a029e:	68e3      	ldr	r3, [r4, #12]
 80a02a0:	2b06      	cmp	r3, #6
      control.pumpe_count_down = 6;
 80a02a2:	bf94      	ite	ls
 80a02a4:	2306      	movls	r3, #6
      control.pumpe_count_down = control.pumpe_count_down - 4;
 80a02a6:	3b04      	subhi	r3, #4
 80a02a8:	e7ea      	b.n	80a0280 <_Z15dispatchCommandc+0x48>
    printSlowStatus();
 80a02aa:	f001 fdbb 	bl	80a1e24 <_Z15printSlowStatusv>
    break;
 80a02ae:	e7df      	b.n	80a0270 <_Z15dispatchCommandc+0x38>
    BlumenGiessen(1, ts_giessen);
 80a02b0:	4b3f      	ldr	r3, [pc, #252]	; (80a03b0 <_Z15dispatchCommandc+0x178>)
 80a02b2:	2001      	movs	r0, #1
 80a02b4:	6819      	ldr	r1, [r3, #0]
 80a02b6:	f002 ff77 	bl	80a31a8 <_Z13BlumenGiessenii>
    break;
 80a02ba:	e7d9      	b.n	80a0270 <_Z15dispatchCommandc+0x38>
    control.dontSleepSW = 0;
 80a02bc:	2400      	movs	r4, #0
 80a02be:	4d39      	ldr	r5, [pc, #228]	; (80a03a4 <_Z15dispatchCommandc+0x16c>)
    println(" Sleep Mode enabled ");
 80a02c0:	483c      	ldr	r0, [pc, #240]	; (80a03b4 <_Z15dispatchCommandc+0x17c>)
    control.dontSleepSW = 0;
 80a02c2:	606c      	str	r4, [r5, #4]
    println(" Sleep Mode enabled ");
 80a02c4:	f001 f934 	bl	80a1530 <_Z7printlnPc>
    EEPROM.put(0, control);  
 80a02c8:	f005 f858 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a02cc:	2214      	movs	r2, #20
 80a02ce:	4629      	mov	r1, r5
 80a02d0:	2000      	movs	r0, #0
 80a02d2:	f003 f8f3 	bl	80a34bc <HAL_EEPROM_Put>
        return t;
 80a02d6:	e7cb      	b.n	80a0270 <_Z15dispatchCommandc+0x38>
    control.reserve_repetitions=0;
 80a02d8:	2400      	movs	r4, #0
 80a02da:	4d32      	ldr	r5, [pc, #200]	; (80a03a4 <_Z15dispatchCommandc+0x16c>)
    println(" Clear reserve repetition counter "); 
 80a02dc:	4836      	ldr	r0, [pc, #216]	; (80a03b8 <_Z15dispatchCommandc+0x180>)
 80a02de:	f001 f927 	bl	80a1530 <_Z7printlnPc>
    control.reserve_repetitions=0;
 80a02e2:	612c      	str	r4, [r5, #16]
 80a02e4:	e7f0      	b.n	80a02c8 <_Z15dispatchCommandc+0x90>
    control.dontSleepSW = 1;
 80a02e6:	2301      	movs	r3, #1
 80a02e8:	4c2e      	ldr	r4, [pc, #184]	; (80a03a4 <_Z15dispatchCommandc+0x16c>)
    println(" Sleep Mode disabled ");
 80a02ea:	4834      	ldr	r0, [pc, #208]	; (80a03bc <_Z15dispatchCommandc+0x184>)
    control.dontSleepSW = 1;
 80a02ec:	6063      	str	r3, [r4, #4]
    println(" Sleep Mode disabled ");
 80a02ee:	f001 f91f 	bl	80a1530 <_Z7printlnPc>
    EEPROM.put(0, control);
 80a02f2:	f005 f843 	bl	80a537c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a02f6:	2214      	movs	r2, #20
 80a02f8:	4621      	mov	r1, r4
 80a02fa:	e7e9      	b.n	80a02d0 <_Z15dispatchCommandc+0x98>
    get_Temperature();
 80a02fc:	f000 fa3a 	bl	80a0774 <_Z15get_Temperaturev>
    sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a0300:	4b2f      	ldr	r3, [pc, #188]	; (80a03c0 <_Z15dispatchCommandc+0x188>)
 80a0302:	4a30      	ldr	r2, [pc, #192]	; (80a03c4 <_Z15dispatchCommandc+0x18c>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	6812      	ldr	r2, [r2, #0]
 80a0308:	492f      	ldr	r1, [pc, #188]	; (80a03c8 <_Z15dispatchCommandc+0x190>)
 80a030a:	4830      	ldr	r0, [pc, #192]	; (80a03cc <_Z15dispatchCommandc+0x194>)
 80a030c:	f003 fb16 	bl	80a393c <sprintf>
    println(timebuffer);
 80a0310:	482e      	ldr	r0, [pc, #184]	; (80a03cc <_Z15dispatchCommandc+0x194>)
 80a0312:	f001 f90d 	bl	80a1530 <_Z7printlnPc>
    break;
 80a0316:	e7ab      	b.n	80a0270 <_Z15dispatchCommandc+0x38>
    println(" Store CONTROL in EEPROM ");
 80a0318:	482d      	ldr	r0, [pc, #180]	; (80a03d0 <_Z15dispatchCommandc+0x198>)
 80a031a:	f001 f909 	bl	80a1530 <_Z7printlnPc>
    EEPROM.put(0, control);
 80a031e:	f005 f82d 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a0322:	2214      	movs	r2, #20
 80a0324:	491f      	ldr	r1, [pc, #124]	; (80a03a4 <_Z15dispatchCommandc+0x16c>)
 80a0326:	e7d3      	b.n	80a02d0 <_Z15dispatchCommandc+0x98>
    println(" Ultrasonic ");
 80a0328:	482a      	ldr	r0, [pc, #168]	; (80a03d4 <_Z15dispatchCommandc+0x19c>)
 80a032a:	f001 f901 	bl	80a1530 <_Z7printlnPc>
    ultra_sonic_measure();
 80a032e:	f000 f995 	bl	80a065c <_Z19ultra_sonic_measurev>
    break;
 80a0332:	e79d      	b.n	80a0270 <_Z15dispatchCommandc+0x38>
    println(" Prepare Sleep ");
 80a0334:	4828      	ldr	r0, [pc, #160]	; (80a03d8 <_Z15dispatchCommandc+0x1a0>)
 80a0336:	f001 f8fb 	bl	80a1530 <_Z7printlnPc>
    sleep(getSleepTime(55));
 80a033a:	2037      	movs	r0, #55	; 0x37
 80a033c:	f000 fb44 	bl	80a09c8 <_Z12getSleepTimei>
 80a0340:	f001 f910 	bl	80a1564 <_Z5sleepi>
    break;  
 80a0344:	e794      	b.n	80a0270 <_Z15dispatchCommandc+0x38>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
 80a0346:	a802      	add	r0, sp, #8
 80a0348:	f003 fab8 	bl	80a38bc <spark_deviceID>
    println(" Photon HW ID ", System.deviceID() );
 80a034c:	a902      	add	r1, sp, #8
 80a034e:	4823      	ldr	r0, [pc, #140]	; (80a03dc <_Z15dispatchCommandc+0x1a4>)
 80a0350:	f001 fc4c 	bl	80a1bec <_Z7printlnPc6String>
 80a0354:	a802      	add	r0, sp, #8
 80a0356:	f003 fe6b 	bl	80a4030 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a035a:	4b21      	ldr	r3, [pc, #132]	; (80a03e0 <_Z15dispatchCommandc+0x1a8>)
 80a035c:	2200      	movs	r2, #0
 80a035e:	781b      	ldrb	r3, [r3, #0]
 80a0360:	4920      	ldr	r1, [pc, #128]	; (80a03e4 <_Z15dispatchCommandc+0x1ac>)
 80a0362:	f88d 3000 	strb.w	r3, [sp]
 80a0366:	a802      	add	r0, sp, #8
 80a0368:	233c      	movs	r3, #60	; 0x3c
 80a036a:	f004 faf1 	bl	80a4950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 80a036e:	9c03      	ldr	r4, [sp, #12]
 80a0370:	b17c      	cbz	r4, 80a0392 <_Z15dispatchCommandc+0x15a>
      if (--_M_use_count == 0)
 80a0372:	6863      	ldr	r3, [r4, #4]
 80a0374:	3b01      	subs	r3, #1
 80a0376:	6063      	str	r3, [r4, #4]
 80a0378:	b95b      	cbnz	r3, 80a0392 <_Z15dispatchCommandc+0x15a>
          _M_dispose();
 80a037a:	6823      	ldr	r3, [r4, #0]
 80a037c:	4620      	mov	r0, r4
 80a037e:	689b      	ldr	r3, [r3, #8]
 80a0380:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0382:	68a3      	ldr	r3, [r4, #8]
 80a0384:	3b01      	subs	r3, #1
 80a0386:	60a3      	str	r3, [r4, #8]
 80a0388:	b91b      	cbnz	r3, 80a0392 <_Z15dispatchCommandc+0x15a>
            _M_destroy();
 80a038a:	6823      	ldr	r3, [r4, #0]
 80a038c:	4620      	mov	r0, r4
 80a038e:	68db      	ldr	r3, [r3, #12]
 80a0390:	4798      	blx	r3
    delay(500); 
 80a0392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0396:	f004 f8dd 	bl	80a4554 <delay>
}
 80a039a:	e769      	b.n	80a0270 <_Z15dispatchCommandc+0x38>
 80a039c:	20000334 	.word	0x20000334
 80a03a0:	20000330 	.word	0x20000330
 80a03a4:	200002d8 	.word	0x200002d8
 80a03a8:	080a759a 	.word	0x080a759a
 80a03ac:	080a75b4 	.word	0x080a75b4
 80a03b0:	200003bc 	.word	0x200003bc
 80a03b4:	080a75bc 	.word	0x080a75bc
 80a03b8:	080a75d1 	.word	0x080a75d1
 80a03bc:	080a75f4 	.word	0x080a75f4
 80a03c0:	2000032c 	.word	0x2000032c
 80a03c4:	20000328 	.word	0x20000328
 80a03c8:	080a760a 	.word	0x080a760a
 80a03cc:	20000384 	.word	0x20000384
 80a03d0:	080a761c 	.word	0x080a761c
 80a03d4:	080a7636 	.word	0x080a7636
 80a03d8:	080a7643 	.word	0x080a7643
 80a03dc:	080a7653 	.word	0x080a7653
 80a03e0:	2000012d 	.word	0x2000012d
 80a03e4:	080a7662 	.word	0x080a7662

080a03e8 <_Z11serialEventv>:

/*---------------------------------------------------------------------
Dispatch characters from serial port
---------------------------------------------------------------------*/
void serialEvent()
{
 80a03e8:	b508      	push	{r3, lr}
  char c = Serial.read();
 80a03ea:	f004 fce7 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a03ee:	6803      	ldr	r3, [r0, #0]
 80a03f0:	695b      	ldr	r3, [r3, #20]
 80a03f2:	4798      	blx	r3
  dispatchCommand(c);
}
 80a03f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dispatchCommand(c);
 80a03f8:	b2c0      	uxtb	r0, r0
 80a03fa:	f7ff bf1d 	b.w	80a0238 <_Z15dispatchCommandc>
	...

080a0400 <_GLOBAL__sub_I__Z15dispatchCommandc>:
        val_(val) {
 80a0400:	2200      	movs	r2, #0
 80a0402:	4b01      	ldr	r3, [pc, #4]	; (80a0408 <_GLOBAL__sub_I__Z15dispatchCommandc+0x8>)
 80a0404:	701a      	strb	r2, [r3, #0]
}
 80a0406:	4770      	bx	lr
 80a0408:	2000012d 	.word	0x2000012d

080a040c <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
 80a040c:	2300      	movs	r3, #0
  _celsius = 0;
 80a040e:	2200      	movs	r2, #0
  _raw = 0;
 80a0410:	8303      	strh	r3, [r0, #24]
  _celsius = 0;
 80a0412:	61c2      	str	r2, [r0, #28]
  memset(_addr, 0, sizeof(_addr));
 80a0414:	6203      	str	r3, [r0, #32]
 80a0416:	6243      	str	r3, [r0, #36]	; 0x24
  memset(_data, 0, sizeof(_data));
 80a0418:	6283      	str	r3, [r0, #40]	; 0x28
 80a041a:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a041c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  _type = WIRE_UNKNOWN;
 80a0420:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  _searchDone = false;
 80a0424:	8643      	strh	r3, [r0, #50]	; 0x32
  _crcError = false;
}
 80a0426:	4770      	bx	lr

080a0428 <_ZN4DS18C1Etb>:
DS18::DS18(uint16_t pin, bool parasitic)
 80a0428:	b538      	push	{r3, r4, r5, lr}
 80a042a:	4604      	mov	r4, r0
 80a042c:	4615      	mov	r5, r2
  _conversionTime{1000}
 80a042e:	f002 f9fc 	bl	80a282a <_ZN7OneWireC1Et>
 80a0432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  init();
 80a0436:	4620      	mov	r0, r4
  _conversionTime{1000}
 80a0438:	7525      	strb	r5, [r4, #20]
 80a043a:	82e3      	strh	r3, [r4, #22]
  init();
 80a043c:	f7ff ffe6 	bl	80a040c <_ZN4DS184initEv>
}
 80a0440:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0444 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80a0444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80a0448:	680b      	ldr	r3, [r1, #0]
bool DS18::read(uint8_t addr[8]) {
 80a044a:	4604      	mov	r4, r0
  memcpy(_addr, addr, sizeof(_addr));
 80a044c:	6203      	str	r3, [r0, #32]
 80a044e:	684b      	ldr	r3, [r1, #4]
 80a0450:	f100 0520 	add.w	r5, r0, #32
 80a0454:	6243      	str	r3, [r0, #36]	; 0x24

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80a0456:	780b      	ldrb	r3, [r1, #0]
 80a0458:	2b26      	cmp	r3, #38	; 0x26
 80a045a:	d060      	beq.n	80a051e <_ZN4DS184readEPh+0xda>
 80a045c:	d808      	bhi.n	80a0470 <_ZN4DS184readEPh+0x2c>
 80a045e:	2b10      	cmp	r3, #16
 80a0460:	d00a      	beq.n	80a0478 <_ZN4DS184readEPh+0x34>
 80a0462:	2b22      	cmp	r3, #34	; 0x22
 80a0464:	d059      	beq.n	80a051a <_ZN4DS184readEPh+0xd6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
 80a0466:	2000      	movs	r0, #0
 80a0468:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
      }
  }

  // Got a good reading!
  return true;
}
 80a046c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (addr[0]) {
 80a0470:	2b28      	cmp	r3, #40	; 0x28
 80a0472:	d1f8      	bne.n	80a0466 <_ZN4DS184readEPh+0x22>
    case 0x28: _type = WIRE_DS18B20; break;
 80a0474:	2302      	movs	r3, #2
 80a0476:	e000      	b.n	80a047a <_ZN4DS184readEPh+0x36>
    case 0x10: _type = WIRE_DS1820; break;
 80a0478:	2301      	movs	r3, #1
    case 0x26: _type = WIRE_DS2438; break;
 80a047a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  _wire.reset();               // first clear the 1-wire bus
 80a047e:	4620      	mov	r0, r4
 80a0480:	f002 f9e0 	bl	80a2844 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
 80a0484:	4629      	mov	r1, r5
 80a0486:	4620      	mov	r0, r4
 80a0488:	f002 fa96 	bl	80a29b8 <_ZN7OneWire6selectEPKh>
  _wire.write(0x44, power);    // tell it to start a conversion
 80a048c:	7d22      	ldrb	r2, [r4, #20]
 80a048e:	2144      	movs	r1, #68	; 0x44
 80a0490:	4620      	mov	r0, r4
 80a0492:	f002 fa66 	bl	80a2962 <_ZN7OneWire5writeEhh>
  delay(_conversionTime); // wait for conversion to finish
 80a0496:	8ae0      	ldrh	r0, [r4, #22]
 80a0498:	f004 f85c 	bl	80a4554 <delay>
  _wire.reset();
 80a049c:	4620      	mov	r0, r4
 80a049e:	f002 f9d1 	bl	80a2844 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a04a2:	4629      	mov	r1, r5
 80a04a4:	4620      	mov	r0, r4
 80a04a6:	f002 fa87 	bl	80a29b8 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
 80a04aa:	2200      	movs	r2, #0
 80a04ac:	21b8      	movs	r1, #184	; 0xb8
 80a04ae:	4620      	mov	r0, r4
 80a04b0:	f002 fa57 	bl	80a2962 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
 80a04b4:	2200      	movs	r2, #0
 80a04b6:	4620      	mov	r0, r4
 80a04b8:	4611      	mov	r1, r2
 80a04ba:	f002 fa52 	bl	80a2962 <_ZN7OneWire5writeEhh>
  _wire.reset();
 80a04be:	4620      	mov	r0, r4
 80a04c0:	f002 f9c0 	bl	80a2844 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a04c4:	4629      	mov	r1, r5
 80a04c6:	4620      	mov	r0, r4
 80a04c8:	f002 fa76 	bl	80a29b8 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
 80a04cc:	2200      	movs	r2, #0
 80a04ce:	21be      	movs	r1, #190	; 0xbe
 80a04d0:	4620      	mov	r0, r4
 80a04d2:	f002 fa46 	bl	80a2962 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
 80a04d6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a04da:	2b04      	cmp	r3, #4
 80a04dc:	d104      	bne.n	80a04e8 <_ZN4DS184readEPh+0xa4>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
 80a04de:	2200      	movs	r2, #0
 80a04e0:	4620      	mov	r0, r4
 80a04e2:	4611      	mov	r1, r2
 80a04e4:	f002 fa3d 	bl	80a2962 <_ZN7OneWire5writeEhh>
 80a04e8:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80a04ec:	462e      	mov	r6, r5
 80a04ee:	f104 0731 	add.w	r7, r4, #49	; 0x31
    _data[i] = _wire.read();
 80a04f2:	4620      	mov	r0, r4
 80a04f4:	f002 fa50 	bl	80a2998 <_ZN7OneWire4readEv>
 80a04f8:	f805 0b01 	strb.w	r0, [r5], #1
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
 80a04fc:	42af      	cmp	r7, r5
 80a04fe:	d1f8      	bne.n	80a04f2 <_ZN4DS184readEPh+0xae>
  if (OneWire::crc8(_data, 8) != _data[8]) {
 80a0500:	2108      	movs	r1, #8
 80a0502:	4630      	mov	r0, r6
 80a0504:	f002 fae3 	bl	80a2ace <_ZN7OneWire4crc8EPhh>
 80a0508:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a050c:	4283      	cmp	r3, r0
 80a050e:	d008      	beq.n	80a0522 <_ZN4DS184readEPh+0xde>
    _crcError = true;
 80a0510:	2301      	movs	r3, #1
    return false;
 80a0512:	2000      	movs	r0, #0
    _crcError = true;
 80a0514:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a0518:	e7a8      	b.n	80a046c <_ZN4DS184readEPh+0x28>
    case 0x22: _type = WIRE_DS1822; break;
 80a051a:	2303      	movs	r3, #3
 80a051c:	e7ad      	b.n	80a047a <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
 80a051e:	2304      	movs	r3, #4
 80a0520:	e7ab      	b.n	80a047a <_ZN4DS184readEPh+0x36>
  _raw = (_data[1] << 8) | _data[0];
 80a0522:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80a0526:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80a052a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a052e:	8323      	strh	r3, [r4, #24]
  if (_type == WIRE_DS2438) {
 80a0530:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a0534:	2b04      	cmp	r3, #4
 80a0536:	d147      	bne.n	80a05c8 <_ZN4DS184readEPh+0x184>
    _raw = (_data[2] << 8) | _data[1];
 80a0538:	f894 802a 	ldrb.w	r8, [r4, #42]	; 0x2a
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a053c:	08c5      	lsrs	r5, r0, #3
    _raw = (_data[2] << 8) | _data[1];
 80a053e:	ea40 2308 	orr.w	r3, r0, r8, lsl #8
 80a0542:	8323      	strh	r3, [r4, #24]
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a0544:	4640      	mov	r0, r8
 80a0546:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
      if (_data[2] > 127) {
 80a054a:	f005 fd99 	bl	80a6080 <__aeabi_ui2f>
 80a054e:	f005 fa07 	bl	80a5960 <__aeabi_f2d>
 80a0552:	4606      	mov	r6, r0
 80a0554:	4628      	mov	r0, r5
 80a0556:	460f      	mov	r7, r1
 80a0558:	f005 fd92 	bl	80a6080 <__aeabi_ui2f>
 80a055c:	f005 fa00 	bl	80a5960 <__aeabi_f2d>
 80a0560:	2200      	movs	r2, #0
 80a0562:	4b24      	ldr	r3, [pc, #144]	; (80a05f4 <_ZN4DS184readEPh+0x1b0>)
 80a0564:	f005 fa54 	bl	80a5a10 <__aeabi_dmul>
 80a0568:	f018 0f80 	tst.w	r8, #128	; 0x80
 80a056c:	4602      	mov	r2, r0
 80a056e:	460b      	mov	r3, r1
 80a0570:	d025      	beq.n	80a05be <_ZN4DS184readEPh+0x17a>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a0572:	4630      	mov	r0, r6
 80a0574:	4639      	mov	r1, r7
 80a0576:	f005 f893 	bl	80a56a0 <__aeabi_dsub>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a057a:	f005 fc7b 	bl	80a5e74 <__aeabi_d2f>
 80a057e:	e015      	b.n	80a05ac <_ZN4DS184readEPh+0x168>
  byte cfg = (_data[4] & 0x60);
 80a0580:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80a0584:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
 80a0588:	f012 0260 	ands.w	r2, r2, #96	; 0x60
 80a058c:	d102      	bne.n	80a0594 <_ZN4DS184readEPh+0x150>
 80a058e:	f023 0307 	bic.w	r3, r3, #7
 80a0592:	e02d      	b.n	80a05f0 <_ZN4DS184readEPh+0x1ac>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a0594:	2a20      	cmp	r2, #32
 80a0596:	d00c      	beq.n	80a05b2 <_ZN4DS184readEPh+0x16e>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a0598:	2a40      	cmp	r2, #64	; 0x40
 80a059a:	d00d      	beq.n	80a05b8 <_ZN4DS184readEPh+0x174>
      _celsius = (float)_raw * 0.0625;
 80a059c:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 80a05a0:	f005 fd72 	bl	80a6088 <__aeabi_i2f>
 80a05a4:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a05a8:	f005 fdc2 	bl	80a6130 <__aeabi_fmul>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a05ac:	61e0      	str	r0, [r4, #28]
  switch (_type) {
 80a05ae:	2001      	movs	r0, #1
 80a05b0:	e75c      	b.n	80a046c <_ZN4DS184readEPh+0x28>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a05b2:	f023 0303 	bic.w	r3, r3, #3
 80a05b6:	e01b      	b.n	80a05f0 <_ZN4DS184readEPh+0x1ac>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a05b8:	f023 0301 	bic.w	r3, r3, #1
 80a05bc:	e018      	b.n	80a05f0 <_ZN4DS184readEPh+0x1ac>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a05be:	4632      	mov	r2, r6
 80a05c0:	463b      	mov	r3, r7
 80a05c2:	f005 f86f 	bl	80a56a4 <__adddf3>
 80a05c6:	e7d8      	b.n	80a057a <_ZN4DS184readEPh+0x136>
  switch (_type) {
 80a05c8:	2b03      	cmp	r3, #3
 80a05ca:	d8f0      	bhi.n	80a05ae <_ZN4DS184readEPh+0x16a>
 80a05cc:	2b01      	cmp	r3, #1
 80a05ce:	d8d7      	bhi.n	80a0580 <_ZN4DS184readEPh+0x13c>
 80a05d0:	d1ed      	bne.n	80a05ae <_ZN4DS184readEPh+0x16a>
      _raw = _raw << 3; // 9 bit resolution default
 80a05d2:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a05d6:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
      _raw = _raw << 3; // 9 bit resolution default
 80a05da:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
 80a05dc:	2a10      	cmp	r2, #16
      _raw = _raw << 3; // 9 bit resolution default
 80a05de:	8323      	strh	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a05e0:	d1dc      	bne.n	80a059c <_ZN4DS184readEPh+0x158>
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
 80a05e2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80a05e6:	f023 030f 	bic.w	r3, r3, #15
 80a05ea:	f1c2 020c 	rsb	r2, r2, #12
 80a05ee:	4413      	add	r3, r2
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a05f0:	8323      	strh	r3, [r4, #24]
 80a05f2:	e7d3      	b.n	80a059c <_ZN4DS184readEPh+0x158>
 80a05f4:	3fa00000 	.word	0x3fa00000

080a05f8 <_ZN4DS184readEv>:
bool DS18::read() {
 80a05f8:	b538      	push	{r3, r4, r5, lr}
 80a05fa:	4604      	mov	r4, r0
  init();
 80a05fc:	f7ff ff06 	bl	80a040c <_ZN4DS184initEv>
  if (!_wire.search(_addr)) {
 80a0600:	f100 0520 	add.w	r5, r0, #32
 80a0604:	4629      	mov	r1, r5
 80a0606:	f002 f9ef 	bl	80a29e8 <_ZN7OneWire6searchEPh>
 80a060a:	b938      	cbnz	r0, 80a061c <_ZN4DS184readEv+0x24>
    _searchDone = true;
 80a060c:	2301      	movs	r3, #1
    _wire.reset_search();
 80a060e:	4620      	mov	r0, r4
    _searchDone = true;
 80a0610:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    _wire.reset_search();
 80a0614:	f002 f9e2 	bl	80a29dc <_ZN7OneWire12reset_searchEv>
}
 80a0618:	2000      	movs	r0, #0
 80a061a:	bd38      	pop	{r3, r4, r5, pc}
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
 80a061c:	2107      	movs	r1, #7
 80a061e:	4628      	mov	r0, r5
 80a0620:	f002 fa55 	bl	80a2ace <_ZN7OneWire4crc8EPhh>
 80a0624:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80a0628:	4283      	cmp	r3, r0
 80a062a:	d003      	beq.n	80a0634 <_ZN4DS184readEv+0x3c>
    _crcError = true;
 80a062c:	2301      	movs	r3, #1
 80a062e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a0632:	e7f1      	b.n	80a0618 <_ZN4DS184readEv+0x20>
  return read(_addr);
 80a0634:	4629      	mov	r1, r5
 80a0636:	4620      	mov	r0, r4
}
 80a0638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read(_addr);
 80a063c:	f7ff bf02 	b.w	80a0444 <_ZN4DS184readEPh>

080a0640 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
 80a0640:	69c0      	ldr	r0, [r0, #28]
 80a0642:	4770      	bx	lr

080a0644 <_ZN4DS184addrEPh>:
float DS18::fahrenheit() {
  return _celsius * 1.8 + 32.0;
}

void DS18::addr(uint8_t dest[8]) {
  memcpy(dest, _addr, sizeof(_addr));
 80a0644:	f850 3f20 	ldr.w	r3, [r0, #32]!
 80a0648:	600b      	str	r3, [r1, #0]
 80a064a:	6843      	ldr	r3, [r0, #4]
 80a064c:	604b      	str	r3, [r1, #4]
}
 80a064e:	4770      	bx	lr

080a0650 <_ZN4DS1810searchDoneEv>:
  return _type;
}

bool DS18::searchDone() {
  return _searchDone;
}
 80a0650:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 80a0654:	4770      	bx	lr

080a0656 <_ZN4DS188crcErrorEv>:

bool DS18::crcError() {
  return _crcError;
}
 80a0656:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 80a065a:	4770      	bx	lr

080a065c <_Z19ultra_sonic_measurev>:
Ultrasonic distance measurement (tested29.07.2017)
Returns water level in millimeter
---------------------------------------------------------------------*/
int  ultra_sonic_measure()

{
 80a065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a065e:	4c28      	ldr	r4, [pc, #160]	; (80a0700 <_Z19ultra_sonic_measurev+0xa4>)

  int level = 0;
  int error = 0;
  int k = 0;

  Serial.printlnf ( " ultra sonic distance ");
 80a0660:	f004 fbac 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0664:	4927      	ldr	r1, [pc, #156]	; (80a0704 <_Z19ultra_sonic_measurev+0xa8>)
 80a0666:	f7ff fd24 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a066a:	2603      	movs	r6, #3
 80a066c:	4625      	mov	r5, r4
  for (k=0; k<ULTRA_LOOP; k++)
  {
      time = ultra_sonic_ping();
      dist = uMilli(time);
      hs[k] = dist;
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
 80a066e:	4f26      	ldr	r7, [pc, #152]	; (80a0708 <_Z19ultra_sonic_measurev+0xac>)
      time = ultra_sonic_ping();
 80a0670:	f002 f89e 	bl	80a27b0 <_Z16ultra_sonic_pingv>
      dist = uMilli(time);
 80a0674:	f002 f8b6 	bl	80a27e4 <_Z6uMillim>
      hs[k] = dist;
 80a0678:	6020      	str	r0, [r4, #0]
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
 80a067a:	f004 fb9f 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a067e:	4639      	mov	r1, r7
 80a0680:	f854 2b04 	ldr.w	r2, [r4], #4
 80a0684:	f7ff fd15 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      run_blynk();
 80a0688:	f001 ffd4 	bl	80a2634 <_Z9run_blynkv>
      delay(150);
 80a068c:	2096      	movs	r0, #150	; 0x96
 80a068e:	f003 ff61 	bl	80a4554 <delay>
  for (k=0; k<ULTRA_LOOP; k++)
 80a0692:	3e01      	subs	r6, #1
 80a0694:	d1ec      	bne.n	80a0670 <_Z19ultra_sonic_measurev+0x14>
  }

  avg = 0;
  for (k=0; k<ULTRA_LOOP; k++)
  {
    avg = avg + hs[k];
 80a0696:	e9d5 3200 	ldrd	r3, r2, [r5]
  }
  avg = avg / ULTRA_LOOP;
 80a069a:	2403      	movs	r4, #3
    avg = avg + hs[k];
 80a069c:	4413      	add	r3, r2
 80a069e:	68aa      	ldr	r2, [r5, #8]
 80a06a0:	4413      	add	r3, r2
  avg = avg / ULTRA_LOOP;
 80a06a2:	fbb3 f4f4 	udiv	r4, r3, r4
  for (k=0; k<ULTRA_LOOP; k++)
  {
    error = error + (avg-hs[k]);
  }

  if (avg==0)
 80a06a6:	2b02      	cmp	r3, #2
    error = error + (avg-hs[k]);
 80a06a8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80a06ac:	eba5 0503 	sub.w	r5, r5, r3
  if (avg==0)
 80a06b0:	d807      	bhi.n	80a06c2 <_Z19ultra_sonic_measurev+0x66>
  {
    level = 1000; // prevent that the second pump is switched on
    WriteToDatabase ( "WASSER", "WARNING: Failed to read ultrasonic sensor");  
 80a06b2:	4916      	ldr	r1, [pc, #88]	; (80a070c <_Z19ultra_sonic_measurev+0xb0>)
 80a06b4:	4816      	ldr	r0, [pc, #88]	; (80a0710 <_Z19ultra_sonic_measurev+0xb4>)
 80a06b6:	f7ff fd21 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    return(1000);
 80a06ba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8

  //WriteToDatabase("WASSER","WASSERSTAND : ",level);

  return(level);

 80a06be:	4620      	mov	r0, r4
 80a06c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  Serial.printlnf ( " ultra error : %d ", error);
 80a06c2:	f004 fb7b 	bl	80a4dbc <_Z16_fetch_usbserialv>
  avg = avg - MessFehler;
 80a06c6:	3c0f      	subs	r4, #15
  Serial.printlnf ( " ultra error : %d ", error);
 80a06c8:	462a      	mov	r2, r5
 80a06ca:	4912      	ldr	r1, [pc, #72]	; (80a0714 <_Z19ultra_sonic_measurev+0xb8>)
 80a06cc:	f7ff fcf1 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf ( " ultra distance average : %d mm", avg);
 80a06d0:	f004 fb74 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a06d4:	4622      	mov	r2, r4
 80a06d6:	4910      	ldr	r1, [pc, #64]	; (80a0718 <_Z19ultra_sonic_measurev+0xbc>)
 80a06d8:	f7ff fceb 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  println("distance : ",avg);
 80a06dc:	4621      	mov	r1, r4
  level = TankHoehe - avg;
 80a06de:	f5c4 74b4 	rsb	r4, r4, #360	; 0x168
  println("distance : ",avg);
 80a06e2:	480e      	ldr	r0, [pc, #56]	; (80a071c <_Z19ultra_sonic_measurev+0xc0>)
 80a06e4:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80a06e8:	f001 faa4 	bl	80a1c34 <_Z7printlnPci>
  Serial.printlnf ( " ultra level average : %d mm", level);
 80a06ec:	f004 fb66 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a06f0:	4622      	mov	r2, r4
 80a06f2:	490b      	ldr	r1, [pc, #44]	; (80a0720 <_Z19ultra_sonic_measurev+0xc4>)
 80a06f4:	f7ff fcdd 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  run_blynk();
 80a06f8:	f001 ff9c 	bl	80a2634 <_Z9run_blynkv>
  return(level);
 80a06fc:	e7df      	b.n	80a06be <_Z19ultra_sonic_measurev+0x62>
 80a06fe:	bf00      	nop
 80a0700:	20000130 	.word	0x20000130
 80a0704:	080a7677 	.word	0x080a7677
 80a0708:	080a768e 	.word	0x080a768e
 80a070c:	080a76a6 	.word	0x080a76a6
 80a0710:	080a76d0 	.word	0x080a76d0
 80a0714:	080a76d7 	.word	0x080a76d7
 80a0718:	080a76ea 	.word	0x080a76ea
 80a071c:	080a770a 	.word	0x080a770a
 80a0720:	080a7716 	.word	0x080a7716

080a0724 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0724:	b40e      	push	{r1, r2, r3}
 80a0726:	b503      	push	{r0, r1, lr}
 80a0728:	ab03      	add	r3, sp, #12
 80a072a:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(false, format, args);
 80a072e:	2100      	movs	r1, #0
        va_start(args, format);
 80a0730:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a0732:	f003 fdbb 	bl	80a42ac <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 80a0736:	b002      	add	sp, #8
 80a0738:	f85d eb04 	ldr.w	lr, [sp], #4
 80a073c:	b003      	add	sp, #12
 80a073e:	4770      	bx	lr

080a0740 <_Z6get_IDv>:

}


uint8_t get_ID()
{
 80a0740:	b507      	push	{r0, r1, r2, lr}
  if (sensor.crcError()) {
 80a0742:	480a      	ldr	r0, [pc, #40]	; (80a076c <_Z6get_IDv+0x2c>)
 80a0744:	f7ff ff87 	bl	80a0656 <_ZN4DS188crcErrorEv>
 80a0748:	b140      	cbz	r0, 80a075c <_Z6get_IDv+0x1c>
    Serial.print(" CRC Error ");
 80a074a:	f004 fb37 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a074e:	4908      	ldr	r1, [pc, #32]	; (80a0770 <_Z6get_IDv+0x30>)
 80a0750:	f003 fd72 	bl	80a4238 <_ZN5Print5printEPKc>
 80a0754:	2000      	movs	r0, #0
  uint8_t id;
  sensor.addr(addr);
  id = addr[7];
  //Serial.printf(" ID=%02X",id);
  return(id);
}
 80a0756:	b003      	add	sp, #12
 80a0758:	f85d fb04 	ldr.w	pc, [sp], #4
  sensor.addr(addr);
 80a075c:	4803      	ldr	r0, [pc, #12]	; (80a076c <_Z6get_IDv+0x2c>)
 80a075e:	4669      	mov	r1, sp
 80a0760:	f7ff ff70 	bl	80a0644 <_ZN4DS184addrEPh>
  id = addr[7];
 80a0764:	f89d 0007 	ldrb.w	r0, [sp, #7]
  return(id);
 80a0768:	e7f5      	b.n	80a0756 <_Z6get_IDv+0x16>
 80a076a:	bf00      	nop
 80a076c:	2000013c 	.word	0x2000013c
 80a0770:	080a7733 	.word	0x080a7733

080a0774 <_Z15get_Temperaturev>:
{
 80a0774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
Serial.println(" Get Temperature ");
 80a0778:	f004 fb20 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a077c:	4923      	ldr	r1, [pc, #140]	; (80a080c <_Z15get_Temperaturev+0x98>)
 80a077e:	f003 fd6e 	bl	80a425e <_ZN5Print7printlnEPKc>
  int k = 0;
 80a0782:	2600      	movs	r6, #0
    if (sensor.read()) {
 80a0784:	4d22      	ldr	r5, [pc, #136]	; (80a0810 <_Z15get_Temperaturev+0x9c>)
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
 80a0786:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80a081c <_Z15get_Temperaturev+0xa8>
      println("sensor id",id);
 80a078a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80a0820 <_Z15get_Temperaturev+0xac>
    if (sensor.read()) {
 80a078e:	4628      	mov	r0, r5
 80a0790:	f7ff ff32 	bl	80a05f8 <_ZN4DS184readEv>
 80a0794:	b320      	cbz	r0, 80a07e0 <_Z15get_Temperaturev+0x6c>
      id = get_ID();
 80a0796:	f7ff ffd3 	bl	80a0740 <_Z6get_IDv>
 80a079a:	4604      	mov	r4, r0
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
 80a079c:	f004 fb0e 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a07a0:	4607      	mov	r7, r0
 80a07a2:	4628      	mov	r0, r5
 80a07a4:	f7ff ff4c 	bl	80a0640 <_ZN4DS187celsiusEv>
 80a07a8:	f005 f8da 	bl	80a5960 <__aeabi_f2d>
 80a07ac:	4633      	mov	r3, r6
 80a07ae:	4622      	mov	r2, r4
 80a07b0:	e9cd 0100 	strd	r0, r1, [sp]
 80a07b4:	4641      	mov	r1, r8
 80a07b6:	4638      	mov	r0, r7
 80a07b8:	f7ff ffb4 	bl	80a0724 <_ZN5Print6printfEPKcz>
      println("sensor id",id);
 80a07bc:	4621      	mov	r1, r4
 80a07be:	4648      	mov	r0, r9
 80a07c0:	f001 fa38 	bl	80a1c34 <_Z7printlnPci>
      delay(250);
 80a07c4:	20fa      	movs	r0, #250	; 0xfa
 80a07c6:	f003 fec5 	bl	80a4554 <delay>
      if(id == 37) {
 80a07ca:	2c25      	cmp	r4, #37	; 0x25
      k++;
 80a07cc:	f106 0601 	add.w	r6, r6, #1
      if(id == 37) {
 80a07d0:	d113      	bne.n	80a07fa <_Z15get_Temperaturev+0x86>
        temp_in = sensor.celsius();
 80a07d2:	4628      	mov	r0, r5
 80a07d4:	f7ff ff34 	bl	80a0640 <_ZN4DS187celsiusEv>
 80a07d8:	f005 fe70 	bl	80a64bc <__aeabi_f2iz>
 80a07dc:	4b0d      	ldr	r3, [pc, #52]	; (80a0814 <_Z15get_Temperaturev+0xa0>)
        temp_out = sensor.celsius();
 80a07de:	6018      	str	r0, [r3, #0]
  } while(sensor.searchDone() == false);
 80a07e0:	4628      	mov	r0, r5
 80a07e2:	f7ff ff35 	bl	80a0650 <_ZN4DS1810searchDoneEv>
 80a07e6:	2800      	cmp	r0, #0
 80a07e8:	d0d1      	beq.n	80a078e <_Z15get_Temperaturev+0x1a>
return(sensor.celsius());
 80a07ea:	4809      	ldr	r0, [pc, #36]	; (80a0810 <_Z15get_Temperaturev+0x9c>)
 80a07ec:	f7ff ff28 	bl	80a0640 <_ZN4DS187celsiusEv>
 80a07f0:	f005 fe64 	bl	80a64bc <__aeabi_f2iz>
}
 80a07f4:	b003      	add	sp, #12
 80a07f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(id == 151){
 80a07fa:	2c97      	cmp	r4, #151	; 0x97
 80a07fc:	d1f0      	bne.n	80a07e0 <_Z15get_Temperaturev+0x6c>
        temp_out = sensor.celsius();
 80a07fe:	4628      	mov	r0, r5
 80a0800:	f7ff ff1e 	bl	80a0640 <_ZN4DS187celsiusEv>
 80a0804:	f005 fe5a 	bl	80a64bc <__aeabi_f2iz>
 80a0808:	4b03      	ldr	r3, [pc, #12]	; (80a0818 <_Z15get_Temperaturev+0xa4>)
 80a080a:	e7e8      	b.n	80a07de <_Z15get_Temperaturev+0x6a>
 80a080c:	080a773f 	.word	0x080a773f
 80a0810:	2000013c 	.word	0x2000013c
 80a0814:	20000328 	.word	0x20000328
 80a0818:	2000032c 	.word	0x2000032c
 80a081c:	080a7751 	.word	0x080a7751
 80a0820:	080a777c 	.word	0x080a777c

080a0824 <_GLOBAL__sub_I_sensor>:
DS18 sensor(SENSOR_PIN);  // create sensor instance
 80a0824:	2200      	movs	r2, #0
 80a0826:	2105      	movs	r1, #5
 80a0828:	4801      	ldr	r0, [pc, #4]	; (80a0830 <_GLOBAL__sub_I_sensor+0xc>)
 80a082a:	f7ff bdfd 	b.w	80a0428 <_ZN4DS18C1Etb>
 80a082e:	bf00      	nop
 80a0830:	2000013c 	.word	0x2000013c

080a0834 <_ZN14WidgetTerminal5writeEh>:
        , mOutQty(0)
    {}

    //virtual ~WidgetTerminal() {}

    virtual size_t write(uint8_t byte) {
 80a0834:	b510      	push	{r4, lr}
        mOutBuf[mOutQty++] = byte;
 80a0836:	f890 4049 	ldrb.w	r4, [r0, #73]	; 0x49
 80a083a:	1c62      	adds	r2, r4, #1
 80a083c:	b2d2      	uxtb	r2, r2
 80a083e:	4404      	add	r4, r0
        if (mOutQty >= sizeof(mOutBuf)) {
 80a0840:	2a3f      	cmp	r2, #63	; 0x3f
        mOutBuf[mOutQty++] = byte;
 80a0842:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 80a0846:	7261      	strb	r1, [r4, #9]
        if (mOutQty >= sizeof(mOutBuf)) {
 80a0848:	d902      	bls.n	80a0850 <_ZN14WidgetTerminal5writeEh+0x1c>
            flush();
 80a084a:	6803      	ldr	r3, [r0, #0]
 80a084c:	691b      	ldr	r3, [r3, #16]
 80a084e:	4798      	blx	r3
        }
        return 1;
    }
 80a0850:	2001      	movs	r0, #1
 80a0852:	bd10      	pop	{r4, pc}

080a0854 <_ZN14WidgetTerminal5writeEPKvj>:
#ifdef BLYNK_USE_PRINT_CLASS

    using Print::write;

    virtual size_t write(const void* buff, size_t len) {
        return write((char*)buff, len);
 80a0854:	6803      	ldr	r3, [r0, #0]
 80a0856:	695b      	ldr	r3, [r3, #20]
 80a0858:	4718      	bx	r3

080a085a <_ZN14WidgetTerminalD1Ev>:
class WidgetTerminal
 80a085a:	4770      	bx	lr

080a085c <_ZN14WidgetTerminalD0Ev>:
 80a085c:	b510      	push	{r4, lr}
 80a085e:	4604      	mov	r4, r0
 80a0860:	214c      	movs	r1, #76	; 0x4c
 80a0862:	f004 fdfe 	bl	80a5462 <_ZdlPvj>
 80a0866:	4620      	mov	r0, r4
 80a0868:	bd10      	pop	{r4, pc}

080a086a <_ZN10BlynkParam3addEPKc.part.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
 80a086a:	b570      	push	{r4, r5, r6, lr}
 80a086c:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a086e:	4608      	mov	r0, r1
void BlynkParam::add(const char* str)
 80a0870:	460e      	mov	r6, r1
    add(str, strlen(str)+1);
 80a0872:	f006 f954 	bl	80a6b1e <strlen>
    if (len + l > buff_size)
 80a0876:	6863      	ldr	r3, [r4, #4]
 80a0878:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
 80a087a:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
 80a087c:	18e9      	adds	r1, r5, r3
 80a087e:	4291      	cmp	r1, r2
 80a0880:	d808      	bhi.n	80a0894 <_ZN10BlynkParam3addEPKc.part.0+0x2a>
    memcpy(buff+len, b, l);
 80a0882:	6820      	ldr	r0, [r4, #0]
 80a0884:	462a      	mov	r2, r5
 80a0886:	4631      	mov	r1, r6
 80a0888:	4418      	add	r0, r3
 80a088a:	f006 f8e1 	bl	80a6a50 <memcpy>
    len += l;
 80a088e:	6860      	ldr	r0, [r4, #4]
 80a0890:	4428      	add	r0, r5
 80a0892:	6060      	str	r0, [r4, #4]
}
 80a0894:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0898 <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0>:
    template <typename T> const T &put( int idx, const T &t )
 80a0898:	b510      	push	{r4, lr}
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a089a:	4c04      	ldr	r4, [pc, #16]	; (80a08ac <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0+0x14>)
 80a089c:	2214      	movs	r2, #20
 80a089e:	4621      	mov	r1, r4
 80a08a0:	2000      	movs	r0, #0
 80a08a2:	f002 fe0b 	bl	80a34bc <HAL_EEPROM_Put>
    }
 80a08a6:	4620      	mov	r0, r4
 80a08a8:	bd10      	pop	{r4, pc}
 80a08aa:	bf00      	nop
 80a08ac:	200002d8 	.word	0x200002d8

080a08b0 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0>:

inline bool CloudDisconnectOptions::isTimeoutSet() const {
    return (flags_ & OptionFlag::TIMEOUT);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
 80a08b0:	b513      	push	{r0, r1, r4, lr}
 80a08b2:	4604      	mov	r4, r0
 80a08b4:	4b05      	ldr	r3, [pc, #20]	; (80a08cc <_ZN10CloudClass7publishEPKc.isra.0.constprop.0+0x1c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a08b6:	2200      	movs	r2, #0
 80a08b8:	781b      	ldrb	r3, [r3, #0]
 80a08ba:	4905      	ldr	r1, [pc, #20]	; (80a08d0 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0+0x20>)
 80a08bc:	f88d 3000 	strb.w	r3, [sp]
 80a08c0:	233c      	movs	r3, #60	; 0x3c
 80a08c2:	f004 f845 	bl	80a4950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	b002      	add	sp, #8
 80a08ca:	bd10      	pop	{r4, pc}
 80a08cc:	200001dc 	.word	0x200001dc
 80a08d0:	080a7662 	.word	0x080a7662

080a08d4 <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
 80a08d4:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
 80a08d6:	f004 fa71 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a08da:	215b      	movs	r1, #91	; 0x5b
 80a08dc:	f003 fcb0 	bl	80a4240 <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
 80a08e0:	f004 fa6c 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a08e4:	4604      	mov	r4, r0
 80a08e6:	f002 fd47 	bl	80a3378 <_Z11BlynkMillisv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a08ea:	220a      	movs	r2, #10
 80a08ec:	4601      	mov	r1, r0
 80a08ee:	4620      	mov	r0, r4
 80a08f0:	f003 fcbf 	bl	80a4272 <_ZN5Print11printNumberEmh>
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a08f4:	f004 fa62 	bl	80a4dbc <_Z16_fetch_usbserialv>
        }
 80a08f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a08fc:	4901      	ldr	r1, [pc, #4]	; (80a0904 <_ZL14BLYNK_LOG_TIMEv+0x30>)
 80a08fe:	f003 bc9b 	b.w	80a4238 <_ZN5Print5printEPKc>
 80a0902:	bf00      	nop
 80a0904:	080a7786 	.word	0x080a7786

080a0908 <_ZN10CloudClass7processEv>:
    static void process(void) {
 80a0908:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a090a:	f002 fdbf 	bl	80a348c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a090e:	4b03      	ldr	r3, [pc, #12]	; (80a091c <_ZN10CloudClass7processEv+0x14>)
 80a0910:	6018      	str	r0, [r3, #0]
    }
 80a0912:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a0916:	f002 bfc1 	b.w	80a389c <spark_process>
 80a091a:	bf00      	nop
 80a091c:	200004b0 	.word	0x200004b0

080a0920 <_ZNK10BlynkParam8iterator5asIntEv>:
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a0920:	4603      	mov	r3, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0922:	6800      	ldr	r0, [r0, #0]
 80a0924:	b120      	cbz	r0, 80a0930 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
 80a0926:	685b      	ldr	r3, [r3, #4]
 80a0928:	4298      	cmp	r0, r3
 80a092a:	d201      	bcs.n	80a0930 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a092c:	f005 bf84 	b.w	80a6838 <atoi>
 80a0930:	2000      	movs	r0, #0
 80a0932:	4770      	bx	lr

080a0934 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
 80a0934:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0936:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
 80a0938:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a093a:	b145      	cbz	r5, 80a094e <_ZN10BlynkParam8iteratorppEv+0x1a>
 80a093c:	6843      	ldr	r3, [r0, #4]
 80a093e:	429d      	cmp	r5, r3
 80a0940:	d205      	bcs.n	80a094e <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
 80a0942:	4628      	mov	r0, r5
 80a0944:	f006 f8eb 	bl	80a6b1e <strlen>
 80a0948:	3001      	adds	r0, #1
 80a094a:	4405      	add	r5, r0
 80a094c:	6025      	str	r5, [r4, #0]
        }
 80a094e:	4620      	mov	r0, r4
 80a0950:	bd38      	pop	{r3, r4, r5, pc}

080a0952 <_ZN10BlynkParam3addEPKc>:
{
 80a0952:	4603      	mov	r3, r0
    if (str == NULL) {
 80a0954:	460a      	mov	r2, r1
{
 80a0956:	b410      	push	{r4}
    if (str == NULL) {
 80a0958:	b929      	cbnz	r1, 80a0966 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
 80a095a:	c803      	ldmia	r0, {r0, r1}
 80a095c:	1c4c      	adds	r4, r1, #1
 80a095e:	605c      	str	r4, [r3, #4]
 80a0960:	5442      	strb	r2, [r0, r1]
}
 80a0962:	bc10      	pop	{r4}
 80a0964:	4770      	bx	lr
 80a0966:	bc10      	pop	{r4}
 80a0968:	f7ff bf7f 	b.w	80a086a <_ZN10BlynkParam3addEPKc.part.0>

080a096c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
 80a096c:	b538      	push	{r3, r4, r5, lr}
 80a096e:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a0970:	6825      	ldr	r5, [r4, #0]
    {
 80a0972:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a0974:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80a0978:	4a04      	ldr	r2, [pc, #16]	; (80a098c <_ZN10BlynkParam3addEi+0x20>)
 80a097a:	1a09      	subs	r1, r1, r0
 80a097c:	4428      	add	r0, r5
 80a097e:	f002 ffed 	bl	80a395c <snprintf>
 80a0982:	6863      	ldr	r3, [r4, #4]
 80a0984:	3001      	adds	r0, #1
 80a0986:	4403      	add	r3, r0
 80a0988:	6063      	str	r3, [r4, #4]
    }
 80a098a:	bd38      	pop	{r3, r4, r5, pc}
 80a098c:	080a7789 	.word	0x080a7789

080a0990 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
 80a0990:	b538      	push	{r3, r4, r5, lr}
 80a0992:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a0994:	6825      	ldr	r5, [r4, #0]
    {
 80a0996:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a0998:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80a099c:	4a04      	ldr	r2, [pc, #16]	; (80a09b0 <_ZN10BlynkParam3addEl+0x20>)
 80a099e:	1a09      	subs	r1, r1, r0
 80a09a0:	4428      	add	r0, r5
 80a09a2:	f002 ffdb 	bl	80a395c <snprintf>
 80a09a6:	6863      	ldr	r3, [r4, #4]
 80a09a8:	3001      	adds	r0, #1
 80a09aa:	4403      	add	r3, r0
 80a09ac:	6063      	str	r3, [r4, #4]
    }
 80a09ae:	bd38      	pop	{r3, r4, r5, pc}
 80a09b0:	080a778c 	.word	0x080a778c

080a09b4 <_Z7getTimev>:

/*
* Return time as "minutes of day" = 60*hour + minutes
*/
int getTime()
{
 80a09b4:	b510      	push	{r4, lr}
  return (Time.hour() * 60 + Time.minute());
 80a09b6:	f003 fd7f 	bl	80a44b8 <_ZN9TimeClass4hourEv>
 80a09ba:	4604      	mov	r4, r0
 80a09bc:	f003 fd88 	bl	80a44d0 <_ZN9TimeClass6minuteEv>
}
 80a09c0:	233c      	movs	r3, #60	; 0x3c
 80a09c2:	fb03 0004 	mla	r0, r3, r4, r0
 80a09c6:	bd10      	pop	{r4, pc}

080a09c8 <_Z12getSleepTimei>:
  min = tnow - (hour * 60);
  Serial.printlnf(" (%02d:%02d)", hour, min);
}

int getSleepTime(int target)
{
 80a09c8:	b510      	push	{r4, lr}
 80a09ca:	4604      	mov	r4, r0
  target = target - Time.minute();
 80a09cc:	f003 fd80 	bl	80a44d0 <_ZN9TimeClass6minuteEv>
  if (target < 0)
 80a09d0:	1a24      	subs	r4, r4, r0
    target = target + 60;
 80a09d2:	bf48      	it	mi
 80a09d4:	343c      	addmi	r4, #60	; 0x3c
  Serial.printlnf(" proposed sleep duration: %d minutes", target);
 80a09d6:	f004 f9f1 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a09da:	4622      	mov	r2, r4
 80a09dc:	4902      	ldr	r1, [pc, #8]	; (80a09e8 <_Z12getSleepTimei+0x20>)
 80a09de:	f7ff fb68 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  return (target);
}
 80a09e2:	4620      	mov	r0, r4
 80a09e4:	bd10      	pop	{r4, pc}
 80a09e6:	bf00      	nop
 80a09e8:	080a7790 	.word	0x080a7790

080a09ec <_Z15readAdcChannelsv>:
  val = val * 43 / 40960;
  return (val);
}

void readAdcChannels()
{
 80a09ec:	b538      	push	{r3, r4, r5, lr}
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a09ee:	200a      	movs	r0, #10
 80a09f0:	f004 fc85 	bl	80a52fe <analogRead>
  val = val * 43 / 40960;
 80a09f4:	f44f 4520 	mov.w	r5, #40960	; 0xa000
 80a09f8:	4c0b      	ldr	r4, [pc, #44]	; (80a0a28 <_Z15readAdcChannelsv+0x3c>)
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a09fa:	4b0c      	ldr	r3, [pc, #48]	; (80a0a2c <_Z15readAdcChannelsv+0x40>)
  val = val * 43 / 40960;
 80a09fc:	4360      	muls	r0, r4
 80a09fe:	fbb0 f0f5 	udiv	r0, r0, r5
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a0a02:	6018      	str	r0, [r3, #0]
  AiPumpeReserve = convertAdcValue(analogRead(A2));
 80a0a04:	200c      	movs	r0, #12
 80a0a06:	f004 fc7a 	bl	80a52fe <analogRead>
  val = val * 43 / 40960;
 80a0a0a:	4360      	muls	r0, r4
 80a0a0c:	fbb0 f0f5 	udiv	r0, r0, r5
  AiPumpeReserve = convertAdcValue(analogRead(A2));
 80a0a10:	4b07      	ldr	r3, [pc, #28]	; (80a0a30 <_Z15readAdcChannelsv+0x44>)
 80a0a12:	6018      	str	r0, [r3, #0]
  Ai12V = convertAdcValue(analogRead(A1));
 80a0a14:	200b      	movs	r0, #11
 80a0a16:	f004 fc72 	bl	80a52fe <analogRead>
  val = val * 43 / 40960;
 80a0a1a:	4344      	muls	r4, r0
 80a0a1c:	fbb4 f4f5 	udiv	r4, r4, r5
  Ai12V = convertAdcValue(analogRead(A1));
 80a0a20:	4b04      	ldr	r3, [pc, #16]	; (80a0a34 <_Z15readAdcChannelsv+0x48>)
 80a0a22:	601c      	str	r4, [r3, #0]
}
 80a0a24:	bd38      	pop	{r3, r4, r5, pc}
 80a0a26:	bf00      	nop
 80a0a28:	00022a4c 	.word	0x00022a4c
 80a0a2c:	20000174 	.word	0x20000174
 80a0a30:	20000178 	.word	0x20000178
 80a0a34:	20000170 	.word	0x20000170

080a0a38 <_Z6hwInitv>:

/*---------------------------------------------------------------------
Hardware Initialisation
---------------------------------------------------------------------*/
void hwInit()
{
 80a0a38:	b508      	push	{r3, lr}
  conrad_rsl_init(); // 433 MHz Sender abschalten
 80a0a3a:	f002 f863 	bl	80a2b04 <_Z15conrad_rsl_initv>

  ultra_sonic_setup();
 80a0a3e:	f001 fea9 	bl	80a2794 <_Z17ultra_sonic_setupv>

  pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a0a42:	2101      	movs	r1, #1
 80a0a44:	4608      	mov	r0, r1
 80a0a46:	f004 fc1d 	bl	80a5284 <pinMode>
  pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a0a4a:	2101      	movs	r1, #1
 80a0a4c:	2002      	movs	r0, #2
 80a0a4e:	f004 fc19 	bl	80a5284 <pinMode>

  digitalWrite(DO_PUMPE_RESERVE, 0);
 80a0a52:	2100      	movs	r1, #0
 80a0a54:	2002      	movs	r0, #2
 80a0a56:	f004 fc26 	bl	80a52a6 <digitalWrite>
  digitalWrite(DO_PUMPE_MAIN, 0);
 80a0a5a:	2100      	movs	r1, #0
 80a0a5c:	2001      	movs	r0, #1
 80a0a5e:	f004 fc22 	bl	80a52a6 <digitalWrite>

  st_funk_pumpe = switch_pumpe_main(OFF, 0);
 80a0a62:	2100      	movs	r1, #0
 80a0a64:	4608      	mov	r0, r1
 80a0a66:	f002 fa33 	bl	80a2ed0 <_Z17switch_pumpe_mainii>
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0a6a:	2100      	movs	r1, #0
  st_funk_pumpe = switch_pumpe_main(OFF, 0);
 80a0a6c:	4b0e      	ldr	r3, [pc, #56]	; (80a0aa8 <_Z6hwInitv+0x70>)
 80a0a6e:	6018      	str	r0, [r3, #0]
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0a70:	4608      	mov	r0, r1
 80a0a72:	f002 fadf 	bl	80a3034 <_Z20switch_pumpe_reserveii>
 80a0a76:	4b0d      	ldr	r3, [pc, #52]	; (80a0aac <_Z6hwInitv+0x74>)

  pinMode(BLYNK_LED, OUTPUT);
 80a0a78:	2101      	movs	r1, #1
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0a7a:	6018      	str	r0, [r3, #0]
  pinMode(BLYNK_LED, OUTPUT);
 80a0a7c:	2007      	movs	r0, #7
 80a0a7e:	f004 fc01 	bl	80a5284 <pinMode>
  pinMode(DONT_SLEEP_PIN, INPUT);
 80a0a82:	2100      	movs	r1, #0
 80a0a84:	2006      	movs	r0, #6
 80a0a86:	f004 fbfd 	bl	80a5284 <pinMode>

  EEPROM.get(0, control);
 80a0a8a:	f004 fc77 	bl	80a537c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a0a8e:	2214      	movs	r2, #20
 80a0a90:	2000      	movs	r0, #0
 80a0a92:	4907      	ldr	r1, [pc, #28]	; (80a0ab0 <_Z6hwInitv+0x78>)
 80a0a94:	f002 fd0a 	bl	80a34ac <HAL_EEPROM_Get>

  ts_giessen = 7 * 60 + 1; // zu dieser Zeit wird die Wasserpumpe eingeschaltet
 80a0a98:	f240 12a5 	movw	r2, #421	; 0x1a5
 80a0a9c:	4b05      	ldr	r3, [pc, #20]	; (80a0ab4 <_Z6hwInitv+0x7c>)
 80a0a9e:	601a      	str	r2, [r3, #0]

  done_giessen = 0;
 80a0aa0:	2200      	movs	r2, #0
 80a0aa2:	4b05      	ldr	r3, [pc, #20]	; (80a0ab8 <_Z6hwInitv+0x80>)
 80a0aa4:	601a      	str	r2, [r3, #0]
}
 80a0aa6:	bd08      	pop	{r3, pc}
 80a0aa8:	2000031c 	.word	0x2000031c
 80a0aac:	20000324 	.word	0x20000324
 80a0ab0:	200002d8 	.word	0x200002d8
 80a0ab4:	200003bc 	.word	0x200003bc
 80a0ab8:	200002ec 	.word	0x200002ec

080a0abc <_Z18reportDontSleepPinv>:
/*---------------------------------------------------------------------
report to database if DontSleepPin is set
---------------------------------------------------------------------*/
int reportDontSleepPin()

{
 80a0abc:	b510      	push	{r4, lr}
  if (digitalRead(DONT_SLEEP_PIN) == HIGH)
 80a0abe:	2006      	movs	r0, #6
 80a0ac0:	f004 fc0a 	bl	80a52d8 <digitalRead>
 80a0ac4:	2801      	cmp	r0, #1
 80a0ac6:	4c08      	ldr	r4, [pc, #32]	; (80a0ae8 <_Z18reportDontSleepPinv+0x2c>)
 80a0ac8:	d104      	bne.n	80a0ad4 <_Z18reportDontSleepPinv+0x18>
  {
    dontSleepHW = 1;
 80a0aca:	6020      	str	r0, [r4, #0]
    WriteToDatabase("CONTROL", "SLEEP disabled by HW pin ");
 80a0acc:	4907      	ldr	r1, [pc, #28]	; (80a0aec <_Z18reportDontSleepPinv+0x30>)
 80a0ace:	4808      	ldr	r0, [pc, #32]	; (80a0af0 <_Z18reportDontSleepPinv+0x34>)
 80a0ad0:	f7ff fb14 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  }

  if (control.dontSleepSW == 1)
 80a0ad4:	4b07      	ldr	r3, [pc, #28]	; (80a0af4 <_Z18reportDontSleepPinv+0x38>)
 80a0ad6:	685b      	ldr	r3, [r3, #4]
 80a0ad8:	2b01      	cmp	r3, #1
 80a0ada:	d103      	bne.n	80a0ae4 <_Z18reportDontSleepPinv+0x28>
  {
    WriteToDatabase("CONTROL", "SLEEP disabled by SW ");
 80a0adc:	4906      	ldr	r1, [pc, #24]	; (80a0af8 <_Z18reportDontSleepPinv+0x3c>)
 80a0ade:	4804      	ldr	r0, [pc, #16]	; (80a0af0 <_Z18reportDontSleepPinv+0x34>)
 80a0ae0:	f7ff fb0c 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  }
  return (dontSleepHW);
}
 80a0ae4:	6820      	ldr	r0, [r4, #0]
 80a0ae6:	bd10      	pop	{r4, pc}
 80a0ae8:	200002f0 	.word	0x200002f0
 80a0aec:	080a77b5 	.word	0x080a77b5
 80a0af0:	080a77cf 	.word	0x080a77cf
 80a0af4:	200002d8 	.word	0x200002d8
 80a0af8:	080a77d7 	.word	0x080a77d7

080a0afc <_Z17checkDontSleepPinv>:

/*---------------------------------------------------------------------
check if DontSleepPin is set
---------------------------------------------------------------------*/
int checkDontSleepPin()
{
 80a0afc:	b510      	push	{r4, lr}
  if (digitalRead(DONT_SLEEP_PIN) == HIGH)
 80a0afe:	2006      	movs	r0, #6
 80a0b00:	f004 fbea 	bl	80a52d8 <digitalRead>
 80a0b04:	1e43      	subs	r3, r0, #1
 80a0b06:	4c06      	ldr	r4, [pc, #24]	; (80a0b20 <_Z17checkDontSleepPinv+0x24>)
 80a0b08:	4258      	negs	r0, r3
 80a0b0a:	4158      	adcs	r0, r3
 80a0b0c:	6020      	str	r0, [r4, #0]
  else
  {
    dontSleepHW = 0;
  }

  Serial.printlnf(" dontSleep pin : %d ", dontSleepHW);
 80a0b0e:	f004 f955 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0b12:	6822      	ldr	r2, [r4, #0]
 80a0b14:	4903      	ldr	r1, [pc, #12]	; (80a0b24 <_Z17checkDontSleepPinv+0x28>)
 80a0b16:	f7ff facc 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  return (dontSleepHW);
}
 80a0b1a:	6820      	ldr	r0, [r4, #0]
 80a0b1c:	bd10      	pop	{r4, pc}
 80a0b1e:	bf00      	nop
 80a0b20:	200002f0 	.word	0x200002f0
 80a0b24:	080a77ed 	.word	0x080a77ed

080a0b28 <_Z9timeStampv>:

/*---------------------------------------------------------------------
print timestamp to serial port
---------------------------------------------------------------------*/
void timeStamp()
{
 80a0b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0b2c:	b085      	sub	sp, #20
  sprintf(timebuffer, " %.2d-%.2d-%d %.2d:%.2d:%.2d ",
 80a0b2e:	f003 fce7 	bl	80a4500 <_ZN9TimeClass3dayEv>
 80a0b32:	4604      	mov	r4, r0
 80a0b34:	f003 fcf0 	bl	80a4518 <_ZN9TimeClass5monthEv>
 80a0b38:	4605      	mov	r5, r0
 80a0b3a:	f003 fcf5 	bl	80a4528 <_ZN9TimeClass4yearEv>
 80a0b3e:	4606      	mov	r6, r0
 80a0b40:	f003 fcba 	bl	80a44b8 <_ZN9TimeClass4hourEv>
 80a0b44:	4607      	mov	r7, r0
 80a0b46:	f003 fcc3 	bl	80a44d0 <_ZN9TimeClass6minuteEv>
 80a0b4a:	4680      	mov	r8, r0
 80a0b4c:	f003 fccc 	bl	80a44e8 <_ZN9TimeClass6secondEv>
 80a0b50:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80a0b7c <_Z9timeStampv+0x54>
 80a0b54:	462b      	mov	r3, r5
 80a0b56:	4622      	mov	r2, r4
 80a0b58:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80a0b5c:	4906      	ldr	r1, [pc, #24]	; (80a0b78 <_Z9timeStampv+0x50>)
 80a0b5e:	4648      	mov	r0, r9
 80a0b60:	e9cd 6700 	strd	r6, r7, [sp]
 80a0b64:	f002 feea 	bl	80a393c <sprintf>
          Time.year(),
          Time.hour(),
          Time.minute(),
          Time.second());

  Serial.print(timebuffer);
 80a0b68:	f004 f928 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0b6c:	4649      	mov	r1, r9
/*   if (termEnabled == 1)
  {
    terminal.print(timebuffer); // Ausgabe an BLYNK APP terminal
    terminal.flush();
  }  */
}
 80a0b6e:	b005      	add	sp, #20
 80a0b70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Serial.print(timebuffer);
 80a0b74:	f003 bb60 	b.w	80a4238 <_ZN5Print5printEPKc>
 80a0b78:	080a7802 	.word	0x080a7802
 80a0b7c:	20000384 	.word	0x20000384

080a0b80 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
 80a0b80:	b510      	push	{r4, lr}
 80a0b82:	4604      	mov	r4, r0
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0b84:	4b03      	ldr	r3, [pc, #12]	; (80a0b94 <_ZN22BlynkTransportParticleD1Ev+0x14>)
 80a0b86:	f840 3b18 	str.w	r3, [r0], #24
      ~__shared_ptr() = default;
 80a0b8a:	f7ff faa0 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b8e:	4620      	mov	r0, r4
 80a0b90:	bd10      	pop	{r4, pc}
 80a0b92:	bf00      	nop
 80a0b94:	080a8b68 	.word	0x080a8b68

080a0b98 <_ZN5Print7printlnItLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 80a0b98:	b538      	push	{r3, r4, r5, lr}
 80a0b9a:	4605      	mov	r5, r0
    if (base == 0) {
 80a0b9c:	b94a      	cbnz	r2, 80a0bb2 <_ZN5Print7printlnItLi0EEEjT_i+0x1a>
        return write(n);
 80a0b9e:	6802      	ldr	r2, [r0, #0]
 80a0ba0:	b2c9      	uxtb	r1, r1
 80a0ba2:	6892      	ldr	r2, [r2, #8]
 80a0ba4:	4790      	blx	r2
        return printNumber(val, base) + t;
 80a0ba6:	4604      	mov	r4, r0
        n += println();
 80a0ba8:	4628      	mov	r0, r5
 80a0baa:	f003 fb4c 	bl	80a4246 <_ZN5Print7printlnEv>
    }
 80a0bae:	4420      	add	r0, r4
 80a0bb0:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 80a0bb2:	b2d2      	uxtb	r2, r2
 80a0bb4:	f003 fb5d 	bl	80a4272 <_ZN5Print11printNumberEmh>
 80a0bb8:	e7f5      	b.n	80a0ba6 <_ZN5Print7printlnItLi0EEEjT_i+0xe>
	...

080a0bbc <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
 80a0bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
 80a0bbe:	6b47      	ldr	r7, [r0, #52]	; 0x34
    bool connect() {
 80a0bc0:	4604      	mov	r4, r0
 80a0bc2:	b087      	sub	sp, #28
        if (domain) {
 80a0bc4:	b30f      	cbz	r7, 80a0c0a <_ZN22BlynkTransportParticle7connectEv+0x4e>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
 80a0bc6:	f7ff fe85 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a0bca:	f004 f8f7 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0bce:	4931      	ldr	r1, [pc, #196]	; (80a0c94 <_ZN22BlynkTransportParticle7connectEv+0xd8>)
 80a0bd0:	f003 fb32 	bl	80a4238 <_ZN5Print5printEPKc>
 80a0bd4:	f004 f8f2 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a0bda:	f003 fb2d 	bl	80a4238 <_ZN5Print5printEPKc>
 80a0bde:	f004 f8ed 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0be2:	213a      	movs	r1, #58	; 0x3a
 80a0be4:	f003 fb2c 	bl	80a4240 <_ZN5Print5printEc>
 80a0be8:	f004 f8e8 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0bec:	220a      	movs	r2, #10
 80a0bee:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80a0bf0:	f7ff ffd2 	bl	80a0b98 <_ZN5Print7printlnItLi0EEEjT_i>
            return (1 == client.connect(domain, port));
 80a0bf4:	2300      	movs	r3, #0
 80a0bf6:	4620      	mov	r0, r4
 80a0bf8:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a0bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a0bfc:	f003 f9e2 	bl	80a3fc4 <_ZN9TCPClient7connectEPKctm>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
 80a0c00:	1e43      	subs	r3, r0, #1
 80a0c02:	4258      	negs	r0, r3
 80a0c04:	4158      	adcs	r0, r3
        }
        return 0;
    }
 80a0c06:	b007      	add	sp, #28
 80a0c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
            BLYNK_LOG_IP("Connecting to ", addr);
 80a0c0a:	f7ff fe63 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a0c0e:	f004 f8d5 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0c12:	4920      	ldr	r1, [pc, #128]	; (80a0c94 <_ZN22BlynkTransportParticle7connectEv+0xd8>)
 80a0c14:	f003 fb10 	bl	80a4238 <_ZN5Print5printEPKc>
 80a0c18:	f004 f8d0 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0c1c:	220a      	movs	r2, #10
 80a0c1e:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80a0c22:	f003 fb26 	bl	80a4272 <_ZN5Print11printNumberEmh>
 80a0c26:	f004 f8c9 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0c2a:	212e      	movs	r1, #46	; 0x2e
 80a0c2c:	f003 fb08 	bl	80a4240 <_ZN5Print5printEc>
 80a0c30:	f004 f8c4 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0c34:	220a      	movs	r2, #10
 80a0c36:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80a0c3a:	f003 fb1a 	bl	80a4272 <_ZN5Print11printNumberEmh>
 80a0c3e:	f004 f8bd 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0c42:	212e      	movs	r1, #46	; 0x2e
 80a0c44:	f003 fafc 	bl	80a4240 <_ZN5Print5printEc>
 80a0c48:	f004 f8b8 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0c4c:	220a      	movs	r2, #10
 80a0c4e:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80a0c52:	f003 fb0e 	bl	80a4272 <_ZN5Print11printNumberEmh>
 80a0c56:	f004 f8b1 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0c5a:	212e      	movs	r1, #46	; 0x2e
 80a0c5c:	f003 faf0 	bl	80a4240 <_ZN5Print5printEc>
 80a0c60:	f004 f8ac 	bl	80a4dbc <_Z16_fetch_usbserialv>
            val = n;
 80a0c64:	4625      	mov	r5, r4
 80a0c66:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80a0c68:	220a      	movs	r2, #10
 80a0c6a:	f815 1f20 	ldrb.w	r1, [r5, #32]!
 80a0c6e:	f003 fb00 	bl	80a4272 <_ZN5Print11printNumberEmh>
        n += println();
 80a0c72:	4630      	mov	r0, r6
 80a0c74:	f003 fae7 	bl	80a4246 <_ZN5Print7printlnEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0c78:	4b07      	ldr	r3, [pc, #28]	; (80a0c98 <_ZN22BlynkTransportParticle7connectEv+0xdc>)
 80a0c7a:	ae01      	add	r6, sp, #4
 80a0c7c:	9300      	str	r3, [sp, #0]
 80a0c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0c80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0c82:	682b      	ldr	r3, [r5, #0]
            return (1 == client.connect(addr, port));
 80a0c84:	4669      	mov	r1, sp
 80a0c86:	7033      	strb	r3, [r6, #0]
 80a0c88:	4620      	mov	r0, r4
 80a0c8a:	463b      	mov	r3, r7
 80a0c8c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a0c8e:	f003 f827 	bl	80a3ce0 <_ZN9TCPClient7connectE9IPAddresstm>
 80a0c92:	e7b5      	b.n	80a0c00 <_ZN22BlynkTransportParticle7connectEv+0x44>
 80a0c94:	080a7820 	.word	0x080a7820
 80a0c98:	080a8bf0 	.word	0x080a8bf0

080a0c9c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
 80a0c9c:	b508      	push	{r3, lr}
        state = CONNECTING;
 80a0c9e:	2300      	movs	r3, #0
 80a0ca0:	7743      	strb	r3, [r0, #29]

    void disconnect() { client.stop(); }
 80a0ca2:	6800      	ldr	r0, [r0, #0]
 80a0ca4:	f003 f8c6 	bl	80a3e34 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
 80a0ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
 80a0cac:	f002 bb68 	b.w	80a3380 <BlynkNoOpCbk>

080a0cb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
 80a0cb4:	eb01 0802 	add.w	r8, r1, r2
 80a0cb8:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a0cba:	4541      	cmp	r1, r8
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0cbc:	4607      	mov	r7, r0
 80a0cbe:	460d      	mov	r5, r1
 80a0cc0:	4691      	mov	r9, r2
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0cc2:	e9cd 1805 	strd	r1, r8, [sp, #20]
    if (it >= param.end())
 80a0cc6:	f080 809e 	bcs.w	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
 80a0cca:	a805      	add	r0, sp, #20
 80a0ccc:	880e      	ldrh	r6, [r1, #0]
 80a0cce:	f7ff fe31 	bl	80a0934 <_ZN10BlynkParam8iteratorppEv>
 80a0cd2:	6803      	ldr	r3, [r0, #0]
 80a0cd4:	4598      	cmp	r8, r3
 80a0cd6:	f240 8096 	bls.w	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0cda:	a805      	add	r0, sp, #20
 80a0cdc:	f7ff fe20 	bl	80a0920 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
 80a0ce0:	f247 2376 	movw	r3, #29302	; 0x7276
 80a0ce4:	429e      	cmp	r6, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0ce6:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
 80a0ce8:	f000 80b5 	beq.w	80a0e56 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a6>
 80a0cec:	d828      	bhi.n	80a0d40 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x90>
 80a0cee:	f247 2361 	movw	r3, #29281	; 0x7261
 80a0cf2:	429e      	cmp	r6, r3
 80a0cf4:	f000 808a 	beq.w	80a0e0c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x15c>
 80a0cf8:	f247 2364 	movw	r3, #29284	; 0x7264
 80a0cfc:	429e      	cmp	r6, r3
 80a0cfe:	d04d      	beq.n	80a0d9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xec>
 80a0d00:	f646 5370 	movw	r3, #28016	; 0x6d70
 80a0d04:	429e      	cmp	r6, r3
 80a0d06:	d128      	bne.n	80a0d5a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
 80a0d08:	4e68      	ldr	r6, [pc, #416]	; (80a0eac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a0d0a:	4f69      	ldr	r7, [pc, #420]	; (80a0eb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>)
 80a0d0c:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80a0ec8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x218>
        while (it < param.end()) {
 80a0d10:	9b05      	ldr	r3, [sp, #20]
 80a0d12:	4598      	cmp	r8, r3
 80a0d14:	d977      	bls.n	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0d16:	a805      	add	r0, sp, #20
 80a0d18:	f7ff fe02 	bl	80a0920 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0d1c:	b2c5      	uxtb	r5, r0
            ++it;
 80a0d1e:	a805      	add	r0, sp, #20
 80a0d20:	f7ff fe08 	bl	80a0934 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
 80a0d24:	9c05      	ldr	r4, [sp, #20]
 80a0d26:	4631      	mov	r1, r6
 80a0d28:	4620      	mov	r0, r4
 80a0d2a:	f005 fecb 	bl	80a6ac4 <strcmp>
 80a0d2e:	4601      	mov	r1, r0
 80a0d30:	bb38      	cbnz	r0, 80a0d82 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd2>
                pinMode(pin, OUTPUT);
 80a0d32:	4628      	mov	r0, r5
 80a0d34:	f004 faa6 	bl	80a5284 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
 80a0d38:	a805      	add	r0, sp, #20
 80a0d3a:	f7ff fdfb 	bl	80a0934 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
 80a0d3e:	e7e7      	b.n	80a0d10 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
    switch(cmd16) {
 80a0d40:	f247 7364 	movw	r3, #30564	; 0x7764
 80a0d44:	429e      	cmp	r6, r3
 80a0d46:	d04a      	beq.n	80a0dde <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
 80a0d48:	f247 7376 	movw	r3, #30582	; 0x7776
 80a0d4c:	429e      	cmp	r6, r3
 80a0d4e:	f000 8092 	beq.w	80a0e76 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
 80a0d52:	f247 7361 	movw	r3, #30561	; 0x7761
 80a0d56:	429e      	cmp	r6, r3
 80a0d58:	d06a      	beq.n	80a0e30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x180>
        } else {
            BlynkWidgetWriteDefault(req, param2);
        }
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
 80a0d5a:	f7ff fdbb 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a0d5e:	f004 f82d 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0d62:	4954      	ldr	r1, [pc, #336]	; (80a0eb4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x204>)
 80a0d64:	f003 fa68 	bl	80a4238 <_ZN5Print5printEPKc>
 80a0d68:	f004 f828 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0d6c:	4629      	mov	r1, r5
 80a0d6e:	f003 fa76 	bl	80a425e <_ZN5Print7printlnEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a0d72:	2300      	movs	r3, #0
 80a0d74:	2202      	movs	r2, #2
 80a0d76:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a0d7a:	9200      	str	r2, [sp, #0]
 80a0d7c:	4619      	mov	r1, r3
 80a0d7e:	8b7a      	ldrh	r2, [r7, #26]
 80a0d80:	e029      	b.n	80a0dd6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x126>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a0d82:	4639      	mov	r1, r7
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	f005 fe9d 	bl	80a6ac4 <strcmp>
 80a0d8a:	b128      	cbz	r0, 80a0d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe8>
 80a0d8c:	4649      	mov	r1, r9
 80a0d8e:	4620      	mov	r0, r4
 80a0d90:	f005 fe98 	bl	80a6ac4 <strcmp>
 80a0d94:	2800      	cmp	r0, #0
 80a0d96:	d1cf      	bne.n	80a0d38 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x88>
                pinMode(pin, OUTPUT);
 80a0d98:	2101      	movs	r1, #1
 80a0d9a:	e7ca      	b.n	80a0d32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0d9c:	ab0a      	add	r3, sp, #40	; 0x28
 80a0d9e:	9307      	str	r3, [sp, #28]
 80a0da0:	2500      	movs	r5, #0
 80a0da2:	2310      	movs	r3, #16
 80a0da4:	4944      	ldr	r1, [pc, #272]	; (80a0eb8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x208>)
 80a0da6:	a807      	add	r0, sp, #28
 80a0da8:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
 80a0dac:	f7ff fd5d 	bl	80a086a <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
 80a0db0:	a807      	add	r0, sp, #28
 80a0db2:	4621      	mov	r1, r4
 80a0db4:	f7ff fdda 	bl	80a096c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
 80a0db8:	4620      	mov	r0, r4
 80a0dba:	f004 fa8d 	bl	80a52d8 <digitalRead>
        rsp.add(analogRead(pin));
 80a0dbe:	4601      	mov	r1, r0
 80a0dc0:	a807      	add	r0, sp, #28
 80a0dc2:	f7ff fde5 	bl	80a0990 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
 80a0dc6:	462a      	mov	r2, r5
 80a0dc8:	2114      	movs	r1, #20
 80a0dca:	9b08      	ldr	r3, [sp, #32]
 80a0dcc:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80a0dd0:	3b01      	subs	r3, #1
 80a0dd2:	9300      	str	r3, [sp, #0]
 80a0dd4:	9b07      	ldr	r3, [sp, #28]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a0dd6:	4638      	mov	r0, r7
 80a0dd8:	f000 fad2 	bl	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
 80a0ddc:	e013      	b.n	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        if (++it >= param.end())
 80a0dde:	a805      	add	r0, sp, #20
 80a0de0:	f7ff fda8 	bl	80a0934 <_ZN10BlynkParam8iteratorppEv>
 80a0de4:	6803      	ldr	r3, [r0, #0]
 80a0de6:	4598      	cmp	r8, r3
 80a0de8:	d90d      	bls.n	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        pinMode(pin, OUTPUT);
 80a0dea:	b2a4      	uxth	r4, r4
 80a0dec:	2101      	movs	r1, #1
 80a0dee:	4620      	mov	r0, r4
 80a0df0:	f004 fa48 	bl	80a5284 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
 80a0df4:	a805      	add	r0, sp, #20
 80a0df6:	f7ff fd93 	bl	80a0920 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0dfa:	1e01      	subs	r1, r0, #0
 80a0dfc:	bf18      	it	ne
 80a0dfe:	2101      	movne	r1, #1
 80a0e00:	4620      	mov	r0, r4
 80a0e02:	f004 fa50 	bl	80a52a6 <digitalWrite>
    }
}
 80a0e06:	b00f      	add	sp, #60	; 0x3c
 80a0e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0e0c:	ab0a      	add	r3, sp, #40	; 0x28
 80a0e0e:	9307      	str	r3, [sp, #28]
 80a0e10:	2500      	movs	r5, #0
 80a0e12:	2310      	movs	r3, #16
 80a0e14:	a807      	add	r0, sp, #28
 80a0e16:	4929      	ldr	r1, [pc, #164]	; (80a0ebc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
 80a0e18:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
 80a0e1c:	f7ff fd25 	bl	80a086a <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
 80a0e20:	a807      	add	r0, sp, #28
 80a0e22:	4621      	mov	r1, r4
 80a0e24:	f7ff fda2 	bl	80a096c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
 80a0e28:	4620      	mov	r0, r4
 80a0e2a:	f004 fa68 	bl	80a52fe <analogRead>
 80a0e2e:	e7c6      	b.n	80a0dbe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
        if (++it >= param.end())
 80a0e30:	a805      	add	r0, sp, #20
 80a0e32:	f7ff fd7f 	bl	80a0934 <_ZN10BlynkParam8iteratorppEv>
 80a0e36:	6803      	ldr	r3, [r0, #0]
 80a0e38:	4598      	cmp	r8, r3
 80a0e3a:	d9e4      	bls.n	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        pinMode(pin, OUTPUT);
 80a0e3c:	b2a4      	uxth	r4, r4
 80a0e3e:	2101      	movs	r1, #1
 80a0e40:	4620      	mov	r0, r4
 80a0e42:	f004 fa1f 	bl	80a5284 <pinMode>
        analogWrite(pin, it.asInt());
 80a0e46:	a805      	add	r0, sp, #20
 80a0e48:	f7ff fd6a 	bl	80a0920 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0e4c:	4601      	mov	r1, r0
 80a0e4e:	4620      	mov	r0, r4
 80a0e50:	f004 fa6c 	bl	80a532c <_Z11analogWritetm>
    } break;
 80a0e54:	e7d7      	b.n	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0e56:	4620      	mov	r0, r4
        BlynkReq req = { pin };
 80a0e58:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0e5c:	f002 fa92 	bl	80a3384 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
 80a0e60:	4603      	mov	r3, r0
            handler(req);
 80a0e62:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
 80a0e64:	b123      	cbz	r3, 80a0e70 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c0>
 80a0e66:	4a16      	ldr	r2, [pc, #88]	; (80a0ec0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
 80a0e68:	4293      	cmp	r3, r2
 80a0e6a:	d001      	beq.n	80a0e70 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c0>
            handler(req);
 80a0e6c:	4798      	blx	r3
 80a0e6e:	e7ca      	b.n	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
            BlynkWidgetReadDefault(req);
 80a0e70:	f002 fa84 	bl	80a337c <BlynkWidgetRead>
    } break;
 80a0e74:	e7c7      	b.n	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        ++it;
 80a0e76:	a805      	add	r0, sp, #20
 80a0e78:	f7ff fd5c 	bl	80a0934 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
 80a0e7c:	9b05      	ldr	r3, [sp, #20]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0e7e:	4620      	mov	r0, r4
        BlynkParam param2(start, len - (start - (char*)buff));
 80a0e80:	1b5d      	subs	r5, r3, r5
 80a0e82:	eba9 0505 	sub.w	r5, r9, r5
        : buff((char*)addr), len(length), buff_size(length)
 80a0e86:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
 80a0e8a:	950c      	str	r5, [sp, #48]	; 0x30
        BlynkReq req = { pin };
 80a0e8c:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0e90:	f002 fa82 	bl	80a3398 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0e94:	4603      	mov	r3, r0
            handler(req, param2);
 80a0e96:	a90a      	add	r1, sp, #40	; 0x28
 80a0e98:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0e9a:	b123      	cbz	r3, 80a0ea6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f6>
 80a0e9c:	4a09      	ldr	r2, [pc, #36]	; (80a0ec4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x214>)
 80a0e9e:	4293      	cmp	r3, r2
 80a0ea0:	d001      	beq.n	80a0ea6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f6>
            handler(req, param2);
 80a0ea2:	4798      	blx	r3
 80a0ea4:	e7af      	b.n	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
            BlynkWidgetWriteDefault(req, param2);
 80a0ea6:	f002 fa6a 	bl	80a337e <BlynkWidgetWrite>
    } break;
 80a0eaa:	e7ac      	b.n	80a0e06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
 80a0eac:	080a782f 	.word	0x080a782f
 80a0eb0:	080a78d6 	.word	0x080a78d6
 80a0eb4:	080a783c 	.word	0x080a783c
 80a0eb8:	080a7836 	.word	0x080a7836
 80a0ebc:	080a7839 	.word	0x080a7839
 80a0ec0:	080a337d 	.word	0x080a337d
 80a0ec4:	080a337f 	.word	0x080a337f
 80a0ec8:	080a7832 	.word	0x080a7832

080a0ecc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
 80a0ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0ed0:	b08c      	sub	sp, #48	; 0x30
 80a0ed2:	af04      	add	r7, sp, #16
 80a0ed4:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
 80a0ed6:	2205      	movs	r2, #5
 80a0ed8:	6800      	ldr	r0, [r0, #0]
 80a0eda:	1d39      	adds	r1, r7, #4
 80a0edc:	f003 fa2c 	bl	80a4338 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
 80a0ee0:	2800      	cmp	r0, #0
 80a0ee2:	d04d      	beq.n	80a0f80 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xb4>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
 80a0ee4:	2805      	cmp	r0, #5
 80a0ee6:	d004      	beq.n	80a0ef2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26>
        return false;
 80a0ee8:	2000      	movs	r0, #0
}
 80a0eea:	3720      	adds	r7, #32
 80a0eec:	46bd      	mov	sp, r7
 80a0eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a0ef2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
 80a0ef6:	0a13      	lsrs	r3, r2, #8
 80a0ef8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
 80a0efc:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
 80a0f00:	b299      	uxth	r1, r3
 80a0f02:	f8a7 3005 	strh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
 80a0f06:	0a13      	lsrs	r3, r2, #8
 80a0f08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0f0c:	fa1f f883 	uxth.w	r8, r3
 80a0f10:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
 80a0f14:	2900      	cmp	r1, #0
 80a0f16:	d0e7      	beq.n	80a0ee8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
 80a0f18:	793b      	ldrb	r3, [r7, #4]
 80a0f1a:	2b00      	cmp	r3, #0
 80a0f1c:	d14f      	bne.n	80a0fbe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
        lastActivityIn = BlynkMillis();
 80a0f1e:	f002 fa2b 	bl	80a3378 <_Z11BlynkMillisv>
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a0f22:	7f65      	ldrb	r5, [r4, #29]
        lastActivityIn = BlynkMillis();
 80a0f24:	60e0      	str	r0, [r4, #12]
 80a0f26:	f8b7 0007 	ldrh.w	r0, [r7, #7]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a0f2a:	2d00      	cmp	r5, #0
 80a0f2c:	d143      	bne.n	80a0fb6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
 80a0f2e:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 80a0f32:	2b01      	cmp	r3, #1
 80a0f34:	d13f      	bne.n	80a0fb6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
            switch (hdr.length) {
 80a0f36:	2809      	cmp	r0, #9
 80a0f38:	d024      	beq.n	80a0f84 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xb8>
 80a0f3a:	28c8      	cmp	r0, #200	; 0xc8
 80a0f3c:	d001      	beq.n	80a0f42 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x76>
 80a0f3e:	2804      	cmp	r0, #4
 80a0f40:	d12a      	bne.n	80a0f98 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xcc>
                state = CONNECTED;
 80a0f42:	2501      	movs	r5, #1
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
 80a0f44:	f7ff fcc6 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a0f48:	f003 ff38 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0f4c:	49af      	ldr	r1, [pc, #700]	; (80a120c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x340>)
 80a0f4e:	f003 f973 	bl	80a4238 <_ZN5Print5printEPKc>
 80a0f52:	f003 ff33 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0f56:	6963      	ldr	r3, [r4, #20]
 80a0f58:	68e1      	ldr	r1, [r4, #12]
        return printNumber(val, base) + t;
 80a0f5a:	220a      	movs	r2, #10
 80a0f5c:	1ac9      	subs	r1, r1, r3
 80a0f5e:	f003 f988 	bl	80a4272 <_ZN5Print11printNumberEmh>
 80a0f62:	f003 ff2b 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0f66:	49aa      	ldr	r1, [pc, #680]	; (80a1210 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x344>)
 80a0f68:	f003 f979 	bl	80a425e <_ZN5Print7printlnEPKc>
                lastHeartbeat = lastActivityIn;
 80a0f6c:	68e3      	ldr	r3, [r4, #12]
                this->sendInfo();
 80a0f6e:	4620      	mov	r0, r4
                lastHeartbeat = lastActivityIn;
 80a0f70:	6163      	str	r3, [r4, #20]
                state = CONNECTED;
 80a0f72:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
 80a0f74:	f000 ff1a 	bl	80a1dac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
 80a0f78:	f7ff fcc6 	bl	80a0908 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
 80a0f7c:	f002 fa00 	bl	80a3380 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
 80a0f80:	2001      	movs	r0, #1
 80a0f82:	e7b2      	b.n	80a0eea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e>
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
 80a0f84:	f7ff fca6 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a0f88:	f003 ff18 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0f8c:	49a1      	ldr	r1, [pc, #644]	; (80a1214 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x348>)
 80a0f8e:	f003 f966 	bl	80a425e <_ZN5Print7printlnEPKc>
                state = TOKEN_INVALID;
 80a0f92:	2303      	movs	r3, #3
 80a0f94:	7763      	strb	r3, [r4, #29]
 80a0f96:	e7a7      	b.n	80a0ee8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
 80a0f98:	f7ff fc9c 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a0f9c:	f003 ff0e 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0fa0:	499d      	ldr	r1, [pc, #628]	; (80a1218 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34c>)
 80a0fa2:	f003 f949 	bl	80a4238 <_ZN5Print5printEPKc>
 80a0fa6:	f003 ff09 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0faa:	220a      	movs	r2, #10
 80a0fac:	f8b7 1007 	ldrh.w	r1, [r7, #7]
 80a0fb0:	f7ff fdf2 	bl	80a0b98 <_ZN5Print7printlnItLi0EEEjT_i>
 80a0fb4:	e798      	b.n	80a0ee8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
 80a0fb6:	3805      	subs	r0, #5
 80a0fb8:	bf18      	it	ne
 80a0fba:	2001      	movne	r0, #1
 80a0fbc:	e795      	b.n	80a0eea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e>
    if (hdr.length > BLYNK_MAX_READBYTES) {
 80a0fbe:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 80a0fc2:	d911      	bls.n	80a0fe8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x11c>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
 80a0fc4:	f7ff fc86 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a0fc8:	f003 fef8 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0fcc:	4993      	ldr	r1, [pc, #588]	; (80a121c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x350>)
 80a0fce:	f003 f933 	bl	80a4238 <_ZN5Print5printEPKc>
 80a0fd2:	f003 fef3 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a0fd6:	220a      	movs	r2, #10
 80a0fd8:	f8b7 1007 	ldrh.w	r1, [r7, #7]
 80a0fdc:	f7ff fddc 	bl	80a0b98 <_ZN5Print7printlnItLi0EEEjT_i>
        internalReconnect();
 80a0fe0:	4620      	mov	r0, r4
 80a0fe2:	f7ff fe5b 	bl	80a0c9c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a0fe6:	e7cb      	b.n	80a0f80 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xb4>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
 80a0fe8:	f108 0308 	add.w	r3, r8, #8
 80a0fec:	f023 0307 	bic.w	r3, r3, #7
 80a0ff0:	466e      	mov	r6, sp
 80a0ff2:	ebad 0d03 	sub.w	sp, sp, r3
 80a0ff6:	ad04      	add	r5, sp, #16
 80a0ff8:	4642      	mov	r2, r8
 80a0ffa:	4629      	mov	r1, r5
 80a0ffc:	6820      	ldr	r0, [r4, #0]
 80a0ffe:	f003 f99b 	bl	80a4338 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
 80a1002:	4580      	cmp	r8, r0
 80a1004:	f04f 0000 	mov.w	r0, #0
 80a1008:	d177      	bne.n	80a10fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x22e>
    inputBuffer[hdr.length] = '\0';
 80a100a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a100e:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
 80a1010:	f002 f9b2 	bl	80a3378 <_Z11BlynkMillisv>
    switch (hdr.type)
 80a1014:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
 80a1016:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
 80a1018:	2b14      	cmp	r3, #20
 80a101a:	f000 80b4 	beq.w	80a1186 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ba>
 80a101e:	d838      	bhi.n	80a1092 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c6>
 80a1020:	2b0f      	cmp	r3, #15
 80a1022:	f000 80b0 	beq.w	80a1186 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ba>
 80a1026:	d807      	bhi.n	80a1038 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
 80a1028:	2b02      	cmp	r3, #2
 80a102a:	d039      	beq.n	80a10a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1d4>
 80a102c:	2b06      	cmp	r3, #6
 80a102e:	d049      	beq.n	80a10c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        internalReconnect();
 80a1030:	4620      	mov	r0, r4
 80a1032:	f7ff fe33 	bl	80a0c9c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a1036:	e050      	b.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
    switch (hdr.type)
 80a1038:	2b11      	cmp	r3, #17
 80a103a:	d1f9      	bne.n	80a1030 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x164>
        BlynkReq req = { 0 };
 80a103c:	2300      	movs	r3, #0
 80a103e:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
 80a1040:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
 80a1044:	442b      	add	r3, r5
        if (it >= param.end())
 80a1046:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a1048:	e9c7 5303 	strd	r5, r3, [r7, #12]
 80a104c:	d245      	bcs.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
        ++it;
 80a104e:	f107 000c 	add.w	r0, r7, #12
 80a1052:	682c      	ldr	r4, [r5, #0]
 80a1054:	f7ff fc6e 	bl	80a0934 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
 80a1058:	68fa      	ldr	r2, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
 80a105a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a105e:	1b55      	subs	r5, r2, r5
 80a1060:	1b5d      	subs	r5, r3, r5
    BlynkParam(const void* addr, size_t length)
 80a1062:	4b6f      	ldr	r3, [pc, #444]	; (80a1220 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x354>)
        : buff((char*)addr), len(length), buff_size(length)
 80a1064:	e9c7 2505 	strd	r2, r5, [r7, #20]
 80a1068:	429c      	cmp	r4, r3
 80a106a:	61fd      	str	r5, [r7, #28]
 80a106c:	f000 80b5 	beq.w	80a11da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x30e>
 80a1070:	f200 8096 	bhi.w	80a11a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2d4>
 80a1074:	4b6b      	ldr	r3, [pc, #428]	; (80a1224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x358>)
 80a1076:	429c      	cmp	r4, r3
 80a1078:	f000 80a3 	beq.w	80a11c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2f6>
 80a107c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80a1080:	3303      	adds	r3, #3
 80a1082:	429c      	cmp	r4, r3
 80a1084:	d129      	bne.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
 80a1086:	4638      	mov	r0, r7
 80a1088:	f107 0114 	add.w	r1, r7, #20
 80a108c:	f002 f977 	bl	80a337e <BlynkWidgetWrite>
 80a1090:	e023      	b.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
    switch (hdr.type)
 80a1092:	2b29      	cmp	r3, #41	; 0x29
 80a1094:	d023      	beq.n	80a10de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x212>
 80a1096:	2b37      	cmp	r3, #55	; 0x37
 80a1098:	f000 80a5 	beq.w	80a11e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31a>
 80a109c:	2b1d      	cmp	r3, #29
 80a109e:	d1c7      	bne.n	80a1030 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x164>
        if (state == CONNECTING) {
 80a10a0:	7f63      	ldrb	r3, [r4, #29]
 80a10a2:	b97b      	cbnz	r3, 80a10c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
            BLYNK_LOG1(BLYNK_F("Ready"));
 80a10a4:	f7ff fc16 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a10a8:	f003 fe88 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a10ac:	495e      	ldr	r1, [pc, #376]	; (80a1228 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x35c>)
 80a10ae:	f003 f8d6 	bl	80a425e <_ZN5Print7printlnEPKc>
            state = CONNECTED;
 80a10b2:	2301      	movs	r3, #1
            this->sendInfo();
 80a10b4:	4620      	mov	r0, r4
            state = CONNECTED;
 80a10b6:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
 80a10b8:	f000 fe78 	bl	80a1dac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
 80a10bc:	f7ff fc24 	bl	80a0908 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
 80a10c0:	f002 f95e 	bl	80a3380 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a10c4:	2300      	movs	r3, #0
 80a10c6:	21c8      	movs	r1, #200	; 0xc8
 80a10c8:	f8b7 2005 	ldrh.w	r2, [r7, #5]
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	9100      	str	r1, [sp, #0]
 80a10d0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a10d4:	4619      	mov	r1, r3
 80a10d6:	f000 f953 	bl	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    return true;
 80a10da:	2001      	movs	r0, #1
 80a10dc:	e00d      	b.n	80a10fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x22e>
        if (!redir_serv) {
 80a10de:	68a3      	ldr	r3, [r4, #8]
 80a10e0:	b91b      	cbnz	r3, 80a10ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21e>
             redir_serv = (char*)malloc(32);
 80a10e2:	2020      	movs	r0, #32
 80a10e4:	f002 fc12 	bl	80a390c <malloc>
 80a10e8:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
 80a10ea:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
 80a10ee:	44a8      	add	r8, r5
        if (it >= param.end())
 80a10f0:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a10f2:	e9c7 5805 	strd	r5, r8, [r7, #20]
 80a10f6:	d302      	bcc.n	80a10fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
            return false;
 80a10f8:	2000      	movs	r0, #0
 80a10fa:	46b5      	mov	sp, r6
 80a10fc:	e6f5      	b.n	80a0eea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e>
        strncpy(redir_serv, it.asStr(), 32);
 80a10fe:	4629      	mov	r1, r5
        redir_serv[31] = '\0';
 80a1100:	2500      	movs	r5, #0
        strncpy(redir_serv, it.asStr(), 32);
 80a1102:	2220      	movs	r2, #32
 80a1104:	68a0      	ldr	r0, [r4, #8]
 80a1106:	f005 fd24 	bl	80a6b52 <strncpy>
        redir_serv[31] = '\0';
 80a110a:	68a3      	ldr	r3, [r4, #8]
        if (++it < param.end())
 80a110c:	f107 0014 	add.w	r0, r7, #20
        redir_serv[31] = '\0';
 80a1110:	77dd      	strb	r5, [r3, #31]
        if (++it < param.end())
 80a1112:	f7ff fc0f 	bl	80a0934 <_ZN10BlynkParam8iteratorppEv>
 80a1116:	6803      	ldr	r3, [r0, #0]
 80a1118:	4543      	cmp	r3, r8
 80a111a:	d232      	bcs.n	80a1182 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a111c:	6978      	ldr	r0, [r7, #20]
 80a111e:	b120      	cbz	r0, 80a112a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25e>
 80a1120:	69bb      	ldr	r3, [r7, #24]
 80a1122:	4298      	cmp	r0, r3
 80a1124:	d22b      	bcs.n	80a117e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a1126:	f005 fb8b 	bl	80a6840 <atol>
            redir_port = it.asLong();
 80a112a:	b285      	uxth	r5, r0
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
 80a112c:	f7ff fbd2 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a1130:	f003 fe44 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1134:	493d      	ldr	r1, [pc, #244]	; (80a122c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x360>)
 80a1136:	f003 f87f 	bl	80a4238 <_ZN5Print5printEPKc>
 80a113a:	f003 fe3f 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a113e:	68a1      	ldr	r1, [r4, #8]
 80a1140:	f003 f87a 	bl	80a4238 <_ZN5Print5printEPKc>
 80a1144:	f003 fe3a 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1148:	213a      	movs	r1, #58	; 0x3a
 80a114a:	f003 f879 	bl	80a4240 <_ZN5Print5printEc>
 80a114e:	f003 fe35 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1152:	220a      	movs	r2, #10
 80a1154:	4629      	mov	r1, r5
 80a1156:	f7ff fd1f 	bl	80a0b98 <_ZN5Print7printlnItLi0EEEjT_i>
    void disconnect() { client.stop(); }
 80a115a:	6820      	ldr	r0, [r4, #0]
 80a115c:	f002 fe6a 	bl	80a3e34 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
 80a1160:	6823      	ldr	r3, [r4, #0]
 80a1162:	68a2      	ldr	r2, [r4, #8]
        port = p;
 80a1164:	871d      	strh	r5, [r3, #56]	; 0x38
        domain = d;
 80a1166:	635a      	str	r2, [r3, #52]	; 0x34
        state = CONNECTING;
 80a1168:	2300      	movs	r3, #0
 80a116a:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a116c:	f002 f904 	bl	80a3378 <_Z11BlynkMillisv>
 80a1170:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a1174:	3808      	subs	r0, #8
 80a1176:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80a117a:	6160      	str	r0, [r4, #20]
 80a117c:	e7ad      	b.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
 80a117e:	4628      	mov	r0, r5
 80a1180:	e7d3      	b.n	80a112a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25e>
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
 80a1182:	2550      	movs	r5, #80	; 0x50
 80a1184:	e7d2      	b.n	80a112c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>
        msgIdOutOverride = hdr.msg_id;
 80a1186:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
 80a1188:	4629      	mov	r1, r5
        msgIdOutOverride = hdr.msg_id;
 80a118a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80a118e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
 80a1190:	4620      	mov	r0, r4
 80a1192:	f8b7 2007 	ldrh.w	r2, [r7, #7]
 80a1196:	f7ff fd8b 	bl	80a0cb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
 80a119a:	2300      	movs	r3, #0
 80a119c:	8363      	strh	r3, [r4, #26]
 80a119e:	e79c      	b.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
 80a11a0:	4b23      	ldr	r3, [pc, #140]	; (80a1230 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x364>)
 80a11a2:	429c      	cmp	r4, r3
 80a11a4:	d013      	beq.n	80a11ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x302>
 80a11a6:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
 80a11aa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80a11ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80a11b2:	429c      	cmp	r4, r3
 80a11b4:	d191      	bne.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
 80a11b6:	4638      	mov	r0, r7
 80a11b8:	f107 0114 	add.w	r1, r7, #20
 80a11bc:	f002 f8df 	bl	80a337e <BlynkWidgetWrite>
 80a11c0:	e78b      	b.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
 80a11c2:	4638      	mov	r0, r7
 80a11c4:	f107 0114 	add.w	r1, r7, #20
 80a11c8:	f002 f8d9 	bl	80a337e <BlynkWidgetWrite>
 80a11cc:	e785      	b.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
 80a11ce:	4638      	mov	r0, r7
 80a11d0:	f107 0114 	add.w	r1, r7, #20
 80a11d4:	f002 f8d3 	bl	80a337e <BlynkWidgetWrite>
 80a11d8:	e77f      	b.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
 80a11da:	4638      	mov	r0, r7
 80a11dc:	f107 0114 	add.w	r1, r7, #20
 80a11e0:	f002 f8cd 	bl	80a337e <BlynkWidgetWrite>
 80a11e4:	e779      	b.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
        if (hdr.length) {
 80a11e6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a11ea:	2b00      	cmp	r3, #0
 80a11ec:	f43f af75 	beq.w	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
 80a11f0:	f7ff fb70 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a11f4:	f003 fde2 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a11f8:	490e      	ldr	r1, [pc, #56]	; (80a1234 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x368>)
 80a11fa:	f003 f81d 	bl	80a4238 <_ZN5Print5printEPKc>
 80a11fe:	f003 fddd 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1202:	4629      	mov	r1, r5
 80a1204:	f003 f82b 	bl	80a425e <_ZN5Print7printlnEPKc>
 80a1208:	e767      	b.n	80a10da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20e>
 80a120a:	bf00      	nop
 80a120c:	080a784d 	.word	0x080a784d
 80a1210:	080a785b 	.word	0x080a785b
 80a1214:	080a7860 	.word	0x080a7860
 80a1218:	080a7873 	.word	0x080a7873
 80a121c:	080a788a 	.word	0x080a788a
 80a1220:	6174656d 	.word	0x6174656d
 80a1224:	0061746f 	.word	0x0061746f
 80a1228:	080a789b 	.word	0x080a789b
 80a122c:	080a78a1 	.word	0x080a78a1
 80a1230:	6e6f6361 	.word	0x6e6f6361
 80a1234:	080a78b1 	.word	0x080a78b1

080a1238 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
 80a1238:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a123c:	4604      	mov	r4, r0
 80a123e:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
 80a1240:	f7ff fb62 	bl	80a0908 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
 80a1244:	7f63      	ldrb	r3, [r4, #29]
 80a1246:	2b02      	cmp	r3, #2
 80a1248:	f000 8094 	beq.w	80a1374 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13c>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
 80a124c:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
 80a124e:	8b62      	ldrh	r2, [r4, #26]
 80a1250:	3301      	adds	r3, #1
 80a1252:	b2db      	uxtb	r3, r3
 80a1254:	7723      	strb	r3, [r4, #28]
 80a1256:	b10a      	cbz	r2, 80a125c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x24>
    return true;
 80a1258:	2501      	movs	r5, #1
 80a125a:	e016      	b.n	80a128a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x52>
    if (msgIdOutOverride || nesting > 2) {
 80a125c:	2b02      	cmp	r3, #2
 80a125e:	d8fb      	bhi.n	80a1258 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x20>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a1260:	6820      	ldr	r0, [r4, #0]
 80a1262:	f002 fe3e 	bl	80a3ee2 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
 80a1266:	b1b8      	cbz	r0, 80a1298 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x60>
        while (avail || conn.available() > 0) {
 80a1268:	b925      	cbnz	r5, 80a1274 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3c>
    int available() { return client.available(); }
 80a126a:	6820      	ldr	r0, [r4, #0]
 80a126c:	f002 fda8 	bl	80a3dc0 <_ZN9TCPClient9availableEv>
 80a1270:	2800      	cmp	r0, #0
 80a1272:	dd11      	ble.n	80a1298 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x60>
            if (!processInput()) {
 80a1274:	4620      	mov	r0, r4
 80a1276:	f7ff fe29 	bl	80a0ecc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
 80a127a:	4605      	mov	r5, r0
 80a127c:	2800      	cmp	r0, #0
 80a127e:	d1f4      	bne.n	80a126a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x32>
    void disconnect() { client.stop(); }
 80a1280:	6820      	ldr	r0, [r4, #0]
 80a1282:	f002 fdd7 	bl	80a3e34 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
 80a1286:	f002 f87b 	bl	80a3380 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
 80a128a:	7f23      	ldrb	r3, [r4, #28]
 80a128c:	3b01      	subs	r3, #1
 80a128e:	7723      	strb	r3, [r4, #28]
}
 80a1290:	4628      	mov	r0, r5
 80a1292:	b004      	add	sp, #16
 80a1294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
 80a1298:	f002 f86e 	bl	80a3378 <_Z11BlynkMillisv>
 80a129c:	4607      	mov	r7, r0
    bool connected() { return client.connected(); }
 80a129e:	6820      	ldr	r0, [r4, #0]
 80a12a0:	f002 fe1f 	bl	80a3ee2 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
 80a12a4:	7f65      	ldrb	r5, [r4, #29]
 80a12a6:	4606      	mov	r6, r0
 80a12a8:	2d01      	cmp	r5, #1
 80a12aa:	d12d      	bne.n	80a1308 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xd0>
        if (!tconn) {
 80a12ac:	b928      	cbnz	r0, 80a12ba <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
 80a12ae:	6167      	str	r7, [r4, #20]
            internalReconnect();
 80a12b0:	4620      	mov	r0, r4
 80a12b2:	f7ff fcf3 	bl	80a0c9c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a12b6:	2500      	movs	r5, #0
 80a12b8:	e7e7      	b.n	80a128a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x52>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
 80a12ba:	f644 2238 	movw	r2, #19000	; 0x4a38
 80a12be:	68e3      	ldr	r3, [r4, #12]
 80a12c0:	1afb      	subs	r3, r7, r3
 80a12c2:	4293      	cmp	r3, r2
 80a12c4:	d907      	bls.n	80a12d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x9e>
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
 80a12c6:	f7ff fb05 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a12ca:	f003 fd77 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a12ce:	492a      	ldr	r1, [pc, #168]	; (80a1378 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x140>)
 80a12d0:	f002 ffc5 	bl	80a425e <_ZN5Print7printlnEPKc>
 80a12d4:	e7ec      	b.n	80a12b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a12d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80a12da:	4293      	cmp	r3, r2
 80a12dc:	d803      	bhi.n	80a12e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xae>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a12de:	6923      	ldr	r3, [r4, #16]
 80a12e0:	1afb      	subs	r3, r7, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a12e2:	4293      	cmp	r3, r2
 80a12e4:	d9b8      	bls.n	80a1258 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x20>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a12e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
 80a12ea:	6963      	ldr	r3, [r4, #20]
 80a12ec:	1afb      	subs	r3, r7, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a12ee:	4293      	cmp	r3, r2
 80a12f0:	d9b2      	bls.n	80a1258 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x20>
            sendCmd(BLYNK_CMD_PING);
 80a12f2:	2300      	movs	r3, #0
 80a12f4:	2106      	movs	r1, #6
 80a12f6:	461a      	mov	r2, r3
 80a12f8:	4620      	mov	r0, r4
 80a12fa:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a12fe:	9300      	str	r3, [sp, #0]
 80a1300:	f000 f83e 	bl	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
 80a1304:	6167      	str	r7, [r4, #20]
 80a1306:	e7a7      	b.n	80a1258 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x20>
    } else if (state == CONNECTING) {
 80a1308:	2d00      	cmp	r5, #0
 80a130a:	d1a5      	bne.n	80a1258 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x20>
 80a130c:	6963      	ldr	r3, [r4, #20]
 80a130e:	1afb      	subs	r3, r7, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
 80a1310:	b178      	cbz	r0, 80a1332 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfa>
 80a1312:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a1316:	4293      	cmp	r3, r2
 80a1318:	d99e      	bls.n	80a1258 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x20>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
 80a131a:	f7ff fadb 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a131e:	f003 fd4d 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1322:	4916      	ldr	r1, [pc, #88]	; (80a137c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x144>)
 80a1324:	f002 ff9b 	bl	80a425e <_ZN5Print7printlnEPKc>
    void disconnect() { client.stop(); }
 80a1328:	6820      	ldr	r0, [r4, #0]
 80a132a:	f002 fd83 	bl	80a3e34 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
 80a132e:	7765      	strb	r5, [r4, #29]
            return false;
 80a1330:	e7ab      	b.n	80a128a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x52>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
 80a1332:	f241 3288 	movw	r2, #5000	; 0x1388
 80a1336:	4293      	cmp	r3, r2
 80a1338:	d98e      	bls.n	80a1258 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x20>
 80a133a:	6820      	ldr	r0, [r4, #0]
 80a133c:	f002 fd7a 	bl	80a3e34 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
 80a1340:	6820      	ldr	r0, [r4, #0]
 80a1342:	f7ff fc3b 	bl	80a0bbc <_ZN22BlynkTransportParticle7connectEv>
 80a1346:	4605      	mov	r5, r0
 80a1348:	b908      	cbnz	r0, 80a134e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x116>
                lastLogin = t;
 80a134a:	6167      	str	r7, [r4, #20]
                return false;
 80a134c:	e79d      	b.n	80a128a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x52>
            msgIdOut = 1;
 80a134e:	2701      	movs	r7, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a1350:	f8d4 8004 	ldr.w	r8, [r4, #4]
            msgIdOut = 1;
 80a1354:	8327      	strh	r7, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a1356:	4640      	mov	r0, r8
 80a1358:	f005 fbe1 	bl	80a6b1e <strlen>
 80a135c:	4643      	mov	r3, r8
 80a135e:	9000      	str	r0, [sp, #0]
 80a1360:	463a      	mov	r2, r7
 80a1362:	211d      	movs	r1, #29
 80a1364:	4620      	mov	r0, r4
 80a1366:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80a136a:	f000 f809 	bl	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
 80a136e:	6923      	ldr	r3, [r4, #16]
 80a1370:	6163      	str	r3, [r4, #20]
            return true;
 80a1372:	e78a      	b.n	80a128a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x52>
        return false;
 80a1374:	2500      	movs	r5, #0
 80a1376:	e78b      	b.n	80a1290 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x58>
 80a1378:	080a78ba 	.word	0x080a78ba
 80a137c:	080a78cc 	.word	0x080a78cc

080a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a1380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1384:	b083      	sub	sp, #12
 80a1386:	4604      	mov	r4, r0
 80a1388:	af00      	add	r7, sp, #0
    bool connected() { return client.connected(); }
 80a138a:	6800      	ldr	r0, [r0, #0]
 80a138c:	4688      	mov	r8, r1
 80a138e:	4616      	mov	r6, r2
 80a1390:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
 80a1392:	46eb      	mov	fp, sp
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a1394:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80a1396:	f002 fda4 	bl	80a3ee2 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
 80a139a:	2800      	cmp	r0, #0
 80a139c:	d07f      	beq.n	80a149e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
 80a139e:	f1b8 0f1d 	cmp.w	r8, #29
 80a13a2:	d804      	bhi.n	80a13ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
 80a13a4:	4b4c      	ldr	r3, [pc, #304]	; (80a14d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
 80a13a6:	fa23 f308 	lsr.w	r3, r3, r8
 80a13aa:	07db      	lsls	r3, r3, #31
 80a13ac:	d402      	bmi.n	80a13b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
 80a13ae:	7f63      	ldrb	r3, [r4, #29]
 80a13b0:	2b01      	cmp	r3, #1
 80a13b2:	d174      	bne.n	80a149e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
 80a13b4:	b946      	cbnz	r6, 80a13c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
 80a13b6:	8b66      	ldrh	r6, [r4, #26]
 80a13b8:	b936      	cbnz	r6, 80a13c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
 80a13ba:	8b23      	ldrh	r3, [r4, #24]
 80a13bc:	3301      	adds	r3, #1
 80a13be:	b29b      	uxth	r3, r3
 80a13c0:	2b00      	cmp	r3, #0
 80a13c2:	d071      	beq.n	80a14a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
 80a13c4:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
 80a13c6:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
 80a13c8:	f1a8 030c 	sub.w	r3, r8, #12
 80a13cc:	2b08      	cmp	r3, #8
 80a13ce:	d816      	bhi.n	80a13fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
 80a13d0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80a13d4:	4293      	cmp	r3, r2
 80a13d6:	bf38      	it	cc
 80a13d8:	4613      	movcc	r3, r2
 80a13da:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
 80a13de:	f001 ffcb 	bl	80a3378 <_Z11BlynkMillisv>
 80a13e2:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
 80a13e6:	2800      	cmp	r0, #0
 80a13e8:	db60      	blt.n	80a14ac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
 80a13ea:	2100      	movs	r1, #0
 80a13ec:	4620      	mov	r0, r4
 80a13ee:	f7ff ff23 	bl	80a1238 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
 80a13f2:	f001 ffc1 	bl	80a3378 <_Z11BlynkMillisv>
 80a13f6:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
 80a13fa:	2800      	cmp	r0, #0
 80a13fc:	daf5      	bge.n	80a13ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a13fe:	f1b9 0f00 	cmp.w	r9, #0
 80a1402:	d05a      	beq.n	80a14ba <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
 80a1404:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
 80a1406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    hdr->msg_id = htons(id);
 80a1408:	ba76      	rev16	r6, r6
                               (data  ? length  : 0) +
 80a140a:	2a00      	cmp	r2, #0
 80a140c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a140e:	bf08      	it	eq
 80a1410:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a1412:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
 80a1416:	f10a 0307 	add.w	r3, sl, #7
 80a141a:	f023 0307 	bic.w	r3, r3, #7
 80a141e:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
 80a1422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
 80a1424:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
 80a1428:	18ea      	adds	r2, r5, r3
 80a142a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80a142e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
 80a1432:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
 80a1436:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
 80a143a:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
 80a143e:	f1b9 0f00 	cmp.w	r9, #0
 80a1442:	d03c      	beq.n	80a14be <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
 80a1444:	2d00      	cmp	r5, #0
 80a1446:	d03a      	beq.n	80a14be <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
 80a1448:	462a      	mov	r2, r5
 80a144a:	4649      	mov	r1, r9
 80a144c:	f10d 0005 	add.w	r0, sp, #5
 80a1450:	f005 fafe 	bl	80a6a50 <memcpy>
        pos += length;
 80a1454:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
 80a1456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a1458:	b13b      	cbz	r3, 80a146a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
 80a145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a145c:	b12b      	cbz	r3, 80a146a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
 80a145e:	461a      	mov	r2, r3
 80a1460:	687b      	ldr	r3, [r7, #4]
 80a1462:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80a1464:	4418      	add	r0, r3
 80a1466:	f005 faf3 	bl	80a6a50 <memcpy>
    size_t pos = sizeof(BlynkHeader);
 80a146a:	2500      	movs	r5, #0
    while (wlen < full_length) {
 80a146c:	4555      	cmp	r5, sl
 80a146e:	d22a      	bcs.n	80a14c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
 80a1470:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
 80a1474:	687b      	ldr	r3, [r7, #4]
 80a1476:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80a147a:	bf28      	it	cs
 80a147c:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80a1480:	6820      	ldr	r0, [r4, #0]
 80a1482:	1959      	adds	r1, r3, r5
 80a1484:	f002 fb61 	bl	80a3b4a <_ZN9TCPClient5writeEPKhj>
 80a1488:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
 80a148a:	2000      	movs	r0, #0
 80a148c:	f001 ff72 	bl	80a3374 <_Z10BlynkDelaym>
        if (w == 0) {
 80a1490:	b9be      	cbnz	r6, 80a14c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
 80a1492:	6820      	ldr	r0, [r4, #0]
 80a1494:	f002 fcce 	bl	80a3e34 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
 80a1498:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
 80a149a:	f001 ff71 	bl	80a3380 <BlynkNoOpCbk>
 80a149e:	46dd      	mov	sp, fp
}
 80a14a0:	370c      	adds	r7, #12
 80a14a2:	46bd      	mov	sp, r7
 80a14a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
 80a14a8:	2301      	movs	r3, #1
 80a14aa:	e78b      	b.n	80a13c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
 80a14ac:	7f21      	ldrb	r1, [r4, #28]
 80a14ae:	2900      	cmp	r1, #0
 80a14b0:	d1a5      	bne.n	80a13fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
 80a14b2:	4620      	mov	r0, r4
 80a14b4:	f7ff fec0 	bl	80a1238 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a14b8:	e7a1      	b.n	80a13fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a14ba:	2305      	movs	r3, #5
 80a14bc:	e7a3      	b.n	80a1406 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
 80a14be:	2005      	movs	r0, #5
 80a14c0:	e7c9      	b.n	80a1456 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
 80a14c2:	4435      	add	r5, r6
    while (wlen < full_length) {
 80a14c4:	e7d2      	b.n	80a146c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
 80a14c6:	d003      	beq.n	80a14d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
 80a14c8:	4620      	mov	r0, r4
 80a14ca:	f7ff fbe7 	bl	80a0c9c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
 80a14ce:	e7e6      	b.n	80a149e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
 80a14d0:	f001 ff52 	bl	80a3378 <_Z11BlynkMillisv>
 80a14d4:	6120      	str	r0, [r4, #16]
 80a14d6:	e7e2      	b.n	80a149e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
 80a14d8:	20000045 	.word	0x20000045

080a14dc <_ZN14WidgetTerminal5flushEv>:
    virtual void flush() {
 80a14dc:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (mOutQty) {
 80a14de:	f890 6049 	ldrb.w	r6, [r0, #73]	; 0x49
    virtual void flush() {
 80a14e2:	4604      	mov	r4, r0
 80a14e4:	b08b      	sub	sp, #44	; 0x2c
        if (mOutQty) {
 80a14e6:	b1e6      	cbz	r6, 80a1522 <_ZN14WidgetTerminal5flushEv+0x46>
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a14e8:	ab05      	add	r3, sp, #20
 80a14ea:	2500      	movs	r5, #0
 80a14ec:	9307      	str	r3, [sp, #28]
 80a14ee:	2308      	movs	r3, #8
            Blynk.virtualWriteBinary(mPin, mOutBuf, mOutQty);
 80a14f0:	7a07      	ldrb	r7, [r0, #8]
    BlynkParam(void* addr, size_t length, size_t buffsize)
 80a14f2:	490d      	ldr	r1, [pc, #52]	; (80a1528 <_ZN14WidgetTerminal5flushEv+0x4c>)
 80a14f4:	a807      	add	r0, sp, #28
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a14f6:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
 80a14fa:	f7ff f9b6 	bl	80a086a <_ZN10BlynkParam3addEPKc.part.0>
     */
    void virtualWriteBinary(int pin, const void* buff, size_t len) {
        char mem[8];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
        cmd.add(pin);
 80a14fe:	4639      	mov	r1, r7
 80a1500:	a807      	add	r0, sp, #28
 80a1502:	f7ff fa33 	bl	80a096c <_ZN10BlynkParam3addEi>
 80a1506:	f104 0309 	add.w	r3, r4, #9
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength(), buff, len);
 80a150a:	9301      	str	r3, [sp, #4]
 80a150c:	9b08      	ldr	r3, [sp, #32]
 80a150e:	462a      	mov	r2, r5
 80a1510:	9300      	str	r3, [sp, #0]
 80a1512:	2114      	movs	r1, #20
 80a1514:	9b07      	ldr	r3, [sp, #28]
 80a1516:	4805      	ldr	r0, [pc, #20]	; (80a152c <_ZN14WidgetTerminal5flushEv+0x50>)
 80a1518:	9602      	str	r6, [sp, #8]
 80a151a:	f7ff ff31 	bl	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            mOutQty = 0;
 80a151e:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
    }
 80a1522:	b00b      	add	sp, #44	; 0x2c
 80a1524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1526:	bf00      	nop
 80a1528:	080a78da 	.word	0x080a78da
 80a152c:	2000017c 	.word	0x2000017c

080a1530 <_Z7printlnPc>:

/*---------------------------------------------------------------------
print to serial port and to Blynk terminal
---------------------------------------------------------------------*/
void println(char *text)
{
 80a1530:	b510      	push	{r4, lr}
 80a1532:	4604      	mov	r4, r0
  timeStamp();
 80a1534:	f7ff faf8 	bl	80a0b28 <_Z9timeStampv>
  Serial.println(text);
 80a1538:	f003 fc40 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a153c:	4621      	mov	r1, r4
 80a153e:	f002 fe8e 	bl	80a425e <_ZN5Print7printlnEPKc>

  if (termEnabled == 1)
 80a1542:	4b06      	ldr	r3, [pc, #24]	; (80a155c <_Z7printlnPc+0x2c>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	2b01      	cmp	r3, #1
 80a1548:	d106      	bne.n	80a1558 <_Z7printlnPc+0x28>
  {
    terminal.println(text); // Ausgabe an BLYNK APP terminal
 80a154a:	4621      	mov	r1, r4
 80a154c:	4804      	ldr	r0, [pc, #16]	; (80a1560 <_Z7printlnPc+0x30>)
 80a154e:	f002 fe86 	bl	80a425e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a1552:	4803      	ldr	r0, [pc, #12]	; (80a1560 <_Z7printlnPc+0x30>)
 80a1554:	f7ff ffc2 	bl	80a14dc <_ZN14WidgetTerminal5flushEv>
  }
}
 80a1558:	bd10      	pop	{r4, pc}
 80a155a:	bf00      	nop
 80a155c:	20000334 	.word	0x20000334
 80a1560:	20000338 	.word	0x20000338

080a1564 <_Z5sleepi>:
{
 80a1564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (minutes < 1)
 80a1568:	1e05      	subs	r5, r0, #0
{
 80a156a:	b088      	sub	sp, #32
  if (minutes < 1)
 80a156c:	f340 80c4 	ble.w	80a16f8 <_Z5sleepi+0x194>
  if (minutes > 120)
 80a1570:	2d78      	cmp	r5, #120	; 0x78
 80a1572:	bfa8      	it	ge
 80a1574:	2578      	movge	r5, #120	; 0x78
  if ((dontSleepHW == 0) & (control.dontSleepSW == 0) & (st_funk_pumpe == 0))
 80a1576:	4f61      	ldr	r7, [pc, #388]	; (80a16fc <_Z5sleepi+0x198>)
 80a1578:	4b61      	ldr	r3, [pc, #388]	; (80a1700 <_Z5sleepi+0x19c>)
 80a157a:	687c      	ldr	r4, [r7, #4]
 80a157c:	681b      	ldr	r3, [r3, #0]
 80a157e:	4e61      	ldr	r6, [pc, #388]	; (80a1704 <_Z5sleepi+0x1a0>)
 80a1580:	431c      	orrs	r4, r3
 80a1582:	6833      	ldr	r3, [r6, #0]
 80a1584:	431c      	orrs	r4, r3
 80a1586:	f040 80b4 	bne.w	80a16f2 <_Z5sleepi+0x18e>
    println(" *** PREPARE SLEEP *** ");
 80a158a:	485f      	ldr	r0, [pc, #380]	; (80a1708 <_Z5sleepi+0x1a4>)
 80a158c:	f7ff ffd0 	bl	80a1530 <_Z7printlnPc>
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a1590:	4621      	mov	r1, r4
 80a1592:	4620      	mov	r0, r4
 80a1594:	f001 fc9c 	bl	80a2ed0 <_Z17switch_pumpe_mainii>
 80a1598:	4b5c      	ldr	r3, [pc, #368]	; (80a170c <_Z5sleepi+0x1a8>)
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a159a:	4621      	mov	r1, r4
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a159c:	6018      	str	r0, [r3, #0]
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a159e:	4620      	mov	r0, r4
 80a15a0:	f001 fd48 	bl	80a3034 <_Z20switch_pumpe_reserveii>
 80a15a4:	4b5a      	ldr	r3, [pc, #360]	; (80a1710 <_Z5sleepi+0x1ac>)
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a15a6:	4621      	mov	r1, r4
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a15a8:	6018      	str	r0, [r3, #0]
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a15aa:	4620      	mov	r0, r4
 80a15ac:	f001 fde0 	bl	80a3170 <_Z17switch_pumpe_funkii>
    System.sleep(D1, RISING, 60 * minutes); // no reset of device after wakeup
 80a15b0:	f04f 083c 	mov.w	r8, #60	; 0x3c
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a15b4:	6030      	str	r0, [r6, #0]
    delay(1000);
 80a15b6:	2601      	movs	r6, #1
 80a15b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a15bc:	f002 ffca 	bl	80a4554 <delay>
    WriteToDatabase("WASSER", "#### SLEEP Minutes #### : ", minutes);
 80a15c0:	462a      	mov	r2, r5
 80a15c2:	4954      	ldr	r1, [pc, #336]	; (80a1714 <_Z5sleepi+0x1b0>)
 80a15c4:	4854      	ldr	r0, [pc, #336]	; (80a1718 <_Z5sleepi+0x1b4>)
 80a15c6:	f7fe fddf 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
    delay(1000);
 80a15ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a15ce:	f002 ffc1 	bl	80a4554 <delay>
    System.sleep(D1, RISING, 60 * minutes); // no reset of device after wakeup
 80a15d2:	fb08 f505 	mul.w	r5, r8, r5
 80a15d6:	4b51      	ldr	r3, [pc, #324]	; (80a171c <_Z5sleepi+0x1b8>)
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 80a15d8:	4632      	mov	r2, r6
 80a15da:	681b      	ldr	r3, [r3, #0]
 80a15dc:	f10d 0116 	add.w	r1, sp, #22
 80a15e0:	9302      	str	r3, [sp, #8]
 80a15e2:	a806      	add	r0, sp, #24
 80a15e4:	f10d 0315 	add.w	r3, sp, #21
 80a15e8:	e9cd 6500 	strd	r6, r5, [sp]
 80a15ec:	f8ad 6016 	strh.w	r6, [sp, #22]
 80a15f0:	f88d 6015 	strb.w	r6, [sp, #21]
 80a15f4:	f002 fa46 	bl	80a3a84 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    println(" *** WAKE UP *** ");
 80a15f8:	4849      	ldr	r0, [pc, #292]	; (80a1720 <_Z5sleepi+0x1bc>)
 80a15fa:	f7ff ff99 	bl	80a1530 <_Z7printlnPc>
    WriteToDatabase("WAKE UP", "#### WAKE UP ####");
 80a15fe:	4949      	ldr	r1, [pc, #292]	; (80a1724 <_Z5sleepi+0x1c0>)
 80a1600:	4849      	ldr	r0, [pc, #292]	; (80a1728 <_Z5sleepi+0x1c4>)
 80a1602:	f7fe fd7b 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    WriteToDatabase("WAKE UP", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a1606:	68fa      	ldr	r2, [r7, #12]
 80a1608:	4948      	ldr	r1, [pc, #288]	; (80a172c <_Z5sleepi+0x1c8>)
 80a160a:	4847      	ldr	r0, [pc, #284]	; (80a1728 <_Z5sleepi+0x1c4>)
 80a160c:	f7fe fdbc 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a1610:	4633      	mov	r3, r6
 80a1612:	4622      	mov	r2, r4
 80a1614:	4946      	ldr	r1, [pc, #280]	; (80a1730 <_Z5sleepi+0x1cc>)
 80a1616:	e9cd 4400 	strd	r4, r4, [sp]
 80a161a:	4846      	ldr	r0, [pc, #280]	; (80a1734 <_Z5sleepi+0x1d0>)
 80a161c:	f002 f95e 	bl	80a38dc <spark_subscribe>
 80a1620:	4623      	mov	r3, r4
 80a1622:	4622      	mov	r2, r4
 80a1624:	4944      	ldr	r1, [pc, #272]	; (80a1738 <_Z5sleepi+0x1d4>)
 80a1626:	e9cd 4400 	strd	r4, r4, [sp]
 80a162a:	4844      	ldr	r0, [pc, #272]	; (80a173c <_Z5sleepi+0x1d8>)
 80a162c:	f002 f956 	bl	80a38dc <spark_subscribe>
    delay(500);
 80a1630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1634:	f002 ff8e 	bl	80a4554 <delay>
    Particle.publish("particle/device/name");
 80a1638:	a806      	add	r0, sp, #24
 80a163a:	f7ff f939 	bl	80a08b0 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0>
 80a163e:	a807      	add	r0, sp, #28
 80a1640:	f7fe fd45 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(500);
 80a1644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1648:	f002 ff84 	bl	80a4554 <delay>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a164c:	4b3c      	ldr	r3, [pc, #240]	; (80a1740 <_Z5sleepi+0x1dc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a164e:	4a3d      	ldr	r2, [pc, #244]	; (80a1744 <_Z5sleepi+0x1e0>)
 80a1650:	781b      	ldrb	r3, [r3, #0]
 80a1652:	493d      	ldr	r1, [pc, #244]	; (80a1748 <_Z5sleepi+0x1e4>)
 80a1654:	f88d 3000 	strb.w	r3, [sp]
 80a1658:	a806      	add	r0, sp, #24
 80a165a:	4643      	mov	r3, r8
 80a165c:	f003 f978 	bl	80a4950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a1660:	a807      	add	r0, sp, #28
 80a1662:	f7fe fd34 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    tnow = getTime();
 80a1666:	f7ff f9a5 	bl	80a09b4 <_Z7getTimev>
 80a166a:	4b38      	ldr	r3, [pc, #224]	; (80a174c <_Z5sleepi+0x1e8>)
 80a166c:	6018      	str	r0, [r3, #0]
    hwInit();
 80a166e:	f7ff f9e3 	bl	80a0a38 <_Z6hwInitv>
    EEPROM.get(0, control);
 80a1672:	f003 fe83 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a1676:	2214      	movs	r2, #20
 80a1678:	4639      	mov	r1, r7
 80a167a:	4620      	mov	r0, r4
 80a167c:	f001 ff16 	bl	80a34ac <HAL_EEPROM_Get>
    if ((control.pumpe_count_down < 4) | (control.pumpe_count_down > 40))
 80a1680:	68fb      	ldr	r3, [r7, #12]
 80a1682:	3b04      	subs	r3, #4
 80a1684:	2b24      	cmp	r3, #36	; 0x24
 80a1686:	d905      	bls.n	80a1694 <_Z5sleepi+0x130>
      control.pumpe_count_down = 16;
 80a1688:	2310      	movs	r3, #16
 80a168a:	60fb      	str	r3, [r7, #12]
      EEPROM.put(0, control);
 80a168c:	f003 fe76 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a1690:	f7ff f902 	bl	80a0898 <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0>
    if (control.dontGiessen == 1)
 80a1694:	68bb      	ldr	r3, [r7, #8]
 80a1696:	2b01      	cmp	r3, #1
 80a1698:	d103      	bne.n	80a16a2 <_Z5sleepi+0x13e>
      WriteToDatabase("WAKE UP", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a169a:	492d      	ldr	r1, [pc, #180]	; (80a1750 <_Z5sleepi+0x1ec>)
 80a169c:	4822      	ldr	r0, [pc, #136]	; (80a1728 <_Z5sleepi+0x1c4>)
 80a169e:	f7fe fd2d 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    Serial.printlnf("temp in : %d  temp out : %d ", temp_in, temp_out);
 80a16a2:	4c2c      	ldr	r4, [pc, #176]	; (80a1754 <_Z5sleepi+0x1f0>)
 80a16a4:	4d2c      	ldr	r5, [pc, #176]	; (80a1758 <_Z5sleepi+0x1f4>)
    get_Temperature(); 
 80a16a6:	f7ff f865 	bl	80a0774 <_Z15get_Temperaturev>
    Serial.printlnf("temp in : %d  temp out : %d ", temp_in, temp_out);
 80a16aa:	f003 fb87 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a16ae:	6822      	ldr	r2, [r4, #0]
 80a16b0:	682b      	ldr	r3, [r5, #0]
 80a16b2:	492a      	ldr	r1, [pc, #168]	; (80a175c <_Z5sleepi+0x1f8>)
 80a16b4:	f7fe fcfd 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a16b8:	6822      	ldr	r2, [r4, #0]
 80a16ba:	682b      	ldr	r3, [r5, #0]
 80a16bc:	4928      	ldr	r1, [pc, #160]	; (80a1760 <_Z5sleepi+0x1fc>)
 80a16be:	4829      	ldr	r0, [pc, #164]	; (80a1764 <_Z5sleepi+0x200>)
 80a16c0:	f002 f93c 	bl	80a393c <sprintf>
    WriteToDatabase("WAKE UP", timebuffer);
 80a16c4:	4927      	ldr	r1, [pc, #156]	; (80a1764 <_Z5sleepi+0x200>)
 80a16c6:	4818      	ldr	r0, [pc, #96]	; (80a1728 <_Z5sleepi+0x1c4>)
 80a16c8:	f7fe fd18 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    if ((Time.hour()>8) & (Time.hour()<11))
 80a16cc:	f002 fef4 	bl	80a44b8 <_ZN9TimeClass4hourEv>
 80a16d0:	4604      	mov	r4, r0
 80a16d2:	f002 fef1 	bl	80a44b8 <_ZN9TimeClass4hourEv>
 80a16d6:	2c08      	cmp	r4, #8
 80a16d8:	dd04      	ble.n	80a16e4 <_Z5sleepi+0x180>
 80a16da:	280a      	cmp	r0, #10
 80a16dc:	dc02      	bgt.n	80a16e4 <_Z5sleepi+0x180>
      TankFuellen(LOW_LEVEL_TANKFUELLEN);
 80a16de:	205f      	movs	r0, #95	; 0x5f
 80a16e0:	f001 fd9e 	bl	80a3220 <_Z11TankFuelleni>
    fast_counter = 60000;
 80a16e4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80a16e8:	4b1f      	ldr	r3, [pc, #124]	; (80a1768 <_Z5sleepi+0x204>)
 80a16ea:	601a      	str	r2, [r3, #0]
    termEnabled = 0;
 80a16ec:	2200      	movs	r2, #0
 80a16ee:	4b1f      	ldr	r3, [pc, #124]	; (80a176c <_Z5sleepi+0x208>)
 80a16f0:	601a      	str	r2, [r3, #0]
}
 80a16f2:	b008      	add	sp, #32
 80a16f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    minutes = 5;
 80a16f8:	2505      	movs	r5, #5
 80a16fa:	e73c      	b.n	80a1576 <_Z5sleepi+0x12>
 80a16fc:	200002d8 	.word	0x200002d8
 80a1700:	200002f0 	.word	0x200002f0
 80a1704:	2000031c 	.word	0x2000031c
 80a1708:	080a78dd 	.word	0x080a78dd
 80a170c:	20000320 	.word	0x20000320
 80a1710:	20000324 	.word	0x20000324
 80a1714:	080a78f5 	.word	0x080a78f5
 80a1718:	080a76d0 	.word	0x080a76d0
 80a171c:	200001d8 	.word	0x200001d8
 80a1720:	080a7910 	.word	0x080a7910
 80a1724:	080a7922 	.word	0x080a7922
 80a1728:	080a7934 	.word	0x080a7934
 80a172c:	080a793c 	.word	0x080a793c
 80a1730:	080a1a7d 	.word	0x080a1a7d
 80a1734:	080a7662 	.word	0x080a7662
 80a1738:	080a1b01 	.word	0x080a1b01
 80a173c:	080a7955 	.word	0x080a7955
 80a1740:	200001dd 	.word	0x200001dd
 80a1744:	200001de 	.word	0x200001de
 80a1748:	080a7963 	.word	0x080a7963
 80a174c:	200003b8 	.word	0x200003b8
 80a1750:	080a7970 	.word	0x080a7970
 80a1754:	20000328 	.word	0x20000328
 80a1758:	2000032c 	.word	0x2000032c
 80a175c:	080a799e 	.word	0x080a799e
 80a1760:	080a760a 	.word	0x080a760a
 80a1764:	20000384 	.word	0x20000384
 80a1768:	200002f4 	.word	0x200002f4
 80a176c:	20000334 	.word	0x20000334

080a1770 <_Z4helpv>:
{
 80a1770:	b508      	push	{r3, lr}
  println(" Hello ");
 80a1772:	4811      	ldr	r0, [pc, #68]	; (80a17b8 <_Z4helpv+0x48>)
 80a1774:	f7ff fedc 	bl	80a1530 <_Z7printlnPc>
  println(" a : Status");
 80a1778:	4810      	ldr	r0, [pc, #64]	; (80a17bc <_Z4helpv+0x4c>)
 80a177a:	f7ff fed9 	bl	80a1530 <_Z7printlnPc>
  println(" b : Blumen giessen");
 80a177e:	4810      	ldr	r0, [pc, #64]	; (80a17c0 <_Z4helpv+0x50>)
 80a1780:	f7ff fed6 	bl	80a1530 <_Z7printlnPc>
  println(" d : Zeitdauer Giessen verringern");
 80a1784:	480f      	ldr	r0, [pc, #60]	; (80a17c4 <_Z4helpv+0x54>)
 80a1786:	f7ff fed3 	bl	80a1530 <_Z7printlnPc>
  println(" i : Zeitdauer Giessen erhoehen");
 80a178a:	480f      	ldr	r0, [pc, #60]	; (80a17c8 <_Z4helpv+0x58>)
 80a178c:	f7ff fed0 	bl	80a1530 <_Z7printlnPc>
  println(" s : sleep enabled ");
 80a1790:	480e      	ldr	r0, [pc, #56]	; (80a17cc <_Z4helpv+0x5c>)
 80a1792:	f7ff fecd 	bl	80a1530 <_Z7printlnPc>
  println(" p : sleep disabled ");
 80a1796:	480e      	ldr	r0, [pc, #56]	; (80a17d0 <_Z4helpv+0x60>)
 80a1798:	f7ff feca 	bl	80a1530 <_Z7printlnPc>
  println(" u : clear reserve repetition counter ");  
 80a179c:	480d      	ldr	r0, [pc, #52]	; (80a17d4 <_Z4helpv+0x64>)
 80a179e:	f7ff fec7 	bl	80a1530 <_Z7printlnPc>
  println(" w : store config to EEPROM ");
 80a17a2:	480d      	ldr	r0, [pc, #52]	; (80a17d8 <_Z4helpv+0x68>)
 80a17a4:	f7ff fec4 	bl	80a1530 <_Z7printlnPc>
  println(" y : goto sleep ");  
 80a17a8:	480c      	ldr	r0, [pc, #48]	; (80a17dc <_Z4helpv+0x6c>)
 80a17aa:	f7ff fec1 	bl	80a1530 <_Z7printlnPc>
}
 80a17ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  println(" x : ultra sonic measurement ");
 80a17b2:	480b      	ldr	r0, [pc, #44]	; (80a17e0 <_Z4helpv+0x70>)
 80a17b4:	f7ff bebc 	b.w	80a1530 <_Z7printlnPc>
 80a17b8:	080a79bb 	.word	0x080a79bb
 80a17bc:	080a79c3 	.word	0x080a79c3
 80a17c0:	080a79cf 	.word	0x080a79cf
 80a17c4:	080a79e3 	.word	0x080a79e3
 80a17c8:	080a7a05 	.word	0x080a7a05
 80a17cc:	080a7a25 	.word	0x080a7a25
 80a17d0:	080a7a39 	.word	0x080a7a39
 80a17d4:	080a7a4e 	.word	0x080a7a4e
 80a17d8:	080a7a75 	.word	0x080a7a75
 80a17dc:	080a7a92 	.word	0x080a7a92
 80a17e0:	080a7aa3 	.word	0x080a7aa3

080a17e4 <BlynkWidgetWrite13>:
    Blynk.virtualWrite(V20, 0);
  }
}

BLYNK_WRITE(V13)
{
 80a17e4:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
 80a17e6:	6808      	ldr	r0, [r1, #0]
 80a17e8:	f005 f826 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a17ec:	2801      	cmp	r0, #1
 80a17ee:	d10d      	bne.n	80a180c <BlynkWidgetWrite13+0x28>
  {
    println(" Terminal disabled  ");
 80a17f0:	4807      	ldr	r0, [pc, #28]	; (80a1810 <BlynkWidgetWrite13+0x2c>)
 80a17f2:	f7ff fe9d 	bl	80a1530 <_Z7printlnPc>
    termEnabled = 0;
 80a17f6:	2300      	movs	r3, #0
 80a17f8:	4a06      	ldr	r2, [pc, #24]	; (80a1814 <BlynkWidgetWrite13+0x30>)
    termCounter = 0;
    WriteToDatabase("CONTROL","TERMINAL disabled by Blynk Button");
 80a17fa:	4907      	ldr	r1, [pc, #28]	; (80a1818 <BlynkWidgetWrite13+0x34>)
    termEnabled = 0;
 80a17fc:	6013      	str	r3, [r2, #0]
    termCounter = 0;
 80a17fe:	4a07      	ldr	r2, [pc, #28]	; (80a181c <BlynkWidgetWrite13+0x38>)
    WriteToDatabase("CONTROL","TERMINAL disabled by Blynk Button");
 80a1800:	4807      	ldr	r0, [pc, #28]	; (80a1820 <BlynkWidgetWrite13+0x3c>)
    termCounter = 0;
 80a1802:	6013      	str	r3, [r2, #0]
  }
}
 80a1804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WriteToDatabase("CONTROL","TERMINAL disabled by Blynk Button");
 80a1808:	f7fe bc78 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
}
 80a180c:	bd08      	pop	{r3, pc}
 80a180e:	bf00      	nop
 80a1810:	080a7ac1 	.word	0x080a7ac1
 80a1814:	20000334 	.word	0x20000334
 80a1818:	080a7ad6 	.word	0x080a7ad6
 80a181c:	20000330 	.word	0x20000330
 80a1820:	080a77cf 	.word	0x080a77cf

080a1824 <BlynkWidgetWrite14>:

BLYNK_WRITE(V14)
{
 80a1824:	b508      	push	{r3, lr}
 80a1826:	6808      	ldr	r0, [r1, #0]
 80a1828:	f005 f806 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a182c:	2801      	cmp	r0, #1
 80a182e:	d10d      	bne.n	80a184c <BlynkWidgetWrite14+0x28>
  {
    termEnabled = 1;
 80a1830:	4b07      	ldr	r3, [pc, #28]	; (80a1850 <BlynkWidgetWrite14+0x2c>)
 80a1832:	6018      	str	r0, [r3, #0]
    println(" Terminal enabled  ");
 80a1834:	4807      	ldr	r0, [pc, #28]	; (80a1854 <BlynkWidgetWrite14+0x30>)
 80a1836:	f7ff fe7b 	bl	80a1530 <_Z7printlnPc>
    termCounter = 10;
 80a183a:	220a      	movs	r2, #10
 80a183c:	4b06      	ldr	r3, [pc, #24]	; (80a1858 <BlynkWidgetWrite14+0x34>)
    WriteToDatabase("CONTROL","TERMINAL enabled by Blynk Button");   
 80a183e:	4907      	ldr	r1, [pc, #28]	; (80a185c <BlynkWidgetWrite14+0x38>)
    termCounter = 10;
 80a1840:	601a      	str	r2, [r3, #0]
    WriteToDatabase("CONTROL","TERMINAL enabled by Blynk Button");   
 80a1842:	4807      	ldr	r0, [pc, #28]	; (80a1860 <BlynkWidgetWrite14+0x3c>)
  }
}
 80a1844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WriteToDatabase("CONTROL","TERMINAL enabled by Blynk Button");   
 80a1848:	f7fe bc58 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
}
 80a184c:	bd08      	pop	{r3, pc}
 80a184e:	bf00      	nop
 80a1850:	20000334 	.word	0x20000334
 80a1854:	080a7af8 	.word	0x080a7af8
 80a1858:	20000330 	.word	0x20000330
 80a185c:	080a7b0c 	.word	0x080a7b0c
 80a1860:	080a77cf 	.word	0x080a77cf

080a1864 <BlynkWidgetWrite25>:

BLYNK_WRITE(V25)
{
 80a1864:	b508      	push	{r3, lr}
 80a1866:	6808      	ldr	r0, [r1, #0]
 80a1868:	f004 ffe6 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a186c:	2801      	cmp	r0, #1
 80a186e:	d10e      	bne.n	80a188e <BlynkWidgetWrite25+0x2a>
  {
    control.dontSleepSW = 1;
 80a1870:	4b07      	ldr	r3, [pc, #28]	; (80a1890 <BlynkWidgetWrite25+0x2c>)
 80a1872:	6058      	str	r0, [r3, #4]
    EEPROM.put(0, control);
 80a1874:	f003 fd82 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a1878:	f7ff f80e 	bl	80a0898 <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0>
    WriteToDatabase("CONTROL", "SLEEP DISABLED BY BLYNK BUTTON ");
 80a187c:	4805      	ldr	r0, [pc, #20]	; (80a1894 <BlynkWidgetWrite25+0x30>)
 80a187e:	4906      	ldr	r1, [pc, #24]	; (80a1898 <BlynkWidgetWrite25+0x34>)
 80a1880:	f7fe fc3c 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Sleep Mode Disabled by blynk button ");
  }
}
 80a1884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Sleep Mode Disabled by blynk button ");
 80a1888:	4804      	ldr	r0, [pc, #16]	; (80a189c <BlynkWidgetWrite25+0x38>)
 80a188a:	f7ff be51 	b.w	80a1530 <_Z7printlnPc>
}
 80a188e:	bd08      	pop	{r3, pc}
 80a1890:	200002d8 	.word	0x200002d8
 80a1894:	080a77cf 	.word	0x080a77cf
 80a1898:	080a7b2d 	.word	0x080a7b2d
 80a189c:	080a7b4d 	.word	0x080a7b4d

080a18a0 <BlynkWidgetWrite26>:

BLYNK_WRITE(V26)
{
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	6808      	ldr	r0, [r1, #0]
 80a18a4:	f004 ffc8 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a18a8:	2801      	cmp	r0, #1
 80a18aa:	d10f      	bne.n	80a18cc <BlynkWidgetWrite26+0x2c>
  {
    control.dontSleepSW = 0;
 80a18ac:	2200      	movs	r2, #0
 80a18ae:	4b08      	ldr	r3, [pc, #32]	; (80a18d0 <BlynkWidgetWrite26+0x30>)
 80a18b0:	605a      	str	r2, [r3, #4]
    EEPROM.put(0, control);
 80a18b2:	f003 fd63 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a18b6:	f7fe ffef 	bl	80a0898 <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0>
    WriteToDatabase("CONTROL", "SLEEP ENABLED BY BLYNK BUTTON ");
 80a18ba:	4806      	ldr	r0, [pc, #24]	; (80a18d4 <BlynkWidgetWrite26+0x34>)
 80a18bc:	4906      	ldr	r1, [pc, #24]	; (80a18d8 <BlynkWidgetWrite26+0x38>)
 80a18be:	f7fe fc1d 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Sleep Mode Enabled by blynk button ");
  }
}
 80a18c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Sleep Mode Enabled by blynk button ");
 80a18c6:	4805      	ldr	r0, [pc, #20]	; (80a18dc <BlynkWidgetWrite26+0x3c>)
 80a18c8:	f7ff be32 	b.w	80a1530 <_Z7printlnPc>
}
 80a18cc:	bd08      	pop	{r3, pc}
 80a18ce:	bf00      	nop
 80a18d0:	200002d8 	.word	0x200002d8
 80a18d4:	080a77cf 	.word	0x080a77cf
 80a18d8:	080a7b73 	.word	0x080a7b73
 80a18dc:	080a7b92 	.word	0x080a7b92

080a18e0 <BlynkWidgetWrite27>:

BLYNK_WRITE(V27)
{
 80a18e0:	b508      	push	{r3, lr}
 80a18e2:	6808      	ldr	r0, [r1, #0]
 80a18e4:	f004 ffa8 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a18e8:	2801      	cmp	r0, #1
 80a18ea:	d10b      	bne.n	80a1904 <BlynkWidgetWrite27+0x24>
  {
    TankFuellen(250);
 80a18ec:	20fa      	movs	r0, #250	; 0xfa
 80a18ee:	f001 fc97 	bl	80a3220 <_Z11TankFuelleni>
    WriteToDatabase("CONTROL", "Tankfuellen by BLYNK button ");
 80a18f2:	4805      	ldr	r0, [pc, #20]	; (80a1908 <BlynkWidgetWrite27+0x28>)
 80a18f4:	4905      	ldr	r1, [pc, #20]	; (80a190c <BlynkWidgetWrite27+0x2c>)
 80a18f6:	f7fe fc01 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Reserve Pumpe eingeschaltet by button  ");
  }
}
 80a18fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Reserve Pumpe eingeschaltet by button  ");
 80a18fe:	4804      	ldr	r0, [pc, #16]	; (80a1910 <BlynkWidgetWrite27+0x30>)
 80a1900:	f7ff be16 	b.w	80a1530 <_Z7printlnPc>
}
 80a1904:	bd08      	pop	{r3, pc}
 80a1906:	bf00      	nop
 80a1908:	080a77cf 	.word	0x080a77cf
 80a190c:	080a7bb7 	.word	0x080a7bb7
 80a1910:	080a7bd4 	.word	0x080a7bd4

080a1914 <BlynkWidgetWrite28>:

BLYNK_WRITE(V28)
{
 80a1914:	b508      	push	{r3, lr}
 80a1916:	6808      	ldr	r0, [r1, #0]
 80a1918:	f004 ff8e 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a191c:	2801      	cmp	r0, #1
 80a191e:	d10e      	bne.n	80a193e <BlynkWidgetWrite28+0x2a>
  {
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1920:	2100      	movs	r1, #0
 80a1922:	4608      	mov	r0, r1
 80a1924:	f001 fb86 	bl	80a3034 <_Z20switch_pumpe_reserveii>
 80a1928:	4b05      	ldr	r3, [pc, #20]	; (80a1940 <BlynkWidgetWrite28+0x2c>)
    WriteToDatabase("CONTROL", "Reserve Pumpe off by BLYNK button ");
 80a192a:	4906      	ldr	r1, [pc, #24]	; (80a1944 <BlynkWidgetWrite28+0x30>)
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a192c:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "Reserve Pumpe off by BLYNK button ");
 80a192e:	4806      	ldr	r0, [pc, #24]	; (80a1948 <BlynkWidgetWrite28+0x34>)
 80a1930:	f7fe fbe4 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Reserve Pumpe ausgeschaltet by button ");
  }
}
 80a1934:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Reserve Pumpe ausgeschaltet by button ");
 80a1938:	4804      	ldr	r0, [pc, #16]	; (80a194c <BlynkWidgetWrite28+0x38>)
 80a193a:	f7ff bdf9 	b.w	80a1530 <_Z7printlnPc>
}
 80a193e:	bd08      	pop	{r3, pc}
 80a1940:	20000324 	.word	0x20000324
 80a1944:	080a7bfd 	.word	0x080a7bfd
 80a1948:	080a77cf 	.word	0x080a77cf
 80a194c:	080a7c20 	.word	0x080a7c20

080a1950 <BlynkWidgetWrite29>:

BLYNK_WRITE(V29)
{
 80a1950:	b508      	push	{r3, lr}
 80a1952:	6808      	ldr	r0, [r1, #0]
 80a1954:	f004 ff70 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1958:	2801      	cmp	r0, #1
 80a195a:	d10e      	bne.n	80a197a <BlynkWidgetWrite29+0x2a>
  {
    control.dontGiessen = 1;
 80a195c:	4b07      	ldr	r3, [pc, #28]	; (80a197c <BlynkWidgetWrite29+0x2c>)
 80a195e:	6098      	str	r0, [r3, #8]
    EEPROM.put(0, control);
 80a1960:	f003 fd0c 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a1964:	f7fe ff98 	bl	80a0898 <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0>
    WriteToDatabase("CONTROL", "Blumen giessen deaktiviert by Blynk Button ");
 80a1968:	4805      	ldr	r0, [pc, #20]	; (80a1980 <BlynkWidgetWrite29+0x30>)
 80a196a:	4906      	ldr	r1, [pc, #24]	; (80a1984 <BlynkWidgetWrite29+0x34>)
 80a196c:	f7fe fbc6 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println("Blumen giessen deaktiviert ");
  }
}
 80a1970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println("Blumen giessen deaktiviert ");
 80a1974:	4804      	ldr	r0, [pc, #16]	; (80a1988 <BlynkWidgetWrite29+0x38>)
 80a1976:	f7ff bddb 	b.w	80a1530 <_Z7printlnPc>
}
 80a197a:	bd08      	pop	{r3, pc}
 80a197c:	200002d8 	.word	0x200002d8
 80a1980:	080a77cf 	.word	0x080a77cf
 80a1984:	080a7c48 	.word	0x080a7c48
 80a1988:	080a7c74 	.word	0x080a7c74

080a198c <BlynkWidgetWrite30>:

BLYNK_WRITE(V30)
{
 80a198c:	b508      	push	{r3, lr}
 80a198e:	6808      	ldr	r0, [r1, #0]
 80a1990:	f004 ff52 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1994:	2801      	cmp	r0, #1
 80a1996:	d10f      	bne.n	80a19b8 <BlynkWidgetWrite30+0x2c>
  {
    control.dontGiessen = 0;
 80a1998:	2200      	movs	r2, #0
 80a199a:	4b08      	ldr	r3, [pc, #32]	; (80a19bc <BlynkWidgetWrite30+0x30>)
 80a199c:	609a      	str	r2, [r3, #8]
    EEPROM.put(0, control);
 80a199e:	f003 fced 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a19a2:	f7fe ff79 	bl	80a0898 <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0>
    WriteToDatabase("CONTROL", "Blumen giessen aktiviert by Blynk Button ");
 80a19a6:	4806      	ldr	r0, [pc, #24]	; (80a19c0 <BlynkWidgetWrite30+0x34>)
 80a19a8:	4906      	ldr	r1, [pc, #24]	; (80a19c4 <BlynkWidgetWrite30+0x38>)
 80a19aa:	f7fe fba7 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println("Blumen giessen aktiviert ");
  }
}
 80a19ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println("Blumen giessen aktiviert ");
 80a19b2:	4805      	ldr	r0, [pc, #20]	; (80a19c8 <BlynkWidgetWrite30+0x3c>)
 80a19b4:	f7ff bdbc 	b.w	80a1530 <_Z7printlnPc>
}
 80a19b8:	bd08      	pop	{r3, pc}
 80a19ba:	bf00      	nop
 80a19bc:	200002d8 	.word	0x200002d8
 80a19c0:	080a77cf 	.word	0x080a77cf
 80a19c4:	080a7c90 	.word	0x080a7c90
 80a19c8:	080a7cba 	.word	0x080a7cba

080a19cc <BlynkWidgetWrite31>:

BLYNK_WRITE(V31)
{
 80a19cc:	b508      	push	{r3, lr}
 80a19ce:	6808      	ldr	r0, [r1, #0]
 80a19d0:	f004 ff32 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a19d4:	2801      	cmp	r0, #1
 80a19d6:	d10e      	bne.n	80a19f6 <BlynkWidgetWrite31+0x2a>
  {
    st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a19d8:	4b07      	ldr	r3, [pc, #28]	; (80a19f8 <BlynkWidgetWrite31+0x2c>)
 80a19da:	68d9      	ldr	r1, [r3, #12]
 80a19dc:	f001 fa78 	bl	80a2ed0 <_Z17switch_pumpe_mainii>
 80a19e0:	4b06      	ldr	r3, [pc, #24]	; (80a19fc <BlynkWidgetWrite31+0x30>)
    WriteToDatabase("CONTROL", "Main Pumpe by button ");
 80a19e2:	4907      	ldr	r1, [pc, #28]	; (80a1a00 <BlynkWidgetWrite31+0x34>)
    st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a19e4:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "Main Pumpe by button ");
 80a19e6:	4807      	ldr	r0, [pc, #28]	; (80a1a04 <BlynkWidgetWrite31+0x38>)
 80a19e8:	f7fe fb88 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Main Pumpe eingeschaltet by button  ");
  }
}
 80a19ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Main Pumpe eingeschaltet by button  ");
 80a19f0:	4805      	ldr	r0, [pc, #20]	; (80a1a08 <BlynkWidgetWrite31+0x3c>)
 80a19f2:	f7ff bd9d 	b.w	80a1530 <_Z7printlnPc>
}
 80a19f6:	bd08      	pop	{r3, pc}
 80a19f8:	200002d8 	.word	0x200002d8
 80a19fc:	20000320 	.word	0x20000320
 80a1a00:	080a7cd4 	.word	0x080a7cd4
 80a1a04:	080a77cf 	.word	0x080a77cf
 80a1a08:	080a7cea 	.word	0x080a7cea

080a1a0c <BlynkWidgetWrite32>:

BLYNK_WRITE(V32)
{
 80a1a0c:	b508      	push	{r3, lr}
 80a1a0e:	6808      	ldr	r0, [r1, #0]
 80a1a10:	f004 ff12 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1a14:	2801      	cmp	r0, #1
 80a1a16:	d10e      	bne.n	80a1a36 <BlynkWidgetWrite32+0x2a>
  {
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a1a18:	2100      	movs	r1, #0
 80a1a1a:	4608      	mov	r0, r1
 80a1a1c:	f001 fa58 	bl	80a2ed0 <_Z17switch_pumpe_mainii>
 80a1a20:	4b05      	ldr	r3, [pc, #20]	; (80a1a38 <BlynkWidgetWrite32+0x2c>)
    WriteToDatabase("CONTROL", "Main Pumpe ausgeschaltet by button ");
 80a1a22:	4906      	ldr	r1, [pc, #24]	; (80a1a3c <BlynkWidgetWrite32+0x30>)
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a1a24:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "Main Pumpe ausgeschaltet by button ");
 80a1a26:	4806      	ldr	r0, [pc, #24]	; (80a1a40 <BlynkWidgetWrite32+0x34>)
 80a1a28:	f7fe fb68 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Main Pumpe ausgeschaltet by button ");
  }
}
 80a1a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Main Pumpe ausgeschaltet by button ");
 80a1a30:	4804      	ldr	r0, [pc, #16]	; (80a1a44 <BlynkWidgetWrite32+0x38>)
 80a1a32:	f7ff bd7d 	b.w	80a1530 <_Z7printlnPc>
}
 80a1a36:	bd08      	pop	{r3, pc}
 80a1a38:	20000320 	.word	0x20000320
 80a1a3c:	080a7d11 	.word	0x080a7d11
 80a1a40:	080a77cf 	.word	0x080a77cf
 80a1a44:	080a7d10 	.word	0x080a7d10

080a1a48 <_Z7println6String>:
{
 80a1a48:	b510      	push	{r4, lr}
 80a1a4a:	4604      	mov	r4, r0
  timeStamp();
 80a1a4c:	f7ff f86c 	bl	80a0b28 <_Z9timeStampv>
  Serial.println(text);
 80a1a50:	f003 f9b4 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1a54:	6821      	ldr	r1, [r4, #0]
 80a1a56:	f002 fc02 	bl	80a425e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a1a5a:	4b06      	ldr	r3, [pc, #24]	; (80a1a74 <_Z7println6String+0x2c>)
 80a1a5c:	681b      	ldr	r3, [r3, #0]
 80a1a5e:	2b01      	cmp	r3, #1
 80a1a60:	d106      	bne.n	80a1a70 <_Z7println6String+0x28>
    terminal.println(text); // Ausgabe an BLYNK APP terminal
 80a1a62:	6821      	ldr	r1, [r4, #0]
 80a1a64:	4804      	ldr	r0, [pc, #16]	; (80a1a78 <_Z7println6String+0x30>)
 80a1a66:	f002 fbfa 	bl	80a425e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a1a6a:	4803      	ldr	r0, [pc, #12]	; (80a1a78 <_Z7println6String+0x30>)
 80a1a6c:	f7ff fd36 	bl	80a14dc <_ZN14WidgetTerminal5flushEv>
}
 80a1a70:	bd10      	pop	{r4, pc}
 80a1a72:	bf00      	nop
 80a1a74:	20000334 	.word	0x20000334
 80a1a78:	20000338 	.word	0x20000338

080a1a7c <_Z17deviceNameHandlerPKcS0_>:
{
 80a1a7c:	b570      	push	{r4, r5, r6, lr}
 80a1a7e:	4605      	mov	r5, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a1a80:	4e1e      	ldr	r6, [pc, #120]	; (80a1afc <_Z17deviceNameHandlerPKcS0_+0x80>)
 80a1a82:	b08c      	sub	sp, #48	; 0x30
 80a1a84:	460c      	mov	r4, r1
 80a1a86:	a804      	add	r0, sp, #16
 80a1a88:	4631      	mov	r1, r6
 80a1a8a:	f002 fb1b 	bl	80a40c4 <_ZN6StringC1EPKc>
  println("received  : " + String(topic));
 80a1a8e:	4629      	mov	r1, r5
 80a1a90:	4668      	mov	r0, sp
 80a1a92:	f002 fb17 	bl	80a40c4 <_ZN6StringC1EPKc>
 80a1a96:	4669      	mov	r1, sp
 80a1a98:	a804      	add	r0, sp, #16
 80a1a9a:	f002 fb7c 	bl	80a4196 <_ZplRK15StringSumHelperRK6String>
 80a1a9e:	4601      	mov	r1, r0
 80a1aa0:	a808      	add	r0, sp, #32
 80a1aa2:	f002 fb4e 	bl	80a4142 <_ZN6StringC1ERKS_>
 80a1aa6:	a808      	add	r0, sp, #32
 80a1aa8:	f7ff ffce 	bl	80a1a48 <_Z7println6String>
 80a1aac:	a808      	add	r0, sp, #32
 80a1aae:	f002 fabf 	bl	80a4030 <_ZN6StringD1Ev>
 80a1ab2:	4668      	mov	r0, sp
 80a1ab4:	f002 fabc 	bl	80a4030 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1ab8:	a804      	add	r0, sp, #16
 80a1aba:	f002 fab9 	bl	80a4030 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a1abe:	4631      	mov	r1, r6
 80a1ac0:	a804      	add	r0, sp, #16
 80a1ac2:	f002 faff 	bl	80a40c4 <_ZN6StringC1EPKc>
  println("received  : " + String(data));
 80a1ac6:	4621      	mov	r1, r4
 80a1ac8:	4668      	mov	r0, sp
 80a1aca:	f002 fafb 	bl	80a40c4 <_ZN6StringC1EPKc>
 80a1ace:	4669      	mov	r1, sp
 80a1ad0:	a804      	add	r0, sp, #16
 80a1ad2:	f002 fb60 	bl	80a4196 <_ZplRK15StringSumHelperRK6String>
 80a1ad6:	4601      	mov	r1, r0
 80a1ad8:	a808      	add	r0, sp, #32
 80a1ada:	f002 fb32 	bl	80a4142 <_ZN6StringC1ERKS_>
 80a1ade:	a808      	add	r0, sp, #32
 80a1ae0:	f7ff ffb2 	bl	80a1a48 <_Z7println6String>
 80a1ae4:	a808      	add	r0, sp, #32
 80a1ae6:	f002 faa3 	bl	80a4030 <_ZN6StringD1Ev>
 80a1aea:	4668      	mov	r0, sp
 80a1aec:	f002 faa0 	bl	80a4030 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1af0:	a804      	add	r0, sp, #16
 80a1af2:	f002 fa9d 	bl	80a4030 <_ZN6StringD1Ev>
}
 80a1af6:	b00c      	add	sp, #48	; 0x30
 80a1af8:	bd70      	pop	{r4, r5, r6, pc}
 80a1afa:	bf00      	nop
 80a1afc:	080a7d35 	.word	0x080a7d35

080a1b00 <_Z16myWebHookHandlerPKcS0_>:
{
 80a1b00:	b570      	push	{r4, r5, r6, lr}
 80a1b02:	460d      	mov	r5, r1
 80a1b04:	b08c      	sub	sp, #48	; 0x30
	StringSumHelper(const char *p) : String(p) {}
 80a1b06:	4932      	ldr	r1, [pc, #200]	; (80a1bd0 <_Z16myWebHookHandlerPKcS0_+0xd0>)
 80a1b08:	a804      	add	r0, sp, #16
 80a1b0a:	f002 fadb 	bl	80a40c4 <_ZN6StringC1EPKc>
  println("received  : " + String(data));
 80a1b0e:	4629      	mov	r1, r5
 80a1b10:	4668      	mov	r0, sp
 80a1b12:	f002 fad7 	bl	80a40c4 <_ZN6StringC1EPKc>
 80a1b16:	4669      	mov	r1, sp
 80a1b18:	a804      	add	r0, sp, #16
 80a1b1a:	f002 fb3c 	bl	80a4196 <_ZplRK15StringSumHelperRK6String>
 80a1b1e:	4601      	mov	r1, r0
 80a1b20:	a808      	add	r0, sp, #32
 80a1b22:	f002 fb0e 	bl	80a4142 <_ZN6StringC1ERKS_>
 80a1b26:	a808      	add	r0, sp, #32
 80a1b28:	f7ff ff8e 	bl	80a1a48 <_Z7println6String>
 80a1b2c:	a808      	add	r0, sp, #32
 80a1b2e:	f002 fa7f 	bl	80a4030 <_ZN6StringD1Ev>
 80a1b32:	4668      	mov	r0, sp
 80a1b34:	f002 fa7c 	bl	80a4030 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1b38:	a804      	add	r0, sp, #16
 80a1b3a:	f002 fa79 	bl	80a4030 <_ZN6StringD1Ev>
  if ((String(data).startsWith("off")) & (control.dontGiessen == 0))
 80a1b3e:	4629      	mov	r1, r5
 80a1b40:	a804      	add	r0, sp, #16
 80a1b42:	f002 fabf 	bl	80a40c4 <_ZN6StringC1EPKc>
 80a1b46:	4923      	ldr	r1, [pc, #140]	; (80a1bd4 <_Z16myWebHookHandlerPKcS0_+0xd4>)
 80a1b48:	a808      	add	r0, sp, #32
 80a1b4a:	f002 fabb 	bl	80a40c4 <_ZN6StringC1EPKc>
 80a1b4e:	a908      	add	r1, sp, #32
 80a1b50:	a804      	add	r0, sp, #16
 80a1b52:	f002 fb42 	bl	80a41da <_ZNK6String10startsWithERKS_>
 80a1b56:	4c20      	ldr	r4, [pc, #128]	; (80a1bd8 <_Z16myWebHookHandlerPKcS0_+0xd8>)
 80a1b58:	68a6      	ldr	r6, [r4, #8]
 80a1b5a:	2e00      	cmp	r6, #0
 80a1b5c:	bf14      	ite	ne
 80a1b5e:	2600      	movne	r6, #0
 80a1b60:	f000 0601 	andeq.w	r6, r0, #1
 80a1b64:	a808      	add	r0, sp, #32
 80a1b66:	f002 fa63 	bl	80a4030 <_ZN6StringD1Ev>
 80a1b6a:	a804      	add	r0, sp, #16
 80a1b6c:	f002 fa60 	bl	80a4030 <_ZN6StringD1Ev>
 80a1b70:	b14e      	cbz	r6, 80a1b86 <_Z16myWebHookHandlerPKcS0_+0x86>
    control.dontGiessen = 1;
 80a1b72:	2301      	movs	r3, #1
 80a1b74:	60a3      	str	r3, [r4, #8]
    EEPROM.put(0, control);
 80a1b76:	f003 fc01 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a1b7a:	f7fe fe8d 	bl	80a0898 <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0>
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN DEAKTIVIERT by WebHook");
 80a1b7e:	4917      	ldr	r1, [pc, #92]	; (80a1bdc <_Z16myWebHookHandlerPKcS0_+0xdc>)
 80a1b80:	4817      	ldr	r0, [pc, #92]	; (80a1be0 <_Z16myWebHookHandlerPKcS0_+0xe0>)
 80a1b82:	f7fe fabb 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if ((String(data).startsWith("on")) & (control.dontGiessen == 1))
 80a1b86:	4629      	mov	r1, r5
 80a1b88:	a804      	add	r0, sp, #16
 80a1b8a:	f002 fa9b 	bl	80a40c4 <_ZN6StringC1EPKc>
 80a1b8e:	4915      	ldr	r1, [pc, #84]	; (80a1be4 <_Z16myWebHookHandlerPKcS0_+0xe4>)
 80a1b90:	a808      	add	r0, sp, #32
 80a1b92:	f002 fa97 	bl	80a40c4 <_ZN6StringC1EPKc>
 80a1b96:	a908      	add	r1, sp, #32
 80a1b98:	a804      	add	r0, sp, #16
 80a1b9a:	f002 fb1e 	bl	80a41da <_ZNK6String10startsWithERKS_>
 80a1b9e:	68a5      	ldr	r5, [r4, #8]
 80a1ba0:	2d01      	cmp	r5, #1
 80a1ba2:	bf14      	ite	ne
 80a1ba4:	2500      	movne	r5, #0
 80a1ba6:	f000 0501 	andeq.w	r5, r0, #1
 80a1baa:	a808      	add	r0, sp, #32
 80a1bac:	f002 fa40 	bl	80a4030 <_ZN6StringD1Ev>
 80a1bb0:	a804      	add	r0, sp, #16
 80a1bb2:	f002 fa3d 	bl	80a4030 <_ZN6StringD1Ev>
 80a1bb6:	b14d      	cbz	r5, 80a1bcc <_Z16myWebHookHandlerPKcS0_+0xcc>
    control.dontGiessen = 0;
 80a1bb8:	2300      	movs	r3, #0
 80a1bba:	60a3      	str	r3, [r4, #8]
    EEPROM.put(0, control);
 80a1bbc:	f003 fbde 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a1bc0:	f7fe fe6a 	bl	80a0898 <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0>
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN AKTIVIERT by WebHook");
 80a1bc4:	4908      	ldr	r1, [pc, #32]	; (80a1be8 <_Z16myWebHookHandlerPKcS0_+0xe8>)
 80a1bc6:	4806      	ldr	r0, [pc, #24]	; (80a1be0 <_Z16myWebHookHandlerPKcS0_+0xe0>)
 80a1bc8:	f7fe fa98 	bl	80a00fc <_Z15WriteToDatabasePcS_>
}
 80a1bcc:	b00c      	add	sp, #48	; 0x30
 80a1bce:	bd70      	pop	{r4, r5, r6, pc}
 80a1bd0:	080a7d35 	.word	0x080a7d35
 80a1bd4:	080a7d42 	.word	0x080a7d42
 80a1bd8:	200002d8 	.word	0x200002d8
 80a1bdc:	080a7d46 	.word	0x080a7d46
 80a1be0:	080a77cf 	.word	0x080a77cf
 80a1be4:	080a7b2a 	.word	0x080a7b2a
 80a1be8:	080a7d73 	.word	0x080a7d73

080a1bec <_Z7printlnPc6String>:
{
 80a1bec:	b538      	push	{r3, r4, r5, lr}
 80a1bee:	4604      	mov	r4, r0
 80a1bf0:	460d      	mov	r5, r1
  timeStamp();
 80a1bf2:	f7fe ff99 	bl	80a0b28 <_Z9timeStampv>
  sprintf(buffer, "%s %d", text, data.c_str());
 80a1bf6:	682b      	ldr	r3, [r5, #0]
 80a1bf8:	4622      	mov	r2, r4
 80a1bfa:	490a      	ldr	r1, [pc, #40]	; (80a1c24 <_Z7printlnPc6String+0x38>)
 80a1bfc:	480a      	ldr	r0, [pc, #40]	; (80a1c28 <_Z7printlnPc6String+0x3c>)
 80a1bfe:	f001 fe9d 	bl	80a393c <sprintf>
  Serial.println(buffer);
 80a1c02:	f003 f8db 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1c06:	4908      	ldr	r1, [pc, #32]	; (80a1c28 <_Z7printlnPc6String+0x3c>)
 80a1c08:	f002 fb29 	bl	80a425e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a1c0c:	4b07      	ldr	r3, [pc, #28]	; (80a1c2c <_Z7printlnPc6String+0x40>)
 80a1c0e:	681b      	ldr	r3, [r3, #0]
 80a1c10:	2b01      	cmp	r3, #1
 80a1c12:	d106      	bne.n	80a1c22 <_Z7printlnPc6String+0x36>
    terminal.println(buffer); // Ausgabe an BLYNK APP terminal
 80a1c14:	4904      	ldr	r1, [pc, #16]	; (80a1c28 <_Z7printlnPc6String+0x3c>)
 80a1c16:	4806      	ldr	r0, [pc, #24]	; (80a1c30 <_Z7printlnPc6String+0x44>)
 80a1c18:	f002 fb21 	bl	80a425e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a1c1c:	4804      	ldr	r0, [pc, #16]	; (80a1c30 <_Z7printlnPc6String+0x44>)
 80a1c1e:	f7ff fc5d 	bl	80a14dc <_ZN14WidgetTerminal5flushEv>
}
 80a1c22:	bd38      	pop	{r3, r4, r5, pc}
 80a1c24:	080a7d9e 	.word	0x080a7d9e
 80a1c28:	200001de 	.word	0x200001de
 80a1c2c:	20000334 	.word	0x20000334
 80a1c30:	20000338 	.word	0x20000338

080a1c34 <_Z7printlnPci>:
{
 80a1c34:	b538      	push	{r3, r4, r5, lr}
 80a1c36:	4604      	mov	r4, r0
 80a1c38:	460d      	mov	r5, r1
  timeStamp();
 80a1c3a:	f7fe ff75 	bl	80a0b28 <_Z9timeStampv>
  sprintf(buffer, "%s %d", text, data);
 80a1c3e:	462b      	mov	r3, r5
 80a1c40:	4622      	mov	r2, r4
 80a1c42:	490a      	ldr	r1, [pc, #40]	; (80a1c6c <_Z7printlnPci+0x38>)
 80a1c44:	480a      	ldr	r0, [pc, #40]	; (80a1c70 <_Z7printlnPci+0x3c>)
 80a1c46:	f001 fe79 	bl	80a393c <sprintf>
  Serial.println(buffer);
 80a1c4a:	f003 f8b7 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1c4e:	4908      	ldr	r1, [pc, #32]	; (80a1c70 <_Z7printlnPci+0x3c>)
 80a1c50:	f002 fb05 	bl	80a425e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a1c54:	4b07      	ldr	r3, [pc, #28]	; (80a1c74 <_Z7printlnPci+0x40>)
 80a1c56:	681b      	ldr	r3, [r3, #0]
 80a1c58:	2b01      	cmp	r3, #1
 80a1c5a:	d106      	bne.n	80a1c6a <_Z7printlnPci+0x36>
    terminal.println(buffer); // Ausgabe an BLYNK APP terminal
 80a1c5c:	4904      	ldr	r1, [pc, #16]	; (80a1c70 <_Z7printlnPci+0x3c>)
 80a1c5e:	4806      	ldr	r0, [pc, #24]	; (80a1c78 <_Z7printlnPci+0x44>)
 80a1c60:	f002 fafd 	bl	80a425e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a1c64:	4804      	ldr	r0, [pc, #16]	; (80a1c78 <_Z7printlnPci+0x44>)
 80a1c66:	f7ff fc39 	bl	80a14dc <_ZN14WidgetTerminal5flushEv>
}
 80a1c6a:	bd38      	pop	{r3, r4, r5, pc}
 80a1c6c:	080a7d9e 	.word	0x080a7d9e
 80a1c70:	200001de 	.word	0x200001de
 80a1c74:	20000334 	.word	0x20000334
 80a1c78:	20000338 	.word	0x20000338

080a1c7c <_Z11printStatusv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1c7c:	2200      	movs	r2, #0
{
 80a1c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1c80:	4b31      	ldr	r3, [pc, #196]	; (80a1d48 <_Z11printStatusv+0xcc>)
 80a1c82:	4611      	mov	r1, r2
 80a1c84:	6858      	ldr	r0, [r3, #4]
 80a1c86:	f001 fdc1 	bl	80a380c <network_ready>
 80a1c8a:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1c8c:	f001 fe0e 	bl	80a38ac <spark_cloud_flag_connected>
 80a1c90:	4605      	mov	r5, r0
  timeStamp();
 80a1c92:	f7fe ff49 	bl	80a0b28 <_Z9timeStampv>
  if (termEnabled == 1)
 80a1c96:	4b2d      	ldr	r3, [pc, #180]	; (80a1d4c <_Z11printStatusv+0xd0>)
 80a1c98:	681b      	ldr	r3, [r3, #0]
 80a1c9a:	2b01      	cmp	r3, #1
 80a1c9c:	d103      	bne.n	80a1ca6 <_Z11printStatusv+0x2a>
    terminal.println(timebuffer);
 80a1c9e:	492c      	ldr	r1, [pc, #176]	; (80a1d50 <_Z11printStatusv+0xd4>)
 80a1ca0:	482c      	ldr	r0, [pc, #176]	; (80a1d54 <_Z11printStatusv+0xd8>)
 80a1ca2:	f002 fadc 	bl	80a425e <_ZN5Print7printlnEPKc>
  println(" tnow: ", tnow);
 80a1ca6:	4b2c      	ldr	r3, [pc, #176]	; (80a1d58 <_Z11printStatusv+0xdc>)
  Serial.printf(" ts_giessen: %d ", ts_giessen);
 80a1ca8:	4e2c      	ldr	r6, [pc, #176]	; (80a1d5c <_Z11printStatusv+0xe0>)
  println(" tnow: ", tnow);
 80a1caa:	6819      	ldr	r1, [r3, #0]
 80a1cac:	482c      	ldr	r0, [pc, #176]	; (80a1d60 <_Z11printStatusv+0xe4>)
 80a1cae:	f7ff ffc1 	bl	80a1c34 <_Z7printlnPci>
  Serial.printf(" ts_giessen: %d ", ts_giessen);
 80a1cb2:	f003 f883 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1cb6:	6832      	ldr	r2, [r6, #0]
 80a1cb8:	492a      	ldr	r1, [pc, #168]	; (80a1d64 <_Z11printStatusv+0xe8>)
 80a1cba:	f7fe fd33 	bl	80a0724 <_ZN5Print6printfEPKcz>
  println(" tgiessen ",ts_giessen);
 80a1cbe:	6831      	ldr	r1, [r6, #0]
 80a1cc0:	4829      	ldr	r0, [pc, #164]	; (80a1d68 <_Z11printStatusv+0xec>)
 80a1cc2:	f7ff ffb7 	bl	80a1c34 <_Z7printlnPci>
  checkDontSleepPin();
 80a1cc6:	f7fe ff19 	bl	80a0afc <_Z17checkDontSleepPinv>
  readAdcChannels();
 80a1cca:	f7fe fe8f 	bl	80a09ec <_Z15readAdcChannelsv>
  println("Main    [mV] : ", AiPumpeMain);
 80a1cce:	4b27      	ldr	r3, [pc, #156]	; (80a1d6c <_Z11printStatusv+0xf0>)
 80a1cd0:	4827      	ldr	r0, [pc, #156]	; (80a1d70 <_Z11printStatusv+0xf4>)
 80a1cd2:	6819      	ldr	r1, [r3, #0]
 80a1cd4:	f7ff ffae 	bl	80a1c34 <_Z7printlnPci>
  println("Reserve [mV] : ", AiPumpeReserve);
 80a1cd8:	4b26      	ldr	r3, [pc, #152]	; (80a1d74 <_Z11printStatusv+0xf8>)
 80a1cda:	4827      	ldr	r0, [pc, #156]	; (80a1d78 <_Z11printStatusv+0xfc>)
 80a1cdc:	6819      	ldr	r1, [r3, #0]
 80a1cde:	f7ff ffa9 	bl	80a1c34 <_Z7printlnPci>
  println("12V     [mV] : ", Ai12V);
 80a1ce2:	4b26      	ldr	r3, [pc, #152]	; (80a1d7c <_Z11printStatusv+0x100>)
 80a1ce4:	4826      	ldr	r0, [pc, #152]	; (80a1d80 <_Z11printStatusv+0x104>)
 80a1ce6:	6819      	ldr	r1, [r3, #0]
 80a1ce8:	f7ff ffa4 	bl	80a1c34 <_Z7printlnPci>
  st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1cec:	2001      	movs	r0, #1
 80a1cee:	f003 faf3 	bl	80a52d8 <digitalRead>
 80a1cf2:	4a24      	ldr	r2, [pc, #144]	; (80a1d84 <_Z11printStatusv+0x108>)
  if (st_main_pumpe == HIGH)
 80a1cf4:	2801      	cmp	r0, #1
  st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1cf6:	6010      	str	r0, [r2, #0]
  if (st_main_pumpe == HIGH)
 80a1cf8:	d102      	bne.n	80a1d00 <_Z11printStatusv+0x84>
    println("MAIN Pumpe is ON");
 80a1cfa:	4823      	ldr	r0, [pc, #140]	; (80a1d88 <_Z11printStatusv+0x10c>)
 80a1cfc:	f7ff fc18 	bl	80a1530 <_Z7printlnPc>
  st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1d00:	2002      	movs	r0, #2
 80a1d02:	f003 fae9 	bl	80a52d8 <digitalRead>
 80a1d06:	4a21      	ldr	r2, [pc, #132]	; (80a1d8c <_Z11printStatusv+0x110>)
  if (st_reserve_pumpe == HIGH)
 80a1d08:	2801      	cmp	r0, #1
  st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1d0a:	6010      	str	r0, [r2, #0]
  if (st_reserve_pumpe == HIGH)
 80a1d0c:	d102      	bne.n	80a1d14 <_Z11printStatusv+0x98>
    println("RESERVE Pumpe ist ON");
 80a1d0e:	4820      	ldr	r0, [pc, #128]	; (80a1d90 <_Z11printStatusv+0x114>)
 80a1d10:	f7ff fc0e 	bl	80a1530 <_Z7printlnPc>
  Serial.printlnf(" waterlevel: %d ", waterlevel);
 80a1d14:	f003 f852 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1d18:	4b1e      	ldr	r3, [pc, #120]	; (80a1d94 <_Z11printStatusv+0x118>)
 80a1d1a:	491f      	ldr	r1, [pc, #124]	; (80a1d98 <_Z11printStatusv+0x11c>)
 80a1d1c:	681a      	ldr	r2, [r3, #0]
 80a1d1e:	f7fe f9c8 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf(" wifi=%s cloud=%s fast_counter=%d ", (wifiReady ? "on" : "off"), (cloudReady ? "on" : "off"), fast_counter);
 80a1d22:	f003 f84b 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1d26:	4b1d      	ldr	r3, [pc, #116]	; (80a1d9c <_Z11printStatusv+0x120>)
 80a1d28:	491d      	ldr	r1, [pc, #116]	; (80a1da0 <_Z11printStatusv+0x124>)
 80a1d2a:	681b      	ldr	r3, [r3, #0]
 80a1d2c:	4a1d      	ldr	r2, [pc, #116]	; (80a1da4 <_Z11printStatusv+0x128>)
 80a1d2e:	9300      	str	r3, [sp, #0]
 80a1d30:	2d00      	cmp	r5, #0
 80a1d32:	bf14      	ite	ne
 80a1d34:	460b      	movne	r3, r1
 80a1d36:	4613      	moveq	r3, r2
 80a1d38:	2c00      	cmp	r4, #0
 80a1d3a:	bf18      	it	ne
 80a1d3c:	460a      	movne	r2, r1
 80a1d3e:	491a      	ldr	r1, [pc, #104]	; (80a1da8 <_Z11printStatusv+0x12c>)
 80a1d40:	f7fe f9b7 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
}
 80a1d44:	b002      	add	sp, #8
 80a1d46:	bd70      	pop	{r4, r5, r6, pc}
 80a1d48:	20000490 	.word	0x20000490
 80a1d4c:	20000334 	.word	0x20000334
 80a1d50:	20000384 	.word	0x20000384
 80a1d54:	20000338 	.word	0x20000338
 80a1d58:	200003b8 	.word	0x200003b8
 80a1d5c:	200003bc 	.word	0x200003bc
 80a1d60:	080a7da4 	.word	0x080a7da4
 80a1d64:	080a7dac 	.word	0x080a7dac
 80a1d68:	080a7dbd 	.word	0x080a7dbd
 80a1d6c:	20000174 	.word	0x20000174
 80a1d70:	080a7ef3 	.word	0x080a7ef3
 80a1d74:	20000178 	.word	0x20000178
 80a1d78:	080a7f28 	.word	0x080a7f28
 80a1d7c:	20000170 	.word	0x20000170
 80a1d80:	080a7dc8 	.word	0x080a7dc8
 80a1d84:	20000320 	.word	0x20000320
 80a1d88:	080a7dd8 	.word	0x080a7dd8
 80a1d8c:	20000324 	.word	0x20000324
 80a1d90:	080a7de9 	.word	0x080a7de9
 80a1d94:	20000024 	.word	0x20000024
 80a1d98:	080a7dfe 	.word	0x080a7dfe
 80a1d9c:	200002f4 	.word	0x200002f4
 80a1da0:	080a7b2a 	.word	0x080a7b2a
 80a1da4:	080a7d42 	.word	0x080a7d42
 80a1da8:	080a7e0f 	.word	0x080a7e0f

080a1dac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
 80a1dac:	b500      	push	{lr}
 80a1dae:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
 80a1db0:	ab04      	add	r3, sp, #16
 80a1db2:	2200      	movs	r2, #0
 80a1db4:	9301      	str	r3, [sp, #4]
 80a1db6:	2350      	movs	r3, #80	; 0x50
 80a1db8:	2111      	movs	r1, #17
 80a1dba:	9300      	str	r3, [sp, #0]
 80a1dbc:	9202      	str	r2, [sp, #8]
 80a1dbe:	4b03      	ldr	r3, [pc, #12]	; (80a1dcc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
 80a1dc0:	f7ff fade 	bl	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
 80a1dc4:	b015      	add	sp, #84	; 0x54
 80a1dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1dca:	bf00      	nop
 80a1dcc:	080a813c 	.word	0x080a813c

080a1dd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a1dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1dd2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a1dd6:	ab08      	add	r3, sp, #32
 80a1dd8:	2400      	movs	r4, #0
 80a1dda:	460f      	mov	r7, r1
 80a1ddc:	9305      	str	r3, [sp, #20]
 80a1dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a1de2:	4616      	mov	r6, r2
 80a1de4:	4605      	mov	r5, r0
 80a1de6:	490e      	ldr	r1, [pc, #56]	; (80a1e20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_+0x50>)
 80a1de8:	a805      	add	r0, sp, #20
 80a1dea:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
 80a1dee:	f7fe fd3c 	bl	80a086a <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
 80a1df2:	4639      	mov	r1, r7
 80a1df4:	a805      	add	r0, sp, #20
 80a1df6:	f7fe fdb9 	bl	80a096c <_ZN10BlynkParam3addEi>
        add(last);
 80a1dfa:	4631      	mov	r1, r6
 80a1dfc:	a805      	add	r0, sp, #20
 80a1dfe:	f7fe fda8 	bl	80a0952 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a1e02:	9b06      	ldr	r3, [sp, #24]
 80a1e04:	4622      	mov	r2, r4
 80a1e06:	3b01      	subs	r3, #1
 80a1e08:	9300      	str	r3, [sp, #0]
 80a1e0a:	2114      	movs	r1, #20
 80a1e0c:	4628      	mov	r0, r5
 80a1e0e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80a1e12:	9b05      	ldr	r3, [sp, #20]
 80a1e14:	f7ff fab4 	bl	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a1e18:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 80a1e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1e1e:	bf00      	nop
 80a1e20:	080a78da 	.word	0x080a78da

080a1e24 <_Z15printSlowStatusv>:
{
 80a1e24:	b530      	push	{r4, r5, lr}
        flush();
 80a1e26:	4c59      	ldr	r4, [pc, #356]	; (80a1f8c <_Z15printSlowStatusv+0x168>)
 80a1e28:	b087      	sub	sp, #28
 80a1e2a:	4620      	mov	r0, r4
 80a1e2c:	f7ff fb56 	bl	80a14dc <_ZN14WidgetTerminal5flushEv>
        Blynk.virtualWrite(mPin, "clr");
 80a1e30:	4a57      	ldr	r2, [pc, #348]	; (80a1f90 <_Z15printSlowStatusv+0x16c>)
 80a1e32:	7a21      	ldrb	r1, [r4, #8]
 80a1e34:	4857      	ldr	r0, [pc, #348]	; (80a1f94 <_Z15printSlowStatusv+0x170>)
 80a1e36:	f7ff ffcb 	bl	80a1dd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  timeStamp();
 80a1e3a:	f7fe fe75 	bl	80a0b28 <_Z9timeStampv>
  if (termEnabled == 1)
 80a1e3e:	4b56      	ldr	r3, [pc, #344]	; (80a1f98 <_Z15printSlowStatusv+0x174>)
 80a1e40:	681b      	ldr	r3, [r3, #0]
 80a1e42:	2b01      	cmp	r3, #1
 80a1e44:	d103      	bne.n	80a1e4e <_Z15printSlowStatusv+0x2a>
    terminal.println(timebuffer);
 80a1e46:	4620      	mov	r0, r4
 80a1e48:	4954      	ldr	r1, [pc, #336]	; (80a1f9c <_Z15printSlowStatusv+0x178>)
 80a1e4a:	f002 fa08 	bl	80a425e <_ZN5Print7printlnEPKc>
  getSleepTime(55); // time to wake up at minute = 55
 80a1e4e:	2037      	movs	r0, #55	; 0x37
 80a1e50:	f7fe fdba 	bl	80a09c8 <_Z12getSleepTimei>
  println(" Photon HW ID ", hwID);
 80a1e54:	4952      	ldr	r1, [pc, #328]	; (80a1fa0 <_Z15printSlowStatusv+0x17c>)
 80a1e56:	a802      	add	r0, sp, #8
 80a1e58:	f002 f973 	bl	80a4142 <_ZN6StringC1ERKS_>
 80a1e5c:	a902      	add	r1, sp, #8
 80a1e5e:	4851      	ldr	r0, [pc, #324]	; (80a1fa4 <_Z15printSlowStatusv+0x180>)
 80a1e60:	f7ff fec4 	bl	80a1bec <_Z7printlnPc6String>
 80a1e64:	a802      	add	r0, sp, #8
 80a1e66:	f002 f8e3 	bl	80a4030 <_ZN6StringD1Ev>
  Particle.publish("particle/device/name");
 80a1e6a:	a802      	add	r0, sp, #8
 80a1e6c:	f7fe fd20 	bl	80a08b0 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0>
 80a1e70:	a803      	add	r0, sp, #12
 80a1e72:	f7fe f92c 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(500);
 80a1e76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1e7a:	f002 fb6b 	bl	80a4554 <delay>
 80a1e7e:	4b4a      	ldr	r3, [pc, #296]	; (80a1fa8 <_Z15printSlowStatusv+0x184>)
 80a1e80:	4c4a      	ldr	r4, [pc, #296]	; (80a1fac <_Z15printSlowStatusv+0x188>)
 80a1e82:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a1e84:	4a4a      	ldr	r2, [pc, #296]	; (80a1fb0 <_Z15printSlowStatusv+0x18c>)
 80a1e86:	494b      	ldr	r1, [pc, #300]	; (80a1fb4 <_Z15printSlowStatusv+0x190>)
 80a1e88:	f88d 3000 	strb.w	r3, [sp]
 80a1e8c:	a802      	add	r0, sp, #8
 80a1e8e:	233c      	movs	r3, #60	; 0x3c
 80a1e90:	f002 fd5e 	bl	80a4950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a1e94:	a803      	add	r0, sp, #12
 80a1e96:	f7fe f91a 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  EEPROM.get(0, control);
 80a1e9a:	f003 fa6f 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a1e9e:	2214      	movs	r2, #20
 80a1ea0:	4621      	mov	r1, r4
 80a1ea2:	2000      	movs	r0, #0
 80a1ea4:	f001 fb02 	bl	80a34ac <HAL_EEPROM_Get>
  println("version            : ", control.version);
 80a1ea8:	6821      	ldr	r1, [r4, #0]
 80a1eaa:	4843      	ldr	r0, [pc, #268]	; (80a1fb8 <_Z15printSlowStatusv+0x194>)
 80a1eac:	f7ff fec2 	bl	80a1c34 <_Z7printlnPci>
  println("dontSleep          : ", control.dontSleepSW);
 80a1eb0:	6861      	ldr	r1, [r4, #4]
 80a1eb2:	4842      	ldr	r0, [pc, #264]	; (80a1fbc <_Z15printSlowStatusv+0x198>)
 80a1eb4:	f7ff febe 	bl	80a1c34 <_Z7printlnPci>
  println("dontGiessen        : ", control.dontGiessen);
 80a1eb8:	68a1      	ldr	r1, [r4, #8]
 80a1eba:	4841      	ldr	r0, [pc, #260]	; (80a1fc0 <_Z15printSlowStatusv+0x19c>)
 80a1ebc:	f7ff feba 	bl	80a1c34 <_Z7printlnPci>
  println("pumpe_count_down   : ", control.pumpe_count_down);
 80a1ec0:	68e1      	ldr	r1, [r4, #12]
 80a1ec2:	4840      	ldr	r0, [pc, #256]	; (80a1fc4 <_Z15printSlowStatusv+0x1a0>)
 80a1ec4:	f7ff feb6 	bl	80a1c34 <_Z7printlnPci>
  println("reserve_repetitions: ", control.reserve_repetitions);
 80a1ec8:	6921      	ldr	r1, [r4, #16]
 80a1eca:	483f      	ldr	r0, [pc, #252]	; (80a1fc8 <_Z15printSlowStatusv+0x1a4>)
 80a1ecc:	f7ff feb2 	bl	80a1c34 <_Z7printlnPci>
  WriteToDatabase("WASSER","dontGiessen:", control.dontGiessen);
 80a1ed0:	68a2      	ldr	r2, [r4, #8]
 80a1ed2:	493e      	ldr	r1, [pc, #248]	; (80a1fcc <_Z15printSlowStatusv+0x1a8>)
 80a1ed4:	483e      	ldr	r0, [pc, #248]	; (80a1fd0 <_Z15printSlowStatusv+0x1ac>)
 80a1ed6:	f7fe f957 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
  WriteToDatabase("WASSER","pumpe count down:", control.pumpe_count_down);
 80a1eda:	68e2      	ldr	r2, [r4, #12]
 80a1edc:	493d      	ldr	r1, [pc, #244]	; (80a1fd4 <_Z15printSlowStatusv+0x1b0>)
 80a1ede:	483c      	ldr	r0, [pc, #240]	; (80a1fd0 <_Z15printSlowStatusv+0x1ac>)
 80a1ee0:	f7fe f952 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
  WriteToDatabase("WASSER","reserve_repetitions: ", control.reserve_repetitions);
 80a1ee4:	6922      	ldr	r2, [r4, #16]
 80a1ee6:	4938      	ldr	r1, [pc, #224]	; (80a1fc8 <_Z15printSlowStatusv+0x1a4>)
 80a1ee8:	4839      	ldr	r0, [pc, #228]	; (80a1fd0 <_Z15printSlowStatusv+0x1ac>)
 80a1eea:	f7fe f94d 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
  waterlevel = ultra_sonic_measure();
 80a1eee:	f7fe fbb5 	bl	80a065c <_Z19ultra_sonic_measurev>
 80a1ef2:	4b39      	ldr	r3, [pc, #228]	; (80a1fd8 <_Z15printSlowStatusv+0x1b4>)
  if (AiPumpeMain > 1000)
 80a1ef4:	4d39      	ldr	r5, [pc, #228]	; (80a1fdc <_Z15printSlowStatusv+0x1b8>)
  waterlevel = ultra_sonic_measure();
 80a1ef6:	6018      	str	r0, [r3, #0]
 80a1ef8:	4602      	mov	r2, r0
  WriteToDatabase("WASSER","WASSERSTAND : ",waterlevel);
 80a1efa:	4939      	ldr	r1, [pc, #228]	; (80a1fe0 <_Z15printSlowStatusv+0x1bc>)
 80a1efc:	4834      	ldr	r0, [pc, #208]	; (80a1fd0 <_Z15printSlowStatusv+0x1ac>)
 80a1efe:	f7fe f943 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
  reportDontSleepPin();
 80a1f02:	f7fe fddb 	bl	80a0abc <_Z18reportDontSleepPinv>
  readAdcChannels();
 80a1f06:	f7fe fd71 	bl	80a09ec <_Z15readAdcChannelsv>
  if (AiPumpeMain > 1000)
 80a1f0a:	682b      	ldr	r3, [r5, #0]
 80a1f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a1f10:	d90a      	bls.n	80a1f28 <_Z15printSlowStatusv+0x104>
    Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a1f12:	f002 ff53 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1f16:	682a      	ldr	r2, [r5, #0]
 80a1f18:	4932      	ldr	r1, [pc, #200]	; (80a1fe4 <_Z15printSlowStatusv+0x1c0>)
 80a1f1a:	f7fe f8ca 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeMain    [mV] : ", AiPumpeMain);
 80a1f1e:	682a      	ldr	r2, [r5, #0]
 80a1f20:	4931      	ldr	r1, [pc, #196]	; (80a1fe8 <_Z15printSlowStatusv+0x1c4>)
 80a1f22:	4832      	ldr	r0, [pc, #200]	; (80a1fec <_Z15printSlowStatusv+0x1c8>)
 80a1f24:	f7fe f930 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
  if (AiPumpeReserve > 1000)
 80a1f28:	4d31      	ldr	r5, [pc, #196]	; (80a1ff0 <_Z15printSlowStatusv+0x1cc>)
 80a1f2a:	682b      	ldr	r3, [r5, #0]
 80a1f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a1f30:	d90a      	bls.n	80a1f48 <_Z15printSlowStatusv+0x124>
    Serial.printlnf(" AiPumpeReserve : %d [mV]", AiPumpeReserve);
 80a1f32:	f002 ff43 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a1f36:	682a      	ldr	r2, [r5, #0]
 80a1f38:	492e      	ldr	r1, [pc, #184]	; (80a1ff4 <_Z15printSlowStatusv+0x1d0>)
 80a1f3a:	f7fe f8ba 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeReserve [mV] : ", AiPumpeReserve);
 80a1f3e:	682a      	ldr	r2, [r5, #0]
 80a1f40:	492d      	ldr	r1, [pc, #180]	; (80a1ff8 <_Z15printSlowStatusv+0x1d4>)
 80a1f42:	482a      	ldr	r0, [pc, #168]	; (80a1fec <_Z15printSlowStatusv+0x1c8>)
 80a1f44:	f7fe f920 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
  if (control.dontGiessen == 1)
 80a1f48:	68a3      	ldr	r3, [r4, #8]
 80a1f4a:	2b01      	cmp	r3, #1
 80a1f4c:	d103      	bne.n	80a1f56 <_Z15printSlowStatusv+0x132>
    WriteToDatabase("WASSER", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a1f4e:	492b      	ldr	r1, [pc, #172]	; (80a1ffc <_Z15printSlowStatusv+0x1d8>)
 80a1f50:	481f      	ldr	r0, [pc, #124]	; (80a1fd0 <_Z15printSlowStatusv+0x1ac>)
 80a1f52:	f7fe f8d3 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  println("temp in  : ", temp_in);
 80a1f56:	4c2a      	ldr	r4, [pc, #168]	; (80a2000 <_Z15printSlowStatusv+0x1dc>)
  println("temp out : ", temp_out);
 80a1f58:	4d2a      	ldr	r5, [pc, #168]	; (80a2004 <_Z15printSlowStatusv+0x1e0>)
  get_Temperature(); 
 80a1f5a:	f7fe fc0b 	bl	80a0774 <_Z15get_Temperaturev>
  println("temp in  : ", temp_in);
 80a1f5e:	6821      	ldr	r1, [r4, #0]
 80a1f60:	4829      	ldr	r0, [pc, #164]	; (80a2008 <_Z15printSlowStatusv+0x1e4>)
 80a1f62:	f7ff fe67 	bl	80a1c34 <_Z7printlnPci>
  println("temp out : ", temp_out);
 80a1f66:	6829      	ldr	r1, [r5, #0]
 80a1f68:	4828      	ldr	r0, [pc, #160]	; (80a200c <_Z15printSlowStatusv+0x1e8>)
 80a1f6a:	f7ff fe63 	bl	80a1c34 <_Z7printlnPci>
  sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a1f6e:	682b      	ldr	r3, [r5, #0]
 80a1f70:	6822      	ldr	r2, [r4, #0]
 80a1f72:	4927      	ldr	r1, [pc, #156]	; (80a2010 <_Z15printSlowStatusv+0x1ec>)
 80a1f74:	4809      	ldr	r0, [pc, #36]	; (80a1f9c <_Z15printSlowStatusv+0x178>)
 80a1f76:	f001 fce1 	bl	80a393c <sprintf>
  WriteToDatabase("CONTROL", timebuffer);
 80a1f7a:	4908      	ldr	r1, [pc, #32]	; (80a1f9c <_Z15printSlowStatusv+0x178>)
 80a1f7c:	4825      	ldr	r0, [pc, #148]	; (80a2014 <_Z15printSlowStatusv+0x1f0>)
 80a1f7e:	f7fe f8bd 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  println(" ----------------------- ");
 80a1f82:	4825      	ldr	r0, [pc, #148]	; (80a2018 <_Z15printSlowStatusv+0x1f4>)
 80a1f84:	f7ff fad4 	bl	80a1530 <_Z7printlnPc>
}
 80a1f88:	b007      	add	sp, #28
 80a1f8a:	bd30      	pop	{r4, r5, pc}
 80a1f8c:	20000338 	.word	0x20000338
 80a1f90:	080a7e32 	.word	0x080a7e32
 80a1f94:	2000017c 	.word	0x2000017c
 80a1f98:	20000334 	.word	0x20000334
 80a1f9c:	20000384 	.word	0x20000384
 80a1fa0:	200002fc 	.word	0x200002fc
 80a1fa4:	080a7653 	.word	0x080a7653
 80a1fa8:	200001dd 	.word	0x200001dd
 80a1fac:	200002d8 	.word	0x200002d8
 80a1fb0:	200001de 	.word	0x200001de
 80a1fb4:	080a7963 	.word	0x080a7963
 80a1fb8:	080a7e36 	.word	0x080a7e36
 80a1fbc:	080a7e4c 	.word	0x080a7e4c
 80a1fc0:	080a7e62 	.word	0x080a7e62
 80a1fc4:	080a7e78 	.word	0x080a7e78
 80a1fc8:	080a7e8e 	.word	0x080a7e8e
 80a1fcc:	080a7ea4 	.word	0x080a7ea4
 80a1fd0:	080a76d0 	.word	0x080a76d0
 80a1fd4:	080a7eb1 	.word	0x080a7eb1
 80a1fd8:	20000024 	.word	0x20000024
 80a1fdc:	20000174 	.word	0x20000174
 80a1fe0:	080a7ec3 	.word	0x080a7ec3
 80a1fe4:	080a7ed2 	.word	0x080a7ed2
 80a1fe8:	080a7eec 	.word	0x080a7eec
 80a1fec:	080a7f03 	.word	0x080a7f03
 80a1ff0:	20000178 	.word	0x20000178
 80a1ff4:	080a7f07 	.word	0x080a7f07
 80a1ff8:	080a7f21 	.word	0x080a7f21
 80a1ffc:	080a7970 	.word	0x080a7970
 80a2000:	20000328 	.word	0x20000328
 80a2004:	2000032c 	.word	0x2000032c
 80a2008:	080a7f38 	.word	0x080a7f38
 80a200c:	080a7f44 	.word	0x080a7f44
 80a2010:	080a760a 	.word	0x080a760a
 80a2014:	080a77cf 	.word	0x080a77cf
 80a2018:	080a7f50 	.word	0x080a7f50

080a201c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcS6_EEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2020:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80a2024:	461e      	mov	r6, r3
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a2026:	ab08      	add	r3, sp, #32
 80a2028:	2400      	movs	r4, #0
 80a202a:	4688      	mov	r8, r1
 80a202c:	9305      	str	r3, [sp, #20]
 80a202e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a2032:	4617      	mov	r7, r2
 80a2034:	4605      	mov	r5, r0
 80a2036:	4910      	ldr	r1, [pc, #64]	; (80a2078 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcS6_EEEviDpT_+0x5c>)
 80a2038:	a805      	add	r0, sp, #20
 80a203a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
 80a203e:	f7fe fc14 	bl	80a086a <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
 80a2042:	4641      	mov	r1, r8
 80a2044:	a805      	add	r0, sp, #20
 80a2046:	f7fe fc91 	bl	80a096c <_ZN10BlynkParam3addEi>
        add(head);
 80a204a:	4639      	mov	r1, r7
 80a204c:	a805      	add	r0, sp, #20
 80a204e:	f7fe fc80 	bl	80a0952 <_ZN10BlynkParam3addEPKc>
        add(last);
 80a2052:	4631      	mov	r1, r6
 80a2054:	a805      	add	r0, sp, #20
 80a2056:	f7fe fc7c 	bl	80a0952 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a205a:	9b06      	ldr	r3, [sp, #24]
 80a205c:	4622      	mov	r2, r4
 80a205e:	3b01      	subs	r3, #1
 80a2060:	9300      	str	r3, [sp, #0]
 80a2062:	2114      	movs	r1, #20
 80a2064:	4628      	mov	r0, r5
 80a2066:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80a206a:	9b05      	ldr	r3, [sp, #20]
 80a206c:	f7ff f988 	bl	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a2070:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 80a2074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2078:	080a78da 	.word	0x080a78da

080a207c <BlynkWidgetWrite22>:
{
 80a207c:	b510      	push	{r4, lr}
 80a207e:	460c      	mov	r4, r1
  Blynk.virtualWrite(V22, "\nYou said:", param.asStr());
 80a2080:	680b      	ldr	r3, [r1, #0]
 80a2082:	4805      	ldr	r0, [pc, #20]	; (80a2098 <BlynkWidgetWrite22+0x1c>)
 80a2084:	2116      	movs	r1, #22
 80a2086:	4a05      	ldr	r2, [pc, #20]	; (80a209c <BlynkWidgetWrite22+0x20>)
 80a2088:	f7ff ffc8 	bl	80a201c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcS6_EEEviDpT_>
  c = *param.asStr();
 80a208c:	6823      	ldr	r3, [r4, #0]
}
 80a208e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dispatchCommand(c);
 80a2092:	7818      	ldrb	r0, [r3, #0]
 80a2094:	f7fe b8d0 	b.w	80a0238 <_Z15dispatchCommandc>
 80a2098:	2000017c 	.word	0x2000017c
 80a209c:	080a7f6a 	.word	0x080a7f6a

080a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a20a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20a2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a20a6:	ab08      	add	r3, sp, #32
 80a20a8:	2400      	movs	r4, #0
 80a20aa:	460f      	mov	r7, r1
 80a20ac:	9305      	str	r3, [sp, #20]
 80a20ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a20b2:	4616      	mov	r6, r2
 80a20b4:	4605      	mov	r5, r0
 80a20b6:	490e      	ldr	r1, [pc, #56]	; (80a20f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
 80a20b8:	a805      	add	r0, sp, #20
 80a20ba:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
 80a20be:	f7fe fbd4 	bl	80a086a <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
 80a20c2:	4639      	mov	r1, r7
 80a20c4:	a805      	add	r0, sp, #20
 80a20c6:	f7fe fc51 	bl	80a096c <_ZN10BlynkParam3addEi>
        add(last);
 80a20ca:	4631      	mov	r1, r6
 80a20cc:	a805      	add	r0, sp, #20
 80a20ce:	f7fe fc4d 	bl	80a096c <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a20d2:	9b06      	ldr	r3, [sp, #24]
 80a20d4:	4622      	mov	r2, r4
 80a20d6:	3b01      	subs	r3, #1
 80a20d8:	9300      	str	r3, [sp, #0]
 80a20da:	2114      	movs	r1, #20
 80a20dc:	4628      	mov	r0, r5
 80a20de:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80a20e2:	9b05      	ldr	r3, [sp, #20]
 80a20e4:	f7ff f94c 	bl	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a20e8:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 80a20ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a20ee:	bf00      	nop
 80a20f0:	080a78da 	.word	0x080a78da

080a20f4 <BlynkWidgetWrite1>:
{
 80a20f4:	b510      	push	{r4, lr}
    int         asInt() const       { return atoi(buff); }
 80a20f6:	6808      	ldr	r0, [r1, #0]
 80a20f8:	f004 fb9e 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a20fc:	2801      	cmp	r0, #1
 80a20fe:	4604      	mov	r4, r0
 80a2100:	d10b      	bne.n	80a211a <BlynkWidgetWrite1+0x26>
    println(" rsl 1 ein ");
 80a2102:	4806      	ldr	r0, [pc, #24]	; (80a211c <BlynkWidgetWrite1+0x28>)
 80a2104:	f7ff fa14 	bl	80a1530 <_Z7printlnPc>
    conrad_rsl_switch_code(1, EIN);
 80a2108:	4621      	mov	r1, r4
 80a210a:	4620      	mov	r0, r4
 80a210c:	f000 fdb4 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V1, 255);
 80a2110:	22ff      	movs	r2, #255	; 0xff
 80a2112:	4621      	mov	r1, r4
 80a2114:	4802      	ldr	r0, [pc, #8]	; (80a2120 <BlynkWidgetWrite1+0x2c>)
 80a2116:	f7ff ffc3 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a211a:	bd10      	pop	{r4, pc}
 80a211c:	080a7f75 	.word	0x080a7f75
 80a2120:	2000017c 	.word	0x2000017c

080a2124 <BlynkWidgetWrite2>:
{
 80a2124:	b510      	push	{r4, lr}
 80a2126:	6808      	ldr	r0, [r1, #0]
 80a2128:	f004 fb86 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a212c:	2801      	cmp	r0, #1
 80a212e:	4604      	mov	r4, r0
 80a2130:	d10b      	bne.n	80a214a <BlynkWidgetWrite2+0x26>
    println(" rsl 1 aus ");
 80a2132:	4806      	ldr	r0, [pc, #24]	; (80a214c <BlynkWidgetWrite2+0x28>)
 80a2134:	f7ff f9fc 	bl	80a1530 <_Z7printlnPc>
    conrad_rsl_switch_code(1, AUS);
 80a2138:	2100      	movs	r1, #0
 80a213a:	4620      	mov	r0, r4
 80a213c:	f000 fd9c 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V2, 255);
 80a2140:	22ff      	movs	r2, #255	; 0xff
 80a2142:	2102      	movs	r1, #2
 80a2144:	4802      	ldr	r0, [pc, #8]	; (80a2150 <BlynkWidgetWrite2+0x2c>)
 80a2146:	f7ff ffab 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a214a:	bd10      	pop	{r4, pc}
 80a214c:	080a7f81 	.word	0x080a7f81
 80a2150:	2000017c 	.word	0x2000017c

080a2154 <BlynkWidgetWrite3>:
{
 80a2154:	b510      	push	{r4, lr}
 80a2156:	6808      	ldr	r0, [r1, #0]
 80a2158:	f004 fb6e 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a215c:	2801      	cmp	r0, #1
 80a215e:	4604      	mov	r4, r0
 80a2160:	d10b      	bne.n	80a217a <BlynkWidgetWrite3+0x26>
    println(" rsl 2 ein ");
 80a2162:	4806      	ldr	r0, [pc, #24]	; (80a217c <BlynkWidgetWrite3+0x28>)
 80a2164:	f7ff f9e4 	bl	80a1530 <_Z7printlnPc>
    conrad_rsl_switch_code(2, EIN);
 80a2168:	4621      	mov	r1, r4
 80a216a:	2002      	movs	r0, #2
 80a216c:	f000 fd84 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 255);
 80a2170:	22ff      	movs	r2, #255	; 0xff
 80a2172:	2114      	movs	r1, #20
 80a2174:	4802      	ldr	r0, [pc, #8]	; (80a2180 <BlynkWidgetWrite3+0x2c>)
 80a2176:	f7ff ff93 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a217a:	bd10      	pop	{r4, pc}
 80a217c:	080a7f8d 	.word	0x080a7f8d
 80a2180:	2000017c 	.word	0x2000017c

080a2184 <BlynkWidgetWrite4>:
{
 80a2184:	b508      	push	{r3, lr}
 80a2186:	6808      	ldr	r0, [r1, #0]
 80a2188:	f004 fb56 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a218c:	2801      	cmp	r0, #1
 80a218e:	d10d      	bne.n	80a21ac <BlynkWidgetWrite4+0x28>
    timeStamp();
 80a2190:	f7fe fcca 	bl	80a0b28 <_Z9timeStampv>
    println(" rsl 2 aus ");
 80a2194:	4806      	ldr	r0, [pc, #24]	; (80a21b0 <BlynkWidgetWrite4+0x2c>)
 80a2196:	f7ff f9cb 	bl	80a1530 <_Z7printlnPc>
    conrad_rsl_switch_code(2, AUS);
 80a219a:	2100      	movs	r1, #0
 80a219c:	2002      	movs	r0, #2
 80a219e:	f000 fd6b 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 0);
 80a21a2:	2200      	movs	r2, #0
 80a21a4:	2114      	movs	r1, #20
 80a21a6:	4803      	ldr	r0, [pc, #12]	; (80a21b4 <BlynkWidgetWrite4+0x30>)
 80a21a8:	f7ff ff7a 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a21ac:	bd08      	pop	{r3, pc}
 80a21ae:	bf00      	nop
 80a21b0:	080a7f99 	.word	0x080a7f99
 80a21b4:	2000017c 	.word	0x2000017c

080a21b8 <BlynkWidgetWrite5>:
{
 80a21b8:	b510      	push	{r4, lr}
 80a21ba:	6808      	ldr	r0, [r1, #0]
 80a21bc:	f004 fb3c 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a21c0:	2801      	cmp	r0, #1
 80a21c2:	4604      	mov	r4, r0
 80a21c4:	d10b      	bne.n	80a21de <BlynkWidgetWrite5+0x26>
    println(" rsl 3 ein ");
 80a21c6:	4806      	ldr	r0, [pc, #24]	; (80a21e0 <BlynkWidgetWrite5+0x28>)
 80a21c8:	f7ff f9b2 	bl	80a1530 <_Z7printlnPc>
    conrad_rsl_switch_code(3, EIN);
 80a21cc:	4621      	mov	r1, r4
 80a21ce:	2003      	movs	r0, #3
 80a21d0:	f000 fd52 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 255);
 80a21d4:	22ff      	movs	r2, #255	; 0xff
 80a21d6:	2114      	movs	r1, #20
 80a21d8:	4802      	ldr	r0, [pc, #8]	; (80a21e4 <BlynkWidgetWrite5+0x2c>)
 80a21da:	f7ff ff61 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a21de:	bd10      	pop	{r4, pc}
 80a21e0:	080a7fa5 	.word	0x080a7fa5
 80a21e4:	2000017c 	.word	0x2000017c

080a21e8 <BlynkWidgetWrite6>:
{
 80a21e8:	b508      	push	{r3, lr}
 80a21ea:	6808      	ldr	r0, [r1, #0]
 80a21ec:	f004 fb24 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a21f0:	2801      	cmp	r0, #1
 80a21f2:	d10b      	bne.n	80a220c <BlynkWidgetWrite6+0x24>
    println(" rsl 3 aus ");
 80a21f4:	4806      	ldr	r0, [pc, #24]	; (80a2210 <BlynkWidgetWrite6+0x28>)
 80a21f6:	f7ff f99b 	bl	80a1530 <_Z7printlnPc>
    conrad_rsl_switch_code(3, AUS);
 80a21fa:	2100      	movs	r1, #0
 80a21fc:	2003      	movs	r0, #3
 80a21fe:	f000 fd3b 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 0);
 80a2202:	2200      	movs	r2, #0
 80a2204:	2114      	movs	r1, #20
 80a2206:	4803      	ldr	r0, [pc, #12]	; (80a2214 <BlynkWidgetWrite6+0x2c>)
 80a2208:	f7ff ff4a 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a220c:	bd08      	pop	{r3, pc}
 80a220e:	bf00      	nop
 80a2210:	080a7fb1 	.word	0x080a7fb1
 80a2214:	2000017c 	.word	0x2000017c

080a2218 <BlynkWidgetWrite7>:
{
 80a2218:	b508      	push	{r3, lr}
 80a221a:	6808      	ldr	r0, [r1, #0]
 80a221c:	f004 fb0c 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2220:	2801      	cmp	r0, #1
 80a2222:	d10b      	bne.n	80a223c <BlynkWidgetWrite7+0x24>
    done_giessen = 0;
 80a2224:	2200      	movs	r2, #0
 80a2226:	4b06      	ldr	r3, [pc, #24]	; (80a2240 <BlynkWidgetWrite7+0x28>)
 80a2228:	601a      	str	r2, [r3, #0]
    BlumenGiessen(1, ts_giessen);
 80a222a:	4b06      	ldr	r3, [pc, #24]	; (80a2244 <BlynkWidgetWrite7+0x2c>)
 80a222c:	6819      	ldr	r1, [r3, #0]
 80a222e:	f000 ffbb 	bl	80a31a8 <_Z13BlumenGiessenii>
    Blynk.virtualWrite(V20, 255);
 80a2232:	22ff      	movs	r2, #255	; 0xff
 80a2234:	2114      	movs	r1, #20
 80a2236:	4804      	ldr	r0, [pc, #16]	; (80a2248 <BlynkWidgetWrite7+0x30>)
 80a2238:	f7ff ff32 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a223c:	bd08      	pop	{r3, pc}
 80a223e:	bf00      	nop
 80a2240:	200002ec 	.word	0x200002ec
 80a2244:	200003bc 	.word	0x200003bc
 80a2248:	2000017c 	.word	0x2000017c

080a224c <BlynkWidgetWrite8>:
{
 80a224c:	b508      	push	{r3, lr}
 80a224e:	6808      	ldr	r0, [r1, #0]
 80a2250:	f004 faf2 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2254:	2801      	cmp	r0, #1
 80a2256:	d110      	bne.n	80a227a <BlynkWidgetWrite8+0x2e>
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a2258:	2100      	movs	r1, #0
 80a225a:	4608      	mov	r0, r1
 80a225c:	f000 ff88 	bl	80a3170 <_Z17switch_pumpe_funkii>
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a2260:	2100      	movs	r1, #0
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a2262:	4b06      	ldr	r3, [pc, #24]	; (80a227c <BlynkWidgetWrite8+0x30>)
 80a2264:	6018      	str	r0, [r3, #0]
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a2266:	4608      	mov	r0, r1
 80a2268:	f000 fe32 	bl	80a2ed0 <_Z17switch_pumpe_mainii>
 80a226c:	4b04      	ldr	r3, [pc, #16]	; (80a2280 <BlynkWidgetWrite8+0x34>)
    Blynk.virtualWrite(V20, 0);
 80a226e:	2200      	movs	r2, #0
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a2270:	6018      	str	r0, [r3, #0]
    Blynk.virtualWrite(V20, 0);
 80a2272:	2114      	movs	r1, #20
 80a2274:	4803      	ldr	r0, [pc, #12]	; (80a2284 <BlynkWidgetWrite8+0x38>)
 80a2276:	f7ff ff13 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a227a:	bd08      	pop	{r3, pc}
 80a227c:	2000031c 	.word	0x2000031c
 80a2280:	20000320 	.word	0x20000320
 80a2284:	2000017c 	.word	0x2000017c

080a2288 <BlynkWidgetWrite9>:
{
 80a2288:	b510      	push	{r4, lr}
 80a228a:	6808      	ldr	r0, [r1, #0]
 80a228c:	f004 fad4 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2290:	2801      	cmp	r0, #1
 80a2292:	4604      	mov	r4, r0
 80a2294:	d10b      	bne.n	80a22ae <BlynkWidgetWrite9+0x26>
    println(" rsl 5 ein ");
 80a2296:	4806      	ldr	r0, [pc, #24]	; (80a22b0 <BlynkWidgetWrite9+0x28>)
 80a2298:	f7ff f94a 	bl	80a1530 <_Z7printlnPc>
    conrad_rsl_switch_code(5, EIN);
 80a229c:	4621      	mov	r1, r4
 80a229e:	2005      	movs	r0, #5
 80a22a0:	f000 fcea 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 255);
 80a22a4:	22ff      	movs	r2, #255	; 0xff
 80a22a6:	2114      	movs	r1, #20
 80a22a8:	4802      	ldr	r0, [pc, #8]	; (80a22b4 <BlynkWidgetWrite9+0x2c>)
 80a22aa:	f7ff fef9 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a22ae:	bd10      	pop	{r4, pc}
 80a22b0:	080a7fbd 	.word	0x080a7fbd
 80a22b4:	2000017c 	.word	0x2000017c

080a22b8 <BlynkWidgetWrite10>:
{
 80a22b8:	b508      	push	{r3, lr}
 80a22ba:	6808      	ldr	r0, [r1, #0]
 80a22bc:	f004 fabc 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a22c0:	2801      	cmp	r0, #1
 80a22c2:	d10b      	bne.n	80a22dc <BlynkWidgetWrite10+0x24>
    println(" rsl 5 aus ");
 80a22c4:	4806      	ldr	r0, [pc, #24]	; (80a22e0 <BlynkWidgetWrite10+0x28>)
 80a22c6:	f7ff f933 	bl	80a1530 <_Z7printlnPc>
    conrad_rsl_switch_code(5, AUS);
 80a22ca:	2100      	movs	r1, #0
 80a22cc:	2005      	movs	r0, #5
 80a22ce:	f000 fcd3 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 0);
 80a22d2:	2200      	movs	r2, #0
 80a22d4:	2114      	movs	r1, #20
 80a22d6:	4803      	ldr	r0, [pc, #12]	; (80a22e4 <BlynkWidgetWrite10+0x2c>)
 80a22d8:	f7ff fee2 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a22dc:	bd08      	pop	{r3, pc}
 80a22de:	bf00      	nop
 80a22e0:	080a7fc9 	.word	0x080a7fc9
 80a22e4:	2000017c 	.word	0x2000017c

080a22e8 <BlynkWidgetWrite11>:
{
 80a22e8:	b510      	push	{r4, lr}
 80a22ea:	6808      	ldr	r0, [r1, #0]
 80a22ec:	f004 faa4 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a22f0:	2801      	cmp	r0, #1
 80a22f2:	4604      	mov	r4, r0
 80a22f4:	d113      	bne.n	80a231e <BlynkWidgetWrite11+0x36>
    println(" weihnachten ein  ");
 80a22f6:	480a      	ldr	r0, [pc, #40]	; (80a2320 <BlynkWidgetWrite11+0x38>)
 80a22f8:	f7ff f91a 	bl	80a1530 <_Z7printlnPc>
    elro_switch(1, EIN);
 80a22fc:	4621      	mov	r1, r4
 80a22fe:	4620      	mov	r0, r4
 80a2300:	f000 fd5c 	bl	80a2dbc <_Z11elro_switchii>
    elro_switch(2, EIN);
 80a2304:	4621      	mov	r1, r4
 80a2306:	2002      	movs	r0, #2
 80a2308:	f000 fd58 	bl	80a2dbc <_Z11elro_switchii>
    elro_switch(3, EIN);
 80a230c:	4621      	mov	r1, r4
 80a230e:	2003      	movs	r0, #3
 80a2310:	f000 fd54 	bl	80a2dbc <_Z11elro_switchii>
    Blynk.virtualWrite(V20, 255);
 80a2314:	22ff      	movs	r2, #255	; 0xff
 80a2316:	2114      	movs	r1, #20
 80a2318:	4802      	ldr	r0, [pc, #8]	; (80a2324 <BlynkWidgetWrite11+0x3c>)
 80a231a:	f7ff fec1 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a231e:	bd10      	pop	{r4, pc}
 80a2320:	080a7fd5 	.word	0x080a7fd5
 80a2324:	2000017c 	.word	0x2000017c

080a2328 <BlynkWidgetWrite12>:
{
 80a2328:	b510      	push	{r4, lr}
 80a232a:	6808      	ldr	r0, [r1, #0]
 80a232c:	f004 fa84 	bl	80a6838 <atoi>
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2330:	2801      	cmp	r0, #1
 80a2332:	4604      	mov	r4, r0
 80a2334:	d113      	bne.n	80a235e <BlynkWidgetWrite12+0x36>
    println(" weihnachten aus  ");
 80a2336:	480a      	ldr	r0, [pc, #40]	; (80a2360 <BlynkWidgetWrite12+0x38>)
 80a2338:	f7ff f8fa 	bl	80a1530 <_Z7printlnPc>
    elro_switch(1, AUS);
 80a233c:	2100      	movs	r1, #0
 80a233e:	4620      	mov	r0, r4
 80a2340:	f000 fd3c 	bl	80a2dbc <_Z11elro_switchii>
    elro_switch(2, AUS);
 80a2344:	2100      	movs	r1, #0
 80a2346:	2002      	movs	r0, #2
 80a2348:	f000 fd38 	bl	80a2dbc <_Z11elro_switchii>
    elro_switch(3, AUS);
 80a234c:	2100      	movs	r1, #0
 80a234e:	2003      	movs	r0, #3
 80a2350:	f000 fd34 	bl	80a2dbc <_Z11elro_switchii>
    Blynk.virtualWrite(V20, 0);
 80a2354:	2200      	movs	r2, #0
 80a2356:	2114      	movs	r1, #20
 80a2358:	4802      	ldr	r0, [pc, #8]	; (80a2364 <BlynkWidgetWrite12+0x3c>)
 80a235a:	f7ff fea1 	bl	80a20a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a235e:	bd10      	pop	{r4, pc}
 80a2360:	080a7fe8 	.word	0x080a7fe8
 80a2364:	2000017c 	.word	0x2000017c

080a2368 <setup>:
{
 80a2368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a236c:	b086      	sub	sp, #24
  Serial.begin(115200);
 80a236e:	f002 fd25 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2372:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a2376:	f002 fd15 	bl	80a4da4 <_ZN9USBSerial5beginEl>
  delay(2000); // Allow board to settle
 80a237a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a237e:	f002 f8e9 	bl	80a4554 <delay>
  Time.zone(+2); // Sommerzeit
 80a2382:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80a2386:	f002 f84b 	bl	80a4420 <_ZN9TimeClass4zoneEf>
  Serial.printlnf(" ");
 80a238a:	f002 fd17 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a238e:	495a      	ldr	r1, [pc, #360]	; (80a24f8 <setup+0x190>)
 80a2390:	f7fd fe8f 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf(" ");
 80a2394:	f002 fd12 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2398:	4957      	ldr	r1, [pc, #348]	; (80a24f8 <setup+0x190>)
 80a239a:	f7fd fe8a 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("----------------------");
 80a239e:	f002 fd0d 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a23a2:	4956      	ldr	r1, [pc, #344]	; (80a24fc <setup+0x194>)
 80a23a4:	f7fd fe85 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("      Welcome");
 80a23a8:	f002 fd08 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a23ac:	4954      	ldr	r1, [pc, #336]	; (80a2500 <setup+0x198>)
 80a23ae:	f7fd fe80 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  hwID = System.deviceID();
 80a23b2:	4c54      	ldr	r4, [pc, #336]	; (80a2504 <setup+0x19c>)
  Serial.printlnf("----------------------");
 80a23b4:	f002 fd02 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a23b8:	4950      	ldr	r1, [pc, #320]	; (80a24fc <setup+0x194>)
 80a23ba:	f7fd fe7a 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
        return spark_deviceID();
 80a23be:	a802      	add	r0, sp, #8
 80a23c0:	f001 fa7c 	bl	80a38bc <spark_deviceID>
  hwID = System.deviceID();
 80a23c4:	a902      	add	r1, sp, #8
 80a23c6:	4620      	mov	r0, r4
 80a23c8:	f001 fec6 	bl	80a4158 <_ZN6StringaSEOS_>
 80a23cc:	a802      	add	r0, sp, #8
 80a23ce:	f001 fe2f 	bl	80a4030 <_ZN6StringD1Ev>
  Serial.printlnf(hwID);
 80a23d2:	f002 fcf3 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a23d6:	6821      	ldr	r1, [r4, #0]
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a23d8:	2400      	movs	r4, #0
 80a23da:	f7fd fe6a 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a23de:	2301      	movs	r3, #1
 80a23e0:	4622      	mov	r2, r4
 80a23e2:	4949      	ldr	r1, [pc, #292]	; (80a2508 <setup+0x1a0>)
 80a23e4:	e9cd 4400 	strd	r4, r4, [sp]
 80a23e8:	4848      	ldr	r0, [pc, #288]	; (80a250c <setup+0x1a4>)
 80a23ea:	f001 fa77 	bl	80a38dc <spark_subscribe>
  Particle.publish("particle/device/name");
 80a23ee:	a802      	add	r0, sp, #8
 80a23f0:	f7fe fa5e 	bl	80a08b0 <_ZN10CloudClass7publishEPKc.isra.0.constprop.0>
 80a23f4:	a803      	add	r0, sp, #12
 80a23f6:	f7fd fe6a 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a23fa:	4623      	mov	r3, r4
 80a23fc:	4622      	mov	r2, r4
 80a23fe:	4944      	ldr	r1, [pc, #272]	; (80a2510 <setup+0x1a8>)
 80a2400:	e9cd 4400 	strd	r4, r4, [sp]
 80a2404:	4843      	ldr	r0, [pc, #268]	; (80a2514 <setup+0x1ac>)
 80a2406:	f001 fa69 	bl	80a38dc <spark_subscribe>
 80a240a:	4b43      	ldr	r3, [pc, #268]	; (80a2518 <setup+0x1b0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a240c:	4a43      	ldr	r2, [pc, #268]	; (80a251c <setup+0x1b4>)
 80a240e:	781b      	ldrb	r3, [r3, #0]
 80a2410:	4943      	ldr	r1, [pc, #268]	; (80a2520 <setup+0x1b8>)
 80a2412:	f88d 3000 	strb.w	r3, [sp]
 80a2416:	a802      	add	r0, sp, #8
 80a2418:	233c      	movs	r3, #60	; 0x3c
 80a241a:	f002 fa99 	bl	80a4950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a241e:	a803      	add	r0, sp, #12
 80a2420:	f7fd fe55 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
 80a2424:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a2428:	f000 ffa4 	bl	80a3374 <_Z10BlynkDelaym>
        this->authkey = auth;
 80a242c:	4d3d      	ldr	r5, [pc, #244]	; (80a2524 <setup+0x1bc>)
 80a242e:	4b3e      	ldr	r3, [pc, #248]	; (80a2528 <setup+0x1c0>)
        while ((state != CONNECTED) &&
 80a2430:	f242 3727 	movw	r7, #8999	; 0x2327
        this->authkey = auth;
 80a2434:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a2436:	f000 ff9f 	bl	80a3378 <_Z11BlynkMillisv>
 80a243a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a243e:	3808      	subs	r0, #8
 80a2440:	e9c5 0003 	strd	r0, r0, [r5, #12]
 80a2444:	6168      	str	r0, [r5, #20]
        BLYNK_LOG1(BLYNK_F(BLYNK_NEWLINE
 80a2446:	f7fe fa45 	bl	80a08d4 <_ZL14BLYNK_LOG_TIMEv>
 80a244a:	f002 fcb7 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a244e:	4937      	ldr	r1, [pc, #220]	; (80a252c <setup+0x1c4>)
 80a2450:	f001 ff05 	bl	80a425e <_ZN5Print7printlnEPKc>
        this->conn.begin(domain, port);
 80a2454:	682b      	ldr	r3, [r5, #0]
        domain = d;
 80a2456:	4a36      	ldr	r2, [pc, #216]	; (80a2530 <setup+0x1c8>)
            run();
 80a2458:	46a8      	mov	r8, r5
 80a245a:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
 80a245c:	2250      	movs	r2, #80	; 0x50
 80a245e:	871a      	strh	r2, [r3, #56]	; 0x38
    void disconnect() { client.stop(); }
 80a2460:	6828      	ldr	r0, [r5, #0]
 80a2462:	f001 fce7 	bl	80a3e34 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
 80a2466:	776c      	strb	r4, [r5, #29]
        millis_time_t started = BlynkMillis();
 80a2468:	f000 ff86 	bl	80a3378 <_Z11BlynkMillisv>
 80a246c:	4606      	mov	r6, r0
        while ((state != CONNECTED) &&
 80a246e:	7f6b      	ldrb	r3, [r5, #29]
 80a2470:	2b01      	cmp	r3, #1
 80a2472:	d00c      	beq.n	80a248e <setup+0x126>
               (BlynkMillis() - started < timeout))
 80a2474:	f000 ff80 	bl	80a3378 <_Z11BlynkMillisv>
 80a2478:	1b80      	subs	r0, r0, r6
        while ((state != CONNECTED) &&
 80a247a:	42b8      	cmp	r0, r7
 80a247c:	d804      	bhi.n	80a2488 <setup+0x120>
            run();
 80a247e:	2100      	movs	r1, #0
 80a2480:	4640      	mov	r0, r8
 80a2482:	f7fe fed9 	bl	80a1238 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
 80a2486:	e7f2      	b.n	80a246e <setup+0x106>
        config(auth, domain, port);
        while(this->connect() != true) {}
 80a2488:	7f6b      	ldrb	r3, [r5, #29]
 80a248a:	2b01      	cmp	r3, #1
 80a248c:	d1e8      	bne.n	80a2460 <setup+0xf8>
 80a248e:	4c29      	ldr	r4, [pc, #164]	; (80a2534 <setup+0x1cc>)
  WriteToDatabase("RESET", "#### SETUP/RESET Version ",SW_VERSION);
 80a2490:	2212      	movs	r2, #18
 80a2492:	4929      	ldr	r1, [pc, #164]	; (80a2538 <setup+0x1d0>)
 80a2494:	4829      	ldr	r0, [pc, #164]	; (80a253c <setup+0x1d4>)
 80a2496:	f7fd fe77 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
  hwInit();
 80a249a:	f7fe facd 	bl	80a0a38 <_Z6hwInitv>
  EEPROM.get(0, control);
 80a249e:	f002 ff6d 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a24a2:	2214      	movs	r2, #20
 80a24a4:	4621      	mov	r1, r4
 80a24a6:	2000      	movs	r0, #0
 80a24a8:	f001 f800 	bl	80a34ac <HAL_EEPROM_Get>
  if ((control.pumpe_count_down < 4) | (control.pumpe_count_down > 40))
 80a24ac:	68e3      	ldr	r3, [r4, #12]
 80a24ae:	3b04      	subs	r3, #4
 80a24b0:	2b24      	cmp	r3, #36	; 0x24
 80a24b2:	d905      	bls.n	80a24c0 <setup+0x158>
    control.pumpe_count_down = 16;
 80a24b4:	2310      	movs	r3, #16
 80a24b6:	60e3      	str	r3, [r4, #12]
    EEPROM.put(0, control);
 80a24b8:	f002 ff60 	bl	80a537c <_Z21__fetch_global_EEPROMv>
 80a24bc:	f7fe f9ec 	bl	80a0898 <_ZN11EEPROMClass3putI14control_structEERKT_iS4_.isra.0.constprop.0>
  WriteToDatabase("RESET", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a24c0:	68e2      	ldr	r2, [r4, #12]
 80a24c2:	491f      	ldr	r1, [pc, #124]	; (80a2540 <setup+0x1d8>)
 80a24c4:	481d      	ldr	r0, [pc, #116]	; (80a253c <setup+0x1d4>)
 80a24c6:	f7fd fe5f 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
  if (control.dontGiessen == 1)
 80a24ca:	68a3      	ldr	r3, [r4, #8]
 80a24cc:	2b01      	cmp	r3, #1
 80a24ce:	d103      	bne.n	80a24d8 <setup+0x170>
    WriteToDatabase("RESET", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a24d0:	491c      	ldr	r1, [pc, #112]	; (80a2544 <setup+0x1dc>)
 80a24d2:	481a      	ldr	r0, [pc, #104]	; (80a253c <setup+0x1d4>)
 80a24d4:	f7fd fe12 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  help();
 80a24d8:	f7ff f94a 	bl	80a1770 <_Z4helpv>
  tnow = getTime();
 80a24dc:	f7fe fa6a 	bl	80a09b4 <_Z7getTimev>
  fast_counter = 60000;
 80a24e0:	f64e 2260 	movw	r2, #60000	; 0xea60
  tnow = getTime();
 80a24e4:	4b18      	ldr	r3, [pc, #96]	; (80a2548 <setup+0x1e0>)
 80a24e6:	6018      	str	r0, [r3, #0]
  fast_counter = 60000;
 80a24e8:	4b18      	ldr	r3, [pc, #96]	; (80a254c <setup+0x1e4>)
 80a24ea:	601a      	str	r2, [r3, #0]
  termEnabled = 0;
 80a24ec:	2200      	movs	r2, #0
 80a24ee:	4b18      	ldr	r3, [pc, #96]	; (80a2550 <setup+0x1e8>)
 80a24f0:	601a      	str	r2, [r3, #0]
}
 80a24f2:	b006      	add	sp, #24
 80a24f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a24f8:	080a830e 	.word	0x080a830e
 80a24fc:	080a7ffb 	.word	0x080a7ffb
 80a2500:	080a8012 	.word	0x080a8012
 80a2504:	200002fc 	.word	0x200002fc
 80a2508:	080a1a7d 	.word	0x080a1a7d
 80a250c:	080a7662 	.word	0x080a7662
 80a2510:	080a1b01 	.word	0x080a1b01
 80a2514:	080a7955 	.word	0x080a7955
 80a2518:	200001dd 	.word	0x200001dd
 80a251c:	200001de 	.word	0x200001de
 80a2520:	080a7963 	.word	0x080a7963
 80a2524:	2000017c 	.word	0x2000017c
 80a2528:	20000000 	.word	0x20000000
 80a252c:	080a8020 	.word	0x080a8020
 80a2530:	080a80b5 	.word	0x080a80b5
 80a2534:	200002d8 	.word	0x200002d8
 80a2538:	080a80c5 	.word	0x080a80c5
 80a253c:	080a80df 	.word	0x080a80df
 80a2540:	080a793c 	.word	0x080a793c
 80a2544:	080a7970 	.word	0x080a7970
 80a2548:	200003b8 	.word	0x200003b8
 80a254c:	200002f4 	.word	0x200002f4
 80a2550:	20000334 	.word	0x20000334

080a2554 <loop>:
{
 80a2554:	b538      	push	{r3, r4, r5, lr}
  Blynk.run();
 80a2556:	2100      	movs	r1, #0
 80a2558:	482b      	ldr	r0, [pc, #172]	; (80a2608 <loop+0xb4>)
 80a255a:	f7fe fe6d 	bl	80a1238 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  fast_counter++;
 80a255e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80a2562:	4d2a      	ldr	r5, [pc, #168]	; (80a260c <loop+0xb8>)
 80a2564:	682b      	ldr	r3, [r5, #0]
 80a2566:	3301      	adds	r3, #1
 80a2568:	fb93 f2f0 	sdiv	r2, r3, r0
 80a256c:	602b      	str	r3, [r5, #0]
 80a256e:	fb00 3312 	mls	r3, r0, r2, r3
  if ((fast_counter % 1600) == 0) // every 5 seconds
 80a2572:	b953      	cbnz	r3, 80a258a <loop+0x36>
    CountDown();
 80a2574:	f000 fe9c 	bl	80a32b0 <_Z9CountDownv>
    if (Time.minute() == 10)
 80a2578:	f001 ffaa 	bl	80a44d0 <_ZN9TimeClass6minuteEv>
 80a257c:	280a      	cmp	r0, #10
 80a257e:	d104      	bne.n	80a258a <loop+0x36>
      sleep(getSleepTime(55));
 80a2580:	2037      	movs	r0, #55	; 0x37
 80a2582:	f7fe fa21 	bl	80a09c8 <_Z12getSleepTimei>
 80a2586:	f7fe ffed 	bl	80a1564 <_Z5sleepi>
  if ((fast_counter % 5100) == 0) // every 15 seconds
 80a258a:	f241 33ec 	movw	r3, #5100	; 0x13ec
 80a258e:	682a      	ldr	r2, [r5, #0]
 80a2590:	fb92 f4f3 	sdiv	r4, r2, r3
 80a2594:	fb03 2414 	mls	r4, r3, r4, r2
 80a2598:	b974      	cbnz	r4, 80a25b8 <loop+0x64>
    tnow = getTime();
 80a259a:	f7fe fa0b 	bl	80a09b4 <_Z7getTimev>
 80a259e:	4b1c      	ldr	r3, [pc, #112]	; (80a2610 <loop+0xbc>)
 80a25a0:	6018      	str	r0, [r3, #0]
    printStatus();
 80a25a2:	f7ff fb6b 	bl	80a1c7c <_Z11printStatusv>
    dontSleepHW = checkDontSleepPin();
 80a25a6:	f7fe faa9 	bl	80a0afc <_Z17checkDontSleepPinv>
 80a25aa:	4b1a      	ldr	r3, [pc, #104]	; (80a2614 <loop+0xc0>)
 80a25ac:	6018      	str	r0, [r3, #0]
    BlumenGiessen(0, ts_giessen);
 80a25ae:	4b1a      	ldr	r3, [pc, #104]	; (80a2618 <loop+0xc4>)
 80a25b0:	4620      	mov	r0, r4
 80a25b2:	6819      	ldr	r1, [r3, #0]
 80a25b4:	f000 fdf8 	bl	80a31a8 <_Z13BlumenGiessenii>
  if ((fast_counter % 80000) == 0) // once per 4 minutes
 80a25b8:	682a      	ldr	r2, [r5, #0]
 80a25ba:	4b18      	ldr	r3, [pc, #96]	; (80a261c <loop+0xc8>)
 80a25bc:	4353      	muls	r3, r2
 80a25be:	f24d 12b6 	movw	r2, #53686	; 0xd1b6
 80a25c2:	f503 1351 	add.w	r3, r3, #3424256	; 0x344000
 80a25c6:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 80a25ca:	ebb2 1ff3 	cmp.w	r2, r3, ror #7
 80a25ce:	d31a      	bcc.n	80a2606 <loop+0xb2>
    printSlowStatus();
 80a25d0:	f7ff fc28 	bl	80a1e24 <_Z15printSlowStatusv>
    if (tnow > (23*60) + 30)
 80a25d4:	4b0e      	ldr	r3, [pc, #56]	; (80a2610 <loop+0xbc>)
 80a25d6:	681a      	ldr	r2, [r3, #0]
 80a25d8:	f240 5382 	movw	r3, #1410	; 0x582
 80a25dc:	429a      	cmp	r2, r3
      done_giessen = 0; // armed for the next day
 80a25de:	bfc2      	ittt	gt
 80a25e0:	2200      	movgt	r2, #0
 80a25e2:	4b0f      	ldrgt	r3, [pc, #60]	; (80a2620 <loop+0xcc>)
 80a25e4:	601a      	strgt	r2, [r3, #0]
    if (termCounter > 0)
 80a25e6:	4a0f      	ldr	r2, [pc, #60]	; (80a2624 <loop+0xd0>)
 80a25e8:	6813      	ldr	r3, [r2, #0]
 80a25ea:	2b00      	cmp	r3, #0
 80a25ec:	dd0b      	ble.n	80a2606 <loop+0xb2>
      termCounter--;
 80a25ee:	3b01      	subs	r3, #1
 80a25f0:	6013      	str	r3, [r2, #0]
      if (termCounter == 0)
 80a25f2:	b943      	cbnz	r3, 80a2606 <loop+0xb2>
        println("Terminal disabled");      
 80a25f4:	480c      	ldr	r0, [pc, #48]	; (80a2628 <loop+0xd4>)
 80a25f6:	f7fe ff9b 	bl	80a1530 <_Z7printlnPc>
} // loop
 80a25fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        WriteToDatabase("CONTROL","TERMINAL disabled by timeout");
 80a25fe:	490b      	ldr	r1, [pc, #44]	; (80a262c <loop+0xd8>)
 80a2600:	480b      	ldr	r0, [pc, #44]	; (80a2630 <loop+0xdc>)
 80a2602:	f7fd bd7b 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
} // loop
 80a2606:	bd38      	pop	{r3, r4, r5, pc}
 80a2608:	2000017c 	.word	0x2000017c
 80a260c:	200002f4 	.word	0x200002f4
 80a2610:	200003b8 	.word	0x200003b8
 80a2614:	200002f0 	.word	0x200002f0
 80a2618:	200003bc 	.word	0x200003bc
 80a261c:	3afb7e91 	.word	0x3afb7e91
 80a2620:	200002ec 	.word	0x200002ec
 80a2624:	20000330 	.word	0x20000330
 80a2628:	080a80e5 	.word	0x080a80e5
 80a262c:	080a80f7 	.word	0x080a80f7
 80a2630:	080a77cf 	.word	0x080a77cf

080a2634 <_Z9run_blynkv>:
{
 80a2634:	b508      	push	{r3, lr}
  Blynk.run();
 80a2636:	2100      	movs	r1, #0
 80a2638:	4801      	ldr	r0, [pc, #4]	; (80a2640 <_Z9run_blynkv+0xc>)
 80a263a:	f7fe fdfd 	bl	80a1238 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
}
 80a263e:	bd08      	pop	{r3, pc}
 80a2640:	2000017c 	.word	0x2000017c

080a2644 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz>:
}
 80a2644:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
 80a2646:	2400      	movs	r4, #0
 80a2648:	2201      	movs	r2, #1
 80a264a:	4b1b      	ldr	r3, [pc, #108]	; (80a26b8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x74>)
        : domain(NULL), port(0)
 80a264c:	4d1b      	ldr	r5, [pc, #108]	; (80a26bc <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x78>)
 80a264e:	601c      	str	r4, [r3, #0]
 80a2650:	4b1b      	ldr	r3, [pc, #108]	; (80a26c0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x7c>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
 80a2652:	4e1c      	ldr	r6, [pc, #112]	; (80a26c4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x80>)
 80a2654:	701c      	strb	r4, [r3, #0]
 80a2656:	4b1c      	ldr	r3, [pc, #112]	; (80a26c8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x84>)
 80a2658:	4628      	mov	r0, r5
 80a265a:	701a      	strb	r2, [r3, #0]
 80a265c:	f001 fc9a 	bl	80a3f94 <_ZN9TCPClientC1Ev>
 80a2660:	f105 001c 	add.w	r0, r5, #28
 80a2664:	f002 fb0c 	bl	80a4c80 <_ZN9IPAddressC1Ev>
 80a2668:	4632      	mov	r2, r6
 80a266a:	636c      	str	r4, [r5, #52]	; 0x34
 80a266c:	872c      	strh	r4, [r5, #56]	; 0x38
 80a266e:	4628      	mov	r0, r5
 80a2670:	4916      	ldr	r1, [pc, #88]	; (80a26cc <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x88>)
 80a2672:	f002 fef1 	bl	80a5458 <__aeabi_atexit>
        , state(CONNECTING)
 80a2676:	4b16      	ldr	r3, [pc, #88]	; (80a26d0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x8c>)
String hwID;
 80a2678:	4916      	ldr	r1, [pc, #88]	; (80a26d4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x90>)
 80a267a:	e9c3 5400 	strd	r5, r4, [r3]
 80a267e:	4d16      	ldr	r5, [pc, #88]	; (80a26d8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x94>)
 80a2680:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80a2684:	e9c3 4404 	strd	r4, r4, [r3, #16]
 80a2688:	619c      	str	r4, [r3, #24]
 80a268a:	839c      	strh	r4, [r3, #28]
 80a268c:	4628      	mov	r0, r5
 80a268e:	f001 fd19 	bl	80a40c4 <_ZN6StringC1EPKc>
 80a2692:	4632      	mov	r2, r6
 80a2694:	4628      	mov	r0, r5
 80a2696:	4911      	ldr	r1, [pc, #68]	; (80a26dc <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x98>)
 80a2698:	f002 fede 	bl	80a5458 <__aeabi_atexit>
#include <Blynk/BlynkApi.h>

class BlynkWidgetBase
{
public:
    BlynkWidgetBase(uint8_t vPin) : mPin(vPin) {}
 80a269c:	2316      	movs	r3, #22
 80a269e:	4810      	ldr	r0, [pc, #64]	; (80a26e0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x9c>)
WidgetTerminal terminal(V22);
 80a26a0:	4632      	mov	r2, r6
 80a26a2:	7203      	strb	r3, [r0, #8]
        , mOutQty(0)
 80a26a4:	4b0f      	ldr	r3, [pc, #60]	; (80a26e4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xa0>)
    Print() : write_error(0) {}
 80a26a6:	6044      	str	r4, [r0, #4]
 80a26a8:	6003      	str	r3, [r0, #0]
 80a26aa:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
 80a26ae:	490e      	ldr	r1, [pc, #56]	; (80a26e8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xa4>)
}
 80a26b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
WidgetTerminal terminal(V22);
 80a26b4:	f002 bed0 	b.w	80a5458 <__aeabi_atexit>
 80a26b8:	200001d8 	.word	0x200001d8
 80a26bc:	2000019c 	.word	0x2000019c
 80a26c0:	200001dc 	.word	0x200001dc
 80a26c4:	20000128 	.word	0x20000128
 80a26c8:	200001dd 	.word	0x200001dd
 80a26cc:	080a0b81 	.word	0x080a0b81
 80a26d0:	2000017c 	.word	0x2000017c
 80a26d4:	080a80b4 	.word	0x080a80b4
 80a26d8:	200002fc 	.word	0x200002fc
 80a26dc:	080a4031 	.word	0x080a4031
 80a26e0:	20000338 	.word	0x20000338
 80a26e4:	080a811c 	.word	0x080a811c
 80a26e8:	080a085b 	.word	0x080a085b

080a26ec <digitalWriteFast>:
#endif

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
 80a26ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a26ee:	4d27      	ldr	r5, [pc, #156]	; (80a278c <digitalWriteFast+0xa0>)
 80a26f0:	4606      	mov	r6, r0
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a26f2:	782b      	ldrb	r3, [r5, #0]
 80a26f4:	4c26      	ldr	r4, [pc, #152]	; (80a2790 <digitalWriteFast+0xa4>)
 80a26f6:	f3bf 8f5b 	dmb	ish
    if (value)
 80a26fa:	b319      	cbz	r1, 80a2744 <digitalWriteFast+0x58>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a26fc:	07d8      	lsls	r0, r3, #31
 80a26fe:	d409      	bmi.n	80a2714 <digitalWriteFast+0x28>
 80a2700:	4628      	mov	r0, r5
 80a2702:	f7fd fcce 	bl	80a00a2 <__cxa_guard_acquire>
 80a2706:	b128      	cbz	r0, 80a2714 <digitalWriteFast+0x28>
 80a2708:	f000 fe50 	bl	80a33ac <HAL_Pin_Map>
 80a270c:	6020      	str	r0, [r4, #0]
 80a270e:	4628      	mov	r0, r5
 80a2710:	f7fd fccc 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a2714:	201c      	movs	r0, #28
 80a2716:	4346      	muls	r6, r0
 80a2718:	6827      	ldr	r7, [r4, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a271a:	782b      	ldrb	r3, [r5, #0]
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a271c:	4437      	add	r7, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a271e:	07d9      	lsls	r1, r3, #31
 80a2720:	f3bf 8f5b 	dmb	ish
 80a2724:	d409      	bmi.n	80a273a <digitalWriteFast+0x4e>
 80a2726:	4819      	ldr	r0, [pc, #100]	; (80a278c <digitalWriteFast+0xa0>)
 80a2728:	f7fd fcbb 	bl	80a00a2 <__cxa_guard_acquire>
 80a272c:	b128      	cbz	r0, 80a273a <digitalWriteFast+0x4e>
 80a272e:	f000 fe3d 	bl	80a33ac <HAL_Pin_Map>
 80a2732:	6020      	str	r0, [r4, #0]
 80a2734:	4815      	ldr	r0, [pc, #84]	; (80a278c <digitalWriteFast+0xa0>)
 80a2736:	f7fd fcb9 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a273a:	6823      	ldr	r3, [r4, #0]
 80a273c:	88ba      	ldrh	r2, [r7, #4]
 80a273e:	599b      	ldr	r3, [r3, r6]
 80a2740:	831a      	strh	r2, [r3, #24]
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
 80a2742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a2744:	07da      	lsls	r2, r3, #31
 80a2746:	d409      	bmi.n	80a275c <digitalWriteFast+0x70>
 80a2748:	4628      	mov	r0, r5
 80a274a:	f7fd fcaa 	bl	80a00a2 <__cxa_guard_acquire>
 80a274e:	b128      	cbz	r0, 80a275c <digitalWriteFast+0x70>
 80a2750:	f000 fe2c 	bl	80a33ac <HAL_Pin_Map>
 80a2754:	6020      	str	r0, [r4, #0]
 80a2756:	4628      	mov	r0, r5
 80a2758:	f7fd fca8 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a275c:	201c      	movs	r0, #28
 80a275e:	4346      	muls	r6, r0
 80a2760:	6827      	ldr	r7, [r4, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a2762:	782b      	ldrb	r3, [r5, #0]
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a2764:	4437      	add	r7, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a2766:	07db      	lsls	r3, r3, #31
 80a2768:	f3bf 8f5b 	dmb	ish
 80a276c:	d409      	bmi.n	80a2782 <digitalWriteFast+0x96>
 80a276e:	4807      	ldr	r0, [pc, #28]	; (80a278c <digitalWriteFast+0xa0>)
 80a2770:	f7fd fc97 	bl	80a00a2 <__cxa_guard_acquire>
 80a2774:	b128      	cbz	r0, 80a2782 <digitalWriteFast+0x96>
 80a2776:	f000 fe19 	bl	80a33ac <HAL_Pin_Map>
 80a277a:	6020      	str	r0, [r4, #0]
 80a277c:	4803      	ldr	r0, [pc, #12]	; (80a278c <digitalWriteFast+0xa0>)
 80a277e:	f7fd fc95 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a2782:	6823      	ldr	r3, [r4, #0]
 80a2784:	88ba      	ldrh	r2, [r7, #4]
 80a2786:	599b      	ldr	r3, [r3, r6]
 80a2788:	835a      	strh	r2, [r3, #26]
}
 80a278a:	e7da      	b.n	80a2742 <digitalWriteFast+0x56>
 80a278c:	200003c0 	.word	0x200003c0
 80a2790:	200003c4 	.word	0x200003c4

080a2794 <_Z17ultra_sonic_setupv>:


#include "05_ultrasonic.h"

 void ultra_sonic_setup()
 {
 80a2794:	b508      	push	{r3, lr}
   	// Initialize pins for sensor
   	pinMode(trigPin, OUTPUT);
 80a2796:	2101      	movs	r1, #1
 80a2798:	2003      	movs	r0, #3
 80a279a:	f002 fd73 	bl	80a5284 <pinMode>
   	digitalWriteFast(trigPin, LOW);
 80a279e:	2003      	movs	r0, #3
 80a27a0:	2100      	movs	r1, #0
 80a27a2:	f7ff ffa3 	bl	80a26ec <digitalWriteFast>
   	delay(50);
 }
 80a27a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	delay(50);
 80a27aa:	2032      	movs	r0, #50	; 0x32
 80a27ac:	f001 bed2 	b.w	80a4554 <delay>

080a27b0 <_Z16ultra_sonic_pingv>:


 uint32_t ultra_sonic_ping()
 {
 80a27b0:	b508      	push	{r3, lr}
   	uint32_t duration;
   	pinMode(echoPin, INPUT);
 80a27b2:	2100      	movs	r1, #0
 80a27b4:	2004      	movs	r0, #4
 80a27b6:	f002 fd65 	bl	80a5284 <pinMode>
   	pinMode(trigPin, OUTPUT);
 80a27ba:	2101      	movs	r1, #1
 80a27bc:	2003      	movs	r0, #3
 80a27be:	f002 fd61 	bl	80a5284 <pinMode>

   	// The sensor is triggered by a HIGH pulse of 10 or more microseconds.
   	digitalWriteFast(trigPin, HIGH);
 80a27c2:	2101      	movs	r1, #1
 80a27c4:	2003      	movs	r0, #3
 80a27c6:	f7ff ff91 	bl	80a26ec <digitalWriteFast>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a27ca:	200a      	movs	r0, #10
 80a27cc:	f000 fe56 	bl	80a347c <HAL_Delay_Microseconds>
   	delayMicroseconds(10);
   	digitalWriteFast(trigPin, LOW);
 80a27d0:	2100      	movs	r1, #0
 80a27d2:	2003      	movs	r0, #3
 80a27d4:	f7ff ff8a 	bl	80a26ec <digitalWriteFast>

   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin

   	return duration;
 }
 80a27d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin
 80a27dc:	2101      	movs	r1, #1
 80a27de:	2004      	movs	r0, #4
 80a27e0:	f002 bdca 	b.w	80a5378 <pulseIn>

080a27e4 <_Z6uMillim>:
uint32_t uMilli(uint32_t microseconds)
{
     // The speed of sound is 340 m/s or 29 microseconds per centimeter.
     // The ping travels out and back, so to find the distance of the
     // object we take half of the distance travelled.
     return ( 10 * microseconds / 29 / 2);
 80a27e4:	230a      	movs	r3, #10
 80a27e6:	4343      	muls	r3, r0
}
 80a27e8:	203a      	movs	r0, #58	; 0x3a
 80a27ea:	fbb3 f0f0 	udiv	r0, r3, r0
 80a27ee:	4770      	bx	lr

080a27f0 <_ZN7OneWire11write_bytesEPKhtb.part.0>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
 80a27f0:	b510      	push	{r4, lr}
 80a27f2:	4604      	mov	r4, r0
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
        noInterrupts();
 80a27f4:	f002 fb3a 	bl	80a4e6c <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a27f8:	231c      	movs	r3, #28
 80a27fa:	8822      	ldrh	r2, [r4, #0]
 80a27fc:	4353      	muls	r3, r2
 80a27fe:	6862      	ldr	r2, [r4, #4]
 80a2800:	18d1      	adds	r1, r2, r3
 80a2802:	58d3      	ldr	r3, [r2, r3]
 80a2804:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a2806:	2101      	movs	r1, #1
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a2808:	831a      	strh	r2, [r3, #24]
      HAL_Pin_Mode(_pin, OUTPUT);
 80a280a:	8820      	ldrh	r0, [r4, #0]
 80a280c:	f000 fdde 	bl	80a33cc <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 80a2810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        interrupts();
 80a2814:	f002 bb2c 	b.w	80a4e70 <_Z10interruptsv>

080a2818 <_ZN7OneWire19digitalWriteFastLowEv>:
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a2818:	231c      	movs	r3, #28
 80a281a:	8802      	ldrh	r2, [r0, #0]
 80a281c:	4353      	muls	r3, r2
 80a281e:	6842      	ldr	r2, [r0, #4]
 80a2820:	18d1      	adds	r1, r2, r3
 80a2822:	58d3      	ldr	r3, [r2, r3]
 80a2824:	888a      	ldrh	r2, [r1, #4]
 80a2826:	835a      	strh	r2, [r3, #26]
    }
 80a2828:	4770      	bx	lr

080a282a <_ZN7OneWireC1Et>:
OneWire::OneWire(uint16_t pin)
 80a282a:	b538      	push	{r3, r4, r5, lr}
 80a282c:	4604      	mov	r4, r0
 80a282e:	460d      	mov	r5, r1
 80a2830:	f000 fdbc 	bl	80a33ac <HAL_Pin_Map>
    pinMode(pin, INPUT);
 80a2834:	2100      	movs	r1, #0
OneWire::OneWire(uint16_t pin)
 80a2836:	6060      	str	r0, [r4, #4]
    pinMode(pin, INPUT);
 80a2838:	4628      	mov	r0, r5
 80a283a:	f002 fd23 	bl	80a5284 <pinMode>
}
 80a283e:	4620      	mov	r0, r4
    _pin = pin;
 80a2840:	8025      	strh	r5, [r4, #0]
}
 80a2842:	bd38      	pop	{r3, r4, r5, pc}

080a2844 <_ZN7OneWire5resetEv>:
{
 80a2844:	b538      	push	{r3, r4, r5, lr}
 80a2846:	4605      	mov	r5, r0
    noInterrupts();
 80a2848:	f002 fb10 	bl	80a4e6c <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a284c:	2100      	movs	r1, #0
 80a284e:	8828      	ldrh	r0, [r5, #0]
 80a2850:	f000 fdbc 	bl	80a33cc <HAL_Pin_Mode>
    interrupts();
 80a2854:	247d      	movs	r4, #125	; 0x7d
 80a2856:	f002 fb0b 	bl	80a4e70 <_Z10interruptsv>
        if (--retries == 0) return 0;
 80a285a:	3c01      	subs	r4, #1
 80a285c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a2860:	d02d      	beq.n	80a28be <_ZN7OneWire5resetEv+0x7a>
 80a2862:	2002      	movs	r0, #2
 80a2864:	f000 fe0a 	bl	80a347c <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a2868:	8828      	ldrh	r0, [r5, #0]
 80a286a:	f000 fdc7 	bl	80a33fc <HAL_GPIO_Read>
    } while ( !digitalReadFast());
 80a286e:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a2872:	d0f2      	beq.n	80a285a <_ZN7OneWire5resetEv+0x16>
    noInterrupts();
 80a2874:	f002 fafa 	bl	80a4e6c <_Z12noInterruptsv>
    digitalWriteFastLow();
 80a2878:	4628      	mov	r0, r5
 80a287a:	f7ff ffcd 	bl	80a2818 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a287e:	2101      	movs	r1, #1
 80a2880:	8828      	ldrh	r0, [r5, #0]
 80a2882:	f000 fda3 	bl	80a33cc <HAL_Pin_Mode>
    interrupts();
 80a2886:	f002 faf3 	bl	80a4e70 <_Z10interruptsv>
 80a288a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a288e:	f000 fdf5 	bl	80a347c <HAL_Delay_Microseconds>
    noInterrupts();
 80a2892:	f002 faeb 	bl	80a4e6c <_Z12noInterruptsv>
      HAL_Pin_Mode(_pin, INPUT);
 80a2896:	2100      	movs	r1, #0
 80a2898:	8828      	ldrh	r0, [r5, #0]
 80a289a:	f000 fd97 	bl	80a33cc <HAL_Pin_Mode>
 80a289e:	2046      	movs	r0, #70	; 0x46
 80a28a0:	f000 fdec 	bl	80a347c <HAL_Delay_Microseconds>
      return HAL_GPIO_Read(_pin);
 80a28a4:	8828      	ldrh	r0, [r5, #0]
 80a28a6:	f000 fda9 	bl	80a33fc <HAL_GPIO_Read>
    r =! digitalReadFast();
 80a28aa:	b2c4      	uxtb	r4, r0
 80a28ac:	fab4 f484 	clz	r4, r4
    interrupts();
 80a28b0:	f002 fade 	bl	80a4e70 <_Z10interruptsv>
 80a28b4:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    r =! digitalReadFast();
 80a28b8:	0964      	lsrs	r4, r4, #5
 80a28ba:	f000 fddf 	bl	80a347c <HAL_Delay_Microseconds>
}
 80a28be:	4620      	mov	r0, r4
 80a28c0:	bd38      	pop	{r3, r4, r5, pc}

080a28c2 <_ZN7OneWire9write_bitEh>:
{
 80a28c2:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 80a28c4:	f011 0501 	ands.w	r5, r1, #1
{
 80a28c8:	4604      	mov	r4, r0
    if (v & 1) {
 80a28ca:	d016      	beq.n	80a28fa <_ZN7OneWire9write_bitEh+0x38>
        noInterrupts();
 80a28cc:	f002 face 	bl	80a4e6c <_Z12noInterruptsv>
        digitalWriteFastLow();
 80a28d0:	4620      	mov	r0, r4
 80a28d2:	f7ff ffa1 	bl	80a2818 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a28d6:	2101      	movs	r1, #1
 80a28d8:	8820      	ldrh	r0, [r4, #0]
 80a28da:	f000 fd77 	bl	80a33cc <HAL_Pin_Mode>
 80a28de:	200a      	movs	r0, #10
 80a28e0:	f000 fdcc 	bl	80a347c <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
 80a28e4:	8820      	ldrh	r0, [r4, #0]
 80a28e6:	2100      	movs	r1, #0
 80a28e8:	f000 fd70 	bl	80a33cc <HAL_Pin_Mode>
        interrupts();
 80a28ec:	f002 fac0 	bl	80a4e70 <_Z10interruptsv>
 80a28f0:	2037      	movs	r0, #55	; 0x37
}
 80a28f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a28f6:	f000 bdc1 	b.w	80a347c <HAL_Delay_Microseconds>
        noInterrupts();
 80a28fa:	f002 fab7 	bl	80a4e6c <_Z12noInterruptsv>
        digitalWriteFastLow();
 80a28fe:	4620      	mov	r0, r4
 80a2900:	f7ff ff8a 	bl	80a2818 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a2904:	2101      	movs	r1, #1
 80a2906:	8820      	ldrh	r0, [r4, #0]
 80a2908:	f000 fd60 	bl	80a33cc <HAL_Pin_Mode>
 80a290c:	2041      	movs	r0, #65	; 0x41
 80a290e:	f000 fdb5 	bl	80a347c <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
 80a2912:	8820      	ldrh	r0, [r4, #0]
 80a2914:	4629      	mov	r1, r5
 80a2916:	f000 fd59 	bl	80a33cc <HAL_Pin_Mode>
        interrupts();
 80a291a:	f002 faa9 	bl	80a4e70 <_Z10interruptsv>
 80a291e:	2005      	movs	r0, #5
 80a2920:	e7e7      	b.n	80a28f2 <_ZN7OneWire9write_bitEh+0x30>

080a2922 <_ZN7OneWire8read_bitEv>:
{
 80a2922:	b510      	push	{r4, lr}
 80a2924:	4604      	mov	r4, r0
    noInterrupts();
 80a2926:	f002 faa1 	bl	80a4e6c <_Z12noInterruptsv>
    digitalWriteFastLow();
 80a292a:	4620      	mov	r0, r4
 80a292c:	f7ff ff74 	bl	80a2818 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a2930:	2101      	movs	r1, #1
 80a2932:	8820      	ldrh	r0, [r4, #0]
 80a2934:	f000 fd4a 	bl	80a33cc <HAL_Pin_Mode>
 80a2938:	2003      	movs	r0, #3
 80a293a:	f000 fd9f 	bl	80a347c <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
 80a293e:	2100      	movs	r1, #0
 80a2940:	8820      	ldrh	r0, [r4, #0]
 80a2942:	f000 fd43 	bl	80a33cc <HAL_Pin_Mode>
 80a2946:	200a      	movs	r0, #10
 80a2948:	f000 fd98 	bl	80a347c <HAL_Delay_Microseconds>
      return HAL_GPIO_Read(_pin);
 80a294c:	8820      	ldrh	r0, [r4, #0]
 80a294e:	f000 fd55 	bl	80a33fc <HAL_GPIO_Read>
 80a2952:	4604      	mov	r4, r0
    interrupts();
 80a2954:	f002 fa8c 	bl	80a4e70 <_Z10interruptsv>
 80a2958:	2035      	movs	r0, #53	; 0x35
 80a295a:	f000 fd8f 	bl	80a347c <HAL_Delay_Microseconds>
}
 80a295e:	b2e0      	uxtb	r0, r4
 80a2960:	bd10      	pop	{r4, pc}

080a2962 <_ZN7OneWire5writeEhh>:
{
 80a2962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2966:	4605      	mov	r5, r0
 80a2968:	4688      	mov	r8, r1
 80a296a:	4616      	mov	r6, r2
 80a296c:	2708      	movs	r7, #8
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a296e:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a2970:	ea18 0f04 	tst.w	r8, r4
 80a2974:	bf14      	ite	ne
 80a2976:	2101      	movne	r1, #1
 80a2978:	2100      	moveq	r1, #0
 80a297a:	4628      	mov	r0, r5
 80a297c:	f7ff ffa1 	bl	80a28c2 <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2980:	0064      	lsls	r4, r4, #1
 80a2982:	3f01      	subs	r7, #1
 80a2984:	b2e4      	uxtb	r4, r4
 80a2986:	d1f3      	bne.n	80a2970 <_ZN7OneWire5writeEhh+0xe>
    if ( power) {
 80a2988:	b126      	cbz	r6, 80a2994 <_ZN7OneWire5writeEhh+0x32>
 80a298a:	4628      	mov	r0, r5
}
 80a298c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2990:	f7ff bf2e 	b.w	80a27f0 <_ZN7OneWire11write_bytesEPKhtb.part.0>
 80a2994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2998 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
 80a2998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a299a:	4607      	mov	r7, r0
 80a299c:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a299e:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a29a0:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a29a2:	4638      	mov	r0, r7
 80a29a4:	f7ff ffbd 	bl	80a2922 <_ZN7OneWire8read_bitEv>
 80a29a8:	b100      	cbz	r0, 80a29ac <_ZN7OneWire4readEv+0x14>
 80a29aa:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a29ac:	0064      	lsls	r4, r4, #1
 80a29ae:	3e01      	subs	r6, #1
 80a29b0:	b2e4      	uxtb	r4, r4
 80a29b2:	d1f6      	bne.n	80a29a2 <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
 80a29b4:	4628      	mov	r0, r5
 80a29b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a29b8 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a29b8:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a29ba:	2200      	movs	r2, #0
{
 80a29bc:	460c      	mov	r4, r1
    write(0x55);           // Choose ROM
 80a29be:	2155      	movs	r1, #85	; 0x55
{
 80a29c0:	4606      	mov	r6, r0
    write(0x55);           // Choose ROM
 80a29c2:	f7ff ffce 	bl	80a2962 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++) write(rom[i]);
 80a29c6:	1e65      	subs	r5, r4, #1
 80a29c8:	3407      	adds	r4, #7
 80a29ca:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a29ce:	2200      	movs	r2, #0
 80a29d0:	4630      	mov	r0, r6
 80a29d2:	f7ff ffc6 	bl	80a2962 <_ZN7OneWire5writeEhh>
 80a29d6:	42a5      	cmp	r5, r4
 80a29d8:	d1f7      	bne.n	80a29ca <_ZN7OneWire6selectEPKh+0x12>
}
 80a29da:	bd70      	pop	{r4, r5, r6, pc}

080a29dc <_ZN7OneWire12reset_searchEv>:
    LastDiscrepancy = 0;
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a29dc:	2300      	movs	r3, #0
 80a29de:	e9c0 3302 	strd	r3, r3, [r0, #8]
    LastDiscrepancy = 0;
 80a29e2:	8203      	strh	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a29e4:	7483      	strb	r3, [r0, #18]
        if ( i == 0) break;
    }
}
 80a29e6:	4770      	bx	lr

080a29e8 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a29e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a29ec:	f890 9012 	ldrb.w	r9, [r0, #18]
{
 80a29f0:	4604      	mov	r4, r0
 80a29f2:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
 80a29f4:	f1b9 0f00 	cmp.w	r9, #0
 80a29f8:	d00e      	beq.n	80a2a18 <_ZN7OneWire6searchEPh+0x30>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a29fa:	2000      	movs	r0, #0
 80a29fc:	8220      	strh	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a29fe:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a2a00:	f104 0308 	add.w	r3, r4, #8
 80a2a04:	f108 38ff 	add.w	r8, r8, #4294967295
 80a2a08:	3410      	adds	r4, #16
 80a2a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2a0e:	42a3      	cmp	r3, r4
 80a2a10:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a2a14:	d1f9      	bne.n	80a2a0a <_ZN7OneWire6searchEPh+0x22>
 80a2a16:	e004      	b.n	80a2a22 <_ZN7OneWire6searchEPh+0x3a>
        if (!reset()){
 80a2a18:	f7ff ff14 	bl	80a2844 <_ZN7OneWire5resetEv>
 80a2a1c:	b918      	cbnz	r0, 80a2a26 <_ZN7OneWire6searchEPh+0x3e>
            LastDiscrepancy = 0;
 80a2a1e:	8220      	strh	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a2a20:	74a0      	strb	r0, [r4, #18]

    return search_result;
}
 80a2a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rom_byte_mask = 1;
 80a2a26:	2601      	movs	r6, #1
        write(0xF0);
 80a2a28:	464a      	mov	r2, r9
 80a2a2a:	21f0      	movs	r1, #240	; 0xf0
 80a2a2c:	4620      	mov	r0, r4
 80a2a2e:	f7ff ff98 	bl	80a2962 <_ZN7OneWire5writeEhh>
    rom_byte_number = 0;
 80a2a32:	46ca      	mov	sl, r9
    id_bit_number = 1;
 80a2a34:	4635      	mov	r5, r6
            id_bit = read_bit();
 80a2a36:	4620      	mov	r0, r4
 80a2a38:	f7ff ff73 	bl	80a2922 <_ZN7OneWire8read_bitEv>
 80a2a3c:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
 80a2a3e:	4620      	mov	r0, r4
 80a2a40:	f7ff ff6f 	bl	80a2922 <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a2a44:	2f01      	cmp	r7, #1
 80a2a46:	d10f      	bne.n	80a2a68 <_ZN7OneWire6searchEPh+0x80>
 80a2a48:	2801      	cmp	r0, #1
 80a2a4a:	d127      	bne.n	80a2a9c <_ZN7OneWire6searchEPh+0xb4>
        if (!(id_bit_number < 65))
 80a2a4c:	2d40      	cmp	r5, #64	; 0x40
 80a2a4e:	d9d4      	bls.n	80a29fa <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
 80a2a50:	f884 9010 	strb.w	r9, [r4, #16]
            if (LastDiscrepancy == 0)
 80a2a54:	f1b9 0f00 	cmp.w	r9, #0
 80a2a58:	d101      	bne.n	80a2a5e <_ZN7OneWire6searchEPh+0x76>
                LastDeviceFlag = TRUE;
 80a2a5a:	2301      	movs	r3, #1
 80a2a5c:	74a3      	strb	r3, [r4, #18]
    if (!search_result || !ROM_NO[0]){
 80a2a5e:	7a23      	ldrb	r3, [r4, #8]
 80a2a60:	2b00      	cmp	r3, #0
 80a2a62:	d0ca      	beq.n	80a29fa <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
 80a2a64:	2001      	movs	r0, #1
 80a2a66:	e7cb      	b.n	80a2a00 <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit){
 80a2a68:	4287      	cmp	r7, r0
 80a2a6a:	eb04 030a 	add.w	r3, r4, sl
 80a2a6e:	d10c      	bne.n	80a2a8a <_ZN7OneWire6searchEPh+0xa2>
                    if (id_bit_number < LastDiscrepancy)
 80a2a70:	7c22      	ldrb	r2, [r4, #16]
 80a2a72:	42aa      	cmp	r2, r5
 80a2a74:	d90e      	bls.n	80a2a94 <_ZN7OneWire6searchEPh+0xac>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a2a76:	7a1a      	ldrb	r2, [r3, #8]
 80a2a78:	4216      	tst	r6, r2
 80a2a7a:	bf14      	ite	ne
 80a2a7c:	2701      	movne	r7, #1
 80a2a7e:	2700      	moveq	r7, #0
                    if (search_direction == 0){
 80a2a80:	b967      	cbnz	r7, 80a2a9c <_ZN7OneWire6searchEPh+0xb4>
                        if (last_zero < 9)
 80a2a82:	2d08      	cmp	r5, #8
 80a2a84:	d800      	bhi.n	80a2a88 <_ZN7OneWire6searchEPh+0xa0>
                            LastFamilyDiscrepancy = last_zero;
 80a2a86:	7465      	strb	r5, [r4, #17]
                if (search_direction == 1)
 80a2a88:	46a9      	mov	r9, r5
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a2a8a:	7a1a      	ldrb	r2, [r3, #8]
 80a2a8c:	ea22 0206 	bic.w	r2, r2, r6
 80a2a90:	721a      	strb	r2, [r3, #8]
 80a2a92:	e009      	b.n	80a2aa8 <_ZN7OneWire6searchEPh+0xc0>
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a2a94:	bf0c      	ite	eq
 80a2a96:	2701      	moveq	r7, #1
 80a2a98:	2700      	movne	r7, #0
 80a2a9a:	e7f1      	b.n	80a2a80 <_ZN7OneWire6searchEPh+0x98>
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a2a9c:	2701      	movs	r7, #1
 80a2a9e:	eb04 020a 	add.w	r2, r4, sl
 80a2aa2:	7a13      	ldrb	r3, [r2, #8]
 80a2aa4:	4333      	orrs	r3, r6
 80a2aa6:	7213      	strb	r3, [r2, #8]
                write_bit(search_direction);
 80a2aa8:	4639      	mov	r1, r7
 80a2aaa:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
 80a2aac:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
 80a2aae:	f7ff ff08 	bl	80a28c2 <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
 80a2ab2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
 80a2ab6:	bf02      	ittt	eq
 80a2ab8:	f10a 0a01 	addeq.w	sl, sl, #1
 80a2abc:	fa5f fa8a 	uxtbeq.w	sl, sl
                    rom_byte_mask = 1;
 80a2ac0:	2601      	moveq	r6, #1
                id_bit_number++;
 80a2ac2:	3501      	adds	r5, #1
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a2ac4:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
 80a2ac8:	b2ed      	uxtb	r5, r5
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a2aca:	d9b4      	bls.n	80a2a36 <_ZN7OneWire6searchEPh+0x4e>
 80a2acc:	e7be      	b.n	80a2a4c <_ZN7OneWire6searchEPh+0x64>

080a2ace <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a2ace:	4602      	mov	r2, r0
    uint8_t crc = 0;
 80a2ad0:	4401      	add	r1, r0
 80a2ad2:	2000      	movs	r0, #0
{
 80a2ad4:	b530      	push	{r4, r5, lr}

    while (len--) {
 80a2ad6:	428a      	cmp	r2, r1
 80a2ad8:	d013      	beq.n	80a2b02 <_ZN7OneWire4crc8EPhh+0x34>
        uint8_t inbyte = *addr++;
 80a2ada:	2408      	movs	r4, #8
 80a2adc:	f812 5b01 	ldrb.w	r5, [r2], #1
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a2ae0:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a2ae4:	f013 0f01 	tst.w	r3, #1
 80a2ae8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a2aec:	bf1c      	itt	ne
 80a2aee:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a2af2:	b2d8      	uxtbne	r0, r3
                inbyte >>= 1;
 80a2af4:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--) {
 80a2af6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
                inbyte >>= 1;
 80a2afa:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--) {
 80a2afe:	d1ef      	bne.n	80a2ae0 <_ZN7OneWire4crc8EPhh+0x12>
 80a2b00:	e7e9      	b.n	80a2ad6 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
 80a2b02:	bd30      	pop	{r4, r5, pc}

080a2b04 <_Z15conrad_rsl_initv>:
/*--------------------------------------------------------------------
Diese Funktion muss einmal von setup() aufgerufen werden
call this function once from setup()
--------------------------------------------------------------------*/
void conrad_rsl_init()  
{
 80a2b04:	b510      	push	{r4, lr}
  pinMode(dpin,OUTPUT);
 80a2b06:	4c07      	ldr	r4, [pc, #28]	; (80a2b24 <_Z15conrad_rsl_initv+0x20>)
 80a2b08:	2101      	movs	r1, #1
 80a2b0a:	8820      	ldrh	r0, [r4, #0]
 80a2b0c:	f002 fbba 	bl	80a5284 <pinMode>
  digitalWrite(dpin,LOW);
 80a2b10:	8820      	ldrh	r0, [r4, #0]
 80a2b12:	2100      	movs	r1, #0
 80a2b14:	f002 fbc7 	bl	80a52a6 <digitalWrite>
  delay(500);
}
 80a2b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
 80a2b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a2b20:	f001 bd18 	b.w	80a4554 <delay>
 80a2b24:	200003c8 	.word	0x200003c8

080a2b28 <_Z19conrad_rsl_transmitPi>:

The next value sets transmitter pin HIGH
------------------------------------------------------------------------------*/
  void conrad_rsl_transmit (int* code)

  {
 80a2b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int rep;
  int i;

   digitalWrite(dpin,LOW);
 80a2b2c:	4c2d      	ldr	r4, [pc, #180]	; (80a2be4 <_Z19conrad_rsl_transmitPi+0xbc>)
 80a2b2e:	2100      	movs	r1, #0
  {
 80a2b30:	4607      	mov	r7, r0
   digitalWrite(dpin,LOW);
 80a2b32:	8820      	ldrh	r0, [r4, #0]
 80a2b34:	f002 fbb7 	bl	80a52a6 <digitalWrite>
 80a2b38:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2b3c:	f000 fc9e 	bl	80a347c <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a2b40:	2100      	movs	r1, #0
 80a2b42:	8820      	ldrh	r0, [r4, #0]
 80a2b44:	f002 fbaf 	bl	80a52a6 <digitalWrite>
 80a2b48:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2b4c:	f000 fc96 	bl	80a347c <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a2b50:	2100      	movs	r1, #0
 80a2b52:	8820      	ldrh	r0, [r4, #0]
 80a2b54:	f002 fba7 	bl	80a52a6 <digitalWrite>
 80a2b58:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2b5c:	f000 fc8e 	bl	80a347c <HAL_Delay_Microseconds>
 80a2b60:	2608      	movs	r6, #8

    for (rep=0; rep<8; rep++)
     {
       // send the bits from data array

     for (i=0; i < code[0]; i = i+4)
 80a2b62:	f04f 0800 	mov.w	r8, #0
 80a2b66:	1d3d      	adds	r5, r7, #4
 80a2b68:	683b      	ldr	r3, [r7, #0]
         digitalWrite(dpin,LOW);
         delayMicroseconds(code[i+4]);
     }

        // for RSL switch
    digitalWrite(dpin,HIGH);
 80a2b6a:	2101      	movs	r1, #1
     for (i=0; i < code[0]; i = i+4)
 80a2b6c:	4543      	cmp	r3, r8
 80a2b6e:	8820      	ldrh	r0, [r4, #0]
 80a2b70:	f105 0510 	add.w	r5, r5, #16
 80a2b74:	dd20      	ble.n	80a2bb8 <_Z19conrad_rsl_transmitPi+0x90>
         digitalWrite(dpin,HIGH);
 80a2b76:	f002 fb96 	bl	80a52a6 <digitalWrite>
 80a2b7a:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80a2b7e:	f000 fc7d 	bl	80a347c <HAL_Delay_Microseconds>
         digitalWrite(dpin,LOW);
 80a2b82:	2100      	movs	r1, #0
 80a2b84:	8820      	ldrh	r0, [r4, #0]
 80a2b86:	f002 fb8e 	bl	80a52a6 <digitalWrite>
 80a2b8a:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 80a2b8e:	f000 fc75 	bl	80a347c <HAL_Delay_Microseconds>
         digitalWrite(dpin,HIGH);
 80a2b92:	2101      	movs	r1, #1
 80a2b94:	8820      	ldrh	r0, [r4, #0]
 80a2b96:	f002 fb86 	bl	80a52a6 <digitalWrite>
 80a2b9a:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80a2b9e:	f000 fc6d 	bl	80a347c <HAL_Delay_Microseconds>
         digitalWrite(dpin,LOW);
 80a2ba2:	2100      	movs	r1, #0
 80a2ba4:	8820      	ldrh	r0, [r4, #0]
 80a2ba6:	f002 fb7e 	bl	80a52a6 <digitalWrite>
 80a2baa:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a2bae:	f000 fc65 	bl	80a347c <HAL_Delay_Microseconds>
     for (i=0; i < code[0]; i = i+4)
 80a2bb2:	f108 0804 	add.w	r8, r8, #4
 80a2bb6:	e7d7      	b.n	80a2b68 <_Z19conrad_rsl_transmitPi+0x40>
    digitalWrite(dpin,HIGH);
 80a2bb8:	f002 fb75 	bl	80a52a6 <digitalWrite>
 80a2bbc:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80a2bc0:	f000 fc5c 	bl	80a347c <HAL_Delay_Microseconds>
    delayMicroseconds(ST);

    // repeat transmitting after given gap

    digitalWrite(dpin,LOW);
 80a2bc4:	2100      	movs	r1, #0
 80a2bc6:	8820      	ldrh	r0, [r4, #0]
 80a2bc8:	f002 fb6d 	bl	80a52a6 <digitalWrite>
 80a2bcc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80a2bd0:	f000 fc54 	bl	80a347c <HAL_Delay_Microseconds>
    for (rep=0; rep<8; rep++)
 80a2bd4:	3e01      	subs	r6, #1
 80a2bd6:	d1c4      	bne.n	80a2b62 <_Z19conrad_rsl_transmitPi+0x3a>
    delayMicroseconds(8000);
    }
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a2bd8:	4631      	mov	r1, r6
 80a2bda:	8820      	ldrh	r0, [r4, #0]
  }
 80a2bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a2be0:	f002 bb61 	b.w	80a52a6 <digitalWrite>
 80a2be4:	200003c8 	.word	0x200003c8

080a2be8 <_Z15conrad_rsl_sendjii>:

  SHORT : dauer des kurzen Pulses in milliseconds
  LONG : dauer des langen Pulses in milliseconds
  --------------------------------------------------------------------*/
  void conrad_rsl_send(unsigned int code, int SHORT, int LONG)
  {
 80a2be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2bec:	b0c6      	sub	sp, #280	; 0x118
 80a2bee:	4605      	mov	r5, r0
 80a2bf0:	460e      	mov	r6, r1
 80a2bf2:	4617      	mov	r7, r2
    int i = 0;
    int k = 1;
    int tx_code[70];  // speicher tx code sequenz

    Serial.println(code);
 80a2bf4:	f002 f8e2 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2bf8:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 80a2bfa:	220a      	movs	r2, #10
 80a2bfc:	4629      	mov	r1, r5
 80a2bfe:	f001 fb38 	bl	80a4272 <_ZN5Print11printNumberEmh>
        n += println();
 80a2c02:	4620      	mov	r0, r4
 80a2c04:	f001 fb1f 	bl	80a4246 <_ZN5Print7printlnEv>

    memset(tx_code,0,64);
 80a2c08:	223c      	movs	r2, #60	; 0x3c
 80a2c0a:	2100      	movs	r1, #0
 80a2c0c:	a801      	add	r0, sp, #4
 80a2c0e:	f003 ff2d 	bl	80a6a6c <memset>
    tx_code[0]=64;   // die laenge des tx codes
 80a2c12:	2340      	movs	r3, #64	; 0x40
 80a2c14:	466c      	mov	r4, sp
    int k = 1;
 80a2c16:	f04f 0801 	mov.w	r8, #1
      }
      else
      {
        tx_code[k] = SHORT;
        tx_code[k+1] = LONG;
        Serial.print("0");
 80a2c1a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a2c70 <_Z15conrad_rsl_sendjii+0x88>
        Serial.print("1");
 80a2c1e:	f8df a054 	ldr.w	sl, [pc, #84]	; 80a2c74 <_Z15conrad_rsl_sendjii+0x8c>
    tx_code[0]=64;   // die laenge des tx codes
 80a2c22:	9300      	str	r3, [sp, #0]
      if ( (code & 0x80000000) == 0x80000000)
 80a2c24:	2d00      	cmp	r5, #0
 80a2c26:	da1a      	bge.n	80a2c5e <_Z15conrad_rsl_sendjii+0x76>
        tx_code[k+1] = SHORT;
 80a2c28:	e9c4 7601 	strd	r7, r6, [r4, #4]
        Serial.print("1");
 80a2c2c:	f002 f8c6 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2c30:	4651      	mov	r1, sl
      }
      code = code << 1;
      k=k+2;
 80a2c32:	f108 0802 	add.w	r8, r8, #2
        Serial.print("0");
 80a2c36:	f001 faff 	bl	80a4238 <_ZN5Print5printEPKc>
    for(i=0; i<32; i++)
 80a2c3a:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
      code = code << 1;
 80a2c3e:	ea4f 0545 	mov.w	r5, r5, lsl #1
    for(i=0; i<32; i++)
 80a2c42:	f104 0408 	add.w	r4, r4, #8
 80a2c46:	d1ed      	bne.n	80a2c24 <_Z15conrad_rsl_sendjii+0x3c>
    }
    Serial.println(" ");
 80a2c48:	f002 f8b8 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2c4c:	4907      	ldr	r1, [pc, #28]	; (80a2c6c <_Z15conrad_rsl_sendjii+0x84>)
 80a2c4e:	f001 fb06 	bl	80a425e <_ZN5Print7printlnEPKc>
    conrad_rsl_transmit(&tx_code[0]);
 80a2c52:	4668      	mov	r0, sp
 80a2c54:	f7ff ff68 	bl	80a2b28 <_Z19conrad_rsl_transmitPi>
  }
 80a2c58:	b046      	add	sp, #280	; 0x118
 80a2c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tx_code[k+1] = LONG;
 80a2c5e:	e9c4 6701 	strd	r6, r7, [r4, #4]
        Serial.print("0");
 80a2c62:	f002 f8ab 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2c66:	4649      	mov	r1, r9
 80a2c68:	e7e3      	b.n	80a2c32 <_Z15conrad_rsl_sendjii+0x4a>
 80a2c6a:	bf00      	nop
 80a2c6c:	080a830e 	.word	0x080a830e
 80a2c70:	080a8239 	.word	0x080a8239
 80a2c74:	080a8284 	.word	0x080a8284

080a2c78 <_Z22conrad_rsl_switch_codeii>:
  void conrad_rsl_switch_code ( int which, int state )
  {

    unsigned int code = 0;

    if (which>5)
 80a2c78:	2805      	cmp	r0, #5
  {
 80a2c7a:	b538      	push	{r3, r4, r5, lr}
 80a2c7c:	4605      	mov	r5, r0
 80a2c7e:	460c      	mov	r4, r1
    if (which>5)
 80a2c80:	dd04      	ble.n	80a2c8c <_Z22conrad_rsl_switch_codeii+0x14>
    {
      Serial.println(" ERROR which not valid ");
 80a2c82:	f002 f89b 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2c86:	4918      	ldr	r1, [pc, #96]	; (80a2ce8 <_Z22conrad_rsl_switch_codeii+0x70>)
 80a2c88:	f001 fae9 	bl	80a425e <_ZN5Print7printlnEPKc>
    }

    if (state>1)
 80a2c8c:	2c01      	cmp	r4, #1
 80a2c8e:	dd04      	ble.n	80a2c9a <_Z22conrad_rsl_switch_codeii+0x22>
    {
      Serial.println(" ERROR state not valid ");
 80a2c90:	f002 f894 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2c94:	4915      	ldr	r1, [pc, #84]	; (80a2cec <_Z22conrad_rsl_switch_codeii+0x74>)
 80a2c96:	f001 fae2 	bl	80a425e <_ZN5Print7printlnEPKc>
    }

    code = codes[state][which];
 80a2c9a:	2106      	movs	r1, #6
 80a2c9c:	fb01 5404 	mla	r4, r1, r4, r5
 80a2ca0:	4b13      	ldr	r3, [pc, #76]	; (80a2cf0 <_Z22conrad_rsl_switch_codeii+0x78>)
 80a2ca2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

    if (code != 0)
 80a2ca6:	b1bc      	cbz	r4, 80a2cd8 <_Z22conrad_rsl_switch_codeii+0x60>
    {
      Serial.print("Sende Code : ");
 80a2ca8:	f002 f888 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2cac:	4911      	ldr	r1, [pc, #68]	; (80a2cf4 <_Z22conrad_rsl_switch_codeii+0x7c>)
 80a2cae:	f001 fac3 	bl	80a4238 <_ZN5Print5printEPKc>
      Serial.println(code);
 80a2cb2:	f002 f883 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2cb6:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80a2cb8:	4621      	mov	r1, r4
 80a2cba:	220a      	movs	r2, #10
 80a2cbc:	f001 fad9 	bl	80a4272 <_ZN5Print11printNumberEmh>
        n += println();
 80a2cc0:	4628      	mov	r0, r5
 80a2cc2:	f001 fac0 	bl	80a4246 <_ZN5Print7printlnEv>
      conrad_rsl_send(code,430,1150);
 80a2cc6:	4620      	mov	r0, r4
    else
    {
      Serial.print(" Fehler : konnte Code nicht finden ");
    }

  }
 80a2cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      conrad_rsl_send(code,430,1150);
 80a2ccc:	f240 427e 	movw	r2, #1150	; 0x47e
 80a2cd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80a2cd4:	f7ff bf88 	b.w	80a2be8 <_Z15conrad_rsl_sendjii>
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a2cd8:	f002 f870 	bl	80a4dbc <_Z16_fetch_usbserialv>
  }
 80a2cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a2ce0:	4905      	ldr	r1, [pc, #20]	; (80a2cf8 <_Z22conrad_rsl_switch_codeii+0x80>)
 80a2ce2:	f001 baa9 	b.w	80a4238 <_ZN5Print5printEPKc>
 80a2ce6:	bf00      	nop
 80a2ce8:	080a818e 	.word	0x080a818e
 80a2cec:	080a81a6 	.word	0x080a81a6
 80a2cf0:	20000028 	.word	0x20000028
 80a2cf4:	080a81be 	.word	0x080a81be
 80a2cf8:	080a81cc 	.word	0x080a81cc

080a2cfc <_Z13elro_transmitPi>:
/*--------------------------------------------------------------------
toggle transmitter data using the given data array
--------------------------------------------------------------------*/
  void elro_transmit (int* data)

  {
 80a2cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	   int rep;
	   int i;

 	   digitalWrite(datapin,LOW);
 80a2d00:	4c20      	ldr	r4, [pc, #128]	; (80a2d84 <_Z13elro_transmitPi+0x88>)
 80a2d02:	2100      	movs	r1, #0
  {
 80a2d04:	4606      	mov	r6, r0
 	   digitalWrite(datapin,LOW);
 80a2d06:	8820      	ldrh	r0, [r4, #0]
 80a2d08:	f002 facd 	bl	80a52a6 <digitalWrite>
 80a2d0c:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2d10:	f000 fbb4 	bl	80a347c <HAL_Delay_Microseconds>
	   delayMicroseconds(5000);

	   digitalWrite(datapin,LOW);
 80a2d14:	2100      	movs	r1, #0
 80a2d16:	8820      	ldrh	r0, [r4, #0]
 80a2d18:	f002 fac5 	bl	80a52a6 <digitalWrite>
 80a2d1c:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2d20:	f000 fbac 	bl	80a347c <HAL_Delay_Microseconds>
	   delayMicroseconds(5000);

	   digitalWrite(datapin,LOW);
 80a2d24:	2100      	movs	r1, #0
 80a2d26:	8820      	ldrh	r0, [r4, #0]
 80a2d28:	f002 fabd 	bl	80a52a6 <digitalWrite>
 80a2d2c:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2d30:	f000 fba4 	bl	80a347c <HAL_Delay_Microseconds>
 80a2d34:	2508      	movs	r5, #8

	  for (rep=0; rep<8; rep++)
		 {
			 // send the bits from data array

			 for (i=0; i < data[0]; i = i+2)
 80a2d36:	f04f 0800 	mov.w	r8, #0
 80a2d3a:	1d37      	adds	r7, r6, #4
 80a2d3c:	6833      	ldr	r3, [r6, #0]
 80a2d3e:	3708      	adds	r7, #8
 80a2d40:	4543      	cmp	r3, r8
 80a2d42:	dd12      	ble.n	80a2d6a <_Z13elro_transmitPi+0x6e>
			 {
			   digitalWrite(datapin,HIGH);
 80a2d44:	2101      	movs	r1, #1
 80a2d46:	8820      	ldrh	r0, [r4, #0]
 80a2d48:	f002 faad 	bl	80a52a6 <digitalWrite>
 80a2d4c:	f857 0c08 	ldr.w	r0, [r7, #-8]
 80a2d50:	f000 fb94 	bl	80a347c <HAL_Delay_Microseconds>
			   delayMicroseconds(data[i+1]);
			   digitalWrite(datapin,LOW);
 80a2d54:	2100      	movs	r1, #0
 80a2d56:	8820      	ldrh	r0, [r4, #0]
 80a2d58:	f002 faa5 	bl	80a52a6 <digitalWrite>
 80a2d5c:	f857 0c04 	ldr.w	r0, [r7, #-4]
 80a2d60:	f000 fb8c 	bl	80a347c <HAL_Delay_Microseconds>
			 for (i=0; i < data[0]; i = i+2)
 80a2d64:	f108 0802 	add.w	r8, r8, #2
 80a2d68:	e7e8      	b.n	80a2d3c <_Z13elro_transmitPi+0x40>
 80a2d6a:	f242 60ac 	movw	r0, #9900	; 0x26ac
 80a2d6e:	f000 fb85 	bl	80a347c <HAL_Delay_Microseconds>
	  for (rep=0; rep<8; rep++)
 80a2d72:	3d01      	subs	r5, #1
 80a2d74:	d1df      	bne.n	80a2d36 <_Z13elro_transmitPi+0x3a>
			   delayMicroseconds(data[i+2]);
			 }

	    delayMicroseconds(9900);
  		}
    digitalWrite(datapin,LOW);
 80a2d76:	4629      	mov	r1, r5
 80a2d78:	8820      	ldrh	r0, [r4, #0]
  }
 80a2d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    digitalWrite(datapin,LOW);
 80a2d7e:	f002 ba92 	b.w	80a52a6 <digitalWrite>
 80a2d82:	bf00      	nop
 80a2d84:	200003cc 	.word	0x200003cc

080a2d88 <_Z9elro_sendPcii>:
{
	int i = 0;
	int k = 1;
  int ed[90];  // tx code sequenz

	ed[0]=50;
 80a2d88:	2332      	movs	r3, #50	; 0x32
{
 80a2d8a:	b530      	push	{r4, r5, lr}
 80a2d8c:	b0db      	sub	sp, #364	; 0x16c
	ed[0]=50;
 80a2d8e:	9300      	str	r3, [sp, #0]

	for(i=0; i<24; i++)
 80a2d90:	466b      	mov	r3, sp
 80a2d92:	1e44      	subs	r4, r0, #1
 80a2d94:	3017      	adds	r0, #23
	{
		if (code[i]==0x30)
 80a2d96:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80a2d9a:	2d30      	cmp	r5, #48	; 0x30
		{
			ed[k] = SHORT;
			ed[k+1] = LONG;
 80a2d9c:	bf0c      	ite	eq
 80a2d9e:	e9c3 1201 	strdeq	r1, r2, [r3, #4]
		}
		else
		{
			ed[k] = LONG;
			ed[k+1] = SHORT;
 80a2da2:	e9c3 2101 	strdne	r2, r1, [r3, #4]
	for(i=0; i<24; i++)
 80a2da6:	4284      	cmp	r4, r0
 80a2da8:	f103 0308 	add.w	r3, r3, #8
 80a2dac:	d1f3      	bne.n	80a2d96 <_Z9elro_sendPcii+0xe>
		}
		k=k+2;
	}
	ed[k] = SHORT;
	ed[k+1] = LONG;
  elro_transmit(&ed[0]);
 80a2dae:	4668      	mov	r0, sp
	ed[k+1] = LONG;
 80a2db0:	e9cd 1231 	strd	r1, r2, [sp, #196]	; 0xc4
  elro_transmit(&ed[0]);
 80a2db4:	f7ff ffa2 	bl	80a2cfc <_Z13elro_transmitPi>
}
 80a2db8:	b05b      	add	sp, #364	; 0x16c
 80a2dba:	bd30      	pop	{r4, r5, pc}

080a2dbc <_Z11elro_switchii>:

/*--------------------------------------------------------------------
Control ELRO rc switch
--------------------------------------------------------------------*/
void elro_switch ( int which, int state )
{
 80a2dbc:	b530      	push	{r4, r5, lr}
	char es[34];

	if (which==1)
 80a2dbe:	2801      	cmp	r0, #1
{
 80a2dc0:	b08b      	sub	sp, #44	; 0x2c
	if (which==1)
 80a2dc2:	d123      	bne.n	80a2e0c <_Z11elro_switchii+0x50>
	{
		if (state==AUS)  strncpy(es,"000100010000010101010010",24);
 80a2dc4:	b999      	cbnz	r1, 80a2dee <_Z11elro_switchii+0x32>
 80a2dc6:	4b30      	ldr	r3, [pc, #192]	; (80a2e88 <_Z11elro_switchii+0xcc>)
 80a2dc8:	ac01      	add	r4, sp, #4
 80a2dca:	f103 0518 	add.w	r5, r3, #24
 80a2dce:	4622      	mov	r2, r4
 80a2dd0:	6818      	ldr	r0, [r3, #0]
 80a2dd2:	6859      	ldr	r1, [r3, #4]
 80a2dd4:	3308      	adds	r3, #8
 80a2dd6:	c203      	stmia	r2!, {r0, r1}
 80a2dd8:	42ab      	cmp	r3, r5
 80a2dda:	4614      	mov	r4, r2
 80a2ddc:	d1f7      	bne.n	80a2dce <_Z11elro_switchii+0x12>
		if (state==EIN)  strncpy(es,"000100010000010101010001",24);
   	elro_send(es,220,940);
 80a2dde:	f44f 726b 	mov.w	r2, #940	; 0x3ac
 80a2de2:	21dc      	movs	r1, #220	; 0xdc
 80a2de4:	a801      	add	r0, sp, #4
 80a2de6:	f7ff ffcf 	bl	80a2d88 <_Z9elro_sendPcii>
		if (state==AUS)  strncpy(es,"000100010001010001010010",24);
		if (state==EIN)  strncpy(es,"000100010001010001010001",24);
   	elro_send(es,220,940);
	}

}
 80a2dea:	b00b      	add	sp, #44	; 0x2c
 80a2dec:	bd30      	pop	{r4, r5, pc}
		if (state==EIN)  strncpy(es,"000100010000010101010001",24);
 80a2dee:	2901      	cmp	r1, #1
 80a2df0:	d1f5      	bne.n	80a2dde <_Z11elro_switchii+0x22>
 80a2df2:	4b26      	ldr	r3, [pc, #152]	; (80a2e8c <_Z11elro_switchii+0xd0>)
 80a2df4:	aa01      	add	r2, sp, #4
 80a2df6:	f103 0518 	add.w	r5, r3, #24
 80a2dfa:	4614      	mov	r4, r2
 80a2dfc:	6818      	ldr	r0, [r3, #0]
 80a2dfe:	6859      	ldr	r1, [r3, #4]
 80a2e00:	3308      	adds	r3, #8
 80a2e02:	c403      	stmia	r4!, {r0, r1}
 80a2e04:	42ab      	cmp	r3, r5
 80a2e06:	4622      	mov	r2, r4
 80a2e08:	d1f7      	bne.n	80a2dfa <_Z11elro_switchii+0x3e>
 80a2e0a:	e7e8      	b.n	80a2dde <_Z11elro_switchii+0x22>
	if (which==2)
 80a2e0c:	2802      	cmp	r0, #2
 80a2e0e:	d00f      	beq.n	80a2e30 <_Z11elro_switchii+0x74>
	if (which==3)
 80a2e10:	2803      	cmp	r0, #3
 80a2e12:	d1ea      	bne.n	80a2dea <_Z11elro_switchii+0x2e>
		if (state==AUS)  strncpy(es,"000100010001010001010010",24);
 80a2e14:	bb49      	cbnz	r1, 80a2e6a <_Z11elro_switchii+0xae>
 80a2e16:	4b1e      	ldr	r3, [pc, #120]	; (80a2e90 <_Z11elro_switchii+0xd4>)
 80a2e18:	ac01      	add	r4, sp, #4
 80a2e1a:	f103 0518 	add.w	r5, r3, #24
 80a2e1e:	4622      	mov	r2, r4
 80a2e20:	6818      	ldr	r0, [r3, #0]
 80a2e22:	6859      	ldr	r1, [r3, #4]
 80a2e24:	3308      	adds	r3, #8
 80a2e26:	c203      	stmia	r2!, {r0, r1}
 80a2e28:	42ab      	cmp	r3, r5
 80a2e2a:	4614      	mov	r4, r2
 80a2e2c:	d1f7      	bne.n	80a2e1e <_Z11elro_switchii+0x62>
 80a2e2e:	e7d6      	b.n	80a2dde <_Z11elro_switchii+0x22>
		if (state==AUS)  strncpy(es,"000100010001000101010100",24);
 80a2e30:	b961      	cbnz	r1, 80a2e4c <_Z11elro_switchii+0x90>
 80a2e32:	4b18      	ldr	r3, [pc, #96]	; (80a2e94 <_Z11elro_switchii+0xd8>)
 80a2e34:	ac01      	add	r4, sp, #4
 80a2e36:	f103 0518 	add.w	r5, r3, #24
 80a2e3a:	4622      	mov	r2, r4
 80a2e3c:	6818      	ldr	r0, [r3, #0]
 80a2e3e:	6859      	ldr	r1, [r3, #4]
 80a2e40:	3308      	adds	r3, #8
 80a2e42:	c203      	stmia	r2!, {r0, r1}
 80a2e44:	42ab      	cmp	r3, r5
 80a2e46:	4614      	mov	r4, r2
 80a2e48:	d1f7      	bne.n	80a2e3a <_Z11elro_switchii+0x7e>
 80a2e4a:	e7c8      	b.n	80a2dde <_Z11elro_switchii+0x22>
		if (state==EIN)  strncpy(es,"000100010001000101010001",24);
 80a2e4c:	2901      	cmp	r1, #1
 80a2e4e:	d1c6      	bne.n	80a2dde <_Z11elro_switchii+0x22>
 80a2e50:	4b11      	ldr	r3, [pc, #68]	; (80a2e98 <_Z11elro_switchii+0xdc>)
 80a2e52:	aa01      	add	r2, sp, #4
 80a2e54:	f103 0518 	add.w	r5, r3, #24
 80a2e58:	4614      	mov	r4, r2
 80a2e5a:	6818      	ldr	r0, [r3, #0]
 80a2e5c:	6859      	ldr	r1, [r3, #4]
 80a2e5e:	3308      	adds	r3, #8
 80a2e60:	c403      	stmia	r4!, {r0, r1}
 80a2e62:	42ab      	cmp	r3, r5
 80a2e64:	4622      	mov	r2, r4
 80a2e66:	d1f7      	bne.n	80a2e58 <_Z11elro_switchii+0x9c>
 80a2e68:	e7b9      	b.n	80a2dde <_Z11elro_switchii+0x22>
		if (state==EIN)  strncpy(es,"000100010001010001010001",24);
 80a2e6a:	2901      	cmp	r1, #1
 80a2e6c:	d1b7      	bne.n	80a2dde <_Z11elro_switchii+0x22>
 80a2e6e:	4b0b      	ldr	r3, [pc, #44]	; (80a2e9c <_Z11elro_switchii+0xe0>)
 80a2e70:	aa01      	add	r2, sp, #4
 80a2e72:	f103 0518 	add.w	r5, r3, #24
 80a2e76:	4614      	mov	r4, r2
 80a2e78:	6818      	ldr	r0, [r3, #0]
 80a2e7a:	6859      	ldr	r1, [r3, #4]
 80a2e7c:	3308      	adds	r3, #8
 80a2e7e:	c403      	stmia	r4!, {r0, r1}
 80a2e80:	42ab      	cmp	r3, r5
 80a2e82:	4622      	mov	r2, r4
 80a2e84:	d1f7      	bne.n	80a2e76 <_Z11elro_switchii+0xba>
 80a2e86:	e7aa      	b.n	80a2dde <_Z11elro_switchii+0x22>
 80a2e88:	080a81f0 	.word	0x080a81f0
 80a2e8c:	080a8209 	.word	0x080a8209
 80a2e90:	080a8254 	.word	0x080a8254
 80a2e94:	080a8222 	.word	0x080a8222
 80a2e98:	080a823b 	.word	0x080a823b
 80a2e9c:	080a826d 	.word	0x080a826d

080a2ea0 <_Z17switch_pumpe_funkii.part.0>:
}

/*---------------------------------------------------------------------
Funk-Pumpe eines weiteren Wassertanks einschalten bzw. ausschalten
---------------------------------------------------------------------*/
int switch_pumpe_funk(int newState, int laufzeit) // pumpe ein- oder aus
 80a2ea0:	b510      	push	{r4, lr}

{
    if (newState == ON)
    {
        conrad_rsl_switch_code(5, EIN); // Dosen-Label RSL3
 80a2ea2:	2101      	movs	r1, #1
int switch_pumpe_funk(int newState, int laufzeit) // pumpe ein- oder aus
 80a2ea4:	4604      	mov	r4, r0
        conrad_rsl_switch_code(5, EIN); // Dosen-Label RSL3
 80a2ea6:	2005      	movs	r0, #5
 80a2ea8:	f7ff fee6 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
        st_funk_pumpe = ON;
 80a2eac:	2201      	movs	r2, #1
 80a2eae:	4b04      	ldr	r3, [pc, #16]	; (80a2ec0 <_Z17switch_pumpe_funkii.part.0+0x20>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL3 EINGESCHALTET ");
 80a2eb0:	4904      	ldr	r1, [pc, #16]	; (80a2ec4 <_Z17switch_pumpe_funkii.part.0+0x24>)
 80a2eb2:	4805      	ldr	r0, [pc, #20]	; (80a2ec8 <_Z17switch_pumpe_funkii.part.0+0x28>)
        st_funk_pumpe = ON;
 80a2eb4:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL3 EINGESCHALTET ");
 80a2eb6:	f7fd f921 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        funk_countDown = laufzeit;
 80a2eba:	4b04      	ldr	r3, [pc, #16]	; (80a2ecc <_Z17switch_pumpe_funkii.part.0+0x2c>)
 80a2ebc:	601c      	str	r4, [r3, #0]
        conrad_rsl_switch_code(5, AUS); // Dosen-Label RSL3
        st_funk_pumpe = OFF;
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL3 AUSGESCHALTET ");
    }
    return (newState);
}
 80a2ebe:	bd10      	pop	{r4, pc}
 80a2ec0:	2000031c 	.word	0x2000031c
 80a2ec4:	080a8286 	.word	0x080a8286
 80a2ec8:	080a76d0 	.word	0x080a76d0
 80a2ecc:	200002f8 	.word	0x200002f8

080a2ed0 <_Z17switch_pumpe_mainii>:
{
 80a2ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2ed2:	4604      	mov	r4, r0
 80a2ed4:	460d      	mov	r5, r1
    Serial.printlnf(" --------------------------------------------- ");
 80a2ed6:	f001 ff71 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2eda:	4942      	ldr	r1, [pc, #264]	; (80a2fe4 <_Z17switch_pumpe_mainii+0x114>)
 80a2edc:	f7fd f8e9 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(" MAIN Pumpe schalten : %d Zeit %d", new_state, laufzeit);
 80a2ee0:	f001 ff6c 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2ee4:	462b      	mov	r3, r5
 80a2ee6:	4622      	mov	r2, r4
 80a2ee8:	493f      	ldr	r1, [pc, #252]	; (80a2fe8 <_Z17switch_pumpe_mainii+0x118>)
 80a2eea:	f7fd f8e2 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a2eee:	2101      	movs	r1, #1
 80a2ef0:	4608      	mov	r0, r1
 80a2ef2:	f002 f9c7 	bl	80a5284 <pinMode>
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a2ef6:	2001      	movs	r0, #1
 80a2ef8:	f002 f9ee 	bl	80a52d8 <digitalRead>
 80a2efc:	4f3b      	ldr	r7, [pc, #236]	; (80a2fec <_Z17switch_pumpe_mainii+0x11c>)
    if ((new_state == ON) & (st_main_pumpe == OFF))
 80a2efe:	2c01      	cmp	r4, #1
 80a2f00:	463e      	mov	r6, r7
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a2f02:	6038      	str	r0, [r7, #0]
    if ((new_state == ON) & (st_main_pumpe == OFF))
 80a2f04:	d144      	bne.n	80a2f90 <_Z17switch_pumpe_mainii+0xc0>
 80a2f06:	2800      	cmp	r0, #0
 80a2f08:	d142      	bne.n	80a2f90 <_Z17switch_pumpe_mainii+0xc0>
        WriteToDatabase("WASSER", "BLUMEN GIESSEN BEGINNT  ");
 80a2f0a:	4939      	ldr	r1, [pc, #228]	; (80a2ff0 <_Z17switch_pumpe_mainii+0x120>)
 80a2f0c:	4839      	ldr	r0, [pc, #228]	; (80a2ff4 <_Z17switch_pumpe_mainii+0x124>)
 80a2f0e:	f7fd f8f5 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        old_level = ultra_sonic_measure();
 80a2f12:	f7fd fba3 	bl	80a065c <_Z19ultra_sonic_measurev>
 80a2f16:	4c38      	ldr	r4, [pc, #224]	; (80a2ff8 <_Z17switch_pumpe_mainii+0x128>)
 80a2f18:	4602      	mov	r2, r0
 80a2f1a:	6020      	str	r0, [r4, #0]
        WriteToDatabase("WASSER", "WASSERSTAND before pumpe ON : ", old_level);
 80a2f1c:	4937      	ldr	r1, [pc, #220]	; (80a2ffc <_Z17switch_pumpe_mainii+0x12c>)
 80a2f1e:	4835      	ldr	r0, [pc, #212]	; (80a2ff4 <_Z17switch_pumpe_mainii+0x124>)
 80a2f20:	f7fd f932 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
        if (old_level < TROCKENLAUF_SCHUTZ_LEVEL)
 80a2f24:	6823      	ldr	r3, [r4, #0]
 80a2f26:	2b45      	cmp	r3, #69	; 0x45
 80a2f28:	dc05      	bgt.n	80a2f36 <_Z17switch_pumpe_mainii+0x66>
            WriteToDatabase("WASSER", "WASSERSTAND TROCKEN-LAUF-SCHUTZ. PUMPE NICHT EINSCHALTEN");
 80a2f2a:	4832      	ldr	r0, [pc, #200]	; (80a2ff4 <_Z17switch_pumpe_mainii+0x124>)
 80a2f2c:	4934      	ldr	r1, [pc, #208]	; (80a3000 <_Z17switch_pumpe_mainii+0x130>)
 80a2f2e:	f7fd f8e5 	bl	80a00fc <_Z15WriteToDatabasePcS_>
            return (st_main_pumpe);
 80a2f32:	6838      	ldr	r0, [r7, #0]
}
 80a2f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        digitalWrite(DO_PUMPE_MAIN, 1);
 80a2f36:	2101      	movs	r1, #1
        main_countDown = laufzeit;
 80a2f38:	4c32      	ldr	r4, [pc, #200]	; (80a3004 <_Z17switch_pumpe_mainii+0x134>)
        digitalWrite(DO_PUMPE_MAIN, 1);
 80a2f3a:	4608      	mov	r0, r1
        main_countDown = laufzeit;
 80a2f3c:	6025      	str	r5, [r4, #0]
        digitalWrite(DO_PUMPE_MAIN, 1);
 80a2f3e:	f002 f9b2 	bl	80a52a6 <digitalWrite>
        WriteToDatabase("WASSER", "HAUPT-PUMPE EINGESCHALTET : ", main_countDown);
 80a2f42:	6822      	ldr	r2, [r4, #0]
 80a2f44:	4930      	ldr	r1, [pc, #192]	; (80a3008 <_Z17switch_pumpe_mainii+0x138>)
 80a2f46:	482b      	ldr	r0, [pc, #172]	; (80a2ff4 <_Z17switch_pumpe_mainii+0x124>)
 80a2f48:	f7fd f91e 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
    delay(250);
 80a2f4c:	20fa      	movs	r0, #250	; 0xfa
 80a2f4e:	f001 fb01 	bl	80a4554 <delay>
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a2f52:	2001      	movs	r0, #1
 80a2f54:	f002 f9c0 	bl	80a52d8 <digitalRead>
    Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a2f58:	4c2c      	ldr	r4, [pc, #176]	; (80a300c <_Z17switch_pumpe_mainii+0x13c>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a2f5a:	6030      	str	r0, [r6, #0]
    Serial.printlnf(" DoPumpeMain    : %d ", st_main_pumpe);
 80a2f5c:	f001 ff2e 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2f60:	6832      	ldr	r2, [r6, #0]
 80a2f62:	492b      	ldr	r1, [pc, #172]	; (80a3010 <_Z17switch_pumpe_mainii+0x140>)
 80a2f64:	f7fd f8a5 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    readAdcChannels();
 80a2f68:	f7fd fd40 	bl	80a09ec <_Z15readAdcChannelsv>
    Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a2f6c:	f001 ff26 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2f70:	6822      	ldr	r2, [r4, #0]
 80a2f72:	4928      	ldr	r1, [pc, #160]	; (80a3014 <_Z17switch_pumpe_mainii+0x144>)
 80a2f74:	f7fd f89d 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeMain [mV] : ", AiPumpeMain);
 80a2f78:	6822      	ldr	r2, [r4, #0]
 80a2f7a:	4927      	ldr	r1, [pc, #156]	; (80a3018 <_Z17switch_pumpe_mainii+0x148>)
 80a2f7c:	4827      	ldr	r0, [pc, #156]	; (80a301c <_Z17switch_pumpe_mainii+0x14c>)
 80a2f7e:	f7fd f903 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
    Serial.printlnf(" --------------------------------------------- ");
 80a2f82:	f001 ff1b 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a2f86:	4917      	ldr	r1, [pc, #92]	; (80a2fe4 <_Z17switch_pumpe_mainii+0x114>)
 80a2f88:	f7fd f893 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    return (st_main_pumpe);
 80a2f8c:	6830      	ldr	r0, [r6, #0]
 80a2f8e:	e7d1      	b.n	80a2f34 <_Z17switch_pumpe_mainii+0x64>
    if ((new_state == OFF) & (st_main_pumpe == ON))
 80a2f90:	2c00      	cmp	r4, #0
 80a2f92:	d1db      	bne.n	80a2f4c <_Z17switch_pumpe_mainii+0x7c>
 80a2f94:	2801      	cmp	r0, #1
 80a2f96:	d1d9      	bne.n	80a2f4c <_Z17switch_pumpe_mainii+0x7c>
        digitalWrite(DO_PUMPE_MAIN, 0);
 80a2f98:	2100      	movs	r1, #0
 80a2f9a:	f002 f984 	bl	80a52a6 <digitalWrite>
        main_countDown = 0;
 80a2f9e:	2200      	movs	r2, #0
 80a2fa0:	4b18      	ldr	r3, [pc, #96]	; (80a3004 <_Z17switch_pumpe_mainii+0x134>)
        WriteToDatabase("WASSER", "HAUPT-PUMPE AUSGESCHALTET ");
 80a2fa2:	491f      	ldr	r1, [pc, #124]	; (80a3020 <_Z17switch_pumpe_mainii+0x150>)
 80a2fa4:	4813      	ldr	r0, [pc, #76]	; (80a2ff4 <_Z17switch_pumpe_mainii+0x124>)
        main_countDown = 0;
 80a2fa6:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "HAUPT-PUMPE AUSGESCHALTET ");
 80a2fa8:	f7fd f8a8 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        new_level = ultra_sonic_measure();
 80a2fac:	f7fd fb56 	bl	80a065c <_Z19ultra_sonic_measurev>
 80a2fb0:	4c1c      	ldr	r4, [pc, #112]	; (80a3024 <_Z17switch_pumpe_mainii+0x154>)
        WriteToDatabase("WASSER", "WASSERSTAND gefallen um [mm] : ", old_level - new_level);
 80a2fb2:	4d11      	ldr	r5, [pc, #68]	; (80a2ff8 <_Z17switch_pumpe_mainii+0x128>)
        new_level = ultra_sonic_measure();
 80a2fb4:	4602      	mov	r2, r0
        WriteToDatabase("WASSER", "WASSERSTAND after pumpe OFF : ", new_level);
 80a2fb6:	491c      	ldr	r1, [pc, #112]	; (80a3028 <_Z17switch_pumpe_mainii+0x158>)
        new_level = ultra_sonic_measure();
 80a2fb8:	6020      	str	r0, [r4, #0]
        WriteToDatabase("WASSER", "WASSERSTAND after pumpe OFF : ", new_level);
 80a2fba:	480e      	ldr	r0, [pc, #56]	; (80a2ff4 <_Z17switch_pumpe_mainii+0x124>)
 80a2fbc:	f7fd f8e4 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
        WriteToDatabase("WASSER", "WASSERSTAND gefallen um [mm] : ", old_level - new_level);
 80a2fc0:	6823      	ldr	r3, [r4, #0]
 80a2fc2:	682a      	ldr	r2, [r5, #0]
 80a2fc4:	4919      	ldr	r1, [pc, #100]	; (80a302c <_Z17switch_pumpe_mainii+0x15c>)
 80a2fc6:	1ad2      	subs	r2, r2, r3
 80a2fc8:	480a      	ldr	r0, [pc, #40]	; (80a2ff4 <_Z17switch_pumpe_mainii+0x124>)
 80a2fca:	f7fd f8dd 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
        if ((old_level - new_level) > 3)
 80a2fce:	682b      	ldr	r3, [r5, #0]
 80a2fd0:	6822      	ldr	r2, [r4, #0]
 80a2fd2:	1a9b      	subs	r3, r3, r2
 80a2fd4:	2b03      	cmp	r3, #3
 80a2fd6:	ddb9      	ble.n	80a2f4c <_Z17switch_pumpe_mainii+0x7c>
            WriteToDatabase("WASSER", "WASSERSTAND BLUMEN GIESSEN ERFOLGREICH BEENDET");
 80a2fd8:	4915      	ldr	r1, [pc, #84]	; (80a3030 <_Z17switch_pumpe_mainii+0x160>)
 80a2fda:	4806      	ldr	r0, [pc, #24]	; (80a2ff4 <_Z17switch_pumpe_mainii+0x124>)
 80a2fdc:	f7fd f88e 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a2fe0:	e7b4      	b.n	80a2f4c <_Z17switch_pumpe_mainii+0x7c>
 80a2fe2:	bf00      	nop
 80a2fe4:	080a82a5 	.word	0x080a82a5
 80a2fe8:	080a82d5 	.word	0x080a82d5
 80a2fec:	20000320 	.word	0x20000320
 80a2ff0:	080a82f7 	.word	0x080a82f7
 80a2ff4:	080a76d0 	.word	0x080a76d0
 80a2ff8:	20000314 	.word	0x20000314
 80a2ffc:	080a8310 	.word	0x080a8310
 80a3000:	080a832f 	.word	0x080a832f
 80a3004:	2000030c 	.word	0x2000030c
 80a3008:	080a8368 	.word	0x080a8368
 80a300c:	20000174 	.word	0x20000174
 80a3010:	080a840e 	.word	0x080a840e
 80a3014:	080a7ed2 	.word	0x080a7ed2
 80a3018:	080a8424 	.word	0x080a8424
 80a301c:	080a7f03 	.word	0x080a7f03
 80a3020:	080a8385 	.word	0x080a8385
 80a3024:	20000310 	.word	0x20000310
 80a3028:	080a83a0 	.word	0x080a83a0
 80a302c:	080a83bf 	.word	0x080a83bf
 80a3030:	080a83df 	.word	0x080a83df

080a3034 <_Z20switch_pumpe_reserveii>:
{
 80a3034:	b570      	push	{r4, r5, r6, lr}
 80a3036:	4605      	mov	r5, r0
 80a3038:	460e      	mov	r6, r1
    Serial.printlnf(" --------------------------------------------- ");
 80a303a:	f001 febf 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a303e:	4939      	ldr	r1, [pc, #228]	; (80a3124 <_Z20switch_pumpe_reserveii+0xf0>)
 80a3040:	f7fd f837 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(" RESERVE Pumpe schalten : %d Zeit %d", new_state, laufzeit);
 80a3044:	f001 feba 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a3048:	4633      	mov	r3, r6
 80a304a:	462a      	mov	r2, r5
 80a304c:	4936      	ldr	r1, [pc, #216]	; (80a3128 <_Z20switch_pumpe_reserveii+0xf4>)
 80a304e:	f7fd f830 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a3052:	2101      	movs	r1, #1
 80a3054:	2002      	movs	r0, #2
 80a3056:	f002 f915 	bl	80a5284 <pinMode>
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a305a:	2002      	movs	r0, #2
 80a305c:	f002 f93c 	bl	80a52d8 <digitalRead>
 80a3060:	4c32      	ldr	r4, [pc, #200]	; (80a312c <_Z20switch_pumpe_reserveii+0xf8>)
    if ((new_state == ON) & (st_reserve_pumpe == OFF))
 80a3062:	2d01      	cmp	r5, #1
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a3064:	6020      	str	r0, [r4, #0]
    if ((new_state == ON) & (st_reserve_pumpe == OFF))
 80a3066:	d136      	bne.n	80a30d6 <_Z20switch_pumpe_reserveii+0xa2>
 80a3068:	2800      	cmp	r0, #0
 80a306a:	d134      	bne.n	80a30d6 <_Z20switch_pumpe_reserveii+0xa2>
        old_level = ultra_sonic_measure();
 80a306c:	f7fd faf6 	bl	80a065c <_Z19ultra_sonic_measurev>
 80a3070:	4b2f      	ldr	r3, [pc, #188]	; (80a3130 <_Z20switch_pumpe_reserveii+0xfc>)
 80a3072:	4602      	mov	r2, r0
 80a3074:	6018      	str	r0, [r3, #0]
        WriteToDatabase("WASSER", "WASSERSTAND before res-pumpe ON : ", old_level);
 80a3076:	492f      	ldr	r1, [pc, #188]	; (80a3134 <_Z20switch_pumpe_reserveii+0x100>)
 80a3078:	482f      	ldr	r0, [pc, #188]	; (80a3138 <_Z20switch_pumpe_reserveii+0x104>)
 80a307a:	f7fd f885 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
        digitalWrite(DO_PUMPE_RESERVE, 1);
 80a307e:	2101      	movs	r1, #1
 80a3080:	2002      	movs	r0, #2
 80a3082:	f002 f910 	bl	80a52a6 <digitalWrite>
        WriteToDatabase("WASSER", "RESERVE-PUMPE EINGESCHALTET ");
 80a3086:	492d      	ldr	r1, [pc, #180]	; (80a313c <_Z20switch_pumpe_reserveii+0x108>)
 80a3088:	482b      	ldr	r0, [pc, #172]	; (80a3138 <_Z20switch_pumpe_reserveii+0x104>)
 80a308a:	f7fd f837 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        reserve_countDown = laufzeit;
 80a308e:	4b2c      	ldr	r3, [pc, #176]	; (80a3140 <_Z20switch_pumpe_reserveii+0x10c>)
 80a3090:	601e      	str	r6, [r3, #0]
    delay(250);
 80a3092:	20fa      	movs	r0, #250	; 0xfa
 80a3094:	f001 fa5e 	bl	80a4554 <delay>
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a3098:	2002      	movs	r0, #2
 80a309a:	f002 f91d 	bl	80a52d8 <digitalRead>
    Serial.printlnf(" AiPumpeReserve    : %d [mV]", AiPumpeReserve);
 80a309e:	4d29      	ldr	r5, [pc, #164]	; (80a3144 <_Z20switch_pumpe_reserveii+0x110>)
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a30a0:	6020      	str	r0, [r4, #0]
    Serial.printlnf(" DoPumpeReserve    : %d ", st_reserve_pumpe);
 80a30a2:	f001 fe8b 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a30a6:	6822      	ldr	r2, [r4, #0]
 80a30a8:	4927      	ldr	r1, [pc, #156]	; (80a3148 <_Z20switch_pumpe_reserveii+0x114>)
 80a30aa:	f7fd f802 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    readAdcChannels();
 80a30ae:	f7fd fc9d 	bl	80a09ec <_Z15readAdcChannelsv>
    Serial.printlnf(" AiPumpeReserve    : %d [mV]", AiPumpeReserve);
 80a30b2:	f001 fe83 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a30b6:	682a      	ldr	r2, [r5, #0]
 80a30b8:	4924      	ldr	r1, [pc, #144]	; (80a314c <_Z20switch_pumpe_reserveii+0x118>)
 80a30ba:	f7fc fffa 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeReserve [mV] : ", AiPumpeReserve);
 80a30be:	682a      	ldr	r2, [r5, #0]
 80a30c0:	4923      	ldr	r1, [pc, #140]	; (80a3150 <_Z20switch_pumpe_reserveii+0x11c>)
 80a30c2:	4824      	ldr	r0, [pc, #144]	; (80a3154 <_Z20switch_pumpe_reserveii+0x120>)
 80a30c4:	f7fd f860 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
    Serial.printlnf(" --------------------------------------------- ");
 80a30c8:	f001 fe78 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a30cc:	4915      	ldr	r1, [pc, #84]	; (80a3124 <_Z20switch_pumpe_reserveii+0xf0>)
 80a30ce:	f7fc fff0 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
}
 80a30d2:	6820      	ldr	r0, [r4, #0]
 80a30d4:	bd70      	pop	{r4, r5, r6, pc}
    if ((new_state == OFF) & (st_reserve_pumpe == ON))
 80a30d6:	2d00      	cmp	r5, #0
 80a30d8:	d1db      	bne.n	80a3092 <_Z20switch_pumpe_reserveii+0x5e>
 80a30da:	2801      	cmp	r0, #1
 80a30dc:	d1d9      	bne.n	80a3092 <_Z20switch_pumpe_reserveii+0x5e>
        digitalWrite(DO_PUMPE_RESERVE, 0);
 80a30de:	2100      	movs	r1, #0
 80a30e0:	2002      	movs	r0, #2
 80a30e2:	f002 f8e0 	bl	80a52a6 <digitalWrite>
        reserve_countDown = 0;
 80a30e6:	2200      	movs	r2, #0
 80a30e8:	4b15      	ldr	r3, [pc, #84]	; (80a3140 <_Z20switch_pumpe_reserveii+0x10c>)
        WriteToDatabase("WASSER", "RESERVE-PUMPE AUSGESCHALTET. FUELLUNG NR. ",control.reserve_repetitions);
 80a30ea:	491b      	ldr	r1, [pc, #108]	; (80a3158 <_Z20switch_pumpe_reserveii+0x124>)
        reserve_countDown = 0;
 80a30ec:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "RESERVE-PUMPE AUSGESCHALTET. FUELLUNG NR. ",control.reserve_repetitions);
 80a30ee:	4b1b      	ldr	r3, [pc, #108]	; (80a315c <_Z20switch_pumpe_reserveii+0x128>)
 80a30f0:	4811      	ldr	r0, [pc, #68]	; (80a3138 <_Z20switch_pumpe_reserveii+0x104>)
 80a30f2:	691a      	ldr	r2, [r3, #16]
 80a30f4:	f7fd f848 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
        new_level = ultra_sonic_measure();
 80a30f8:	f7fd fab0 	bl	80a065c <_Z19ultra_sonic_measurev>
 80a30fc:	4d18      	ldr	r5, [pc, #96]	; (80a3160 <_Z20switch_pumpe_reserveii+0x12c>)
        WriteToDatabase("WASSER", "WASSERSTAND after res-pumpe OFF : ", new_level);
 80a30fe:	4919      	ldr	r1, [pc, #100]	; (80a3164 <_Z20switch_pumpe_reserveii+0x130>)
        new_level = ultra_sonic_measure();
 80a3100:	4602      	mov	r2, r0
 80a3102:	6028      	str	r0, [r5, #0]
        WriteToDatabase("WASSER", "WASSERSTAND after res-pumpe OFF : ", new_level);
 80a3104:	480c      	ldr	r0, [pc, #48]	; (80a3138 <_Z20switch_pumpe_reserveii+0x104>)
 80a3106:	f7fd f83f 	bl	80a0188 <_Z15WriteToDatabasePcS_i>
        if ((new_level - old_level) > 5)
 80a310a:	4a09      	ldr	r2, [pc, #36]	; (80a3130 <_Z20switch_pumpe_reserveii+0xfc>)
 80a310c:	682b      	ldr	r3, [r5, #0]
 80a310e:	6812      	ldr	r2, [r2, #0]
            WriteToDatabase("WASSER", " WASSERSTAND ERROR: TANK FUELLEN fehlgeschlagen");
 80a3110:	4809      	ldr	r0, [pc, #36]	; (80a3138 <_Z20switch_pumpe_reserveii+0x104>)
        if ((new_level - old_level) > 5)
 80a3112:	1a9b      	subs	r3, r3, r2
 80a3114:	2b05      	cmp	r3, #5
            WriteToDatabase("WASSER", " WASSERSTAND TANK FUELLEN ERFOLGREICH BEENDET");
 80a3116:	bfcc      	ite	gt
 80a3118:	4913      	ldrgt	r1, [pc, #76]	; (80a3168 <_Z20switch_pumpe_reserveii+0x134>)
            WriteToDatabase("WASSER", " WASSERSTAND ERROR: TANK FUELLEN fehlgeschlagen");
 80a311a:	4914      	ldrle	r1, [pc, #80]	; (80a316c <_Z20switch_pumpe_reserveii+0x138>)
 80a311c:	f7fc ffee 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a3120:	e7b7      	b.n	80a3092 <_Z20switch_pumpe_reserveii+0x5e>
 80a3122:	bf00      	nop
 80a3124:	080a82a5 	.word	0x080a82a5
 80a3128:	080a8438 	.word	0x080a8438
 80a312c:	20000324 	.word	0x20000324
 80a3130:	20000314 	.word	0x20000314
 80a3134:	080a845d 	.word	0x080a845d
 80a3138:	080a76d0 	.word	0x080a76d0
 80a313c:	080a8480 	.word	0x080a8480
 80a3140:	20000318 	.word	0x20000318
 80a3144:	20000178 	.word	0x20000178
 80a3148:	080a8549 	.word	0x080a8549
 80a314c:	080a8562 	.word	0x080a8562
 80a3150:	080a7f21 	.word	0x080a7f21
 80a3154:	080a7f03 	.word	0x080a7f03
 80a3158:	080a849d 	.word	0x080a849d
 80a315c:	200002d8 	.word	0x200002d8
 80a3160:	20000310 	.word	0x20000310
 80a3164:	080a84c8 	.word	0x080a84c8
 80a3168:	080a84eb 	.word	0x080a84eb
 80a316c:	080a8519 	.word	0x080a8519

080a3170 <_Z17switch_pumpe_funkii>:
{
 80a3170:	b510      	push	{r4, lr}
 80a3172:	4604      	mov	r4, r0
    if (newState == ON)
 80a3174:	2c01      	cmp	r4, #1
{
 80a3176:	4608      	mov	r0, r1
    if (newState == ON)
 80a3178:	d103      	bne.n	80a3182 <_Z17switch_pumpe_funkii+0x12>
 80a317a:	f7ff fe91 	bl	80a2ea0 <_Z17switch_pumpe_funkii.part.0>
}
 80a317e:	4620      	mov	r0, r4
 80a3180:	bd10      	pop	{r4, pc}
        conrad_rsl_switch_code(5, AUS); // Dosen-Label RSL3
 80a3182:	2100      	movs	r1, #0
 80a3184:	2005      	movs	r0, #5
 80a3186:	f7ff fd77 	bl	80a2c78 <_Z22conrad_rsl_switch_codeii>
        st_funk_pumpe = OFF;
 80a318a:	2200      	movs	r2, #0
 80a318c:	4b03      	ldr	r3, [pc, #12]	; (80a319c <_Z17switch_pumpe_funkii+0x2c>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL3 AUSGESCHALTET ");
 80a318e:	4904      	ldr	r1, [pc, #16]	; (80a31a0 <_Z17switch_pumpe_funkii+0x30>)
 80a3190:	4804      	ldr	r0, [pc, #16]	; (80a31a4 <_Z17switch_pumpe_funkii+0x34>)
        st_funk_pumpe = OFF;
 80a3192:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL3 AUSGESCHALTET ");
 80a3194:	f7fc ffb2 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a3198:	e7f1      	b.n	80a317e <_Z17switch_pumpe_funkii+0xe>
 80a319a:	bf00      	nop
 80a319c:	2000031c 	.word	0x2000031c
 80a31a0:	080a857f 	.word	0x080a857f
 80a31a4:	080a76d0 	.word	0x080a76d0

080a31a8 <_Z13BlumenGiessenii>:
now = 1 : jetzt sofort Giessen
now = 0 : giesse wenn tnow = ts zur geplanten Zeit
done_giessen muß 0 sein
---------------------------------------------------------------------*/
void BlumenGiessen(int now, int ts)
{
 80a31a8:	b538      	push	{r3, r4, r5, lr}
    
    if (done_giessen == 1) return;
 80a31aa:	4c16      	ldr	r4, [pc, #88]	; (80a3204 <_Z13BlumenGiessenii+0x5c>)
 80a31ac:	6823      	ldr	r3, [r4, #0]
 80a31ae:	2b01      	cmp	r3, #1
 80a31b0:	d00e      	beq.n	80a31d0 <_Z13BlumenGiessenii+0x28>
    
    if (tnow == ts || now == 1)
 80a31b2:	4b15      	ldr	r3, [pc, #84]	; (80a3208 <_Z13BlumenGiessenii+0x60>)
 80a31b4:	681b      	ldr	r3, [r3, #0]
 80a31b6:	428b      	cmp	r3, r1
 80a31b8:	d001      	beq.n	80a31be <_Z13BlumenGiessenii+0x16>
 80a31ba:	2801      	cmp	r0, #1
 80a31bc:	d108      	bne.n	80a31d0 <_Z13BlumenGiessenii+0x28>
    {
        if (control.dontGiessen == 1)
 80a31be:	4b13      	ldr	r3, [pc, #76]	; (80a320c <_Z13BlumenGiessenii+0x64>)
 80a31c0:	689d      	ldr	r5, [r3, #8]
 80a31c2:	2d01      	cmp	r5, #1
 80a31c4:	d105      	bne.n	80a31d2 <_Z13BlumenGiessenii+0x2a>
        {
            WriteToDatabase("WASSER", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a31c6:	4912      	ldr	r1, [pc, #72]	; (80a3210 <_Z13BlumenGiessenii+0x68>)
 80a31c8:	4812      	ldr	r0, [pc, #72]	; (80a3214 <_Z13BlumenGiessenii+0x6c>)
 80a31ca:	f7fc ff97 	bl	80a00fc <_Z15WriteToDatabasePcS_>
            done_giessen = 1;
 80a31ce:	6025      	str	r5, [r4, #0]
            delay(1000);
            st_funk_pumpe = switch_pumpe_funk(ON, 12);
        }
    done_giessen = 1;
    }
}
 80a31d0:	bd38      	pop	{r3, r4, r5, pc}
        st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a31d2:	68d9      	ldr	r1, [r3, #12]
 80a31d4:	2001      	movs	r0, #1
 80a31d6:	f7ff fe7b 	bl	80a2ed0 <_Z17switch_pumpe_mainii>
        if (st_funk_pumpe == OFF)
 80a31da:	4d0f      	ldr	r5, [pc, #60]	; (80a3218 <_Z13BlumenGiessenii+0x70>)
        st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a31dc:	4b0f      	ldr	r3, [pc, #60]	; (80a321c <_Z13BlumenGiessenii+0x74>)
        if (st_funk_pumpe == OFF)
 80a31de:	6829      	ldr	r1, [r5, #0]
        st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a31e0:	6018      	str	r0, [r3, #0]
        if (st_funk_pumpe == OFF)
 80a31e2:	b961      	cbnz	r1, 80a31fe <_Z13BlumenGiessenii+0x56>
            st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a31e4:	4608      	mov	r0, r1
 80a31e6:	f7ff ffc3 	bl	80a3170 <_Z17switch_pumpe_funkii>
 80a31ea:	6028      	str	r0, [r5, #0]
            delay(1000);
 80a31ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a31f0:	f001 f9b0 	bl	80a4554 <delay>
    if (newState == ON)
 80a31f4:	200c      	movs	r0, #12
 80a31f6:	f7ff fe53 	bl	80a2ea0 <_Z17switch_pumpe_funkii.part.0>
            st_funk_pumpe = switch_pumpe_funk(ON, 12);
 80a31fa:	2301      	movs	r3, #1
 80a31fc:	602b      	str	r3, [r5, #0]
    done_giessen = 1;
 80a31fe:	2301      	movs	r3, #1
 80a3200:	6023      	str	r3, [r4, #0]
 80a3202:	e7e5      	b.n	80a31d0 <_Z13BlumenGiessenii+0x28>
 80a3204:	200002ec 	.word	0x200002ec
 80a3208:	200003b8 	.word	0x200003b8
 80a320c:	200002d8 	.word	0x200002d8
 80a3210:	080a7970 	.word	0x080a7970
 80a3214:	080a76d0 	.word	0x080a76d0
 80a3218:	2000031c 	.word	0x2000031c
 80a321c:	20000320 	.word	0x20000320

080a3220 <_Z11TankFuelleni>:
/*---------------------------------------------------------------------
Tank fuellen -> schalte reserve pumpe ein wenn der Wasserstand 
kleiner als der critical level ist
---------------------------------------------------------------------*/
void TankFuellen(int critical_level)
{
 80a3220:	b510      	push	{r4, lr}
 80a3222:	4604      	mov	r4, r0
    println(" Tankfuellen() ");
 80a3224:	4819      	ldr	r0, [pc, #100]	; (80a328c <_Z11TankFuelleni+0x6c>)
 80a3226:	f7fe f983 	bl	80a1530 <_Z7printlnPc>

    waterlevel = ultra_sonic_measure();
 80a322a:	f7fd fa17 	bl	80a065c <_Z19ultra_sonic_measurev>
 80a322e:	4b18      	ldr	r3, [pc, #96]	; (80a3290 <_Z11TankFuelleni+0x70>)

    if (waterlevel > critical_level)
 80a3230:	42a0      	cmp	r0, r4
    waterlevel = ultra_sonic_measure();
 80a3232:	6018      	str	r0, [r3, #0]
    if (waterlevel > critical_level)
 80a3234:	dd05      	ble.n	80a3242 <_Z11TankFuelleni+0x22>
    {
            WriteToDatabase("WASSER", " TANKFUELLEN : NICHT NOTWENDIG ");
 80a3236:	4917      	ldr	r1, [pc, #92]	; (80a3294 <_Z11TankFuelleni+0x74>)
    if ((waterlevel > 0) & (waterlevel < critical_level) & (st_reserve_pumpe == OFF))
    {

        if (control.dontGiessen == 1)
        {
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a3238:	4817      	ldr	r0, [pc, #92]	; (80a3298 <_Z11TankFuelleni+0x78>)
        }

        WriteToDatabase("WASSER", "WASSERSTAND TANK FUELLEN gestartet ");
        st_reserve_pumpe = switch_pumpe_reserve(1, RESERVE_PUMPE_LAUFZEIT);
    }
}
 80a323a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a323e:	f7fc bf5d 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
    if(control.reserve_repetitions > MAX_NACHFUELL_REPETITIONS)
 80a3242:	4b16      	ldr	r3, [pc, #88]	; (80a329c <_Z11TankFuelleni+0x7c>)
 80a3244:	691a      	ldr	r2, [r3, #16]
 80a3246:	2a05      	cmp	r2, #5
 80a3248:	d905      	bls.n	80a3256 <_Z11TankFuelleni+0x36>
}
 80a324a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WriteToDatabase("WASSER", "ERROR - ABORT: Wiederholungen des Tankfuellens ueberschritten = ",control.reserve_repetitions);    
 80a324e:	4914      	ldr	r1, [pc, #80]	; (80a32a0 <_Z11TankFuelleni+0x80>)
 80a3250:	4811      	ldr	r0, [pc, #68]	; (80a3298 <_Z11TankFuelleni+0x78>)
 80a3252:	f7fc bf99 	b.w	80a0188 <_Z15WriteToDatabasePcS_i>
    if ((waterlevel > 0) & (waterlevel < critical_level) & (st_reserve_pumpe == OFF))
 80a3256:	2800      	cmp	r0, #0
 80a3258:	bfd4      	ite	le
 80a325a:	2200      	movle	r2, #0
 80a325c:	2201      	movgt	r2, #1
 80a325e:	42a0      	cmp	r0, r4
 80a3260:	bfa8      	it	ge
 80a3262:	2200      	movge	r2, #0
 80a3264:	b182      	cbz	r2, 80a3288 <_Z11TankFuelleni+0x68>
 80a3266:	4c0f      	ldr	r4, [pc, #60]	; (80a32a4 <_Z11TankFuelleni+0x84>)
 80a3268:	6822      	ldr	r2, [r4, #0]
 80a326a:	b96a      	cbnz	r2, 80a3288 <_Z11TankFuelleni+0x68>
        if (control.dontGiessen == 1)
 80a326c:	689b      	ldr	r3, [r3, #8]
 80a326e:	2b01      	cmp	r3, #1
 80a3270:	d101      	bne.n	80a3276 <_Z11TankFuelleni+0x56>
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a3272:	490d      	ldr	r1, [pc, #52]	; (80a32a8 <_Z11TankFuelleni+0x88>)
 80a3274:	e7e0      	b.n	80a3238 <_Z11TankFuelleni+0x18>
        WriteToDatabase("WASSER", "WASSERSTAND TANK FUELLEN gestartet ");
 80a3276:	490d      	ldr	r1, [pc, #52]	; (80a32ac <_Z11TankFuelleni+0x8c>)
 80a3278:	4807      	ldr	r0, [pc, #28]	; (80a3298 <_Z11TankFuelleni+0x78>)
 80a327a:	f7fc ff3f 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        st_reserve_pumpe = switch_pumpe_reserve(1, RESERVE_PUMPE_LAUFZEIT);
 80a327e:	2118      	movs	r1, #24
 80a3280:	2001      	movs	r0, #1
 80a3282:	f7ff fed7 	bl	80a3034 <_Z20switch_pumpe_reserveii>
 80a3286:	6020      	str	r0, [r4, #0]
}
 80a3288:	bd10      	pop	{r4, pc}
 80a328a:	bf00      	nop
 80a328c:	080a859e 	.word	0x080a859e
 80a3290:	20000024 	.word	0x20000024
 80a3294:	080a85ae 	.word	0x080a85ae
 80a3298:	080a76d0 	.word	0x080a76d0
 80a329c:	200002d8 	.word	0x200002d8
 80a32a0:	080a85ce 	.word	0x080a85ce
 80a32a4:	20000324 	.word	0x20000324
 80a32a8:	080a860f 	.word	0x080a860f
 80a32ac:	080a8649 	.word	0x080a8649

080a32b0 <_Z9CountDownv>:
{
 80a32b0:	b538      	push	{r3, r4, r5, lr}
    if (main_countDown > 0)
 80a32b2:	4c25      	ldr	r4, [pc, #148]	; (80a3348 <_Z9CountDownv+0x98>)
 80a32b4:	6821      	ldr	r1, [r4, #0]
 80a32b6:	2900      	cmp	r1, #0
 80a32b8:	dd11      	ble.n	80a32de <_Z9CountDownv+0x2e>
        main_countDown--;
 80a32ba:	3901      	subs	r1, #1
        println("Pumpe Main CountDown : ", main_countDown);
 80a32bc:	4823      	ldr	r0, [pc, #140]	; (80a334c <_Z9CountDownv+0x9c>)
        main_countDown--;
 80a32be:	6021      	str	r1, [r4, #0]
        println("Pumpe Main CountDown : ", main_countDown);
 80a32c0:	f7fe fcb8 	bl	80a1c34 <_Z7printlnPci>
        if (main_countDown == 0)
 80a32c4:	6824      	ldr	r4, [r4, #0]
 80a32c6:	b954      	cbnz	r4, 80a32de <_Z9CountDownv+0x2e>
            WriteToDatabase("COUNTDOWN", "Pumpe Main CountDown expired");
 80a32c8:	4921      	ldr	r1, [pc, #132]	; (80a3350 <_Z9CountDownv+0xa0>)
 80a32ca:	4822      	ldr	r0, [pc, #136]	; (80a3354 <_Z9CountDownv+0xa4>)
 80a32cc:	f7fc ff16 	bl	80a00fc <_Z15WriteToDatabasePcS_>
            switch_pumpe_main(OFF, 0);
 80a32d0:	4621      	mov	r1, r4
 80a32d2:	4620      	mov	r0, r4
 80a32d4:	f7ff fdfc 	bl	80a2ed0 <_Z17switch_pumpe_mainii>
            TankFuellen(LOW_LEVEL_TANKFUELLEN);
 80a32d8:	205f      	movs	r0, #95	; 0x5f
 80a32da:	f7ff ffa1 	bl	80a3220 <_Z11TankFuelleni>
    if (reserve_countDown > 0)
 80a32de:	4c1e      	ldr	r4, [pc, #120]	; (80a3358 <_Z9CountDownv+0xa8>)
 80a32e0:	6821      	ldr	r1, [r4, #0]
 80a32e2:	2900      	cmp	r1, #0
 80a32e4:	dd19      	ble.n	80a331a <_Z9CountDownv+0x6a>
        reserve_countDown--;
 80a32e6:	3901      	subs	r1, #1
        println("Pumpe Reserve CountDown : ", reserve_countDown);
 80a32e8:	481c      	ldr	r0, [pc, #112]	; (80a335c <_Z9CountDownv+0xac>)
        reserve_countDown--;
 80a32ea:	6021      	str	r1, [r4, #0]
        println("Pumpe Reserve CountDown : ", reserve_countDown);
 80a32ec:	f7fe fca2 	bl	80a1c34 <_Z7printlnPci>
        if (reserve_countDown == 0)
 80a32f0:	6824      	ldr	r4, [r4, #0]
 80a32f2:	b994      	cbnz	r4, 80a331a <_Z9CountDownv+0x6a>
            control.reserve_repetitions++;
 80a32f4:	4d1a      	ldr	r5, [pc, #104]	; (80a3360 <_Z9CountDownv+0xb0>)
 80a32f6:	692b      	ldr	r3, [r5, #16]
 80a32f8:	3301      	adds	r3, #1
 80a32fa:	612b      	str	r3, [r5, #16]
            EEPROM.put(0, control);            
 80a32fc:	f002 f83e 	bl	80a537c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a3300:	2214      	movs	r2, #20
 80a3302:	4629      	mov	r1, r5
 80a3304:	4620      	mov	r0, r4
 80a3306:	f000 f8d9 	bl	80a34bc <HAL_EEPROM_Put>
            WriteToDatabase("COUNTDOWN", "Pumpe Reserve CountDown expired ");
 80a330a:	4916      	ldr	r1, [pc, #88]	; (80a3364 <_Z9CountDownv+0xb4>)
 80a330c:	4811      	ldr	r0, [pc, #68]	; (80a3354 <_Z9CountDownv+0xa4>)
 80a330e:	f7fc fef5 	bl	80a00fc <_Z15WriteToDatabasePcS_>
            switch_pumpe_reserve(OFF, 0);
 80a3312:	4621      	mov	r1, r4
 80a3314:	4620      	mov	r0, r4
 80a3316:	f7ff fe8d 	bl	80a3034 <_Z20switch_pumpe_reserveii>
    if (funk_countDown > 0)
 80a331a:	4c13      	ldr	r4, [pc, #76]	; (80a3368 <_Z9CountDownv+0xb8>)
 80a331c:	6821      	ldr	r1, [r4, #0]
 80a331e:	2900      	cmp	r1, #0
 80a3320:	dd10      	ble.n	80a3344 <_Z9CountDownv+0x94>
        funk_countDown--;
 80a3322:	3901      	subs	r1, #1
        println("Pumpe Funk CountDown : ", funk_countDown);
 80a3324:	4811      	ldr	r0, [pc, #68]	; (80a336c <_Z9CountDownv+0xbc>)
        funk_countDown--;
 80a3326:	6021      	str	r1, [r4, #0]
        println("Pumpe Funk CountDown : ", funk_countDown);
 80a3328:	f7fe fc84 	bl	80a1c34 <_Z7printlnPci>
        if (funk_countDown == 0)
 80a332c:	6824      	ldr	r4, [r4, #0]
 80a332e:	b94c      	cbnz	r4, 80a3344 <_Z9CountDownv+0x94>
            WriteToDatabase("COUNTDOWN", "Pumpe Funk CountDown expired ");
 80a3330:	490f      	ldr	r1, [pc, #60]	; (80a3370 <_Z9CountDownv+0xc0>)
 80a3332:	4808      	ldr	r0, [pc, #32]	; (80a3354 <_Z9CountDownv+0xa4>)
 80a3334:	f7fc fee2 	bl	80a00fc <_Z15WriteToDatabasePcS_>
            switch_pumpe_funk(OFF, 0);
 80a3338:	4621      	mov	r1, r4
 80a333a:	4620      	mov	r0, r4
}
 80a333c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            switch_pumpe_funk(OFF, 0);
 80a3340:	f7ff bf16 	b.w	80a3170 <_Z17switch_pumpe_funkii>
}
 80a3344:	bd38      	pop	{r3, r4, r5, pc}
 80a3346:	bf00      	nop
 80a3348:	2000030c 	.word	0x2000030c
 80a334c:	080a866d 	.word	0x080a866d
 80a3350:	080a8685 	.word	0x080a8685
 80a3354:	080a86a2 	.word	0x080a86a2
 80a3358:	20000318 	.word	0x20000318
 80a335c:	080a86ac 	.word	0x080a86ac
 80a3360:	200002d8 	.word	0x200002d8
 80a3364:	080a86c7 	.word	0x080a86c7
 80a3368:	200002f8 	.word	0x200002f8
 80a336c:	080a86e8 	.word	0x080a86e8
 80a3370:	080a8700 	.word	0x080a8700

080a3374 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
 80a3374:	f001 b8ee 	b.w	80a4554 <delay>

080a3378 <_Z11BlynkMillisv>:
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a3378:	f000 b888 	b.w	80a348c <HAL_Timer_Get_Milli_Seconds>

080a337c <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
 80a337c:	4770      	bx	lr

080a337e <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
 80a337e:	4770      	bx	lr

080a3380 <BlynkNoOpCbk>:
{}
 80a3380:	4770      	bx	lr
	...

080a3384 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
 80a3384:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
 80a3386:	bf5a      	itte	pl
 80a3388:	4b02      	ldrpl	r3, [pc, #8]	; (80a3394 <GetReadHandler+0x10>)
 80a338a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
 80a338e:	2000      	movmi	r0, #0
#endif
}
 80a3390:	4770      	bx	lr
 80a3392:	bf00      	nop
 80a3394:	080a8720 	.word	0x080a8720

080a3398 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
 80a3398:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
 80a339a:	bf5a      	itte	pl
 80a339c:	4b02      	ldrpl	r3, [pc, #8]	; (80a33a8 <GetWriteHandler+0x10>)
 80a339e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
 80a33a2:	2000      	movmi	r0, #0
#endif
}
 80a33a4:	4770      	bx	lr
 80a33a6:	bf00      	nop
 80a33a8:	080a8920 	.word	0x080a8920

080a33ac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a33ac:	b508      	push	{r3, lr}
 80a33ae:	4b02      	ldr	r3, [pc, #8]	; (80a33b8 <HAL_Pin_Map+0xc>)
 80a33b0:	681b      	ldr	r3, [r3, #0]
 80a33b2:	681b      	ldr	r3, [r3, #0]
 80a33b4:	9301      	str	r3, [sp, #4]
 80a33b6:	bd08      	pop	{r3, pc}
 80a33b8:	080601b0 	.word	0x080601b0

080a33bc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a33bc:	b508      	push	{r3, lr}
 80a33be:	4b02      	ldr	r3, [pc, #8]	; (80a33c8 <HAL_Validate_Pin_Function+0xc>)
 80a33c0:	681b      	ldr	r3, [r3, #0]
 80a33c2:	685b      	ldr	r3, [r3, #4]
 80a33c4:	9301      	str	r3, [sp, #4]
 80a33c6:	bd08      	pop	{r3, pc}
 80a33c8:	080601b0 	.word	0x080601b0

080a33cc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a33cc:	b508      	push	{r3, lr}
 80a33ce:	4b02      	ldr	r3, [pc, #8]	; (80a33d8 <HAL_Pin_Mode+0xc>)
 80a33d0:	681b      	ldr	r3, [r3, #0]
 80a33d2:	689b      	ldr	r3, [r3, #8]
 80a33d4:	9301      	str	r3, [sp, #4]
 80a33d6:	bd08      	pop	{r3, pc}
 80a33d8:	080601b0 	.word	0x080601b0

080a33dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a33dc:	b508      	push	{r3, lr}
 80a33de:	4b02      	ldr	r3, [pc, #8]	; (80a33e8 <HAL_Get_Pin_Mode+0xc>)
 80a33e0:	681b      	ldr	r3, [r3, #0]
 80a33e2:	68db      	ldr	r3, [r3, #12]
 80a33e4:	9301      	str	r3, [sp, #4]
 80a33e6:	bd08      	pop	{r3, pc}
 80a33e8:	080601b0 	.word	0x080601b0

080a33ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a33ec:	b508      	push	{r3, lr}
 80a33ee:	4b02      	ldr	r3, [pc, #8]	; (80a33f8 <HAL_GPIO_Write+0xc>)
 80a33f0:	681b      	ldr	r3, [r3, #0]
 80a33f2:	691b      	ldr	r3, [r3, #16]
 80a33f4:	9301      	str	r3, [sp, #4]
 80a33f6:	bd08      	pop	{r3, pc}
 80a33f8:	080601b0 	.word	0x080601b0

080a33fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a33fc:	b508      	push	{r3, lr}
 80a33fe:	4b02      	ldr	r3, [pc, #8]	; (80a3408 <HAL_GPIO_Read+0xc>)
 80a3400:	681b      	ldr	r3, [r3, #0]
 80a3402:	695b      	ldr	r3, [r3, #20]
 80a3404:	9301      	str	r3, [sp, #4]
 80a3406:	bd08      	pop	{r3, pc}
 80a3408:	080601b0 	.word	0x080601b0

080a340c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a340c:	b508      	push	{r3, lr}
 80a340e:	4b02      	ldr	r3, [pc, #8]	; (80a3418 <HAL_Interrupts_Enable_All+0xc>)
 80a3410:	681b      	ldr	r3, [r3, #0]
 80a3412:	6a1b      	ldr	r3, [r3, #32]
 80a3414:	9301      	str	r3, [sp, #4]
 80a3416:	bd08      	pop	{r3, pc}
 80a3418:	080601b0 	.word	0x080601b0

080a341c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a341c:	b508      	push	{r3, lr}
 80a341e:	4b02      	ldr	r3, [pc, #8]	; (80a3428 <HAL_Interrupts_Disable_All+0xc>)
 80a3420:	681b      	ldr	r3, [r3, #0]
 80a3422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3424:	9301      	str	r3, [sp, #4]
 80a3426:	bd08      	pop	{r3, pc}
 80a3428:	080601b0 	.word	0x080601b0

080a342c <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a342c:	b508      	push	{r3, lr}
 80a342e:	4b02      	ldr	r3, [pc, #8]	; (80a3438 <HAL_DAC_Write+0xc>)
 80a3430:	681b      	ldr	r3, [r3, #0]
 80a3432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3434:	9301      	str	r3, [sp, #4]
 80a3436:	bd08      	pop	{r3, pc}
 80a3438:	080601b0 	.word	0x080601b0

080a343c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a343c:	b508      	push	{r3, lr}
 80a343e:	4b02      	ldr	r3, [pc, #8]	; (80a3448 <hal_adc_read+0xc>)
 80a3440:	681b      	ldr	r3, [r3, #0]
 80a3442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3444:	9301      	str	r3, [sp, #4]
 80a3446:	bd08      	pop	{r3, pc}
 80a3448:	080601b0 	.word	0x080601b0

080a344c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a344c:	b508      	push	{r3, lr}
 80a344e:	4b02      	ldr	r3, [pc, #8]	; (80a3458 <HAL_Pulse_In+0xc>)
 80a3450:	681b      	ldr	r3, [r3, #0]
 80a3452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3454:	9301      	str	r3, [sp, #4]
 80a3456:	bd08      	pop	{r3, pc}
 80a3458:	080601b0 	.word	0x080601b0

080a345c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 80a345c:	b508      	push	{r3, lr}
 80a345e:	4b02      	ldr	r3, [pc, #8]	; (80a3468 <hal_pwm_write_ext+0xc>)
 80a3460:	681b      	ldr	r3, [r3, #0]
 80a3462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a3464:	9301      	str	r3, [sp, #4]
 80a3466:	bd08      	pop	{r3, pc}
 80a3468:	080601b0 	.word	0x080601b0

080a346c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a346c:	b508      	push	{r3, lr}
 80a346e:	4b02      	ldr	r3, [pc, #8]	; (80a3478 <HAL_RNG_GetRandomNumber+0xc>)
 80a3470:	681b      	ldr	r3, [r3, #0]
 80a3472:	685b      	ldr	r3, [r3, #4]
 80a3474:	9301      	str	r3, [sp, #4]
 80a3476:	bd08      	pop	{r3, pc}
 80a3478:	0806019c 	.word	0x0806019c

080a347c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a347c:	b508      	push	{r3, lr}
 80a347e:	4b02      	ldr	r3, [pc, #8]	; (80a3488 <HAL_Delay_Microseconds+0xc>)
 80a3480:	681b      	ldr	r3, [r3, #0]
 80a3482:	68db      	ldr	r3, [r3, #12]
 80a3484:	9301      	str	r3, [sp, #4]
 80a3486:	bd08      	pop	{r3, pc}
 80a3488:	0806019c 	.word	0x0806019c

080a348c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a348c:	b508      	push	{r3, lr}
 80a348e:	4b02      	ldr	r3, [pc, #8]	; (80a3498 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a3490:	681b      	ldr	r3, [r3, #0]
 80a3492:	695b      	ldr	r3, [r3, #20]
 80a3494:	9301      	str	r3, [sp, #4]
 80a3496:	bd08      	pop	{r3, pc}
 80a3498:	0806019c 	.word	0x0806019c

080a349c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a349c:	b508      	push	{r3, lr}
 80a349e:	4b02      	ldr	r3, [pc, #8]	; (80a34a8 <HAL_EEPROM_Init+0xc>)
 80a34a0:	681b      	ldr	r3, [r3, #0]
 80a34a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a34a4:	9301      	str	r3, [sp, #4]
 80a34a6:	bd08      	pop	{r3, pc}
 80a34a8:	0806019c 	.word	0x0806019c

080a34ac <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a34ac:	b508      	push	{r3, lr}
 80a34ae:	4b02      	ldr	r3, [pc, #8]	; (80a34b8 <HAL_EEPROM_Get+0xc>)
 80a34b0:	681b      	ldr	r3, [r3, #0]
 80a34b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a34b4:	9301      	str	r3, [sp, #4]
 80a34b6:	bd08      	pop	{r3, pc}
 80a34b8:	0806019c 	.word	0x0806019c

080a34bc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a34bc:	b508      	push	{r3, lr}
 80a34be:	4b02      	ldr	r3, [pc, #8]	; (80a34c8 <HAL_EEPROM_Put+0xc>)
 80a34c0:	681b      	ldr	r3, [r3, #0]
 80a34c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a34c4:	9301      	str	r3, [sp, #4]
 80a34c6:	bd08      	pop	{r3, pc}
 80a34c8:	0806019c 	.word	0x0806019c

080a34cc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a34cc:	b508      	push	{r3, lr}
 80a34ce:	4b02      	ldr	r3, [pc, #8]	; (80a34d8 <hal_rtc_time_is_valid+0xc>)
 80a34d0:	681b      	ldr	r3, [r3, #0]
 80a34d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a34d4:	9301      	str	r3, [sp, #4]
 80a34d6:	bd08      	pop	{r3, pc}
 80a34d8:	0806019c 	.word	0x0806019c

080a34dc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a34dc:	b508      	push	{r3, lr}
 80a34de:	4b02      	ldr	r3, [pc, #8]	; (80a34e8 <hal_rtc_get_time+0xc>)
 80a34e0:	681b      	ldr	r3, [r3, #0]
 80a34e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a34e4:	9301      	str	r3, [sp, #4]
 80a34e6:	bd08      	pop	{r3, pc}
 80a34e8:	0806019c 	.word	0x0806019c

080a34ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a34ec:	b508      	push	{r3, lr}
 80a34ee:	4b02      	ldr	r3, [pc, #8]	; (80a34f8 <os_mutex_recursive_create+0xc>)
 80a34f0:	681b      	ldr	r3, [r3, #0]
 80a34f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a34f4:	9301      	str	r3, [sp, #4]
 80a34f6:	bd08      	pop	{r3, pc}
 80a34f8:	080601d0 	.word	0x080601d0

080a34fc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a34fc:	b508      	push	{r3, lr}
 80a34fe:	4b02      	ldr	r3, [pc, #8]	; (80a3508 <os_mutex_recursive_destroy+0xc>)
 80a3500:	681b      	ldr	r3, [r3, #0]
 80a3502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3504:	9301      	str	r3, [sp, #4]
 80a3506:	bd08      	pop	{r3, pc}
 80a3508:	080601d0 	.word	0x080601d0

080a350c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a350c:	b508      	push	{r3, lr}
 80a350e:	4b02      	ldr	r3, [pc, #8]	; (80a3518 <hal_usart_init+0xc>)
 80a3510:	681b      	ldr	r3, [r3, #0]
 80a3512:	699b      	ldr	r3, [r3, #24]
 80a3514:	9301      	str	r3, [sp, #4]
 80a3516:	bd08      	pop	{r3, pc}
 80a3518:	080601c4 	.word	0x080601c4

080a351c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a351c:	b508      	push	{r3, lr}
 80a351e:	4b02      	ldr	r3, [pc, #8]	; (80a3528 <hal_usart_write+0xc>)
 80a3520:	681b      	ldr	r3, [r3, #0]
 80a3522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3524:	9301      	str	r3, [sp, #4]
 80a3526:	bd08      	pop	{r3, pc}
 80a3528:	080601c4 	.word	0x080601c4

080a352c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a352c:	b508      	push	{r3, lr}
 80a352e:	4b02      	ldr	r3, [pc, #8]	; (80a3538 <hal_usart_available+0xc>)
 80a3530:	681b      	ldr	r3, [r3, #0]
 80a3532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3534:	9301      	str	r3, [sp, #4]
 80a3536:	bd08      	pop	{r3, pc}
 80a3538:	080601c4 	.word	0x080601c4

080a353c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a353c:	b508      	push	{r3, lr}
 80a353e:	4b02      	ldr	r3, [pc, #8]	; (80a3548 <hal_usart_read+0xc>)
 80a3540:	681b      	ldr	r3, [r3, #0]
 80a3542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3544:	9301      	str	r3, [sp, #4]
 80a3546:	bd08      	pop	{r3, pc}
 80a3548:	080601c4 	.word	0x080601c4

080a354c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a354c:	b508      	push	{r3, lr}
 80a354e:	4b02      	ldr	r3, [pc, #8]	; (80a3558 <hal_usart_peek+0xc>)
 80a3550:	681b      	ldr	r3, [r3, #0]
 80a3552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3554:	9301      	str	r3, [sp, #4]
 80a3556:	bd08      	pop	{r3, pc}
 80a3558:	080601c4 	.word	0x080601c4

080a355c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a355c:	b508      	push	{r3, lr}
 80a355e:	4b02      	ldr	r3, [pc, #8]	; (80a3568 <hal_usart_flush+0xc>)
 80a3560:	681b      	ldr	r3, [r3, #0]
 80a3562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3564:	9301      	str	r3, [sp, #4]
 80a3566:	bd08      	pop	{r3, pc}
 80a3568:	080601c4 	.word	0x080601c4

080a356c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a356c:	b508      	push	{r3, lr}
 80a356e:	4b02      	ldr	r3, [pc, #8]	; (80a3578 <hal_usart_is_enabled+0xc>)
 80a3570:	681b      	ldr	r3, [r3, #0]
 80a3572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3574:	9301      	str	r3, [sp, #4]
 80a3576:	bd08      	pop	{r3, pc}
 80a3578:	080601c4 	.word	0x080601c4

080a357c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a357c:	b508      	push	{r3, lr}
 80a357e:	4b02      	ldr	r3, [pc, #8]	; (80a3588 <hal_usart_available_data_for_write+0xc>)
 80a3580:	681b      	ldr	r3, [r3, #0]
 80a3582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3584:	9301      	str	r3, [sp, #4]
 80a3586:	bd08      	pop	{r3, pc}
 80a3588:	080601c4 	.word	0x080601c4

080a358c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a358c:	b508      	push	{r3, lr}
 80a358e:	4b02      	ldr	r3, [pc, #8]	; (80a3598 <hal_i2c_write+0xc>)
 80a3590:	681b      	ldr	r3, [r3, #0]
 80a3592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3594:	9301      	str	r3, [sp, #4]
 80a3596:	bd08      	pop	{r3, pc}
 80a3598:	080601ac 	.word	0x080601ac

080a359c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a359c:	b508      	push	{r3, lr}
 80a359e:	4b02      	ldr	r3, [pc, #8]	; (80a35a8 <hal_i2c_available+0xc>)
 80a35a0:	681b      	ldr	r3, [r3, #0]
 80a35a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a35a4:	9301      	str	r3, [sp, #4]
 80a35a6:	bd08      	pop	{r3, pc}
 80a35a8:	080601ac 	.word	0x080601ac

080a35ac <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a35ac:	b508      	push	{r3, lr}
 80a35ae:	4b02      	ldr	r3, [pc, #8]	; (80a35b8 <hal_i2c_read+0xc>)
 80a35b0:	681b      	ldr	r3, [r3, #0]
 80a35b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a35b4:	9301      	str	r3, [sp, #4]
 80a35b6:	bd08      	pop	{r3, pc}
 80a35b8:	080601ac 	.word	0x080601ac

080a35bc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a35bc:	b508      	push	{r3, lr}
 80a35be:	4b02      	ldr	r3, [pc, #8]	; (80a35c8 <hal_i2c_peek+0xc>)
 80a35c0:	681b      	ldr	r3, [r3, #0]
 80a35c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a35c4:	9301      	str	r3, [sp, #4]
 80a35c6:	bd08      	pop	{r3, pc}
 80a35c8:	080601ac 	.word	0x080601ac

080a35cc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a35cc:	b508      	push	{r3, lr}
 80a35ce:	4b02      	ldr	r3, [pc, #8]	; (80a35d8 <hal_i2c_flush+0xc>)
 80a35d0:	681b      	ldr	r3, [r3, #0]
 80a35d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a35d4:	9301      	str	r3, [sp, #4]
 80a35d6:	bd08      	pop	{r3, pc}
 80a35d8:	080601ac 	.word	0x080601ac

080a35dc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a35dc:	b508      	push	{r3, lr}
 80a35de:	4b02      	ldr	r3, [pc, #8]	; (80a35e8 <hal_i2c_is_enabled+0xc>)
 80a35e0:	681b      	ldr	r3, [r3, #0]
 80a35e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a35e4:	9301      	str	r3, [sp, #4]
 80a35e6:	bd08      	pop	{r3, pc}
 80a35e8:	080601ac 	.word	0x080601ac

080a35ec <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a35ec:	b508      	push	{r3, lr}
 80a35ee:	4b03      	ldr	r3, [pc, #12]	; (80a35fc <hal_i2c_init+0x10>)
 80a35f0:	681b      	ldr	r3, [r3, #0]
 80a35f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a35f6:	9301      	str	r3, [sp, #4]
 80a35f8:	bd08      	pop	{r3, pc}
 80a35fa:	0000      	.short	0x0000
 80a35fc:	080601ac 	.word	0x080601ac

080a3600 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a3600:	b508      	push	{r3, lr}
 80a3602:	4b02      	ldr	r3, [pc, #8]	; (80a360c <socket_active_status+0xc>)
 80a3604:	681b      	ldr	r3, [r3, #0]
 80a3606:	681b      	ldr	r3, [r3, #0]
 80a3608:	9301      	str	r3, [sp, #4]
 80a360a:	bd08      	pop	{r3, pc}
 80a360c:	080601bc 	.word	0x080601bc

080a3610 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a3610:	b508      	push	{r3, lr}
 80a3612:	4b02      	ldr	r3, [pc, #8]	; (80a361c <socket_handle_valid+0xc>)
 80a3614:	681b      	ldr	r3, [r3, #0]
 80a3616:	685b      	ldr	r3, [r3, #4]
 80a3618:	9301      	str	r3, [sp, #4]
 80a361a:	bd08      	pop	{r3, pc}
 80a361c:	080601bc 	.word	0x080601bc

080a3620 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a3620:	b508      	push	{r3, lr}
 80a3622:	4b02      	ldr	r3, [pc, #8]	; (80a362c <socket_create+0xc>)
 80a3624:	681b      	ldr	r3, [r3, #0]
 80a3626:	689b      	ldr	r3, [r3, #8]
 80a3628:	9301      	str	r3, [sp, #4]
 80a362a:	bd08      	pop	{r3, pc}
 80a362c:	080601bc 	.word	0x080601bc

080a3630 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a3630:	b508      	push	{r3, lr}
 80a3632:	4b02      	ldr	r3, [pc, #8]	; (80a363c <socket_connect+0xc>)
 80a3634:	681b      	ldr	r3, [r3, #0]
 80a3636:	68db      	ldr	r3, [r3, #12]
 80a3638:	9301      	str	r3, [sp, #4]
 80a363a:	bd08      	pop	{r3, pc}
 80a363c:	080601bc 	.word	0x080601bc

080a3640 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a3640:	b508      	push	{r3, lr}
 80a3642:	4b02      	ldr	r3, [pc, #8]	; (80a364c <socket_receive+0xc>)
 80a3644:	681b      	ldr	r3, [r3, #0]
 80a3646:	691b      	ldr	r3, [r3, #16]
 80a3648:	9301      	str	r3, [sp, #4]
 80a364a:	bd08      	pop	{r3, pc}
 80a364c:	080601bc 	.word	0x080601bc

080a3650 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a3650:	b508      	push	{r3, lr}
 80a3652:	4b02      	ldr	r3, [pc, #8]	; (80a365c <socket_close+0xc>)
 80a3654:	681b      	ldr	r3, [r3, #0]
 80a3656:	6a1b      	ldr	r3, [r3, #32]
 80a3658:	9301      	str	r3, [sp, #4]
 80a365a:	bd08      	pop	{r3, pc}
 80a365c:	080601bc 	.word	0x080601bc

080a3660 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a3660:	b508      	push	{r3, lr}
 80a3662:	4b02      	ldr	r3, [pc, #8]	; (80a366c <socket_handle_invalid+0xc>)
 80a3664:	681b      	ldr	r3, [r3, #0]
 80a3666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3668:	9301      	str	r3, [sp, #4]
 80a366a:	bd08      	pop	{r3, pc}
 80a366c:	080601bc 	.word	0x080601bc

080a3670 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a3670:	b508      	push	{r3, lr}
 80a3672:	4b02      	ldr	r3, [pc, #8]	; (80a367c <socket_send_ex+0xc>)
 80a3674:	681b      	ldr	r3, [r3, #0]
 80a3676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3678:	9301      	str	r3, [sp, #4]
 80a367a:	bd08      	pop	{r3, pc}
 80a367c:	080601bc 	.word	0x080601bc

080a3680 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a3680:	b508      	push	{r3, lr}
 80a3682:	4b02      	ldr	r3, [pc, #8]	; (80a368c <hal_spi_init+0xc>)
 80a3684:	681b      	ldr	r3, [r3, #0]
 80a3686:	69db      	ldr	r3, [r3, #28]
 80a3688:	9301      	str	r3, [sp, #4]
 80a368a:	bd08      	pop	{r3, pc}
 80a368c:	080601b4 	.word	0x080601b4

080a3690 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a3690:	b508      	push	{r3, lr}
 80a3692:	4b02      	ldr	r3, [pc, #8]	; (80a369c <hal_spi_is_enabled+0xc>)
 80a3694:	681b      	ldr	r3, [r3, #0]
 80a3696:	6a1b      	ldr	r3, [r3, #32]
 80a3698:	9301      	str	r3, [sp, #4]
 80a369a:	bd08      	pop	{r3, pc}
 80a369c:	080601b4 	.word	0x080601b4

080a36a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a36a0:	b508      	push	{r3, lr}
 80a36a2:	4b02      	ldr	r3, [pc, #8]	; (80a36ac <HAL_USB_USART_Init+0xc>)
 80a36a4:	681b      	ldr	r3, [r3, #0]
 80a36a6:	681b      	ldr	r3, [r3, #0]
 80a36a8:	9301      	str	r3, [sp, #4]
 80a36aa:	bd08      	pop	{r3, pc}
 80a36ac:	080601d8 	.word	0x080601d8

080a36b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a36b0:	b508      	push	{r3, lr}
 80a36b2:	4b02      	ldr	r3, [pc, #8]	; (80a36bc <HAL_USB_USART_Begin+0xc>)
 80a36b4:	681b      	ldr	r3, [r3, #0]
 80a36b6:	685b      	ldr	r3, [r3, #4]
 80a36b8:	9301      	str	r3, [sp, #4]
 80a36ba:	bd08      	pop	{r3, pc}
 80a36bc:	080601d8 	.word	0x080601d8

080a36c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a36c0:	b508      	push	{r3, lr}
 80a36c2:	4b02      	ldr	r3, [pc, #8]	; (80a36cc <HAL_USB_USART_Available_Data+0xc>)
 80a36c4:	681b      	ldr	r3, [r3, #0]
 80a36c6:	691b      	ldr	r3, [r3, #16]
 80a36c8:	9301      	str	r3, [sp, #4]
 80a36ca:	bd08      	pop	{r3, pc}
 80a36cc:	080601d8 	.word	0x080601d8

080a36d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a36d0:	b508      	push	{r3, lr}
 80a36d2:	4b02      	ldr	r3, [pc, #8]	; (80a36dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a36d4:	681b      	ldr	r3, [r3, #0]
 80a36d6:	695b      	ldr	r3, [r3, #20]
 80a36d8:	9301      	str	r3, [sp, #4]
 80a36da:	bd08      	pop	{r3, pc}
 80a36dc:	080601d8 	.word	0x080601d8

080a36e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a36e0:	b508      	push	{r3, lr}
 80a36e2:	4b02      	ldr	r3, [pc, #8]	; (80a36ec <HAL_USB_USART_Receive_Data+0xc>)
 80a36e4:	681b      	ldr	r3, [r3, #0]
 80a36e6:	699b      	ldr	r3, [r3, #24]
 80a36e8:	9301      	str	r3, [sp, #4]
 80a36ea:	bd08      	pop	{r3, pc}
 80a36ec:	080601d8 	.word	0x080601d8

080a36f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a36f0:	b508      	push	{r3, lr}
 80a36f2:	4b02      	ldr	r3, [pc, #8]	; (80a36fc <HAL_USB_USART_Send_Data+0xc>)
 80a36f4:	681b      	ldr	r3, [r3, #0]
 80a36f6:	69db      	ldr	r3, [r3, #28]
 80a36f8:	9301      	str	r3, [sp, #4]
 80a36fa:	bd08      	pop	{r3, pc}
 80a36fc:	080601d8 	.word	0x080601d8

080a3700 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3700:	b508      	push	{r3, lr}
 80a3702:	4b02      	ldr	r3, [pc, #8]	; (80a370c <HAL_USB_USART_Flush_Data+0xc>)
 80a3704:	681b      	ldr	r3, [r3, #0]
 80a3706:	6a1b      	ldr	r3, [r3, #32]
 80a3708:	9301      	str	r3, [sp, #4]
 80a370a:	bd08      	pop	{r3, pc}
 80a370c:	080601d8 	.word	0x080601d8

080a3710 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a3710:	b508      	push	{r3, lr}
 80a3712:	4b02      	ldr	r3, [pc, #8]	; (80a371c <HAL_NET_SetNetWatchDog+0xc>)
 80a3714:	681b      	ldr	r3, [r3, #0]
 80a3716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3718:	9301      	str	r3, [sp, #4]
 80a371a:	bd08      	pop	{r3, pc}
 80a371c:	080601c0 	.word	0x080601c0

080a3720 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3720:	b508      	push	{r3, lr}
 80a3722:	4b02      	ldr	r3, [pc, #8]	; (80a372c <inet_gethostbyname+0xc>)
 80a3724:	681b      	ldr	r3, [r3, #0]
 80a3726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3728:	9301      	str	r3, [sp, #4]
 80a372a:	bd08      	pop	{r3, pc}
 80a372c:	080601c0 	.word	0x080601c0

080a3730 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a3730:	b508      	push	{r3, lr}
 80a3732:	4b02      	ldr	r3, [pc, #8]	; (80a373c <log_message+0xc>)
 80a3734:	681b      	ldr	r3, [r3, #0]
 80a3736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3738:	9301      	str	r3, [sp, #4]
 80a373a:	bd08      	pop	{r3, pc}
 80a373c:	080201a8 	.word	0x080201a8

080a3740 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a3740:	b508      	push	{r3, lr}
 80a3742:	4b02      	ldr	r3, [pc, #8]	; (80a374c <system_mode+0xc>)
 80a3744:	681b      	ldr	r3, [r3, #0]
 80a3746:	681b      	ldr	r3, [r3, #0]
 80a3748:	9301      	str	r3, [sp, #4]
 80a374a:	bd08      	pop	{r3, pc}
 80a374c:	080601a4 	.word	0x080601a4

080a3750 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3750:	b508      	push	{r3, lr}
 80a3752:	4b02      	ldr	r3, [pc, #8]	; (80a375c <set_system_mode+0xc>)
 80a3754:	681b      	ldr	r3, [r3, #0]
 80a3756:	685b      	ldr	r3, [r3, #4]
 80a3758:	9301      	str	r3, [sp, #4]
 80a375a:	bd08      	pop	{r3, pc}
 80a375c:	080601a4 	.word	0x080601a4

080a3760 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3760:	b508      	push	{r3, lr}
 80a3762:	4b02      	ldr	r3, [pc, #8]	; (80a376c <system_delay_ms+0xc>)
 80a3764:	681b      	ldr	r3, [r3, #0]
 80a3766:	695b      	ldr	r3, [r3, #20]
 80a3768:	9301      	str	r3, [sp, #4]
 80a376a:	bd08      	pop	{r3, pc}
 80a376c:	080601a4 	.word	0x080601a4

080a3770 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a3770:	b508      	push	{r3, lr}
 80a3772:	4b02      	ldr	r3, [pc, #8]	; (80a377c <application_thread_current+0xc>)
 80a3774:	681b      	ldr	r3, [r3, #0]
 80a3776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3778:	9301      	str	r3, [sp, #4]
 80a377a:	bd08      	pop	{r3, pc}
 80a377c:	080601a4 	.word	0x080601a4

080a3780 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a3780:	b508      	push	{r3, lr}
 80a3782:	4b02      	ldr	r3, [pc, #8]	; (80a378c <application_thread_invoke+0xc>)
 80a3784:	681b      	ldr	r3, [r3, #0]
 80a3786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3788:	9301      	str	r3, [sp, #4]
 80a378a:	bd08      	pop	{r3, pc}
 80a378c:	080601a4 	.word	0x080601a4

080a3790 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a3790:	b508      	push	{r3, lr}
 80a3792:	4b02      	ldr	r3, [pc, #8]	; (80a379c <system_thread_get_state+0xc>)
 80a3794:	681b      	ldr	r3, [r3, #0]
 80a3796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3798:	9301      	str	r3, [sp, #4]
 80a379a:	bd08      	pop	{r3, pc}
 80a379c:	080601a4 	.word	0x080601a4

080a37a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a37a0:	b508      	push	{r3, lr}
 80a37a2:	4b03      	ldr	r3, [pc, #12]	; (80a37b0 <system_ctrl_set_app_request_handler+0x10>)
 80a37a4:	681b      	ldr	r3, [r3, #0]
 80a37a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a37aa:	9301      	str	r3, [sp, #4]
 80a37ac:	bd08      	pop	{r3, pc}
 80a37ae:	0000      	.short	0x0000
 80a37b0:	080601a4 	.word	0x080601a4

080a37b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a37b4:	b508      	push	{r3, lr}
 80a37b6:	4b03      	ldr	r3, [pc, #12]	; (80a37c4 <system_ctrl_set_result+0x10>)
 80a37b8:	681b      	ldr	r3, [r3, #0]
 80a37ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a37be:	9301      	str	r3, [sp, #4]
 80a37c0:	bd08      	pop	{r3, pc}
 80a37c2:	0000      	.short	0x0000
 80a37c4:	080601a4 	.word	0x080601a4

080a37c8 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80a37c8:	b508      	push	{r3, lr}
 80a37ca:	4b03      	ldr	r3, [pc, #12]	; (80a37d8 <system_sleep_pins+0x10>)
 80a37cc:	681b      	ldr	r3, [r3, #0]
 80a37ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80a37d2:	9301      	str	r3, [sp, #4]
 80a37d4:	bd08      	pop	{r3, pc}
 80a37d6:	0000      	.short	0x0000
 80a37d8:	080601a4 	.word	0x080601a4

080a37dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a37dc:	b508      	push	{r3, lr}
 80a37de:	4b02      	ldr	r3, [pc, #8]	; (80a37e8 <network_connect+0xc>)
 80a37e0:	681b      	ldr	r3, [r3, #0]
 80a37e2:	685b      	ldr	r3, [r3, #4]
 80a37e4:	9301      	str	r3, [sp, #4]
 80a37e6:	bd08      	pop	{r3, pc}
 80a37e8:	080601c8 	.word	0x080601c8

080a37ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a37ec:	b508      	push	{r3, lr}
 80a37ee:	4b02      	ldr	r3, [pc, #8]	; (80a37f8 <network_connecting+0xc>)
 80a37f0:	681b      	ldr	r3, [r3, #0]
 80a37f2:	689b      	ldr	r3, [r3, #8]
 80a37f4:	9301      	str	r3, [sp, #4]
 80a37f6:	bd08      	pop	{r3, pc}
 80a37f8:	080601c8 	.word	0x080601c8

080a37fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a37fc:	b508      	push	{r3, lr}
 80a37fe:	4b02      	ldr	r3, [pc, #8]	; (80a3808 <network_disconnect+0xc>)
 80a3800:	681b      	ldr	r3, [r3, #0]
 80a3802:	68db      	ldr	r3, [r3, #12]
 80a3804:	9301      	str	r3, [sp, #4]
 80a3806:	bd08      	pop	{r3, pc}
 80a3808:	080601c8 	.word	0x080601c8

080a380c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a380c:	b508      	push	{r3, lr}
 80a380e:	4b02      	ldr	r3, [pc, #8]	; (80a3818 <network_ready+0xc>)
 80a3810:	681b      	ldr	r3, [r3, #0]
 80a3812:	691b      	ldr	r3, [r3, #16]
 80a3814:	9301      	str	r3, [sp, #4]
 80a3816:	bd08      	pop	{r3, pc}
 80a3818:	080601c8 	.word	0x080601c8

080a381c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a381c:	b508      	push	{r3, lr}
 80a381e:	4b02      	ldr	r3, [pc, #8]	; (80a3828 <network_on+0xc>)
 80a3820:	681b      	ldr	r3, [r3, #0]
 80a3822:	695b      	ldr	r3, [r3, #20]
 80a3824:	9301      	str	r3, [sp, #4]
 80a3826:	bd08      	pop	{r3, pc}
 80a3828:	080601c8 	.word	0x080601c8

080a382c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a382c:	b508      	push	{r3, lr}
 80a382e:	4b02      	ldr	r3, [pc, #8]	; (80a3838 <network_off+0xc>)
 80a3830:	681b      	ldr	r3, [r3, #0]
 80a3832:	699b      	ldr	r3, [r3, #24]
 80a3834:	9301      	str	r3, [sp, #4]
 80a3836:	bd08      	pop	{r3, pc}
 80a3838:	080601c8 	.word	0x080601c8

080a383c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a383c:	b508      	push	{r3, lr}
 80a383e:	4b02      	ldr	r3, [pc, #8]	; (80a3848 <network_listen+0xc>)
 80a3840:	681b      	ldr	r3, [r3, #0]
 80a3842:	69db      	ldr	r3, [r3, #28]
 80a3844:	9301      	str	r3, [sp, #4]
 80a3846:	bd08      	pop	{r3, pc}
 80a3848:	080601c8 	.word	0x080601c8

080a384c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a384c:	b508      	push	{r3, lr}
 80a384e:	4b02      	ldr	r3, [pc, #8]	; (80a3858 <network_listening+0xc>)
 80a3850:	681b      	ldr	r3, [r3, #0]
 80a3852:	6a1b      	ldr	r3, [r3, #32]
 80a3854:	9301      	str	r3, [sp, #4]
 80a3856:	bd08      	pop	{r3, pc}
 80a3858:	080601c8 	.word	0x080601c8

080a385c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a385c:	b508      	push	{r3, lr}
 80a385e:	4b02      	ldr	r3, [pc, #8]	; (80a3868 <network_set_listen_timeout+0xc>)
 80a3860:	681b      	ldr	r3, [r3, #0]
 80a3862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3864:	9301      	str	r3, [sp, #4]
 80a3866:	bd08      	pop	{r3, pc}
 80a3868:	080601c8 	.word	0x080601c8

080a386c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a386c:	b508      	push	{r3, lr}
 80a386e:	4b02      	ldr	r3, [pc, #8]	; (80a3878 <network_get_listen_timeout+0xc>)
 80a3870:	681b      	ldr	r3, [r3, #0]
 80a3872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3874:	9301      	str	r3, [sp, #4]
 80a3876:	bd08      	pop	{r3, pc}
 80a3878:	080601c8 	.word	0x080601c8

080a387c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a387c:	b508      	push	{r3, lr}
 80a387e:	4b02      	ldr	r3, [pc, #8]	; (80a3888 <network_is_on+0xc>)
 80a3880:	681b      	ldr	r3, [r3, #0]
 80a3882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3884:	9301      	str	r3, [sp, #4]
 80a3886:	bd08      	pop	{r3, pc}
 80a3888:	080601c8 	.word	0x080601c8

080a388c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a388c:	b508      	push	{r3, lr}
 80a388e:	4b02      	ldr	r3, [pc, #8]	; (80a3898 <network_is_off+0xc>)
 80a3890:	681b      	ldr	r3, [r3, #0]
 80a3892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3894:	9301      	str	r3, [sp, #4]
 80a3896:	bd08      	pop	{r3, pc}
 80a3898:	080601c8 	.word	0x080601c8

080a389c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a389c:	b508      	push	{r3, lr}
 80a389e:	4b02      	ldr	r3, [pc, #8]	; (80a38a8 <spark_process+0xc>)
 80a38a0:	681b      	ldr	r3, [r3, #0]
 80a38a2:	689b      	ldr	r3, [r3, #8]
 80a38a4:	9301      	str	r3, [sp, #4]
 80a38a6:	bd08      	pop	{r3, pc}
 80a38a8:	080601cc 	.word	0x080601cc

080a38ac <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a38ac:	b508      	push	{r3, lr}
 80a38ae:	4b02      	ldr	r3, [pc, #8]	; (80a38b8 <spark_cloud_flag_connected+0xc>)
 80a38b0:	681b      	ldr	r3, [r3, #0]
 80a38b2:	695b      	ldr	r3, [r3, #20]
 80a38b4:	9301      	str	r3, [sp, #4]
 80a38b6:	bd08      	pop	{r3, pc}
 80a38b8:	080601cc 	.word	0x080601cc

080a38bc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a38bc:	b508      	push	{r3, lr}
 80a38be:	4b02      	ldr	r3, [pc, #8]	; (80a38c8 <spark_deviceID+0xc>)
 80a38c0:	681b      	ldr	r3, [r3, #0]
 80a38c2:	69db      	ldr	r3, [r3, #28]
 80a38c4:	9301      	str	r3, [sp, #4]
 80a38c6:	bd08      	pop	{r3, pc}
 80a38c8:	080601cc 	.word	0x080601cc

080a38cc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a38cc:	b508      	push	{r3, lr}
 80a38ce:	4b02      	ldr	r3, [pc, #8]	; (80a38d8 <spark_send_event+0xc>)
 80a38d0:	681b      	ldr	r3, [r3, #0]
 80a38d2:	6a1b      	ldr	r3, [r3, #32]
 80a38d4:	9301      	str	r3, [sp, #4]
 80a38d6:	bd08      	pop	{r3, pc}
 80a38d8:	080601cc 	.word	0x080601cc

080a38dc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a38dc:	b508      	push	{r3, lr}
 80a38de:	4b02      	ldr	r3, [pc, #8]	; (80a38e8 <spark_subscribe+0xc>)
 80a38e0:	681b      	ldr	r3, [r3, #0]
 80a38e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a38e4:	9301      	str	r3, [sp, #4]
 80a38e6:	bd08      	pop	{r3, pc}
 80a38e8:	080601cc 	.word	0x080601cc

080a38ec <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a38ec:	b508      	push	{r3, lr}
 80a38ee:	4b02      	ldr	r3, [pc, #8]	; (80a38f8 <spark_sync_time_pending+0xc>)
 80a38f0:	681b      	ldr	r3, [r3, #0]
 80a38f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a38f4:	9301      	str	r3, [sp, #4]
 80a38f6:	bd08      	pop	{r3, pc}
 80a38f8:	080601cc 	.word	0x080601cc

080a38fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a38fc:	b508      	push	{r3, lr}
 80a38fe:	4b02      	ldr	r3, [pc, #8]	; (80a3908 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3900:	681b      	ldr	r3, [r3, #0]
 80a3902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3904:	9301      	str	r3, [sp, #4]
 80a3906:	bd08      	pop	{r3, pc}
 80a3908:	080601cc 	.word	0x080601cc

080a390c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a390c:	b508      	push	{r3, lr}
 80a390e:	4b02      	ldr	r3, [pc, #8]	; (80a3918 <malloc+0xc>)
 80a3910:	681b      	ldr	r3, [r3, #0]
 80a3912:	681b      	ldr	r3, [r3, #0]
 80a3914:	9301      	str	r3, [sp, #4]
 80a3916:	bd08      	pop	{r3, pc}
 80a3918:	080601a0 	.word	0x080601a0

080a391c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a391c:	b508      	push	{r3, lr}
 80a391e:	4b02      	ldr	r3, [pc, #8]	; (80a3928 <free+0xc>)
 80a3920:	681b      	ldr	r3, [r3, #0]
 80a3922:	685b      	ldr	r3, [r3, #4]
 80a3924:	9301      	str	r3, [sp, #4]
 80a3926:	bd08      	pop	{r3, pc}
 80a3928:	080601a0 	.word	0x080601a0

080a392c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a392c:	b508      	push	{r3, lr}
 80a392e:	4b02      	ldr	r3, [pc, #8]	; (80a3938 <realloc+0xc>)
 80a3930:	681b      	ldr	r3, [r3, #0]
 80a3932:	689b      	ldr	r3, [r3, #8]
 80a3934:	9301      	str	r3, [sp, #4]
 80a3936:	bd08      	pop	{r3, pc}
 80a3938:	080601a0 	.word	0x080601a0

080a393c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a393c:	b508      	push	{r3, lr}
 80a393e:	4b02      	ldr	r3, [pc, #8]	; (80a3948 <sprintf+0xc>)
 80a3940:	681b      	ldr	r3, [r3, #0]
 80a3942:	68db      	ldr	r3, [r3, #12]
 80a3944:	9301      	str	r3, [sp, #4]
 80a3946:	bd08      	pop	{r3, pc}
 80a3948:	080601a0 	.word	0x080601a0

080a394c <siscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a394c:	b508      	push	{r3, lr}
 80a394e:	4b02      	ldr	r3, [pc, #8]	; (80a3958 <siscanf+0xc>)
 80a3950:	681b      	ldr	r3, [r3, #0]
 80a3952:	699b      	ldr	r3, [r3, #24]
 80a3954:	9301      	str	r3, [sp, #4]
 80a3956:	bd08      	pop	{r3, pc}
 80a3958:	080601a0 	.word	0x080601a0

080a395c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a395c:	b508      	push	{r3, lr}
 80a395e:	4b02      	ldr	r3, [pc, #8]	; (80a3968 <snprintf+0xc>)
 80a3960:	681b      	ldr	r3, [r3, #0]
 80a3962:	69db      	ldr	r3, [r3, #28]
 80a3964:	9301      	str	r3, [sp, #4]
 80a3966:	bd08      	pop	{r3, pc}
 80a3968:	080601a0 	.word	0x080601a0

080a396c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a396c:	b508      	push	{r3, lr}
 80a396e:	4b02      	ldr	r3, [pc, #8]	; (80a3978 <vsnprintf+0xc>)
 80a3970:	681b      	ldr	r3, [r3, #0]
 80a3972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3974:	9301      	str	r3, [sp, #4]
 80a3976:	bd08      	pop	{r3, pc}
 80a3978:	080601a0 	.word	0x080601a0

080a397c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a397c:	b508      	push	{r3, lr}
 80a397e:	4b02      	ldr	r3, [pc, #8]	; (80a3988 <abort+0xc>)
 80a3980:	681b      	ldr	r3, [r3, #0]
 80a3982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3984:	9301      	str	r3, [sp, #4]
 80a3986:	bd08      	pop	{r3, pc}
 80a3988:	080601a0 	.word	0x080601a0

080a398c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a398c:	b508      	push	{r3, lr}
 80a398e:	4b02      	ldr	r3, [pc, #8]	; (80a3998 <_malloc_r+0xc>)
 80a3990:	681b      	ldr	r3, [r3, #0]
 80a3992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3994:	9301      	str	r3, [sp, #4]
 80a3996:	bd08      	pop	{r3, pc}
 80a3998:	080601a0 	.word	0x080601a0

080a399c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a399c:	b508      	push	{r3, lr}
 80a399e:	4b02      	ldr	r3, [pc, #8]	; (80a39a8 <newlib_impure_ptr_callback+0xc>)
 80a39a0:	681b      	ldr	r3, [r3, #0]
 80a39a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a39a4:	9301      	str	r3, [sp, #4]
 80a39a6:	bd08      	pop	{r3, pc}
 80a39a8:	080601a0 	.word	0x080601a0

080a39ac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a39ac:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a39ae:	2600      	movs	r6, #0
 80a39b0:	4604      	mov	r4, r0
 80a39b2:	460d      	mov	r5, r1
 80a39b4:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a39b8:	f7ff fd98 	bl	80a34ec <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a39bc:	4628      	mov	r0, r5
    _spi = spi;
 80a39be:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a39c0:	f7ff fe5e 	bl	80a3680 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a39c4:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a39c6:	6066      	str	r6, [r4, #4]
}
 80a39c8:	bd70      	pop	{r4, r5, r6, pc}

080a39ca <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a39ca:	b510      	push	{r4, lr}
 80a39cc:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a39ce:	6800      	ldr	r0, [r0, #0]
 80a39d0:	b118      	cbz	r0, 80a39da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a39d2:	f7ff ffa3 	bl	80a391c <free>
            wakeupSource_ = nullptr;
 80a39d6:	2300      	movs	r3, #0
 80a39d8:	6023      	str	r3, [r4, #0]
        }
    }
 80a39da:	bd10      	pop	{r4, pc}

080a39dc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a39dc:	b510      	push	{r4, lr}
 80a39de:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a39e0:	f7ff fff3 	bl	80a39ca <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a39e4:	4620      	mov	r0, r4
 80a39e6:	bd10      	pop	{r4, pc}

080a39e8 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a39e8:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80a39ea:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a39ee:	460d      	mov	r5, r1
        error_ = result.error_;
 80a39f0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80a39f2:	460b      	mov	r3, r1
 80a39f4:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a39f8:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 80a39fa:	f8c0 2006 	str.w	r2, [r0, #6]
 80a39fe:	889b      	ldrh	r3, [r3, #4]
 80a3a00:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80a3a02:	f7ff ffe2 	bl	80a39ca <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 80a3a06:	682b      	ldr	r3, [r5, #0]
 80a3a08:	b113      	cbz	r3, 80a3a10 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80a3a0a:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80a3a0c:	2300      	movs	r3, #0
 80a3a0e:	602b      	str	r3, [r5, #0]
    }
 80a3a10:	4620      	mov	r0, r4
 80a3a12:	bd38      	pop	{r3, r4, r5, pc}

080a3a14 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 80a3a14:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80a3a18:	b510      	push	{r4, lr}
 80a3a1a:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 80a3a1c:	b933      	cbnz	r3, 80a3a2c <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 80a3a1e:	b932      	cbnz	r2, 80a3a2e <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 80a3a20:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80a3a24:	6003      	str	r3, [r0, #0]
 80a3a26:	888b      	ldrh	r3, [r1, #4]
 80a3a28:	8083      	strh	r3, [r0, #4]
    }
 80a3a2a:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 80a3a2c:	b122      	cbz	r2, 80a3a38 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 80a3a2e:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 80a3a30:	2c01      	cmp	r4, #1
 80a3a32:	d003      	beq.n	80a3a3c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 80a3a34:	2c04      	cmp	r4, #4
 80a3a36:	d006      	beq.n	80a3a46 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a3a38:	2204      	movs	r2, #4
 80a3a3a:	e005      	b.n	80a3a48 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80a3a3c:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80a3a3e:	718c      	strb	r4, [r1, #6]
 80a3a40:	810b      	strh	r3, [r1, #8]
 80a3a42:	814a      	strh	r2, [r1, #10]
                    break;
 80a3a44:	e7ec      	b.n	80a3a20 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80a3a46:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a3a48:	810b      	strh	r3, [r1, #8]
 80a3a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3a4e:	718a      	strb	r2, [r1, #6]
 80a3a50:	814b      	strh	r3, [r1, #10]
                    break;
 80a3a52:	e7e5      	b.n	80a3a20 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

080a3a54 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a3a54:	b510      	push	{r4, lr}
 80a3a56:	2400      	movs	r4, #0
 80a3a58:	7004      	strb	r4, [r0, #0]
 80a3a5a:	8044      	strh	r4, [r0, #2]
 80a3a5c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80a3a60:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a3a62:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80a3a64:	dd08      	ble.n	80a3a78 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 80a3a66:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 80a3a68:	428b      	cmp	r3, r1
 80a3a6a:	d904      	bls.n	80a3a76 <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 80a3a6c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80a3a70:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80a3a72:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 80a3a74:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 80a3a76:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 80a3a78:	d101      	bne.n	80a3a7e <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80a3a7a:	2302      	movs	r3, #2
 80a3a7c:	e7fa      	b.n	80a3a74 <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 80a3a7e:	8041      	strh	r1, [r0, #2]
 80a3a80:	e7f9      	b.n	80a3a76 <_ZN11SleepResultC1EiPKtj+0x22>
	...

080a3a84 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3a86:	460d      	mov	r5, r1
 80a3a88:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3a8a:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3a8c:	b08b      	sub	sp, #44	; 0x2c
 80a3a8e:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3a92:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3a94:	9301      	str	r3, [sp, #4]
 80a3a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a3a98:	4631      	mov	r1, r6
 80a3a9a:	9300      	str	r3, [sp, #0]
 80a3a9c:	4628      	mov	r0, r5
 80a3a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a3aa0:	9702      	str	r7, [sp, #8]
 80a3aa2:	f7ff fe91 	bl	80a37c8 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a3aa6:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3aa8:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a3aaa:	462a      	mov	r2, r5
 80a3aac:	a805      	add	r0, sp, #20
 80a3aae:	f7ff ffd1 	bl	80a3a54 <_ZN11SleepResultC1EiPKtj>
 80a3ab2:	4d0f      	ldr	r5, [pc, #60]	; (80a3af0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 80a3ab4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80a3ab8:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80a3abc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
 80a3ac0:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 80a3ac4:	4628      	mov	r0, r5
 80a3ac6:	a907      	add	r1, sp, #28
 80a3ac8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80a3acc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80a3ad0:	9707      	str	r7, [sp, #28]
 80a3ad2:	f8ad 7020 	strh.w	r7, [sp, #32]
 80a3ad6:	f7ff ff87 	bl	80a39e8 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 80a3ada:	a807      	add	r0, sp, #28
 80a3adc:	f7ff ff75 	bl	80a39ca <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 80a3ae0:	4620      	mov	r0, r4
 80a3ae2:	4629      	mov	r1, r5
 80a3ae4:	f7ff ff96 	bl	80a3a14 <_ZN17SystemSleepResult13toSleepResultEv>
}
 80a3ae8:	4620      	mov	r0, r4
 80a3aea:	b00b      	add	sp, #44	; 0x2c
 80a3aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3aee:	bf00      	nop
 80a3af0:	200003d0 	.word	0x200003d0

080a3af4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a3af4:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a3af6:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3af8:	b510      	push	{r4, lr}
 80a3afa:	4b08      	ldr	r3, [pc, #32]	; (80a3b1c <_GLOBAL__sub_I_System+0x28>)
 80a3afc:	4c08      	ldr	r4, [pc, #32]	; (80a3b20 <_GLOBAL__sub_I_System+0x2c>)
 80a3afe:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a3b00:	4b08      	ldr	r3, [pc, #32]	; (80a3b24 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a3b02:	6020      	str	r0, [r4, #0]
 80a3b04:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a3b06:	71a0      	strb	r0, [r4, #6]
 80a3b08:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3b0a:	f7ff fe21 	bl	80a3750 <set_system_mode>
SystemClass System;
 80a3b0e:	4620      	mov	r0, r4
 80a3b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a3b14:	4a04      	ldr	r2, [pc, #16]	; (80a3b28 <_GLOBAL__sub_I_System+0x34>)
 80a3b16:	4905      	ldr	r1, [pc, #20]	; (80a3b2c <_GLOBAL__sub_I_System+0x38>)
 80a3b18:	f001 bc9e 	b.w	80a5458 <__aeabi_atexit>
 80a3b1c:	200003dc 	.word	0x200003dc
 80a3b20:	200003d0 	.word	0x200003d0
 80a3b24:	ffff0000 	.word	0xffff0000
 80a3b28:	20000128 	.word	0x20000128
 80a3b2c:	080a39dd 	.word	0x080a39dd

080a3b30 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3b30:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b32:	6803      	ldr	r3, [r0, #0]
{
 80a3b34:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b38:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3b3a:	2201      	movs	r2, #1
 80a3b3c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b40:	f10d 0107 	add.w	r1, sp, #7
 80a3b44:	47a0      	blx	r4
}
 80a3b46:	b002      	add	sp, #8
 80a3b48:	bd10      	pop	{r4, pc}

080a3b4a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3b4a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b4c:	6803      	ldr	r3, [r0, #0]
 80a3b4e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3b50:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b54:	46a4      	mov	ip, r4
}
 80a3b56:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b58:	4760      	bx	ip

080a3b5a <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3b5a:	b513      	push	{r0, r1, r4, lr}
 80a3b5c:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a3b5e:	6802      	ldr	r2, [r0, #0]
{
 80a3b60:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3b64:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3b66:	f10d 0107 	add.w	r1, sp, #7
 80a3b6a:	2201      	movs	r2, #1
 80a3b6c:	47a0      	blx	r4
}
 80a3b6e:	b002      	add	sp, #8
 80a3b70:	bd10      	pop	{r4, pc}

080a3b72 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a3b72:	4770      	bx	lr

080a3b74 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3b74:	4770      	bx	lr
	...

080a3b78 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3b78:	b510      	push	{r4, lr}
 80a3b7a:	4604      	mov	r4, r0
	    ||
 80a3b7c:	4b06      	ldr	r3, [pc, #24]	; (80a3b98 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3b7e:	4608      	mov	r0, r1
	    ||
 80a3b80:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a3b82:	f104 040c 	add.w	r4, r4, #12
 80a3b86:	d004      	beq.n	80a3b92 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a3b88:	f001 fc72 	bl	80a5470 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a3b8c:	2800      	cmp	r0, #0
	return nullptr;
 80a3b8e:	bf08      	it	eq
 80a3b90:	2400      	moveq	r4, #0
      }
 80a3b92:	4620      	mov	r0, r4
 80a3b94:	bd10      	pop	{r4, pc}
 80a3b96:	bf00      	nop
 80a3b98:	080a8b58 	.word	0x080a8b58

080a3b9c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3b9c:	b510      	push	{r4, lr}
 80a3b9e:	4604      	mov	r4, r0
 80a3ba0:	21ac      	movs	r1, #172	; 0xac
 80a3ba2:	f001 fc5e 	bl	80a5462 <_ZdlPvj>
 80a3ba6:	4620      	mov	r0, r4
 80a3ba8:	bd10      	pop	{r4, pc}

080a3baa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a3baa:	f7fc ba78 	b.w	80a009e <_ZdlPv>
	...

080a3bb0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3bb0:	b538      	push	{r3, r4, r5, lr}
 80a3bb2:	4b0b      	ldr	r3, [pc, #44]	; (80a3be0 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3bb4:	6984      	ldr	r4, [r0, #24]
 80a3bb6:	4605      	mov	r5, r0
 80a3bb8:	6003      	str	r3, [r0, #0]
 80a3bba:	b17c      	cbz	r4, 80a3bdc <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a3bbc:	6863      	ldr	r3, [r4, #4]
 80a3bbe:	3b01      	subs	r3, #1
 80a3bc0:	6063      	str	r3, [r4, #4]
 80a3bc2:	b95b      	cbnz	r3, 80a3bdc <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3bc4:	6823      	ldr	r3, [r4, #0]
 80a3bc6:	4620      	mov	r0, r4
 80a3bc8:	689b      	ldr	r3, [r3, #8]
 80a3bca:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3bcc:	68a3      	ldr	r3, [r4, #8]
 80a3bce:	3b01      	subs	r3, #1
 80a3bd0:	60a3      	str	r3, [r4, #8]
 80a3bd2:	b91b      	cbnz	r3, 80a3bdc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3bd4:	6823      	ldr	r3, [r4, #0]
 80a3bd6:	4620      	mov	r0, r4
 80a3bd8:	68db      	ldr	r3, [r3, #12]
 80a3bda:	4798      	blx	r3
 80a3bdc:	4628      	mov	r0, r5
 80a3bde:	bd38      	pop	{r3, r4, r5, pc}
 80a3be0:	080a8b68 	.word	0x080a8b68

080a3be4 <_ZN9TCPClientD0Ev>:
 80a3be4:	b510      	push	{r4, lr}
 80a3be6:	4604      	mov	r4, r0
 80a3be8:	f7ff ffe2 	bl	80a3bb0 <_ZN9TCPClientD1Ev>
 80a3bec:	4620      	mov	r0, r4
 80a3bee:	211c      	movs	r1, #28
 80a3bf0:	f001 fc37 	bl	80a5462 <_ZdlPvj>
 80a3bf4:	4620      	mov	r0, r4
 80a3bf6:	bd10      	pop	{r4, pc}

080a3bf8 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3bf8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3bfa:	4604      	mov	r4, r0
 80a3bfc:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3bfe:	694d      	ldr	r5, [r1, #20]
 80a3c00:	4b04      	ldr	r3, [pc, #16]	; (80a3c14 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3c02:	358c      	adds	r5, #140	; 0x8c
 80a3c04:	f844 3b04 	str.w	r3, [r4], #4
 80a3c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3c0c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3c0e:	4630      	mov	r0, r6
 80a3c10:	7023      	strb	r3, [r4, #0]
 80a3c12:	bd70      	pop	{r4, r5, r6, pc}
 80a3c14:	080a8bf0 	.word	0x080a8bf0

080a3c18 <_ZN9TCPClient4peekEv>:
{
 80a3c18:	b510      	push	{r4, lr}
 80a3c1a:	6943      	ldr	r3, [r0, #20]
 80a3c1c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3c1e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c22:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3c26:	429a      	cmp	r2, r3
 80a3c28:	d005      	beq.n	80a3c36 <_ZN9TCPClient4peekEv+0x1e>
 80a3c2a:	6963      	ldr	r3, [r4, #20]
 80a3c2c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3c30:	4413      	add	r3, r2
 80a3c32:	7918      	ldrb	r0, [r3, #4]
}
 80a3c34:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3c36:	6803      	ldr	r3, [r0, #0]
 80a3c38:	691b      	ldr	r3, [r3, #16]
 80a3c3a:	4798      	blx	r3
 80a3c3c:	2800      	cmp	r0, #0
 80a3c3e:	d1f4      	bne.n	80a3c2a <_ZN9TCPClient4peekEv+0x12>
 80a3c40:	f04f 30ff 	mov.w	r0, #4294967295
 80a3c44:	e7f6      	b.n	80a3c34 <_ZN9TCPClient4peekEv+0x1c>

080a3c46 <_ZN9TCPClient4readEv>:
{
 80a3c46:	b510      	push	{r4, lr}
 80a3c48:	6943      	ldr	r3, [r0, #20]
 80a3c4a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3c4c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c50:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3c54:	429a      	cmp	r2, r3
 80a3c56:	d008      	beq.n	80a3c6a <_ZN9TCPClient4readEv+0x24>
 80a3c58:	6963      	ldr	r3, [r4, #20]
 80a3c5a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3c5e:	1c51      	adds	r1, r2, #1
 80a3c60:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3c64:	4413      	add	r3, r2
 80a3c66:	7918      	ldrb	r0, [r3, #4]
}
 80a3c68:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3c6a:	6803      	ldr	r3, [r0, #0]
 80a3c6c:	691b      	ldr	r3, [r3, #16]
 80a3c6e:	4798      	blx	r3
 80a3c70:	2800      	cmp	r0, #0
 80a3c72:	d1f1      	bne.n	80a3c58 <_ZN9TCPClient4readEv+0x12>
 80a3c74:	f04f 30ff 	mov.w	r0, #4294967295
 80a3c78:	e7f6      	b.n	80a3c68 <_ZN9TCPClient4readEv+0x22>

080a3c7a <_ZN9TCPClient4readEPhj>:
{
 80a3c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3c7c:	6943      	ldr	r3, [r0, #20]
 80a3c7e:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a3c80:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c84:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a3c88:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a3c8a:	429a      	cmp	r2, r3
{
 80a3c8c:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a3c8e:	d016      	beq.n	80a3cbe <_ZN9TCPClient4readEPhj+0x44>
 80a3c90:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3c92:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3c94:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3c98:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a3c9c:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3c9e:	42bc      	cmp	r4, r7
 80a3ca0:	bf28      	it	cs
 80a3ca2:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3ca4:	3304      	adds	r3, #4
 80a3ca6:	4622      	mov	r2, r4
 80a3ca8:	4419      	add	r1, r3
 80a3caa:	f002 fed1 	bl	80a6a50 <memcpy>
 80a3cae:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3cb0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3cb4:	4423      	add	r3, r4
 80a3cb6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a3cba:	4620      	mov	r0, r4
 80a3cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a3cbe:	6803      	ldr	r3, [r0, #0]
 80a3cc0:	691b      	ldr	r3, [r3, #16]
 80a3cc2:	4798      	blx	r3
 80a3cc4:	2800      	cmp	r0, #0
 80a3cc6:	d1e3      	bne.n	80a3c90 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a3cc8:	f04f 34ff 	mov.w	r4, #4294967295
 80a3ccc:	e7f5      	b.n	80a3cba <_ZN9TCPClient4readEPhj+0x40>

080a3cce <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a3cce:	2300      	movs	r3, #0
 80a3cd0:	6942      	ldr	r2, [r0, #20]
 80a3cd2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3cd6:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3cd8:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3cdc:	4770      	bx	lr
	...

080a3ce0 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a3ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3ce4:	461f      	mov	r7, r3
    stop();
 80a3ce6:	6803      	ldr	r3, [r0, #0]
{
 80a3ce8:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a3cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3cec:	4605      	mov	r5, r0
 80a3cee:	460c      	mov	r4, r1
 80a3cf0:	4616      	mov	r6, r2
    stop();
 80a3cf2:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a3cf4:	4638      	mov	r0, r7
 80a3cf6:	f001 fa61 	bl	80a51bc <_ZN5spark12NetworkClass4fromEm>
 80a3cfa:	6803      	ldr	r3, [r0, #0]
 80a3cfc:	68db      	ldr	r3, [r3, #12]
 80a3cfe:	4798      	blx	r3
 80a3d00:	2800      	cmp	r0, #0
 80a3d02:	d054      	beq.n	80a3dae <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d04:	4633      	mov	r3, r6
 80a3d06:	2206      	movs	r2, #6
 80a3d08:	2101      	movs	r1, #1
 80a3d0a:	2002      	movs	r0, #2
 80a3d0c:	9700      	str	r7, [sp, #0]
 80a3d0e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a3d12:	f7ff fc85 	bl	80a3620 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d16:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d18:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d1c:	f04f 0800 	mov.w	r8, #0
 80a3d20:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a3d24:	696b      	ldr	r3, [r5, #20]
 80a3d26:	2001      	movs	r0, #1
 80a3d28:	681b      	ldr	r3, [r3, #0]
 80a3d2a:	4923      	ldr	r1, [pc, #140]	; (80a3db8 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3d2c:	9301      	str	r3, [sp, #4]
 80a3d2e:	4b23      	ldr	r3, [pc, #140]	; (80a3dbc <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3d30:	aa02      	add	r2, sp, #8
 80a3d32:	9300      	str	r3, [sp, #0]
 80a3d34:	4643      	mov	r3, r8
 80a3d36:	f7ff fcfb 	bl	80a3730 <log_message>
          if (socket_handle_valid(d_->sock))
 80a3d3a:	696b      	ldr	r3, [r5, #20]
 80a3d3c:	6818      	ldr	r0, [r3, #0]
 80a3d3e:	f7ff fc67 	bl	80a3610 <socket_handle_valid>
 80a3d42:	2800      	cmp	r0, #0
 80a3d44:	d033      	beq.n	80a3dae <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a3d46:	4628      	mov	r0, r5
 80a3d48:	f7ff ffc1 	bl	80a3cce <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a3d4c:	2302      	movs	r3, #2
 80a3d4e:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3d52:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3d54:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3d56:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3d5a:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3d5c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a3d60:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3d64:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3d66:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a3d6a:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3d6e:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3d72:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3d76:	f7ff fccb 	bl	80a3710 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3d7a:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3d7c:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3d7e:	2210      	movs	r2, #16
 80a3d80:	6818      	ldr	r0, [r3, #0]
 80a3d82:	a902      	add	r1, sp, #8
 80a3d84:	f7ff fc54 	bl	80a3630 <socket_connect>
 80a3d88:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a3d8a:	4630      	mov	r0, r6
 80a3d8c:	f7ff fcc0 	bl	80a3710 <HAL_NET_SetNetWatchDog>
 80a3d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3d92:	696e      	ldr	r6, [r5, #20]
 80a3d94:	368c      	adds	r6, #140	; 0x8c
 80a3d96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3d98:	6823      	ldr	r3, [r4, #0]
 80a3d9a:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a3d9c:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a3d9e:	f1b9 0f00 	cmp.w	r9, #0
 80a3da2:	d007      	beq.n	80a3db4 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a3da4:	682b      	ldr	r3, [r5, #0]
 80a3da6:	4628      	mov	r0, r5
 80a3da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3daa:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3dac:	4640      	mov	r0, r8
}
 80a3dae:	b00b      	add	sp, #44	; 0x2c
 80a3db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3db4:	2001      	movs	r0, #1
        return connected;
 80a3db6:	e7fa      	b.n	80a3dae <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a3db8:	080a8b20 	.word	0x080a8b20
 80a3dbc:	080a8b27 	.word	0x080a8b27

080a3dc0 <_ZN9TCPClient9availableEv>:
{
 80a3dc0:	b538      	push	{r3, r4, r5, lr}
 80a3dc2:	6942      	ldr	r2, [r0, #20]
 80a3dc4:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a3dc6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3dca:	b12b      	cbz	r3, 80a3dd8 <_ZN9TCPClient9availableEv+0x18>
 80a3dcc:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a3dd0:	429a      	cmp	r2, r3
 80a3dd2:	d101      	bne.n	80a3dd8 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3dd4:	f7ff ff7b 	bl	80a3cce <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3dd8:	6920      	ldr	r0, [r4, #16]
 80a3dda:	f001 f9ef 	bl	80a51bc <_ZN5spark12NetworkClass4fromEm>
 80a3dde:	6803      	ldr	r3, [r0, #0]
 80a3de0:	68db      	ldr	r3, [r3, #12]
 80a3de2:	4798      	blx	r3
 80a3de4:	b1f8      	cbz	r0, 80a3e26 <_ZN9TCPClient9availableEv+0x66>
 80a3de6:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a3de8:	6818      	ldr	r0, [r3, #0]
 80a3dea:	f7ff fc11 	bl	80a3610 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3dee:	b1d0      	cbz	r0, 80a3e26 <_ZN9TCPClient9availableEv+0x66>
 80a3df0:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a3df2:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3df6:	297f      	cmp	r1, #127	; 0x7f
 80a3df8:	d815      	bhi.n	80a3e26 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a3dfa:	1d05      	adds	r5, r0, #4
 80a3dfc:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3e00:	2300      	movs	r3, #0
 80a3e02:	6800      	ldr	r0, [r0, #0]
 80a3e04:	4429      	add	r1, r5
 80a3e06:	f7ff fc1b 	bl	80a3640 <socket_receive>
            if (ret > 0)
 80a3e0a:	2800      	cmp	r0, #0
 80a3e0c:	dd0b      	ble.n	80a3e26 <_ZN9TCPClient9availableEv+0x66>
 80a3e0e:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a3e10:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3e14:	b90a      	cbnz	r2, 80a3e1a <_ZN9TCPClient9availableEv+0x5a>
 80a3e16:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a3e1a:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a3e1c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3e20:	4410      	add	r0, r2
 80a3e22:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a3e26:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a3e28:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a3e2c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a3e30:	1ac0      	subs	r0, r0, r3
 80a3e32:	bd38      	pop	{r3, r4, r5, pc}

080a3e34 <_ZN9TCPClient4stopEv>:
{
 80a3e34:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a3e36:	6943      	ldr	r3, [r0, #20]
{
 80a3e38:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3e3a:	6818      	ldr	r0, [r3, #0]
 80a3e3c:	f7ff fbe8 	bl	80a3610 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a3e40:	b118      	cbz	r0, 80a3e4a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3e42:	6963      	ldr	r3, [r4, #20]
 80a3e44:	6818      	ldr	r0, [r3, #0]
 80a3e46:	f7ff fc03 	bl	80a3650 <socket_close>
 80a3e4a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3e4c:	f7ff fc08 	bl	80a3660 <socket_handle_invalid>
 80a3e50:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3e52:	6960      	ldr	r0, [r4, #20]
 80a3e54:	2211      	movs	r2, #17
 80a3e56:	2100      	movs	r1, #0
 80a3e58:	308c      	adds	r0, #140	; 0x8c
 80a3e5a:	f002 fe07 	bl	80a6a6c <memset>
  flush_buffer();
 80a3e5e:	4620      	mov	r0, r4
}
 80a3e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3e64:	f7ff bf33 	b.w	80a3cce <_ZN9TCPClient12flush_bufferEv>

080a3e68 <_ZN9TCPClient6statusEv>:
{
 80a3e68:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3e6a:	6943      	ldr	r3, [r0, #20]
{
 80a3e6c:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3e6e:	6818      	ldr	r0, [r3, #0]
 80a3e70:	f7ff fbce 	bl	80a3610 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3e74:	b908      	cbnz	r0, 80a3e7a <_ZN9TCPClient6statusEv+0x12>
 80a3e76:	2000      	movs	r0, #0
}
 80a3e78:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3e7a:	6920      	ldr	r0, [r4, #16]
 80a3e7c:	f001 f99e 	bl	80a51bc <_ZN5spark12NetworkClass4fromEm>
 80a3e80:	6803      	ldr	r3, [r0, #0]
 80a3e82:	68db      	ldr	r3, [r3, #12]
 80a3e84:	4798      	blx	r3
 80a3e86:	2800      	cmp	r0, #0
 80a3e88:	d0f5      	beq.n	80a3e76 <_ZN9TCPClient6statusEv+0xe>
 80a3e8a:	6963      	ldr	r3, [r4, #20]
 80a3e8c:	6818      	ldr	r0, [r3, #0]
 80a3e8e:	f7ff fbb7 	bl	80a3600 <socket_active_status>
 80a3e92:	fab0 f080 	clz	r0, r0
 80a3e96:	0940      	lsrs	r0, r0, #5
 80a3e98:	e7ee      	b.n	80a3e78 <_ZN9TCPClient6statusEv+0x10>

080a3e9a <_ZN9TCPClientcvbEv>:
{
 80a3e9a:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3e9c:	f7ff ffe4 	bl	80a3e68 <_ZN9TCPClient6statusEv>
}
 80a3ea0:	3800      	subs	r0, #0
 80a3ea2:	bf18      	it	ne
 80a3ea4:	2001      	movne	r0, #1
 80a3ea6:	bd08      	pop	{r3, pc}

080a3ea8 <_ZN9TCPClient5writeEPKhjm>:
{
 80a3ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a3eac:	2700      	movs	r7, #0
 80a3eae:	6047      	str	r7, [r0, #4]
 80a3eb0:	4604      	mov	r4, r0
 80a3eb2:	460d      	mov	r5, r1
 80a3eb4:	4616      	mov	r6, r2
 80a3eb6:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3eb8:	f7ff ffd6 	bl	80a3e68 <_ZN9TCPClient6statusEv>
 80a3ebc:	b170      	cbz	r0, 80a3edc <_ZN9TCPClient5writeEPKhjm+0x34>
 80a3ebe:	e9cd 8700 	strd	r8, r7, [sp]
 80a3ec2:	6960      	ldr	r0, [r4, #20]
 80a3ec4:	463b      	mov	r3, r7
 80a3ec6:	4632      	mov	r2, r6
 80a3ec8:	4629      	mov	r1, r5
 80a3eca:	6800      	ldr	r0, [r0, #0]
 80a3ecc:	f7ff fbd0 	bl	80a3670 <socket_send_ex>
    if (ret < 0) {
 80a3ed0:	2800      	cmp	r0, #0
 80a3ed2:	da00      	bge.n	80a3ed6 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3ed4:	6060      	str	r0, [r4, #4]
}
 80a3ed6:	b002      	add	sp, #8
 80a3ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3edc:	f04f 30ff 	mov.w	r0, #4294967295
 80a3ee0:	e7f8      	b.n	80a3ed4 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a3ee2 <_ZN9TCPClient9connectedEv>:
{
 80a3ee2:	b570      	push	{r4, r5, r6, lr}
 80a3ee4:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a3ee6:	f7ff ffbf 	bl	80a3e68 <_ZN9TCPClient6statusEv>
 80a3eea:	b9e8      	cbnz	r0, 80a3f28 <_ZN9TCPClient9connectedEv+0x46>
 80a3eec:	696b      	ldr	r3, [r5, #20]
 80a3eee:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3ef2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3ef6:	4291      	cmp	r1, r2
 80a3ef8:	d116      	bne.n	80a3f28 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a3efa:	6818      	ldr	r0, [r3, #0]
 80a3efc:	f7ff fb88 	bl	80a3610 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3f00:	b908      	cbnz	r0, 80a3f06 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a3f02:	2000      	movs	r0, #0
}
 80a3f04:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3f06:	696b      	ldr	r3, [r5, #20]
 80a3f08:	6818      	ldr	r0, [r3, #0]
 80a3f0a:	f7ff fb79 	bl	80a3600 <socket_active_status>
 80a3f0e:	2801      	cmp	r0, #1
 80a3f10:	4604      	mov	r4, r0
 80a3f12:	d1f6      	bne.n	80a3f02 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a3f14:	682b      	ldr	r3, [r5, #0]
 80a3f16:	4628      	mov	r0, r5
 80a3f18:	691b      	ldr	r3, [r3, #16]
 80a3f1a:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3f1c:	b930      	cbnz	r0, 80a3f2c <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a3f1e:	682b      	ldr	r3, [r5, #0]
 80a3f20:	4628      	mov	r0, r5
 80a3f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3f24:	4798      	blx	r3
 80a3f26:	e7ec      	b.n	80a3f02 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a3f28:	2001      	movs	r0, #1
 80a3f2a:	e7eb      	b.n	80a3f04 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a3f2c:	4620      	mov	r0, r4
 80a3f2e:	e7e9      	b.n	80a3f04 <_ZN9TCPClient9connectedEv+0x22>

080a3f30 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a3f30:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a3f32:	b510      	push	{r4, lr}
 80a3f34:	4604      	mov	r4, r0
          total(0) {
 80a3f36:	6001      	str	r1, [r0, #0]
 80a3f38:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a3f3c:	3088      	adds	r0, #136	; 0x88
 80a3f3e:	f000 fe9f 	bl	80a4c80 <_ZN9IPAddressC1Ev>
}
 80a3f42:	4620      	mov	r0, r4
 80a3f44:	bd10      	pop	{r4, pc}
	...

080a3f48 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a3f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3f4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3f4e:	2300      	movs	r3, #0
 80a3f50:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a3f54:	4a0d      	ldr	r2, [pc, #52]	; (80a3f8c <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a3f56:	6103      	str	r3, [r0, #16]
 80a3f58:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a3f5a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a3f5c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3f5e:	20ac      	movs	r0, #172	; 0xac
 80a3f60:	460e      	mov	r6, r1
 80a3f62:	f7fc f898 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a3f66:	1e05      	subs	r5, r0, #0
 80a3f68:	f105 070c 	add.w	r7, r5, #12
 80a3f6c:	d008      	beq.n	80a3f80 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a3f6e:	2301      	movs	r3, #1
 80a3f70:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a3f74:	4b06      	ldr	r3, [pc, #24]	; (80a3f90 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3f76:	4631      	mov	r1, r6
 80a3f78:	4638      	mov	r0, r7
 80a3f7a:	602b      	str	r3, [r5, #0]
 80a3f7c:	f7ff ffd8 	bl	80a3f30 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a3f80:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a3f82:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a3f86:	f7ff fea2 	bl	80a3cce <_ZN9TCPClient12flush_bufferEv>
}
 80a3f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3f8c:	080a8b68 	.word	0x080a8b68
 80a3f90:	080a8b44 	.word	0x080a8b44

080a3f94 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3f94:	b510      	push	{r4, lr}
 80a3f96:	4604      	mov	r4, r0
 80a3f98:	f7ff fb62 	bl	80a3660 <socket_handle_invalid>
 80a3f9c:	4601      	mov	r1, r0
 80a3f9e:	4620      	mov	r0, r4
 80a3fa0:	f7ff ffd2 	bl	80a3f48 <_ZN9TCPClientC1Em>
}
 80a3fa4:	4620      	mov	r0, r4
 80a3fa6:	bd10      	pop	{r4, pc}

080a3fa8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a3fa8:	b510      	push	{r4, lr}
 80a3faa:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3fac:	6800      	ldr	r0, [r0, #0]
 80a3fae:	f7ff fb2f 	bl	80a3610 <socket_handle_valid>
 80a3fb2:	b110      	cbz	r0, 80a3fba <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3fb4:	6820      	ldr	r0, [r4, #0]
 80a3fb6:	f7ff fb4b 	bl	80a3650 <socket_close>
    }
}
 80a3fba:	4620      	mov	r0, r4
 80a3fbc:	bd10      	pop	{r4, pc}

080a3fbe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a3fbe:	300c      	adds	r0, #12
 80a3fc0:	f7ff bff2 	b.w	80a3fa8 <_ZN9TCPClient4DataD1Ev>

080a3fc4 <_ZN9TCPClient7connectEPKctm>:
{
 80a3fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3fc8:	461f      	mov	r7, r3
    stop();
 80a3fca:	6803      	ldr	r3, [r0, #0]
{
 80a3fcc:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a3fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3fd0:	4606      	mov	r6, r0
 80a3fd2:	460d      	mov	r5, r1
 80a3fd4:	4690      	mov	r8, r2
    stop();
 80a3fd6:	4798      	blx	r3
    if (Network.ready())
 80a3fd8:	4813      	ldr	r0, [pc, #76]	; (80a4028 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a3fda:	f001 f89a 	bl	80a5112 <_ZN5spark12NetworkClass5readyEv>
 80a3fde:	b1f0      	cbz	r0, 80a401e <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a3fe0:	a802      	add	r0, sp, #8
 80a3fe2:	f000 fe4d 	bl	80a4c80 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a3fe6:	4628      	mov	r0, r5
 80a3fe8:	f002 fd99 	bl	80a6b1e <strlen>
 80a3fec:	2400      	movs	r4, #0
 80a3fee:	b281      	uxth	r1, r0
 80a3ff0:	463b      	mov	r3, r7
 80a3ff2:	4628      	mov	r0, r5
 80a3ff4:	9400      	str	r4, [sp, #0]
 80a3ff6:	aa03      	add	r2, sp, #12
 80a3ff8:	f7ff fb92 	bl	80a3720 <inet_gethostbyname>
 80a3ffc:	b990      	cbnz	r0, 80a4024 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a3ffe:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a4000:	ad09      	add	r5, sp, #36	; 0x24
 80a4002:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a4006:	4b09      	ldr	r3, [pc, #36]	; (80a402c <_ZN9TCPClient7connectEPKctm+0x68>)
 80a4008:	ac03      	add	r4, sp, #12
 80a400a:	9308      	str	r3, [sp, #32]
 80a400c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a400e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4010:	6823      	ldr	r3, [r4, #0]
 80a4012:	4642      	mov	r2, r8
 80a4014:	702b      	strb	r3, [r5, #0]
 80a4016:	4630      	mov	r0, r6
 80a4018:	463b      	mov	r3, r7
 80a401a:	a908      	add	r1, sp, #32
 80a401c:	47c8      	blx	r9
}
 80a401e:	b00f      	add	sp, #60	; 0x3c
 80a4020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a4024:	4620      	mov	r0, r4
 80a4026:	e7fa      	b.n	80a401e <_ZN9TCPClient7connectEPKctm+0x5a>
 80a4028:	20000498 	.word	0x20000498
 80a402c:	080a8bf0 	.word	0x080a8bf0

080a4030 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a4030:	b510      	push	{r4, lr}
 80a4032:	4604      	mov	r4, r0
{
	free(buffer);
 80a4034:	6800      	ldr	r0, [r0, #0]
 80a4036:	f7ff fc71 	bl	80a391c <free>
}
 80a403a:	4620      	mov	r0, r4
 80a403c:	bd10      	pop	{r4, pc}

080a403e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a403e:	b510      	push	{r4, lr}
 80a4040:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a4042:	6800      	ldr	r0, [r0, #0]
 80a4044:	b108      	cbz	r0, 80a404a <_ZN6String10invalidateEv+0xc>
 80a4046:	f7ff fc69 	bl	80a391c <free>
	buffer = NULL;
 80a404a:	2300      	movs	r3, #0
	capacity = len = 0;
 80a404c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a4050:	6023      	str	r3, [r4, #0]
}
 80a4052:	bd10      	pop	{r4, pc}

080a4054 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a4054:	b538      	push	{r3, r4, r5, lr}
 80a4056:	4604      	mov	r4, r0
 80a4058:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a405a:	6800      	ldr	r0, [r0, #0]
 80a405c:	3101      	adds	r1, #1
 80a405e:	f7ff fc65 	bl	80a392c <realloc>
	if (newbuffer) {
 80a4062:	b110      	cbz	r0, 80a406a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a4064:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a4068:	2001      	movs	r0, #1
	}
	return 0;
}
 80a406a:	bd38      	pop	{r3, r4, r5, pc}

080a406c <_ZN6String7reserveEj>:
{
 80a406c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a406e:	6803      	ldr	r3, [r0, #0]
{
 80a4070:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a4072:	b123      	cbz	r3, 80a407e <_ZN6String7reserveEj+0x12>
 80a4074:	6843      	ldr	r3, [r0, #4]
 80a4076:	428b      	cmp	r3, r1
 80a4078:	d301      	bcc.n	80a407e <_ZN6String7reserveEj+0x12>
 80a407a:	2001      	movs	r0, #1
}
 80a407c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a407e:	4620      	mov	r0, r4
 80a4080:	f7ff ffe8 	bl	80a4054 <_ZN6String12changeBufferEj>
 80a4084:	2800      	cmp	r0, #0
 80a4086:	d0f9      	beq.n	80a407c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a4088:	68a3      	ldr	r3, [r4, #8]
 80a408a:	2b00      	cmp	r3, #0
 80a408c:	d1f5      	bne.n	80a407a <_ZN6String7reserveEj+0xe>
 80a408e:	6822      	ldr	r2, [r4, #0]
 80a4090:	7013      	strb	r3, [r2, #0]
 80a4092:	e7f2      	b.n	80a407a <_ZN6String7reserveEj+0xe>

080a4094 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a4094:	b570      	push	{r4, r5, r6, lr}
 80a4096:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a4098:	4611      	mov	r1, r2
{
 80a409a:	4604      	mov	r4, r0
 80a409c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a409e:	f7ff ffe5 	bl	80a406c <_ZN6String7reserveEj>
 80a40a2:	b920      	cbnz	r0, 80a40ae <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a40a4:	4620      	mov	r0, r4
 80a40a6:	f7ff ffca 	bl	80a403e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a40aa:	4620      	mov	r0, r4
 80a40ac:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a40ae:	462a      	mov	r2, r5
 80a40b0:	4631      	mov	r1, r6
 80a40b2:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a40b4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a40b6:	f002 fccb 	bl	80a6a50 <memcpy>
	buffer[len] = 0;
 80a40ba:	2100      	movs	r1, #0
 80a40bc:	6822      	ldr	r2, [r4, #0]
 80a40be:	68a3      	ldr	r3, [r4, #8]
 80a40c0:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a40c2:	e7f2      	b.n	80a40aa <_ZN6String4copyEPKcj+0x16>

080a40c4 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a40c4:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a40c6:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a40c8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a40ca:	460d      	mov	r5, r1
	capacity = 0;
 80a40cc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a40d0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a40d2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a40d4:	b139      	cbz	r1, 80a40e6 <_ZN6StringC1EPKc+0x22>
 80a40d6:	4608      	mov	r0, r1
 80a40d8:	f002 fd21 	bl	80a6b1e <strlen>
 80a40dc:	4629      	mov	r1, r5
 80a40de:	4602      	mov	r2, r0
 80a40e0:	4620      	mov	r0, r4
 80a40e2:	f7ff ffd7 	bl	80a4094 <_ZN6String4copyEPKcj>
}
 80a40e6:	4620      	mov	r0, r4
 80a40e8:	bd38      	pop	{r3, r4, r5, pc}

080a40ea <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a40ea:	b538      	push	{r3, r4, r5, lr}
 80a40ec:	4605      	mov	r5, r0
	if (buffer) {
 80a40ee:	6800      	ldr	r0, [r0, #0]
{
 80a40f0:	460c      	mov	r4, r1
	if (buffer) {
 80a40f2:	b168      	cbz	r0, 80a4110 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a40f4:	686a      	ldr	r2, [r5, #4]
 80a40f6:	688b      	ldr	r3, [r1, #8]
 80a40f8:	429a      	cmp	r2, r3
 80a40fa:	d307      	bcc.n	80a410c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a40fc:	6809      	ldr	r1, [r1, #0]
 80a40fe:	f002 fceb 	bl	80a6ad8 <strcpy>
			len = rhs.len;
 80a4102:	68a3      	ldr	r3, [r4, #8]
 80a4104:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a4106:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a4108:	60a3      	str	r3, [r4, #8]
}
 80a410a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a410c:	f7ff fc06 	bl	80a391c <free>
	buffer = rhs.buffer;
 80a4110:	6823      	ldr	r3, [r4, #0]
 80a4112:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a4114:	6863      	ldr	r3, [r4, #4]
 80a4116:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a4118:	68a3      	ldr	r3, [r4, #8]
 80a411a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a411c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a411e:	e9c4 3300 	strd	r3, r3, [r4]
 80a4122:	e7f1      	b.n	80a4108 <_ZN6String4moveERS_+0x1e>

080a4124 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a4124:	4288      	cmp	r0, r1
{
 80a4126:	b510      	push	{r4, lr}
 80a4128:	460b      	mov	r3, r1
 80a412a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a412c:	d004      	beq.n	80a4138 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a412e:	6809      	ldr	r1, [r1, #0]
 80a4130:	b121      	cbz	r1, 80a413c <_ZN6StringaSERKS_+0x18>
 80a4132:	689a      	ldr	r2, [r3, #8]
 80a4134:	f7ff ffae 	bl	80a4094 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a4138:	4620      	mov	r0, r4
 80a413a:	bd10      	pop	{r4, pc}
	else invalidate();
 80a413c:	f7ff ff7f 	bl	80a403e <_ZN6String10invalidateEv>
 80a4140:	e7fa      	b.n	80a4138 <_ZN6StringaSERKS_+0x14>

080a4142 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a4142:	2300      	movs	r3, #0
String::String(const String &value)
 80a4144:	b510      	push	{r4, lr}
 80a4146:	4604      	mov	r4, r0
	capacity = 0;
 80a4148:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a414c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a414e:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a4150:	f7ff ffe8 	bl	80a4124 <_ZN6StringaSERKS_>
}
 80a4154:	4620      	mov	r0, r4
 80a4156:	bd10      	pop	{r4, pc}

080a4158 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a4158:	4288      	cmp	r0, r1
{
 80a415a:	b510      	push	{r4, lr}
 80a415c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a415e:	d001      	beq.n	80a4164 <_ZN6StringaSEOS_+0xc>
 80a4160:	f7ff ffc3 	bl	80a40ea <_ZN6String4moveERS_>
	return *this;
}
 80a4164:	4620      	mov	r0, r4
 80a4166:	bd10      	pop	{r4, pc}

080a4168 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a4168:	b570      	push	{r4, r5, r6, lr}
 80a416a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a416c:	460e      	mov	r6, r1
 80a416e:	b909      	cbnz	r1, 80a4174 <_ZN6String6concatEPKcj+0xc>
 80a4170:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a4172:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a4174:	b16a      	cbz	r2, 80a4192 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a4176:	6884      	ldr	r4, [r0, #8]
 80a4178:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a417a:	4621      	mov	r1, r4
 80a417c:	f7ff ff76 	bl	80a406c <_ZN6String7reserveEj>
 80a4180:	2800      	cmp	r0, #0
 80a4182:	d0f5      	beq.n	80a4170 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a4184:	6828      	ldr	r0, [r5, #0]
 80a4186:	68ab      	ldr	r3, [r5, #8]
 80a4188:	4631      	mov	r1, r6
 80a418a:	4418      	add	r0, r3
 80a418c:	f002 fca4 	bl	80a6ad8 <strcpy>
	len = newlen;
 80a4190:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a4192:	2001      	movs	r0, #1
 80a4194:	e7ed      	b.n	80a4172 <_ZN6String6concatEPKcj+0xa>

080a4196 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a4196:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4198:	688a      	ldr	r2, [r1, #8]
 80a419a:	6809      	ldr	r1, [r1, #0]
{
 80a419c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a419e:	f7ff ffe3 	bl	80a4168 <_ZN6String6concatEPKcj>
 80a41a2:	b910      	cbnz	r0, 80a41aa <_ZplRK15StringSumHelperRK6String+0x14>
 80a41a4:	4620      	mov	r0, r4
 80a41a6:	f7ff ff4a 	bl	80a403e <_ZN6String10invalidateEv>
	return a;
}
 80a41aa:	4620      	mov	r0, r4
 80a41ac:	bd10      	pop	{r4, pc}

080a41ae <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 80a41ae:	4613      	mov	r3, r2
 80a41b0:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a41b2:	688a      	ldr	r2, [r1, #8]
 80a41b4:	6884      	ldr	r4, [r0, #8]
 80a41b6:	1aa4      	subs	r4, r4, r2
 80a41b8:	429c      	cmp	r4, r3
 80a41ba:	d30a      	bcc.n	80a41d2 <_ZNK6String10startsWithERKS_j+0x24>
 80a41bc:	6800      	ldr	r0, [r0, #0]
 80a41be:	b138      	cbz	r0, 80a41d0 <_ZNK6String10startsWithERKS_j+0x22>
 80a41c0:	6809      	ldr	r1, [r1, #0]
 80a41c2:	b141      	cbz	r1, 80a41d6 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80a41c4:	4418      	add	r0, r3
 80a41c6:	f002 fcb2 	bl	80a6b2e <strncmp>
 80a41ca:	fab0 f080 	clz	r0, r0
 80a41ce:	0940      	lsrs	r0, r0, #5
}
 80a41d0:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a41d2:	2000      	movs	r0, #0
 80a41d4:	e7fc      	b.n	80a41d0 <_ZNK6String10startsWithERKS_j+0x22>
 80a41d6:	4608      	mov	r0, r1
 80a41d8:	e7fa      	b.n	80a41d0 <_ZNK6String10startsWithERKS_j+0x22>

080a41da <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 80a41da:	6882      	ldr	r2, [r0, #8]
 80a41dc:	688b      	ldr	r3, [r1, #8]
 80a41de:	429a      	cmp	r2, r3
 80a41e0:	d302      	bcc.n	80a41e8 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 80a41e2:	2200      	movs	r2, #0
 80a41e4:	f7ff bfe3 	b.w	80a41ae <_ZNK6String10startsWithERKS_j>
}
 80a41e8:	2000      	movs	r0, #0
 80a41ea:	4770      	bx	lr

080a41ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a41ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a41ee:	4606      	mov	r6, r0
 80a41f0:	460d      	mov	r5, r1
  size_t n = 0;
 80a41f2:	2400      	movs	r4, #0
 80a41f4:	188f      	adds	r7, r1, r2
  while (size--) {
 80a41f6:	42bd      	cmp	r5, r7
 80a41f8:	d00c      	beq.n	80a4214 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a41fa:	6833      	ldr	r3, [r6, #0]
 80a41fc:	4630      	mov	r0, r6
 80a41fe:	689b      	ldr	r3, [r3, #8]
 80a4200:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4204:	4798      	blx	r3
     if (chunk>=0)
 80a4206:	1e03      	subs	r3, r0, #0
 80a4208:	db01      	blt.n	80a420e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a420a:	441c      	add	r4, r3
  while (size--) {
 80a420c:	e7f3      	b.n	80a41f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a420e:	2c00      	cmp	r4, #0
 80a4210:	bf08      	it	eq
 80a4212:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a4214:	4620      	mov	r0, r4
 80a4216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4218 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a4218:	b570      	push	{r4, r5, r6, lr}
 80a421a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a421c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a421e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a4220:	b149      	cbz	r1, 80a4236 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a4222:	f002 fc7c 	bl	80a6b1e <strlen>
 80a4226:	682b      	ldr	r3, [r5, #0]
 80a4228:	4602      	mov	r2, r0
 80a422a:	4621      	mov	r1, r4
 80a422c:	4628      	mov	r0, r5
    }
 80a422e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a4232:	68db      	ldr	r3, [r3, #12]
 80a4234:	4718      	bx	r3
    }
 80a4236:	bd70      	pop	{r4, r5, r6, pc}

080a4238 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a4238:	b508      	push	{r3, lr}
  return write(str);
 80a423a:	f7ff ffed 	bl	80a4218 <_ZN5Print5writeEPKc>
}
 80a423e:	bd08      	pop	{r3, pc}

080a4240 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a4240:	6803      	ldr	r3, [r0, #0]
 80a4242:	689b      	ldr	r3, [r3, #8]
 80a4244:	4718      	bx	r3

080a4246 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a4246:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a4248:	210d      	movs	r1, #13
{
 80a424a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a424c:	f7ff fff8 	bl	80a4240 <_ZN5Print5printEc>
  n += print('\n');
 80a4250:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a4252:	4604      	mov	r4, r0
  n += print('\n');
 80a4254:	4628      	mov	r0, r5
 80a4256:	f7ff fff3 	bl	80a4240 <_ZN5Print5printEc>
  return n;
}
 80a425a:	4420      	add	r0, r4
 80a425c:	bd38      	pop	{r3, r4, r5, pc}

080a425e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a425e:	b538      	push	{r3, r4, r5, lr}
 80a4260:	4605      	mov	r5, r0
  return write(str);
 80a4262:	f7ff ffd9 	bl	80a4218 <_ZN5Print5writeEPKc>
 80a4266:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a4268:	4628      	mov	r0, r5
 80a426a:	f7ff ffec 	bl	80a4246 <_ZN5Print7printlnEv>
  return n;
}
 80a426e:	4420      	add	r0, r4
 80a4270:	bd38      	pop	{r3, r4, r5, pc}

080a4272 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a4272:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a4274:	2a01      	cmp	r2, #1
 80a4276:	bf98      	it	ls
 80a4278:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a427a:	b530      	push	{r4, r5, lr}
 80a427c:	b08b      	sub	sp, #44	; 0x2c
 80a427e:	460c      	mov	r4, r1
  *str = '\0';
 80a4280:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a4284:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a4286:	4625      	mov	r5, r4
 80a4288:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a428c:	fb04 5312 	mls	r3, r4, r2, r5
 80a4290:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a4292:	2b09      	cmp	r3, #9
 80a4294:	bf94      	ite	ls
 80a4296:	3330      	addls	r3, #48	; 0x30
 80a4298:	3337      	addhi	r3, #55	; 0x37
 80a429a:	b2db      	uxtb	r3, r3
  } while(n);
 80a429c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a429e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a42a2:	d9f0      	bls.n	80a4286 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a42a4:	f7ff ffb8 	bl	80a4218 <_ZN5Print5writeEPKc>
}
 80a42a8:	b00b      	add	sp, #44	; 0x2c
 80a42aa:	bd30      	pop	{r4, r5, pc}

080a42ac <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a42ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a42b0:	b086      	sub	sp, #24
 80a42b2:	af00      	add	r7, sp, #0
 80a42b4:	4605      	mov	r5, r0
 80a42b6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a42b8:	1d38      	adds	r0, r7, #4
 80a42ba:	2114      	movs	r1, #20
{
 80a42bc:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a42be:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a42c0:	f7ff fb54 	bl	80a396c <vsnprintf>

    if (n<bufsize)
 80a42c4:	2813      	cmp	r0, #19
 80a42c6:	d80e      	bhi.n	80a42e6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a42c8:	4628      	mov	r0, r5
 80a42ca:	1d39      	adds	r1, r7, #4
 80a42cc:	f7ff ffa4 	bl	80a4218 <_ZN5Print5writeEPKc>
 80a42d0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a42d2:	b11e      	cbz	r6, 80a42dc <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a42d4:	4628      	mov	r0, r5
 80a42d6:	f7ff ffb6 	bl	80a4246 <_ZN5Print7printlnEv>
 80a42da:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a42dc:	4620      	mov	r0, r4
 80a42de:	3718      	adds	r7, #24
 80a42e0:	46bd      	mov	sp, r7
 80a42e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a42e6:	f100 0308 	add.w	r3, r0, #8
 80a42ea:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a42ee:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a42f0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a42f4:	4622      	mov	r2, r4
 80a42f6:	1c41      	adds	r1, r0, #1
 80a42f8:	683b      	ldr	r3, [r7, #0]
 80a42fa:	4668      	mov	r0, sp
 80a42fc:	f7ff fb36 	bl	80a396c <vsnprintf>
  return write(str);
 80a4300:	4669      	mov	r1, sp
 80a4302:	4628      	mov	r0, r5
 80a4304:	f7ff ff88 	bl	80a4218 <_ZN5Print5writeEPKc>
 80a4308:	4604      	mov	r4, r0
 80a430a:	46c5      	mov	sp, r8
 80a430c:	e7e1      	b.n	80a42d2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a430e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80a430e:	b510      	push	{r4, lr}
 80a4310:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a4312:	f7ff f8bb 	bl	80a348c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80a4316:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80a4318:	6823      	ldr	r3, [r4, #0]
 80a431a:	4620      	mov	r0, r4
 80a431c:	695b      	ldr	r3, [r3, #20]
 80a431e:	4798      	blx	r3
    if (c >= 0) return c;
 80a4320:	2800      	cmp	r0, #0
 80a4322:	da08      	bge.n	80a4336 <_ZN6Stream9timedReadEv+0x28>
 80a4324:	f7ff f8b2 	bl	80a348c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 80a4328:	68e3      	ldr	r3, [r4, #12]
 80a432a:	1ac0      	subs	r0, r0, r3
 80a432c:	68a3      	ldr	r3, [r4, #8]
 80a432e:	4298      	cmp	r0, r3
 80a4330:	d3f2      	bcc.n	80a4318 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 80a4332:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a4336:	bd10      	pop	{r4, pc}

080a4338 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 80a4338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a433a:	4606      	mov	r6, r0
 80a433c:	460d      	mov	r5, r1
 80a433e:	4617      	mov	r7, r2
  size_t count = 0;
 80a4340:	2400      	movs	r4, #0
  while (count < length) {
 80a4342:	42bc      	cmp	r4, r7
 80a4344:	d007      	beq.n	80a4356 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
 80a4346:	4630      	mov	r0, r6
 80a4348:	f7ff ffe1 	bl	80a430e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 80a434c:	1e03      	subs	r3, r0, #0
 80a434e:	db02      	blt.n	80a4356 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
 80a4350:	552b      	strb	r3, [r5, r4]
    count++;
 80a4352:	3401      	adds	r4, #1
  while (count < length) {
 80a4354:	e7f5      	b.n	80a4342 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
 80a4356:	4620      	mov	r0, r4
 80a4358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a435a <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a435a:	2300      	movs	r3, #0
 80a435c:	6840      	ldr	r0, [r0, #4]
 80a435e:	461a      	mov	r2, r3
 80a4360:	4619      	mov	r1, r3
 80a4362:	f7ff ba5b 	b.w	80a381c <network_on>

080a4366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a4366:	680b      	ldr	r3, [r1, #0]
 80a4368:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a436a:	b113      	cbz	r3, 80a4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a436c:	685a      	ldr	r2, [r3, #4]
 80a436e:	3201      	adds	r2, #1
 80a4370:	605a      	str	r2, [r3, #4]
      }
 80a4372:	4770      	bx	lr

080a4374 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4374:	4b01      	ldr	r3, [pc, #4]	; (80a437c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a4376:	4a02      	ldr	r2, [pc, #8]	; (80a4380 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4378:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a437a:	4770      	bx	lr
 80a437c:	200003e0 	.word	0x200003e0
 80a4380:	080a8bac 	.word	0x080a8bac

080a4384 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a4384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a4388:	4a15      	ldr	r2, [pc, #84]	; (80a43e0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a438a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80a43ec <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80a438e:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a4392:	18c0      	adds	r0, r0, r3
 80a4394:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80a4398:	4a12      	ldr	r2, [pc, #72]	; (80a43e4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80a439a:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80a439c:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a43a0:	18c6      	adds	r6, r0, r3
 80a43a2:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80a43a6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a43aa:	42bb      	cmp	r3, r7
 80a43ac:	bf08      	it	eq
 80a43ae:	42b2      	cmpeq	r2, r6
 80a43b0:	d013      	beq.n	80a43da <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a43b2:	a903      	add	r1, sp, #12
 80a43b4:	4668      	mov	r0, sp
 80a43b6:	e9cd 6700 	strd	r6, r7, [sp]
 80a43ba:	f002 fa53 	bl	80a6864 <localtime_r>
	calendar_time.tm_year += 1900;
 80a43be:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a43c0:	4d09      	ldr	r5, [pc, #36]	; (80a43e8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 80a43c2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a43c6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a43c8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a43ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a43cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a43ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a43d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a43d2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a43d6:	6823      	ldr	r3, [r4, #0]
 80a43d8:	602b      	str	r3, [r5, #0]
    }
}
 80a43da:	b00c      	add	sp, #48	; 0x30
 80a43dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a43e0:	20000418 	.word	0x20000418
 80a43e4:	20000410 	.word	0x20000410
 80a43e8:	200003e8 	.word	0x200003e8
 80a43ec:	20000420 	.word	0x20000420

080a43f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a43f0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a43f2:	2000      	movs	r0, #0
 80a43f4:	f7ff fa7a 	bl	80a38ec <spark_sync_time_pending>
 80a43f8:	b128      	cbz	r0, 80a4406 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a43fa:	f7ff fa57 	bl	80a38ac <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a43fe:	f080 0001 	eor.w	r0, r0, #1
 80a4402:	b2c0      	uxtb	r0, r0
    }
 80a4404:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4406:	2001      	movs	r0, #1
 80a4408:	e7fc      	b.n	80a4404 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a440c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a440c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a440e:	f7ff ffb9 	bl	80a4384 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a4412:	4b02      	ldr	r3, [pc, #8]	; (80a441c <_ZN9TimeClass5monthEx+0x10>)
 80a4414:	6918      	ldr	r0, [r3, #16]
}
 80a4416:	3001      	adds	r0, #1
 80a4418:	bd08      	pop	{r3, pc}
 80a441a:	bf00      	nop
 80a441c:	200003e8 	.word	0x200003e8

080a4420 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a4420:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a4422:	490a      	ldr	r1, [pc, #40]	; (80a444c <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a4424:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a4426:	f002 f821 	bl	80a646c <__aeabi_fcmplt>
 80a442a:	b968      	cbnz	r0, 80a4448 <_ZN9TimeClass4zoneEf+0x28>
 80a442c:	4620      	mov	r0, r4
 80a442e:	4908      	ldr	r1, [pc, #32]	; (80a4450 <_ZN9TimeClass4zoneEf+0x30>)
 80a4430:	f002 f83a 	bl	80a64a8 <__aeabi_fcmpgt>
 80a4434:	b940      	cbnz	r0, 80a4448 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a4436:	4907      	ldr	r1, [pc, #28]	; (80a4454 <_ZN9TimeClass4zoneEf+0x34>)
 80a4438:	4620      	mov	r0, r4
 80a443a:	f001 fe79 	bl	80a6130 <__aeabi_fmul>
 80a443e:	f002 f863 	bl	80a6508 <__aeabi_f2lz>
 80a4442:	4b05      	ldr	r3, [pc, #20]	; (80a4458 <_ZN9TimeClass4zoneEf+0x38>)
 80a4444:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a4448:	bd10      	pop	{r4, pc}
 80a444a:	bf00      	nop
 80a444c:	c1400000 	.word	0xc1400000
 80a4450:	41600000 	.word	0x41600000
 80a4454:	45610000 	.word	0x45610000
 80a4458:	20000418 	.word	0x20000418

080a445c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a445c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a445e:	2000      	movs	r0, #0
 80a4460:	f7ff f834 	bl	80a34cc <hal_rtc_time_is_valid>
    if (rtcstate)
 80a4464:	4604      	mov	r4, r0
 80a4466:	b9a0      	cbnz	r0, 80a4492 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a4468:	f7ff f96a 	bl	80a3740 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a446c:	2801      	cmp	r0, #1
 80a446e:	d110      	bne.n	80a4492 <_ZN9TimeClass7isValidEv+0x36>
 80a4470:	4620      	mov	r0, r4
 80a4472:	f7ff f98d 	bl	80a3790 <system_thread_get_state>
 80a4476:	b960      	cbnz	r0, 80a4492 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a4478:	f7ff ffba 	bl	80a43f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a447c:	b910      	cbnz	r0, 80a4484 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a447e:	f7ff fa0d 	bl	80a389c <spark_process>
        while (_while() && !_condition()) {
 80a4482:	e7f9      	b.n	80a4478 <_ZN9TimeClass7isValidEv+0x1c>
 80a4484:	f7ff ffb4 	bl	80a43f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a4488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a448c:	2000      	movs	r0, #0
 80a448e:	f7ff b81d 	b.w	80a34cc <hal_rtc_time_is_valid>
}
 80a4492:	4620      	mov	r0, r4
 80a4494:	bd10      	pop	{r4, pc}

080a4496 <_ZN9TimeClass3nowEv>:
{
 80a4496:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a4498:	f7ff ffe0 	bl	80a445c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a449c:	2210      	movs	r2, #16
 80a449e:	2100      	movs	r1, #0
 80a44a0:	4668      	mov	r0, sp
 80a44a2:	f002 fae3 	bl	80a6a6c <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a44a6:	2100      	movs	r1, #0
 80a44a8:	4668      	mov	r0, sp
 80a44aa:	f7ff f817 	bl	80a34dc <hal_rtc_get_time>
}
 80a44ae:	9800      	ldr	r0, [sp, #0]
 80a44b0:	b005      	add	sp, #20
 80a44b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a44b8 <_ZN9TimeClass4hourEv>:
{
 80a44b8:	b508      	push	{r3, lr}
	return hour(now());
 80a44ba:	f7ff ffec 	bl	80a4496 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a44be:	17c1      	asrs	r1, r0, #31
 80a44c0:	f7ff ff60 	bl	80a4384 <_ZL22Refresh_UnixTime_Cachex>
}
 80a44c4:	4b01      	ldr	r3, [pc, #4]	; (80a44cc <_ZN9TimeClass4hourEv+0x14>)
 80a44c6:	6898      	ldr	r0, [r3, #8]
 80a44c8:	bd08      	pop	{r3, pc}
 80a44ca:	bf00      	nop
 80a44cc:	200003e8 	.word	0x200003e8

080a44d0 <_ZN9TimeClass6minuteEv>:
{
 80a44d0:	b508      	push	{r3, lr}
	return minute(now());
 80a44d2:	f7ff ffe0 	bl	80a4496 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a44d6:	17c1      	asrs	r1, r0, #31
 80a44d8:	f7ff ff54 	bl	80a4384 <_ZL22Refresh_UnixTime_Cachex>
}
 80a44dc:	4b01      	ldr	r3, [pc, #4]	; (80a44e4 <_ZN9TimeClass6minuteEv+0x14>)
 80a44de:	6858      	ldr	r0, [r3, #4]
 80a44e0:	bd08      	pop	{r3, pc}
 80a44e2:	bf00      	nop
 80a44e4:	200003e8 	.word	0x200003e8

080a44e8 <_ZN9TimeClass6secondEv>:
{
 80a44e8:	b508      	push	{r3, lr}
	return second(now());
 80a44ea:	f7ff ffd4 	bl	80a4496 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a44ee:	17c1      	asrs	r1, r0, #31
 80a44f0:	f7ff ff48 	bl	80a4384 <_ZL22Refresh_UnixTime_Cachex>
}
 80a44f4:	4b01      	ldr	r3, [pc, #4]	; (80a44fc <_ZN9TimeClass6secondEv+0x14>)
 80a44f6:	6818      	ldr	r0, [r3, #0]
 80a44f8:	bd08      	pop	{r3, pc}
 80a44fa:	bf00      	nop
 80a44fc:	200003e8 	.word	0x200003e8

080a4500 <_ZN9TimeClass3dayEv>:
{
 80a4500:	b508      	push	{r3, lr}
	return day(now());
 80a4502:	f7ff ffc8 	bl	80a4496 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a4506:	17c1      	asrs	r1, r0, #31
 80a4508:	f7ff ff3c 	bl	80a4384 <_ZL22Refresh_UnixTime_Cachex>
}
 80a450c:	4b01      	ldr	r3, [pc, #4]	; (80a4514 <_ZN9TimeClass3dayEv+0x14>)
 80a450e:	68d8      	ldr	r0, [r3, #12]
 80a4510:	bd08      	pop	{r3, pc}
 80a4512:	bf00      	nop
 80a4514:	200003e8 	.word	0x200003e8

080a4518 <_ZN9TimeClass5monthEv>:
{
 80a4518:	b508      	push	{r3, lr}
	return month(now());
 80a451a:	f7ff ffbc 	bl	80a4496 <_ZN9TimeClass3nowEv>
}
 80a451e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a4522:	17c1      	asrs	r1, r0, #31
 80a4524:	f7ff bf72 	b.w	80a440c <_ZN9TimeClass5monthEx>

080a4528 <_ZN9TimeClass4yearEv>:
{
 80a4528:	b508      	push	{r3, lr}
	return year(now());
 80a452a:	f7ff ffb4 	bl	80a4496 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a452e:	17c1      	asrs	r1, r0, #31
 80a4530:	f7ff ff28 	bl	80a4384 <_ZL22Refresh_UnixTime_Cachex>
}
 80a4534:	4b01      	ldr	r3, [pc, #4]	; (80a453c <_ZN9TimeClass4yearEv+0x14>)
 80a4536:	6958      	ldr	r0, [r3, #20]
 80a4538:	bd08      	pop	{r3, pc}
 80a453a:	bf00      	nop
 80a453c:	200003e8 	.word	0x200003e8

080a4540 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a4540:	4b02      	ldr	r3, [pc, #8]	; (80a454c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a4542:	681a      	ldr	r2, [r3, #0]
 80a4544:	4b02      	ldr	r3, [pc, #8]	; (80a4550 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a4546:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a4548:	4770      	bx	lr
 80a454a:	bf00      	nop
 80a454c:	20000058 	.word	0x20000058
 80a4550:	200003e4 	.word	0x200003e4

080a4554 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a4554:	2100      	movs	r1, #0
 80a4556:	f7ff b903 	b.w	80a3760 <system_delay_ms>

080a455a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a455a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a455c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a455e:	4604      	mov	r4, r0
      if (_M_manager)
 80a4560:	b113      	cbz	r3, 80a4568 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4562:	2203      	movs	r2, #3
 80a4564:	4601      	mov	r1, r0
 80a4566:	4798      	blx	r3
    }
 80a4568:	4620      	mov	r0, r4
 80a456a:	bd10      	pop	{r4, pc}

080a456c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a456c:	b510      	push	{r4, lr}
 80a456e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4570:	f7ff fff3 	bl	80a455a <_ZNSt14_Function_baseD1Ev>
 80a4574:	4620      	mov	r0, r4
 80a4576:	bd10      	pop	{r4, pc}

080a4578 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a4578:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a457a:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a457c:	460b      	mov	r3, r1
 80a457e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4580:	c803      	ldmia	r0, {r0, r1}
 80a4582:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a4586:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a458a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a458e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a4592:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a4596:	b002      	add	sp, #8
 80a4598:	bd10      	pop	{r4, pc}
	...

080a459c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a459c:	2300      	movs	r3, #0
 80a459e:	4803      	ldr	r0, [pc, #12]	; (80a45ac <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a45a0:	4a03      	ldr	r2, [pc, #12]	; (80a45b0 <_GLOBAL__sub_I_RGB+0x14>)
 80a45a2:	4904      	ldr	r1, [pc, #16]	; (80a45b4 <_GLOBAL__sub_I_RGB+0x18>)
 80a45a4:	6083      	str	r3, [r0, #8]
 80a45a6:	f000 bf57 	b.w	80a5458 <__aeabi_atexit>
 80a45aa:	bf00      	nop
 80a45ac:	20000428 	.word	0x20000428
 80a45b0:	20000128 	.word	0x20000128
 80a45b4:	080a456d 	.word	0x080a456d

080a45b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a45b8:	4b01      	ldr	r3, [pc, #4]	; (80a45c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a45ba:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a45bc:	4770      	bx	lr
 80a45be:	bf00      	nop
 80a45c0:	2000005c 	.word	0x2000005c

080a45c4 <serialEventRun>:
{
 80a45c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a45c6:	4b13      	ldr	r3, [pc, #76]	; (80a4614 <serialEventRun+0x50>)
 80a45c8:	b143      	cbz	r3, 80a45dc <serialEventRun+0x18>
 80a45ca:	f000 fbf7 	bl	80a4dbc <_Z16_fetch_usbserialv>
 80a45ce:	6803      	ldr	r3, [r0, #0]
 80a45d0:	691b      	ldr	r3, [r3, #16]
 80a45d2:	4798      	blx	r3
 80a45d4:	2800      	cmp	r0, #0
 80a45d6:	dd01      	ble.n	80a45dc <serialEventRun+0x18>
        serialEvent();
 80a45d8:	f7fb ff06 	bl	80a03e8 <_Z11serialEventv>
    if (serialEvent1 && Serial1.available()>0)
 80a45dc:	4b0e      	ldr	r3, [pc, #56]	; (80a4618 <serialEventRun+0x54>)
 80a45de:	b143      	cbz	r3, 80a45f2 <serialEventRun+0x2e>
 80a45e0:	f000 fc9a 	bl	80a4f18 <_Z22__fetch_global_Serial1v>
 80a45e4:	6803      	ldr	r3, [r0, #0]
 80a45e6:	691b      	ldr	r3, [r3, #16]
 80a45e8:	4798      	blx	r3
 80a45ea:	2800      	cmp	r0, #0
 80a45ec:	dd01      	ble.n	80a45f2 <serialEventRun+0x2e>
        serialEvent1();
 80a45ee:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a45f2:	4b0a      	ldr	r3, [pc, #40]	; (80a461c <serialEventRun+0x58>)
 80a45f4:	b10b      	cbz	r3, 80a45fa <serialEventRun+0x36>
 80a45f6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a45fa:	4b09      	ldr	r3, [pc, #36]	; (80a4620 <serialEventRun+0x5c>)
 80a45fc:	b143      	cbz	r3, 80a4610 <serialEventRun+0x4c>
 80a45fe:	f000 fc0d 	bl	80a4e1c <_Z17_fetch_usbserial1v>
 80a4602:	6803      	ldr	r3, [r0, #0]
 80a4604:	691b      	ldr	r3, [r3, #16]
 80a4606:	4798      	blx	r3
 80a4608:	2800      	cmp	r0, #0
 80a460a:	dd01      	ble.n	80a4610 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a460c:	f3af 8000 	nop.w
}
 80a4610:	bd08      	pop	{r3, pc}
 80a4612:	bf00      	nop
 80a4614:	080a03e9 	.word	0x080a03e9
	...

080a4624 <_post_loop>:
{
 80a4624:	b508      	push	{r3, lr}
	serialEventRun();
 80a4626:	f7ff ffcd 	bl	80a45c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a462a:	f7fe ff2f 	bl	80a348c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a462e:	4b01      	ldr	r3, [pc, #4]	; (80a4634 <_post_loop+0x10>)
 80a4630:	6018      	str	r0, [r3, #0]
}
 80a4632:	bd08      	pop	{r3, pc}
 80a4634:	200004b0 	.word	0x200004b0

080a4638 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4638:	4802      	ldr	r0, [pc, #8]	; (80a4644 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a463a:	4a03      	ldr	r2, [pc, #12]	; (80a4648 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a463c:	4903      	ldr	r1, [pc, #12]	; (80a464c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a463e:	1a12      	subs	r2, r2, r0
 80a4640:	f002 ba06 	b.w	80a6a50 <memcpy>
 80a4644:	40024000 	.word	0x40024000
 80a4648:	40024004 	.word	0x40024004
 80a464c:	080a8fc8 	.word	0x080a8fc8

080a4650 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4650:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a4652:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4654:	461a      	mov	r2, r3
 80a4656:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a465a:	9300      	str	r3, [sp, #0]
 80a465c:	f7ff f8aa 	bl	80a37b4 <system_ctrl_set_result>
}
 80a4660:	b003      	add	sp, #12
 80a4662:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4668 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a4668:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a466a:	8843      	ldrh	r3, [r0, #2]
 80a466c:	2b0a      	cmp	r3, #10
 80a466e:	d008      	beq.n	80a4682 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a4670:	2b50      	cmp	r3, #80	; 0x50
 80a4672:	d10b      	bne.n	80a468c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a4674:	4b09      	ldr	r3, [pc, #36]	; (80a469c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4676:	681b      	ldr	r3, [r3, #0]
 80a4678:	b14b      	cbz	r3, 80a468e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a467a:	b003      	add	sp, #12
 80a467c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a4680:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a4682:	f7ff ffe5 	bl	80a4650 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a4686:	b003      	add	sp, #12
 80a4688:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a468c:	2300      	movs	r3, #0
 80a468e:	461a      	mov	r2, r3
 80a4690:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4694:	9300      	str	r3, [sp, #0]
 80a4696:	f7ff f88d 	bl	80a37b4 <system_ctrl_set_result>
}
 80a469a:	e7f4      	b.n	80a4686 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a469c:	2000043c 	.word	0x2000043c

080a46a0 <module_user_init_hook>:
{
 80a46a0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a46a2:	4c12      	ldr	r4, [pc, #72]	; (80a46ec <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a46a4:	2100      	movs	r1, #0
 80a46a6:	4812      	ldr	r0, [pc, #72]	; (80a46f0 <module_user_init_hook+0x50>)
 80a46a8:	f7ff f978 	bl	80a399c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a46ac:	4d11      	ldr	r5, [pc, #68]	; (80a46f4 <module_user_init_hook+0x54>)
 80a46ae:	6823      	ldr	r3, [r4, #0]
 80a46b0:	42ab      	cmp	r3, r5
 80a46b2:	bf0c      	ite	eq
 80a46b4:	2201      	moveq	r2, #1
 80a46b6:	2200      	movne	r2, #0
 80a46b8:	4b0f      	ldr	r3, [pc, #60]	; (80a46f8 <module_user_init_hook+0x58>)
 80a46ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a46bc:	d002      	beq.n	80a46c4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a46be:	f7ff ffbb 	bl	80a4638 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a46c2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a46c4:	f7fe fed2 	bl	80a346c <HAL_RNG_GetRandomNumber>
 80a46c8:	4604      	mov	r4, r0
    srand(seed);
 80a46ca:	f002 f9d7 	bl	80a6a7c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a46ce:	4b0b      	ldr	r3, [pc, #44]	; (80a46fc <module_user_init_hook+0x5c>)
 80a46d0:	b113      	cbz	r3, 80a46d8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a46d2:	4620      	mov	r0, r4
 80a46d4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a46d8:	2100      	movs	r1, #0
 80a46da:	4808      	ldr	r0, [pc, #32]	; (80a46fc <module_user_init_hook+0x5c>)
 80a46dc:	f7ff f90e 	bl	80a38fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a46e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a46e4:	2100      	movs	r1, #0
 80a46e6:	4806      	ldr	r0, [pc, #24]	; (80a4700 <module_user_init_hook+0x60>)
 80a46e8:	f7ff b85a 	b.w	80a37a0 <system_ctrl_set_app_request_handler>
 80a46ec:	40024000 	.word	0x40024000
 80a46f0:	080a45b9 	.word	0x080a45b9
 80a46f4:	9a271c1e 	.word	0x9a271c1e
 80a46f8:	20000438 	.word	0x20000438
 80a46fc:	00000000 	.word	0x00000000
 80a4700:	080a4669 	.word	0x080a4669

080a4704 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a4704:	4770      	bx	lr

080a4706 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a4706:	2000      	movs	r0, #0
 80a4708:	4770      	bx	lr

080a470a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a470a:	b510      	push	{r4, lr}
 80a470c:	4604      	mov	r4, r0
 80a470e:	2110      	movs	r1, #16
 80a4710:	f000 fea7 	bl	80a5462 <_ZdlPvj>
 80a4714:	4620      	mov	r0, r4
 80a4716:	bd10      	pop	{r4, pc}

080a4718 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a4718:	b508      	push	{r3, lr}
      { delete this; }
 80a471a:	f7ff fff6 	bl	80a470a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a471e:	bd08      	pop	{r3, pc}

080a4720 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a4720:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a4722:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a4724:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a4728:	6002      	str	r2, [r0, #0]
 80a472a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a472c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a472e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a4730:	680c      	ldr	r4, [r1, #0]
 80a4732:	8085      	strh	r5, [r0, #4]
 80a4734:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4736:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a4738:	bd30      	pop	{r4, r5, pc}

080a473a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a473a:	b510      	push	{r4, lr}
 80a473c:	4604      	mov	r4, r0
    free((void*)msg_);
 80a473e:	6800      	ldr	r0, [r0, #0]
 80a4740:	f7ff f8ec 	bl	80a391c <free>
}
 80a4744:	4620      	mov	r0, r4
 80a4746:	bd10      	pop	{r4, pc}

080a4748 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a4748:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a474a:	68c4      	ldr	r4, [r0, #12]
 80a474c:	b1f4      	cbz	r4, 80a478c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a474e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a4750:	2b02      	cmp	r3, #2
 80a4752:	d103      	bne.n	80a475c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a4754:	f104 000c 	add.w	r0, r4, #12
 80a4758:	f7ff ffef 	bl	80a473a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a475c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a475e:	b135      	cbz	r5, 80a476e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a4760:	4628      	mov	r0, r5
 80a4762:	f7ff fefa 	bl	80a455a <_ZNSt14_Function_baseD1Ev>
 80a4766:	2110      	movs	r1, #16
 80a4768:	4628      	mov	r0, r5
 80a476a:	f000 fe7a 	bl	80a5462 <_ZdlPvj>
 80a476e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a4770:	b135      	cbz	r5, 80a4780 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a4772:	4628      	mov	r0, r5
 80a4774:	f7ff fef1 	bl	80a455a <_ZNSt14_Function_baseD1Ev>
 80a4778:	2110      	movs	r1, #16
 80a477a:	4628      	mov	r0, r5
 80a477c:	f000 fe71 	bl	80a5462 <_ZdlPvj>
 80a4780:	4620      	mov	r0, r4
 80a4782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4786:	2114      	movs	r1, #20
 80a4788:	f000 be6b 	b.w	80a5462 <_ZdlPvj>
 80a478c:	bd38      	pop	{r3, r4, r5, pc}

080a478e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a478e:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4790:	460e      	mov	r6, r1
 80a4792:	4604      	mov	r4, r0
 80a4794:	f856 3b04 	ldr.w	r3, [r6], #4
 80a4798:	460d      	mov	r5, r1
 80a479a:	a801      	add	r0, sp, #4
 80a479c:	4631      	mov	r1, r6
 80a479e:	9300      	str	r3, [sp, #0]
 80a47a0:	f7ff fde1 	bl	80a4366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a47a4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a47a6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a47a8:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a47aa:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a47ac:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a47ae:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a47b0:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 80a47b2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a47b4:	f7fb fc8b 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a47b8:	4630      	mov	r0, r6
 80a47ba:	f7fb fc88 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a47be:	4628      	mov	r0, r5
 80a47c0:	2108      	movs	r1, #8
 80a47c2:	f000 fe4e 	bl	80a5462 <_ZdlPvj>
        return p;
    }
 80a47c6:	4620      	mov	r0, r4
 80a47c8:	b002      	add	sp, #8
 80a47ca:	bd70      	pop	{r4, r5, r6, pc}

080a47cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a47cc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a47ce:	b510      	push	{r4, lr}
      if (_M_empty())
 80a47d0:	b90a      	cbnz	r2, 80a47d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a47d2:	f000 fe4a 	bl	80a546a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a47d6:	68c3      	ldr	r3, [r0, #12]
    }
 80a47d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a47dc:	4718      	bx	r3

080a47de <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a47de:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a47e0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a47e2:	f100 0110 	add.w	r1, r0, #16
 80a47e6:	f7ff fff1 	bl	80a47cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a47ea:	bd08      	pop	{r3, pc}

080a47ec <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a47ec:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a47ee:	b510      	push	{r4, lr}
      if (_M_empty())
 80a47f0:	b90a      	cbnz	r2, 80a47f6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a47f2:	f000 fe3a 	bl	80a546a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a47f6:	68c3      	ldr	r3, [r0, #12]
    }
 80a47f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a47fc:	4718      	bx	r3

080a47fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a47fe:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a4800:	6800      	ldr	r0, [r0, #0]
 80a4802:	f100 0110 	add.w	r1, r0, #16
 80a4806:	f7ff fff1 	bl	80a47ec <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a480a:	bd08      	pop	{r3, pc}

080a480c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a480c:	b538      	push	{r3, r4, r5, lr}
 80a480e:	2300      	movs	r3, #0
 80a4810:	4604      	mov	r4, r0
 80a4812:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4814:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4816:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4818:	f7fb fc3d 	bl	80a0096 <_Znwj>
 80a481c:	b128      	cbz	r0, 80a482a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a481e:	2301      	movs	r3, #1
 80a4820:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a4824:	4b02      	ldr	r3, [pc, #8]	; (80a4830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a4826:	60c5      	str	r5, [r0, #12]
 80a4828:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a482a:	6020      	str	r0, [r4, #0]
	}
 80a482c:	4620      	mov	r0, r4
 80a482e:	bd38      	pop	{r3, r4, r5, pc}
 80a4830:	080a8bd4 	.word	0x080a8bd4

080a4834 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a4834:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a4836:	2300      	movs	r3, #0
 80a4838:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a483a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a483c:	4604      	mov	r4, r0
 80a483e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a4840:	b12b      	cbz	r3, 80a484e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4842:	2202      	movs	r2, #2
 80a4844:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4846:	68eb      	ldr	r3, [r5, #12]
 80a4848:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a484a:	68ab      	ldr	r3, [r5, #8]
 80a484c:	60a3      	str	r3, [r4, #8]
    }
 80a484e:	4620      	mov	r0, r4
 80a4850:	bd38      	pop	{r3, r4, r5, pc}
	...

080a4854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a4854:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4856:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a4858:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a485a:	4668      	mov	r0, sp
 80a485c:	f7ff ff60 	bl	80a4720 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a4860:	f04f 0302 	mov.w	r3, #2
 80a4864:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a4868:	2a00      	cmp	r2, #0
 80a486a:	d103      	bne.n	80a4874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a486c:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a4870:	2900      	cmp	r1, #0
 80a4872:	d1f7      	bne.n	80a4864 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a4874:	d125      	bne.n	80a48c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a4876:	f104 050c 	add.w	r5, r4, #12
 80a487a:	4669      	mov	r1, sp
 80a487c:	4628      	mov	r0, r5
 80a487e:	f7ff ff4f 	bl	80a4720 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4882:	2301      	movs	r3, #1
 80a4884:	f3bf 8f5b 	dmb	ish
 80a4888:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a488a:	2000      	movs	r0, #0
 80a488c:	f3bf 8f5b 	dmb	ish
 80a4890:	f104 0308 	add.w	r3, r4, #8
 80a4894:	e853 6f00 	ldrex	r6, [r3]
 80a4898:	e843 0200 	strex	r2, r0, [r3]
 80a489c:	2a00      	cmp	r2, #0
 80a489e:	d1f9      	bne.n	80a4894 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a48a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a48a4:	b16e      	cbz	r6, 80a48c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a48a6:	f7fe ff63 	bl	80a3770 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a48aa:	b178      	cbz	r0, 80a48cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a48ac:	4629      	mov	r1, r5
 80a48ae:	4630      	mov	r0, r6
 80a48b0:	f7ff ff8c 	bl	80a47cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a48b4:	4630      	mov	r0, r6
 80a48b6:	f7ff fe50 	bl	80a455a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a48ba:	2110      	movs	r1, #16
 80a48bc:	4630      	mov	r0, r6
 80a48be:	f000 fdd0 	bl	80a5462 <_ZdlPvj>
        p_->setError(std::move(error));
 80a48c2:	4668      	mov	r0, sp
 80a48c4:	f7ff ff39 	bl	80a473a <_ZN8particle5ErrorD1Ev>
    }
 80a48c8:	b009      	add	sp, #36	; 0x24
 80a48ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a48cc:	4631      	mov	r1, r6
 80a48ce:	a802      	add	r0, sp, #8
 80a48d0:	f7ff ffb0 	bl	80a4834 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a48d4:	68e0      	ldr	r0, [r4, #12]
 80a48d6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a48da:	b108      	cbz	r0, 80a48e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a48dc:	f002 f904 	bl	80a6ae8 <strdup>
        type_(type) {
 80a48e0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a48e2:	2010      	movs	r0, #16
 80a48e4:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a48e8:	f7fb fbd5 	bl	80a0096 <_Znwj>
 80a48ec:	4605      	mov	r5, r0
 80a48ee:	b1e8      	cbz	r0, 80a492c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a48f0:	2700      	movs	r7, #0
 80a48f2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a48f4:	2018      	movs	r0, #24
 80a48f6:	f7fb fbce 	bl	80a0096 <_Znwj>
 80a48fa:	4604      	mov	r4, r0
 80a48fc:	b188      	cbz	r0, 80a4922 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a48fe:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a4900:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4902:	a802      	add	r0, sp, #8
 80a4904:	f7ff fe38 	bl	80a4578 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4908:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a490a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a490c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a490e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4910:	9204      	str	r2, [sp, #16]
 80a4912:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4914:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a4916:	60e3      	str	r3, [r4, #12]
 80a4918:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a491c:	9205      	str	r2, [sp, #20]
 80a491e:	f7ff feff 	bl	80a4720 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a4922:	4b08      	ldr	r3, [pc, #32]	; (80a4944 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4924:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4926:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a4928:	4b07      	ldr	r3, [pc, #28]	; (80a4948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a492a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a492c:	a806      	add	r0, sp, #24
 80a492e:	f7ff ff04 	bl	80a473a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a4932:	a802      	add	r0, sp, #8
 80a4934:	f7ff fe11 	bl	80a455a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4938:	2200      	movs	r2, #0
 80a493a:	4629      	mov	r1, r5
 80a493c:	4803      	ldr	r0, [pc, #12]	; (80a494c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a493e:	f7fe ff1f 	bl	80a3780 <application_thread_invoke>
 80a4942:	e7b7      	b.n	80a48b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a4944:	080a47df 	.word	0x080a47df
 80a4948:	080a4a75 	.word	0x080a4a75
 80a494c:	080a4f9d 	.word	0x080a4f9d

080a4950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a4950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4954:	b08a      	sub	sp, #40	; 0x28
 80a4956:	4605      	mov	r5, r0
 80a4958:	460c      	mov	r4, r1
 80a495a:	4617      	mov	r7, r2
 80a495c:	4698      	mov	r8, r3
 80a495e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4962:	f7fe ffa3 	bl	80a38ac <spark_cloud_flag_connected>
 80a4966:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a4968:	4682      	mov	sl, r0
 80a496a:	bb38      	cbnz	r0, 80a49bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a496c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a4970:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4972:	a905      	add	r1, sp, #20
 80a4974:	4630      	mov	r0, r6
 80a4976:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a497a:	f7ff fed1 	bl	80a4720 <_ZN8particle5ErrorC1EOS0_>
 80a497e:	2014      	movs	r0, #20
 80a4980:	f7fb fb89 	bl	80a0096 <_Znwj>
 80a4984:	4604      	mov	r4, r0
 80a4986:	b148      	cbz	r0, 80a499c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a4988:	2302      	movs	r3, #2
 80a498a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a498c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a498e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4992:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a4994:	4631      	mov	r1, r6
 80a4996:	300c      	adds	r0, #12
 80a4998:	f7ff fec2 	bl	80a4720 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a499c:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a499e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a49a0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a49a4:	f7ff ff32 	bl	80a480c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a49a8:	4630      	mov	r0, r6
 80a49aa:	f7ff fec6 	bl	80a473a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a49ae:	a805      	add	r0, sp, #20
 80a49b0:	f7ff fec3 	bl	80a473a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a49b4:	4628      	mov	r0, r5
 80a49b6:	b00a      	add	sp, #40	; 0x28
 80a49b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a49bc:	230c      	movs	r3, #12
 80a49be:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a49c2:	2014      	movs	r0, #20
 80a49c4:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a49c8:	9307      	str	r3, [sp, #28]
 80a49ca:	f7fb fb64 	bl	80a0096 <_Znwj>
 80a49ce:	4601      	mov	r1, r0
 80a49d0:	b128      	cbz	r0, 80a49de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a49d2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a49d6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a49da:	f880 a001 	strb.w	sl, [r0, #1]
 80a49de:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a49e0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a49e2:	f7ff ff13 	bl	80a480c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a49e6:	4b22      	ldr	r3, [pc, #136]	; (80a4a70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a49e8:	2008      	movs	r0, #8
 80a49ea:	9308      	str	r3, [sp, #32]
 80a49ec:	f7fb fb53 	bl	80a0096 <_Znwj>
 80a49f0:	4682      	mov	sl, r0
 80a49f2:	b128      	cbz	r0, 80a4a00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a49f4:	9b03      	ldr	r3, [sp, #12]
 80a49f6:	a904      	add	r1, sp, #16
 80a49f8:	f840 3b04 	str.w	r3, [r0], #4
 80a49fc:	f7ff fcb3 	bl	80a4366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4a00:	4642      	mov	r2, r8
 80a4a02:	4639      	mov	r1, r7
 80a4a04:	4620      	mov	r0, r4
 80a4a06:	9600      	str	r6, [sp, #0]
 80a4a08:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a4a0c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4a10:	f7fe ff5c 	bl	80a38cc <spark_send_event>
 80a4a14:	b9b8      	cbnz	r0, 80a4a46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a4a16:	9b03      	ldr	r3, [sp, #12]
 80a4a18:	785b      	ldrb	r3, [r3, #1]
 80a4a1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a4a1e:	b993      	cbnz	r3, 80a4a46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a4a20:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a4a24:	a905      	add	r1, sp, #20
 80a4a26:	a803      	add	r0, sp, #12
 80a4a28:	9205      	str	r2, [sp, #20]
 80a4a2a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a4a2e:	f7ff ff11 	bl	80a4854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a4a32:	a805      	add	r0, sp, #20
 80a4a34:	f7ff fe81 	bl	80a473a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a4a38:	a805      	add	r0, sp, #20
 80a4a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a4a3c:	f7ff fea7 	bl	80a478e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a4a40:	a806      	add	r0, sp, #24
 80a4a42:	f7fb fb44 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4a46:	9b03      	ldr	r3, [sp, #12]
 80a4a48:	a904      	add	r1, sp, #16
 80a4a4a:	a806      	add	r0, sp, #24
 80a4a4c:	9305      	str	r3, [sp, #20]
 80a4a4e:	f7ff fc8a 	bl	80a4366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4a52:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4a54:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4a56:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a4a58:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a4a5a:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a4a5c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a4a5e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a4a60:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a4a62:	f7fb fb34 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4a66:	a804      	add	r0, sp, #16
 80a4a68:	f7fb fb31 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a4a6c:	e7a2      	b.n	80a49b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a4a6e:	bf00      	nop
 80a4a70:	080a4b39 	.word	0x080a4b39

080a4a74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a4a74:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4a78:	4605      	mov	r5, r0
	  switch (__op)
 80a4a7a:	d007      	beq.n	80a4a8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a4a7c:	2a03      	cmp	r2, #3
 80a4a7e:	d018      	beq.n	80a4ab2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a4a80:	2a01      	cmp	r2, #1
 80a4a82:	d101      	bne.n	80a4a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a4a84:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a4a86:	6003      	str	r3, [r0, #0]
	}
 80a4a88:	2000      	movs	r0, #0
 80a4a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4a8c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a4a8e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4a90:	f7fb fb01 	bl	80a0096 <_Znwj>
 80a4a94:	4604      	mov	r4, r0
 80a4a96:	b150      	cbz	r0, 80a4aae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a4a98:	4631      	mov	r1, r6
 80a4a9a:	f7ff fecb 	bl	80a4834 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a4a9e:	6930      	ldr	r0, [r6, #16]
 80a4aa0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4aa4:	b108      	cbz	r0, 80a4aaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a4aa6:	f002 f81f 	bl	80a6ae8 <strdup>
        type_(type) {
 80a4aaa:	6120      	str	r0, [r4, #16]
 80a4aac:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a4aae:	602c      	str	r4, [r5, #0]
	}
 80a4ab0:	e7ea      	b.n	80a4a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a4ab2:	6804      	ldr	r4, [r0, #0]
 80a4ab4:	2c00      	cmp	r4, #0
 80a4ab6:	d0e7      	beq.n	80a4a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a4ab8:	f104 0010 	add.w	r0, r4, #16
 80a4abc:	f7ff fe3d 	bl	80a473a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a4ac0:	4620      	mov	r0, r4
 80a4ac2:	f7ff fd4a 	bl	80a455a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a4ac6:	2118      	movs	r1, #24
 80a4ac8:	4620      	mov	r0, r4
 80a4aca:	f000 fcca 	bl	80a5462 <_ZdlPvj>
 80a4ace:	e7db      	b.n	80a4a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a4ad0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a4ad0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a4ad2:	2300      	movs	r3, #0
 80a4ad4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a4ad6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a4ad8:	4604      	mov	r4, r0
 80a4ada:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a4adc:	b12b      	cbz	r3, 80a4aea <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4ade:	2202      	movs	r2, #2
 80a4ae0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4ae2:	68eb      	ldr	r3, [r5, #12]
 80a4ae4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4ae6:	68ab      	ldr	r3, [r5, #8]
 80a4ae8:	60a3      	str	r3, [r4, #8]
    }
 80a4aea:	4620      	mov	r0, r4
 80a4aec:	bd38      	pop	{r3, r4, r5, pc}

080a4aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a4aee:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4af0:	b570      	push	{r4, r5, r6, lr}
 80a4af2:	4604      	mov	r4, r0
	  switch (__op)
 80a4af4:	d007      	beq.n	80a4b06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a4af6:	2a03      	cmp	r2, #3
 80a4af8:	d012      	beq.n	80a4b20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a4afa:	2a01      	cmp	r2, #1
 80a4afc:	d101      	bne.n	80a4b02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a4afe:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a4b00:	6003      	str	r3, [r0, #0]
	}
 80a4b02:	2000      	movs	r0, #0
 80a4b04:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4b06:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a4b08:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4b0a:	f7fb fac4 	bl	80a0096 <_Znwj>
 80a4b0e:	4605      	mov	r5, r0
 80a4b10:	b120      	cbz	r0, 80a4b1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a4b12:	4631      	mov	r1, r6
 80a4b14:	f7ff ffdc 	bl	80a4ad0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a4b18:	7c33      	ldrb	r3, [r6, #16]
 80a4b1a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a4b1c:	6025      	str	r5, [r4, #0]
	}
 80a4b1e:	e7f0      	b.n	80a4b02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a4b20:	6804      	ldr	r4, [r0, #0]
 80a4b22:	2c00      	cmp	r4, #0
 80a4b24:	d0ed      	beq.n	80a4b02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a4b26:	4620      	mov	r0, r4
 80a4b28:	f7ff fd17 	bl	80a455a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a4b2c:	2114      	movs	r1, #20
 80a4b2e:	4620      	mov	r0, r4
 80a4b30:	f000 fc97 	bl	80a5462 <_ZdlPvj>
 80a4b34:	e7e5      	b.n	80a4b02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a4b38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a4b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4b3a:	4604      	mov	r4, r0
 80a4b3c:	b089      	sub	sp, #36	; 0x24
 80a4b3e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a4b40:	a801      	add	r0, sp, #4
 80a4b42:	4611      	mov	r1, r2
 80a4b44:	f7ff fe23 	bl	80a478e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a4b48:	b1a4      	cbz	r4, 80a4b74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a4b4a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4b4c:	b11d      	cbz	r5, 80a4b56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a4b4e:	4628      	mov	r0, r5
 80a4b50:	f001 ffca 	bl	80a6ae8 <strdup>
 80a4b54:	4605      	mov	r5, r0
 80a4b56:	a801      	add	r0, sp, #4
 80a4b58:	a903      	add	r1, sp, #12
        type_(type) {
 80a4b5a:	9503      	str	r5, [sp, #12]
 80a4b5c:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a4b60:	f7ff fe78 	bl	80a4854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a4b64:	a803      	add	r0, sp, #12
 80a4b66:	f7ff fde8 	bl	80a473a <_ZN8particle5ErrorD1Ev>
 80a4b6a:	a802      	add	r0, sp, #8
 80a4b6c:	f7fb faaf 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a4b70:	b009      	add	sp, #36	; 0x24
 80a4b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a4b74:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a4b76:	9d01      	ldr	r5, [sp, #4]
 80a4b78:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a4b7c:	2a00      	cmp	r2, #0
 80a4b7e:	d103      	bne.n	80a4b88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a4b80:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a4b84:	2900      	cmp	r1, #0
 80a4b86:	d1f7      	bne.n	80a4b78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a4b88:	d1ef      	bne.n	80a4b6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a4b8a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4b8c:	f3bf 8f5b 	dmb	ish
 80a4b90:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a4b92:	f3bf 8f5b 	dmb	ish
 80a4b96:	1d2b      	adds	r3, r5, #4
 80a4b98:	e853 6f00 	ldrex	r6, [r3]
 80a4b9c:	e843 4200 	strex	r2, r4, [r3]
 80a4ba0:	2a00      	cmp	r2, #0
 80a4ba2:	d1f9      	bne.n	80a4b98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a4ba4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4ba8:	2e00      	cmp	r6, #0
 80a4baa:	d0de      	beq.n	80a4b6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a4bac:	4620      	mov	r0, r4
 80a4bae:	f7fe fddf 	bl	80a3770 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a4bb2:	4607      	mov	r7, r0
 80a4bb4:	b160      	cbz	r0, 80a4bd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4bb6:	4630      	mov	r0, r6
 80a4bb8:	f105 010c 	add.w	r1, r5, #12
 80a4bbc:	f7ff fe16 	bl	80a47ec <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a4bc0:	4630      	mov	r0, r6
 80a4bc2:	f7ff fcca 	bl	80a455a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a4bc6:	2110      	movs	r1, #16
 80a4bc8:	4630      	mov	r0, r6
 80a4bca:	f000 fc4a 	bl	80a5462 <_ZdlPvj>
 80a4bce:	e7cc      	b.n	80a4b6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4bd0:	4631      	mov	r1, r6
 80a4bd2:	a803      	add	r0, sp, #12
 80a4bd4:	f7ff ff7c 	bl	80a4ad0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4bd8:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4bda:	2010      	movs	r0, #16
 80a4bdc:	f88d 301c 	strb.w	r3, [sp, #28]
 80a4be0:	f7fb fa59 	bl	80a0096 <_Znwj>
 80a4be4:	4605      	mov	r5, r0
 80a4be6:	b1d0      	cbz	r0, 80a4c1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a4be8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4bea:	2014      	movs	r0, #20
 80a4bec:	f7fb fa53 	bl	80a0096 <_Znwj>
 80a4bf0:	4604      	mov	r4, r0
 80a4bf2:	b178      	cbz	r0, 80a4c14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a4bf4:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a4bf6:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4bf8:	a803      	add	r0, sp, #12
 80a4bfa:	f7ff fcbd 	bl	80a4578 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4bfe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4c00:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4c02:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4c04:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a4c06:	9205      	str	r2, [sp, #20]
 80a4c08:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4c0a:	60e3      	str	r3, [r4, #12]
 80a4c0c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a4c10:	9206      	str	r2, [sp, #24]
 80a4c12:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4c14:	4b06      	ldr	r3, [pc, #24]	; (80a4c30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4c16:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4c18:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a4c1a:	4b06      	ldr	r3, [pc, #24]	; (80a4c34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a4c1c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a4c1e:	a803      	add	r0, sp, #12
 80a4c20:	f7ff fc9b 	bl	80a455a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4c24:	2200      	movs	r2, #0
 80a4c26:	4629      	mov	r1, r5
 80a4c28:	4803      	ldr	r0, [pc, #12]	; (80a4c38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a4c2a:	f7fe fda9 	bl	80a3780 <application_thread_invoke>
 80a4c2e:	e7c7      	b.n	80a4bc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a4c30:	080a47ff 	.word	0x080a47ff
 80a4c34:	080a4aef 	.word	0x080a4aef
 80a4c38:	080a4f9d 	.word	0x080a4f9d

080a4c3c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 80a4c3c:	4770      	bx	lr

080a4c3e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4c40:	460e      	mov	r6, r1
 80a4c42:	2400      	movs	r4, #0
 80a4c44:	f100 0708 	add.w	r7, r0, #8
 80a4c48:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a4c4a:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a4c4e:	220a      	movs	r2, #10
 80a4c50:	4630      	mov	r0, r6
 80a4c52:	f7ff fb0e 	bl	80a4272 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4c56:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4c58:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4c5a:	d101      	bne.n	80a4c60 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4c5c:	4620      	mov	r0, r4
 80a4c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a4c60:	2c00      	cmp	r4, #0
 80a4c62:	d0f2      	beq.n	80a4c4a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4c64:	212e      	movs	r1, #46	; 0x2e
 80a4c66:	4630      	mov	r0, r6
 80a4c68:	f7ff faea 	bl	80a4240 <_ZN5Print5printEc>
 80a4c6c:	4404      	add	r4, r0
 80a4c6e:	e7ec      	b.n	80a4c4a <_ZNK9IPAddress7printToER5Print+0xc>

080a4c70 <_ZN9IPAddressD0Ev>:
 80a4c70:	b510      	push	{r4, lr}
 80a4c72:	4604      	mov	r4, r0
 80a4c74:	2118      	movs	r1, #24
 80a4c76:	f000 fbf4 	bl	80a5462 <_ZdlPvj>
 80a4c7a:	4620      	mov	r0, r4
 80a4c7c:	bd10      	pop	{r4, pc}
	...

080a4c80 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a4c80:	b510      	push	{r4, lr}
 80a4c82:	4604      	mov	r4, r0
 80a4c84:	4b04      	ldr	r3, [pc, #16]	; (80a4c98 <_ZN9IPAddressC1Ev+0x18>)
    void clear() { memset(&address, 0, sizeof (address)); }
 80a4c86:	2211      	movs	r2, #17
 80a4c88:	2100      	movs	r1, #0
 80a4c8a:	f840 3b04 	str.w	r3, [r0], #4
 80a4c8e:	f001 feed 	bl	80a6a6c <memset>
}
 80a4c92:	4620      	mov	r0, r4
 80a4c94:	bd10      	pop	{r4, pc}
 80a4c96:	bf00      	nop
 80a4c98:	080a8bf0 	.word	0x080a8bf0

080a4c9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4c9c:	4603      	mov	r3, r0
 80a4c9e:	4a07      	ldr	r2, [pc, #28]	; (80a4cbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4ca0:	b510      	push	{r4, lr}
 80a4ca2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4ca6:	f101 0210 	add.w	r2, r1, #16
 80a4caa:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4cae:	4291      	cmp	r1, r2
 80a4cb0:	f843 4b04 	str.w	r4, [r3], #4
 80a4cb4:	d1f9      	bne.n	80a4caa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4cb6:	780a      	ldrb	r2, [r1, #0]
 80a4cb8:	701a      	strb	r2, [r3, #0]
}
 80a4cba:	bd10      	pop	{r4, pc}
 80a4cbc:	080a8bf0 	.word	0x080a8bf0

080a4cc0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a4cc0:	4a02      	ldr	r2, [pc, #8]	; (80a4ccc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a4cc2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a4cc6:	2204      	movs	r2, #4
 80a4cc8:	7502      	strb	r2, [r0, #20]
}
 80a4cca:	4770      	bx	lr
 80a4ccc:	080a8bf0 	.word	0x080a8bf0

080a4cd0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4cd0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4cd2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4cd6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a4cda:	2304      	movs	r3, #4
 80a4cdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4ce0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4ce4:	6044      	str	r4, [r0, #4]
 80a4ce6:	7503      	strb	r3, [r0, #20]
}
 80a4ce8:	bd10      	pop	{r4, pc}
	...

080a4cec <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4cee:	4d04      	ldr	r5, [pc, #16]	; (80a4d00 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4cf0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4cf2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a4cf6:	9500      	str	r5, [sp, #0]
 80a4cf8:	f7ff ffea 	bl	80a4cd0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4cfc:	b003      	add	sp, #12
 80a4cfe:	bd30      	pop	{r4, r5, pc}
 80a4d00:	080a8bf0 	.word	0x080a8bf0

080a4d04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4d04:	7441      	strb	r1, [r0, #17]
}
 80a4d06:	4770      	bx	lr

080a4d08 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4d08:	4770      	bx	lr

080a4d0a <_ZN9USBSerial4readEv>:
{
 80a4d0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4d0c:	2100      	movs	r1, #0
 80a4d0e:	7c00      	ldrb	r0, [r0, #16]
 80a4d10:	f7fe fce6 	bl	80a36e0 <HAL_USB_USART_Receive_Data>
}
 80a4d14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4d18:	bd08      	pop	{r3, pc}

080a4d1a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a4d1a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4d1c:	2101      	movs	r1, #1
 80a4d1e:	7c00      	ldrb	r0, [r0, #16]
 80a4d20:	f7fe fcde 	bl	80a36e0 <HAL_USB_USART_Receive_Data>
}
 80a4d24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4d28:	bd08      	pop	{r3, pc}

080a4d2a <_ZN9USBSerial17availableForWriteEv>:
{
 80a4d2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4d2c:	7c00      	ldrb	r0, [r0, #16]
 80a4d2e:	f7fe fccf 	bl	80a36d0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4d32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4d36:	bd08      	pop	{r3, pc}

080a4d38 <_ZN9USBSerial9availableEv>:
{
 80a4d38:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4d3a:	7c00      	ldrb	r0, [r0, #16]
 80a4d3c:	f7fe fcc0 	bl	80a36c0 <HAL_USB_USART_Available_Data>
}
 80a4d40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4d44:	bd08      	pop	{r3, pc}

080a4d46 <_ZN9USBSerial5writeEh>:
{
 80a4d46:	b538      	push	{r3, r4, r5, lr}
 80a4d48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4d4a:	7c00      	ldrb	r0, [r0, #16]
{
 80a4d4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4d4e:	f7fe fcbf 	bl	80a36d0 <HAL_USB_USART_Available_Data_For_Write>
 80a4d52:	2800      	cmp	r0, #0
 80a4d54:	dc01      	bgt.n	80a4d5a <_ZN9USBSerial5writeEh+0x14>
 80a4d56:	7c60      	ldrb	r0, [r4, #17]
 80a4d58:	b128      	cbz	r0, 80a4d66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4d5a:	4629      	mov	r1, r5
 80a4d5c:	7c20      	ldrb	r0, [r4, #16]
 80a4d5e:	f7fe fcc7 	bl	80a36f0 <HAL_USB_USART_Send_Data>
 80a4d62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a4d66:	bd38      	pop	{r3, r4, r5, pc}

080a4d68 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a4d68:	7c00      	ldrb	r0, [r0, #16]
 80a4d6a:	f7fe bcc9 	b.w	80a3700 <HAL_USB_USART_Flush_Data>

080a4d6e <_ZN9USBSerialD0Ev>:
 80a4d6e:	b510      	push	{r4, lr}
 80a4d70:	4604      	mov	r4, r0
 80a4d72:	2114      	movs	r1, #20
 80a4d74:	f000 fb75 	bl	80a5462 <_ZdlPvj>
 80a4d78:	4620      	mov	r0, r4
 80a4d7a:	bd10      	pop	{r4, pc}

080a4d7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4d7c:	b510      	push	{r4, lr}
 80a4d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4d82:	4604      	mov	r4, r0
 80a4d84:	4608      	mov	r0, r1
 80a4d86:	2100      	movs	r1, #0
 80a4d88:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4d8c:	4b04      	ldr	r3, [pc, #16]	; (80a4da0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a4d8e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4d90:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a4d92:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a4d94:	4611      	mov	r1, r2
  _blocking = true;
 80a4d96:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a4d98:	f7fe fc82 	bl	80a36a0 <HAL_USB_USART_Init>
}
 80a4d9c:	4620      	mov	r0, r4
 80a4d9e:	bd10      	pop	{r4, pc}
 80a4da0:	080a8c04 	.word	0x080a8c04

080a4da4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4da4:	2200      	movs	r2, #0
 80a4da6:	7c00      	ldrb	r0, [r0, #16]
 80a4da8:	f7fe bc82 	b.w	80a36b0 <HAL_USB_USART_Begin>

080a4dac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a4dac:	b510      	push	{r4, lr}
 80a4dae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4db0:	2214      	movs	r2, #20
 80a4db2:	2100      	movs	r1, #0
 80a4db4:	f001 fe5a 	bl	80a6a6c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4db8:	4620      	mov	r0, r4
 80a4dba:	bd10      	pop	{r4, pc}

080a4dbc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4dbc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4dbe:	4d0f      	ldr	r5, [pc, #60]	; (80a4dfc <_Z16_fetch_usbserialv+0x40>)
{
 80a4dc0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4dc2:	a801      	add	r0, sp, #4
 80a4dc4:	f7ff fff2 	bl	80a4dac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4dc8:	7829      	ldrb	r1, [r5, #0]
 80a4dca:	f3bf 8f5b 	dmb	ish
 80a4dce:	f011 0401 	ands.w	r4, r1, #1
 80a4dd2:	d110      	bne.n	80a4df6 <_Z16_fetch_usbserialv+0x3a>
 80a4dd4:	4628      	mov	r0, r5
 80a4dd6:	f7fb f964 	bl	80a00a2 <__cxa_guard_acquire>
 80a4dda:	b160      	cbz	r0, 80a4df6 <_Z16_fetch_usbserialv+0x3a>
 80a4ddc:	4621      	mov	r1, r4
 80a4dde:	aa01      	add	r2, sp, #4
 80a4de0:	4807      	ldr	r0, [pc, #28]	; (80a4e00 <_Z16_fetch_usbserialv+0x44>)
 80a4de2:	f7ff ffcb 	bl	80a4d7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4de6:	4628      	mov	r0, r5
 80a4de8:	f7fb f960 	bl	80a00ac <__cxa_guard_release>
 80a4dec:	4a05      	ldr	r2, [pc, #20]	; (80a4e04 <_Z16_fetch_usbserialv+0x48>)
 80a4dee:	4906      	ldr	r1, [pc, #24]	; (80a4e08 <_Z16_fetch_usbserialv+0x4c>)
 80a4df0:	4803      	ldr	r0, [pc, #12]	; (80a4e00 <_Z16_fetch_usbserialv+0x44>)
 80a4df2:	f000 fb31 	bl	80a5458 <__aeabi_atexit>
	return _usbserial;
}
 80a4df6:	4802      	ldr	r0, [pc, #8]	; (80a4e00 <_Z16_fetch_usbserialv+0x44>)
 80a4df8:	b007      	add	sp, #28
 80a4dfa:	bd30      	pop	{r4, r5, pc}
 80a4dfc:	20000440 	.word	0x20000440
 80a4e00:	20000448 	.word	0x20000448
 80a4e04:	20000128 	.word	0x20000128
 80a4e08:	080a4d09 	.word	0x080a4d09

080a4e0c <_Z23acquireUSBSerial1Bufferv>:
 80a4e0c:	b510      	push	{r4, lr}
 80a4e0e:	4604      	mov	r4, r0
 80a4e10:	2214      	movs	r2, #20
 80a4e12:	2100      	movs	r1, #0
 80a4e14:	f001 fe2a 	bl	80a6a6c <memset>
 80a4e18:	4620      	mov	r0, r4
 80a4e1a:	bd10      	pop	{r4, pc}

080a4e1c <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a4e1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4e1e:	4c0f      	ldr	r4, [pc, #60]	; (80a4e5c <_Z17_fetch_usbserial1v+0x40>)
{
 80a4e20:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4e22:	a801      	add	r0, sp, #4
 80a4e24:	f7ff fff2 	bl	80a4e0c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4e28:	7823      	ldrb	r3, [r4, #0]
 80a4e2a:	f3bf 8f5b 	dmb	ish
 80a4e2e:	07db      	lsls	r3, r3, #31
 80a4e30:	d410      	bmi.n	80a4e54 <_Z17_fetch_usbserial1v+0x38>
 80a4e32:	4620      	mov	r0, r4
 80a4e34:	f7fb f935 	bl	80a00a2 <__cxa_guard_acquire>
 80a4e38:	b160      	cbz	r0, 80a4e54 <_Z17_fetch_usbserial1v+0x38>
 80a4e3a:	2101      	movs	r1, #1
 80a4e3c:	aa01      	add	r2, sp, #4
 80a4e3e:	4808      	ldr	r0, [pc, #32]	; (80a4e60 <_Z17_fetch_usbserial1v+0x44>)
 80a4e40:	f7ff ff9c 	bl	80a4d7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4e44:	4620      	mov	r0, r4
 80a4e46:	f7fb f931 	bl	80a00ac <__cxa_guard_release>
 80a4e4a:	4a06      	ldr	r2, [pc, #24]	; (80a4e64 <_Z17_fetch_usbserial1v+0x48>)
 80a4e4c:	4906      	ldr	r1, [pc, #24]	; (80a4e68 <_Z17_fetch_usbserial1v+0x4c>)
 80a4e4e:	4804      	ldr	r0, [pc, #16]	; (80a4e60 <_Z17_fetch_usbserial1v+0x44>)
 80a4e50:	f000 fb02 	bl	80a5458 <__aeabi_atexit>
  return _usbserial1;
}
 80a4e54:	4802      	ldr	r0, [pc, #8]	; (80a4e60 <_Z17_fetch_usbserial1v+0x44>)
 80a4e56:	b006      	add	sp, #24
 80a4e58:	bd10      	pop	{r4, pc}
 80a4e5a:	bf00      	nop
 80a4e5c:	20000444 	.word	0x20000444
 80a4e60:	2000045c 	.word	0x2000045c
 80a4e64:	20000128 	.word	0x20000128
 80a4e68:	080a4d09 	.word	0x080a4d09

080a4e6c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a4e6c:	f7fe bad6 	b.w	80a341c <HAL_Interrupts_Disable_All>

080a4e70 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a4e70:	f7fe bacc 	b.w	80a340c <HAL_Interrupts_Enable_All>

080a4e74 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a4e74:	4770      	bx	lr

080a4e76 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4e76:	7441      	strb	r1, [r0, #17]
}
 80a4e78:	4770      	bx	lr

080a4e7a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a4e7a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a4e7c:	7c00      	ldrb	r0, [r0, #16]
 80a4e7e:	f7fe fb7d 	bl	80a357c <hal_usart_available_data_for_write>
}
 80a4e82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e86:	bd08      	pop	{r3, pc}

080a4e88 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4e88:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a4e8a:	7c00      	ldrb	r0, [r0, #16]
 80a4e8c:	f7fe fb4e 	bl	80a352c <hal_usart_available>
}
 80a4e90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e94:	bd08      	pop	{r3, pc}

080a4e96 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4e96:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a4e98:	7c00      	ldrb	r0, [r0, #16]
 80a4e9a:	f7fe fb57 	bl	80a354c <hal_usart_peek>
}
 80a4e9e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4ea2:	bd08      	pop	{r3, pc}

080a4ea4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4ea4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a4ea6:	7c00      	ldrb	r0, [r0, #16]
 80a4ea8:	f7fe fb48 	bl	80a353c <hal_usart_read>
}
 80a4eac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4eb0:	bd08      	pop	{r3, pc}

080a4eb2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a4eb2:	7c00      	ldrb	r0, [r0, #16]
 80a4eb4:	f7fe bb52 	b.w	80a355c <hal_usart_flush>

080a4eb8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4eb8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4eba:	7c46      	ldrb	r6, [r0, #17]
{
 80a4ebc:	4604      	mov	r4, r0
 80a4ebe:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4ec0:	b12e      	cbz	r6, 80a4ece <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a4ec2:	4629      	mov	r1, r5
 80a4ec4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a4eca:	f7fe bb27 	b.w	80a351c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4ece:	7c00      	ldrb	r0, [r0, #16]
 80a4ed0:	f7fe fb54 	bl	80a357c <hal_usart_available_data_for_write>
 80a4ed4:	2800      	cmp	r0, #0
 80a4ed6:	dcf4      	bgt.n	80a4ec2 <_ZN11USARTSerial5writeEh+0xa>
}
 80a4ed8:	4630      	mov	r0, r6
 80a4eda:	bd70      	pop	{r4, r5, r6, pc}

080a4edc <_ZN11USARTSerialD0Ev>:
 80a4edc:	b510      	push	{r4, lr}
 80a4ede:	4604      	mov	r4, r0
 80a4ee0:	2114      	movs	r1, #20
 80a4ee2:	f000 fabe 	bl	80a5462 <_ZdlPvj>
 80a4ee6:	4620      	mov	r0, r4
 80a4ee8:	bd10      	pop	{r4, pc}
	...

080a4eec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a4eec:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4ef0:	b510      	push	{r4, lr}
 80a4ef2:	4604      	mov	r4, r0
 80a4ef4:	4608      	mov	r0, r1
 80a4ef6:	4611      	mov	r1, r2
 80a4ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4efc:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a4f00:	4a04      	ldr	r2, [pc, #16]	; (80a4f14 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a4f02:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4f04:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a4f06:	2201      	movs	r2, #1
 80a4f08:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a4f0a:	461a      	mov	r2, r3
 80a4f0c:	f7fe fafe 	bl	80a350c <hal_usart_init>
}
 80a4f10:	4620      	mov	r0, r4
 80a4f12:	bd10      	pop	{r4, pc}
 80a4f14:	080a8c34 	.word	0x080a8c34

080a4f18 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a4f1a:	4c1a      	ldr	r4, [pc, #104]	; (80a4f84 <_Z22__fetch_global_Serial1v+0x6c>)
 80a4f1c:	6826      	ldr	r6, [r4, #0]
 80a4f1e:	b94e      	cbnz	r6, 80a4f34 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a4f20:	2084      	movs	r0, #132	; 0x84
 80a4f22:	f7fb f8b8 	bl	80a0096 <_Znwj>
 80a4f26:	4605      	mov	r5, r0
 80a4f28:	b118      	cbz	r0, 80a4f32 <_Z22__fetch_global_Serial1v+0x1a>
 80a4f2a:	2284      	movs	r2, #132	; 0x84
 80a4f2c:	4631      	mov	r1, r6
 80a4f2e:	f001 fd9d 	bl	80a6a6c <memset>
 80a4f32:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a4f34:	4d14      	ldr	r5, [pc, #80]	; (80a4f88 <_Z22__fetch_global_Serial1v+0x70>)
 80a4f36:	682f      	ldr	r7, [r5, #0]
 80a4f38:	b94f      	cbnz	r7, 80a4f4e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a4f3a:	2084      	movs	r0, #132	; 0x84
 80a4f3c:	f7fb f8ab 	bl	80a0096 <_Znwj>
 80a4f40:	4606      	mov	r6, r0
 80a4f42:	b118      	cbz	r0, 80a4f4c <_Z22__fetch_global_Serial1v+0x34>
 80a4f44:	2284      	movs	r2, #132	; 0x84
 80a4f46:	4639      	mov	r1, r7
 80a4f48:	f001 fd90 	bl	80a6a6c <memset>
 80a4f4c:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a4f4e:	4f0f      	ldr	r7, [pc, #60]	; (80a4f8c <_Z22__fetch_global_Serial1v+0x74>)
 80a4f50:	7839      	ldrb	r1, [r7, #0]
 80a4f52:	f3bf 8f5b 	dmb	ish
 80a4f56:	f011 0601 	ands.w	r6, r1, #1
 80a4f5a:	d111      	bne.n	80a4f80 <_Z22__fetch_global_Serial1v+0x68>
 80a4f5c:	4638      	mov	r0, r7
 80a4f5e:	f7fb f8a0 	bl	80a00a2 <__cxa_guard_acquire>
 80a4f62:	b168      	cbz	r0, 80a4f80 <_Z22__fetch_global_Serial1v+0x68>
 80a4f64:	4631      	mov	r1, r6
 80a4f66:	6822      	ldr	r2, [r4, #0]
 80a4f68:	682b      	ldr	r3, [r5, #0]
 80a4f6a:	4809      	ldr	r0, [pc, #36]	; (80a4f90 <_Z22__fetch_global_Serial1v+0x78>)
 80a4f6c:	f7ff ffbe 	bl	80a4eec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a4f70:	4638      	mov	r0, r7
 80a4f72:	f7fb f89b 	bl	80a00ac <__cxa_guard_release>
 80a4f76:	4a07      	ldr	r2, [pc, #28]	; (80a4f94 <_Z22__fetch_global_Serial1v+0x7c>)
 80a4f78:	4907      	ldr	r1, [pc, #28]	; (80a4f98 <_Z22__fetch_global_Serial1v+0x80>)
 80a4f7a:	4805      	ldr	r0, [pc, #20]	; (80a4f90 <_Z22__fetch_global_Serial1v+0x78>)
 80a4f7c:	f000 fa6c 	bl	80a5458 <__aeabi_atexit>
#endif
	return serial1;
}
 80a4f80:	4803      	ldr	r0, [pc, #12]	; (80a4f90 <_Z22__fetch_global_Serial1v+0x78>)
 80a4f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4f84:	20000474 	.word	0x20000474
 80a4f88:	20000478 	.word	0x20000478
 80a4f8c:	20000470 	.word	0x20000470
 80a4f90:	2000047c 	.word	0x2000047c
 80a4f94:	20000128 	.word	0x20000128
 80a4f98:	080a4e75 	.word	0x080a4e75

080a4f9c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a4f9c:	b510      	push	{r4, lr}
      if (_M_empty())
 80a4f9e:	6883      	ldr	r3, [r0, #8]
 80a4fa0:	4604      	mov	r4, r0
 80a4fa2:	b90b      	cbnz	r3, 80a4fa8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a4fa4:	f000 fa61 	bl	80a546a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4fa8:	68c3      	ldr	r3, [r0, #12]
 80a4faa:	4798      	blx	r3
      if (_M_manager)
 80a4fac:	68a3      	ldr	r3, [r4, #8]
 80a4fae:	b11b      	cbz	r3, 80a4fb8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4fb0:	2203      	movs	r2, #3
 80a4fb2:	4621      	mov	r1, r4
 80a4fb4:	4620      	mov	r0, r4
 80a4fb6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a4fb8:	4620      	mov	r0, r4
}
 80a4fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a4fbe:	2110      	movs	r1, #16
 80a4fc0:	f000 ba4f 	b.w	80a5462 <_ZdlPvj>

080a4fc4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a4fc4:	4770      	bx	lr

080a4fc6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4fc8:	4606      	mov	r6, r0
 80a4fca:	4615      	mov	r5, r2
 80a4fcc:	460c      	mov	r4, r1
 80a4fce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4fd0:	42bc      	cmp	r4, r7
 80a4fd2:	d006      	beq.n	80a4fe2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4fd4:	6833      	ldr	r3, [r6, #0]
 80a4fd6:	4630      	mov	r0, r6
 80a4fd8:	689b      	ldr	r3, [r3, #8]
 80a4fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4fde:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a4fe0:	e7f6      	b.n	80a4fd0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a4fe2:	4628      	mov	r0, r5
 80a4fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4fe6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a4fe6:	2200      	movs	r2, #0
 80a4fe8:	7c00      	ldrb	r0, [r0, #16]
 80a4fea:	f7fe bacf 	b.w	80a358c <hal_i2c_write>

080a4fee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a4fee:	2100      	movs	r1, #0
 80a4ff0:	7c00      	ldrb	r0, [r0, #16]
 80a4ff2:	f7fe bad3 	b.w	80a359c <hal_i2c_available>

080a4ff6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a4ff6:	2100      	movs	r1, #0
 80a4ff8:	7c00      	ldrb	r0, [r0, #16]
 80a4ffa:	f7fe bad7 	b.w	80a35ac <hal_i2c_read>

080a4ffe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a4ffe:	2100      	movs	r1, #0
 80a5000:	7c00      	ldrb	r0, [r0, #16]
 80a5002:	f7fe badb 	b.w	80a35bc <hal_i2c_peek>

080a5006 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a5006:	2100      	movs	r1, #0
 80a5008:	7c00      	ldrb	r0, [r0, #16]
 80a500a:	f7fe badf 	b.w	80a35cc <hal_i2c_flush>

080a500e <_ZN7TwoWireD0Ev>:
 80a500e:	b510      	push	{r4, lr}
 80a5010:	4604      	mov	r4, r0
 80a5012:	2114      	movs	r1, #20
 80a5014:	f000 fa25 	bl	80a5462 <_ZdlPvj>
 80a5018:	4620      	mov	r0, r4
 80a501a:	bd10      	pop	{r4, pc}

080a501c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a501c:	b510      	push	{r4, lr}
 80a501e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a5022:	4604      	mov	r4, r0
 80a5024:	4608      	mov	r0, r1
 80a5026:	2100      	movs	r1, #0
 80a5028:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a502c:	4b03      	ldr	r3, [pc, #12]	; (80a503c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a502e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a5030:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a5032:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a5034:	f7fe fada 	bl	80a35ec <hal_i2c_init>
}
 80a5038:	4620      	mov	r0, r4
 80a503a:	bd10      	pop	{r4, pc}
 80a503c:	080a8c64 	.word	0x080a8c64

080a5040 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a5040:	2200      	movs	r2, #0
 80a5042:	6840      	ldr	r0, [r0, #4]
 80a5044:	4611      	mov	r1, r2
 80a5046:	f7fe bbe1 	b.w	80a380c <network_ready>

080a504a <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a504a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a504c:	4615      	mov	r5, r2
 80a504e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a5050:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a5052:	460e      	mov	r6, r1
 80a5054:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a5056:	2100      	movs	r1, #0
 80a5058:	a803      	add	r0, sp, #12
 80a505a:	f001 fd07 	bl	80a6a6c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a505e:	4628      	mov	r0, r5
 80a5060:	f001 fd5d 	bl	80a6b1e <strlen>
 80a5064:	2700      	movs	r7, #0
 80a5066:	b281      	uxth	r1, r0
 80a5068:	6873      	ldr	r3, [r6, #4]
 80a506a:	4628      	mov	r0, r5
 80a506c:	9700      	str	r7, [sp, #0]
 80a506e:	aa03      	add	r2, sp, #12
 80a5070:	f7fe fb56 	bl	80a3720 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5074:	b130      	cbz	r0, 80a5084 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a5076:	4639      	mov	r1, r7
 80a5078:	4620      	mov	r0, r4
 80a507a:	f7ff fe21 	bl	80a4cc0 <_ZN9IPAddressC1Em>
    }
 80a507e:	4620      	mov	r0, r4
 80a5080:	b009      	add	sp, #36	; 0x24
 80a5082:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5084:	4620      	mov	r0, r4
 80a5086:	a903      	add	r1, sp, #12
 80a5088:	f7ff fe08 	bl	80a4c9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a508c:	e7f7      	b.n	80a507e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a508e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a508e:	2200      	movs	r2, #0
 80a5090:	6840      	ldr	r0, [r0, #4]
 80a5092:	4611      	mov	r1, r2
 80a5094:	f7fe bbda 	b.w	80a384c <network_listening>

080a5098 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a5098:	2200      	movs	r2, #0
 80a509a:	6840      	ldr	r0, [r0, #4]
 80a509c:	4611      	mov	r1, r2
 80a509e:	f7fe bbe5 	b.w	80a386c <network_get_listen_timeout>

080a50a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a50a2:	2200      	movs	r2, #0
 80a50a4:	6840      	ldr	r0, [r0, #4]
 80a50a6:	f7fe bbd9 	b.w	80a385c <network_set_listen_timeout>

080a50aa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a50aa:	2200      	movs	r2, #0
 80a50ac:	6840      	ldr	r0, [r0, #4]
 80a50ae:	f081 0101 	eor.w	r1, r1, #1
 80a50b2:	f7fe bbc3 	b.w	80a383c <network_listen>

080a50b6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a50b6:	2300      	movs	r3, #0
 80a50b8:	6840      	ldr	r0, [r0, #4]
 80a50ba:	461a      	mov	r2, r3
 80a50bc:	4619      	mov	r1, r3
 80a50be:	f7fe bbb5 	b.w	80a382c <network_off>

080a50c2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a50c2:	2200      	movs	r2, #0
 80a50c4:	6840      	ldr	r0, [r0, #4]
 80a50c6:	4611      	mov	r1, r2
 80a50c8:	f7fe bb90 	b.w	80a37ec <network_connecting>

080a50cc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a50cc:	2200      	movs	r2, #0
 80a50ce:	2102      	movs	r1, #2
 80a50d0:	6840      	ldr	r0, [r0, #4]
 80a50d2:	f7fe bb93 	b.w	80a37fc <network_disconnect>

080a50d6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a50d6:	2300      	movs	r3, #0
 80a50d8:	6840      	ldr	r0, [r0, #4]
 80a50da:	461a      	mov	r2, r3
 80a50dc:	f7fe bb7e 	b.w	80a37dc <network_connect>

080a50e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a50e0:	2204      	movs	r2, #4
 80a50e2:	4b02      	ldr	r3, [pc, #8]	; (80a50ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a50e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a50e6:	4a02      	ldr	r2, [pc, #8]	; (80a50f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a50e8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a50ea:	4770      	bx	lr
 80a50ec:	20000490 	.word	0x20000490
 80a50f0:	080a8c8c 	.word	0x080a8c8c

080a50f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a50f4:	2300      	movs	r3, #0
 80a50f6:	6840      	ldr	r0, [r0, #4]
 80a50f8:	461a      	mov	r2, r3
 80a50fa:	f7fe bb6f 	b.w	80a37dc <network_connect>

080a50fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a50fe:	2200      	movs	r2, #0
 80a5100:	2102      	movs	r1, #2
 80a5102:	6840      	ldr	r0, [r0, #4]
 80a5104:	f7fe bb7a 	b.w	80a37fc <network_disconnect>

080a5108 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a5108:	2200      	movs	r2, #0
 80a510a:	6840      	ldr	r0, [r0, #4]
 80a510c:	4611      	mov	r1, r2
 80a510e:	f7fe bb6d 	b.w	80a37ec <network_connecting>

080a5112 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a5112:	2200      	movs	r2, #0
 80a5114:	6840      	ldr	r0, [r0, #4]
 80a5116:	4611      	mov	r1, r2
 80a5118:	f7fe bb78 	b.w	80a380c <network_ready>

080a511c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a511c:	2300      	movs	r3, #0
 80a511e:	6840      	ldr	r0, [r0, #4]
 80a5120:	461a      	mov	r2, r3
 80a5122:	4619      	mov	r1, r3
 80a5124:	f7fe bb7a 	b.w	80a381c <network_on>

080a5128 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a5128:	2300      	movs	r3, #0
 80a512a:	6840      	ldr	r0, [r0, #4]
 80a512c:	461a      	mov	r2, r3
 80a512e:	4619      	mov	r1, r3
 80a5130:	f7fe bb7c 	b.w	80a382c <network_off>

080a5134 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a5134:	2100      	movs	r1, #0
 80a5136:	6840      	ldr	r0, [r0, #4]
 80a5138:	f7fe bba0 	b.w	80a387c <network_is_on>

080a513c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a513c:	2100      	movs	r1, #0
 80a513e:	6840      	ldr	r0, [r0, #4]
 80a5140:	f7fe bba4 	b.w	80a388c <network_is_off>

080a5144 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a5144:	2200      	movs	r2, #0
 80a5146:	6840      	ldr	r0, [r0, #4]
 80a5148:	f081 0101 	eor.w	r1, r1, #1
 80a514c:	f7fe bb76 	b.w	80a383c <network_listen>

080a5150 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a5150:	2200      	movs	r2, #0
 80a5152:	6840      	ldr	r0, [r0, #4]
 80a5154:	f7fe bb82 	b.w	80a385c <network_set_listen_timeout>

080a5158 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a5158:	2200      	movs	r2, #0
 80a515a:	6840      	ldr	r0, [r0, #4]
 80a515c:	4611      	mov	r1, r2
 80a515e:	f7fe bb85 	b.w	80a386c <network_get_listen_timeout>

080a5162 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a5162:	2200      	movs	r2, #0
 80a5164:	6840      	ldr	r0, [r0, #4]
 80a5166:	4611      	mov	r1, r2
 80a5168:	f7fe bb70 	b.w	80a384c <network_listening>

080a516c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a516c:	b570      	push	{r4, r5, r6, lr}
 80a516e:	4615      	mov	r5, r2
 80a5170:	b08e      	sub	sp, #56	; 0x38
 80a5172:	4604      	mov	r4, r0
    IPAddress addr;
 80a5174:	a808      	add	r0, sp, #32
 80a5176:	f7ff fd83 	bl	80a4c80 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a517a:	2211      	movs	r2, #17
 80a517c:	2100      	movs	r1, #0
 80a517e:	a803      	add	r0, sp, #12
 80a5180:	f001 fc74 	bl	80a6a6c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a5184:	2600      	movs	r6, #0
 80a5186:	4628      	mov	r0, r5
 80a5188:	f001 fcc9 	bl	80a6b1e <strlen>
 80a518c:	4b0a      	ldr	r3, [pc, #40]	; (80a51b8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a518e:	9600      	str	r6, [sp, #0]
 80a5190:	b281      	uxth	r1, r0
 80a5192:	685b      	ldr	r3, [r3, #4]
 80a5194:	4628      	mov	r0, r5
 80a5196:	aa03      	add	r2, sp, #12
 80a5198:	f7fe fac2 	bl	80a3720 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a519c:	b130      	cbz	r0, 80a51ac <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a519e:	4631      	mov	r1, r6
 80a51a0:	4620      	mov	r0, r4
 80a51a2:	f7ff fd8d 	bl	80a4cc0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a51a6:	4620      	mov	r0, r4
 80a51a8:	b00e      	add	sp, #56	; 0x38
 80a51aa:	bd70      	pop	{r4, r5, r6, pc}
 80a51ac:	4620      	mov	r0, r4
 80a51ae:	a903      	add	r1, sp, #12
 80a51b0:	f7ff fd74 	bl	80a4c9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a51b4:	e7f7      	b.n	80a51a6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a51b6:	bf00      	nop
 80a51b8:	20000490 	.word	0x20000490

080a51bc <_ZN5spark12NetworkClass4fromEm>:
}
 80a51bc:	4a03      	ldr	r2, [pc, #12]	; (80a51cc <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a51be:	4b04      	ldr	r3, [pc, #16]	; (80a51d0 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a51c0:	2804      	cmp	r0, #4
 80a51c2:	bf14      	ite	ne
 80a51c4:	4610      	movne	r0, r2
 80a51c6:	4618      	moveq	r0, r3
 80a51c8:	4770      	bx	lr
 80a51ca:	bf00      	nop
 80a51cc:	20000498 	.word	0x20000498
 80a51d0:	20000490 	.word	0x20000490

080a51d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a51d4:	4b02      	ldr	r3, [pc, #8]	; (80a51e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a51d6:	4a03      	ldr	r2, [pc, #12]	; (80a51e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a51d8:	601a      	str	r2, [r3, #0]
 80a51da:	2200      	movs	r2, #0
 80a51dc:	605a      	str	r2, [r3, #4]

} // spark
 80a51de:	4770      	bx	lr
 80a51e0:	20000498 	.word	0x20000498
 80a51e4:	080a8cc8 	.word	0x080a8cc8

080a51e8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a51e8:	b510      	push	{r4, lr}
 80a51ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a51ec:	6880      	ldr	r0, [r0, #8]
 80a51ee:	b108      	cbz	r0, 80a51f4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a51f0:	f7fe f984 	bl	80a34fc <os_mutex_recursive_destroy>
 80a51f4:	4620      	mov	r0, r4
 80a51f6:	bd10      	pop	{r4, pc}

080a51f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a51f8:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a51fa:	b570      	push	{r4, r5, r6, lr}
 80a51fc:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a51fe:	d901      	bls.n	80a5204 <pinAvailable+0xc>
    return false;
 80a5200:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a5202:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5204:	f1a0 030d 	sub.w	r3, r0, #13
 80a5208:	2b02      	cmp	r3, #2
 80a520a:	d90b      	bls.n	80a5224 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a520c:	2801      	cmp	r0, #1
 80a520e:	d826      	bhi.n	80a525e <pinAvailable+0x66>
 80a5210:	f000 f8fa 	bl	80a5408 <_Z19__fetch_global_Wirev>
 80a5214:	2100      	movs	r1, #0
 80a5216:	7c00      	ldrb	r0, [r0, #16]
 80a5218:	f7fe f9e0 	bl	80a35dc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a521c:	f080 0001 	eor.w	r0, r0, #1
 80a5220:	b2c0      	uxtb	r0, r0
 80a5222:	e7ee      	b.n	80a5202 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a5224:	4e13      	ldr	r6, [pc, #76]	; (80a5274 <pinAvailable+0x7c>)
 80a5226:	7831      	ldrb	r1, [r6, #0]
 80a5228:	f3bf 8f5b 	dmb	ish
 80a522c:	f011 0501 	ands.w	r5, r1, #1
 80a5230:	d10f      	bne.n	80a5252 <pinAvailable+0x5a>
 80a5232:	4630      	mov	r0, r6
 80a5234:	f7fa ff35 	bl	80a00a2 <__cxa_guard_acquire>
 80a5238:	b158      	cbz	r0, 80a5252 <pinAvailable+0x5a>
 80a523a:	4629      	mov	r1, r5
 80a523c:	480e      	ldr	r0, [pc, #56]	; (80a5278 <pinAvailable+0x80>)
 80a523e:	f7fe fbb5 	bl	80a39ac <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a5242:	4630      	mov	r0, r6
 80a5244:	f7fa ff32 	bl	80a00ac <__cxa_guard_release>
 80a5248:	4a0c      	ldr	r2, [pc, #48]	; (80a527c <pinAvailable+0x84>)
 80a524a:	490d      	ldr	r1, [pc, #52]	; (80a5280 <pinAvailable+0x88>)
 80a524c:	480a      	ldr	r0, [pc, #40]	; (80a5278 <pinAvailable+0x80>)
 80a524e:	f000 f903 	bl	80a5458 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5252:	4b09      	ldr	r3, [pc, #36]	; (80a5278 <pinAvailable+0x80>)
 80a5254:	7818      	ldrb	r0, [r3, #0]
 80a5256:	f7fe fa1b 	bl	80a3690 <hal_spi_is_enabled>
 80a525a:	2800      	cmp	r0, #0
 80a525c:	d1d0      	bne.n	80a5200 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a525e:	3c12      	subs	r4, #18
 80a5260:	2c01      	cmp	r4, #1
 80a5262:	d805      	bhi.n	80a5270 <pinAvailable+0x78>
 80a5264:	f7ff fe58 	bl	80a4f18 <_Z22__fetch_global_Serial1v>
 80a5268:	7c00      	ldrb	r0, [r0, #16]
 80a526a:	f7fe f97f 	bl	80a356c <hal_usart_is_enabled>
 80a526e:	e7d5      	b.n	80a521c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a5270:	2001      	movs	r0, #1
 80a5272:	e7c6      	b.n	80a5202 <pinAvailable+0xa>
 80a5274:	200004a0 	.word	0x200004a0
 80a5278:	200004a4 	.word	0x200004a4
 80a527c:	20000128 	.word	0x20000128
 80a5280:	080a51e9 	.word	0x080a51e9

080a5284 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5284:	2817      	cmp	r0, #23
{
 80a5286:	b538      	push	{r3, r4, r5, lr}
 80a5288:	4604      	mov	r4, r0
 80a528a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a528c:	d80a      	bhi.n	80a52a4 <pinMode+0x20>
 80a528e:	29ff      	cmp	r1, #255	; 0xff
 80a5290:	d008      	beq.n	80a52a4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a5292:	f7ff ffb1 	bl	80a51f8 <pinAvailable>
 80a5296:	b128      	cbz	r0, 80a52a4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a5298:	4629      	mov	r1, r5
 80a529a:	4620      	mov	r0, r4
}
 80a529c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a52a0:	f7fe b894 	b.w	80a33cc <HAL_Pin_Mode>
}
 80a52a4:	bd38      	pop	{r3, r4, r5, pc}

080a52a6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a52a6:	b538      	push	{r3, r4, r5, lr}
 80a52a8:	4604      	mov	r4, r0
 80a52aa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a52ac:	f7fe f896 	bl	80a33dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a52b0:	28ff      	cmp	r0, #255	; 0xff
 80a52b2:	d010      	beq.n	80a52d6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a52b4:	2806      	cmp	r0, #6
 80a52b6:	d804      	bhi.n	80a52c2 <digitalWrite+0x1c>
 80a52b8:	234d      	movs	r3, #77	; 0x4d
 80a52ba:	fa23 f000 	lsr.w	r0, r3, r0
 80a52be:	07c3      	lsls	r3, r0, #31
 80a52c0:	d409      	bmi.n	80a52d6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a52c2:	4620      	mov	r0, r4
 80a52c4:	f7ff ff98 	bl	80a51f8 <pinAvailable>
 80a52c8:	b128      	cbz	r0, 80a52d6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a52ca:	4629      	mov	r1, r5
 80a52cc:	4620      	mov	r0, r4
}
 80a52ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a52d2:	f7fe b88b 	b.w	80a33ec <HAL_GPIO_Write>
}
 80a52d6:	bd38      	pop	{r3, r4, r5, pc}

080a52d8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a52d8:	b510      	push	{r4, lr}
 80a52da:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a52dc:	f7fe f87e 	bl	80a33dc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a52e0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a52e2:	b2db      	uxtb	r3, r3
 80a52e4:	2b01      	cmp	r3, #1
 80a52e6:	d908      	bls.n	80a52fa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a52e8:	4620      	mov	r0, r4
 80a52ea:	f7ff ff85 	bl	80a51f8 <pinAvailable>
 80a52ee:	b120      	cbz	r0, 80a52fa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a52f0:	4620      	mov	r0, r4
}
 80a52f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a52f6:	f7fe b881 	b.w	80a33fc <HAL_GPIO_Read>
}
 80a52fa:	2000      	movs	r0, #0
 80a52fc:	bd10      	pop	{r4, pc}

080a52fe <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a52fe:	b510      	push	{r4, lr}
 80a5300:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a5302:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a5304:	bf9c      	itt	ls
 80a5306:	340a      	addls	r4, #10
 80a5308:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a530a:	4620      	mov	r0, r4
 80a530c:	f7ff ff74 	bl	80a51f8 <pinAvailable>
 80a5310:	b150      	cbz	r0, 80a5328 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a5312:	2103      	movs	r1, #3
 80a5314:	4620      	mov	r0, r4
 80a5316:	f7fe f851 	bl	80a33bc <HAL_Validate_Pin_Function>
 80a531a:	2803      	cmp	r0, #3
 80a531c:	d104      	bne.n	80a5328 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a531e:	4620      	mov	r0, r4
}
 80a5320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a5324:	f7fe b88a 	b.w	80a343c <hal_adc_read>
}
 80a5328:	2000      	movs	r0, #0
 80a532a:	bd10      	pop	{r4, pc}

080a532c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a532c:	b538      	push	{r3, r4, r5, lr}
 80a532e:	4604      	mov	r4, r0
 80a5330:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a5332:	f7ff ff61 	bl	80a51f8 <pinAvailable>
 80a5336:	b1f0      	cbz	r0, 80a5376 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a5338:	2104      	movs	r1, #4
 80a533a:	4620      	mov	r0, r4
 80a533c:	f7fe f83e 	bl	80a33bc <HAL_Validate_Pin_Function>
 80a5340:	2804      	cmp	r0, #4
 80a5342:	d105      	bne.n	80a5350 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a5344:	4620      	mov	r0, r4
 80a5346:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 80a5348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 80a534c:	f7fe b86e 	b.w	80a342c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a5350:	2102      	movs	r1, #2
 80a5352:	4620      	mov	r0, r4
 80a5354:	f7fe f832 	bl	80a33bc <HAL_Validate_Pin_Function>
 80a5358:	2802      	cmp	r0, #2
 80a535a:	d10c      	bne.n	80a5376 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a535c:	4620      	mov	r0, r4
 80a535e:	f7fe f83d 	bl	80a33dc <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a5362:	2801      	cmp	r0, #1
 80a5364:	d001      	beq.n	80a536a <_Z11analogWritetm+0x3e>
 80a5366:	2804      	cmp	r0, #4
 80a5368:	d105      	bne.n	80a5376 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 80a536a:	4629      	mov	r1, r5
 80a536c:	4620      	mov	r0, r4
}
 80a536e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 80a5372:	f7fe b873 	b.w	80a345c <hal_pwm_write_ext>
}
 80a5376:	bd38      	pop	{r3, r4, r5, pc}

080a5378 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a5378:	f7fe b868 	b.w	80a344c <HAL_Pulse_In>

080a537c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a537c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a537e:	4c08      	ldr	r4, [pc, #32]	; (80a53a0 <_Z21__fetch_global_EEPROMv+0x24>)
 80a5380:	7823      	ldrb	r3, [r4, #0]
 80a5382:	f3bf 8f5b 	dmb	ish
 80a5386:	07db      	lsls	r3, r3, #31
 80a5388:	d408      	bmi.n	80a539c <_Z21__fetch_global_EEPROMv+0x20>
 80a538a:	4620      	mov	r0, r4
 80a538c:	f7fa fe89 	bl	80a00a2 <__cxa_guard_acquire>
 80a5390:	b120      	cbz	r0, 80a539c <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a5392:	f7fe f883 	bl	80a349c <HAL_EEPROM_Init>
 80a5396:	4620      	mov	r0, r4
 80a5398:	f7fa fe88 	bl	80a00ac <__cxa_guard_release>
	return eeprom;
}
 80a539c:	4801      	ldr	r0, [pc, #4]	; (80a53a4 <_Z21__fetch_global_EEPROMv+0x28>)
 80a539e:	bd10      	pop	{r4, pc}
 80a53a0:	200004b4 	.word	0x200004b4
 80a53a4:	200004b8 	.word	0x200004b8

080a53a8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a53a8:	2300      	movs	r3, #0
 80a53aa:	b513      	push	{r0, r1, r4, lr}
 80a53ac:	4c07      	ldr	r4, [pc, #28]	; (80a53cc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a53ae:	461a      	mov	r2, r3
 80a53b0:	4619      	mov	r1, r3
 80a53b2:	4620      	mov	r0, r4
 80a53b4:	9300      	str	r3, [sp, #0]
 80a53b6:	f7ff fc99 	bl	80a4cec <_ZN9IPAddressC1Ehhhh>
 80a53ba:	4620      	mov	r0, r4
 80a53bc:	4a04      	ldr	r2, [pc, #16]	; (80a53d0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a53be:	4905      	ldr	r1, [pc, #20]	; (80a53d4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a53c0:	b002      	add	sp, #8
 80a53c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a53c6:	f000 b847 	b.w	80a5458 <__aeabi_atexit>
 80a53ca:	bf00      	nop
 80a53cc:	200004bc 	.word	0x200004bc
 80a53d0:	20000128 	.word	0x20000128
 80a53d4:	080a4c3d 	.word	0x080a4c3d

080a53d8 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a53d8:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a53da:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a53dc:	2520      	movs	r5, #32
 80a53de:	8043      	strh	r3, [r0, #2]
 80a53e0:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53e2:	4e08      	ldr	r6, [pc, #32]	; (80a5404 <_Z17acquireWireBufferv+0x2c>)
{
 80a53e4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a53e6:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53e8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a53ea:	6085      	str	r5, [r0, #8]
 80a53ec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53ee:	4628      	mov	r0, r5
 80a53f0:	f000 f839 	bl	80a5466 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53f4:	4631      	mov	r1, r6
	};
 80a53f6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53f8:	4628      	mov	r0, r5
 80a53fa:	f000 f834 	bl	80a5466 <_ZnajRKSt9nothrow_t>
	};
 80a53fe:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a5400:	4620      	mov	r0, r4
 80a5402:	bd70      	pop	{r4, r5, r6, pc}
 80a5404:	080a8cfc 	.word	0x080a8cfc

080a5408 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a5408:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a540a:	4d0f      	ldr	r5, [pc, #60]	; (80a5448 <_Z19__fetch_global_Wirev+0x40>)
{
 80a540c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a540e:	7829      	ldrb	r1, [r5, #0]
 80a5410:	f3bf 8f5b 	dmb	ish
 80a5414:	f011 0401 	ands.w	r4, r1, #1
 80a5418:	d113      	bne.n	80a5442 <_Z19__fetch_global_Wirev+0x3a>
 80a541a:	4628      	mov	r0, r5
 80a541c:	f7fa fe41 	bl	80a00a2 <__cxa_guard_acquire>
 80a5420:	b178      	cbz	r0, 80a5442 <_Z19__fetch_global_Wirev+0x3a>
 80a5422:	a801      	add	r0, sp, #4
 80a5424:	f7ff ffd8 	bl	80a53d8 <_Z17acquireWireBufferv>
 80a5428:	4621      	mov	r1, r4
 80a542a:	aa01      	add	r2, sp, #4
 80a542c:	4807      	ldr	r0, [pc, #28]	; (80a544c <_Z19__fetch_global_Wirev+0x44>)
 80a542e:	f7ff fdf5 	bl	80a501c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a5432:	4628      	mov	r0, r5
 80a5434:	f7fa fe3a 	bl	80a00ac <__cxa_guard_release>
 80a5438:	4a05      	ldr	r2, [pc, #20]	; (80a5450 <_Z19__fetch_global_Wirev+0x48>)
 80a543a:	4906      	ldr	r1, [pc, #24]	; (80a5454 <_Z19__fetch_global_Wirev+0x4c>)
 80a543c:	4803      	ldr	r0, [pc, #12]	; (80a544c <_Z19__fetch_global_Wirev+0x44>)
 80a543e:	f000 f80b 	bl	80a5458 <__aeabi_atexit>
	return wire;
}
 80a5442:	4802      	ldr	r0, [pc, #8]	; (80a544c <_Z19__fetch_global_Wirev+0x44>)
 80a5444:	b007      	add	sp, #28
 80a5446:	bd30      	pop	{r4, r5, pc}
 80a5448:	200004d4 	.word	0x200004d4
 80a544c:	200004d8 	.word	0x200004d8
 80a5450:	20000128 	.word	0x20000128
 80a5454:	080a4fc5 	.word	0x080a4fc5

080a5458 <__aeabi_atexit>:
 80a5458:	460b      	mov	r3, r1
 80a545a:	4601      	mov	r1, r0
 80a545c:	4618      	mov	r0, r3
 80a545e:	f001 b9f3 	b.w	80a6848 <__cxa_atexit>

080a5462 <_ZdlPvj>:
 80a5462:	f7fa be1c 	b.w	80a009e <_ZdlPv>

080a5466 <_ZnajRKSt9nothrow_t>:
 80a5466:	f7fa be18 	b.w	80a009a <_Znaj>

080a546a <_ZSt25__throw_bad_function_callv>:
 80a546a:	b508      	push	{r3, lr}
 80a546c:	f7fe fa86 	bl	80a397c <abort>

080a5470 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a5470:	4901      	ldr	r1, [pc, #4]	; (80a5478 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a5472:	f000 b8fb 	b.w	80a566c <_ZNKSt9type_infoeqERKS_>
 80a5476:	bf00      	nop
 80a5478:	080a8d18 	.word	0x080a8d18

080a547c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a547c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a547e:	2400      	movs	r4, #0
 80a5480:	2310      	movs	r3, #16
 80a5482:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a5486:	6803      	ldr	r3, [r0, #0]
 80a5488:	4615      	mov	r5, r2
 80a548a:	699e      	ldr	r6, [r3, #24]
 80a548c:	6812      	ldr	r2, [r2, #0]
 80a548e:	466b      	mov	r3, sp
 80a5490:	9400      	str	r4, [sp, #0]
 80a5492:	f88d 4004 	strb.w	r4, [sp, #4]
 80a5496:	47b0      	blx	r6
 80a5498:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a549c:	f003 0306 	and.w	r3, r3, #6
 80a54a0:	2b06      	cmp	r3, #6
 80a54a2:	bf09      	itett	eq
 80a54a4:	2001      	moveq	r0, #1
 80a54a6:	4620      	movne	r0, r4
 80a54a8:	9b00      	ldreq	r3, [sp, #0]
 80a54aa:	602b      	streq	r3, [r5, #0]
 80a54ac:	b004      	add	sp, #16
 80a54ae:	bd70      	pop	{r4, r5, r6, pc}

080a54b0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a54b0:	9800      	ldr	r0, [sp, #0]
 80a54b2:	4290      	cmp	r0, r2
 80a54b4:	bf14      	ite	ne
 80a54b6:	2001      	movne	r0, #1
 80a54b8:	2006      	moveq	r0, #6
 80a54ba:	4770      	bx	lr

080a54bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a54bc:	b510      	push	{r4, lr}
 80a54be:	4604      	mov	r4, r0
 80a54c0:	4b02      	ldr	r3, [pc, #8]	; (80a54cc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a54c2:	6003      	str	r3, [r0, #0]
 80a54c4:	f000 f8cf 	bl	80a5666 <_ZNSt9type_infoD1Ev>
 80a54c8:	4620      	mov	r0, r4
 80a54ca:	bd10      	pop	{r4, pc}
 80a54cc:	080a8d58 	.word	0x080a8d58

080a54d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a54d0:	b510      	push	{r4, lr}
 80a54d2:	4604      	mov	r4, r0
 80a54d4:	f7ff fff2 	bl	80a54bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a54d8:	4620      	mov	r0, r4
 80a54da:	2108      	movs	r1, #8
 80a54dc:	f7ff ffc1 	bl	80a5462 <_ZdlPvj>
 80a54e0:	4620      	mov	r0, r4
 80a54e2:	bd10      	pop	{r4, pc}

080a54e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a54e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a54e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a54ec:	461f      	mov	r7, r3
 80a54ee:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a54f2:	4598      	cmp	r8, r3
 80a54f4:	4606      	mov	r6, r0
 80a54f6:	4615      	mov	r5, r2
 80a54f8:	d107      	bne.n	80a550a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a54fa:	9907      	ldr	r1, [sp, #28]
 80a54fc:	f000 f8b6 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a5500:	b118      	cbz	r0, 80a550a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a5502:	7165      	strb	r5, [r4, #5]
 80a5504:	2000      	movs	r0, #0
 80a5506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a550a:	4639      	mov	r1, r7
 80a550c:	4630      	mov	r0, r6
 80a550e:	f000 f8ad 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a5512:	2800      	cmp	r0, #0
 80a5514:	d0f6      	beq.n	80a5504 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a5516:	2301      	movs	r3, #1
 80a5518:	f8c4 8000 	str.w	r8, [r4]
 80a551c:	7125      	strb	r5, [r4, #4]
 80a551e:	71a3      	strb	r3, [r4, #6]
 80a5520:	e7f0      	b.n	80a5504 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a5522 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a5522:	b538      	push	{r3, r4, r5, lr}
 80a5524:	4615      	mov	r5, r2
 80a5526:	461c      	mov	r4, r3
 80a5528:	f000 f8a0 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a552c:	b120      	cbz	r0, 80a5538 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a552e:	2308      	movs	r3, #8
 80a5530:	60e3      	str	r3, [r4, #12]
 80a5532:	2306      	movs	r3, #6
 80a5534:	6025      	str	r5, [r4, #0]
 80a5536:	7123      	strb	r3, [r4, #4]
 80a5538:	bd38      	pop	{r3, r4, r5, pc}

080a553a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a553e:	4605      	mov	r5, r0
 80a5540:	460c      	mov	r4, r1
 80a5542:	4616      	mov	r6, r2
 80a5544:	461f      	mov	r7, r3
 80a5546:	f000 f891 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a554a:	b948      	cbnz	r0, 80a5560 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a554c:	2f03      	cmp	r7, #3
 80a554e:	d807      	bhi.n	80a5560 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a5550:	6823      	ldr	r3, [r4, #0]
 80a5552:	4632      	mov	r2, r6
 80a5554:	4629      	mov	r1, r5
 80a5556:	4620      	mov	r0, r4
 80a5558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a555c:	695b      	ldr	r3, [r3, #20]
 80a555e:	4718      	bx	r3
 80a5560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5564 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a5564:	b510      	push	{r4, lr}
 80a5566:	4604      	mov	r4, r0
 80a5568:	4b02      	ldr	r3, [pc, #8]	; (80a5574 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a556a:	6003      	str	r3, [r0, #0]
 80a556c:	f7ff ffa6 	bl	80a54bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a5570:	4620      	mov	r0, r4
 80a5572:	bd10      	pop	{r4, pc}
 80a5574:	080a8db8 	.word	0x080a8db8

080a5578 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a5578:	b510      	push	{r4, lr}
 80a557a:	4604      	mov	r4, r0
 80a557c:	f7ff fff2 	bl	80a5564 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a5580:	4620      	mov	r0, r4
 80a5582:	210c      	movs	r1, #12
 80a5584:	f7ff ff6d 	bl	80a5462 <_ZdlPvj>
 80a5588:	4620      	mov	r0, r4
 80a558a:	bd10      	pop	{r4, pc}

080a558c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5590:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a5594:	4606      	mov	r6, r0
 80a5596:	4590      	cmp	r8, r2
 80a5598:	460f      	mov	r7, r1
 80a559a:	4615      	mov	r5, r2
 80a559c:	461c      	mov	r4, r3
 80a559e:	d00b      	beq.n	80a55b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a55a0:	68b0      	ldr	r0, [r6, #8]
 80a55a2:	462a      	mov	r2, r5
 80a55a4:	6803      	ldr	r3, [r0, #0]
 80a55a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80a55aa:	6a1e      	ldr	r6, [r3, #32]
 80a55ac:	4639      	mov	r1, r7
 80a55ae:	4623      	mov	r3, r4
 80a55b0:	46b4      	mov	ip, r6
 80a55b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a55b6:	4760      	bx	ip
 80a55b8:	4619      	mov	r1, r3
 80a55ba:	f000 f857 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a55be:	2800      	cmp	r0, #0
 80a55c0:	d0ee      	beq.n	80a55a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a55c2:	2006      	movs	r0, #6
 80a55c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a55c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a55c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a55cc:	460d      	mov	r5, r1
 80a55ce:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a55d2:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a55d6:	4619      	mov	r1, r3
 80a55d8:	4681      	mov	r9, r0
 80a55da:	4617      	mov	r7, r2
 80a55dc:	4698      	mov	r8, r3
 80a55de:	f000 f845 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a55e2:	b190      	cbz	r0, 80a560a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a55e4:	2d00      	cmp	r5, #0
 80a55e6:	6034      	str	r4, [r6, #0]
 80a55e8:	7137      	strb	r7, [r6, #4]
 80a55ea:	db09      	blt.n	80a5600 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a55ec:	442c      	add	r4, r5
 80a55ee:	45a2      	cmp	sl, r4
 80a55f0:	bf0c      	ite	eq
 80a55f2:	2406      	moveq	r4, #6
 80a55f4:	2401      	movne	r4, #1
 80a55f6:	71b4      	strb	r4, [r6, #6]
 80a55f8:	2000      	movs	r0, #0
 80a55fa:	b001      	add	sp, #4
 80a55fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5600:	3502      	adds	r5, #2
 80a5602:	d1f9      	bne.n	80a55f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5604:	2301      	movs	r3, #1
 80a5606:	71b3      	strb	r3, [r6, #6]
 80a5608:	e7f6      	b.n	80a55f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a560a:	4554      	cmp	r4, sl
 80a560c:	d106      	bne.n	80a561c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a560e:	4659      	mov	r1, fp
 80a5610:	4648      	mov	r0, r9
 80a5612:	f000 f82b 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a5616:	b108      	cbz	r0, 80a561c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a5618:	7177      	strb	r7, [r6, #5]
 80a561a:	e7ed      	b.n	80a55f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a561c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a5620:	463a      	mov	r2, r7
 80a5622:	6803      	ldr	r3, [r0, #0]
 80a5624:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a5628:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a562c:	69dc      	ldr	r4, [r3, #28]
 80a562e:	4629      	mov	r1, r5
 80a5630:	4643      	mov	r3, r8
 80a5632:	46a4      	mov	ip, r4
 80a5634:	b001      	add	sp, #4
 80a5636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a563a:	4760      	bx	ip

080a563c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5640:	4607      	mov	r7, r0
 80a5642:	460c      	mov	r4, r1
 80a5644:	4615      	mov	r5, r2
 80a5646:	461e      	mov	r6, r3
 80a5648:	f7ff ff6b 	bl	80a5522 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a564c:	b948      	cbnz	r0, 80a5662 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a564e:	68b8      	ldr	r0, [r7, #8]
 80a5650:	462a      	mov	r2, r5
 80a5652:	6803      	ldr	r3, [r0, #0]
 80a5654:	4621      	mov	r1, r4
 80a5656:	699f      	ldr	r7, [r3, #24]
 80a5658:	4633      	mov	r3, r6
 80a565a:	46bc      	mov	ip, r7
 80a565c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a5660:	4760      	bx	ip
 80a5662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5666 <_ZNSt9type_infoD1Ev>:
 80a5666:	4770      	bx	lr

080a5668 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a5668:	2000      	movs	r0, #0
 80a566a:	4770      	bx	lr

080a566c <_ZNKSt9type_infoeqERKS_>:
 80a566c:	4281      	cmp	r1, r0
 80a566e:	b508      	push	{r3, lr}
 80a5670:	d00e      	beq.n	80a5690 <_ZNKSt9type_infoeqERKS_+0x24>
 80a5672:	6840      	ldr	r0, [r0, #4]
 80a5674:	7803      	ldrb	r3, [r0, #0]
 80a5676:	2b2a      	cmp	r3, #42	; 0x2a
 80a5678:	d00c      	beq.n	80a5694 <_ZNKSt9type_infoeqERKS_+0x28>
 80a567a:	6849      	ldr	r1, [r1, #4]
 80a567c:	780b      	ldrb	r3, [r1, #0]
 80a567e:	2b2a      	cmp	r3, #42	; 0x2a
 80a5680:	bf08      	it	eq
 80a5682:	3101      	addeq	r1, #1
 80a5684:	f001 fa1e 	bl	80a6ac4 <strcmp>
 80a5688:	fab0 f080 	clz	r0, r0
 80a568c:	0940      	lsrs	r0, r0, #5
 80a568e:	bd08      	pop	{r3, pc}
 80a5690:	2001      	movs	r0, #1
 80a5692:	e7fc      	b.n	80a568e <_ZNKSt9type_infoeqERKS_+0x22>
 80a5694:	2000      	movs	r0, #0
 80a5696:	e7fa      	b.n	80a568e <_ZNKSt9type_infoeqERKS_+0x22>

080a5698 <__aeabi_drsub>:
 80a5698:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a569c:	e002      	b.n	80a56a4 <__adddf3>
 80a569e:	bf00      	nop

080a56a0 <__aeabi_dsub>:
 80a56a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a56a4 <__adddf3>:
 80a56a4:	b530      	push	{r4, r5, lr}
 80a56a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a56aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a56ae:	ea94 0f05 	teq	r4, r5
 80a56b2:	bf08      	it	eq
 80a56b4:	ea90 0f02 	teqeq	r0, r2
 80a56b8:	bf1f      	itttt	ne
 80a56ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a56be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a56c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a56c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a56ca:	f000 80e2 	beq.w	80a5892 <__adddf3+0x1ee>
 80a56ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a56d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a56d6:	bfb8      	it	lt
 80a56d8:	426d      	neglt	r5, r5
 80a56da:	dd0c      	ble.n	80a56f6 <__adddf3+0x52>
 80a56dc:	442c      	add	r4, r5
 80a56de:	ea80 0202 	eor.w	r2, r0, r2
 80a56e2:	ea81 0303 	eor.w	r3, r1, r3
 80a56e6:	ea82 0000 	eor.w	r0, r2, r0
 80a56ea:	ea83 0101 	eor.w	r1, r3, r1
 80a56ee:	ea80 0202 	eor.w	r2, r0, r2
 80a56f2:	ea81 0303 	eor.w	r3, r1, r3
 80a56f6:	2d36      	cmp	r5, #54	; 0x36
 80a56f8:	bf88      	it	hi
 80a56fa:	bd30      	pophi	{r4, r5, pc}
 80a56fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5700:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5704:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a5708:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a570c:	d002      	beq.n	80a5714 <__adddf3+0x70>
 80a570e:	4240      	negs	r0, r0
 80a5710:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5714:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a5718:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a571c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a5720:	d002      	beq.n	80a5728 <__adddf3+0x84>
 80a5722:	4252      	negs	r2, r2
 80a5724:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5728:	ea94 0f05 	teq	r4, r5
 80a572c:	f000 80a7 	beq.w	80a587e <__adddf3+0x1da>
 80a5730:	f1a4 0401 	sub.w	r4, r4, #1
 80a5734:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5738:	db0d      	blt.n	80a5756 <__adddf3+0xb2>
 80a573a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a573e:	fa22 f205 	lsr.w	r2, r2, r5
 80a5742:	1880      	adds	r0, r0, r2
 80a5744:	f141 0100 	adc.w	r1, r1, #0
 80a5748:	fa03 f20e 	lsl.w	r2, r3, lr
 80a574c:	1880      	adds	r0, r0, r2
 80a574e:	fa43 f305 	asr.w	r3, r3, r5
 80a5752:	4159      	adcs	r1, r3
 80a5754:	e00e      	b.n	80a5774 <__adddf3+0xd0>
 80a5756:	f1a5 0520 	sub.w	r5, r5, #32
 80a575a:	f10e 0e20 	add.w	lr, lr, #32
 80a575e:	2a01      	cmp	r2, #1
 80a5760:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a5764:	bf28      	it	cs
 80a5766:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a576a:	fa43 f305 	asr.w	r3, r3, r5
 80a576e:	18c0      	adds	r0, r0, r3
 80a5770:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a5774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5778:	d507      	bpl.n	80a578a <__adddf3+0xe6>
 80a577a:	f04f 0e00 	mov.w	lr, #0
 80a577e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a5782:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a5786:	eb6e 0101 	sbc.w	r1, lr, r1
 80a578a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a578e:	d31b      	bcc.n	80a57c8 <__adddf3+0x124>
 80a5790:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5794:	d30c      	bcc.n	80a57b0 <__adddf3+0x10c>
 80a5796:	0849      	lsrs	r1, r1, #1
 80a5798:	ea5f 0030 	movs.w	r0, r0, rrx
 80a579c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a57a0:	f104 0401 	add.w	r4, r4, #1
 80a57a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a57a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a57ac:	f080 809a 	bcs.w	80a58e4 <__adddf3+0x240>
 80a57b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a57b4:	bf08      	it	eq
 80a57b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a57ba:	f150 0000 	adcs.w	r0, r0, #0
 80a57be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a57c2:	ea41 0105 	orr.w	r1, r1, r5
 80a57c6:	bd30      	pop	{r4, r5, pc}
 80a57c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a57cc:	4140      	adcs	r0, r0
 80a57ce:	eb41 0101 	adc.w	r1, r1, r1
 80a57d2:	3c01      	subs	r4, #1
 80a57d4:	bf28      	it	cs
 80a57d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a57da:	d2e9      	bcs.n	80a57b0 <__adddf3+0x10c>
 80a57dc:	f091 0f00 	teq	r1, #0
 80a57e0:	bf04      	itt	eq
 80a57e2:	4601      	moveq	r1, r0
 80a57e4:	2000      	moveq	r0, #0
 80a57e6:	fab1 f381 	clz	r3, r1
 80a57ea:	bf08      	it	eq
 80a57ec:	3320      	addeq	r3, #32
 80a57ee:	f1a3 030b 	sub.w	r3, r3, #11
 80a57f2:	f1b3 0220 	subs.w	r2, r3, #32
 80a57f6:	da0c      	bge.n	80a5812 <__adddf3+0x16e>
 80a57f8:	320c      	adds	r2, #12
 80a57fa:	dd08      	ble.n	80a580e <__adddf3+0x16a>
 80a57fc:	f102 0c14 	add.w	ip, r2, #20
 80a5800:	f1c2 020c 	rsb	r2, r2, #12
 80a5804:	fa01 f00c 	lsl.w	r0, r1, ip
 80a5808:	fa21 f102 	lsr.w	r1, r1, r2
 80a580c:	e00c      	b.n	80a5828 <__adddf3+0x184>
 80a580e:	f102 0214 	add.w	r2, r2, #20
 80a5812:	bfd8      	it	le
 80a5814:	f1c2 0c20 	rsble	ip, r2, #32
 80a5818:	fa01 f102 	lsl.w	r1, r1, r2
 80a581c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5820:	bfdc      	itt	le
 80a5822:	ea41 010c 	orrle.w	r1, r1, ip
 80a5826:	4090      	lslle	r0, r2
 80a5828:	1ae4      	subs	r4, r4, r3
 80a582a:	bfa2      	ittt	ge
 80a582c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a5830:	4329      	orrge	r1, r5
 80a5832:	bd30      	popge	{r4, r5, pc}
 80a5834:	ea6f 0404 	mvn.w	r4, r4
 80a5838:	3c1f      	subs	r4, #31
 80a583a:	da1c      	bge.n	80a5876 <__adddf3+0x1d2>
 80a583c:	340c      	adds	r4, #12
 80a583e:	dc0e      	bgt.n	80a585e <__adddf3+0x1ba>
 80a5840:	f104 0414 	add.w	r4, r4, #20
 80a5844:	f1c4 0220 	rsb	r2, r4, #32
 80a5848:	fa20 f004 	lsr.w	r0, r0, r4
 80a584c:	fa01 f302 	lsl.w	r3, r1, r2
 80a5850:	ea40 0003 	orr.w	r0, r0, r3
 80a5854:	fa21 f304 	lsr.w	r3, r1, r4
 80a5858:	ea45 0103 	orr.w	r1, r5, r3
 80a585c:	bd30      	pop	{r4, r5, pc}
 80a585e:	f1c4 040c 	rsb	r4, r4, #12
 80a5862:	f1c4 0220 	rsb	r2, r4, #32
 80a5866:	fa20 f002 	lsr.w	r0, r0, r2
 80a586a:	fa01 f304 	lsl.w	r3, r1, r4
 80a586e:	ea40 0003 	orr.w	r0, r0, r3
 80a5872:	4629      	mov	r1, r5
 80a5874:	bd30      	pop	{r4, r5, pc}
 80a5876:	fa21 f004 	lsr.w	r0, r1, r4
 80a587a:	4629      	mov	r1, r5
 80a587c:	bd30      	pop	{r4, r5, pc}
 80a587e:	f094 0f00 	teq	r4, #0
 80a5882:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a5886:	bf06      	itte	eq
 80a5888:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a588c:	3401      	addeq	r4, #1
 80a588e:	3d01      	subne	r5, #1
 80a5890:	e74e      	b.n	80a5730 <__adddf3+0x8c>
 80a5892:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5896:	bf18      	it	ne
 80a5898:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a589c:	d029      	beq.n	80a58f2 <__adddf3+0x24e>
 80a589e:	ea94 0f05 	teq	r4, r5
 80a58a2:	bf08      	it	eq
 80a58a4:	ea90 0f02 	teqeq	r0, r2
 80a58a8:	d005      	beq.n	80a58b6 <__adddf3+0x212>
 80a58aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80a58ae:	bf04      	itt	eq
 80a58b0:	4619      	moveq	r1, r3
 80a58b2:	4610      	moveq	r0, r2
 80a58b4:	bd30      	pop	{r4, r5, pc}
 80a58b6:	ea91 0f03 	teq	r1, r3
 80a58ba:	bf1e      	ittt	ne
 80a58bc:	2100      	movne	r1, #0
 80a58be:	2000      	movne	r0, #0
 80a58c0:	bd30      	popne	{r4, r5, pc}
 80a58c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a58c6:	d105      	bne.n	80a58d4 <__adddf3+0x230>
 80a58c8:	0040      	lsls	r0, r0, #1
 80a58ca:	4149      	adcs	r1, r1
 80a58cc:	bf28      	it	cs
 80a58ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a58d2:	bd30      	pop	{r4, r5, pc}
 80a58d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a58d8:	bf3c      	itt	cc
 80a58da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a58de:	bd30      	popcc	{r4, r5, pc}
 80a58e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a58e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a58e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a58ec:	f04f 0000 	mov.w	r0, #0
 80a58f0:	bd30      	pop	{r4, r5, pc}
 80a58f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a58f6:	bf1a      	itte	ne
 80a58f8:	4619      	movne	r1, r3
 80a58fa:	4610      	movne	r0, r2
 80a58fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a5900:	bf1c      	itt	ne
 80a5902:	460b      	movne	r3, r1
 80a5904:	4602      	movne	r2, r0
 80a5906:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a590a:	bf06      	itte	eq
 80a590c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5910:	ea91 0f03 	teqeq	r1, r3
 80a5914:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5918:	bd30      	pop	{r4, r5, pc}
 80a591a:	bf00      	nop

080a591c <__aeabi_ui2d>:
 80a591c:	f090 0f00 	teq	r0, #0
 80a5920:	bf04      	itt	eq
 80a5922:	2100      	moveq	r1, #0
 80a5924:	4770      	bxeq	lr
 80a5926:	b530      	push	{r4, r5, lr}
 80a5928:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a592c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5930:	f04f 0500 	mov.w	r5, #0
 80a5934:	f04f 0100 	mov.w	r1, #0
 80a5938:	e750      	b.n	80a57dc <__adddf3+0x138>
 80a593a:	bf00      	nop

080a593c <__aeabi_i2d>:
 80a593c:	f090 0f00 	teq	r0, #0
 80a5940:	bf04      	itt	eq
 80a5942:	2100      	moveq	r1, #0
 80a5944:	4770      	bxeq	lr
 80a5946:	b530      	push	{r4, r5, lr}
 80a5948:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a594c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5950:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5954:	bf48      	it	mi
 80a5956:	4240      	negmi	r0, r0
 80a5958:	f04f 0100 	mov.w	r1, #0
 80a595c:	e73e      	b.n	80a57dc <__adddf3+0x138>
 80a595e:	bf00      	nop

080a5960 <__aeabi_f2d>:
 80a5960:	0042      	lsls	r2, r0, #1
 80a5962:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a5966:	ea4f 0131 	mov.w	r1, r1, rrx
 80a596a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a596e:	bf1f      	itttt	ne
 80a5970:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5974:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5978:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a597c:	4770      	bxne	lr
 80a597e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a5982:	bf08      	it	eq
 80a5984:	4770      	bxeq	lr
 80a5986:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a598a:	bf04      	itt	eq
 80a598c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a5990:	4770      	bxeq	lr
 80a5992:	b530      	push	{r4, r5, lr}
 80a5994:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5998:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a599c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a59a0:	e71c      	b.n	80a57dc <__adddf3+0x138>
 80a59a2:	bf00      	nop

080a59a4 <__aeabi_ul2d>:
 80a59a4:	ea50 0201 	orrs.w	r2, r0, r1
 80a59a8:	bf08      	it	eq
 80a59aa:	4770      	bxeq	lr
 80a59ac:	b530      	push	{r4, r5, lr}
 80a59ae:	f04f 0500 	mov.w	r5, #0
 80a59b2:	e00a      	b.n	80a59ca <__aeabi_l2d+0x16>

080a59b4 <__aeabi_l2d>:
 80a59b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a59b8:	bf08      	it	eq
 80a59ba:	4770      	bxeq	lr
 80a59bc:	b530      	push	{r4, r5, lr}
 80a59be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a59c2:	d502      	bpl.n	80a59ca <__aeabi_l2d+0x16>
 80a59c4:	4240      	negs	r0, r0
 80a59c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a59ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a59ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a59d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a59d6:	f43f aed8 	beq.w	80a578a <__adddf3+0xe6>
 80a59da:	f04f 0203 	mov.w	r2, #3
 80a59de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59e2:	bf18      	it	ne
 80a59e4:	3203      	addne	r2, #3
 80a59e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59ea:	bf18      	it	ne
 80a59ec:	3203      	addne	r2, #3
 80a59ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a59f2:	f1c2 0320 	rsb	r3, r2, #32
 80a59f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a59fa:	fa20 f002 	lsr.w	r0, r0, r2
 80a59fe:	fa01 fe03 	lsl.w	lr, r1, r3
 80a5a02:	ea40 000e 	orr.w	r0, r0, lr
 80a5a06:	fa21 f102 	lsr.w	r1, r1, r2
 80a5a0a:	4414      	add	r4, r2
 80a5a0c:	e6bd      	b.n	80a578a <__adddf3+0xe6>
 80a5a0e:	bf00      	nop

080a5a10 <__aeabi_dmul>:
 80a5a10:	b570      	push	{r4, r5, r6, lr}
 80a5a12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5a16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5a1e:	bf1d      	ittte	ne
 80a5a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5a24:	ea94 0f0c 	teqne	r4, ip
 80a5a28:	ea95 0f0c 	teqne	r5, ip
 80a5a2c:	f000 f8de 	bleq	80a5bec <__aeabi_dmul+0x1dc>
 80a5a30:	442c      	add	r4, r5
 80a5a32:	ea81 0603 	eor.w	r6, r1, r3
 80a5a36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5a3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5a3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5a42:	bf18      	it	ne
 80a5a44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5a50:	d038      	beq.n	80a5ac4 <__aeabi_dmul+0xb4>
 80a5a52:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5a56:	f04f 0500 	mov.w	r5, #0
 80a5a5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5a5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5a62:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5a66:	f04f 0600 	mov.w	r6, #0
 80a5a6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5a6e:	f09c 0f00 	teq	ip, #0
 80a5a72:	bf18      	it	ne
 80a5a74:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5a78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5a7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5a80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5a84:	d204      	bcs.n	80a5a90 <__aeabi_dmul+0x80>
 80a5a86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5a8a:	416d      	adcs	r5, r5
 80a5a8c:	eb46 0606 	adc.w	r6, r6, r6
 80a5a90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5a94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5a98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5a9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5aa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5aa4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5aa8:	bf88      	it	hi
 80a5aaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5aae:	d81e      	bhi.n	80a5aee <__aeabi_dmul+0xde>
 80a5ab0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5ab4:	bf08      	it	eq
 80a5ab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5aba:	f150 0000 	adcs.w	r0, r0, #0
 80a5abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5ac2:	bd70      	pop	{r4, r5, r6, pc}
 80a5ac4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5ac8:	ea46 0101 	orr.w	r1, r6, r1
 80a5acc:	ea40 0002 	orr.w	r0, r0, r2
 80a5ad0:	ea81 0103 	eor.w	r1, r1, r3
 80a5ad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5ad8:	bfc2      	ittt	gt
 80a5ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5ae2:	bd70      	popgt	{r4, r5, r6, pc}
 80a5ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5ae8:	f04f 0e00 	mov.w	lr, #0
 80a5aec:	3c01      	subs	r4, #1
 80a5aee:	f300 80ab 	bgt.w	80a5c48 <__aeabi_dmul+0x238>
 80a5af2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5af6:	bfde      	ittt	le
 80a5af8:	2000      	movle	r0, #0
 80a5afa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5afe:	bd70      	pople	{r4, r5, r6, pc}
 80a5b00:	f1c4 0400 	rsb	r4, r4, #0
 80a5b04:	3c20      	subs	r4, #32
 80a5b06:	da35      	bge.n	80a5b74 <__aeabi_dmul+0x164>
 80a5b08:	340c      	adds	r4, #12
 80a5b0a:	dc1b      	bgt.n	80a5b44 <__aeabi_dmul+0x134>
 80a5b0c:	f104 0414 	add.w	r4, r4, #20
 80a5b10:	f1c4 0520 	rsb	r5, r4, #32
 80a5b14:	fa00 f305 	lsl.w	r3, r0, r5
 80a5b18:	fa20 f004 	lsr.w	r0, r0, r4
 80a5b1c:	fa01 f205 	lsl.w	r2, r1, r5
 80a5b20:	ea40 0002 	orr.w	r0, r0, r2
 80a5b24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5b2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5b30:	fa21 f604 	lsr.w	r6, r1, r4
 80a5b34:	eb42 0106 	adc.w	r1, r2, r6
 80a5b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b3c:	bf08      	it	eq
 80a5b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b42:	bd70      	pop	{r4, r5, r6, pc}
 80a5b44:	f1c4 040c 	rsb	r4, r4, #12
 80a5b48:	f1c4 0520 	rsb	r5, r4, #32
 80a5b4c:	fa00 f304 	lsl.w	r3, r0, r4
 80a5b50:	fa20 f005 	lsr.w	r0, r0, r5
 80a5b54:	fa01 f204 	lsl.w	r2, r1, r4
 80a5b58:	ea40 0002 	orr.w	r0, r0, r2
 80a5b5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5b64:	f141 0100 	adc.w	r1, r1, #0
 80a5b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b6c:	bf08      	it	eq
 80a5b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b72:	bd70      	pop	{r4, r5, r6, pc}
 80a5b74:	f1c4 0520 	rsb	r5, r4, #32
 80a5b78:	fa00 f205 	lsl.w	r2, r0, r5
 80a5b7c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5b80:	fa20 f304 	lsr.w	r3, r0, r4
 80a5b84:	fa01 f205 	lsl.w	r2, r1, r5
 80a5b88:	ea43 0302 	orr.w	r3, r3, r2
 80a5b8c:	fa21 f004 	lsr.w	r0, r1, r4
 80a5b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b94:	fa21 f204 	lsr.w	r2, r1, r4
 80a5b98:	ea20 0002 	bic.w	r0, r0, r2
 80a5b9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5ba4:	bf08      	it	eq
 80a5ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5baa:	bd70      	pop	{r4, r5, r6, pc}
 80a5bac:	f094 0f00 	teq	r4, #0
 80a5bb0:	d10f      	bne.n	80a5bd2 <__aeabi_dmul+0x1c2>
 80a5bb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a5bb6:	0040      	lsls	r0, r0, #1
 80a5bb8:	eb41 0101 	adc.w	r1, r1, r1
 80a5bbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5bc0:	bf08      	it	eq
 80a5bc2:	3c01      	subeq	r4, #1
 80a5bc4:	d0f7      	beq.n	80a5bb6 <__aeabi_dmul+0x1a6>
 80a5bc6:	ea41 0106 	orr.w	r1, r1, r6
 80a5bca:	f095 0f00 	teq	r5, #0
 80a5bce:	bf18      	it	ne
 80a5bd0:	4770      	bxne	lr
 80a5bd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a5bd6:	0052      	lsls	r2, r2, #1
 80a5bd8:	eb43 0303 	adc.w	r3, r3, r3
 80a5bdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5be0:	bf08      	it	eq
 80a5be2:	3d01      	subeq	r5, #1
 80a5be4:	d0f7      	beq.n	80a5bd6 <__aeabi_dmul+0x1c6>
 80a5be6:	ea43 0306 	orr.w	r3, r3, r6
 80a5bea:	4770      	bx	lr
 80a5bec:	ea94 0f0c 	teq	r4, ip
 80a5bf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5bf4:	bf18      	it	ne
 80a5bf6:	ea95 0f0c 	teqne	r5, ip
 80a5bfa:	d00c      	beq.n	80a5c16 <__aeabi_dmul+0x206>
 80a5bfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5c00:	bf18      	it	ne
 80a5c02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5c06:	d1d1      	bne.n	80a5bac <__aeabi_dmul+0x19c>
 80a5c08:	ea81 0103 	eor.w	r1, r1, r3
 80a5c0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5c10:	f04f 0000 	mov.w	r0, #0
 80a5c14:	bd70      	pop	{r4, r5, r6, pc}
 80a5c16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5c1a:	bf06      	itte	eq
 80a5c1c:	4610      	moveq	r0, r2
 80a5c1e:	4619      	moveq	r1, r3
 80a5c20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5c24:	d019      	beq.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5c26:	ea94 0f0c 	teq	r4, ip
 80a5c2a:	d102      	bne.n	80a5c32 <__aeabi_dmul+0x222>
 80a5c2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5c30:	d113      	bne.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5c32:	ea95 0f0c 	teq	r5, ip
 80a5c36:	d105      	bne.n	80a5c44 <__aeabi_dmul+0x234>
 80a5c38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5c3c:	bf1c      	itt	ne
 80a5c3e:	4610      	movne	r0, r2
 80a5c40:	4619      	movne	r1, r3
 80a5c42:	d10a      	bne.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5c44:	ea81 0103 	eor.w	r1, r1, r3
 80a5c48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5c4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5c54:	f04f 0000 	mov.w	r0, #0
 80a5c58:	bd70      	pop	{r4, r5, r6, pc}
 80a5c5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5c62:	bd70      	pop	{r4, r5, r6, pc}

080a5c64 <__aeabi_ddiv>:
 80a5c64:	b570      	push	{r4, r5, r6, lr}
 80a5c66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5c72:	bf1d      	ittte	ne
 80a5c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5c78:	ea94 0f0c 	teqne	r4, ip
 80a5c7c:	ea95 0f0c 	teqne	r5, ip
 80a5c80:	f000 f8a7 	bleq	80a5dd2 <__aeabi_ddiv+0x16e>
 80a5c84:	eba4 0405 	sub.w	r4, r4, r5
 80a5c88:	ea81 0e03 	eor.w	lr, r1, r3
 80a5c8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5c90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5c94:	f000 8088 	beq.w	80a5da8 <__aeabi_ddiv+0x144>
 80a5c98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5c9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5ca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5ca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5ca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5cac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5cb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5cb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5cb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5cbc:	429d      	cmp	r5, r3
 80a5cbe:	bf08      	it	eq
 80a5cc0:	4296      	cmpeq	r6, r2
 80a5cc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5cc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5cca:	d202      	bcs.n	80a5cd2 <__aeabi_ddiv+0x6e>
 80a5ccc:	085b      	lsrs	r3, r3, #1
 80a5cce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cd2:	1ab6      	subs	r6, r6, r2
 80a5cd4:	eb65 0503 	sbc.w	r5, r5, r3
 80a5cd8:	085b      	lsrs	r3, r3, #1
 80a5cda:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5ce2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cee:	bf22      	ittt	cs
 80a5cf0:	1ab6      	subcs	r6, r6, r2
 80a5cf2:	4675      	movcs	r5, lr
 80a5cf4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5cf8:	085b      	lsrs	r3, r3, #1
 80a5cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d06:	bf22      	ittt	cs
 80a5d08:	1ab6      	subcs	r6, r6, r2
 80a5d0a:	4675      	movcs	r5, lr
 80a5d0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5d10:	085b      	lsrs	r3, r3, #1
 80a5d12:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5d16:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d1e:	bf22      	ittt	cs
 80a5d20:	1ab6      	subcs	r6, r6, r2
 80a5d22:	4675      	movcs	r5, lr
 80a5d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5d28:	085b      	lsrs	r3, r3, #1
 80a5d2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5d2e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d32:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d36:	bf22      	ittt	cs
 80a5d38:	1ab6      	subcs	r6, r6, r2
 80a5d3a:	4675      	movcs	r5, lr
 80a5d3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5d40:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5d44:	d018      	beq.n	80a5d78 <__aeabi_ddiv+0x114>
 80a5d46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5d4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5d4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5d52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5d56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5d5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5d5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5d62:	d1c0      	bne.n	80a5ce6 <__aeabi_ddiv+0x82>
 80a5d64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d68:	d10b      	bne.n	80a5d82 <__aeabi_ddiv+0x11e>
 80a5d6a:	ea41 0100 	orr.w	r1, r1, r0
 80a5d6e:	f04f 0000 	mov.w	r0, #0
 80a5d72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5d76:	e7b6      	b.n	80a5ce6 <__aeabi_ddiv+0x82>
 80a5d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d7c:	bf04      	itt	eq
 80a5d7e:	4301      	orreq	r1, r0
 80a5d80:	2000      	moveq	r0, #0
 80a5d82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5d86:	bf88      	it	hi
 80a5d88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5d8c:	f63f aeaf 	bhi.w	80a5aee <__aeabi_dmul+0xde>
 80a5d90:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5d94:	bf04      	itt	eq
 80a5d96:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5d9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5d9e:	f150 0000 	adcs.w	r0, r0, #0
 80a5da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5da6:	bd70      	pop	{r4, r5, r6, pc}
 80a5da8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5dac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5db0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5db4:	bfc2      	ittt	gt
 80a5db6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5dba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5dbe:	bd70      	popgt	{r4, r5, r6, pc}
 80a5dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5dc4:	f04f 0e00 	mov.w	lr, #0
 80a5dc8:	3c01      	subs	r4, #1
 80a5dca:	e690      	b.n	80a5aee <__aeabi_dmul+0xde>
 80a5dcc:	ea45 0e06 	orr.w	lr, r5, r6
 80a5dd0:	e68d      	b.n	80a5aee <__aeabi_dmul+0xde>
 80a5dd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5dd6:	ea94 0f0c 	teq	r4, ip
 80a5dda:	bf08      	it	eq
 80a5ddc:	ea95 0f0c 	teqeq	r5, ip
 80a5de0:	f43f af3b 	beq.w	80a5c5a <__aeabi_dmul+0x24a>
 80a5de4:	ea94 0f0c 	teq	r4, ip
 80a5de8:	d10a      	bne.n	80a5e00 <__aeabi_ddiv+0x19c>
 80a5dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5dee:	f47f af34 	bne.w	80a5c5a <__aeabi_dmul+0x24a>
 80a5df2:	ea95 0f0c 	teq	r5, ip
 80a5df6:	f47f af25 	bne.w	80a5c44 <__aeabi_dmul+0x234>
 80a5dfa:	4610      	mov	r0, r2
 80a5dfc:	4619      	mov	r1, r3
 80a5dfe:	e72c      	b.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5e00:	ea95 0f0c 	teq	r5, ip
 80a5e04:	d106      	bne.n	80a5e14 <__aeabi_ddiv+0x1b0>
 80a5e06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5e0a:	f43f aefd 	beq.w	80a5c08 <__aeabi_dmul+0x1f8>
 80a5e0e:	4610      	mov	r0, r2
 80a5e10:	4619      	mov	r1, r3
 80a5e12:	e722      	b.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5e14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5e18:	bf18      	it	ne
 80a5e1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5e1e:	f47f aec5 	bne.w	80a5bac <__aeabi_dmul+0x19c>
 80a5e22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5e26:	f47f af0d 	bne.w	80a5c44 <__aeabi_dmul+0x234>
 80a5e2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5e2e:	f47f aeeb 	bne.w	80a5c08 <__aeabi_dmul+0x1f8>
 80a5e32:	e712      	b.n	80a5c5a <__aeabi_dmul+0x24a>

080a5e34 <__aeabi_d2uiz>:
 80a5e34:	004a      	lsls	r2, r1, #1
 80a5e36:	d211      	bcs.n	80a5e5c <__aeabi_d2uiz+0x28>
 80a5e38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5e3c:	d211      	bcs.n	80a5e62 <__aeabi_d2uiz+0x2e>
 80a5e3e:	d50d      	bpl.n	80a5e5c <__aeabi_d2uiz+0x28>
 80a5e40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5e44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5e48:	d40e      	bmi.n	80a5e68 <__aeabi_d2uiz+0x34>
 80a5e4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5e52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5e56:	fa23 f002 	lsr.w	r0, r3, r2
 80a5e5a:	4770      	bx	lr
 80a5e5c:	f04f 0000 	mov.w	r0, #0
 80a5e60:	4770      	bx	lr
 80a5e62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5e66:	d102      	bne.n	80a5e6e <__aeabi_d2uiz+0x3a>
 80a5e68:	f04f 30ff 	mov.w	r0, #4294967295
 80a5e6c:	4770      	bx	lr
 80a5e6e:	f04f 0000 	mov.w	r0, #0
 80a5e72:	4770      	bx	lr

080a5e74 <__aeabi_d2f>:
 80a5e74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5e78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a5e7c:	bf24      	itt	cs
 80a5e7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5e82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5e86:	d90d      	bls.n	80a5ea4 <__aeabi_d2f+0x30>
 80a5e88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5e8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5e90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5e94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5e98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a5e9c:	bf08      	it	eq
 80a5e9e:	f020 0001 	biceq.w	r0, r0, #1
 80a5ea2:	4770      	bx	lr
 80a5ea4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5ea8:	d121      	bne.n	80a5eee <__aeabi_d2f+0x7a>
 80a5eaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a5eae:	bfbc      	itt	lt
 80a5eb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5eb4:	4770      	bxlt	lr
 80a5eb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5eba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a5ebe:	f1c2 0218 	rsb	r2, r2, #24
 80a5ec2:	f1c2 0c20 	rsb	ip, r2, #32
 80a5ec6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a5eca:	fa20 f002 	lsr.w	r0, r0, r2
 80a5ece:	bf18      	it	ne
 80a5ed0:	f040 0001 	orrne.w	r0, r0, #1
 80a5ed4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5ed8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5edc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5ee0:	ea40 000c 	orr.w	r0, r0, ip
 80a5ee4:	fa23 f302 	lsr.w	r3, r3, r2
 80a5ee8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a5eec:	e7cc      	b.n	80a5e88 <__aeabi_d2f+0x14>
 80a5eee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a5ef2:	d107      	bne.n	80a5f04 <__aeabi_d2f+0x90>
 80a5ef4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a5ef8:	bf1e      	ittt	ne
 80a5efa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a5efe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a5f02:	4770      	bxne	lr
 80a5f04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a5f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5f10:	4770      	bx	lr
 80a5f12:	bf00      	nop

080a5f14 <__aeabi_frsub>:
 80a5f14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5f18:	e002      	b.n	80a5f20 <__addsf3>
 80a5f1a:	bf00      	nop

080a5f1c <__aeabi_fsub>:
 80a5f1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5f20 <__addsf3>:
 80a5f20:	0042      	lsls	r2, r0, #1
 80a5f22:	bf1f      	itttt	ne
 80a5f24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5f28:	ea92 0f03 	teqne	r2, r3
 80a5f2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5f30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5f34:	d06a      	beq.n	80a600c <__addsf3+0xec>
 80a5f36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a5f3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a5f3e:	bfc1      	itttt	gt
 80a5f40:	18d2      	addgt	r2, r2, r3
 80a5f42:	4041      	eorgt	r1, r0
 80a5f44:	4048      	eorgt	r0, r1
 80a5f46:	4041      	eorgt	r1, r0
 80a5f48:	bfb8      	it	lt
 80a5f4a:	425b      	neglt	r3, r3
 80a5f4c:	2b19      	cmp	r3, #25
 80a5f4e:	bf88      	it	hi
 80a5f50:	4770      	bxhi	lr
 80a5f52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5f5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a5f5e:	bf18      	it	ne
 80a5f60:	4240      	negne	r0, r0
 80a5f62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5f66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a5f6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a5f6e:	bf18      	it	ne
 80a5f70:	4249      	negne	r1, r1
 80a5f72:	ea92 0f03 	teq	r2, r3
 80a5f76:	d03f      	beq.n	80a5ff8 <__addsf3+0xd8>
 80a5f78:	f1a2 0201 	sub.w	r2, r2, #1
 80a5f7c:	fa41 fc03 	asr.w	ip, r1, r3
 80a5f80:	eb10 000c 	adds.w	r0, r0, ip
 80a5f84:	f1c3 0320 	rsb	r3, r3, #32
 80a5f88:	fa01 f103 	lsl.w	r1, r1, r3
 80a5f8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5f90:	d502      	bpl.n	80a5f98 <__addsf3+0x78>
 80a5f92:	4249      	negs	r1, r1
 80a5f94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5f98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5f9c:	d313      	bcc.n	80a5fc6 <__addsf3+0xa6>
 80a5f9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5fa2:	d306      	bcc.n	80a5fb2 <__addsf3+0x92>
 80a5fa4:	0840      	lsrs	r0, r0, #1
 80a5fa6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5faa:	f102 0201 	add.w	r2, r2, #1
 80a5fae:	2afe      	cmp	r2, #254	; 0xfe
 80a5fb0:	d251      	bcs.n	80a6056 <__addsf3+0x136>
 80a5fb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5fb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5fba:	bf08      	it	eq
 80a5fbc:	f020 0001 	biceq.w	r0, r0, #1
 80a5fc0:	ea40 0003 	orr.w	r0, r0, r3
 80a5fc4:	4770      	bx	lr
 80a5fc6:	0049      	lsls	r1, r1, #1
 80a5fc8:	eb40 0000 	adc.w	r0, r0, r0
 80a5fcc:	3a01      	subs	r2, #1
 80a5fce:	bf28      	it	cs
 80a5fd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a5fd4:	d2ed      	bcs.n	80a5fb2 <__addsf3+0x92>
 80a5fd6:	fab0 fc80 	clz	ip, r0
 80a5fda:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5fde:	ebb2 020c 	subs.w	r2, r2, ip
 80a5fe2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5fe6:	bfaa      	itet	ge
 80a5fe8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5fec:	4252      	neglt	r2, r2
 80a5fee:	4318      	orrge	r0, r3
 80a5ff0:	bfbc      	itt	lt
 80a5ff2:	40d0      	lsrlt	r0, r2
 80a5ff4:	4318      	orrlt	r0, r3
 80a5ff6:	4770      	bx	lr
 80a5ff8:	f092 0f00 	teq	r2, #0
 80a5ffc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a6000:	bf06      	itte	eq
 80a6002:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a6006:	3201      	addeq	r2, #1
 80a6008:	3b01      	subne	r3, #1
 80a600a:	e7b5      	b.n	80a5f78 <__addsf3+0x58>
 80a600c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6010:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6014:	bf18      	it	ne
 80a6016:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a601a:	d021      	beq.n	80a6060 <__addsf3+0x140>
 80a601c:	ea92 0f03 	teq	r2, r3
 80a6020:	d004      	beq.n	80a602c <__addsf3+0x10c>
 80a6022:	f092 0f00 	teq	r2, #0
 80a6026:	bf08      	it	eq
 80a6028:	4608      	moveq	r0, r1
 80a602a:	4770      	bx	lr
 80a602c:	ea90 0f01 	teq	r0, r1
 80a6030:	bf1c      	itt	ne
 80a6032:	2000      	movne	r0, #0
 80a6034:	4770      	bxne	lr
 80a6036:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a603a:	d104      	bne.n	80a6046 <__addsf3+0x126>
 80a603c:	0040      	lsls	r0, r0, #1
 80a603e:	bf28      	it	cs
 80a6040:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a6044:	4770      	bx	lr
 80a6046:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a604a:	bf3c      	itt	cc
 80a604c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a6050:	4770      	bxcc	lr
 80a6052:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a6056:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a605a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a605e:	4770      	bx	lr
 80a6060:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a6064:	bf16      	itet	ne
 80a6066:	4608      	movne	r0, r1
 80a6068:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a606c:	4601      	movne	r1, r0
 80a606e:	0242      	lsls	r2, r0, #9
 80a6070:	bf06      	itte	eq
 80a6072:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a6076:	ea90 0f01 	teqeq	r0, r1
 80a607a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a607e:	4770      	bx	lr

080a6080 <__aeabi_ui2f>:
 80a6080:	f04f 0300 	mov.w	r3, #0
 80a6084:	e004      	b.n	80a6090 <__aeabi_i2f+0x8>
 80a6086:	bf00      	nop

080a6088 <__aeabi_i2f>:
 80a6088:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a608c:	bf48      	it	mi
 80a608e:	4240      	negmi	r0, r0
 80a6090:	ea5f 0c00 	movs.w	ip, r0
 80a6094:	bf08      	it	eq
 80a6096:	4770      	bxeq	lr
 80a6098:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a609c:	4601      	mov	r1, r0
 80a609e:	f04f 0000 	mov.w	r0, #0
 80a60a2:	e01c      	b.n	80a60de <__aeabi_l2f+0x2a>

080a60a4 <__aeabi_ul2f>:
 80a60a4:	ea50 0201 	orrs.w	r2, r0, r1
 80a60a8:	bf08      	it	eq
 80a60aa:	4770      	bxeq	lr
 80a60ac:	f04f 0300 	mov.w	r3, #0
 80a60b0:	e00a      	b.n	80a60c8 <__aeabi_l2f+0x14>
 80a60b2:	bf00      	nop

080a60b4 <__aeabi_l2f>:
 80a60b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a60b8:	bf08      	it	eq
 80a60ba:	4770      	bxeq	lr
 80a60bc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a60c0:	d502      	bpl.n	80a60c8 <__aeabi_l2f+0x14>
 80a60c2:	4240      	negs	r0, r0
 80a60c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a60c8:	ea5f 0c01 	movs.w	ip, r1
 80a60cc:	bf02      	ittt	eq
 80a60ce:	4684      	moveq	ip, r0
 80a60d0:	4601      	moveq	r1, r0
 80a60d2:	2000      	moveq	r0, #0
 80a60d4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a60d8:	bf08      	it	eq
 80a60da:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a60de:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a60e2:	fabc f28c 	clz	r2, ip
 80a60e6:	3a08      	subs	r2, #8
 80a60e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a60ec:	db10      	blt.n	80a6110 <__aeabi_l2f+0x5c>
 80a60ee:	fa01 fc02 	lsl.w	ip, r1, r2
 80a60f2:	4463      	add	r3, ip
 80a60f4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a60f8:	f1c2 0220 	rsb	r2, r2, #32
 80a60fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a6100:	fa20 f202 	lsr.w	r2, r0, r2
 80a6104:	eb43 0002 	adc.w	r0, r3, r2
 80a6108:	bf08      	it	eq
 80a610a:	f020 0001 	biceq.w	r0, r0, #1
 80a610e:	4770      	bx	lr
 80a6110:	f102 0220 	add.w	r2, r2, #32
 80a6114:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6118:	f1c2 0220 	rsb	r2, r2, #32
 80a611c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a6120:	fa21 f202 	lsr.w	r2, r1, r2
 80a6124:	eb43 0002 	adc.w	r0, r3, r2
 80a6128:	bf08      	it	eq
 80a612a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a612e:	4770      	bx	lr

080a6130 <__aeabi_fmul>:
 80a6130:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6134:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6138:	bf1e      	ittt	ne
 80a613a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a613e:	ea92 0f0c 	teqne	r2, ip
 80a6142:	ea93 0f0c 	teqne	r3, ip
 80a6146:	d06f      	beq.n	80a6228 <__aeabi_fmul+0xf8>
 80a6148:	441a      	add	r2, r3
 80a614a:	ea80 0c01 	eor.w	ip, r0, r1
 80a614e:	0240      	lsls	r0, r0, #9
 80a6150:	bf18      	it	ne
 80a6152:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a6156:	d01e      	beq.n	80a6196 <__aeabi_fmul+0x66>
 80a6158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a615c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a6160:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a6164:	fba0 3101 	umull	r3, r1, r0, r1
 80a6168:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a616c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a6170:	bf3e      	ittt	cc
 80a6172:	0049      	lslcc	r1, r1, #1
 80a6174:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a6178:	005b      	lslcc	r3, r3, #1
 80a617a:	ea40 0001 	orr.w	r0, r0, r1
 80a617e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a6182:	2afd      	cmp	r2, #253	; 0xfd
 80a6184:	d81d      	bhi.n	80a61c2 <__aeabi_fmul+0x92>
 80a6186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a618a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a618e:	bf08      	it	eq
 80a6190:	f020 0001 	biceq.w	r0, r0, #1
 80a6194:	4770      	bx	lr
 80a6196:	f090 0f00 	teq	r0, #0
 80a619a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a619e:	bf08      	it	eq
 80a61a0:	0249      	lsleq	r1, r1, #9
 80a61a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a61a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a61aa:	3a7f      	subs	r2, #127	; 0x7f
 80a61ac:	bfc2      	ittt	gt
 80a61ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a61b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a61b6:	4770      	bxgt	lr
 80a61b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a61bc:	f04f 0300 	mov.w	r3, #0
 80a61c0:	3a01      	subs	r2, #1
 80a61c2:	dc5d      	bgt.n	80a6280 <__aeabi_fmul+0x150>
 80a61c4:	f112 0f19 	cmn.w	r2, #25
 80a61c8:	bfdc      	itt	le
 80a61ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a61ce:	4770      	bxle	lr
 80a61d0:	f1c2 0200 	rsb	r2, r2, #0
 80a61d4:	0041      	lsls	r1, r0, #1
 80a61d6:	fa21 f102 	lsr.w	r1, r1, r2
 80a61da:	f1c2 0220 	rsb	r2, r2, #32
 80a61de:	fa00 fc02 	lsl.w	ip, r0, r2
 80a61e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a61e6:	f140 0000 	adc.w	r0, r0, #0
 80a61ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a61ee:	bf08      	it	eq
 80a61f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a61f4:	4770      	bx	lr
 80a61f6:	f092 0f00 	teq	r2, #0
 80a61fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a61fe:	bf02      	ittt	eq
 80a6200:	0040      	lsleq	r0, r0, #1
 80a6202:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6206:	3a01      	subeq	r2, #1
 80a6208:	d0f9      	beq.n	80a61fe <__aeabi_fmul+0xce>
 80a620a:	ea40 000c 	orr.w	r0, r0, ip
 80a620e:	f093 0f00 	teq	r3, #0
 80a6212:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6216:	bf02      	ittt	eq
 80a6218:	0049      	lsleq	r1, r1, #1
 80a621a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a621e:	3b01      	subeq	r3, #1
 80a6220:	d0f9      	beq.n	80a6216 <__aeabi_fmul+0xe6>
 80a6222:	ea41 010c 	orr.w	r1, r1, ip
 80a6226:	e78f      	b.n	80a6148 <__aeabi_fmul+0x18>
 80a6228:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a622c:	ea92 0f0c 	teq	r2, ip
 80a6230:	bf18      	it	ne
 80a6232:	ea93 0f0c 	teqne	r3, ip
 80a6236:	d00a      	beq.n	80a624e <__aeabi_fmul+0x11e>
 80a6238:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a623c:	bf18      	it	ne
 80a623e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6242:	d1d8      	bne.n	80a61f6 <__aeabi_fmul+0xc6>
 80a6244:	ea80 0001 	eor.w	r0, r0, r1
 80a6248:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a624c:	4770      	bx	lr
 80a624e:	f090 0f00 	teq	r0, #0
 80a6252:	bf17      	itett	ne
 80a6254:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a6258:	4608      	moveq	r0, r1
 80a625a:	f091 0f00 	teqne	r1, #0
 80a625e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a6262:	d014      	beq.n	80a628e <__aeabi_fmul+0x15e>
 80a6264:	ea92 0f0c 	teq	r2, ip
 80a6268:	d101      	bne.n	80a626e <__aeabi_fmul+0x13e>
 80a626a:	0242      	lsls	r2, r0, #9
 80a626c:	d10f      	bne.n	80a628e <__aeabi_fmul+0x15e>
 80a626e:	ea93 0f0c 	teq	r3, ip
 80a6272:	d103      	bne.n	80a627c <__aeabi_fmul+0x14c>
 80a6274:	024b      	lsls	r3, r1, #9
 80a6276:	bf18      	it	ne
 80a6278:	4608      	movne	r0, r1
 80a627a:	d108      	bne.n	80a628e <__aeabi_fmul+0x15e>
 80a627c:	ea80 0001 	eor.w	r0, r0, r1
 80a6280:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6284:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6288:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a628c:	4770      	bx	lr
 80a628e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6292:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a6296:	4770      	bx	lr

080a6298 <__aeabi_fdiv>:
 80a6298:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a629c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a62a0:	bf1e      	ittt	ne
 80a62a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a62a6:	ea92 0f0c 	teqne	r2, ip
 80a62aa:	ea93 0f0c 	teqne	r3, ip
 80a62ae:	d069      	beq.n	80a6384 <__aeabi_fdiv+0xec>
 80a62b0:	eba2 0203 	sub.w	r2, r2, r3
 80a62b4:	ea80 0c01 	eor.w	ip, r0, r1
 80a62b8:	0249      	lsls	r1, r1, #9
 80a62ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a62be:	d037      	beq.n	80a6330 <__aeabi_fdiv+0x98>
 80a62c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a62c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a62c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a62cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a62d0:	428b      	cmp	r3, r1
 80a62d2:	bf38      	it	cc
 80a62d4:	005b      	lslcc	r3, r3, #1
 80a62d6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a62da:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a62de:	428b      	cmp	r3, r1
 80a62e0:	bf24      	itt	cs
 80a62e2:	1a5b      	subcs	r3, r3, r1
 80a62e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a62e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a62ec:	bf24      	itt	cs
 80a62ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a62f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a62f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a62fa:	bf24      	itt	cs
 80a62fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a6300:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6304:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a6308:	bf24      	itt	cs
 80a630a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a630e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a6312:	011b      	lsls	r3, r3, #4
 80a6314:	bf18      	it	ne
 80a6316:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a631a:	d1e0      	bne.n	80a62de <__aeabi_fdiv+0x46>
 80a631c:	2afd      	cmp	r2, #253	; 0xfd
 80a631e:	f63f af50 	bhi.w	80a61c2 <__aeabi_fmul+0x92>
 80a6322:	428b      	cmp	r3, r1
 80a6324:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6328:	bf08      	it	eq
 80a632a:	f020 0001 	biceq.w	r0, r0, #1
 80a632e:	4770      	bx	lr
 80a6330:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6334:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6338:	327f      	adds	r2, #127	; 0x7f
 80a633a:	bfc2      	ittt	gt
 80a633c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6340:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6344:	4770      	bxgt	lr
 80a6346:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a634a:	f04f 0300 	mov.w	r3, #0
 80a634e:	3a01      	subs	r2, #1
 80a6350:	e737      	b.n	80a61c2 <__aeabi_fmul+0x92>
 80a6352:	f092 0f00 	teq	r2, #0
 80a6356:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a635a:	bf02      	ittt	eq
 80a635c:	0040      	lsleq	r0, r0, #1
 80a635e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6362:	3a01      	subeq	r2, #1
 80a6364:	d0f9      	beq.n	80a635a <__aeabi_fdiv+0xc2>
 80a6366:	ea40 000c 	orr.w	r0, r0, ip
 80a636a:	f093 0f00 	teq	r3, #0
 80a636e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6372:	bf02      	ittt	eq
 80a6374:	0049      	lsleq	r1, r1, #1
 80a6376:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a637a:	3b01      	subeq	r3, #1
 80a637c:	d0f9      	beq.n	80a6372 <__aeabi_fdiv+0xda>
 80a637e:	ea41 010c 	orr.w	r1, r1, ip
 80a6382:	e795      	b.n	80a62b0 <__aeabi_fdiv+0x18>
 80a6384:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6388:	ea92 0f0c 	teq	r2, ip
 80a638c:	d108      	bne.n	80a63a0 <__aeabi_fdiv+0x108>
 80a638e:	0242      	lsls	r2, r0, #9
 80a6390:	f47f af7d 	bne.w	80a628e <__aeabi_fmul+0x15e>
 80a6394:	ea93 0f0c 	teq	r3, ip
 80a6398:	f47f af70 	bne.w	80a627c <__aeabi_fmul+0x14c>
 80a639c:	4608      	mov	r0, r1
 80a639e:	e776      	b.n	80a628e <__aeabi_fmul+0x15e>
 80a63a0:	ea93 0f0c 	teq	r3, ip
 80a63a4:	d104      	bne.n	80a63b0 <__aeabi_fdiv+0x118>
 80a63a6:	024b      	lsls	r3, r1, #9
 80a63a8:	f43f af4c 	beq.w	80a6244 <__aeabi_fmul+0x114>
 80a63ac:	4608      	mov	r0, r1
 80a63ae:	e76e      	b.n	80a628e <__aeabi_fmul+0x15e>
 80a63b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a63b4:	bf18      	it	ne
 80a63b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a63ba:	d1ca      	bne.n	80a6352 <__aeabi_fdiv+0xba>
 80a63bc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a63c0:	f47f af5c 	bne.w	80a627c <__aeabi_fmul+0x14c>
 80a63c4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a63c8:	f47f af3c 	bne.w	80a6244 <__aeabi_fmul+0x114>
 80a63cc:	e75f      	b.n	80a628e <__aeabi_fmul+0x15e>
 80a63ce:	bf00      	nop

080a63d0 <__gesf2>:
 80a63d0:	f04f 3cff 	mov.w	ip, #4294967295
 80a63d4:	e006      	b.n	80a63e4 <__cmpsf2+0x4>
 80a63d6:	bf00      	nop

080a63d8 <__lesf2>:
 80a63d8:	f04f 0c01 	mov.w	ip, #1
 80a63dc:	e002      	b.n	80a63e4 <__cmpsf2+0x4>
 80a63de:	bf00      	nop

080a63e0 <__cmpsf2>:
 80a63e0:	f04f 0c01 	mov.w	ip, #1
 80a63e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a63e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a63ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a63f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a63f4:	bf18      	it	ne
 80a63f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a63fa:	d011      	beq.n	80a6420 <__cmpsf2+0x40>
 80a63fc:	b001      	add	sp, #4
 80a63fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a6402:	bf18      	it	ne
 80a6404:	ea90 0f01 	teqne	r0, r1
 80a6408:	bf58      	it	pl
 80a640a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a640e:	bf88      	it	hi
 80a6410:	17c8      	asrhi	r0, r1, #31
 80a6412:	bf38      	it	cc
 80a6414:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a6418:	bf18      	it	ne
 80a641a:	f040 0001 	orrne.w	r0, r0, #1
 80a641e:	4770      	bx	lr
 80a6420:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6424:	d102      	bne.n	80a642c <__cmpsf2+0x4c>
 80a6426:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a642a:	d105      	bne.n	80a6438 <__cmpsf2+0x58>
 80a642c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a6430:	d1e4      	bne.n	80a63fc <__cmpsf2+0x1c>
 80a6432:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a6436:	d0e1      	beq.n	80a63fc <__cmpsf2+0x1c>
 80a6438:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a643c:	4770      	bx	lr
 80a643e:	bf00      	nop

080a6440 <__aeabi_cfrcmple>:
 80a6440:	4684      	mov	ip, r0
 80a6442:	4608      	mov	r0, r1
 80a6444:	4661      	mov	r1, ip
 80a6446:	e7ff      	b.n	80a6448 <__aeabi_cfcmpeq>

080a6448 <__aeabi_cfcmpeq>:
 80a6448:	b50f      	push	{r0, r1, r2, r3, lr}
 80a644a:	f7ff ffc9 	bl	80a63e0 <__cmpsf2>
 80a644e:	2800      	cmp	r0, #0
 80a6450:	bf48      	it	mi
 80a6452:	f110 0f00 	cmnmi.w	r0, #0
 80a6456:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a6458 <__aeabi_fcmpeq>:
 80a6458:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a645c:	f7ff fff4 	bl	80a6448 <__aeabi_cfcmpeq>
 80a6460:	bf0c      	ite	eq
 80a6462:	2001      	moveq	r0, #1
 80a6464:	2000      	movne	r0, #0
 80a6466:	f85d fb08 	ldr.w	pc, [sp], #8
 80a646a:	bf00      	nop

080a646c <__aeabi_fcmplt>:
 80a646c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6470:	f7ff ffea 	bl	80a6448 <__aeabi_cfcmpeq>
 80a6474:	bf34      	ite	cc
 80a6476:	2001      	movcc	r0, #1
 80a6478:	2000      	movcs	r0, #0
 80a647a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a647e:	bf00      	nop

080a6480 <__aeabi_fcmple>:
 80a6480:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6484:	f7ff ffe0 	bl	80a6448 <__aeabi_cfcmpeq>
 80a6488:	bf94      	ite	ls
 80a648a:	2001      	movls	r0, #1
 80a648c:	2000      	movhi	r0, #0
 80a648e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6492:	bf00      	nop

080a6494 <__aeabi_fcmpge>:
 80a6494:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6498:	f7ff ffd2 	bl	80a6440 <__aeabi_cfrcmple>
 80a649c:	bf94      	ite	ls
 80a649e:	2001      	movls	r0, #1
 80a64a0:	2000      	movhi	r0, #0
 80a64a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a64a6:	bf00      	nop

080a64a8 <__aeabi_fcmpgt>:
 80a64a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a64ac:	f7ff ffc8 	bl	80a6440 <__aeabi_cfrcmple>
 80a64b0:	bf34      	ite	cc
 80a64b2:	2001      	movcc	r0, #1
 80a64b4:	2000      	movcs	r0, #0
 80a64b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a64ba:	bf00      	nop

080a64bc <__aeabi_f2iz>:
 80a64bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a64c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a64c4:	d30f      	bcc.n	80a64e6 <__aeabi_f2iz+0x2a>
 80a64c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a64ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a64ce:	d90d      	bls.n	80a64ec <__aeabi_f2iz+0x30>
 80a64d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a64d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a64d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a64dc:	fa23 f002 	lsr.w	r0, r3, r2
 80a64e0:	bf18      	it	ne
 80a64e2:	4240      	negne	r0, r0
 80a64e4:	4770      	bx	lr
 80a64e6:	f04f 0000 	mov.w	r0, #0
 80a64ea:	4770      	bx	lr
 80a64ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a64f0:	d101      	bne.n	80a64f6 <__aeabi_f2iz+0x3a>
 80a64f2:	0242      	lsls	r2, r0, #9
 80a64f4:	d105      	bne.n	80a6502 <__aeabi_f2iz+0x46>
 80a64f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a64fa:	bf08      	it	eq
 80a64fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6500:	4770      	bx	lr
 80a6502:	f04f 0000 	mov.w	r0, #0
 80a6506:	4770      	bx	lr

080a6508 <__aeabi_f2lz>:
 80a6508:	b510      	push	{r4, lr}
 80a650a:	2100      	movs	r1, #0
 80a650c:	4604      	mov	r4, r0
 80a650e:	f7ff ffad 	bl	80a646c <__aeabi_fcmplt>
 80a6512:	b920      	cbnz	r0, 80a651e <__aeabi_f2lz+0x16>
 80a6514:	4620      	mov	r0, r4
 80a6516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a651a:	f000 b809 	b.w	80a6530 <__aeabi_f2ulz>
 80a651e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a6522:	f000 f805 	bl	80a6530 <__aeabi_f2ulz>
 80a6526:	4240      	negs	r0, r0
 80a6528:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a652c:	bd10      	pop	{r4, pc}
 80a652e:	bf00      	nop

080a6530 <__aeabi_f2ulz>:
 80a6530:	b5d0      	push	{r4, r6, r7, lr}
 80a6532:	f7ff fa15 	bl	80a5960 <__aeabi_f2d>
 80a6536:	2200      	movs	r2, #0
 80a6538:	4b0b      	ldr	r3, [pc, #44]	; (80a6568 <__aeabi_f2ulz+0x38>)
 80a653a:	4606      	mov	r6, r0
 80a653c:	460f      	mov	r7, r1
 80a653e:	f7ff fa67 	bl	80a5a10 <__aeabi_dmul>
 80a6542:	f7ff fc77 	bl	80a5e34 <__aeabi_d2uiz>
 80a6546:	4604      	mov	r4, r0
 80a6548:	f7ff f9e8 	bl	80a591c <__aeabi_ui2d>
 80a654c:	2200      	movs	r2, #0
 80a654e:	4b07      	ldr	r3, [pc, #28]	; (80a656c <__aeabi_f2ulz+0x3c>)
 80a6550:	f7ff fa5e 	bl	80a5a10 <__aeabi_dmul>
 80a6554:	4602      	mov	r2, r0
 80a6556:	460b      	mov	r3, r1
 80a6558:	4630      	mov	r0, r6
 80a655a:	4639      	mov	r1, r7
 80a655c:	f7ff f8a0 	bl	80a56a0 <__aeabi_dsub>
 80a6560:	f7ff fc68 	bl	80a5e34 <__aeabi_d2uiz>
 80a6564:	4621      	mov	r1, r4
 80a6566:	bdd0      	pop	{r4, r6, r7, pc}
 80a6568:	3df00000 	.word	0x3df00000
 80a656c:	41f00000 	.word	0x41f00000

080a6570 <__udivmoddi4>:
 80a6570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6574:	9e08      	ldr	r6, [sp, #32]
 80a6576:	460d      	mov	r5, r1
 80a6578:	4604      	mov	r4, r0
 80a657a:	468e      	mov	lr, r1
 80a657c:	2b00      	cmp	r3, #0
 80a657e:	f040 8083 	bne.w	80a6688 <__udivmoddi4+0x118>
 80a6582:	428a      	cmp	r2, r1
 80a6584:	4617      	mov	r7, r2
 80a6586:	d947      	bls.n	80a6618 <__udivmoddi4+0xa8>
 80a6588:	fab2 f382 	clz	r3, r2
 80a658c:	b14b      	cbz	r3, 80a65a2 <__udivmoddi4+0x32>
 80a658e:	f1c3 0120 	rsb	r1, r3, #32
 80a6592:	fa05 fe03 	lsl.w	lr, r5, r3
 80a6596:	fa20 f101 	lsr.w	r1, r0, r1
 80a659a:	409f      	lsls	r7, r3
 80a659c:	ea41 0e0e 	orr.w	lr, r1, lr
 80a65a0:	409c      	lsls	r4, r3
 80a65a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a65a6:	fbbe fcf8 	udiv	ip, lr, r8
 80a65aa:	fa1f f987 	uxth.w	r9, r7
 80a65ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80a65b2:	fb0c f009 	mul.w	r0, ip, r9
 80a65b6:	0c21      	lsrs	r1, r4, #16
 80a65b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a65bc:	4290      	cmp	r0, r2
 80a65be:	d90a      	bls.n	80a65d6 <__udivmoddi4+0x66>
 80a65c0:	18ba      	adds	r2, r7, r2
 80a65c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a65c6:	f080 8118 	bcs.w	80a67fa <__udivmoddi4+0x28a>
 80a65ca:	4290      	cmp	r0, r2
 80a65cc:	f240 8115 	bls.w	80a67fa <__udivmoddi4+0x28a>
 80a65d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80a65d4:	443a      	add	r2, r7
 80a65d6:	1a12      	subs	r2, r2, r0
 80a65d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80a65dc:	fb08 2210 	mls	r2, r8, r0, r2
 80a65e0:	fb00 f109 	mul.w	r1, r0, r9
 80a65e4:	b2a4      	uxth	r4, r4
 80a65e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a65ea:	42a1      	cmp	r1, r4
 80a65ec:	d909      	bls.n	80a6602 <__udivmoddi4+0x92>
 80a65ee:	193c      	adds	r4, r7, r4
 80a65f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80a65f4:	f080 8103 	bcs.w	80a67fe <__udivmoddi4+0x28e>
 80a65f8:	42a1      	cmp	r1, r4
 80a65fa:	f240 8100 	bls.w	80a67fe <__udivmoddi4+0x28e>
 80a65fe:	3802      	subs	r0, #2
 80a6600:	443c      	add	r4, r7
 80a6602:	1a64      	subs	r4, r4, r1
 80a6604:	2100      	movs	r1, #0
 80a6606:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a660a:	b11e      	cbz	r6, 80a6614 <__udivmoddi4+0xa4>
 80a660c:	2200      	movs	r2, #0
 80a660e:	40dc      	lsrs	r4, r3
 80a6610:	e9c6 4200 	strd	r4, r2, [r6]
 80a6614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6618:	b902      	cbnz	r2, 80a661c <__udivmoddi4+0xac>
 80a661a:	deff      	udf	#255	; 0xff
 80a661c:	fab2 f382 	clz	r3, r2
 80a6620:	2b00      	cmp	r3, #0
 80a6622:	d14f      	bne.n	80a66c4 <__udivmoddi4+0x154>
 80a6624:	1a8d      	subs	r5, r1, r2
 80a6626:	2101      	movs	r1, #1
 80a6628:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a662c:	fa1f f882 	uxth.w	r8, r2
 80a6630:	fbb5 fcfe 	udiv	ip, r5, lr
 80a6634:	fb0e 551c 	mls	r5, lr, ip, r5
 80a6638:	fb08 f00c 	mul.w	r0, r8, ip
 80a663c:	0c22      	lsrs	r2, r4, #16
 80a663e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a6642:	42a8      	cmp	r0, r5
 80a6644:	d907      	bls.n	80a6656 <__udivmoddi4+0xe6>
 80a6646:	197d      	adds	r5, r7, r5
 80a6648:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a664c:	d202      	bcs.n	80a6654 <__udivmoddi4+0xe4>
 80a664e:	42a8      	cmp	r0, r5
 80a6650:	f200 80e9 	bhi.w	80a6826 <__udivmoddi4+0x2b6>
 80a6654:	4694      	mov	ip, r2
 80a6656:	1a2d      	subs	r5, r5, r0
 80a6658:	fbb5 f0fe 	udiv	r0, r5, lr
 80a665c:	fb0e 5510 	mls	r5, lr, r0, r5
 80a6660:	fb08 f800 	mul.w	r8, r8, r0
 80a6664:	b2a4      	uxth	r4, r4
 80a6666:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a666a:	45a0      	cmp	r8, r4
 80a666c:	d907      	bls.n	80a667e <__udivmoddi4+0x10e>
 80a666e:	193c      	adds	r4, r7, r4
 80a6670:	f100 32ff 	add.w	r2, r0, #4294967295
 80a6674:	d202      	bcs.n	80a667c <__udivmoddi4+0x10c>
 80a6676:	45a0      	cmp	r8, r4
 80a6678:	f200 80d9 	bhi.w	80a682e <__udivmoddi4+0x2be>
 80a667c:	4610      	mov	r0, r2
 80a667e:	eba4 0408 	sub.w	r4, r4, r8
 80a6682:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a6686:	e7c0      	b.n	80a660a <__udivmoddi4+0x9a>
 80a6688:	428b      	cmp	r3, r1
 80a668a:	d908      	bls.n	80a669e <__udivmoddi4+0x12e>
 80a668c:	2e00      	cmp	r6, #0
 80a668e:	f000 80b1 	beq.w	80a67f4 <__udivmoddi4+0x284>
 80a6692:	2100      	movs	r1, #0
 80a6694:	e9c6 0500 	strd	r0, r5, [r6]
 80a6698:	4608      	mov	r0, r1
 80a669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a669e:	fab3 f183 	clz	r1, r3
 80a66a2:	2900      	cmp	r1, #0
 80a66a4:	d14b      	bne.n	80a673e <__udivmoddi4+0x1ce>
 80a66a6:	42ab      	cmp	r3, r5
 80a66a8:	d302      	bcc.n	80a66b0 <__udivmoddi4+0x140>
 80a66aa:	4282      	cmp	r2, r0
 80a66ac:	f200 80b9 	bhi.w	80a6822 <__udivmoddi4+0x2b2>
 80a66b0:	1a84      	subs	r4, r0, r2
 80a66b2:	eb65 0303 	sbc.w	r3, r5, r3
 80a66b6:	2001      	movs	r0, #1
 80a66b8:	469e      	mov	lr, r3
 80a66ba:	2e00      	cmp	r6, #0
 80a66bc:	d0aa      	beq.n	80a6614 <__udivmoddi4+0xa4>
 80a66be:	e9c6 4e00 	strd	r4, lr, [r6]
 80a66c2:	e7a7      	b.n	80a6614 <__udivmoddi4+0xa4>
 80a66c4:	409f      	lsls	r7, r3
 80a66c6:	f1c3 0220 	rsb	r2, r3, #32
 80a66ca:	40d1      	lsrs	r1, r2
 80a66cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a66d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80a66d4:	fa1f f887 	uxth.w	r8, r7
 80a66d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80a66dc:	fa24 f202 	lsr.w	r2, r4, r2
 80a66e0:	409d      	lsls	r5, r3
 80a66e2:	fb00 fc08 	mul.w	ip, r0, r8
 80a66e6:	432a      	orrs	r2, r5
 80a66e8:	0c15      	lsrs	r5, r2, #16
 80a66ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a66ee:	45ac      	cmp	ip, r5
 80a66f0:	fa04 f403 	lsl.w	r4, r4, r3
 80a66f4:	d909      	bls.n	80a670a <__udivmoddi4+0x19a>
 80a66f6:	197d      	adds	r5, r7, r5
 80a66f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80a66fc:	f080 808f 	bcs.w	80a681e <__udivmoddi4+0x2ae>
 80a6700:	45ac      	cmp	ip, r5
 80a6702:	f240 808c 	bls.w	80a681e <__udivmoddi4+0x2ae>
 80a6706:	3802      	subs	r0, #2
 80a6708:	443d      	add	r5, r7
 80a670a:	eba5 050c 	sub.w	r5, r5, ip
 80a670e:	fbb5 f1fe 	udiv	r1, r5, lr
 80a6712:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a6716:	fb01 f908 	mul.w	r9, r1, r8
 80a671a:	b295      	uxth	r5, r2
 80a671c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a6720:	45a9      	cmp	r9, r5
 80a6722:	d907      	bls.n	80a6734 <__udivmoddi4+0x1c4>
 80a6724:	197d      	adds	r5, r7, r5
 80a6726:	f101 32ff 	add.w	r2, r1, #4294967295
 80a672a:	d274      	bcs.n	80a6816 <__udivmoddi4+0x2a6>
 80a672c:	45a9      	cmp	r9, r5
 80a672e:	d972      	bls.n	80a6816 <__udivmoddi4+0x2a6>
 80a6730:	3902      	subs	r1, #2
 80a6732:	443d      	add	r5, r7
 80a6734:	eba5 0509 	sub.w	r5, r5, r9
 80a6738:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a673c:	e778      	b.n	80a6630 <__udivmoddi4+0xc0>
 80a673e:	f1c1 0720 	rsb	r7, r1, #32
 80a6742:	408b      	lsls	r3, r1
 80a6744:	fa22 fc07 	lsr.w	ip, r2, r7
 80a6748:	ea4c 0c03 	orr.w	ip, ip, r3
 80a674c:	fa25 f407 	lsr.w	r4, r5, r7
 80a6750:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a6754:	fbb4 f9fe 	udiv	r9, r4, lr
 80a6758:	fa1f f88c 	uxth.w	r8, ip
 80a675c:	fb0e 4419 	mls	r4, lr, r9, r4
 80a6760:	fa20 f307 	lsr.w	r3, r0, r7
 80a6764:	fb09 fa08 	mul.w	sl, r9, r8
 80a6768:	408d      	lsls	r5, r1
 80a676a:	431d      	orrs	r5, r3
 80a676c:	0c2b      	lsrs	r3, r5, #16
 80a676e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a6772:	45a2      	cmp	sl, r4
 80a6774:	fa02 f201 	lsl.w	r2, r2, r1
 80a6778:	fa00 f301 	lsl.w	r3, r0, r1
 80a677c:	d909      	bls.n	80a6792 <__udivmoddi4+0x222>
 80a677e:	eb1c 0404 	adds.w	r4, ip, r4
 80a6782:	f109 30ff 	add.w	r0, r9, #4294967295
 80a6786:	d248      	bcs.n	80a681a <__udivmoddi4+0x2aa>
 80a6788:	45a2      	cmp	sl, r4
 80a678a:	d946      	bls.n	80a681a <__udivmoddi4+0x2aa>
 80a678c:	f1a9 0902 	sub.w	r9, r9, #2
 80a6790:	4464      	add	r4, ip
 80a6792:	eba4 040a 	sub.w	r4, r4, sl
 80a6796:	fbb4 f0fe 	udiv	r0, r4, lr
 80a679a:	fb0e 4410 	mls	r4, lr, r0, r4
 80a679e:	fb00 fa08 	mul.w	sl, r0, r8
 80a67a2:	b2ad      	uxth	r5, r5
 80a67a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a67a8:	45a2      	cmp	sl, r4
 80a67aa:	d908      	bls.n	80a67be <__udivmoddi4+0x24e>
 80a67ac:	eb1c 0404 	adds.w	r4, ip, r4
 80a67b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80a67b4:	d22d      	bcs.n	80a6812 <__udivmoddi4+0x2a2>
 80a67b6:	45a2      	cmp	sl, r4
 80a67b8:	d92b      	bls.n	80a6812 <__udivmoddi4+0x2a2>
 80a67ba:	3802      	subs	r0, #2
 80a67bc:	4464      	add	r4, ip
 80a67be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a67c2:	fba0 8902 	umull	r8, r9, r0, r2
 80a67c6:	eba4 040a 	sub.w	r4, r4, sl
 80a67ca:	454c      	cmp	r4, r9
 80a67cc:	46c6      	mov	lr, r8
 80a67ce:	464d      	mov	r5, r9
 80a67d0:	d319      	bcc.n	80a6806 <__udivmoddi4+0x296>
 80a67d2:	d016      	beq.n	80a6802 <__udivmoddi4+0x292>
 80a67d4:	b15e      	cbz	r6, 80a67ee <__udivmoddi4+0x27e>
 80a67d6:	ebb3 020e 	subs.w	r2, r3, lr
 80a67da:	eb64 0405 	sbc.w	r4, r4, r5
 80a67de:	fa04 f707 	lsl.w	r7, r4, r7
 80a67e2:	fa22 f301 	lsr.w	r3, r2, r1
 80a67e6:	431f      	orrs	r7, r3
 80a67e8:	40cc      	lsrs	r4, r1
 80a67ea:	e9c6 7400 	strd	r7, r4, [r6]
 80a67ee:	2100      	movs	r1, #0
 80a67f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a67f4:	4631      	mov	r1, r6
 80a67f6:	4630      	mov	r0, r6
 80a67f8:	e70c      	b.n	80a6614 <__udivmoddi4+0xa4>
 80a67fa:	468c      	mov	ip, r1
 80a67fc:	e6eb      	b.n	80a65d6 <__udivmoddi4+0x66>
 80a67fe:	4610      	mov	r0, r2
 80a6800:	e6ff      	b.n	80a6602 <__udivmoddi4+0x92>
 80a6802:	4543      	cmp	r3, r8
 80a6804:	d2e6      	bcs.n	80a67d4 <__udivmoddi4+0x264>
 80a6806:	ebb8 0e02 	subs.w	lr, r8, r2
 80a680a:	eb69 050c 	sbc.w	r5, r9, ip
 80a680e:	3801      	subs	r0, #1
 80a6810:	e7e0      	b.n	80a67d4 <__udivmoddi4+0x264>
 80a6812:	4628      	mov	r0, r5
 80a6814:	e7d3      	b.n	80a67be <__udivmoddi4+0x24e>
 80a6816:	4611      	mov	r1, r2
 80a6818:	e78c      	b.n	80a6734 <__udivmoddi4+0x1c4>
 80a681a:	4681      	mov	r9, r0
 80a681c:	e7b9      	b.n	80a6792 <__udivmoddi4+0x222>
 80a681e:	4608      	mov	r0, r1
 80a6820:	e773      	b.n	80a670a <__udivmoddi4+0x19a>
 80a6822:	4608      	mov	r0, r1
 80a6824:	e749      	b.n	80a66ba <__udivmoddi4+0x14a>
 80a6826:	f1ac 0c02 	sub.w	ip, ip, #2
 80a682a:	443d      	add	r5, r7
 80a682c:	e713      	b.n	80a6656 <__udivmoddi4+0xe6>
 80a682e:	3802      	subs	r0, #2
 80a6830:	443c      	add	r4, r7
 80a6832:	e724      	b.n	80a667e <__udivmoddi4+0x10e>

080a6834 <__aeabi_idiv0>:
 80a6834:	4770      	bx	lr
 80a6836:	bf00      	nop

080a6838 <atoi>:
 80a6838:	220a      	movs	r2, #10
 80a683a:	2100      	movs	r1, #0
 80a683c:	f000 ba16 	b.w	80a6c6c <strtol>

080a6840 <atol>:
 80a6840:	220a      	movs	r2, #10
 80a6842:	2100      	movs	r1, #0
 80a6844:	f000 ba12 	b.w	80a6c6c <strtol>

080a6848 <__cxa_atexit>:
 80a6848:	b510      	push	{r4, lr}
 80a684a:	4604      	mov	r4, r0
 80a684c:	4804      	ldr	r0, [pc, #16]	; (80a6860 <__cxa_atexit+0x18>)
 80a684e:	4613      	mov	r3, r2
 80a6850:	b120      	cbz	r0, 80a685c <__cxa_atexit+0x14>
 80a6852:	460a      	mov	r2, r1
 80a6854:	2002      	movs	r0, #2
 80a6856:	4621      	mov	r1, r4
 80a6858:	f3af 8000 	nop.w
 80a685c:	bd10      	pop	{r4, pc}
 80a685e:	bf00      	nop
 80a6860:	00000000 	.word	0x00000000

080a6864 <localtime_r>:
 80a6864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6868:	460c      	mov	r4, r1
 80a686a:	4607      	mov	r7, r0
 80a686c:	f000 fd0a 	bl	80a7284 <__gettzinfo>
 80a6870:	4621      	mov	r1, r4
 80a6872:	4680      	mov	r8, r0
 80a6874:	4638      	mov	r0, r7
 80a6876:	f000 fd09 	bl	80a728c <gmtime_r>
 80a687a:	6943      	ldr	r3, [r0, #20]
 80a687c:	4604      	mov	r4, r0
 80a687e:	079a      	lsls	r2, r3, #30
 80a6880:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a6884:	d105      	bne.n	80a6892 <localtime_r+0x2e>
 80a6886:	2264      	movs	r2, #100	; 0x64
 80a6888:	fb96 f3f2 	sdiv	r3, r6, r2
 80a688c:	fb02 6313 	mls	r3, r2, r3, r6
 80a6890:	bb7b      	cbnz	r3, 80a68f2 <localtime_r+0x8e>
 80a6892:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6896:	fb96 f5f3 	sdiv	r5, r6, r3
 80a689a:	fb03 6515 	mls	r5, r3, r5, r6
 80a689e:	fab5 f585 	clz	r5, r5
 80a68a2:	096d      	lsrs	r5, r5, #5
 80a68a4:	2230      	movs	r2, #48	; 0x30
 80a68a6:	4b68      	ldr	r3, [pc, #416]	; (80a6a48 <localtime_r+0x1e4>)
 80a68a8:	fb02 3505 	mla	r5, r2, r5, r3
 80a68ac:	f000 fb16 	bl	80a6edc <__tz_lock>
 80a68b0:	f000 fb20 	bl	80a6ef4 <_tzset_unlocked>
 80a68b4:	4b65      	ldr	r3, [pc, #404]	; (80a6a4c <localtime_r+0x1e8>)
 80a68b6:	681b      	ldr	r3, [r3, #0]
 80a68b8:	b353      	cbz	r3, 80a6910 <localtime_r+0xac>
 80a68ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a68be:	42b3      	cmp	r3, r6
 80a68c0:	d119      	bne.n	80a68f6 <localtime_r+0x92>
 80a68c2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a68c6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a68ca:	f8d8 1000 	ldr.w	r1, [r8]
 80a68ce:	b9d1      	cbnz	r1, 80a6906 <localtime_r+0xa2>
 80a68d0:	4296      	cmp	r6, r2
 80a68d2:	eb77 0303 	sbcs.w	r3, r7, r3
 80a68d6:	da23      	bge.n	80a6920 <localtime_r+0xbc>
 80a68d8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a68dc:	4296      	cmp	r6, r2
 80a68de:	eb77 0303 	sbcs.w	r3, r7, r3
 80a68e2:	bfb4      	ite	lt
 80a68e4:	2301      	movlt	r3, #1
 80a68e6:	2300      	movge	r3, #0
 80a68e8:	6223      	str	r3, [r4, #32]
 80a68ea:	db1b      	blt.n	80a6924 <localtime_r+0xc0>
 80a68ec:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a68f0:	e01a      	b.n	80a6928 <localtime_r+0xc4>
 80a68f2:	2501      	movs	r5, #1
 80a68f4:	e7d6      	b.n	80a68a4 <localtime_r+0x40>
 80a68f6:	4630      	mov	r0, r6
 80a68f8:	f000 fa48 	bl	80a6d8c <__tzcalc_limits>
 80a68fc:	2800      	cmp	r0, #0
 80a68fe:	d1e0      	bne.n	80a68c2 <localtime_r+0x5e>
 80a6900:	f04f 33ff 	mov.w	r3, #4294967295
 80a6904:	e004      	b.n	80a6910 <localtime_r+0xac>
 80a6906:	4296      	cmp	r6, r2
 80a6908:	eb77 0303 	sbcs.w	r3, r7, r3
 80a690c:	da02      	bge.n	80a6914 <localtime_r+0xb0>
 80a690e:	2300      	movs	r3, #0
 80a6910:	6223      	str	r3, [r4, #32]
 80a6912:	e7eb      	b.n	80a68ec <localtime_r+0x88>
 80a6914:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a6918:	4296      	cmp	r6, r2
 80a691a:	eb77 0303 	sbcs.w	r3, r7, r3
 80a691e:	daf6      	bge.n	80a690e <localtime_r+0xaa>
 80a6920:	2301      	movs	r3, #1
 80a6922:	6223      	str	r3, [r4, #32]
 80a6924:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a6928:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a692c:	fb91 f6f3 	sdiv	r6, r1, r3
 80a6930:	203c      	movs	r0, #60	; 0x3c
 80a6932:	fb03 1316 	mls	r3, r3, r6, r1
 80a6936:	fb93 f2f0 	sdiv	r2, r3, r0
 80a693a:	fb00 3012 	mls	r0, r0, r2, r3
 80a693e:	6861      	ldr	r1, [r4, #4]
 80a6940:	6823      	ldr	r3, [r4, #0]
 80a6942:	1a89      	subs	r1, r1, r2
 80a6944:	68a2      	ldr	r2, [r4, #8]
 80a6946:	1a1b      	subs	r3, r3, r0
 80a6948:	1b92      	subs	r2, r2, r6
 80a694a:	2b3b      	cmp	r3, #59	; 0x3b
 80a694c:	6023      	str	r3, [r4, #0]
 80a694e:	6061      	str	r1, [r4, #4]
 80a6950:	60a2      	str	r2, [r4, #8]
 80a6952:	dd34      	ble.n	80a69be <localtime_r+0x15a>
 80a6954:	3101      	adds	r1, #1
 80a6956:	6061      	str	r1, [r4, #4]
 80a6958:	3b3c      	subs	r3, #60	; 0x3c
 80a695a:	6023      	str	r3, [r4, #0]
 80a695c:	6863      	ldr	r3, [r4, #4]
 80a695e:	2b3b      	cmp	r3, #59	; 0x3b
 80a6960:	dd33      	ble.n	80a69ca <localtime_r+0x166>
 80a6962:	3201      	adds	r2, #1
 80a6964:	60a2      	str	r2, [r4, #8]
 80a6966:	3b3c      	subs	r3, #60	; 0x3c
 80a6968:	6063      	str	r3, [r4, #4]
 80a696a:	68a3      	ldr	r3, [r4, #8]
 80a696c:	2b17      	cmp	r3, #23
 80a696e:	dd32      	ble.n	80a69d6 <localtime_r+0x172>
 80a6970:	69e2      	ldr	r2, [r4, #28]
 80a6972:	3b18      	subs	r3, #24
 80a6974:	3201      	adds	r2, #1
 80a6976:	61e2      	str	r2, [r4, #28]
 80a6978:	69a2      	ldr	r2, [r4, #24]
 80a697a:	60a3      	str	r3, [r4, #8]
 80a697c:	3201      	adds	r2, #1
 80a697e:	2a06      	cmp	r2, #6
 80a6980:	bfc8      	it	gt
 80a6982:	2200      	movgt	r2, #0
 80a6984:	61a2      	str	r2, [r4, #24]
 80a6986:	68e2      	ldr	r2, [r4, #12]
 80a6988:	6923      	ldr	r3, [r4, #16]
 80a698a:	3201      	adds	r2, #1
 80a698c:	60e2      	str	r2, [r4, #12]
 80a698e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a6992:	428a      	cmp	r2, r1
 80a6994:	dd0e      	ble.n	80a69b4 <localtime_r+0x150>
 80a6996:	2b0b      	cmp	r3, #11
 80a6998:	eba2 0201 	sub.w	r2, r2, r1
 80a699c:	60e2      	str	r2, [r4, #12]
 80a699e:	f103 0201 	add.w	r2, r3, #1
 80a69a2:	bf05      	ittet	eq
 80a69a4:	2200      	moveq	r2, #0
 80a69a6:	6963      	ldreq	r3, [r4, #20]
 80a69a8:	6122      	strne	r2, [r4, #16]
 80a69aa:	3301      	addeq	r3, #1
 80a69ac:	bf02      	ittt	eq
 80a69ae:	6122      	streq	r2, [r4, #16]
 80a69b0:	6163      	streq	r3, [r4, #20]
 80a69b2:	61e2      	streq	r2, [r4, #28]
 80a69b4:	f000 fa98 	bl	80a6ee8 <__tz_unlock>
 80a69b8:	4620      	mov	r0, r4
 80a69ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a69be:	2b00      	cmp	r3, #0
 80a69c0:	dacc      	bge.n	80a695c <localtime_r+0xf8>
 80a69c2:	3901      	subs	r1, #1
 80a69c4:	6061      	str	r1, [r4, #4]
 80a69c6:	333c      	adds	r3, #60	; 0x3c
 80a69c8:	e7c7      	b.n	80a695a <localtime_r+0xf6>
 80a69ca:	2b00      	cmp	r3, #0
 80a69cc:	dacd      	bge.n	80a696a <localtime_r+0x106>
 80a69ce:	3a01      	subs	r2, #1
 80a69d0:	60a2      	str	r2, [r4, #8]
 80a69d2:	333c      	adds	r3, #60	; 0x3c
 80a69d4:	e7c8      	b.n	80a6968 <localtime_r+0x104>
 80a69d6:	2b00      	cmp	r3, #0
 80a69d8:	daec      	bge.n	80a69b4 <localtime_r+0x150>
 80a69da:	69e2      	ldr	r2, [r4, #28]
 80a69dc:	3318      	adds	r3, #24
 80a69de:	3a01      	subs	r2, #1
 80a69e0:	61e2      	str	r2, [r4, #28]
 80a69e2:	69a2      	ldr	r2, [r4, #24]
 80a69e4:	60a3      	str	r3, [r4, #8]
 80a69e6:	3a01      	subs	r2, #1
 80a69e8:	bf48      	it	mi
 80a69ea:	2206      	movmi	r2, #6
 80a69ec:	61a2      	str	r2, [r4, #24]
 80a69ee:	68e2      	ldr	r2, [r4, #12]
 80a69f0:	3a01      	subs	r2, #1
 80a69f2:	60e2      	str	r2, [r4, #12]
 80a69f4:	2a00      	cmp	r2, #0
 80a69f6:	d1dd      	bne.n	80a69b4 <localtime_r+0x150>
 80a69f8:	6923      	ldr	r3, [r4, #16]
 80a69fa:	3b01      	subs	r3, #1
 80a69fc:	d405      	bmi.n	80a6a0a <localtime_r+0x1a6>
 80a69fe:	6123      	str	r3, [r4, #16]
 80a6a00:	6923      	ldr	r3, [r4, #16]
 80a6a02:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a6a06:	60e3      	str	r3, [r4, #12]
 80a6a08:	e7d4      	b.n	80a69b4 <localtime_r+0x150>
 80a6a0a:	230b      	movs	r3, #11
 80a6a0c:	6123      	str	r3, [r4, #16]
 80a6a0e:	6963      	ldr	r3, [r4, #20]
 80a6a10:	1e5a      	subs	r2, r3, #1
 80a6a12:	6162      	str	r2, [r4, #20]
 80a6a14:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a6a18:	0793      	lsls	r3, r2, #30
 80a6a1a:	d105      	bne.n	80a6a28 <localtime_r+0x1c4>
 80a6a1c:	2164      	movs	r1, #100	; 0x64
 80a6a1e:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6a22:	fb01 2313 	mls	r3, r1, r3, r2
 80a6a26:	b963      	cbnz	r3, 80a6a42 <localtime_r+0x1de>
 80a6a28:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6a2c:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6a30:	fb01 2313 	mls	r3, r1, r3, r2
 80a6a34:	fab3 f383 	clz	r3, r3
 80a6a38:	095b      	lsrs	r3, r3, #5
 80a6a3a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a6a3e:	61e3      	str	r3, [r4, #28]
 80a6a40:	e7de      	b.n	80a6a00 <localtime_r+0x19c>
 80a6a42:	2301      	movs	r3, #1
 80a6a44:	e7f9      	b.n	80a6a3a <localtime_r+0x1d6>
 80a6a46:	bf00      	nop
 80a6a48:	080a8df4 	.word	0x080a8df4
 80a6a4c:	20000508 	.word	0x20000508

080a6a50 <memcpy>:
 80a6a50:	440a      	add	r2, r1
 80a6a52:	4291      	cmp	r1, r2
 80a6a54:	f100 33ff 	add.w	r3, r0, #4294967295
 80a6a58:	d100      	bne.n	80a6a5c <memcpy+0xc>
 80a6a5a:	4770      	bx	lr
 80a6a5c:	b510      	push	{r4, lr}
 80a6a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6a62:	4291      	cmp	r1, r2
 80a6a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6a68:	d1f9      	bne.n	80a6a5e <memcpy+0xe>
 80a6a6a:	bd10      	pop	{r4, pc}

080a6a6c <memset>:
 80a6a6c:	4603      	mov	r3, r0
 80a6a6e:	4402      	add	r2, r0
 80a6a70:	4293      	cmp	r3, r2
 80a6a72:	d100      	bne.n	80a6a76 <memset+0xa>
 80a6a74:	4770      	bx	lr
 80a6a76:	f803 1b01 	strb.w	r1, [r3], #1
 80a6a7a:	e7f9      	b.n	80a6a70 <memset+0x4>

080a6a7c <srand>:
 80a6a7c:	b538      	push	{r3, r4, r5, lr}
 80a6a7e:	4b0d      	ldr	r3, [pc, #52]	; (80a6ab4 <srand+0x38>)
 80a6a80:	4604      	mov	r4, r0
 80a6a82:	681d      	ldr	r5, [r3, #0]
 80a6a84:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6a86:	b97b      	cbnz	r3, 80a6aa8 <srand+0x2c>
 80a6a88:	2018      	movs	r0, #24
 80a6a8a:	f7fc ff3f 	bl	80a390c <malloc>
 80a6a8e:	4a0a      	ldr	r2, [pc, #40]	; (80a6ab8 <srand+0x3c>)
 80a6a90:	4b0a      	ldr	r3, [pc, #40]	; (80a6abc <srand+0x40>)
 80a6a92:	63a8      	str	r0, [r5, #56]	; 0x38
 80a6a94:	e9c0 2300 	strd	r2, r3, [r0]
 80a6a98:	4b09      	ldr	r3, [pc, #36]	; (80a6ac0 <srand+0x44>)
 80a6a9a:	2201      	movs	r2, #1
 80a6a9c:	6083      	str	r3, [r0, #8]
 80a6a9e:	230b      	movs	r3, #11
 80a6aa0:	8183      	strh	r3, [r0, #12]
 80a6aa2:	2300      	movs	r3, #0
 80a6aa4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6aa8:	2200      	movs	r2, #0
 80a6aaa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6aac:	611c      	str	r4, [r3, #16]
 80a6aae:	615a      	str	r2, [r3, #20]
 80a6ab0:	bd38      	pop	{r3, r4, r5, pc}
 80a6ab2:	bf00      	nop
 80a6ab4:	2000005c 	.word	0x2000005c
 80a6ab8:	abcd330e 	.word	0xabcd330e
 80a6abc:	e66d1234 	.word	0xe66d1234
 80a6ac0:	0005deec 	.word	0x0005deec

080a6ac4 <strcmp>:
 80a6ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6acc:	2a01      	cmp	r2, #1
 80a6ace:	bf28      	it	cs
 80a6ad0:	429a      	cmpcs	r2, r3
 80a6ad2:	d0f7      	beq.n	80a6ac4 <strcmp>
 80a6ad4:	1ad0      	subs	r0, r2, r3
 80a6ad6:	4770      	bx	lr

080a6ad8 <strcpy>:
 80a6ad8:	4603      	mov	r3, r0
 80a6ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6ade:	f803 2b01 	strb.w	r2, [r3], #1
 80a6ae2:	2a00      	cmp	r2, #0
 80a6ae4:	d1f9      	bne.n	80a6ada <strcpy+0x2>
 80a6ae6:	4770      	bx	lr

080a6ae8 <strdup>:
 80a6ae8:	4b02      	ldr	r3, [pc, #8]	; (80a6af4 <strdup+0xc>)
 80a6aea:	4601      	mov	r1, r0
 80a6aec:	6818      	ldr	r0, [r3, #0]
 80a6aee:	f000 b803 	b.w	80a6af8 <_strdup_r>
 80a6af2:	bf00      	nop
 80a6af4:	2000005c 	.word	0x2000005c

080a6af8 <_strdup_r>:
 80a6af8:	b570      	push	{r4, r5, r6, lr}
 80a6afa:	4604      	mov	r4, r0
 80a6afc:	4608      	mov	r0, r1
 80a6afe:	460d      	mov	r5, r1
 80a6b00:	f000 f80d 	bl	80a6b1e <strlen>
 80a6b04:	1c46      	adds	r6, r0, #1
 80a6b06:	4631      	mov	r1, r6
 80a6b08:	4620      	mov	r0, r4
 80a6b0a:	f7fc ff3f 	bl	80a398c <_malloc_r>
 80a6b0e:	4604      	mov	r4, r0
 80a6b10:	b118      	cbz	r0, 80a6b1a <_strdup_r+0x22>
 80a6b12:	4632      	mov	r2, r6
 80a6b14:	4629      	mov	r1, r5
 80a6b16:	f7ff ff9b 	bl	80a6a50 <memcpy>
 80a6b1a:	4620      	mov	r0, r4
 80a6b1c:	bd70      	pop	{r4, r5, r6, pc}

080a6b1e <strlen>:
 80a6b1e:	4603      	mov	r3, r0
 80a6b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6b24:	2a00      	cmp	r2, #0
 80a6b26:	d1fb      	bne.n	80a6b20 <strlen+0x2>
 80a6b28:	1a18      	subs	r0, r3, r0
 80a6b2a:	3801      	subs	r0, #1
 80a6b2c:	4770      	bx	lr

080a6b2e <strncmp>:
 80a6b2e:	b510      	push	{r4, lr}
 80a6b30:	b16a      	cbz	r2, 80a6b4e <strncmp+0x20>
 80a6b32:	3901      	subs	r1, #1
 80a6b34:	1884      	adds	r4, r0, r2
 80a6b36:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a6b3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a6b3e:	4293      	cmp	r3, r2
 80a6b40:	d103      	bne.n	80a6b4a <strncmp+0x1c>
 80a6b42:	42a0      	cmp	r0, r4
 80a6b44:	d001      	beq.n	80a6b4a <strncmp+0x1c>
 80a6b46:	2b00      	cmp	r3, #0
 80a6b48:	d1f5      	bne.n	80a6b36 <strncmp+0x8>
 80a6b4a:	1a98      	subs	r0, r3, r2
 80a6b4c:	bd10      	pop	{r4, pc}
 80a6b4e:	4610      	mov	r0, r2
 80a6b50:	e7fc      	b.n	80a6b4c <strncmp+0x1e>

080a6b52 <strncpy>:
 80a6b52:	4603      	mov	r3, r0
 80a6b54:	b510      	push	{r4, lr}
 80a6b56:	3901      	subs	r1, #1
 80a6b58:	b132      	cbz	r2, 80a6b68 <strncpy+0x16>
 80a6b5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a6b5e:	3a01      	subs	r2, #1
 80a6b60:	f803 4b01 	strb.w	r4, [r3], #1
 80a6b64:	2c00      	cmp	r4, #0
 80a6b66:	d1f7      	bne.n	80a6b58 <strncpy+0x6>
 80a6b68:	2100      	movs	r1, #0
 80a6b6a:	441a      	add	r2, r3
 80a6b6c:	4293      	cmp	r3, r2
 80a6b6e:	d100      	bne.n	80a6b72 <strncpy+0x20>
 80a6b70:	bd10      	pop	{r4, pc}
 80a6b72:	f803 1b01 	strb.w	r1, [r3], #1
 80a6b76:	e7f9      	b.n	80a6b6c <strncpy+0x1a>

080a6b78 <_strtol_l.isra.0>:
 80a6b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6b7c:	468c      	mov	ip, r1
 80a6b7e:	4686      	mov	lr, r0
 80a6b80:	4e39      	ldr	r6, [pc, #228]	; (80a6c68 <_strtol_l.isra.0+0xf0>)
 80a6b82:	4660      	mov	r0, ip
 80a6b84:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a6b88:	5da5      	ldrb	r5, [r4, r6]
 80a6b8a:	f015 0508 	ands.w	r5, r5, #8
 80a6b8e:	d1f8      	bne.n	80a6b82 <_strtol_l.isra.0+0xa>
 80a6b90:	2c2d      	cmp	r4, #45	; 0x2d
 80a6b92:	d133      	bne.n	80a6bfc <_strtol_l.isra.0+0x84>
 80a6b94:	f04f 0801 	mov.w	r8, #1
 80a6b98:	f89c 4000 	ldrb.w	r4, [ip]
 80a6b9c:	f100 0c02 	add.w	ip, r0, #2
 80a6ba0:	2b00      	cmp	r3, #0
 80a6ba2:	d05c      	beq.n	80a6c5e <_strtol_l.isra.0+0xe6>
 80a6ba4:	2b10      	cmp	r3, #16
 80a6ba6:	d10c      	bne.n	80a6bc2 <_strtol_l.isra.0+0x4a>
 80a6ba8:	2c30      	cmp	r4, #48	; 0x30
 80a6baa:	d10a      	bne.n	80a6bc2 <_strtol_l.isra.0+0x4a>
 80a6bac:	f89c 0000 	ldrb.w	r0, [ip]
 80a6bb0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a6bb4:	2858      	cmp	r0, #88	; 0x58
 80a6bb6:	d14d      	bne.n	80a6c54 <_strtol_l.isra.0+0xdc>
 80a6bb8:	2310      	movs	r3, #16
 80a6bba:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a6bbe:	f10c 0c02 	add.w	ip, ip, #2
 80a6bc2:	2600      	movs	r6, #0
 80a6bc4:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a6bc8:	3f01      	subs	r7, #1
 80a6bca:	fbb7 f9f3 	udiv	r9, r7, r3
 80a6bce:	4630      	mov	r0, r6
 80a6bd0:	fb03 7a19 	mls	sl, r3, r9, r7
 80a6bd4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a6bd8:	2d09      	cmp	r5, #9
 80a6bda:	d818      	bhi.n	80a6c0e <_strtol_l.isra.0+0x96>
 80a6bdc:	462c      	mov	r4, r5
 80a6bde:	42a3      	cmp	r3, r4
 80a6be0:	dd24      	ble.n	80a6c2c <_strtol_l.isra.0+0xb4>
 80a6be2:	1c75      	adds	r5, r6, #1
 80a6be4:	d007      	beq.n	80a6bf6 <_strtol_l.isra.0+0x7e>
 80a6be6:	4581      	cmp	r9, r0
 80a6be8:	d31d      	bcc.n	80a6c26 <_strtol_l.isra.0+0xae>
 80a6bea:	d101      	bne.n	80a6bf0 <_strtol_l.isra.0+0x78>
 80a6bec:	45a2      	cmp	sl, r4
 80a6bee:	db1a      	blt.n	80a6c26 <_strtol_l.isra.0+0xae>
 80a6bf0:	2601      	movs	r6, #1
 80a6bf2:	fb00 4003 	mla	r0, r0, r3, r4
 80a6bf6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a6bfa:	e7eb      	b.n	80a6bd4 <_strtol_l.isra.0+0x5c>
 80a6bfc:	2c2b      	cmp	r4, #43	; 0x2b
 80a6bfe:	bf08      	it	eq
 80a6c00:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a6c04:	46a8      	mov	r8, r5
 80a6c06:	bf08      	it	eq
 80a6c08:	f100 0c02 	addeq.w	ip, r0, #2
 80a6c0c:	e7c8      	b.n	80a6ba0 <_strtol_l.isra.0+0x28>
 80a6c0e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a6c12:	2d19      	cmp	r5, #25
 80a6c14:	d801      	bhi.n	80a6c1a <_strtol_l.isra.0+0xa2>
 80a6c16:	3c37      	subs	r4, #55	; 0x37
 80a6c18:	e7e1      	b.n	80a6bde <_strtol_l.isra.0+0x66>
 80a6c1a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a6c1e:	2d19      	cmp	r5, #25
 80a6c20:	d804      	bhi.n	80a6c2c <_strtol_l.isra.0+0xb4>
 80a6c22:	3c57      	subs	r4, #87	; 0x57
 80a6c24:	e7db      	b.n	80a6bde <_strtol_l.isra.0+0x66>
 80a6c26:	f04f 36ff 	mov.w	r6, #4294967295
 80a6c2a:	e7e4      	b.n	80a6bf6 <_strtol_l.isra.0+0x7e>
 80a6c2c:	1c73      	adds	r3, r6, #1
 80a6c2e:	d106      	bne.n	80a6c3e <_strtol_l.isra.0+0xc6>
 80a6c30:	2322      	movs	r3, #34	; 0x22
 80a6c32:	4638      	mov	r0, r7
 80a6c34:	f8ce 3000 	str.w	r3, [lr]
 80a6c38:	b942      	cbnz	r2, 80a6c4c <_strtol_l.isra.0+0xd4>
 80a6c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6c3e:	f1b8 0f00 	cmp.w	r8, #0
 80a6c42:	d000      	beq.n	80a6c46 <_strtol_l.isra.0+0xce>
 80a6c44:	4240      	negs	r0, r0
 80a6c46:	2a00      	cmp	r2, #0
 80a6c48:	d0f7      	beq.n	80a6c3a <_strtol_l.isra.0+0xc2>
 80a6c4a:	b10e      	cbz	r6, 80a6c50 <_strtol_l.isra.0+0xd8>
 80a6c4c:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a6c50:	6011      	str	r1, [r2, #0]
 80a6c52:	e7f2      	b.n	80a6c3a <_strtol_l.isra.0+0xc2>
 80a6c54:	2430      	movs	r4, #48	; 0x30
 80a6c56:	2b00      	cmp	r3, #0
 80a6c58:	d1b3      	bne.n	80a6bc2 <_strtol_l.isra.0+0x4a>
 80a6c5a:	2308      	movs	r3, #8
 80a6c5c:	e7b1      	b.n	80a6bc2 <_strtol_l.isra.0+0x4a>
 80a6c5e:	2c30      	cmp	r4, #48	; 0x30
 80a6c60:	d0a4      	beq.n	80a6bac <_strtol_l.isra.0+0x34>
 80a6c62:	230a      	movs	r3, #10
 80a6c64:	e7ad      	b.n	80a6bc2 <_strtol_l.isra.0+0x4a>
 80a6c66:	bf00      	nop
 80a6c68:	080a8e91 	.word	0x080a8e91

080a6c6c <strtol>:
 80a6c6c:	4613      	mov	r3, r2
 80a6c6e:	460a      	mov	r2, r1
 80a6c70:	4601      	mov	r1, r0
 80a6c72:	4802      	ldr	r0, [pc, #8]	; (80a6c7c <strtol+0x10>)
 80a6c74:	6800      	ldr	r0, [r0, #0]
 80a6c76:	f7ff bf7f 	b.w	80a6b78 <_strtol_l.isra.0>
 80a6c7a:	bf00      	nop
 80a6c7c:	2000005c 	.word	0x2000005c

080a6c80 <_strtoul_l.isra.0>:
 80a6c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6c84:	468c      	mov	ip, r1
 80a6c86:	4686      	mov	lr, r0
 80a6c88:	4e3a      	ldr	r6, [pc, #232]	; (80a6d74 <_strtoul_l.isra.0+0xf4>)
 80a6c8a:	4660      	mov	r0, ip
 80a6c8c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a6c90:	5da5      	ldrb	r5, [r4, r6]
 80a6c92:	f015 0508 	ands.w	r5, r5, #8
 80a6c96:	d1f8      	bne.n	80a6c8a <_strtoul_l.isra.0+0xa>
 80a6c98:	2c2d      	cmp	r4, #45	; 0x2d
 80a6c9a:	d134      	bne.n	80a6d06 <_strtoul_l.isra.0+0x86>
 80a6c9c:	f04f 0801 	mov.w	r8, #1
 80a6ca0:	f89c 4000 	ldrb.w	r4, [ip]
 80a6ca4:	f100 0c02 	add.w	ip, r0, #2
 80a6ca8:	2b00      	cmp	r3, #0
 80a6caa:	d05e      	beq.n	80a6d6a <_strtoul_l.isra.0+0xea>
 80a6cac:	2b10      	cmp	r3, #16
 80a6cae:	d10c      	bne.n	80a6cca <_strtoul_l.isra.0+0x4a>
 80a6cb0:	2c30      	cmp	r4, #48	; 0x30
 80a6cb2:	d10a      	bne.n	80a6cca <_strtoul_l.isra.0+0x4a>
 80a6cb4:	f89c 0000 	ldrb.w	r0, [ip]
 80a6cb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a6cbc:	2858      	cmp	r0, #88	; 0x58
 80a6cbe:	d14f      	bne.n	80a6d60 <_strtoul_l.isra.0+0xe0>
 80a6cc0:	2310      	movs	r3, #16
 80a6cc2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a6cc6:	f10c 0c02 	add.w	ip, ip, #2
 80a6cca:	f04f 37ff 	mov.w	r7, #4294967295
 80a6cce:	fbb7 f7f3 	udiv	r7, r7, r3
 80a6cd2:	2500      	movs	r5, #0
 80a6cd4:	fb03 f907 	mul.w	r9, r3, r7
 80a6cd8:	4628      	mov	r0, r5
 80a6cda:	ea6f 0909 	mvn.w	r9, r9
 80a6cde:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a6ce2:	2e09      	cmp	r6, #9
 80a6ce4:	d818      	bhi.n	80a6d18 <_strtoul_l.isra.0+0x98>
 80a6ce6:	4634      	mov	r4, r6
 80a6ce8:	42a3      	cmp	r3, r4
 80a6cea:	dd24      	ble.n	80a6d36 <_strtoul_l.isra.0+0xb6>
 80a6cec:	2d00      	cmp	r5, #0
 80a6cee:	db1f      	blt.n	80a6d30 <_strtoul_l.isra.0+0xb0>
 80a6cf0:	4287      	cmp	r7, r0
 80a6cf2:	d31d      	bcc.n	80a6d30 <_strtoul_l.isra.0+0xb0>
 80a6cf4:	d101      	bne.n	80a6cfa <_strtoul_l.isra.0+0x7a>
 80a6cf6:	45a1      	cmp	r9, r4
 80a6cf8:	db1a      	blt.n	80a6d30 <_strtoul_l.isra.0+0xb0>
 80a6cfa:	2501      	movs	r5, #1
 80a6cfc:	fb00 4003 	mla	r0, r0, r3, r4
 80a6d00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a6d04:	e7eb      	b.n	80a6cde <_strtoul_l.isra.0+0x5e>
 80a6d06:	2c2b      	cmp	r4, #43	; 0x2b
 80a6d08:	bf08      	it	eq
 80a6d0a:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a6d0e:	46a8      	mov	r8, r5
 80a6d10:	bf08      	it	eq
 80a6d12:	f100 0c02 	addeq.w	ip, r0, #2
 80a6d16:	e7c7      	b.n	80a6ca8 <_strtoul_l.isra.0+0x28>
 80a6d18:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a6d1c:	2e19      	cmp	r6, #25
 80a6d1e:	d801      	bhi.n	80a6d24 <_strtoul_l.isra.0+0xa4>
 80a6d20:	3c37      	subs	r4, #55	; 0x37
 80a6d22:	e7e1      	b.n	80a6ce8 <_strtoul_l.isra.0+0x68>
 80a6d24:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a6d28:	2e19      	cmp	r6, #25
 80a6d2a:	d804      	bhi.n	80a6d36 <_strtoul_l.isra.0+0xb6>
 80a6d2c:	3c57      	subs	r4, #87	; 0x57
 80a6d2e:	e7db      	b.n	80a6ce8 <_strtoul_l.isra.0+0x68>
 80a6d30:	f04f 35ff 	mov.w	r5, #4294967295
 80a6d34:	e7e4      	b.n	80a6d00 <_strtoul_l.isra.0+0x80>
 80a6d36:	2d00      	cmp	r5, #0
 80a6d38:	da07      	bge.n	80a6d4a <_strtoul_l.isra.0+0xca>
 80a6d3a:	2322      	movs	r3, #34	; 0x22
 80a6d3c:	f04f 30ff 	mov.w	r0, #4294967295
 80a6d40:	f8ce 3000 	str.w	r3, [lr]
 80a6d44:	b942      	cbnz	r2, 80a6d58 <_strtoul_l.isra.0+0xd8>
 80a6d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a6d4a:	f1b8 0f00 	cmp.w	r8, #0
 80a6d4e:	d000      	beq.n	80a6d52 <_strtoul_l.isra.0+0xd2>
 80a6d50:	4240      	negs	r0, r0
 80a6d52:	2a00      	cmp	r2, #0
 80a6d54:	d0f7      	beq.n	80a6d46 <_strtoul_l.isra.0+0xc6>
 80a6d56:	b10d      	cbz	r5, 80a6d5c <_strtoul_l.isra.0+0xdc>
 80a6d58:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a6d5c:	6011      	str	r1, [r2, #0]
 80a6d5e:	e7f2      	b.n	80a6d46 <_strtoul_l.isra.0+0xc6>
 80a6d60:	2430      	movs	r4, #48	; 0x30
 80a6d62:	2b00      	cmp	r3, #0
 80a6d64:	d1b1      	bne.n	80a6cca <_strtoul_l.isra.0+0x4a>
 80a6d66:	2308      	movs	r3, #8
 80a6d68:	e7af      	b.n	80a6cca <_strtoul_l.isra.0+0x4a>
 80a6d6a:	2c30      	cmp	r4, #48	; 0x30
 80a6d6c:	d0a2      	beq.n	80a6cb4 <_strtoul_l.isra.0+0x34>
 80a6d6e:	230a      	movs	r3, #10
 80a6d70:	e7ab      	b.n	80a6cca <_strtoul_l.isra.0+0x4a>
 80a6d72:	bf00      	nop
 80a6d74:	080a8e91 	.word	0x080a8e91

080a6d78 <strtoul>:
 80a6d78:	4613      	mov	r3, r2
 80a6d7a:	460a      	mov	r2, r1
 80a6d7c:	4601      	mov	r1, r0
 80a6d7e:	4802      	ldr	r0, [pc, #8]	; (80a6d88 <strtoul+0x10>)
 80a6d80:	6800      	ldr	r0, [r0, #0]
 80a6d82:	f7ff bf7d 	b.w	80a6c80 <_strtoul_l.isra.0>
 80a6d86:	bf00      	nop
 80a6d88:	2000005c 	.word	0x2000005c

080a6d8c <__tzcalc_limits>:
 80a6d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6d90:	4680      	mov	r8, r0
 80a6d92:	f000 fa77 	bl	80a7284 <__gettzinfo>
 80a6d96:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a6d9a:	4598      	cmp	r8, r3
 80a6d9c:	f340 8097 	ble.w	80a6ece <__tzcalc_limits+0x142>
 80a6da0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a6da4:	f240 126d 	movw	r2, #365	; 0x16d
 80a6da8:	4443      	add	r3, r8
 80a6daa:	109b      	asrs	r3, r3, #2
 80a6dac:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a6db0:	fb02 3505 	mla	r5, r2, r5, r3
 80a6db4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a6db8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a6dbc:	fb93 f3f2 	sdiv	r3, r3, r2
 80a6dc0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a6dc4:	441d      	add	r5, r3
 80a6dc6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6dca:	4442      	add	r2, r8
 80a6dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 80a6dd0:	fb98 f7f3 	sdiv	r7, r8, r3
 80a6dd4:	4415      	add	r5, r2
 80a6dd6:	2264      	movs	r2, #100	; 0x64
 80a6dd8:	fb03 8717 	mls	r7, r3, r7, r8
 80a6ddc:	fb98 f6f2 	sdiv	r6, r8, r2
 80a6de0:	fab7 fc87 	clz	ip, r7
 80a6de4:	4604      	mov	r4, r0
 80a6de6:	f04f 0e07 	mov.w	lr, #7
 80a6dea:	fb02 8616 	mls	r6, r2, r6, r8
 80a6dee:	f008 0303 	and.w	r3, r8, #3
 80a6df2:	f8c0 8004 	str.w	r8, [r0, #4]
 80a6df6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a6dfa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a6dfe:	9300      	str	r3, [sp, #0]
 80a6e00:	7a22      	ldrb	r2, [r4, #8]
 80a6e02:	6963      	ldr	r3, [r4, #20]
 80a6e04:	2a4a      	cmp	r2, #74	; 0x4a
 80a6e06:	d128      	bne.n	80a6e5a <__tzcalc_limits+0xce>
 80a6e08:	9900      	ldr	r1, [sp, #0]
 80a6e0a:	18ea      	adds	r2, r5, r3
 80a6e0c:	b901      	cbnz	r1, 80a6e10 <__tzcalc_limits+0x84>
 80a6e0e:	b906      	cbnz	r6, 80a6e12 <__tzcalc_limits+0x86>
 80a6e10:	bb0f      	cbnz	r7, 80a6e56 <__tzcalc_limits+0xca>
 80a6e12:	2b3b      	cmp	r3, #59	; 0x3b
 80a6e14:	bfd4      	ite	le
 80a6e16:	2300      	movle	r3, #0
 80a6e18:	2301      	movgt	r3, #1
 80a6e1a:	4413      	add	r3, r2
 80a6e1c:	1e5a      	subs	r2, r3, #1
 80a6e1e:	69a3      	ldr	r3, [r4, #24]
 80a6e20:	492c      	ldr	r1, [pc, #176]	; (80a6ed4 <__tzcalc_limits+0x148>)
 80a6e22:	3428      	adds	r4, #40	; 0x28
 80a6e24:	fb01 3202 	mla	r2, r1, r2, r3
 80a6e28:	6823      	ldr	r3, [r4, #0]
 80a6e2a:	4413      	add	r3, r2
 80a6e2c:	461a      	mov	r2, r3
 80a6e2e:	17db      	asrs	r3, r3, #31
 80a6e30:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a6e34:	45a3      	cmp	fp, r4
 80a6e36:	d1e3      	bne.n	80a6e00 <__tzcalc_limits+0x74>
 80a6e38:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a6e3c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a6e40:	4294      	cmp	r4, r2
 80a6e42:	eb75 0303 	sbcs.w	r3, r5, r3
 80a6e46:	bfb4      	ite	lt
 80a6e48:	2301      	movlt	r3, #1
 80a6e4a:	2300      	movge	r3, #0
 80a6e4c:	6003      	str	r3, [r0, #0]
 80a6e4e:	2001      	movs	r0, #1
 80a6e50:	b003      	add	sp, #12
 80a6e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6e56:	2300      	movs	r3, #0
 80a6e58:	e7df      	b.n	80a6e1a <__tzcalc_limits+0x8e>
 80a6e5a:	2a44      	cmp	r2, #68	; 0x44
 80a6e5c:	d101      	bne.n	80a6e62 <__tzcalc_limits+0xd6>
 80a6e5e:	18ea      	adds	r2, r5, r3
 80a6e60:	e7dd      	b.n	80a6e1e <__tzcalc_limits+0x92>
 80a6e62:	9a00      	ldr	r2, [sp, #0]
 80a6e64:	bb6a      	cbnz	r2, 80a6ec2 <__tzcalc_limits+0x136>
 80a6e66:	2e00      	cmp	r6, #0
 80a6e68:	bf0c      	ite	eq
 80a6e6a:	46e0      	moveq	r8, ip
 80a6e6c:	f04f 0801 	movne.w	r8, #1
 80a6e70:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a6e74:	68e2      	ldr	r2, [r4, #12]
 80a6e76:	f04f 0900 	mov.w	r9, #0
 80a6e7a:	9201      	str	r2, [sp, #4]
 80a6e7c:	462a      	mov	r2, r5
 80a6e7e:	4916      	ldr	r1, [pc, #88]	; (80a6ed8 <__tzcalc_limits+0x14c>)
 80a6e80:	fb0a 1808 	mla	r8, sl, r8, r1
 80a6e84:	f1a8 0804 	sub.w	r8, r8, #4
 80a6e88:	9901      	ldr	r1, [sp, #4]
 80a6e8a:	f109 0901 	add.w	r9, r9, #1
 80a6e8e:	4549      	cmp	r1, r9
 80a6e90:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a6e94:	dc17      	bgt.n	80a6ec6 <__tzcalc_limits+0x13a>
 80a6e96:	f102 0804 	add.w	r8, r2, #4
 80a6e9a:	fb98 f9fe 	sdiv	r9, r8, lr
 80a6e9e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a6ea2:	eba8 0909 	sub.w	r9, r8, r9
 80a6ea6:	ebb3 0909 	subs.w	r9, r3, r9
 80a6eaa:	6923      	ldr	r3, [r4, #16]
 80a6eac:	bf48      	it	mi
 80a6eae:	f109 0907 	addmi.w	r9, r9, #7
 80a6eb2:	3b01      	subs	r3, #1
 80a6eb4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a6eb8:	444b      	add	r3, r9
 80a6eba:	4553      	cmp	r3, sl
 80a6ebc:	da05      	bge.n	80a6eca <__tzcalc_limits+0x13e>
 80a6ebe:	441a      	add	r2, r3
 80a6ec0:	e7ad      	b.n	80a6e1e <__tzcalc_limits+0x92>
 80a6ec2:	46e0      	mov	r8, ip
 80a6ec4:	e7d4      	b.n	80a6e70 <__tzcalc_limits+0xe4>
 80a6ec6:	4452      	add	r2, sl
 80a6ec8:	e7de      	b.n	80a6e88 <__tzcalc_limits+0xfc>
 80a6eca:	3b07      	subs	r3, #7
 80a6ecc:	e7f5      	b.n	80a6eba <__tzcalc_limits+0x12e>
 80a6ece:	2000      	movs	r0, #0
 80a6ed0:	e7be      	b.n	80a6e50 <__tzcalc_limits+0xc4>
 80a6ed2:	bf00      	nop
 80a6ed4:	00015180 	.word	0x00015180
 80a6ed8:	080a8df4 	.word	0x080a8df4

080a6edc <__tz_lock>:
 80a6edc:	4801      	ldr	r0, [pc, #4]	; (80a6ee4 <__tz_lock+0x8>)
 80a6ede:	f000 ba85 	b.w	80a73ec <__retarget_lock_acquire>
 80a6ee2:	bf00      	nop
 80a6ee4:	2000051b 	.word	0x2000051b

080a6ee8 <__tz_unlock>:
 80a6ee8:	4801      	ldr	r0, [pc, #4]	; (80a6ef0 <__tz_unlock+0x8>)
 80a6eea:	f000 ba81 	b.w	80a73f0 <__retarget_lock_release>
 80a6eee:	bf00      	nop
 80a6ef0:	2000051b 	.word	0x2000051b

080a6ef4 <_tzset_unlocked>:
 80a6ef4:	4b01      	ldr	r3, [pc, #4]	; (80a6efc <_tzset_unlocked+0x8>)
 80a6ef6:	6818      	ldr	r0, [r3, #0]
 80a6ef8:	f000 b802 	b.w	80a6f00 <_tzset_unlocked_r>
 80a6efc:	2000005c 	.word	0x2000005c

080a6f00 <_tzset_unlocked_r>:
 80a6f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6f04:	b08d      	sub	sp, #52	; 0x34
 80a6f06:	4607      	mov	r7, r0
 80a6f08:	f000 f9bc 	bl	80a7284 <__gettzinfo>
 80a6f0c:	49b0      	ldr	r1, [pc, #704]	; (80a71d0 <_tzset_unlocked_r+0x2d0>)
 80a6f0e:	4605      	mov	r5, r0
 80a6f10:	4638      	mov	r0, r7
 80a6f12:	f000 f9af 	bl	80a7274 <_getenv_r>
 80a6f16:	4eaf      	ldr	r6, [pc, #700]	; (80a71d4 <_tzset_unlocked_r+0x2d4>)
 80a6f18:	4604      	mov	r4, r0
 80a6f1a:	b970      	cbnz	r0, 80a6f3a <_tzset_unlocked_r+0x3a>
 80a6f1c:	4bae      	ldr	r3, [pc, #696]	; (80a71d8 <_tzset_unlocked_r+0x2d8>)
 80a6f1e:	4aaf      	ldr	r2, [pc, #700]	; (80a71dc <_tzset_unlocked_r+0x2dc>)
 80a6f20:	6018      	str	r0, [r3, #0]
 80a6f22:	4baf      	ldr	r3, [pc, #700]	; (80a71e0 <_tzset_unlocked_r+0x2e0>)
 80a6f24:	6018      	str	r0, [r3, #0]
 80a6f26:	4baf      	ldr	r3, [pc, #700]	; (80a71e4 <_tzset_unlocked_r+0x2e4>)
 80a6f28:	6830      	ldr	r0, [r6, #0]
 80a6f2a:	e9c3 2200 	strd	r2, r2, [r3]
 80a6f2e:	f7fc fcf5 	bl	80a391c <free>
 80a6f32:	6034      	str	r4, [r6, #0]
 80a6f34:	b00d      	add	sp, #52	; 0x34
 80a6f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6f3a:	6831      	ldr	r1, [r6, #0]
 80a6f3c:	2900      	cmp	r1, #0
 80a6f3e:	d15f      	bne.n	80a7000 <_tzset_unlocked_r+0x100>
 80a6f40:	6830      	ldr	r0, [r6, #0]
 80a6f42:	f7fc fceb 	bl	80a391c <free>
 80a6f46:	4620      	mov	r0, r4
 80a6f48:	f7ff fde9 	bl	80a6b1e <strlen>
 80a6f4c:	1c41      	adds	r1, r0, #1
 80a6f4e:	4638      	mov	r0, r7
 80a6f50:	f7fc fd1c 	bl	80a398c <_malloc_r>
 80a6f54:	6030      	str	r0, [r6, #0]
 80a6f56:	2800      	cmp	r0, #0
 80a6f58:	d157      	bne.n	80a700a <_tzset_unlocked_r+0x10a>
 80a6f5a:	7823      	ldrb	r3, [r4, #0]
 80a6f5c:	ae0a      	add	r6, sp, #40	; 0x28
 80a6f5e:	2b3a      	cmp	r3, #58	; 0x3a
 80a6f60:	bf08      	it	eq
 80a6f62:	3401      	addeq	r4, #1
 80a6f64:	4633      	mov	r3, r6
 80a6f66:	4620      	mov	r0, r4
 80a6f68:	4a9f      	ldr	r2, [pc, #636]	; (80a71e8 <_tzset_unlocked_r+0x2e8>)
 80a6f6a:	49a0      	ldr	r1, [pc, #640]	; (80a71ec <_tzset_unlocked_r+0x2ec>)
 80a6f6c:	f7fc fcee 	bl	80a394c <siscanf>
 80a6f70:	2800      	cmp	r0, #0
 80a6f72:	dddf      	ble.n	80a6f34 <_tzset_unlocked_r+0x34>
 80a6f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6f76:	18e7      	adds	r7, r4, r3
 80a6f78:	5ce3      	ldrb	r3, [r4, r3]
 80a6f7a:	2b2d      	cmp	r3, #45	; 0x2d
 80a6f7c:	d149      	bne.n	80a7012 <_tzset_unlocked_r+0x112>
 80a6f7e:	f04f 34ff 	mov.w	r4, #4294967295
 80a6f82:	3701      	adds	r7, #1
 80a6f84:	f04f 0800 	mov.w	r8, #0
 80a6f88:	f10d 0a20 	add.w	sl, sp, #32
 80a6f8c:	f10d 0b1e 	add.w	fp, sp, #30
 80a6f90:	4633      	mov	r3, r6
 80a6f92:	4638      	mov	r0, r7
 80a6f94:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a6f98:	4995      	ldr	r1, [pc, #596]	; (80a71f0 <_tzset_unlocked_r+0x2f0>)
 80a6f9a:	9603      	str	r6, [sp, #12]
 80a6f9c:	f8cd b000 	str.w	fp, [sp]
 80a6fa0:	aa07      	add	r2, sp, #28
 80a6fa2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a6fa6:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a6faa:	f7fc fccf 	bl	80a394c <siscanf>
 80a6fae:	4540      	cmp	r0, r8
 80a6fb0:	ddc0      	ble.n	80a6f34 <_tzset_unlocked_r+0x34>
 80a6fb2:	213c      	movs	r1, #60	; 0x3c
 80a6fb4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a6fb8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a6fbc:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a71fc <_tzset_unlocked_r+0x2fc>
 80a6fc0:	fb01 2203 	mla	r2, r1, r3, r2
 80a6fc4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6fc8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a6fcc:	fb01 2303 	mla	r3, r1, r3, r2
 80a6fd0:	435c      	muls	r4, r3
 80a6fd2:	4b85      	ldr	r3, [pc, #532]	; (80a71e8 <_tzset_unlocked_r+0x2e8>)
 80a6fd4:	62ac      	str	r4, [r5, #40]	; 0x28
 80a6fd6:	4c83      	ldr	r4, [pc, #524]	; (80a71e4 <_tzset_unlocked_r+0x2e4>)
 80a6fd8:	464a      	mov	r2, r9
 80a6fda:	6023      	str	r3, [r4, #0]
 80a6fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6fde:	4983      	ldr	r1, [pc, #524]	; (80a71ec <_tzset_unlocked_r+0x2ec>)
 80a6fe0:	441f      	add	r7, r3
 80a6fe2:	4638      	mov	r0, r7
 80a6fe4:	4633      	mov	r3, r6
 80a6fe6:	f7fc fcb1 	bl	80a394c <siscanf>
 80a6fea:	4540      	cmp	r0, r8
 80a6fec:	dc17      	bgt.n	80a701e <_tzset_unlocked_r+0x11e>
 80a6fee:	6823      	ldr	r3, [r4, #0]
 80a6ff0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a6ff2:	6063      	str	r3, [r4, #4]
 80a6ff4:	4b78      	ldr	r3, [pc, #480]	; (80a71d8 <_tzset_unlocked_r+0x2d8>)
 80a6ff6:	601a      	str	r2, [r3, #0]
 80a6ff8:	4b79      	ldr	r3, [pc, #484]	; (80a71e0 <_tzset_unlocked_r+0x2e0>)
 80a6ffa:	f8c3 8000 	str.w	r8, [r3]
 80a6ffe:	e799      	b.n	80a6f34 <_tzset_unlocked_r+0x34>
 80a7000:	f7ff fd60 	bl	80a6ac4 <strcmp>
 80a7004:	2800      	cmp	r0, #0
 80a7006:	d19b      	bne.n	80a6f40 <_tzset_unlocked_r+0x40>
 80a7008:	e794      	b.n	80a6f34 <_tzset_unlocked_r+0x34>
 80a700a:	4621      	mov	r1, r4
 80a700c:	f7ff fd64 	bl	80a6ad8 <strcpy>
 80a7010:	e7a3      	b.n	80a6f5a <_tzset_unlocked_r+0x5a>
 80a7012:	2b2b      	cmp	r3, #43	; 0x2b
 80a7014:	f04f 0401 	mov.w	r4, #1
 80a7018:	bf08      	it	eq
 80a701a:	3701      	addeq	r7, #1
 80a701c:	e7b2      	b.n	80a6f84 <_tzset_unlocked_r+0x84>
 80a701e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7020:	f8c4 9004 	str.w	r9, [r4, #4]
 80a7024:	18fc      	adds	r4, r7, r3
 80a7026:	5cfb      	ldrb	r3, [r7, r3]
 80a7028:	2b2d      	cmp	r3, #45	; 0x2d
 80a702a:	f040 808c 	bne.w	80a7146 <_tzset_unlocked_r+0x246>
 80a702e:	f04f 37ff 	mov.w	r7, #4294967295
 80a7032:	3401      	adds	r4, #1
 80a7034:	2300      	movs	r3, #0
 80a7036:	4620      	mov	r0, r4
 80a7038:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a703c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7040:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7044:	930a      	str	r3, [sp, #40]	; 0x28
 80a7046:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a704a:	4633      	mov	r3, r6
 80a704c:	e9cd b600 	strd	fp, r6, [sp]
 80a7050:	4967      	ldr	r1, [pc, #412]	; (80a71f0 <_tzset_unlocked_r+0x2f0>)
 80a7052:	aa07      	add	r2, sp, #28
 80a7054:	f7fc fc7a 	bl	80a394c <siscanf>
 80a7058:	2800      	cmp	r0, #0
 80a705a:	dc7a      	bgt.n	80a7152 <_tzset_unlocked_r+0x252>
 80a705c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a705e:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a7062:	652f      	str	r7, [r5, #80]	; 0x50
 80a7064:	f04f 0900 	mov.w	r9, #0
 80a7068:	462f      	mov	r7, r5
 80a706a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a706c:	441c      	add	r4, r3
 80a706e:	7823      	ldrb	r3, [r4, #0]
 80a7070:	2b2c      	cmp	r3, #44	; 0x2c
 80a7072:	bf08      	it	eq
 80a7074:	3401      	addeq	r4, #1
 80a7076:	f894 8000 	ldrb.w	r8, [r4]
 80a707a:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a707e:	d17a      	bne.n	80a7176 <_tzset_unlocked_r+0x276>
 80a7080:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a7084:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a7088:	ab09      	add	r3, sp, #36	; 0x24
 80a708a:	9300      	str	r3, [sp, #0]
 80a708c:	4620      	mov	r0, r4
 80a708e:	4633      	mov	r3, r6
 80a7090:	4958      	ldr	r1, [pc, #352]	; (80a71f4 <_tzset_unlocked_r+0x2f4>)
 80a7092:	9603      	str	r6, [sp, #12]
 80a7094:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a7098:	f7fc fc58 	bl	80a394c <siscanf>
 80a709c:	2803      	cmp	r0, #3
 80a709e:	f47f af49 	bne.w	80a6f34 <_tzset_unlocked_r+0x34>
 80a70a2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a70a6:	1e4b      	subs	r3, r1, #1
 80a70a8:	2b0b      	cmp	r3, #11
 80a70aa:	f63f af43 	bhi.w	80a6f34 <_tzset_unlocked_r+0x34>
 80a70ae:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a70b2:	1e53      	subs	r3, r2, #1
 80a70b4:	2b04      	cmp	r3, #4
 80a70b6:	f63f af3d 	bhi.w	80a6f34 <_tzset_unlocked_r+0x34>
 80a70ba:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a70be:	2b06      	cmp	r3, #6
 80a70c0:	f63f af38 	bhi.w	80a6f34 <_tzset_unlocked_r+0x34>
 80a70c4:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a70c8:	f887 8008 	strb.w	r8, [r7, #8]
 80a70cc:	617b      	str	r3, [r7, #20]
 80a70ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a70d0:	eb04 0803 	add.w	r8, r4, r3
 80a70d4:	2302      	movs	r3, #2
 80a70d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a70da:	2300      	movs	r3, #0
 80a70dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a70e0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a70e4:	930a      	str	r3, [sp, #40]	; 0x28
 80a70e6:	f898 3000 	ldrb.w	r3, [r8]
 80a70ea:	2b2f      	cmp	r3, #47	; 0x2f
 80a70ec:	d109      	bne.n	80a7102 <_tzset_unlocked_r+0x202>
 80a70ee:	4633      	mov	r3, r6
 80a70f0:	4640      	mov	r0, r8
 80a70f2:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a70f6:	e9cd b600 	strd	fp, r6, [sp]
 80a70fa:	493f      	ldr	r1, [pc, #252]	; (80a71f8 <_tzset_unlocked_r+0x2f8>)
 80a70fc:	aa07      	add	r2, sp, #28
 80a70fe:	f7fc fc25 	bl	80a394c <siscanf>
 80a7102:	213c      	movs	r1, #60	; 0x3c
 80a7104:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7108:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a710c:	3728      	adds	r7, #40	; 0x28
 80a710e:	fb01 2203 	mla	r2, r1, r3, r2
 80a7112:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7116:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a711a:	fb01 2303 	mla	r3, r1, r3, r2
 80a711e:	f847 3c10 	str.w	r3, [r7, #-16]
 80a7122:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a7124:	4444      	add	r4, r8
 80a7126:	f1b9 0f00 	cmp.w	r9, #0
 80a712a:	d021      	beq.n	80a7170 <_tzset_unlocked_r+0x270>
 80a712c:	6868      	ldr	r0, [r5, #4]
 80a712e:	f7ff fe2d 	bl	80a6d8c <__tzcalc_limits>
 80a7132:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7134:	4b28      	ldr	r3, [pc, #160]	; (80a71d8 <_tzset_unlocked_r+0x2d8>)
 80a7136:	601a      	str	r2, [r3, #0]
 80a7138:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a713a:	1a9b      	subs	r3, r3, r2
 80a713c:	bf18      	it	ne
 80a713e:	2301      	movne	r3, #1
 80a7140:	4a27      	ldr	r2, [pc, #156]	; (80a71e0 <_tzset_unlocked_r+0x2e0>)
 80a7142:	6013      	str	r3, [r2, #0]
 80a7144:	e6f6      	b.n	80a6f34 <_tzset_unlocked_r+0x34>
 80a7146:	2b2b      	cmp	r3, #43	; 0x2b
 80a7148:	f04f 0701 	mov.w	r7, #1
 80a714c:	bf08      	it	eq
 80a714e:	3401      	addeq	r4, #1
 80a7150:	e770      	b.n	80a7034 <_tzset_unlocked_r+0x134>
 80a7152:	213c      	movs	r1, #60	; 0x3c
 80a7154:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7158:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a715c:	fb01 2203 	mla	r2, r1, r3, r2
 80a7160:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7164:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7168:	fb01 2303 	mla	r3, r1, r3, r2
 80a716c:	435f      	muls	r7, r3
 80a716e:	e778      	b.n	80a7062 <_tzset_unlocked_r+0x162>
 80a7170:	f04f 0901 	mov.w	r9, #1
 80a7174:	e77b      	b.n	80a706e <_tzset_unlocked_r+0x16e>
 80a7176:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a717a:	bf0a      	itet	eq
 80a717c:	4643      	moveq	r3, r8
 80a717e:	2344      	movne	r3, #68	; 0x44
 80a7180:	3401      	addeq	r4, #1
 80a7182:	220a      	movs	r2, #10
 80a7184:	4620      	mov	r0, r4
 80a7186:	a90b      	add	r1, sp, #44	; 0x2c
 80a7188:	9305      	str	r3, [sp, #20]
 80a718a:	f7ff fdf5 	bl	80a6d78 <strtoul>
 80a718e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a7192:	9b05      	ldr	r3, [sp, #20]
 80a7194:	45a0      	cmp	r8, r4
 80a7196:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a719a:	d114      	bne.n	80a71c6 <_tzset_unlocked_r+0x2c6>
 80a719c:	234d      	movs	r3, #77	; 0x4d
 80a719e:	f1b9 0f00 	cmp.w	r9, #0
 80a71a2:	d107      	bne.n	80a71b4 <_tzset_unlocked_r+0x2b4>
 80a71a4:	2103      	movs	r1, #3
 80a71a6:	722b      	strb	r3, [r5, #8]
 80a71a8:	2302      	movs	r3, #2
 80a71aa:	f8c5 9014 	str.w	r9, [r5, #20]
 80a71ae:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a71b2:	e78f      	b.n	80a70d4 <_tzset_unlocked_r+0x1d4>
 80a71b4:	220b      	movs	r2, #11
 80a71b6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a71ba:	2301      	movs	r3, #1
 80a71bc:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a71c0:	2300      	movs	r3, #0
 80a71c2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a71c4:	e786      	b.n	80a70d4 <_tzset_unlocked_r+0x1d4>
 80a71c6:	b280      	uxth	r0, r0
 80a71c8:	723b      	strb	r3, [r7, #8]
 80a71ca:	6178      	str	r0, [r7, #20]
 80a71cc:	e782      	b.n	80a70d4 <_tzset_unlocked_r+0x1d4>
 80a71ce:	bf00      	nop
 80a71d0:	080a8e54 	.word	0x080a8e54
 80a71d4:	20000504 	.word	0x20000504
 80a71d8:	2000050c 	.word	0x2000050c
 80a71dc:	080a8e57 	.word	0x080a8e57
 80a71e0:	20000508 	.word	0x20000508
 80a71e4:	200000c0 	.word	0x200000c0
 80a71e8:	200004f7 	.word	0x200004f7
 80a71ec:	080a8e5b 	.word	0x080a8e5b
 80a71f0:	080a8e7e 	.word	0x080a8e7e
 80a71f4:	080a8e6a 	.word	0x080a8e6a
 80a71f8:	080a8e7d 	.word	0x080a8e7d
 80a71fc:	200004ec 	.word	0x200004ec

080a7200 <_findenv_r>:
 80a7200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7204:	4607      	mov	r7, r0
 80a7206:	4689      	mov	r9, r1
 80a7208:	4616      	mov	r6, r2
 80a720a:	f000 f8f3 	bl	80a73f4 <__env_lock>
 80a720e:	4b18      	ldr	r3, [pc, #96]	; (80a7270 <_findenv_r+0x70>)
 80a7210:	681c      	ldr	r4, [r3, #0]
 80a7212:	469a      	mov	sl, r3
 80a7214:	b134      	cbz	r4, 80a7224 <_findenv_r+0x24>
 80a7216:	464b      	mov	r3, r9
 80a7218:	4698      	mov	r8, r3
 80a721a:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a721e:	b139      	cbz	r1, 80a7230 <_findenv_r+0x30>
 80a7220:	293d      	cmp	r1, #61	; 0x3d
 80a7222:	d1f9      	bne.n	80a7218 <_findenv_r+0x18>
 80a7224:	4638      	mov	r0, r7
 80a7226:	f000 f8eb 	bl	80a7400 <__env_unlock>
 80a722a:	2000      	movs	r0, #0
 80a722c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7230:	eba8 0809 	sub.w	r8, r8, r9
 80a7234:	46a3      	mov	fp, r4
 80a7236:	f854 0b04 	ldr.w	r0, [r4], #4
 80a723a:	2800      	cmp	r0, #0
 80a723c:	d0f2      	beq.n	80a7224 <_findenv_r+0x24>
 80a723e:	4642      	mov	r2, r8
 80a7240:	4649      	mov	r1, r9
 80a7242:	f7ff fc74 	bl	80a6b2e <strncmp>
 80a7246:	2800      	cmp	r0, #0
 80a7248:	d1f4      	bne.n	80a7234 <_findenv_r+0x34>
 80a724a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a724e:	eb03 0508 	add.w	r5, r3, r8
 80a7252:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a7256:	2b3d      	cmp	r3, #61	; 0x3d
 80a7258:	d1ec      	bne.n	80a7234 <_findenv_r+0x34>
 80a725a:	f8da 3000 	ldr.w	r3, [sl]
 80a725e:	4638      	mov	r0, r7
 80a7260:	ebab 0303 	sub.w	r3, fp, r3
 80a7264:	109b      	asrs	r3, r3, #2
 80a7266:	6033      	str	r3, [r6, #0]
 80a7268:	f000 f8ca 	bl	80a7400 <__env_unlock>
 80a726c:	1c68      	adds	r0, r5, #1
 80a726e:	e7dd      	b.n	80a722c <_findenv_r+0x2c>
 80a7270:	20000120 	.word	0x20000120

080a7274 <_getenv_r>:
 80a7274:	b507      	push	{r0, r1, r2, lr}
 80a7276:	aa01      	add	r2, sp, #4
 80a7278:	f7ff ffc2 	bl	80a7200 <_findenv_r>
 80a727c:	b003      	add	sp, #12
 80a727e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a7284 <__gettzinfo>:
 80a7284:	4800      	ldr	r0, [pc, #0]	; (80a7288 <__gettzinfo+0x4>)
 80a7286:	4770      	bx	lr
 80a7288:	200000c8 	.word	0x200000c8

080a728c <gmtime_r>:
 80a728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7290:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a7294:	460c      	mov	r4, r1
 80a7296:	2300      	movs	r3, #0
 80a7298:	4630      	mov	r0, r6
 80a729a:	4639      	mov	r1, r7
 80a729c:	4a4f      	ldr	r2, [pc, #316]	; (80a73dc <gmtime_r+0x150>)
 80a729e:	f000 f8b5 	bl	80a740c <__aeabi_ldivmod>
 80a72a2:	4639      	mov	r1, r7
 80a72a4:	4605      	mov	r5, r0
 80a72a6:	2300      	movs	r3, #0
 80a72a8:	4630      	mov	r0, r6
 80a72aa:	4a4c      	ldr	r2, [pc, #304]	; (80a73dc <gmtime_r+0x150>)
 80a72ac:	f000 f8ae 	bl	80a740c <__aeabi_ldivmod>
 80a72b0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a72b4:	2a00      	cmp	r2, #0
 80a72b6:	bfbc      	itt	lt
 80a72b8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a72bc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a72c0:	fbb2 f3f1 	udiv	r3, r2, r1
 80a72c4:	fb01 2213 	mls	r2, r1, r3, r2
 80a72c8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a72cc:	60a3      	str	r3, [r4, #8]
 80a72ce:	fbb2 f3f1 	udiv	r3, r2, r1
 80a72d2:	fb01 2213 	mls	r2, r1, r3, r2
 80a72d6:	6022      	str	r2, [r4, #0]
 80a72d8:	f04f 0207 	mov.w	r2, #7
 80a72dc:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a72e0:	bfac      	ite	ge
 80a72e2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a72e6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a72ea:	6063      	str	r3, [r4, #4]
 80a72ec:	1cc3      	adds	r3, r0, #3
 80a72ee:	fb93 f2f2 	sdiv	r2, r3, r2
 80a72f2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a72f6:	1a9b      	subs	r3, r3, r2
 80a72f8:	bf48      	it	mi
 80a72fa:	3307      	addmi	r3, #7
 80a72fc:	2800      	cmp	r0, #0
 80a72fe:	4938      	ldr	r1, [pc, #224]	; (80a73e0 <gmtime_r+0x154>)
 80a7300:	61a3      	str	r3, [r4, #24]
 80a7302:	bfbd      	ittte	lt
 80a7304:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a7308:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a730c:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a7310:	fb90 f1f1 	sdivge	r1, r0, r1
 80a7314:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a7318:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a731c:	4b31      	ldr	r3, [pc, #196]	; (80a73e4 <gmtime_r+0x158>)
 80a731e:	f240 176d 	movw	r7, #365	; 0x16d
 80a7322:	fb03 0001 	mla	r0, r3, r1, r0
 80a7326:	fbb0 f2f2 	udiv	r2, r0, r2
 80a732a:	fbb0 f3fc 	udiv	r3, r0, ip
 80a732e:	4402      	add	r2, r0
 80a7330:	1ad2      	subs	r2, r2, r3
 80a7332:	4b2d      	ldr	r3, [pc, #180]	; (80a73e8 <gmtime_r+0x15c>)
 80a7334:	2664      	movs	r6, #100	; 0x64
 80a7336:	fbb0 f3f3 	udiv	r3, r0, r3
 80a733a:	1ad3      	subs	r3, r2, r3
 80a733c:	fbb3 f5f7 	udiv	r5, r3, r7
 80a7340:	fbb3 f3fc 	udiv	r3, r3, ip
 80a7344:	fbb5 f2f6 	udiv	r2, r5, r6
 80a7348:	1ad3      	subs	r3, r2, r3
 80a734a:	4403      	add	r3, r0
 80a734c:	2099      	movs	r0, #153	; 0x99
 80a734e:	fb07 3315 	mls	r3, r7, r5, r3
 80a7352:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a7356:	f10c 0c02 	add.w	ip, ip, #2
 80a735a:	fbbc f7f0 	udiv	r7, ip, r0
 80a735e:	f04f 0805 	mov.w	r8, #5
 80a7362:	4378      	muls	r0, r7
 80a7364:	3002      	adds	r0, #2
 80a7366:	fbb0 f0f8 	udiv	r0, r0, r8
 80a736a:	f103 0e01 	add.w	lr, r3, #1
 80a736e:	ebae 0000 	sub.w	r0, lr, r0
 80a7372:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a7376:	45f4      	cmp	ip, lr
 80a7378:	bf94      	ite	ls
 80a737a:	f04f 0c02 	movls.w	ip, #2
 80a737e:	f06f 0c09 	mvnhi.w	ip, #9
 80a7382:	4467      	add	r7, ip
 80a7384:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a7388:	fb0c 5101 	mla	r1, ip, r1, r5
 80a738c:	2f01      	cmp	r7, #1
 80a738e:	bf98      	it	ls
 80a7390:	3101      	addls	r1, #1
 80a7392:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a7396:	d30c      	bcc.n	80a73b2 <gmtime_r+0x126>
 80a7398:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a739c:	61e3      	str	r3, [r4, #28]
 80a739e:	2300      	movs	r3, #0
 80a73a0:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a73a4:	60e0      	str	r0, [r4, #12]
 80a73a6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a73aa:	4620      	mov	r0, r4
 80a73ac:	6223      	str	r3, [r4, #32]
 80a73ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a73b2:	f015 0f03 	tst.w	r5, #3
 80a73b6:	d102      	bne.n	80a73be <gmtime_r+0x132>
 80a73b8:	fb06 5212 	mls	r2, r6, r2, r5
 80a73bc:	b95a      	cbnz	r2, 80a73d6 <gmtime_r+0x14a>
 80a73be:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a73c2:	fbb5 f2f6 	udiv	r2, r5, r6
 80a73c6:	fb06 5212 	mls	r2, r6, r2, r5
 80a73ca:	fab2 f282 	clz	r2, r2
 80a73ce:	0952      	lsrs	r2, r2, #5
 80a73d0:	333b      	adds	r3, #59	; 0x3b
 80a73d2:	4413      	add	r3, r2
 80a73d4:	e7e2      	b.n	80a739c <gmtime_r+0x110>
 80a73d6:	2201      	movs	r2, #1
 80a73d8:	e7fa      	b.n	80a73d0 <gmtime_r+0x144>
 80a73da:	bf00      	nop
 80a73dc:	00015180 	.word	0x00015180
 80a73e0:	00023ab1 	.word	0x00023ab1
 80a73e4:	fffdc54f 	.word	0xfffdc54f
 80a73e8:	00023ab0 	.word	0x00023ab0

080a73ec <__retarget_lock_acquire>:
 80a73ec:	4770      	bx	lr

080a73ee <__retarget_lock_acquire_recursive>:
 80a73ee:	4770      	bx	lr

080a73f0 <__retarget_lock_release>:
 80a73f0:	4770      	bx	lr

080a73f2 <__retarget_lock_release_recursive>:
 80a73f2:	4770      	bx	lr

080a73f4 <__env_lock>:
 80a73f4:	4801      	ldr	r0, [pc, #4]	; (80a73fc <__env_lock+0x8>)
 80a73f6:	f7ff bffa 	b.w	80a73ee <__retarget_lock_acquire_recursive>
 80a73fa:	bf00      	nop
 80a73fc:	2000051a 	.word	0x2000051a

080a7400 <__env_unlock>:
 80a7400:	4801      	ldr	r0, [pc, #4]	; (80a7408 <__env_unlock+0x8>)
 80a7402:	f7ff bff6 	b.w	80a73f2 <__retarget_lock_release_recursive>
 80a7406:	bf00      	nop
 80a7408:	2000051a 	.word	0x2000051a

080a740c <__aeabi_ldivmod>:
 80a740c:	b97b      	cbnz	r3, 80a742e <__aeabi_ldivmod+0x22>
 80a740e:	b972      	cbnz	r2, 80a742e <__aeabi_ldivmod+0x22>
 80a7410:	2900      	cmp	r1, #0
 80a7412:	bfbe      	ittt	lt
 80a7414:	2000      	movlt	r0, #0
 80a7416:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a741a:	e006      	blt.n	80a742a <__aeabi_ldivmod+0x1e>
 80a741c:	bf08      	it	eq
 80a741e:	2800      	cmpeq	r0, #0
 80a7420:	bf1c      	itt	ne
 80a7422:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a7426:	f04f 30ff 	movne.w	r0, #4294967295
 80a742a:	f7ff ba03 	b.w	80a6834 <__aeabi_idiv0>
 80a742e:	f1ad 0c08 	sub.w	ip, sp, #8
 80a7432:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a7436:	2900      	cmp	r1, #0
 80a7438:	db09      	blt.n	80a744e <__aeabi_ldivmod+0x42>
 80a743a:	2b00      	cmp	r3, #0
 80a743c:	db1a      	blt.n	80a7474 <__aeabi_ldivmod+0x68>
 80a743e:	f7ff f897 	bl	80a6570 <__udivmoddi4>
 80a7442:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a7446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a744a:	b004      	add	sp, #16
 80a744c:	4770      	bx	lr
 80a744e:	4240      	negs	r0, r0
 80a7450:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a7454:	2b00      	cmp	r3, #0
 80a7456:	db1b      	blt.n	80a7490 <__aeabi_ldivmod+0x84>
 80a7458:	f7ff f88a 	bl	80a6570 <__udivmoddi4>
 80a745c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a7460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7464:	b004      	add	sp, #16
 80a7466:	4240      	negs	r0, r0
 80a7468:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a746c:	4252      	negs	r2, r2
 80a746e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a7472:	4770      	bx	lr
 80a7474:	4252      	negs	r2, r2
 80a7476:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a747a:	f7ff f879 	bl	80a6570 <__udivmoddi4>
 80a747e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a7482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7486:	b004      	add	sp, #16
 80a7488:	4240      	negs	r0, r0
 80a748a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a748e:	4770      	bx	lr
 80a7490:	4252      	negs	r2, r2
 80a7492:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a7496:	f7ff f86b 	bl	80a6570 <__udivmoddi4>
 80a749a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a749e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a74a2:	b004      	add	sp, #16
 80a74a4:	4252      	negs	r2, r2
 80a74a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a74aa:	4770      	bx	lr

080a74ac <dynalib_user>:
 80a74ac:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a74bc:	0000 0000 227b 7473 7461 7375 3a22 2522     ....{"status":"%
 80a74cc:	2273 222c 6974 656d 3a22 2522 322e 3a64     s","time":"%.2d:
 80a74dc:	2e25 6432 253a 322e 2264 222c 6164 6574     %.2d:%.2d","date
 80a74ec:	3a22 2522 322e 2e64 2e25 6432 252e 322e     ":"%.2d.%.2d.%.2
 80a74fc:	2264 222c 756c 6665 6574 2272 223a 4850     d","luefter":"PH
 80a750c:	544f 4e4f 2c22 6f22 7470 6f69 226e 223a     OTON","option":"
 80a751c:	7325 7d22 7700 7361 6573 7372 6174 646e     %s"}.wasserstand
 80a752c:	7b00 7322 6174 7574 2273 223a 7325 2c22     .{"status":"%s",
 80a753c:	7422 6d69 2265 223a 2e25 6432 253a 322e     "time":"%.2d:%.2
 80a754c:	3a64 2e25 6432 2c22 6422 7461 2265 223a     d:%.2d","date":"
 80a755c:	2e25 6432 252e 322e 2e64 2e25 6432 2c22     %.2d.%.2d.%.2d",
 80a756c:	6c22 6575 7466 7265 3a22 5022 4f48 4f54     "luefter":"PHOTO
 80a757c:	224e 222c 706f 6974 6e6f 3a22 2522 2073     N","option":"%s 
 80a758c:	3225 2264 007d 2520 2073 6425 0020 5550     %2d"}. %s %d .PU
 80a759c:	504d 2045 414d 4e49 4320 554f 544e 4f44     MPE MAIN COUNTDO
 80a75ac:	4e57 4e20 574f 0020 6f63 746e 6f72 006c     WN NOW .control.
 80a75bc:	5320 656c 7065 4d20 646f 2065 6e65 6261      Sleep Mode enab
 80a75cc:	656c 2064 2000 6c43 6165 2072 6572 6573     led . Clear rese
 80a75dc:	7672 2065 6572 6570 6974 6974 6e6f 6320     rve repetition c
 80a75ec:	756f 746e 7265 0020 5320 656c 7065 4d20     ounter . Sleep M
 80a75fc:	646f 2065 6964 6173 6c62 6465 0020 4554     ode disabled .TE
 80a760c:	504d 4920 3a4e 6425 4f20 5455 253a 0064     MP IN:%d OUT:%d.
 80a761c:	5320 6f74 6572 4320 4e4f 5254 4c4f 6920      Store CONTROL i
 80a762c:	206e 4545 5250 4d4f 0020 5520 746c 6172     n EEPROM . Ultra
 80a763c:	6f73 696e 2063 2000 7250 7065 7261 2065     sonic . Prepare 
 80a764c:	6c53 6565 2070 2000 6850 746f 6e6f 4820     Sleep . Photon H
 80a765c:	2057 4449 0020 6170 7472 6369 656c 642f     W ID .particle/d
 80a766c:	7665 6369 2f65 616e 656d 2000 6c75 7274     evice/name. ultr
 80a767c:	2061 6f73 696e 2063 6964 7473 6e61 6563     a sonic distance
 80a768c:	0020 7520 746c 6172 6420 7369 6174 636e      . ultra distanc
 80a769c:	2065 203a 6425 6d20 006d 4157 4e52 4e49     e : %d mm.WARNIN
 80a76ac:	3a47 4620 6961 656c 2064 6f74 7220 6165     G: Failed to rea
 80a76bc:	2064 6c75 7274 7361 6e6f 6369 7320 6e65     d ultrasonic sen
 80a76cc:	6f73 0072 4157 5353 5245 2000 6c75 7274     sor.WASSER. ultr
 80a76dc:	2061 7265 6f72 2072 203a 6425 0020 7520     a error : %d . u
 80a76ec:	746c 6172 6420 7369 6174 636e 2065 7661     ltra distance av
 80a76fc:	7265 6761 2065 203a 6425 6d20 006d 6964     erage : %d mm.di
 80a770c:	7473 6e61 6563 3a20 0020 7520 746c 6172     stance : . ultra
 80a771c:	6c20 7665 6c65 6120 6576 6172 6567 3a20      level average :
 80a772c:	2520 2064 6d6d 2000 5243 2043 7245 6f72      %d mm. CRC Erro
 80a773c:	2072 2000 6547 2074 6554 706d 7265 7461     r . Get Temperat
 80a774c:	7275 2065 5300 6e65 6f73 2072 4449 2520     ure .Sensor ID %
 80a775c:	2064 756e 3d6d 6425 5420 6d65 6570 6172     d num=%d Tempera
 80a776c:	7574 6572 2520 322e 2066 2043 0a20 000d     ture %.2f C  ...
 80a777c:	6573 736e 726f 6920 0064 205d 2500 0069     sensor id.] .%i.
 80a778c:	6c25 0069 7020 6f72 6f70 6573 2064 6c73     %li. proposed sl
 80a779c:	6565 2070 7564 6172 6974 6e6f 203a 6425     eep duration: %d
 80a77ac:	6d20 6e69 7475 7365 5300 454c 5045 6420      minutes.SLEEP d
 80a77bc:	7369 6261 656c 2064 7962 4820 2057 6970     isabled by HW pi
 80a77cc:	206e 4300 4e4f 5254 4c4f 5300 454c 5045     n .CONTROL.SLEEP
 80a77dc:	6420 7369 6261 656c 2064 7962 5320 2057      disabled by SW 
 80a77ec:	2000 6f64 746e 6c53 6565 2070 6970 206e     . dontSleep pin 
 80a77fc:	203a 6425 0020 2520 322e 2d64 2e25 6432     : %d . %.2d-%.2d
 80a780c:	252d 2064 2e25 6432 253a 322e 3a64 2e25     -%d %.2d:%.2d:%.
 80a781c:	6432 0020 6f43 6e6e 6365 6974 676e 7420     2d .Connecting t
 80a782c:	206f 6900 006e 7770 006d 7764 6100 0077     o .in.pwm.dw.aw.
 80a783c:	6e49 6176 696c 2064 5748 6320 646d 203a     Invalid HW cmd: 
 80a784c:	5200 6165 7964 2820 6970 676e 203a 6d00     .Ready (ping: .m
 80a785c:	2973 002e 6e49 6176 696c 2064 7561 6874     s)..Invalid auth
 80a786c:	7420 6b6f 6e65 4300 6e6f 656e 7463 6620      token.Connect f
 80a787c:	6961 656c 2e64 6320 646f 3a65 0020 6150     ailed. code: .Pa
 80a788c:	6b63 7465 7420 6f6f 6220 6769 203a 5200     cket too big: .R
 80a789c:	6165 7964 5200 6465 7269 6365 6974 676e     eady.Redirecting
 80a78ac:	7420 206f 5300 7265 6576 3a72 0020 6548      to .Server: .He
 80a78bc:	7261 6274 6165 2074 6974 656d 756f 0074     artbeat timeout.
 80a78cc:	6f4c 6967 206e 6974 656d 756f 0074 7776     Login timeout.vw
 80a78dc:	2000 2a2a 202a 5250 5045 5241 2045 4c53     . *** PREPARE SL
 80a78ec:	4545 2050 2a2a 202a 2300 2323 2023 4c53     EEP *** .#### SL
 80a78fc:	4545 2050 694d 756e 6574 2073 2323 2323     EEP Minutes ####
 80a790c:	3a20 0020 2a20 2a2a 5720 4b41 2045 5055      : . *** WAKE UP
 80a791c:	2a20 2a2a 0020 2323 2323 5720 4b41 2045      *** .#### WAKE 
 80a792c:	5055 2320 2323 0023 4157 454b 5520 0050     UP ####.WAKE UP.
 80a793c:	5550 504d 2045 414d 4e49 4320 554f 544e     PUMPE MAIN COUNT
 80a794c:	4f44 4e57 4920 2053 6800 6f6f 2d6b 6572     DOWN IS .hook-re
 80a795c:	7073 6e6f 6573 772f 7461 7265 6f43 746e     sponse/waterCont
 80a796c:	6f72 006c 4157 5353 5245 5453 4e41 2044     rol.WASSERSTAND 
 80a797c:	203a 4c42 4d55 4e45 4720 4549 5353 4e45     : BLUMEN GIESSEN
 80a798c:	4920 5453 4420 4145 544b 5649 4549 5452      IST DEAKTIVIERT
 80a799c:	0020 6574 706d 6920 206e 203a 6425 2020      .temp in : %d  
 80a79ac:	6574 706d 6f20 7475 3a20 2520 2064 2000     temp out : %d . 
 80a79bc:	6548 6c6c 206f 2000 2061 203a 7453 7461     Hello . a : Stat
 80a79cc:	7375 2000 2062 203a 6c42 6d75 6e65 6720     us. b : Blumen g
 80a79dc:	6569 7373 6e65 2000 2064 203a 655a 7469     iessen. d : Zeit
 80a79ec:	6164 6575 2072 6947 7365 6573 206e 6576     dauer Giessen ve
 80a79fc:	7272 6e69 6567 6e72 2000 2069 203a 655a     rringern. i : Ze
 80a7a0c:	7469 6164 6575 2072 6947 7365 6573 206e     itdauer Giessen 
 80a7a1c:	7265 6f68 6865 6e65 2000 2073 203a 6c73     erhoehen. s : sl
 80a7a2c:	6565 2070 6e65 6261 656c 2064 2000 2070     eep enabled . p 
 80a7a3c:	203a 6c73 6565 2070 6964 6173 6c62 6465     : sleep disabled
 80a7a4c:	0020 7520 3a20 6320 656c 7261 7220 7365      . u : clear res
 80a7a5c:	7265 6576 7220 7065 7465 7469 6f69 206e     erve repetition 
 80a7a6c:	6f63 6e75 6574 2072 2000 2077 203a 7473     counter . w : st
 80a7a7c:	726f 2065 6f63 666e 6769 7420 206f 4545     ore config to EE
 80a7a8c:	5250 4d4f 0020 7920 3a20 6720 746f 206f     PROM . y : goto 
 80a7a9c:	6c73 6565 2070 2000 2078 203a 6c75 7274     sleep . x : ultr
 80a7aac:	2061 6f73 696e 2063 656d 7361 7275 6d65     a sonic measurem
 80a7abc:	6e65 2074 2000 6554 6d72 6e69 6c61 6420     ent . Terminal d
 80a7acc:	7369 6261 656c 2064 0020 4554 4d52 4e49     isabled  .TERMIN
 80a7adc:	4c41 6420 7369 6261 656c 2064 7962 4220     AL disabled by B
 80a7aec:	796c 6b6e 4220 7475 6f74 006e 5420 7265     lynk Button. Ter
 80a7afc:	696d 616e 206c 6e65 6261 656c 2064 0020     minal enabled  .
 80a7b0c:	4554 4d52 4e49 4c41 6520 616e 6c62 6465     TERMINAL enabled
 80a7b1c:	6220 2079 6c42 6e79 206b 7542 7474 6e6f      by Blynk Button
 80a7b2c:	5300 454c 5045 4420 5349 4241 454c 2044     .SLEEP DISABLED 
 80a7b3c:	5942 4220 594c 4b4e 4220 5455 4f54 204e     BY BLYNK BUTTON 
 80a7b4c:	2000 6c53 6565 2070 6f4d 6564 4420 7369     . Sleep Mode Dis
 80a7b5c:	6261 656c 2064 7962 6220 796c 6b6e 6220     abled by blynk b
 80a7b6c:	7475 6f74 206e 5300 454c 5045 4520 414e     utton .SLEEP ENA
 80a7b7c:	4c42 4445 4220 2059 4c42 4e59 204b 5542     BLED BY BLYNK BU
 80a7b8c:	5454 4e4f 0020 5320 656c 7065 4d20 646f     TTON . Sleep Mod
 80a7b9c:	2065 6e45 6261 656c 2064 7962 6220 796c     e Enabled by bly
 80a7bac:	6b6e 6220 7475 6f74 206e 5400 6e61 666b     nk button .Tankf
 80a7bbc:	6575 6c6c 6e65 6220 2079 4c42 4e59 204b     uellen by BLYNK 
 80a7bcc:	7562 7474 6e6f 0020 5220 7365 7265 6576     button . Reserve
 80a7bdc:	5020 6d75 6570 6520 6e69 6567 6373 6168      Pumpe eingescha
 80a7bec:	746c 7465 6220 2079 7562 7474 6e6f 2020     ltet by button  
 80a7bfc:	5200 7365 7265 6576 5020 6d75 6570 6f20     .Reserve Pumpe o
 80a7c0c:	6666 6220 2079 4c42 4e59 204b 7562 7474     ff by BLYNK butt
 80a7c1c:	6e6f 0020 5220 7365 7265 6576 5020 6d75     on . Reserve Pum
 80a7c2c:	6570 6120 7375 6567 6373 6168 746c 7465     pe ausgeschaltet
 80a7c3c:	6220 2079 7562 7474 6e6f 0020 6c42 6d75      by button .Blum
 80a7c4c:	6e65 6720 6569 7373 6e65 6420 6165 746b     en giessen deakt
 80a7c5c:	7669 6569 7472 6220 2079 6c42 6e79 206b     iviert by Blynk 
 80a7c6c:	7542 7474 6e6f 0020 6c42 6d75 6e65 6720     Button .Blumen g
 80a7c7c:	6569 7373 6e65 6420 6165 746b 7669 6569     iessen deaktivie
 80a7c8c:	7472 0020 6c42 6d75 6e65 6720 6569 7373     rt .Blumen giess
 80a7c9c:	6e65 6120 746b 7669 6569 7472 6220 2079     en aktiviert by 
 80a7cac:	6c42 6e79 206b 7542 7474 6e6f 0020 6c42     Blynk Button .Bl
 80a7cbc:	6d75 6e65 6720 6569 7373 6e65 6120 746b     umen giessen akt
 80a7ccc:	7669 6569 7472 0020 614d 6e69 5020 6d75     iviert .Main Pum
 80a7cdc:	6570 6220 2079 7562 7474 6e6f 0020 4d20     pe by button . M
 80a7cec:	6961 206e 7550 706d 2065 6965 676e 7365     ain Pumpe einges
 80a7cfc:	6863 6c61 6574 2074 7962 6220 7475 6f74     chaltet by butto
 80a7d0c:	206e 0020 4d20 6961 206e 7550 706d 2065     n  . Main Pumpe 
 80a7d1c:	7561 6773 7365 6863 6c61 6574 2074 7962     ausgeschaltet by
 80a7d2c:	6220 7475 6f74 206e 7200 6365 6965 6576      button .receive
 80a7d3c:	2064 3a20 0020 666f 0066 4157 5353 5245     d  : .off.WASSER
 80a7d4c:	5453 4e41 2044 203a 4947 5345 4553 204e     STAND : GIESSEN 
 80a7d5c:	4544 4b41 4954 4956 5245 2054 7962 5720     DEAKTIVIERT by W
 80a7d6c:	6265 6f48 6b6f 5700 5341 4553 5352 4154     ebHook.WASSERSTA
 80a7d7c:	444e 3a20 4720 4549 5353 4e45 4120 544b     ND : GIESSEN AKT
 80a7d8c:	5649 4549 5452 6220 2079 6557 4862 6f6f     IVIERT by WebHoo
 80a7d9c:	006b 7325 2520 0064 7420 6f6e 3a77 0020     k.%s %d. tnow: .
 80a7dac:	7420 5f73 6967 7365 6573 3a6e 2520 2064      ts_giessen: %d 
 80a7dbc:	2000 6774 6569 7373 6e65 0020 3231 2056     . tgiessen .12V 
 80a7dcc:	2020 2020 6d5b 5d56 3a20 0020 414d 4e49         [mV] : .MAIN
 80a7ddc:	5020 6d75 6570 6920 2073 4e4f 5200 5345      Pumpe is ON.RES
 80a7dec:	5245 4556 5020 6d75 6570 6920 7473 4f20     ERVE Pumpe ist O
 80a7dfc:	004e 7720 7461 7265 656c 6576 3a6c 2520     N. waterlevel: %
 80a7e0c:	2064 2000 6977 6966 253d 2073 6c63 756f     d . wifi=%s clou
 80a7e1c:	3d64 7325 6620 7361 5f74 6f63 6e75 6574     d=%s fast_counte
 80a7e2c:	3d72 6425 0020 6c63 0072 6576 7372 6f69     r=%d .clr.versio
 80a7e3c:	206e 2020 2020 2020 2020 2020 3a20 0020     n            : .
 80a7e4c:	6f64 746e 6c53 6565 2070 2020 2020 2020     dontSleep       
 80a7e5c:	2020 3a20 0020 6f64 746e 6947 7365 6573        : .dontGiesse
 80a7e6c:	206e 2020 2020 2020 3a20 0020 7570 706d     n        : .pump
 80a7e7c:	5f65 6f63 6e75 5f74 6f64 6e77 2020 3a20     e_count_down   :
 80a7e8c:	0020 6572 6573 7672 5f65 6572 6570 6974      .reserve_repeti
 80a7e9c:	6974 6e6f 3a73 0020 6f64 746e 6947 7365     tions: .dontGies
 80a7eac:	6573 3a6e 7000 6d75 6570 6320 756f 746e     sen:.pumpe count
 80a7ebc:	6420 776f 3a6e 5700 5341 4553 5352 4154      down:.WASSERSTA
 80a7ecc:	444e 3a20 0020 4120 5069 6d75 6570 614d     ND : . AiPumpeMa
 80a7edc:	6e69 2020 2020 203a 6425 5b20 566d 005d     in    : %d [mV].
 80a7eec:	6941 7550 706d 4d65 6961 206e 2020 5b20     AiPumpeMain    [
 80a7efc:	566d 205d 203a 4100 4344 2000 6941 7550     mV] : .ADC. AiPu
 80a7f0c:	706d 5265 7365 7265 6576 3a20 2520 2064     mpeReserve : %d 
 80a7f1c:	6d5b 5d56 4100 5069 6d75 6570 6552 6573     [mV].AiPumpeRese
 80a7f2c:	7672 2065 6d5b 5d56 3a20 0020 6574 706d     rve [mV] : .temp
 80a7f3c:	6920 206e 3a20 0020 6574 706d 6f20 7475      in  : .temp out
 80a7f4c:	3a20 0020 2d20 2d2d 2d2d 2d2d 2d2d 2d2d      : . -----------
 80a7f5c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 0020 590a     ------------ ..Y
 80a7f6c:	756f 7320 6961 3a64 2000 7372 206c 2031     ou said:. rsl 1 
 80a7f7c:	6965 206e 2000 7372 206c 2031 7561 2073     ein . rsl 1 aus 
 80a7f8c:	2000 7372 206c 2032 6965 206e 2000 7372     . rsl 2 ein . rs
 80a7f9c:	206c 2032 7561 2073 2000 7372 206c 2033     l 2 aus . rsl 3 
 80a7fac:	6965 206e 2000 7372 206c 2033 7561 2073     ein . rsl 3 aus 
 80a7fbc:	2000 7372 206c 2035 6965 206e 2000 7372     . rsl 5 ein . rs
 80a7fcc:	206c 2035 7561 2073 2000 6577 6869 616e     l 5 aus . weihna
 80a7fdc:	6863 6574 206e 6965 206e 0020 7720 6965     chten ein  . wei
 80a7fec:	6e68 6361 7468 6e65 6120 7375 2020 2d00     hnachten aus  .-
 80a7ffc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a800c:	2d2d 2d2d 002d 2020 2020 2020 6557 636c     -----.      Welc
 80a801c:	6d6f 0065 0a0d 2020 2020 5f5f 205f 5f20     ome...    ___  _
 80a802c:	205f 2020 2020 2020 2020 5f20 0d5f 200a     _          __.. 
 80a803c:	2020 202f 205f 2f29 2f20 205f 5f5f 5f5f       / _ )/ /_ ____
 80a804c:	205f 2f20 2f20 5f5f 0a0d 2020 202f 205f     _  / /__..  / _ 
 80a805c:	2f20 2f20 2f20 202f 202f 205f 2f5c 2020      / / // / _ \/  
 80a806c:	5f27 0d2f 200a 5f2f 5f5f 2f5f 2f5f 5f5c     '_/.. /____/_/\_
 80a807c:	202c 5f2f 2f2f 2f5f 2f5f 5f5c 0d5c 200a     , /_//_/_/\_\.. 
 80a808c:	2020 2020 2020 2f20 5f5f 2f5f 7620 2e30            /___/ v0.
 80a809c:	2e36 2031 6e6f 5020 7261 6974 6c63 2065     6.1 on Particle 
 80a80ac:	6850 746f 6e6f 0a0d 6200 796c 6b6e 632d     Photon...blynk-c
 80a80bc:	6f6c 6475 632e 6d6f 2300 2323 2023 4553     loud.com.#### SE
 80a80cc:	5554 2f50 4552 4553 2054 6556 7372 6f69     TUP/RESET Versio
 80a80dc:	206e 5200 5345 5445 5400 7265 696d 616e     n .RESET.Termina
 80a80ec:	206c 6964 6173 6c62 6465 5400 5245 494d     l disabled.TERMI
 80a80fc:	414e 204c 6964 6173 6c62 6465 6220 2079     NAL disabled by 
 80a810c:	6974 656d 756f 0074                         timeout.

080a8114 <_ZTV14WidgetTerminal>:
	...
 80a811c:	085b 080a 085d 080a 0835 080a 41ed 080a     [...]...5....A..
 80a812c:	14dd 080a 0855 080a                         ....U...

080a8134 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
 80a8134:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e36     blnkinf.ver.0.6.
 80a8144:	0031 2d68 6562 7461 3100 0030 7562 6666     1.h-beat.10.buff
 80a8154:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
 80a8164:	6974 6c63 2065 6850 746f 6e6f 6200 6975     ticle Photon.bui
 80a8174:	646c 4a00 6e75 3120 2037 3032 3132 3120     ld.Jun 17 2021 1
 80a8184:	3a38 3535 343a 0034 0000 4520 5252 524f     8:55:44... ERROR
 80a8194:	7720 6968 6863 6e20 746f 7620 6c61 6469      which not valid
 80a81a4:	0020 4520 5252 524f 7320 6174 6574 6e20      . ERROR state n
 80a81b4:	746f 7620 6c61 6469 0020 6553 646e 2065     ot valid .Sende 
 80a81c4:	6f43 6564 3a20 0020 4620 6865 656c 2072     Code : . Fehler 
 80a81d4:	203a 6f6b 6e6e 6574 4320 646f 2065 696e     : konnte Code ni
 80a81e4:	6863 2074 6966 646e 6e65 0020 3030 3130     cht finden .0001
 80a81f4:	3030 3130 3030 3030 3130 3130 3130 3130     0001000001010101
 80a8204:	3030 3031 3000 3030 3031 3030 3031 3030     0010.00010001000
 80a8214:	3030 3031 3031 3031 3031 3030 0031 3030     0010101010001.00
 80a8224:	3130 3030 3130 3030 3130 3030 3130 3130     0100010001000101
 80a8234:	3130 3130 3030 3000 3030 3031 3030 3031     010100.000100010
 80a8244:	3030 3031 3030 3031 3031 3031 3030 0031     001000101010001.
 80a8254:	3030 3130 3030 3130 3030 3130 3130 3030     0001000100010100
 80a8264:	3130 3130 3030 3031 3000 3030 3031 3030     01010010.0001000
 80a8274:	3031 3030 3031 3031 3030 3031 3031 3030     1000101000101000
 80a8284:	0031 5546 4b4e 502d 4d55 4550 5220 4c53     1.FUNK-PUMPE RSL
 80a8294:	2033 4945 474e 5345 4843 4c41 4554 2054     3 EINGESCHALTET 
 80a82a4:	2000 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     . --------------
 80a82b4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a82c4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 202d     --------------- 
 80a82d4:	2000 414d 4e49 5020 6d75 6570 7320 6863     . MAIN Pumpe sch
 80a82e4:	6c61 6574 206e 203a 6425 5a20 6965 2074     alten : %d Zeit 
 80a82f4:	6425 4200 554c 454d 204e 4947 5345 4553     %d.BLUMEN GIESSE
 80a8304:	204e 4542 4947 4e4e 2054 0020 4157 5353     N BEGINNT  .WASS
 80a8314:	5245 5453 4e41 2044 6562 6f66 6572 7020     ERSTAND before p
 80a8324:	6d75 6570 4f20 204e 203a 5700 5341 4553     umpe ON : .WASSE
 80a8334:	5352 4154 444e 5420 4f52 4b43 4e45 4c2d     RSTAND TROCKEN-L
 80a8344:	5541 2d46 4353 5548 5a54 202e 5550 504d     AUF-SCHUTZ. PUMP
 80a8354:	2045 494e 4843 2054 4945 534e 4843 4c41     E NICHT EINSCHAL
 80a8364:	4554 004e 4148 5055 2d54 5550 504d 2045     TEN.HAUPT-PUMPE 
 80a8374:	4945 474e 5345 4843 4c41 4554 2054 203a     EINGESCHALTET : 
 80a8384:	4800 5541 5450 502d 4d55 4550 4120 5355     .HAUPT-PUMPE AUS
 80a8394:	4547 4353 4148 544c 5445 0020 4157 5353     GESCHALTET .WASS
 80a83a4:	5245 5453 4e41 2044 6661 6574 2072 7570     ERSTAND after pu
 80a83b4:	706d 2065 464f 2046 203a 5700 5341 4553     mpe OFF : .WASSE
 80a83c4:	5352 4154 444e 6720 6665 6c61 656c 206e     RSTAND gefallen 
 80a83d4:	6d75 5b20 6d6d 205d 203a 5700 5341 4553     um [mm] : .WASSE
 80a83e4:	5352 4154 444e 4220 554c 454d 204e 4947     RSTAND BLUMEN GI
 80a83f4:	5345 4553 204e 5245 4f46 474c 4552 4349     ESSEN ERFOLGREIC
 80a8404:	2048 4542 4e45 4544 0054 4420 506f 6d75     H BEENDET. DoPum
 80a8414:	6570 614d 6e69 2020 2020 203a 6425 0020     peMain    : %d .
 80a8424:	6941 7550 706d 4d65 6961 206e 6d5b 5d56     AiPumpeMain [mV]
 80a8434:	3a20 0020 5220 5345 5245 4556 5020 6d75      : . RESERVE Pum
 80a8444:	6570 7320 6863 6c61 6574 206e 203a 6425     pe schalten : %d
 80a8454:	5a20 6965 2074 6425 5700 5341 4553 5352      Zeit %d.WASSERS
 80a8464:	4154 444e 6220 6665 726f 2065 6572 2d73     TAND before res-
 80a8474:	7570 706d 2065 4e4f 3a20 0020 4552 4553     pumpe ON : .RESE
 80a8484:	5652 2d45 5550 504d 2045 4945 474e 5345     RVE-PUMPE EINGES
 80a8494:	4843 4c41 4554 2054 5200 5345 5245 4556     CHALTET .RESERVE
 80a84a4:	502d 4d55 4550 4120 5355 4547 4353 4148     -PUMPE AUSGESCHA
 80a84b4:	544c 5445 202e 5546 4c45 554c 474e 4e20     LTET. FUELLUNG N
 80a84c4:	2e52 0020 4157 5353 5245 5453 4e41 2044     R. .WASSERSTAND 
 80a84d4:	6661 6574 2072 6572 2d73 7570 706d 2065     after res-pumpe 
 80a84e4:	464f 2046 203a 2000 4157 5353 5245 5453     OFF : . WASSERST
 80a84f4:	4e41 2044 4154 4b4e 4620 4555 4c4c 4e45     AND TANK FUELLEN
 80a8504:	4520 4652 4c4f 5247 4945 4843 4220 4545      ERFOLGREICH BEE
 80a8514:	444e 5445 2000 4157 5353 5245 5453 4e41     NDET. WASSERSTAN
 80a8524:	2044 5245 4f52 3a52 5420 4e41 204b 5546     D ERROR: TANK FU
 80a8534:	4c45 454c 204e 6566 6c68 6567 6373 6c68     ELLEN fehlgeschl
 80a8544:	6761 6e65 2000 6f44 7550 706d 5265 7365     agen. DoPumpeRes
 80a8554:	7265 6576 2020 2020 203a 6425 0020 4120     erve    : %d . A
 80a8564:	5069 6d75 6570 6552 6573 7672 2065 2020     iPumpeReserve   
 80a8574:	3a20 2520 2064 6d5b 5d56 4600 4e55 2d4b      : %d [mV].FUNK-
 80a8584:	5550 504d 2045 5352 334c 4120 5355 4547     PUMPE RSL3 AUSGE
 80a8594:	4353 4148 544c 5445 0020 5420 6e61 666b     SCHALTET . Tankf
 80a85a4:	6575 6c6c 6e65 2928 0020 5420 4e41 464b     uellen() . TANKF
 80a85b4:	4555 4c4c 4e45 3a20 4e20 4349 5448 4e20     UELLEN : NICHT N
 80a85c4:	544f 4557 444e 4749 0020 5245 4f52 2052     OTWENDIG .ERROR 
 80a85d4:	202d 4241 524f 3a54 5720 6569 6564 6872     - ABORT: Wiederh
 80a85e4:	6c6f 6e75 6567 206e 6564 2073 6154 6b6e     olungen des Tank
 80a85f4:	7566 6c65 656c 736e 7520 6265 7265 6373     fuellens uebersc
 80a8604:	7268 7469 6574 206e 203d 5700 5341 4553     hritten = .WASSE
 80a8614:	5352 4154 444e 5420 4e41 464b 4555 4c4c     RSTAND TANKFUELL
 80a8624:	4e45 3a20 4220 554c 454d 204e 4947 5345     EN : BLUMEN GIES
 80a8634:	4553 204e 5349 2054 4544 4b41 4954 4956     SEN IST DEAKTIVI
 80a8644:	5245 2054 5700 5341 4553 5352 4154 444e     ERT .WASSERSTAND
 80a8654:	5420 4e41 204b 5546 4c45 454c 204e 6567      TANK FUELLEN ge
 80a8664:	7473 7261 6574 2074 5000 6d75 6570 4d20     startet .Pumpe M
 80a8674:	6961 206e 6f43 6e75 4474 776f 206e 203a     ain CountDown : 
 80a8684:	5000 6d75 6570 4d20 6961 206e 6f43 6e75     .Pumpe Main Coun
 80a8694:	4474 776f 206e 7865 6970 6572 0064 4f43     tDown expired.CO
 80a86a4:	4e55 4454 574f 004e 7550 706d 2065 6552     UNTDOWN.Pumpe Re
 80a86b4:	6573 7672 2065 6f43 6e75 4474 776f 206e     serve CountDown 
 80a86c4:	203a 5000 6d75 6570 5220 7365 7265 6576     : .Pumpe Reserve
 80a86d4:	4320 756f 746e 6f44 6e77 6520 7078 7269      CountDown expir
 80a86e4:	6465 0020 7550 706d 2065 7546 6b6e 4320     ed .Pumpe Funk C
 80a86f4:	756f 746e 6f44 6e77 3a20 0020 7550 706d     ountDown : .Pump
 80a8704:	2065 7546 6b6e 4320 756f 746e 6f44 6e77     e Funk CountDown
 80a8714:	6520 7078 7269 6465 0020 0000                expired ...

080a8720 <_ZL22BlynkReadHandlerVector>:
 80a8720:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8730:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8740:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8750:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8760:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8770:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8780:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8790:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a87a0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a87b0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a87c0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a87d0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a87e0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a87f0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8800:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8810:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8820:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8830:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8840:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8850:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8860:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8870:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8880:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8890:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a88a0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a88b0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a88c0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a88d0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a88e0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a88f0:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8900:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..
 80a8910:	337d 080a 337d 080a 337d 080a 337d 080a     }3..}3..}3..}3..

080a8920 <_ZL23BlynkWriteHandlerVector>:
 80a8920:	337f 080a 20f5 080a 2125 080a 2155 080a     .3... ..%!..U!..
 80a8930:	2185 080a 21b9 080a 21e9 080a 2219 080a     .!...!...!..."..
 80a8940:	224d 080a 2289 080a 22b9 080a 22e9 080a     M"..."..."..."..
 80a8950:	2329 080a 17e5 080a 1825 080a 337f 080a     )#......%....3..
 80a8960:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8970:	337f 080a 337f 080a 207d 080a 337f 080a     .3...3..} ...3..
 80a8980:	337f 080a 1865 080a 18a1 080a 18e1 080a     .3..e...........
 80a8990:	1915 080a 1951 080a 198d 080a 19cd 080a     ....Q...........
 80a89a0:	1a0d 080a 337f 080a 337f 080a 337f 080a     .....3...3...3..
 80a89b0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a89c0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a89d0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a89e0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a89f0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a00:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a10:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a20:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a30:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a40:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a50:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a60:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a70:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a80:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8a90:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8aa0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8ab0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8ac0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8ad0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8ae0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8af0:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8b00:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8b10:	337f 080a 337f 080a 337f 080a 337f 080a     .3...3...3...3..
 80a8b20:	6977 6972 676e 5400 5043 6c43 6569 746e     wiring.TCPClient
 80a8b30:	7320 636f 656b 3d74 7825 0000                socket=%x..

080a8b3c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a8b44:	3b75 080a 3b9d 080a 3fbf 080a 3bab 080a     u;...;...?...;..
 80a8b54:	3b79 080a                                   y;..

080a8b58 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a8b60 <_ZTV9TCPClient>:
	...
 80a8b68:	3bb1 080a 3be5 080a 3b31 080a 3b4b 080a     .;...;..1;..K;..
 80a8b78:	3dc1 080a 3c47 080a 3c19 080a 3b73 080a     .=..G<...<..s;..
 80a8b88:	3ce1 080a 3fc5 080a 3c7b 080a 3e35 080a     .<...?..{<..5>..
 80a8b98:	3ee3 080a 3e9b 080a 3b5b 080a 3ea9 080a     .>...>..[;...>..
 80a8ba8:	3bf9 080a 7061 0070 5925 252d 2d6d 6425     .;..app.%Y-%m-%d
 80a8bb8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a8bc8:	6d69 0065                                   ime.

080a8bcc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a8bd4:	4705 080a 470b 080a 4749 080a 4719 080a     .G...G..IG...G..
 80a8be4:	4707 080a                                   .G..

080a8be8 <_ZTV9IPAddress>:
	...
 80a8bf0:	4c3f 080a 4c3d 080a 4c71 080a               ?L..=L..qL..

080a8bfc <_ZTV9USBSerial>:
	...
 80a8c04:	4d09 080a 4d6f 080a 4d47 080a 41ed 080a     .M..oM..GM...A..
 80a8c14:	4d39 080a 4d0b 080a 4d1b 080a 4d69 080a     9M...M...M..iM..
 80a8c24:	4d2b 080a 4d05 080a                         +M...M..

080a8c2c <_ZTV11USARTSerial>:
	...
 80a8c34:	4e75 080a 4edd 080a 4eb9 080a 41ed 080a     uN...N...N...A..
 80a8c44:	4e89 080a 4ea5 080a 4e97 080a 4eb3 080a     .N...N...N...N..
 80a8c54:	4e77 080a 4e7b 080a                         wN..{N..

080a8c5c <_ZTV7TwoWire>:
	...
 80a8c64:	4fc5 080a 500f 080a 4fe7 080a 4fc7 080a     .O...P...O...O..
 80a8c74:	4fef 080a 4ff7 080a 4fff 080a 5007 080a     .O...O...O...P..

080a8c84 <_ZTVN5spark9WiFiClassE>:
	...
 80a8c8c:	50d7 080a 50cd 080a 50c3 080a 5041 080a     .P...P...P..AP..
 80a8c9c:	435b 080a 50b7 080a 5135 080a 513d 080a     [C...P..5Q..=Q..
 80a8cac:	50ab 080a 50a3 080a 5099 080a 508f 080a     .P...P...P...P..
 80a8cbc:	504b 080a                                   KP..

080a8cc0 <_ZTVN5spark12NetworkClassE>:
	...
 80a8cc8:	50f5 080a 50ff 080a 5109 080a 5113 080a     .P...P...Q...Q..
 80a8cd8:	511d 080a 5129 080a 5135 080a 513d 080a     .Q..)Q..5Q..=Q..
 80a8ce8:	5145 080a 5151 080a 5159 080a 5163 080a     EQ..QQ..YQ..cQ..
 80a8cf8:	516d 080a                                   mQ..

080a8cfc <_ZSt7nothrow>:
	...

080a8cfd <_ZTSSt19_Sp_make_shared_tag>:
 80a8cfd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a8d0d:	6572 5f64 6174 0067 0000                     red_tag....

080a8d18 <_ZTISt19_Sp_make_shared_tag>:
 80a8d18:	8d58 080a 8cfd 080a                         X.......

080a8d20 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a8d20:	8db8 080a 8d2c 080a 8ddc 080a               ....,.......

080a8d2c <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a8d2c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a8d3c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a8d4c:	0045 0000                                   E...

080a8d50 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a8d50:	0000 0000 8d20 080a 54bd 080a 54d1 080a     .... ....T...T..
 80a8d60:	5669 080a 5669 080a 553b 080a 547d 080a     iV..iV..;U..}T..
 80a8d70:	5523 080a 54e5 080a 54b1 080a               #U...T...T..

080a8d7c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a8d7c:	8db8 080a 8d88 080a 8d20 080a               ........ ...

080a8d88 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a8d88:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a8d98:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a8da8:	666e 456f 0000 0000                         nfoE....

080a8db0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a8db0:	0000 0000 8d7c 080a 5565 080a 5579 080a     ....|...eU..yU..
 80a8dc0:	5669 080a 5669 080a 553b 080a 547d 080a     iV..iV..;U..}T..
 80a8dd0:	563d 080a 55c9 080a 558d 080a               =V...U...U..

080a8ddc <_ZTISt9type_info>:
 80a8ddc:	8d58 080a 8de4 080a                         X.......

080a8de4 <_ZTSSt9type_info>:
 80a8de4:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

080a8df4 <__month_lengths>:
 80a8df4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a8e04:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8e14:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8e24:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a8e34:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8e44:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8e54:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a8e64:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a8e74:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a8e84:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a8e90 <_ctype_>:
 80a8e90:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a8ea0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a8eb0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a8ec0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a8ed0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a8ee0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a8ef0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a8f00:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a8f10:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a8f91 <link_const_variable_data_end>:
 80a8f91:	00          	.byte	0x00
	...

080a8f94 <link_constructors_location>:
 80a8f94:	080a022d 	.word	0x080a022d
 80a8f98:	080a0401 	.word	0x080a0401
 80a8f9c:	080a0825 	.word	0x080a0825
 80a8fa0:	080a2645 	.word	0x080a2645
 80a8fa4:	080a3af5 	.word	0x080a3af5
 80a8fa8:	080a4375 	.word	0x080a4375
 80a8fac:	080a4541 	.word	0x080a4541
 80a8fb0:	080a459d 	.word	0x080a459d
 80a8fb4:	080a50e1 	.word	0x080a50e1
 80a8fb8:	080a51d5 	.word	0x080a51d5
 80a8fbc:	080a53a9 	.word	0x080a53a9
