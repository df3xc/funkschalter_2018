
d:/funkschalter_2018/target/3.1.0/photon/funkschalter_2018.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009414  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a9430  080a9430  00019430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a9438  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000014c  20000000  080a943c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000080c  20000150  20000150  00040150  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a9588  080a9588  00039588  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a95b0  080a95b0  000395b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014aac3  00000000  00000000  000395b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001bce1  00000000  00000000  00184077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00026598  00000000  00000000  0019fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a38  00000000  00000000  001c62f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00006800  00000000  00000000  001c8d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036814  00000000  00000000  001cf528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004c4f4  00000000  00000000  00205d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000be8ca  00000000  00000000  00252230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007824  00000000  00000000  00310afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f006 febf 	bl	80a6db0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f006 fec7 	bl	80a6dcc <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a943c 	.word	0x080a943c
 80a004c:	2000014c 	.word	0x2000014c
 80a0050:	20000150 	.word	0x20000150
 80a0054:	2000095c 	.word	0x2000095c
 80a0058:	2000095c 	.word	0x2000095c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f004 fccb 	bl	80a49f8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a9400 	.word	0x080a9400
 80a0080:	080a942c 	.word	0x080a942c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f002 b8b6 	b.w	80a21f4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f002 f9bb 	bl	80a2404 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f004 bc69 	b.w	80a4968 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f003 bdc9 	b.w	80a3c2c <malloc>

080a009a <_Znaj>:
 80a009a:	f003 bdc7 	b.w	80a3c2c <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f003 bdcd 	b.w	80a3c3c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a00b2:	b40e      	push	{r1, r2, r3}
 80a00b4:	b503      	push	{r0, r1, lr}
 80a00b6:	ab03      	add	r3, sp, #12
 80a00b8:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80a00bc:	2101      	movs	r1, #1
        va_start(args, format);
 80a00be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80a00c0:	f004 fa8c 	bl	80a45dc <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a00c4:	b002      	add	sp, #8
 80a00c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80a00ca:	b003      	add	sp, #12
 80a00cc:	4770      	bx	lr

080a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00ce:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00d0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a00d2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a00d4:	b17c      	cbz	r4, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a00d6:	6863      	ldr	r3, [r4, #4]
 80a00d8:	3b01      	subs	r3, #1
 80a00da:	6063      	str	r3, [r4, #4]
 80a00dc:	b95b      	cbnz	r3, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a00de:	6823      	ldr	r3, [r4, #0]
 80a00e0:	4620      	mov	r0, r4
 80a00e2:	689b      	ldr	r3, [r3, #8]
 80a00e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00e6:	68a3      	ldr	r3, [r4, #8]
 80a00e8:	3b01      	subs	r3, #1
 80a00ea:	60a3      	str	r3, [r4, #8]
 80a00ec:	b91b      	cbnz	r3, 80a00f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00ee:	6823      	ldr	r3, [r4, #0]
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	68db      	ldr	r3, [r3, #12]
 80a00f4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a00f6:	4628      	mov	r0, r5
 80a00f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a00fc <_Z15WriteToDatabasePcS_>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option)
{
 80a00fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0100:	b088      	sub	sp, #32
 80a0102:	4605      	mov	r5, r0
 80a0104:	460c      	mov	r4, r1
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0106:	f003 fd61 	bl	80a3bcc <spark_cloud_flag_connected>
    if (Particle.connected() == false)
 80a010a:	b938      	cbnz	r0, 80a011c <_Z15WriteToDatabasePcS_+0x20>
    {
        Serial.printlnf("### WARNING : not connected to cloud. cannot write to database");
 80a010c:	f005 f810 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0110:	491f      	ldr	r1, [pc, #124]	; (80a0190 <_Z15WriteToDatabasePcS_+0x94>)
 80a0112:	f7ff ffce 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>

    Serial.printlnf(buffer);
    Particle.publish("wasserstand", buffer, PRIVATE);
    println(option);
    delay(2000);
}
 80a0116:	b008      	add	sp, #32
 80a0118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s\"}", \
 80a011c:	f004 fb66 	bl	80a47ec <_ZN9TimeClass4hourEv>
 80a0120:	4606      	mov	r6, r0
 80a0122:	f004 fb6f 	bl	80a4804 <_ZN9TimeClass6minuteEv>
 80a0126:	4607      	mov	r7, r0
 80a0128:	f004 fb78 	bl	80a481c <_ZN9TimeClass6secondEv>
 80a012c:	4680      	mov	r8, r0
 80a012e:	f004 fb81 	bl	80a4834 <_ZN9TimeClass3dayEv>
 80a0132:	4681      	mov	r9, r0
 80a0134:	f004 fb92 	bl	80a485c <_ZN9TimeClass5monthEv>
 80a0138:	4682      	mov	sl, r0
 80a013a:	f004 fb97 	bl	80a486c <_ZN9TimeClass4yearEv>
 80a013e:	4633      	mov	r3, r6
 80a0140:	462a      	mov	r2, r5
 80a0142:	e9cd 0404 	strd	r0, r4, [sp, #16]
 80a0146:	4913      	ldr	r1, [pc, #76]	; (80a0194 <_Z15WriteToDatabasePcS_+0x98>)
 80a0148:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80a014c:	e9cd 7800 	strd	r7, r8, [sp]
 80a0150:	4811      	ldr	r0, [pc, #68]	; (80a0198 <_Z15WriteToDatabasePcS_+0x9c>)
 80a0152:	f003 fd83 	bl	80a3c5c <sprintf>
    Serial.printlnf(buffer);
 80a0156:	f004 ffeb 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a015a:	490f      	ldr	r1, [pc, #60]	; (80a0198 <_Z15WriteToDatabasePcS_+0x9c>)
 80a015c:	f7ff ffa9 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0160:	4b0e      	ldr	r3, [pc, #56]	; (80a019c <_Z15WriteToDatabasePcS_+0xa0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0162:	4a0d      	ldr	r2, [pc, #52]	; (80a0198 <_Z15WriteToDatabasePcS_+0x9c>)
 80a0164:	781b      	ldrb	r3, [r3, #0]
 80a0166:	490e      	ldr	r1, [pc, #56]	; (80a01a0 <_Z15WriteToDatabasePcS_+0xa4>)
 80a0168:	f88d 3000 	strb.w	r3, [sp]
 80a016c:	a806      	add	r0, sp, #24
 80a016e:	233c      	movs	r3, #60	; 0x3c
 80a0170:	f004 fda0 	bl	80a4cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0174:	a807      	add	r0, sp, #28
 80a0176:	f7ff ffaa 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    println(option);
 80a017a:	4620      	mov	r0, r4
 80a017c:	f001 fa74 	bl	80a1668 <_Z7printlnPc>
    delay(2000);
 80a0180:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 80a0184:	b008      	add	sp, #32
 80a0186:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    delay(2000);
 80a018a:	f004 bb85 	b.w	80a4898 <delay>
 80a018e:	bf00      	nop
 80a0190:	080a7824 	.word	0x080a7824
 80a0194:	080a7863 	.word	0x080a7863
 80a0198:	2000021a 	.word	0x2000021a
 80a019c:	20000154 	.word	0x20000154
 80a01a0:	080a78c4 	.word	0x080a78c4

080a01a4 <_Z15WriteToDatabasePcS_i>:

/*---------------------------------------------------------------------
Write to my database at www.carstenlueck.de
---------------------------------------------------------------------*/
void WriteToDatabase ( char* status,  char* option, int data)
{
 80a01a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a01a8:	b08b      	sub	sp, #44	; 0x2c
 80a01aa:	4606      	mov	r6, r0
 80a01ac:	460c      	mov	r4, r1
 80a01ae:	4615      	mov	r5, r2
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a01b0:	f003 fd0c 	bl	80a3bcc <spark_cloud_flag_connected>
    if (Particle.connected() == false)
 80a01b4:	b938      	cbnz	r0, 80a01c6 <_Z15WriteToDatabasePcS_i+0x22>
    {
        Serial.printlnf("### WARNING : not connected to cloud. cannot write to database");
 80a01b6:	f004 ffbb 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a01ba:	4924      	ldr	r1, [pc, #144]	; (80a024c <_Z15WriteToDatabasePcS_i+0xa8>)
 80a01bc:	f7ff ff79 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(buffer);
    Particle.publish("wasserstand", buffer, PRIVATE);
    sprintf(buffer," %s %d ", option, data);
    println(option,data);
    delay(2000);
}
 80a01c0:	b00b      	add	sp, #44	; 0x2c
 80a01c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sprintf(buffer,"{\"status\":\"%s\",\"time\":\"%.2d:%.2d:%.2d\",\"date\":\"%.2d.%.2d.%.2d\",\"luefter\":\"PHOTON\",\"option\":\"%s %2d\"}", \
 80a01c6:	f004 fb11 	bl	80a47ec <_ZN9TimeClass4hourEv>
 80a01ca:	4607      	mov	r7, r0
 80a01cc:	f004 fb1a 	bl	80a4804 <_ZN9TimeClass6minuteEv>
 80a01d0:	4680      	mov	r8, r0
 80a01d2:	f004 fb23 	bl	80a481c <_ZN9TimeClass6secondEv>
 80a01d6:	4681      	mov	r9, r0
 80a01d8:	f004 fb2c 	bl	80a4834 <_ZN9TimeClass3dayEv>
 80a01dc:	4682      	mov	sl, r0
 80a01de:	f004 fb3d 	bl	80a485c <_ZN9TimeClass5monthEv>
 80a01e2:	4683      	mov	fp, r0
 80a01e4:	f004 fb42 	bl	80a486c <_ZN9TimeClass4yearEv>
 80a01e8:	463b      	mov	r3, r7
 80a01ea:	4632      	mov	r2, r6
 80a01ec:	e9cd b003 	strd	fp, r0, [sp, #12]
 80a01f0:	4917      	ldr	r1, [pc, #92]	; (80a0250 <_Z15WriteToDatabasePcS_i+0xac>)
 80a01f2:	e9cd 4505 	strd	r4, r5, [sp, #20]
 80a01f6:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80a01fa:	f8cd 8000 	str.w	r8, [sp]
 80a01fe:	4815      	ldr	r0, [pc, #84]	; (80a0254 <_Z15WriteToDatabasePcS_i+0xb0>)
 80a0200:	f003 fd2c 	bl	80a3c5c <sprintf>
    Serial.printlnf(buffer);
 80a0204:	f004 ff94 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0208:	4912      	ldr	r1, [pc, #72]	; (80a0254 <_Z15WriteToDatabasePcS_i+0xb0>)
 80a020a:	f7ff ff52 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a020e:	4b12      	ldr	r3, [pc, #72]	; (80a0258 <_Z15WriteToDatabasePcS_i+0xb4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0210:	4a10      	ldr	r2, [pc, #64]	; (80a0254 <_Z15WriteToDatabasePcS_i+0xb0>)
 80a0212:	781b      	ldrb	r3, [r3, #0]
 80a0214:	4911      	ldr	r1, [pc, #68]	; (80a025c <_Z15WriteToDatabasePcS_i+0xb8>)
 80a0216:	f88d 3000 	strb.w	r3, [sp]
 80a021a:	a808      	add	r0, sp, #32
 80a021c:	233c      	movs	r3, #60	; 0x3c
 80a021e:	f004 fd49 	bl	80a4cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0222:	a809      	add	r0, sp, #36	; 0x24
 80a0224:	f7ff ff53 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sprintf(buffer," %s %d ", option, data);
 80a0228:	462b      	mov	r3, r5
 80a022a:	4622      	mov	r2, r4
 80a022c:	490c      	ldr	r1, [pc, #48]	; (80a0260 <_Z15WriteToDatabasePcS_i+0xbc>)
 80a022e:	4809      	ldr	r0, [pc, #36]	; (80a0254 <_Z15WriteToDatabasePcS_i+0xb0>)
 80a0230:	f003 fd14 	bl	80a3c5c <sprintf>
    println(option,data);
 80a0234:	4620      	mov	r0, r4
 80a0236:	4629      	mov	r1, r5
 80a0238:	f001 fc88 	bl	80a1b4c <_Z7printlnPci>
    delay(2000);
 80a023c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 80a0240:	b00b      	add	sp, #44	; 0x2c
 80a0242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    delay(2000);
 80a0246:	f004 bb27 	b.w	80a4898 <delay>
 80a024a:	bf00      	nop
 80a024c:	080a7824 	.word	0x080a7824
 80a0250:	080a78d0 	.word	0x080a78d0
 80a0254:	2000021a 	.word	0x2000021a
 80a0258:	20000154 	.word	0x20000154
 80a025c:	080a78c4 	.word	0x080a78c4
 80a0260:	080a7935 	.word	0x080a7935

080a0264 <_GLOBAL__sub_I__Z15WriteToDatabasePcS_>:
        val_(val) {
 80a0264:	2201      	movs	r2, #1
 80a0266:	4b01      	ldr	r3, [pc, #4]	; (80a026c <_GLOBAL__sub_I__Z15WriteToDatabasePcS_+0x8>)
 80a0268:	701a      	strb	r2, [r3, #0]
//       {
//         println(" ERR: no Luefter ");
//         done = 1;
//       }
//     }
}
 80a026a:	4770      	bx	lr
 80a026c:	20000154 	.word	0x20000154

080a0270 <_Z15dispatchCommandc>:
/*---------------------------------------------------------------------
Dispatch command
---------------------------------------------------------------------*/

void dispatchCommand(char c)
{
 80a0270:	b530      	push	{r4, r5, lr}
 80a0272:	3861      	subs	r0, #97	; 0x61
 80a0274:	b087      	sub	sp, #28
 80a0276:	2819      	cmp	r0, #25
 80a0278:	f200 80bc 	bhi.w	80a03f4 <_Z15dispatchCommandc+0x184>
 80a027c:	e8df f000 	tbb	[pc, r0]
 80a0280:	2dba3833 	.word	0x2dba3833
 80a0284:	0dbababa 	.word	0x0dbababa
 80a0288:	bababa18 	.word	0xbababa18
 80a028c:	57bababa 	.word	0x57bababa
 80a0290:	6240baba 	.word	0x6240baba
 80a0294:	7a72ba50 	.word	0x7a72ba50
 80a0298:	8d82      	.short	0x8d82

  switch (c)
  {
  case 'h':
    termEnabled = 1;
 80a029a:	2201      	movs	r2, #1
 80a029c:	4b56      	ldr	r3, [pc, #344]	; (80a03f8 <_Z15dispatchCommandc+0x188>)
 80a029e:	601a      	str	r2, [r3, #0]
    termCounter = 10;
 80a02a0:	220a      	movs	r2, #10
 80a02a2:	4b56      	ldr	r3, [pc, #344]	; (80a03fc <_Z15dispatchCommandc+0x18c>)
 80a02a4:	601a      	str	r2, [r3, #0]
    println(" Photon HW ID ", System.deviceID() );
    Particle.publish("particle/device/name");
    delay(500); 
  break;  
  }
}
 80a02a6:	b007      	add	sp, #28
 80a02a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    help();
 80a02ac:	f001 b9f6 	b.w	80a169c <_Z4helpv>
    if (control.pumpe_count_down < 240)
 80a02b0:	4c53      	ldr	r4, [pc, #332]	; (80a0400 <_Z15dispatchCommandc+0x190>)
 80a02b2:	68e3      	ldr	r3, [r4, #12]
 80a02b4:	2bef      	cmp	r3, #239	; 0xef
 80a02b6:	d801      	bhi.n	80a02bc <_Z15dispatchCommandc+0x4c>
      control.pumpe_count_down = control.pumpe_count_down + 10;
 80a02b8:	330a      	adds	r3, #10
      control.pumpe_count_down = control.pumpe_count_down - 10;
 80a02ba:	60e3      	str	r3, [r4, #12]
    EEPROM.put(0, control);
 80a02bc:	f005 fa0c 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a02c0:	2214      	movs	r2, #20
 80a02c2:	2000      	movs	r0, #0
 80a02c4:	494e      	ldr	r1, [pc, #312]	; (80a0400 <_Z15dispatchCommandc+0x190>)
 80a02c6:	f003 fa61 	bl	80a378c <HAL_EEPROM_Put>
    WriteToDatabase("control", "PUMPE MAIN COUNTDOWN NOW ", control.pumpe_count_down);
 80a02ca:	68e2      	ldr	r2, [r4, #12]
 80a02cc:	494d      	ldr	r1, [pc, #308]	; (80a0404 <_Z15dispatchCommandc+0x194>)
 80a02ce:	484e      	ldr	r0, [pc, #312]	; (80a0408 <_Z15dispatchCommandc+0x198>)
}
 80a02d0:	b007      	add	sp, #28
 80a02d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    WriteToDatabase("control", "PUMPE MAIN COUNTDOWN NOW ", control.pumpe_count_down);
 80a02d6:	f7ff bf65 	b.w	80a01a4 <_Z15WriteToDatabasePcS_i>
    if (control.pumpe_count_down > 10)
 80a02da:	4c49      	ldr	r4, [pc, #292]	; (80a0400 <_Z15dispatchCommandc+0x190>)
 80a02dc:	68e3      	ldr	r3, [r4, #12]
 80a02de:	2b0a      	cmp	r3, #10
 80a02e0:	d9ec      	bls.n	80a02bc <_Z15dispatchCommandc+0x4c>
      control.pumpe_count_down = control.pumpe_count_down - 10;
 80a02e2:	3b0a      	subs	r3, #10
 80a02e4:	e7e9      	b.n	80a02ba <_Z15dispatchCommandc+0x4a>
}
 80a02e6:	b007      	add	sp, #28
 80a02e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    printSlowStatus();
 80a02ec:	f001 bd5a 	b.w	80a1da4 <_Z15printSlowStatusv>
    BlumenGiessen(1, ts_giessen);
 80a02f0:	2001      	movs	r0, #1
 80a02f2:	4b46      	ldr	r3, [pc, #280]	; (80a040c <_Z15dispatchCommandc+0x19c>)
 80a02f4:	6819      	ldr	r1, [r3, #0]
}
 80a02f6:	b007      	add	sp, #28
 80a02f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    BlumenGiessen(1, ts_giessen);
 80a02fc:	f003 b8ac 	b.w	80a3458 <_Z13BlumenGiessenii>
    control.dontSleepSW = 0;
 80a0300:	2400      	movs	r4, #0
 80a0302:	4d3f      	ldr	r5, [pc, #252]	; (80a0400 <_Z15dispatchCommandc+0x190>)
    println(" Sleep Mode enabled ");
 80a0304:	4842      	ldr	r0, [pc, #264]	; (80a0410 <_Z15dispatchCommandc+0x1a0>)
    control.dontSleepSW = 0;
 80a0306:	606c      	str	r4, [r5, #4]
    println(" Sleep Mode enabled ");
 80a0308:	f001 f9ae 	bl	80a1668 <_Z7printlnPc>
    EEPROM.put(0, control);  
 80a030c:	f005 f9e4 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a0310:	2214      	movs	r2, #20
 80a0312:	4629      	mov	r1, r5
 80a0314:	2000      	movs	r0, #0
}
 80a0316:	b007      	add	sp, #28
 80a0318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80a031c:	f003 ba36 	b.w	80a378c <HAL_EEPROM_Put>
    control.reserve_repetitions=0;
 80a0320:	2400      	movs	r4, #0
 80a0322:	4d37      	ldr	r5, [pc, #220]	; (80a0400 <_Z15dispatchCommandc+0x190>)
    println(" Clear reserve repetition counter "); 
 80a0324:	483b      	ldr	r0, [pc, #236]	; (80a0414 <_Z15dispatchCommandc+0x1a4>)
 80a0326:	f001 f99f 	bl	80a1668 <_Z7printlnPc>
    control.reserve_repetitions=0;
 80a032a:	612c      	str	r4, [r5, #16]
 80a032c:	e7ee      	b.n	80a030c <_Z15dispatchCommandc+0x9c>
    control.dontSleepSW = 1;
 80a032e:	2301      	movs	r3, #1
 80a0330:	4c33      	ldr	r4, [pc, #204]	; (80a0400 <_Z15dispatchCommandc+0x190>)
    println(" Sleep Mode disabled ");
 80a0332:	4839      	ldr	r0, [pc, #228]	; (80a0418 <_Z15dispatchCommandc+0x1a8>)
    control.dontSleepSW = 1;
 80a0334:	6063      	str	r3, [r4, #4]
    println(" Sleep Mode disabled ");
 80a0336:	f001 f997 	bl	80a1668 <_Z7printlnPc>
    EEPROM.put(0, control);
 80a033a:	f005 f9cd 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a033e:	2214      	movs	r2, #20
 80a0340:	4621      	mov	r1, r4
 80a0342:	e7e7      	b.n	80a0314 <_Z15dispatchCommandc+0xa4>
    get_Temperature();
 80a0344:	f000 fa4e 	bl	80a07e4 <_Z15get_Temperaturev>
    sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a0348:	4b34      	ldr	r3, [pc, #208]	; (80a041c <_Z15dispatchCommandc+0x1ac>)
 80a034a:	4a35      	ldr	r2, [pc, #212]	; (80a0420 <_Z15dispatchCommandc+0x1b0>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	6812      	ldr	r2, [r2, #0]
 80a0350:	4934      	ldr	r1, [pc, #208]	; (80a0424 <_Z15dispatchCommandc+0x1b4>)
 80a0352:	4835      	ldr	r0, [pc, #212]	; (80a0428 <_Z15dispatchCommandc+0x1b8>)
 80a0354:	f003 fc82 	bl	80a3c5c <sprintf>
    println(timebuffer);
 80a0358:	4833      	ldr	r0, [pc, #204]	; (80a0428 <_Z15dispatchCommandc+0x1b8>)
}
 80a035a:	b007      	add	sp, #28
 80a035c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    println(timebuffer);
 80a0360:	f001 b982 	b.w	80a1668 <_Z7printlnPc>
    println(" Store CONTROL in EEPROM ");
 80a0364:	4831      	ldr	r0, [pc, #196]	; (80a042c <_Z15dispatchCommandc+0x1bc>)
 80a0366:	f001 f97f 	bl	80a1668 <_Z7printlnPc>
    EEPROM.put(0, control);
 80a036a:	f005 f9b5 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a036e:	2214      	movs	r2, #20
 80a0370:	4923      	ldr	r1, [pc, #140]	; (80a0400 <_Z15dispatchCommandc+0x190>)
 80a0372:	e7cf      	b.n	80a0314 <_Z15dispatchCommandc+0xa4>
    println(" Ultrasonic ");
 80a0374:	482e      	ldr	r0, [pc, #184]	; (80a0430 <_Z15dispatchCommandc+0x1c0>)
 80a0376:	f001 f977 	bl	80a1668 <_Z7printlnPc>
}
 80a037a:	b007      	add	sp, #28
 80a037c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ultra_sonic_measure();
 80a0380:	f000 b998 	b.w	80a06b4 <_Z19ultra_sonic_measurev>
    println(" Prepare Sleep ");
 80a0384:	482b      	ldr	r0, [pc, #172]	; (80a0434 <_Z15dispatchCommandc+0x1c4>)
 80a0386:	f001 f96f 	bl	80a1668 <_Z7printlnPc>
    sleep(getSleepTime(55));
 80a038a:	2037      	movs	r0, #55	; 0x37
 80a038c:	f000 fc06 	bl	80a0b9c <_Z12getSleepTimei>
}
 80a0390:	b007      	add	sp, #28
 80a0392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sleep(getSleepTime(55));
 80a0396:	f001 bde3 	b.w	80a1f60 <_Z5sleepi>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
 80a039a:	a802      	add	r0, sp, #8
 80a039c:	f003 fc1e 	bl	80a3bdc <spark_deviceID>
    println(" Photon HW ID ", System.deviceID() );
 80a03a0:	a902      	add	r1, sp, #8
 80a03a2:	4825      	ldr	r0, [pc, #148]	; (80a0438 <_Z15dispatchCommandc+0x1c8>)
 80a03a4:	f001 fad2 	bl	80a194c <_Z7printlnPc6String>
 80a03a8:	a802      	add	r0, sp, #8
 80a03aa:	f003 ffd9 	bl	80a4360 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a03ae:	4b23      	ldr	r3, [pc, #140]	; (80a043c <_Z15dispatchCommandc+0x1cc>)
 80a03b0:	2200      	movs	r2, #0
 80a03b2:	781b      	ldrb	r3, [r3, #0]
 80a03b4:	4922      	ldr	r1, [pc, #136]	; (80a0440 <_Z15dispatchCommandc+0x1d0>)
 80a03b6:	f88d 3000 	strb.w	r3, [sp]
 80a03ba:	a802      	add	r0, sp, #8
 80a03bc:	233c      	movs	r3, #60	; 0x3c
 80a03be:	f004 fc79 	bl	80a4cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 80a03c2:	9c03      	ldr	r4, [sp, #12]
 80a03c4:	b17c      	cbz	r4, 80a03e6 <_Z15dispatchCommandc+0x176>
      if (--_M_use_count == 0)
 80a03c6:	6863      	ldr	r3, [r4, #4]
 80a03c8:	3b01      	subs	r3, #1
 80a03ca:	6063      	str	r3, [r4, #4]
 80a03cc:	b95b      	cbnz	r3, 80a03e6 <_Z15dispatchCommandc+0x176>
          _M_dispose();
 80a03ce:	6823      	ldr	r3, [r4, #0]
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	689b      	ldr	r3, [r3, #8]
 80a03d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a03d6:	68a3      	ldr	r3, [r4, #8]
 80a03d8:	3b01      	subs	r3, #1
 80a03da:	60a3      	str	r3, [r4, #8]
 80a03dc:	b91b      	cbnz	r3, 80a03e6 <_Z15dispatchCommandc+0x176>
            _M_destroy();
 80a03de:	6823      	ldr	r3, [r4, #0]
 80a03e0:	4620      	mov	r0, r4
 80a03e2:	68db      	ldr	r3, [r3, #12]
 80a03e4:	4798      	blx	r3
    delay(500); 
 80a03e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80a03ea:	b007      	add	sp, #28
 80a03ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    delay(500); 
 80a03f0:	f004 ba52 	b.w	80a4898 <delay>
}
 80a03f4:	b007      	add	sp, #28
 80a03f6:	bd30      	pop	{r4, r5, pc}
 80a03f8:	2000036c 	.word	0x2000036c
 80a03fc:	20000368 	.word	0x20000368
 80a0400:	20000314 	.word	0x20000314
 80a0404:	080a793d 	.word	0x080a793d
 80a0408:	080a7957 	.word	0x080a7957
 80a040c:	20000024 	.word	0x20000024
 80a0410:	080a795f 	.word	0x080a795f
 80a0414:	080a7974 	.word	0x080a7974
 80a0418:	080a7997 	.word	0x080a7997
 80a041c:	20000364 	.word	0x20000364
 80a0420:	20000360 	.word	0x20000360
 80a0424:	080a79ad 	.word	0x080a79ad
 80a0428:	200003c0 	.word	0x200003c0
 80a042c:	080a79bf 	.word	0x080a79bf
 80a0430:	080a79d9 	.word	0x080a79d9
 80a0434:	080a79e6 	.word	0x080a79e6
 80a0438:	080a79f6 	.word	0x080a79f6
 80a043c:	20000155 	.word	0x20000155
 80a0440:	080a7a05 	.word	0x080a7a05

080a0444 <_Z11serialEventv>:

/*---------------------------------------------------------------------
Dispatch characters from serial port
---------------------------------------------------------------------*/
void serialEvent()
{
 80a0444:	b508      	push	{r3, lr}
  char c = Serial.read();
 80a0446:	f004 fe73 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a044a:	6803      	ldr	r3, [r0, #0]
 80a044c:	695b      	ldr	r3, [r3, #20]
 80a044e:	4798      	blx	r3
  dispatchCommand(c);
}
 80a0450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dispatchCommand(c);
 80a0454:	b2c0      	uxtb	r0, r0
 80a0456:	f7ff bf0b 	b.w	80a0270 <_Z15dispatchCommandc>
	...

080a045c <_GLOBAL__sub_I__Z15dispatchCommandc>:
        val_(val) {
 80a045c:	2200      	movs	r2, #0
 80a045e:	4b01      	ldr	r3, [pc, #4]	; (80a0464 <_GLOBAL__sub_I__Z15dispatchCommandc+0x8>)
 80a0460:	701a      	strb	r2, [r3, #0]
}
 80a0462:	4770      	bx	lr
 80a0464:	20000155 	.word	0x20000155

080a0468 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
 80a0468:	2300      	movs	r3, #0
  _celsius = 0;
 80a046a:	2200      	movs	r2, #0
  _raw = 0;
 80a046c:	8303      	strh	r3, [r0, #24]
  _celsius = 0;
 80a046e:	61c2      	str	r2, [r0, #28]
  memset(_addr, 0, sizeof(_addr));
 80a0470:	6203      	str	r3, [r0, #32]
 80a0472:	6243      	str	r3, [r0, #36]	; 0x24
  memset(_data, 0, sizeof(_data));
 80a0474:	6283      	str	r3, [r0, #40]	; 0x28
 80a0476:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a0478:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  _type = WIRE_UNKNOWN;
 80a047c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  _searchDone = false;
 80a0480:	8643      	strh	r3, [r0, #50]	; 0x32
  _crcError = false;
}
 80a0482:	4770      	bx	lr

080a0484 <_ZN4DS18C1Etb>:
DS18::DS18(uint16_t pin, bool parasitic)
 80a0484:	b538      	push	{r3, r4, r5, lr}
 80a0486:	4604      	mov	r4, r0
 80a0488:	4615      	mov	r5, r2
  _conversionTime{1000}
 80a048a:	f002 fb0f 	bl	80a2aac <_ZN7OneWireC1Et>
 80a048e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  init();
 80a0492:	4620      	mov	r0, r4
  _conversionTime{1000}
 80a0494:	7525      	strb	r5, [r4, #20]
 80a0496:	82e3      	strh	r3, [r4, #22]
  init();
 80a0498:	f7ff ffe6 	bl	80a0468 <_ZN4DS184initEv>
}
 80a049c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a04a0 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80a04a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80a04a4:	680b      	ldr	r3, [r1, #0]
bool DS18::read(uint8_t addr[8]) {
 80a04a6:	4604      	mov	r4, r0
  memcpy(_addr, addr, sizeof(_addr));
 80a04a8:	6203      	str	r3, [r0, #32]
 80a04aa:	684b      	ldr	r3, [r1, #4]
 80a04ac:	f100 0520 	add.w	r5, r0, #32
 80a04b0:	6243      	str	r3, [r0, #36]	; 0x24

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80a04b2:	780b      	ldrb	r3, [r1, #0]
 80a04b4:	2b26      	cmp	r3, #38	; 0x26
 80a04b6:	d060      	beq.n	80a057a <_ZN4DS184readEPh+0xda>
 80a04b8:	d808      	bhi.n	80a04cc <_ZN4DS184readEPh+0x2c>
 80a04ba:	2b10      	cmp	r3, #16
 80a04bc:	d00a      	beq.n	80a04d4 <_ZN4DS184readEPh+0x34>
 80a04be:	2b22      	cmp	r3, #34	; 0x22
 80a04c0:	d059      	beq.n	80a0576 <_ZN4DS184readEPh+0xd6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
 80a04c2:	2000      	movs	r0, #0
 80a04c4:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
      }
  }

  // Got a good reading!
  return true;
}
 80a04c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (addr[0]) {
 80a04cc:	2b28      	cmp	r3, #40	; 0x28
 80a04ce:	d1f8      	bne.n	80a04c2 <_ZN4DS184readEPh+0x22>
    case 0x28: _type = WIRE_DS18B20; break;
 80a04d0:	2302      	movs	r3, #2
 80a04d2:	e000      	b.n	80a04d6 <_ZN4DS184readEPh+0x36>
    case 0x10: _type = WIRE_DS1820; break;
 80a04d4:	2301      	movs	r3, #1
    case 0x26: _type = WIRE_DS2438; break;
 80a04d6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  _wire.reset();               // first clear the 1-wire bus
 80a04da:	4620      	mov	r0, r4
 80a04dc:	f002 faf3 	bl	80a2ac6 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
 80a04e0:	4629      	mov	r1, r5
 80a04e2:	4620      	mov	r0, r4
 80a04e4:	f002 fb9f 	bl	80a2c26 <_ZN7OneWire6selectEPKh>
  _wire.write(0x44, power);    // tell it to start a conversion
 80a04e8:	7d22      	ldrb	r2, [r4, #20]
 80a04ea:	2144      	movs	r1, #68	; 0x44
 80a04ec:	4620      	mov	r0, r4
 80a04ee:	f002 fb6f 	bl	80a2bd0 <_ZN7OneWire5writeEhh>
  delay(_conversionTime); // wait for conversion to finish
 80a04f2:	8ae0      	ldrh	r0, [r4, #22]
 80a04f4:	f004 f9d0 	bl	80a4898 <delay>
  _wire.reset();
 80a04f8:	4620      	mov	r0, r4
 80a04fa:	f002 fae4 	bl	80a2ac6 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a04fe:	4629      	mov	r1, r5
 80a0500:	4620      	mov	r0, r4
 80a0502:	f002 fb90 	bl	80a2c26 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
 80a0506:	2200      	movs	r2, #0
 80a0508:	21b8      	movs	r1, #184	; 0xb8
 80a050a:	4620      	mov	r0, r4
 80a050c:	f002 fb60 	bl	80a2bd0 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
 80a0510:	2200      	movs	r2, #0
 80a0512:	4620      	mov	r0, r4
 80a0514:	4611      	mov	r1, r2
 80a0516:	f002 fb5b 	bl	80a2bd0 <_ZN7OneWire5writeEhh>
  _wire.reset();
 80a051a:	4620      	mov	r0, r4
 80a051c:	f002 fad3 	bl	80a2ac6 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a0520:	4629      	mov	r1, r5
 80a0522:	4620      	mov	r0, r4
 80a0524:	f002 fb7f 	bl	80a2c26 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
 80a0528:	2200      	movs	r2, #0
 80a052a:	21be      	movs	r1, #190	; 0xbe
 80a052c:	4620      	mov	r0, r4
 80a052e:	f002 fb4f 	bl	80a2bd0 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
 80a0532:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a0536:	2b04      	cmp	r3, #4
 80a0538:	d104      	bne.n	80a0544 <_ZN4DS184readEPh+0xa4>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
 80a053a:	2200      	movs	r2, #0
 80a053c:	4620      	mov	r0, r4
 80a053e:	4611      	mov	r1, r2
 80a0540:	f002 fb46 	bl	80a2bd0 <_ZN7OneWire5writeEhh>
 80a0544:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80a0548:	462e      	mov	r6, r5
 80a054a:	f104 0731 	add.w	r7, r4, #49	; 0x31
    _data[i] = _wire.read();
 80a054e:	4620      	mov	r0, r4
 80a0550:	f002 fb59 	bl	80a2c06 <_ZN7OneWire4readEv>
 80a0554:	f805 0b01 	strb.w	r0, [r5], #1
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
 80a0558:	42bd      	cmp	r5, r7
 80a055a:	d1f8      	bne.n	80a054e <_ZN4DS184readEPh+0xae>
  if (OneWire::crc8(_data, 8) != _data[8]) {
 80a055c:	2108      	movs	r1, #8
 80a055e:	4630      	mov	r0, r6
 80a0560:	f002 fbe4 	bl	80a2d2c <_ZN7OneWire4crc8EPhh>
 80a0564:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a0568:	4283      	cmp	r3, r0
 80a056a:	d008      	beq.n	80a057e <_ZN4DS184readEPh+0xde>
    _crcError = true;
 80a056c:	2301      	movs	r3, #1
    return false;
 80a056e:	2000      	movs	r0, #0
    _crcError = true;
 80a0570:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a0574:	e7a8      	b.n	80a04c8 <_ZN4DS184readEPh+0x28>
    case 0x22: _type = WIRE_DS1822; break;
 80a0576:	2303      	movs	r3, #3
 80a0578:	e7ad      	b.n	80a04d6 <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
 80a057a:	2304      	movs	r3, #4
 80a057c:	e7ab      	b.n	80a04d6 <_ZN4DS184readEPh+0x36>
  _raw = (_data[1] << 8) | _data[0];
 80a057e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80a0580:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 80a0584:	8323      	strh	r3, [r4, #24]
  if (_type == WIRE_DS2438) {
 80a0586:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a058a:	2b04      	cmp	r3, #4
 80a058c:	d147      	bne.n	80a061e <_ZN4DS184readEPh+0x17e>
    _raw = (_data[2] << 8) | _data[1];
 80a058e:	f894 802a 	ldrb.w	r8, [r4, #42]	; 0x2a
 80a0592:	ea45 2308 	orr.w	r3, r5, r8, lsl #8
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a0596:	08ed      	lsrs	r5, r5, #3
    _raw = (_data[2] << 8) | _data[1];
 80a0598:	8323      	strh	r3, [r4, #24]
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a059a:	4640      	mov	r0, r8
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a059c:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a05a0:	f005 ff1a 	bl	80a63d8 <__aeabi_ui2f>
 80a05a4:	f005 fb88 	bl	80a5cb8 <__aeabi_f2d>
 80a05a8:	4606      	mov	r6, r0
 80a05aa:	4628      	mov	r0, r5
 80a05ac:	460f      	mov	r7, r1
 80a05ae:	f005 ff13 	bl	80a63d8 <__aeabi_ui2f>
 80a05b2:	f005 fb81 	bl	80a5cb8 <__aeabi_f2d>
 80a05b6:	2200      	movs	r2, #0
 80a05b8:	4b24      	ldr	r3, [pc, #144]	; (80a064c <_ZN4DS184readEPh+0x1ac>)
 80a05ba:	f005 fbd5 	bl	80a5d68 <__aeabi_dmul>
      if (_data[2] > 127) {
 80a05be:	f018 0f80 	tst.w	r8, #128	; 0x80
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a05c2:	4602      	mov	r2, r0
 80a05c4:	460b      	mov	r3, r1
      if (_data[2] > 127) {
 80a05c6:	d025      	beq.n	80a0614 <_ZN4DS184readEPh+0x174>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a05c8:	4630      	mov	r0, r6
 80a05ca:	4639      	mov	r1, r7
 80a05cc:	f005 fa14 	bl	80a59f8 <__aeabi_dsub>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a05d0:	f005 fdfc 	bl	80a61cc <__aeabi_d2f>
 80a05d4:	e015      	b.n	80a0602 <_ZN4DS184readEPh+0x162>
  byte cfg = (_data[4] & 0x60);
 80a05d6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
      _raw = _raw << 3; // 9 bit resolution default
 80a05da:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
 80a05de:	f012 0260 	ands.w	r2, r2, #96	; 0x60
 80a05e2:	d102      	bne.n	80a05ea <_ZN4DS184readEPh+0x14a>
 80a05e4:	f023 0307 	bic.w	r3, r3, #7
 80a05e8:	e02d      	b.n	80a0646 <_ZN4DS184readEPh+0x1a6>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a05ea:	2a20      	cmp	r2, #32
 80a05ec:	d00c      	beq.n	80a0608 <_ZN4DS184readEPh+0x168>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a05ee:	2a40      	cmp	r2, #64	; 0x40
 80a05f0:	d00d      	beq.n	80a060e <_ZN4DS184readEPh+0x16e>
      _celsius = (float)_raw * 0.0625;
 80a05f2:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 80a05f6:	f005 fef3 	bl	80a63e0 <__aeabi_i2f>
 80a05fa:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a05fe:	f005 ff43 	bl	80a6488 <__aeabi_fmul>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a0602:	61e0      	str	r0, [r4, #28]
  switch (_type) {
 80a0604:	2001      	movs	r0, #1
 80a0606:	e75f      	b.n	80a04c8 <_ZN4DS184readEPh+0x28>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a0608:	f023 0303 	bic.w	r3, r3, #3
 80a060c:	e01b      	b.n	80a0646 <_ZN4DS184readEPh+0x1a6>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a060e:	f023 0301 	bic.w	r3, r3, #1
 80a0612:	e018      	b.n	80a0646 <_ZN4DS184readEPh+0x1a6>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a0614:	4630      	mov	r0, r6
 80a0616:	4639      	mov	r1, r7
 80a0618:	f005 f9f0 	bl	80a59fc <__adddf3>
 80a061c:	e7d8      	b.n	80a05d0 <_ZN4DS184readEPh+0x130>
  switch (_type) {
 80a061e:	2b03      	cmp	r3, #3
 80a0620:	d8f0      	bhi.n	80a0604 <_ZN4DS184readEPh+0x164>
 80a0622:	2b01      	cmp	r3, #1
 80a0624:	d8d7      	bhi.n	80a05d6 <_ZN4DS184readEPh+0x136>
 80a0626:	d1ed      	bne.n	80a0604 <_ZN4DS184readEPh+0x164>
      _raw = _raw << 3; // 9 bit resolution default
 80a0628:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a062c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
      _raw = _raw << 3; // 9 bit resolution default
 80a0630:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
 80a0632:	2a10      	cmp	r2, #16
      _raw = _raw << 3; // 9 bit resolution default
 80a0634:	8323      	strh	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a0636:	d1dc      	bne.n	80a05f2 <_ZN4DS184readEPh+0x152>
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
 80a0638:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80a063c:	f023 030f 	bic.w	r3, r3, #15
 80a0640:	f1c2 020c 	rsb	r2, r2, #12
 80a0644:	4413      	add	r3, r2
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a0646:	8323      	strh	r3, [r4, #24]
 80a0648:	e7d3      	b.n	80a05f2 <_ZN4DS184readEPh+0x152>
 80a064a:	bf00      	nop
 80a064c:	3fa00000 	.word	0x3fa00000

080a0650 <_ZN4DS184readEv>:
bool DS18::read() {
 80a0650:	b538      	push	{r3, r4, r5, lr}
  if (!_wire.search(_addr)) {
 80a0652:	f100 0520 	add.w	r5, r0, #32
 80a0656:	4629      	mov	r1, r5
bool DS18::read() {
 80a0658:	4604      	mov	r4, r0
  init();
 80a065a:	f7ff ff05 	bl	80a0468 <_ZN4DS184initEv>
  if (!_wire.search(_addr)) {
 80a065e:	f002 fafa 	bl	80a2c56 <_ZN7OneWire6searchEPh>
 80a0662:	b938      	cbnz	r0, 80a0674 <_ZN4DS184readEv+0x24>
    _searchDone = true;
 80a0664:	2301      	movs	r3, #1
    _wire.reset_search();
 80a0666:	4620      	mov	r0, r4
    _searchDone = true;
 80a0668:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    _wire.reset_search();
 80a066c:	f002 faed 	bl	80a2c4a <_ZN7OneWire12reset_searchEv>
}
 80a0670:	2000      	movs	r0, #0
 80a0672:	bd38      	pop	{r3, r4, r5, pc}
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
 80a0674:	2107      	movs	r1, #7
 80a0676:	4628      	mov	r0, r5
 80a0678:	f002 fb58 	bl	80a2d2c <_ZN7OneWire4crc8EPhh>
 80a067c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80a0680:	4283      	cmp	r3, r0
 80a0682:	d003      	beq.n	80a068c <_ZN4DS184readEv+0x3c>
    _crcError = true;
 80a0684:	2301      	movs	r3, #1
 80a0686:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a068a:	e7f1      	b.n	80a0670 <_ZN4DS184readEv+0x20>
  return read(_addr);
 80a068c:	4629      	mov	r1, r5
 80a068e:	4620      	mov	r0, r4
}
 80a0690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read(_addr);
 80a0694:	f7ff bf04 	b.w	80a04a0 <_ZN4DS184readEPh>

080a0698 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
 80a0698:	69c0      	ldr	r0, [r0, #28]
 80a069a:	4770      	bx	lr

080a069c <_ZN4DS184addrEPh>:
float DS18::fahrenheit() {
  return _celsius * 1.8 + 32.0;
}

void DS18::addr(uint8_t dest[8]) {
  memcpy(dest, _addr, sizeof(_addr));
 80a069c:	6a03      	ldr	r3, [r0, #32]
 80a069e:	600b      	str	r3, [r1, #0]
 80a06a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80a06a2:	604b      	str	r3, [r1, #4]
}
 80a06a4:	4770      	bx	lr

080a06a6 <_ZN4DS1810searchDoneEv>:
  return _type;
}

bool DS18::searchDone() {
  return _searchDone;
}
 80a06a6:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 80a06aa:	4770      	bx	lr

080a06ac <_ZN4DS188crcErrorEv>:

bool DS18::crcError() {
  return _crcError;
}
 80a06ac:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 80a06b0:	4770      	bx	lr
	...

080a06b4 <_Z19ultra_sonic_measurev>:
Ultrasonic distance measurement (tested29.07.2017)
Returns water level in millimeter
---------------------------------------------------------------------*/
int  ultra_sonic_measure()

{
 80a06b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a06b8:	4e2d      	ldr	r6, [pc, #180]	; (80a0770 <_Z19ultra_sonic_measurev+0xbc>)

  int level = 0;
  int error = 0;
  int k = 0;

  Serial.printlnf ( " ultra sonic distance ");
 80a06ba:	f004 fd39 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a06be:	492d      	ldr	r1, [pc, #180]	; (80a0774 <_Z19ultra_sonic_measurev+0xc0>)
 80a06c0:	f7ff fcf7 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a06c4:	4637      	mov	r7, r6
 80a06c6:	2505      	movs	r5, #5
 80a06c8:	4634      	mov	r4, r6
  for (k=0; k<ULTRA_LOOP; k++)
  {
      time = ultra_sonic_ping();
      dist = uMilli(time);
      hs[k] = dist;
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
 80a06ca:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a0778 <_Z19ultra_sonic_measurev+0xc4>
      time = ultra_sonic_ping();
 80a06ce:	f002 f9ab 	bl	80a2a28 <_Z16ultra_sonic_pingv>
      dist = uMilli(time);
 80a06d2:	f002 f9c3 	bl	80a2a5c <_Z6uMillim>
      hs[k] = dist;
 80a06d6:	6038      	str	r0, [r7, #0]
      Serial.printlnf ( " ultra distance : %d mm", hs[k]);
 80a06d8:	f004 fd2a 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a06dc:	4641      	mov	r1, r8
 80a06de:	f857 2b04 	ldr.w	r2, [r7], #4
 80a06e2:	f7ff fce6 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      run_blynk();
 80a06e6:	f000 fee1 	bl	80a14ac <_Z9run_blynkv>
      delay(150);
 80a06ea:	2096      	movs	r0, #150	; 0x96
 80a06ec:	f004 f8d4 	bl	80a4898 <delay>
  for (k=0; k<ULTRA_LOOP; k++)
 80a06f0:	3d01      	subs	r5, #1
 80a06f2:	d1ec      	bne.n	80a06ce <_Z19ultra_sonic_measurev+0x1a>
  }

  avg = 0;
  for (k=0; k<ULTRA_LOOP; k++)
  {
    avg = avg + hs[k];
 80a06f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80a06f8:	4413      	add	r3, r2
 80a06fa:	68a2      	ldr	r2, [r4, #8]
  int error = 0;
 80a06fc:	462f      	mov	r7, r5
    avg = avg + hs[k];
 80a06fe:	4413      	add	r3, r2
 80a0700:	68e2      	ldr	r2, [r4, #12]
 80a0702:	4413      	add	r3, r2
 80a0704:	6922      	ldr	r2, [r4, #16]
  }
  avg = avg / ULTRA_LOOP;
 80a0706:	2405      	movs	r4, #5
    avg = avg + hs[k];
 80a0708:	4413      	add	r3, r2
  avg = avg / ULTRA_LOOP;
 80a070a:	fbb3 f4f4 	udiv	r4, r3, r4

  for (k=0; k<ULTRA_LOOP; k++)
  {
    error = error + (avg-hs[k]);
 80a070e:	f856 2b04 	ldr.w	r2, [r6], #4
  for (k=0; k<ULTRA_LOOP; k++)
 80a0712:	3501      	adds	r5, #1
    error = error + (avg-hs[k]);
 80a0714:	4427      	add	r7, r4
  for (k=0; k<ULTRA_LOOP; k++)
 80a0716:	2d05      	cmp	r5, #5
    error = error + (avg-hs[k]);
 80a0718:	eba7 0702 	sub.w	r7, r7, r2
  for (k=0; k<ULTRA_LOOP; k++)
 80a071c:	d1f7      	bne.n	80a070e <_Z19ultra_sonic_measurev+0x5a>
  }

  if (avg==0)
 80a071e:	2b04      	cmp	r3, #4
 80a0720:	d808      	bhi.n	80a0734 <_Z19ultra_sonic_measurev+0x80>
  {
    level = 1000; // prevent that the second pump is switched on
    WriteToDatabase ( "WASSER", "WARNING: Failed to read ultrasonic sensor");  
 80a0722:	4916      	ldr	r1, [pc, #88]	; (80a077c <_Z19ultra_sonic_measurev+0xc8>)
 80a0724:	4816      	ldr	r0, [pc, #88]	; (80a0780 <_Z19ultra_sonic_measurev+0xcc>)
 80a0726:	f7ff fce9 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    return(1000);
 80a072a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8

  //WriteToDatabase("WASSER","WASSERSTAND : ",level);

  return(level);

 80a072e:	4620      	mov	r0, r4
 80a0730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Serial.printlnf ( " ultra error : %d ", error);
 80a0734:	f004 fcfc 	bl	80a5130 <_Z16_fetch_usbserialv>
  avg = avg - MessFehler;
 80a0738:	3c0f      	subs	r4, #15
  Serial.printlnf ( " ultra error : %d ", error);
 80a073a:	463a      	mov	r2, r7
 80a073c:	4911      	ldr	r1, [pc, #68]	; (80a0784 <_Z19ultra_sonic_measurev+0xd0>)
 80a073e:	f7ff fcb8 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf ( " ultra distance average : %d mm", avg);
 80a0742:	f004 fcf5 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0746:	4622      	mov	r2, r4
 80a0748:	490f      	ldr	r1, [pc, #60]	; (80a0788 <_Z19ultra_sonic_measurev+0xd4>)
 80a074a:	f7ff fcb2 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  println("distance : ",avg);
 80a074e:	4621      	mov	r1, r4
  level = TankHoehe - avg;
 80a0750:	f5c4 74b4 	rsb	r4, r4, #360	; 0x168
  println("distance : ",avg);
 80a0754:	480d      	ldr	r0, [pc, #52]	; (80a078c <_Z19ultra_sonic_measurev+0xd8>)
 80a0756:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80a075a:	f001 f9f7 	bl	80a1b4c <_Z7printlnPci>
  Serial.printlnf ( " ultra level average : %d mm", level);
 80a075e:	f004 fce7 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0762:	4622      	mov	r2, r4
 80a0764:	490a      	ldr	r1, [pc, #40]	; (80a0790 <_Z19ultra_sonic_measurev+0xdc>)
 80a0766:	f7ff fca4 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  run_blynk();
 80a076a:	f000 fe9f 	bl	80a14ac <_Z9run_blynkv>
  return(level);
 80a076e:	e7de      	b.n	80a072e <_Z19ultra_sonic_measurev+0x7a>
 80a0770:	20000158 	.word	0x20000158
 80a0774:	080a7a1a 	.word	0x080a7a1a
 80a0778:	080a7a31 	.word	0x080a7a31
 80a077c:	080a7a49 	.word	0x080a7a49
 80a0780:	080a7a73 	.word	0x080a7a73
 80a0784:	080a7a7a 	.word	0x080a7a7a
 80a0788:	080a7a8d 	.word	0x080a7a8d
 80a078c:	080a7aad 	.word	0x080a7aad
 80a0790:	080a7ab9 	.word	0x080a7ab9

080a0794 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0794:	b40e      	push	{r1, r2, r3}
 80a0796:	b503      	push	{r0, r1, lr}
 80a0798:	ab03      	add	r3, sp, #12
 80a079a:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(false, format, args);
 80a079e:	2100      	movs	r1, #0
        va_start(args, format);
 80a07a0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a07a2:	f003 ff1b 	bl	80a45dc <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 80a07a6:	b002      	add	sp, #8
 80a07a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80a07ac:	b003      	add	sp, #12
 80a07ae:	4770      	bx	lr

080a07b0 <_Z6get_IDv>:

}


uint8_t get_ID()
{
 80a07b0:	b507      	push	{r0, r1, r2, lr}
  if (sensor.crcError()) {
 80a07b2:	480a      	ldr	r0, [pc, #40]	; (80a07dc <_Z6get_IDv+0x2c>)
 80a07b4:	f7ff ff7a 	bl	80a06ac <_ZN4DS188crcErrorEv>
 80a07b8:	b140      	cbz	r0, 80a07cc <_Z6get_IDv+0x1c>
    Serial.print(" CRC Error ");
 80a07ba:	f004 fcb9 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a07be:	4908      	ldr	r1, [pc, #32]	; (80a07e0 <_Z6get_IDv+0x30>)
 80a07c0:	f003 fed2 	bl	80a4568 <_ZN5Print5printEPKc>
 80a07c4:	2000      	movs	r0, #0
  uint8_t id;
  sensor.addr(addr);
  id = addr[7];
  //Serial.printf(" ID=%02X",id);
  return(id);
}
 80a07c6:	b003      	add	sp, #12
 80a07c8:	f85d fb04 	ldr.w	pc, [sp], #4
  sensor.addr(addr);
 80a07cc:	4803      	ldr	r0, [pc, #12]	; (80a07dc <_Z6get_IDv+0x2c>)
 80a07ce:	4669      	mov	r1, sp
 80a07d0:	f7ff ff64 	bl	80a069c <_ZN4DS184addrEPh>
  id = addr[7];
 80a07d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
  return(id);
 80a07d8:	e7f5      	b.n	80a07c6 <_Z6get_IDv+0x16>
 80a07da:	bf00      	nop
 80a07dc:	2000016c 	.word	0x2000016c
 80a07e0:	080a7ad6 	.word	0x080a7ad6

080a07e4 <_Z15get_Temperaturev>:
{
 80a07e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
Serial.println(" Get Temperature ");
 80a07e8:	f004 fca2 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a07ec:	4923      	ldr	r1, [pc, #140]	; (80a087c <_Z15get_Temperaturev+0x98>)
 80a07ee:	f003 fece 	bl	80a458e <_ZN5Print7printlnEPKc>
  int k = 0;
 80a07f2:	2600      	movs	r6, #0
    if (sensor.read()) {
 80a07f4:	4d22      	ldr	r5, [pc, #136]	; (80a0880 <_Z15get_Temperaturev+0x9c>)
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
 80a07f6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80a0884 <_Z15get_Temperaturev+0xa0>
      println("sensor id",id);
 80a07fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80a0888 <_Z15get_Temperaturev+0xa4>
    if (sensor.read()) {
 80a07fe:	4628      	mov	r0, r5
 80a0800:	f7ff ff26 	bl	80a0650 <_ZN4DS184readEv>
 80a0804:	b320      	cbz	r0, 80a0850 <_Z15get_Temperaturev+0x6c>
      id = get_ID();
 80a0806:	f7ff ffd3 	bl	80a07b0 <_Z6get_IDv>
 80a080a:	4604      	mov	r4, r0
      Serial.printf("Sensor ID %d num=%d Temperature %.2f C  \n\r", id,k,sensor.celsius());
 80a080c:	f004 fc90 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0810:	4607      	mov	r7, r0
 80a0812:	4628      	mov	r0, r5
 80a0814:	f7ff ff40 	bl	80a0698 <_ZN4DS187celsiusEv>
 80a0818:	f005 fa4e 	bl	80a5cb8 <__aeabi_f2d>
 80a081c:	4633      	mov	r3, r6
 80a081e:	4622      	mov	r2, r4
 80a0820:	e9cd 0100 	strd	r0, r1, [sp]
 80a0824:	4641      	mov	r1, r8
 80a0826:	4638      	mov	r0, r7
 80a0828:	f7ff ffb4 	bl	80a0794 <_ZN5Print6printfEPKcz>
      println("sensor id",id);
 80a082c:	4621      	mov	r1, r4
 80a082e:	4648      	mov	r0, r9
 80a0830:	f001 f98c 	bl	80a1b4c <_Z7printlnPci>
      delay(250);
 80a0834:	20fa      	movs	r0, #250	; 0xfa
 80a0836:	f004 f82f 	bl	80a4898 <delay>
      if(id == 37) {
 80a083a:	2c25      	cmp	r4, #37	; 0x25
      k++;
 80a083c:	f106 0601 	add.w	r6, r6, #1
      if(id == 37) {
 80a0840:	d113      	bne.n	80a086a <_Z15get_Temperaturev+0x86>
        temp_in = sensor.celsius();
 80a0842:	4628      	mov	r0, r5
 80a0844:	f7ff ff28 	bl	80a0698 <_ZN4DS187celsiusEv>
 80a0848:	f005 ffe4 	bl	80a6814 <__aeabi_f2iz>
 80a084c:	4b0f      	ldr	r3, [pc, #60]	; (80a088c <_Z15get_Temperaturev+0xa8>)
        temp_out = sensor.celsius();
 80a084e:	6018      	str	r0, [r3, #0]
  } while(sensor.searchDone() == false);
 80a0850:	4628      	mov	r0, r5
 80a0852:	f7ff ff28 	bl	80a06a6 <_ZN4DS1810searchDoneEv>
 80a0856:	2800      	cmp	r0, #0
 80a0858:	d0d1      	beq.n	80a07fe <_Z15get_Temperaturev+0x1a>
return(sensor.celsius());
 80a085a:	4809      	ldr	r0, [pc, #36]	; (80a0880 <_Z15get_Temperaturev+0x9c>)
 80a085c:	f7ff ff1c 	bl	80a0698 <_ZN4DS187celsiusEv>
 80a0860:	f005 ffd8 	bl	80a6814 <__aeabi_f2iz>
}
 80a0864:	b003      	add	sp, #12
 80a0866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(id == 151){
 80a086a:	2c97      	cmp	r4, #151	; 0x97
 80a086c:	d1f0      	bne.n	80a0850 <_Z15get_Temperaturev+0x6c>
        temp_out = sensor.celsius();
 80a086e:	4628      	mov	r0, r5
 80a0870:	f7ff ff12 	bl	80a0698 <_ZN4DS187celsiusEv>
 80a0874:	f005 ffce 	bl	80a6814 <__aeabi_f2iz>
 80a0878:	4b05      	ldr	r3, [pc, #20]	; (80a0890 <_Z15get_Temperaturev+0xac>)
 80a087a:	e7e8      	b.n	80a084e <_Z15get_Temperaturev+0x6a>
 80a087c:	080a7ae2 	.word	0x080a7ae2
 80a0880:	2000016c 	.word	0x2000016c
 80a0884:	080a7af4 	.word	0x080a7af4
 80a0888:	080a7b1f 	.word	0x080a7b1f
 80a088c:	20000360 	.word	0x20000360
 80a0890:	20000364 	.word	0x20000364

080a0894 <_GLOBAL__sub_I_sensor>:
DS18 sensor(SENSOR_PIN);  // create sensor instance
 80a0894:	2200      	movs	r2, #0
 80a0896:	2105      	movs	r1, #5
 80a0898:	4801      	ldr	r0, [pc, #4]	; (80a08a0 <_GLOBAL__sub_I_sensor+0xc>)
 80a089a:	f7ff bdf3 	b.w	80a0484 <_ZN4DS18C1Etb>
 80a089e:	bf00      	nop
 80a08a0:	2000016c 	.word	0x2000016c

080a08a4 <_ZN14WidgetTerminal5writeEPKvj>:
#ifdef BLYNK_USE_PRINT_CLASS

    using Print::write;

    virtual size_t write(const void* buff, size_t len) {
        return write((char*)buff, len);
 80a08a4:	6803      	ldr	r3, [r0, #0]
 80a08a6:	695b      	ldr	r3, [r3, #20]
 80a08a8:	4718      	bx	r3

080a08aa <_ZN14WidgetTerminalD1Ev>:
class WidgetTerminal
 80a08aa:	4770      	bx	lr

080a08ac <_ZN14WidgetTerminalD0Ev>:
 80a08ac:	b510      	push	{r4, lr}
 80a08ae:	4604      	mov	r4, r0
 80a08b0:	214c      	movs	r1, #76	; 0x4c
 80a08b2:	f004 ff82 	bl	80a57ba <_ZdlPvj>
 80a08b6:	4620      	mov	r0, r4
 80a08b8:	bd10      	pop	{r4, pc}

080a08ba <_ZN11SystemClassD1Ev>:
class SystemClass {
 80a08ba:	b510      	push	{r4, lr}
 80a08bc:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a08be:	6800      	ldr	r0, [r0, #0]
 80a08c0:	b108      	cbz	r0, 80a08c6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a08c2:	f003 f9bb 	bl	80a3c3c <free>
class SystemClass {
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	bd10      	pop	{r4, pc}

080a08ca <_ZN14WidgetTerminal5writeEh>:
    virtual size_t write(uint8_t byte) {
 80a08ca:	b510      	push	{r4, lr}
        mOutBuf[mOutQty++] = byte;
 80a08cc:	f890 4049 	ldrb.w	r4, [r0, #73]	; 0x49
 80a08d0:	1c62      	adds	r2, r4, #1
 80a08d2:	b2d2      	uxtb	r2, r2
 80a08d4:	4404      	add	r4, r0
        if (mOutQty >= sizeof(mOutBuf)) {
 80a08d6:	2a3f      	cmp	r2, #63	; 0x3f
        mOutBuf[mOutQty++] = byte;
 80a08d8:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 80a08dc:	7261      	strb	r1, [r4, #9]
        if (mOutQty >= sizeof(mOutBuf)) {
 80a08de:	d902      	bls.n	80a08e6 <_ZN14WidgetTerminal5writeEh+0x1c>
            flush();
 80a08e0:	6803      	ldr	r3, [r0, #0]
 80a08e2:	691b      	ldr	r3, [r3, #16]
 80a08e4:	4798      	blx	r3
    }
 80a08e6:	2001      	movs	r0, #1
 80a08e8:	bd10      	pop	{r4, pc}

080a08ea <_ZNK10BlynkParam5asIntEv.isra.0>:
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
 80a08ea:	f006 b959 	b.w	80a6ba0 <atoi>
	...

080a08f0 <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
 80a08f0:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
 80a08f2:	f004 fc1d 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a08f6:	215b      	movs	r1, #91	; 0x5b
 80a08f8:	f003 fe3a 	bl	80a4570 <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
 80a08fc:	f004 fc18 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0900:	4604      	mov	r4, r0
 80a0902:	f002 fea1 	bl	80a3648 <_Z11BlynkMillisv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0906:	220a      	movs	r2, #10
 80a0908:	4601      	mov	r1, r0
 80a090a:	4620      	mov	r0, r4
 80a090c:	f003 fe49 	bl	80a45a2 <_ZN5Print11printNumberEmh>
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a0910:	f004 fc0e 	bl	80a5130 <_Z16_fetch_usbserialv>
        }
 80a0914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a0918:	4901      	ldr	r1, [pc, #4]	; (80a0920 <_ZL14BLYNK_LOG_TIMEv+0x30>)
 80a091a:	f003 be25 	b.w	80a4568 <_ZN5Print5printEPKc>
 80a091e:	bf00      	nop
 80a0920:	080a7b29 	.word	0x080a7b29

080a0924 <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isClearSessionSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_CLEAR_SESSION);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
 80a0924:	b513      	push	{r0, r1, r4, lr}
 80a0926:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0928:	4b05      	ldr	r3, [pc, #20]	; (80a0940 <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a092a:	2200      	movs	r2, #0
 80a092c:	781b      	ldrb	r3, [r3, #0]
 80a092e:	f88d 3000 	strb.w	r3, [sp]
 80a0932:	233c      	movs	r3, #60	; 0x3c
 80a0934:	f004 f9be 	bl	80a4cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
 80a0938:	4620      	mov	r0, r4
 80a093a:	b002      	add	sp, #8
 80a093c:	bd10      	pop	{r4, pc}
 80a093e:	bf00      	nop
 80a0940:	20000218 	.word	0x20000218

080a0944 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0944:	2300      	movs	r3, #0
 80a0946:	6840      	ldr	r0, [r0, #4]
 80a0948:	461a      	mov	r2, r3
 80a094a:	4619      	mov	r1, r3
 80a094c:	f003 b8d6 	b.w	80a3afc <network_on>

080a0950 <_ZN10CloudClass7processEv>:
    static void process(void) {
 80a0950:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0952:	f002 ff03 	bl	80a375c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0956:	4b03      	ldr	r3, [pc, #12]	; (80a0964 <_ZN10CloudClass7processEv+0x14>)
 80a0958:	6018      	str	r0, [r3, #0]
    }
 80a095a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a095e:	f003 b925 	b.w	80a3bac <spark_process>
 80a0962:	bf00      	nop
 80a0964:	200008f4 	.word	0x200008f4

080a0968 <_ZNK10BlynkParam8iterator5asIntEv>:
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a0968:	4603      	mov	r3, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a096a:	6800      	ldr	r0, [r0, #0]
 80a096c:	b120      	cbz	r0, 80a0978 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
 80a096e:	685b      	ldr	r3, [r3, #4]
 80a0970:	4298      	cmp	r0, r3
 80a0972:	d201      	bcs.n	80a0978 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a0974:	f006 b914 	b.w	80a6ba0 <atoi>
 80a0978:	2000      	movs	r0, #0
 80a097a:	4770      	bx	lr

080a097c <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
 80a097c:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a097e:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
 80a0980:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0982:	b145      	cbz	r5, 80a0996 <_ZN10BlynkParam8iteratorppEv+0x1a>
 80a0984:	6843      	ldr	r3, [r0, #4]
 80a0986:	429d      	cmp	r5, r3
 80a0988:	d205      	bcs.n	80a0996 <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
 80a098a:	4628      	mov	r0, r5
 80a098c:	f006 fa81 	bl	80a6e92 <strlen>
 80a0990:	3001      	adds	r0, #1
 80a0992:	4405      	add	r5, r0
 80a0994:	6025      	str	r5, [r4, #0]
        }
 80a0996:	4620      	mov	r0, r4
 80a0998:	bd38      	pop	{r3, r4, r5, pc}

080a099a <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
 80a099a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a099c:	4604      	mov	r4, r0
    if (str == NULL) {
 80a099e:	460d      	mov	r5, r1
 80a09a0:	6847      	ldr	r7, [r0, #4]
 80a09a2:	b921      	cbnz	r1, 80a09ae <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
 80a09a4:	6803      	ldr	r3, [r0, #0]
 80a09a6:	1c7a      	adds	r2, r7, #1
 80a09a8:	6042      	str	r2, [r0, #4]
 80a09aa:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
 80a09ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
 80a09ae:	4608      	mov	r0, r1
 80a09b0:	f006 fa6f 	bl	80a6e92 <strlen>
    if (len + l > buff_size)
 80a09b4:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
 80a09b6:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
 80a09b8:	19f2      	adds	r2, r6, r7
 80a09ba:	429a      	cmp	r2, r3
 80a09bc:	d8f6      	bhi.n	80a09ac <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
 80a09be:	6820      	ldr	r0, [r4, #0]
 80a09c0:	4632      	mov	r2, r6
 80a09c2:	4629      	mov	r1, r5
 80a09c4:	4438      	add	r0, r7
 80a09c6:	f006 f9f3 	bl	80a6db0 <memcpy>
    len += l;
 80a09ca:	6860      	ldr	r0, [r4, #4]
 80a09cc:	4430      	add	r0, r6
 80a09ce:	6060      	str	r0, [r4, #4]
 80a09d0:	e7ec      	b.n	80a09ac <_ZN10BlynkParam3addEPKc+0x12>
	...

080a09d4 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
 80a09d4:	b538      	push	{r3, r4, r5, lr}
 80a09d6:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a09d8:	6825      	ldr	r5, [r4, #0]
    {
 80a09da:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a09dc:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80a09e0:	4a04      	ldr	r2, [pc, #16]	; (80a09f4 <_ZN10BlynkParam3addEi+0x20>)
 80a09e2:	1a09      	subs	r1, r1, r0
 80a09e4:	4428      	add	r0, r5
 80a09e6:	f003 f949 	bl	80a3c7c <snprintf>
 80a09ea:	6863      	ldr	r3, [r4, #4]
 80a09ec:	3001      	adds	r0, #1
 80a09ee:	4403      	add	r3, r0
 80a09f0:	6063      	str	r3, [r4, #4]
    }
 80a09f2:	bd38      	pop	{r3, r4, r5, pc}
 80a09f4:	080a7b2c 	.word	0x080a7b2c

080a09f8 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
 80a09f8:	b538      	push	{r3, r4, r5, lr}
 80a09fa:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a09fc:	6825      	ldr	r5, [r4, #0]
    {
 80a09fe:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a0a00:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80a0a04:	4a04      	ldr	r2, [pc, #16]	; (80a0a18 <_ZN10BlynkParam3addEl+0x20>)
 80a0a06:	1a09      	subs	r1, r1, r0
 80a0a08:	4428      	add	r0, r5
 80a0a0a:	f003 f937 	bl	80a3c7c <snprintf>
 80a0a0e:	6863      	ldr	r3, [r4, #4]
 80a0a10:	3001      	adds	r0, #1
 80a0a12:	4403      	add	r3, r0
 80a0a14:	6063      	str	r3, [r4, #4]
    }
 80a0a16:	bd38      	pop	{r3, r4, r5, pc}
 80a0a18:	080a7b2f 	.word	0x080a7b2f

080a0a1c <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
 80a0a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
 80a0a1e:	6b47      	ldr	r7, [r0, #52]	; 0x34
    bool connect() {
 80a0a20:	4604      	mov	r4, r0
 80a0a22:	b087      	sub	sp, #28
        if (domain) {
 80a0a24:	b32f      	cbz	r7, 80a0a72 <_ZN22BlynkTransportParticle7connectEv+0x56>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
 80a0a26:	f7ff ff63 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a0a2a:	f004 fb81 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0a2e:	4933      	ldr	r1, [pc, #204]	; (80a0afc <_ZN22BlynkTransportParticle7connectEv+0xe0>)
 80a0a30:	f003 fd9a 	bl	80a4568 <_ZN5Print5printEPKc>
 80a0a34:	f004 fb7c 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a0a3a:	f003 fd95 	bl	80a4568 <_ZN5Print5printEPKc>
 80a0a3e:	f004 fb77 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0a42:	213a      	movs	r1, #58	; 0x3a
 80a0a44:	f003 fd94 	bl	80a4570 <_ZN5Print5printEc>
 80a0a48:	f004 fb72 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0a4c:	4605      	mov	r5, r0
 80a0a4e:	220a      	movs	r2, #10
 80a0a50:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80a0a52:	f003 fda6 	bl	80a45a2 <_ZN5Print11printNumberEmh>
        n += println();
 80a0a56:	4628      	mov	r0, r5
 80a0a58:	f003 fd8d 	bl	80a4576 <_ZN5Print7printlnEv>
            return (1 == client.connect(domain, port));
 80a0a5c:	2300      	movs	r3, #0
 80a0a5e:	4620      	mov	r0, r4
 80a0a60:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a0a62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a0a64:	f003 fc46 	bl	80a42f4 <_ZN9TCPClient7connectEPKctm>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
 80a0a68:	1e43      	subs	r3, r0, #1
 80a0a6a:	4258      	negs	r0, r3
 80a0a6c:	4158      	adcs	r0, r3
        }
        return 0;
    }
 80a0a6e:	b007      	add	sp, #28
 80a0a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
            BLYNK_LOG_IP("Connecting to ", addr);
 80a0a72:	f7ff ff3d 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a0a76:	f004 fb5b 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0a7a:	4920      	ldr	r1, [pc, #128]	; (80a0afc <_ZN22BlynkTransportParticle7connectEv+0xe0>)
 80a0a7c:	f003 fd74 	bl	80a4568 <_ZN5Print5printEPKc>
 80a0a80:	f004 fb56 	bl	80a5130 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 80a0a84:	220a      	movs	r2, #10
 80a0a86:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80a0a8a:	f003 fd8a 	bl	80a45a2 <_ZN5Print11printNumberEmh>
 80a0a8e:	f004 fb4f 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0a92:	212e      	movs	r1, #46	; 0x2e
 80a0a94:	f003 fd6c 	bl	80a4570 <_ZN5Print5printEc>
 80a0a98:	f004 fb4a 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0a9c:	220a      	movs	r2, #10
 80a0a9e:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80a0aa2:	f003 fd7e 	bl	80a45a2 <_ZN5Print11printNumberEmh>
 80a0aa6:	f004 fb43 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0aaa:	212e      	movs	r1, #46	; 0x2e
 80a0aac:	f003 fd60 	bl	80a4570 <_ZN5Print5printEc>
 80a0ab0:	f004 fb3e 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0ab4:	220a      	movs	r2, #10
 80a0ab6:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80a0aba:	f003 fd72 	bl	80a45a2 <_ZN5Print11printNumberEmh>
 80a0abe:	f004 fb37 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0ac2:	212e      	movs	r1, #46	; 0x2e
 80a0ac4:	f003 fd54 	bl	80a4570 <_ZN5Print5printEc>
 80a0ac8:	f004 fb32 	bl	80a5130 <_Z16_fetch_usbserialv>
            val = n;
 80a0acc:	4625      	mov	r5, r4
 80a0ace:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80a0ad0:	220a      	movs	r2, #10
 80a0ad2:	f815 1f20 	ldrb.w	r1, [r5, #32]!
 80a0ad6:	f003 fd64 	bl	80a45a2 <_ZN5Print11printNumberEmh>
        n += println();
 80a0ada:	4630      	mov	r0, r6
 80a0adc:	f003 fd4b 	bl	80a4576 <_ZN5Print7printlnEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0ae0:	4b07      	ldr	r3, [pc, #28]	; (80a0b00 <_ZN22BlynkTransportParticle7connectEv+0xe4>)
 80a0ae2:	ae01      	add	r6, sp, #4
 80a0ae4:	9300      	str	r3, [sp, #0]
 80a0ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0ae8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0aea:	682b      	ldr	r3, [r5, #0]
            return (1 == client.connect(addr, port));
 80a0aec:	4669      	mov	r1, sp
 80a0aee:	7033      	strb	r3, [r6, #0]
 80a0af0:	4620      	mov	r0, r4
 80a0af2:	463b      	mov	r3, r7
 80a0af4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a0af6:	f003 fa8b 	bl	80a4010 <_ZN9TCPClient7connectE9IPAddresstm>
 80a0afa:	e7b5      	b.n	80a0a68 <_ZN22BlynkTransportParticle7connectEv+0x4c>
 80a0afc:	080a7b33 	.word	0x080a7b33
 80a0b00:	080a8fc8 	.word	0x080a8fc8

080a0b04 <_Z9setupWifiv>:
/*---------------------------------------------------------------------
change WiFi settings
---------------------------------------------------------------------*/

void setupWifi()
{
 80a0b04:	b510      	push	{r4, lr}
WiFi.on();
 80a0b06:	4c17      	ldr	r4, [pc, #92]	; (80a0b64 <_Z9setupWifiv+0x60>)
{
 80a0b08:	b094      	sub	sp, #80	; 0x50
WiFi.on();
 80a0b0a:	4620      	mov	r0, r4
 80a0b0c:	f7ff ff1a 	bl	80a0944 <_ZN5spark9WiFiClass2onEv>
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
 80a0b10:	2200      	movs	r2, #0
 80a0b12:	6860      	ldr	r0, [r4, #4]
 80a0b14:	4611      	mov	r1, r2
 80a0b16:	f003 f811 	bl	80a3b3c <network_has_credentials>

if(WiFi.hasCredentials())
 80a0b1a:	b128      	cbz	r0, 80a0b28 <_Z9setupWifiv+0x24>
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
 80a0b1c:	2300      	movs	r3, #0
 80a0b1e:	6860      	ldr	r0, [r4, #4]
 80a0b20:	461a      	mov	r2, r3
 80a0b22:	4619      	mov	r1, r3
 80a0b24:	f003 f81a 	bl	80a3b5c <network_clear_credentials>
        memset(&creds, 0, sizeof(creds));
 80a0b28:	2238      	movs	r2, #56	; 0x38
 80a0b2a:	2100      	movs	r1, #0
 80a0b2c:	a806      	add	r0, sp, #24
 80a0b2e:	f006 f94d 	bl	80a6dcc <memset>
        creds.size = sizeof(creds);
 80a0b32:	234c      	movs	r3, #76	; 0x4c
 80a0b34:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
 80a0b36:	4b0c      	ldr	r3, [pc, #48]	; (80a0b68 <_Z9setupWifiv+0x64>)
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a0b38:	6860      	ldr	r0, [r4, #4]
        creds.ssid = ssid;
 80a0b3a:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
 80a0b3c:	230b      	movs	r3, #11
 80a0b3e:	9303      	str	r3, [sp, #12]
        creds.password = password;
 80a0b40:	4b0a      	ldr	r3, [pc, #40]	; (80a0b6c <_Z9setupWifiv+0x68>)
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a0b42:	aa01      	add	r2, sp, #4
        creds.password = password;
 80a0b44:	9304      	str	r3, [sp, #16]
        creds.password_len = passwordLen;
 80a0b46:	230d      	movs	r3, #13
 80a0b48:	9305      	str	r3, [sp, #20]
        creds.security = WLanSecurityType(security);
 80a0b4a:	2303      	movs	r3, #3
 80a0b4c:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a0b50:	2300      	movs	r3, #0
 80a0b52:	4619      	mov	r1, r3
 80a0b54:	f002 fffa 	bl	80a3b4c <network_set_credentials>
  WiFi.clearCredentials();
  }

WiFi.setCredentials("Stitzenburg", "BC$_clu$_4277");
Particle.connect();
}
 80a0b58:	b014      	add	sp, #80	; 0x50
 80a0b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        spark_cloud_flag_connect();
 80a0b5e:	f003 b82d 	b.w	80a3bbc <spark_cloud_flag_connect>
 80a0b62:	bf00      	nop
 80a0b64:	200008d4 	.word	0x200008d4
 80a0b68:	080a7b42 	.word	0x080a7b42
 80a0b6c:	080a7b4e 	.word	0x080a7b4e

080a0b70 <_Z7getTimev>:

/*
* Return time as "minutes of day" = 60*hour + minutes
*/
int getTime()
{
 80a0b70:	b538      	push	{r3, r4, r5, lr}
  tsec = 60 * Time.minute() + Time.second();  
 80a0b72:	f003 fe47 	bl	80a4804 <_ZN9TimeClass6minuteEv>
 80a0b76:	253c      	movs	r5, #60	; 0x3c
 80a0b78:	4604      	mov	r4, r0
 80a0b7a:	f003 fe4f 	bl	80a481c <_ZN9TimeClass6secondEv>
 80a0b7e:	fb05 0004 	mla	r0, r5, r4, r0
 80a0b82:	4b05      	ldr	r3, [pc, #20]	; (80a0b98 <_Z7getTimev+0x28>)
 80a0b84:	6018      	str	r0, [r3, #0]
  return (Time.hour() * 60 + Time.minute());
 80a0b86:	f003 fe31 	bl	80a47ec <_ZN9TimeClass4hourEv>
 80a0b8a:	4604      	mov	r4, r0
 80a0b8c:	f003 fe3a 	bl	80a4804 <_ZN9TimeClass6minuteEv>
}
 80a0b90:	fb05 0004 	mla	r0, r5, r4, r0
 80a0b94:	bd38      	pop	{r3, r4, r5, pc}
 80a0b96:	bf00      	nop
 80a0b98:	20000400 	.word	0x20000400

080a0b9c <_Z12getSleepTimei>:
  min = tnow - (hour * 60);
  Serial.printlnf(" (%02d:%02d)", hour, min);
}

int getSleepTime(int target)
{
 80a0b9c:	b510      	push	{r4, lr}
 80a0b9e:	4604      	mov	r4, r0
  target = target - Time.minute();
 80a0ba0:	f003 fe30 	bl	80a4804 <_ZN9TimeClass6minuteEv>
  if (target < 0)
 80a0ba4:	1a24      	subs	r4, r4, r0
    target = target + 60;
 80a0ba6:	bf48      	it	mi
 80a0ba8:	343c      	addmi	r4, #60	; 0x3c
  Serial.printlnf(" proposed sleep duration: %d minutes", target);
 80a0baa:	f004 fac1 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0bae:	4622      	mov	r2, r4
 80a0bb0:	4902      	ldr	r1, [pc, #8]	; (80a0bbc <_Z12getSleepTimei+0x20>)
 80a0bb2:	f7ff fa7e 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  return (target);
}
 80a0bb6:	4620      	mov	r0, r4
 80a0bb8:	bd10      	pop	{r4, pc}
 80a0bba:	bf00      	nop
 80a0bbc:	080a7b5c 	.word	0x080a7b5c

080a0bc0 <_Z15readAdcChannelsv>:
  val = val * 43 / 40960;
  return (val);
}

void readAdcChannels()
{
 80a0bc0:	b538      	push	{r3, r4, r5, lr}
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a0bc2:	200a      	movs	r0, #10
 80a0bc4:	f004 fd49 	bl	80a565a <analogRead>
  val = val * 43 / 40960;
 80a0bc8:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 80a0bcc:	4d0b      	ldr	r5, [pc, #44]	; (80a0bfc <_Z15readAdcChannelsv+0x3c>)
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a0bce:	4b0c      	ldr	r3, [pc, #48]	; (80a0c00 <_Z15readAdcChannelsv+0x40>)
  val = val * 43 / 40960;
 80a0bd0:	4368      	muls	r0, r5
 80a0bd2:	fbb0 f0f4 	udiv	r0, r0, r4
  AiPumpeMain = convertAdcValue(analogRead(A0));
 80a0bd6:	6018      	str	r0, [r3, #0]
  AiPumpeReserve = convertAdcValue(analogRead(A2));
 80a0bd8:	200c      	movs	r0, #12
 80a0bda:	f004 fd3e 	bl	80a565a <analogRead>
  val = val * 43 / 40960;
 80a0bde:	4368      	muls	r0, r5
 80a0be0:	fbb0 f0f4 	udiv	r0, r0, r4
  AiPumpeReserve = convertAdcValue(analogRead(A2));
 80a0be4:	4b07      	ldr	r3, [pc, #28]	; (80a0c04 <_Z15readAdcChannelsv+0x44>)
 80a0be6:	6018      	str	r0, [r3, #0]
  Ai12V = convertAdcValue(analogRead(A1));
 80a0be8:	200b      	movs	r0, #11
 80a0bea:	f004 fd36 	bl	80a565a <analogRead>
  val = val * 43 / 40960;
 80a0bee:	4368      	muls	r0, r5
 80a0bf0:	fbb0 f0f4 	udiv	r0, r0, r4
  Ai12V = convertAdcValue(analogRead(A1));
 80a0bf4:	4b04      	ldr	r3, [pc, #16]	; (80a0c08 <_Z15readAdcChannelsv+0x48>)
 80a0bf6:	6018      	str	r0, [r3, #0]
}
 80a0bf8:	bd38      	pop	{r3, r4, r5, pc}
 80a0bfa:	bf00      	nop
 80a0bfc:	00022a4c 	.word	0x00022a4c
 80a0c00:	200001a4 	.word	0x200001a4
 80a0c04:	200001a8 	.word	0x200001a8
 80a0c08:	200001a0 	.word	0x200001a0

080a0c0c <_Z6hwInitv>:

/*---------------------------------------------------------------------
Hardware Initialisation
---------------------------------------------------------------------*/
void hwInit()
{
 80a0c0c:	b508      	push	{r3, lr}
  conrad_rsl_init(); // 433 MHz Sender abschalten
 80a0c0e:	f002 f8ab 	bl	80a2d68 <_Z15conrad_rsl_initv>

  ultra_sonic_setup();
 80a0c12:	f001 fefb 	bl	80a2a0c <_Z17ultra_sonic_setupv>

  pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a0c16:	2101      	movs	r1, #1
 80a0c18:	4608      	mov	r0, r1
 80a0c1a:	f004 fce1 	bl	80a55e0 <pinMode>
  pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a0c1e:	2101      	movs	r1, #1
 80a0c20:	2002      	movs	r0, #2
 80a0c22:	f004 fcdd 	bl	80a55e0 <pinMode>

  digitalWrite(DO_PUMPE_RESERVE, 0);
 80a0c26:	2100      	movs	r1, #0
 80a0c28:	2002      	movs	r0, #2
 80a0c2a:	f004 fcea 	bl	80a5602 <digitalWrite>
  digitalWrite(DO_PUMPE_MAIN, 0);
 80a0c2e:	2100      	movs	r1, #0
 80a0c30:	2001      	movs	r0, #1
 80a0c32:	f004 fce6 	bl	80a5602 <digitalWrite>

  st_funk_pumpe = switch_pumpe_main(OFF, 0);
 80a0c36:	2100      	movs	r1, #0
 80a0c38:	4608      	mov	r0, r1
 80a0c3a:	f002 fa87 	bl	80a314c <_Z17switch_pumpe_mainii>
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0c3e:	2100      	movs	r1, #0
  st_funk_pumpe = switch_pumpe_main(OFF, 0);
 80a0c40:	4b0e      	ldr	r3, [pc, #56]	; (80a0c7c <_Z6hwInitv+0x70>)
 80a0c42:	6018      	str	r0, [r3, #0]
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0c44:	4608      	mov	r0, r1
 80a0c46:	f002 fb3f 	bl	80a32c8 <_Z20switch_pumpe_reserveii>
 80a0c4a:	4b0d      	ldr	r3, [pc, #52]	; (80a0c80 <_Z6hwInitv+0x74>)

  pinMode(BLYNK_LED, OUTPUT);
 80a0c4c:	2101      	movs	r1, #1
  st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a0c4e:	6018      	str	r0, [r3, #0]
  pinMode(BLYNK_LED, OUTPUT);
 80a0c50:	2007      	movs	r0, #7
 80a0c52:	f004 fcc5 	bl	80a55e0 <pinMode>
  pinMode(DONT_SLEEP_PIN, INPUT);
 80a0c56:	2100      	movs	r1, #0
 80a0c58:	2006      	movs	r0, #6
 80a0c5a:	f004 fcc1 	bl	80a55e0 <pinMode>

  EEPROM.get(0, control);
 80a0c5e:	f004 fd3b 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a0c62:	2214      	movs	r2, #20
 80a0c64:	2000      	movs	r0, #0
 80a0c66:	4907      	ldr	r1, [pc, #28]	; (80a0c84 <_Z6hwInitv+0x78>)
 80a0c68:	f002 fd88 	bl	80a377c <HAL_EEPROM_Get>

  ts_giessen = 8 * 60 + 1; // zu dieser Zeit wird die Wasserpumpe eingeschaltet
 80a0c6c:	f240 12e1 	movw	r2, #481	; 0x1e1
 80a0c70:	4b05      	ldr	r3, [pc, #20]	; (80a0c88 <_Z6hwInitv+0x7c>)
 80a0c72:	601a      	str	r2, [r3, #0]

  done_giessen = 0;
 80a0c74:	2200      	movs	r2, #0
 80a0c76:	4b05      	ldr	r3, [pc, #20]	; (80a0c8c <_Z6hwInitv+0x80>)
 80a0c78:	601a      	str	r2, [r3, #0]
}
 80a0c7a:	bd08      	pop	{r3, pc}
 80a0c7c:	20000354 	.word	0x20000354
 80a0c80:	2000035c 	.word	0x2000035c
 80a0c84:	20000314 	.word	0x20000314
 80a0c88:	20000024 	.word	0x20000024
 80a0c8c:	20000328 	.word	0x20000328

080a0c90 <_Z18reportDontSleepPinv>:
}
/*---------------------------------------------------------------------
report to database if DontSleepPin is set
---------------------------------------------------------------------*/
int reportDontSleepPin()
{
 80a0c90:	b538      	push	{r3, r4, r5, lr}
  int dontSleep = 0;

  if (digitalRead(DONT_SLEEP_PIN) == HIGH)
 80a0c92:	2006      	movs	r0, #6
 80a0c94:	f004 fcce 	bl	80a5634 <digitalRead>
 80a0c98:	2801      	cmp	r0, #1
 80a0c9a:	4604      	mov	r4, r0
 80a0c9c:	d110      	bne.n	80a0cc0 <_Z18reportDontSleepPinv+0x30>
  {
    dontSleepHW = 1;
 80a0c9e:	4b09      	ldr	r3, [pc, #36]	; (80a0cc4 <_Z18reportDontSleepPinv+0x34>)
    dontSleep = 1;
    WriteToDatabase("CONTROL", "SLEEP disabled by HW pin ");
 80a0ca0:	4909      	ldr	r1, [pc, #36]	; (80a0cc8 <_Z18reportDontSleepPinv+0x38>)
    dontSleepHW = 1;
 80a0ca2:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "SLEEP disabled by HW pin ");
 80a0ca4:	4809      	ldr	r0, [pc, #36]	; (80a0ccc <_Z18reportDontSleepPinv+0x3c>)
 80a0ca6:	f7ff fa29 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  }

  if (control.dontSleepSW == 1)
 80a0caa:	4b09      	ldr	r3, [pc, #36]	; (80a0cd0 <_Z18reportDontSleepPinv+0x40>)
 80a0cac:	685d      	ldr	r5, [r3, #4]
 80a0cae:	2d01      	cmp	r5, #1
 80a0cb0:	d104      	bne.n	80a0cbc <_Z18reportDontSleepPinv+0x2c>
  {
    dontSleep = 1;
    WriteToDatabase("CONTROL", "SLEEP disabled by SW ");
 80a0cb2:	4908      	ldr	r1, [pc, #32]	; (80a0cd4 <_Z18reportDontSleepPinv+0x44>)
 80a0cb4:	4805      	ldr	r0, [pc, #20]	; (80a0ccc <_Z18reportDontSleepPinv+0x3c>)
 80a0cb6:	f7ff fa21 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a0cba:	462c      	mov	r4, r5
  }
  return (dontSleep);
}
 80a0cbc:	4620      	mov	r0, r4
 80a0cbe:	bd38      	pop	{r3, r4, r5, pc}
  int dontSleep = 0;
 80a0cc0:	2400      	movs	r4, #0
 80a0cc2:	e7f2      	b.n	80a0caa <_Z18reportDontSleepPinv+0x1a>
 80a0cc4:	2000032c 	.word	0x2000032c
 80a0cc8:	080a7b81 	.word	0x080a7b81
 80a0ccc:	080a7b9b 	.word	0x080a7b9b
 80a0cd0:	20000314 	.word	0x20000314
 80a0cd4:	080a7ba3 	.word	0x080a7ba3

080a0cd8 <_Z17checkDontSleepPinv>:

/*---------------------------------------------------------------------
check if DontSleepPin is set
---------------------------------------------------------------------*/
int checkDontSleepPin()
{
 80a0cd8:	b510      	push	{r4, lr}
  if (digitalRead(DONT_SLEEP_PIN) == HIGH)
 80a0cda:	2006      	movs	r0, #6
 80a0cdc:	f004 fcaa 	bl	80a5634 <digitalRead>
 80a0ce0:	1e43      	subs	r3, r0, #1
 80a0ce2:	4c06      	ldr	r4, [pc, #24]	; (80a0cfc <_Z17checkDontSleepPinv+0x24>)
 80a0ce4:	4258      	negs	r0, r3
 80a0ce6:	4158      	adcs	r0, r3
 80a0ce8:	6020      	str	r0, [r4, #0]
  else
  {
    dontSleepHW = 0;
  }

  Serial.printlnf(" dontSleep pin : %d ", dontSleepHW);
 80a0cea:	f004 fa21 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0cee:	6822      	ldr	r2, [r4, #0]
 80a0cf0:	4903      	ldr	r1, [pc, #12]	; (80a0d00 <_Z17checkDontSleepPinv+0x28>)
 80a0cf2:	f7ff f9de 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  return (dontSleepHW);
}
 80a0cf6:	6820      	ldr	r0, [r4, #0]
 80a0cf8:	bd10      	pop	{r4, pc}
 80a0cfa:	bf00      	nop
 80a0cfc:	2000032c 	.word	0x2000032c
 80a0d00:	080a7bb9 	.word	0x080a7bb9

080a0d04 <_Z9timeStampv>:

/*---------------------------------------------------------------------
print timestamp to serial port
---------------------------------------------------------------------*/
void timeStamp()
{
 80a0d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0d08:	b085      	sub	sp, #20
  sprintf(timebuffer, " %.2d-%.2d-%d %.2d:%.2d:%.2d ",
 80a0d0a:	f003 fd93 	bl	80a4834 <_ZN9TimeClass3dayEv>
 80a0d0e:	4604      	mov	r4, r0
 80a0d10:	f003 fda4 	bl	80a485c <_ZN9TimeClass5monthEv>
 80a0d14:	4605      	mov	r5, r0
 80a0d16:	f003 fda9 	bl	80a486c <_ZN9TimeClass4yearEv>
 80a0d1a:	4606      	mov	r6, r0
 80a0d1c:	f003 fd66 	bl	80a47ec <_ZN9TimeClass4hourEv>
 80a0d20:	4607      	mov	r7, r0
 80a0d22:	f003 fd6f 	bl	80a4804 <_ZN9TimeClass6minuteEv>
 80a0d26:	4680      	mov	r8, r0
 80a0d28:	f003 fd78 	bl	80a481c <_ZN9TimeClass6secondEv>
 80a0d2c:	f8df 9024 	ldr.w	r9, [pc, #36]	; 80a0d54 <_Z9timeStampv+0x50>
 80a0d30:	462b      	mov	r3, r5
 80a0d32:	4622      	mov	r2, r4
 80a0d34:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80a0d38:	4907      	ldr	r1, [pc, #28]	; (80a0d58 <_Z9timeStampv+0x54>)
 80a0d3a:	4648      	mov	r0, r9
 80a0d3c:	e9cd 6700 	strd	r6, r7, [sp]
 80a0d40:	f002 ff8c 	bl	80a3c5c <sprintf>
          Time.year(),
          Time.hour(),
          Time.minute(),
          Time.second());

  Serial.print(timebuffer);
 80a0d44:	f004 f9f4 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0d48:	4649      	mov	r1, r9
/*   if (termEnabled == 1)
  {
    terminal.print(timebuffer); // Ausgabe an BLYNK APP terminal
    terminal.flush();
  }  */
}
 80a0d4a:	b005      	add	sp, #20
 80a0d4c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Serial.print(timebuffer);
 80a0d50:	f003 bc0a 	b.w	80a4568 <_ZN5Print5printEPKc>
 80a0d54:	200003c0 	.word	0x200003c0
 80a0d58:	080a7bce 	.word	0x080a7bce

080a0d5c <BlynkWidgetWrite16>:
  }
}


BLYNK_WRITE(V16)
{
 80a0d5c:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a0d5e:	6808      	ldr	r0, [r1, #0]
 80a0d60:	f7ff fdc3 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a0d64:	2801      	cmp	r0, #1
 80a0d66:	d105      	bne.n	80a0d74 <BlynkWidgetWrite16+0x18>
  {
   switch_pumpe_funk(OFF,0); // pumpe aus  
  }
}
 80a0d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   switch_pumpe_funk(OFF,0); // pumpe aus  
 80a0d6c:	2100      	movs	r1, #0
 80a0d6e:	4608      	mov	r0, r1
 80a0d70:	f002 bb50 	b.w	80a3414 <_Z17switch_pumpe_funkii>
}
 80a0d74:	bd08      	pop	{r3, pc}

080a0d76 <BlynkWidgetWrite17>:

BLYNK_WRITE(V17)
{
 80a0d76:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a0d78:	6808      	ldr	r0, [r1, #0]
 80a0d7a:	f7ff fdb6 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a0d7e:	2801      	cmp	r0, #1
 80a0d80:	d104      	bne.n	80a0d8c <BlynkWidgetWrite17+0x16>
  {
   switch_pumpe_funk(ON,15); // pumpe ein  
  }
}
 80a0d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   switch_pumpe_funk(ON,15); // pumpe ein  
 80a0d86:	210f      	movs	r1, #15
 80a0d88:	f002 bb44 	b.w	80a3414 <_Z17switch_pumpe_funkii>
}
 80a0d8c:	bd08      	pop	{r3, pc}
	...

080a0d90 <_ZN22BlynkTransportParticleD1Ev>:
class BlynkTransportParticle
 80a0d90:	b510      	push	{r4, lr}
 80a0d92:	4604      	mov	r4, r0
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0d94:	4b03      	ldr	r3, [pc, #12]	; (80a0da4 <_ZN22BlynkTransportParticleD1Ev+0x14>)
 80a0d96:	f840 3b18 	str.w	r3, [r0], #24
      ~__shared_ptr() = default;
 80a0d9a:	f7ff f998 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d9e:	4620      	mov	r0, r4
 80a0da0:	bd10      	pop	{r4, pc}
 80a0da2:	bf00      	nop
 80a0da4:	080a8f40 	.word	0x080a8f40

080a0da8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
 80a0da8:	b508      	push	{r3, lr}
        state = CONNECTING;
 80a0daa:	2300      	movs	r3, #0
 80a0dac:	7743      	strb	r3, [r0, #29]

    void disconnect() { client.stop(); }
 80a0dae:	6800      	ldr	r0, [r0, #0]
 80a0db0:	f003 f9d8 	bl	80a4164 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
 80a0db4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
 80a0db8:	f002 bc4a 	b.w	80a3650 <BlynkNoOpCbk>

080a0dbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
 80a0dc0:	eb01 0802 	add.w	r8, r1, r2
 80a0dc4:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a0dc6:	4541      	cmp	r1, r8
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0dc8:	4607      	mov	r7, r0
 80a0dca:	460d      	mov	r5, r1
 80a0dcc:	4691      	mov	r9, r2
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0dce:	e9cd 1805 	strd	r1, r8, [sp, #20]
    if (it >= param.end())
 80a0dd2:	f080 809e 	bcs.w	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
 80a0dd6:	a805      	add	r0, sp, #20
 80a0dd8:	880e      	ldrh	r6, [r1, #0]
 80a0dda:	f7ff fdcf 	bl	80a097c <_ZN10BlynkParam8iteratorppEv>
 80a0dde:	6803      	ldr	r3, [r0, #0]
 80a0de0:	4543      	cmp	r3, r8
 80a0de2:	f080 8096 	bcs.w	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0de6:	a805      	add	r0, sp, #20
 80a0de8:	f7ff fdbe 	bl	80a0968 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
 80a0dec:	f247 2376 	movw	r3, #29302	; 0x7276
 80a0df0:	429e      	cmp	r6, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0df2:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
 80a0df4:	f000 80b5 	beq.w	80a0f62 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a6>
 80a0df8:	d828      	bhi.n	80a0e4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x90>
 80a0dfa:	f247 2361 	movw	r3, #29281	; 0x7261
 80a0dfe:	429e      	cmp	r6, r3
 80a0e00:	f000 808a 	beq.w	80a0f18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x15c>
 80a0e04:	f247 2364 	movw	r3, #29284	; 0x7264
 80a0e08:	429e      	cmp	r6, r3
 80a0e0a:	d04d      	beq.n	80a0ea8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xec>
 80a0e0c:	f646 5370 	movw	r3, #28016	; 0x6d70
 80a0e10:	429e      	cmp	r6, r3
 80a0e12:	d128      	bne.n	80a0e66 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
 80a0e14:	4e68      	ldr	r6, [pc, #416]	; (80a0fb8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a0e16:	4f69      	ldr	r7, [pc, #420]	; (80a0fbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>)
 80a0e18:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80a0fc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x204>
        while (it < param.end()) {
 80a0e1c:	9b05      	ldr	r3, [sp, #20]
 80a0e1e:	4598      	cmp	r8, r3
 80a0e20:	d977      	bls.n	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0e22:	a805      	add	r0, sp, #20
 80a0e24:	f7ff fda0 	bl	80a0968 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0e28:	b2c5      	uxtb	r5, r0
            ++it;
 80a0e2a:	a805      	add	r0, sp, #20
 80a0e2c:	f7ff fda6 	bl	80a097c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
 80a0e30:	9c05      	ldr	r4, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
 80a0e32:	4631      	mov	r1, r6
 80a0e34:	4620      	mov	r0, r4
 80a0e36:	f005 ffff 	bl	80a6e38 <strcmp>
 80a0e3a:	4601      	mov	r1, r0
 80a0e3c:	bb38      	cbnz	r0, 80a0e8e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd2>
                pinMode(pin, OUTPUT);
 80a0e3e:	4628      	mov	r0, r5
 80a0e40:	f004 fbce 	bl	80a55e0 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
 80a0e44:	a805      	add	r0, sp, #20
 80a0e46:	f7ff fd99 	bl	80a097c <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
 80a0e4a:	e7e7      	b.n	80a0e1c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
    switch(cmd16) {
 80a0e4c:	f247 7364 	movw	r3, #30564	; 0x7764
 80a0e50:	429e      	cmp	r6, r3
 80a0e52:	d04a      	beq.n	80a0eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
 80a0e54:	f247 7376 	movw	r3, #30582	; 0x7776
 80a0e58:	429e      	cmp	r6, r3
 80a0e5a:	f000 8092 	beq.w	80a0f82 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
 80a0e5e:	f247 7361 	movw	r3, #30561	; 0x7761
 80a0e62:	429e      	cmp	r6, r3
 80a0e64:	d06a      	beq.n	80a0f3c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x180>
        } else {
            BlynkWidgetWriteDefault(req, param2);
        }
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
 80a0e66:	f7ff fd43 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a0e6a:	f004 f961 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0e6e:	4955      	ldr	r1, [pc, #340]	; (80a0fc4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x208>)
 80a0e70:	f003 fb7a 	bl	80a4568 <_ZN5Print5printEPKc>
 80a0e74:	f004 f95c 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a0e78:	4629      	mov	r1, r5
 80a0e7a:	f003 fb88 	bl	80a458e <_ZN5Print7printlnEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a0e7e:	2300      	movs	r3, #0
 80a0e80:	2202      	movs	r2, #2
 80a0e82:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a0e86:	9200      	str	r2, [sp, #0]
 80a0e88:	4619      	mov	r1, r3
 80a0e8a:	8b7a      	ldrh	r2, [r7, #26]
 80a0e8c:	e029      	b.n	80a0ee2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x126>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a0e8e:	4639      	mov	r1, r7
 80a0e90:	4620      	mov	r0, r4
 80a0e92:	f005 ffd1 	bl	80a6e38 <strcmp>
 80a0e96:	b128      	cbz	r0, 80a0ea4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe8>
 80a0e98:	4649      	mov	r1, r9
 80a0e9a:	4620      	mov	r0, r4
 80a0e9c:	f005 ffcc 	bl	80a6e38 <strcmp>
 80a0ea0:	2800      	cmp	r0, #0
 80a0ea2:	d1cf      	bne.n	80a0e44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x88>
                pinMode(pin, OUTPUT);
 80a0ea4:	2101      	movs	r1, #1
 80a0ea6:	e7ca      	b.n	80a0e3e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0ea8:	ab0a      	add	r3, sp, #40	; 0x28
 80a0eaa:	9307      	str	r3, [sp, #28]
 80a0eac:	2500      	movs	r5, #0
 80a0eae:	2310      	movs	r3, #16
        rsp.add("dw");
 80a0eb0:	4945      	ldr	r1, [pc, #276]	; (80a0fc8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
 80a0eb2:	a807      	add	r0, sp, #28
 80a0eb4:	e9cd 5308 	strd	r5, r3, [sp, #32]
 80a0eb8:	f7ff fd6f 	bl	80a099a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
 80a0ebc:	a807      	add	r0, sp, #28
 80a0ebe:	4621      	mov	r1, r4
 80a0ec0:	f7ff fd88 	bl	80a09d4 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
 80a0ec4:	4620      	mov	r0, r4
 80a0ec6:	f004 fbb5 	bl	80a5634 <digitalRead>
        rsp.add(analogRead(pin));
 80a0eca:	4601      	mov	r1, r0
 80a0ecc:	a807      	add	r0, sp, #28
 80a0ece:	f7ff fd93 	bl	80a09f8 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
 80a0ed2:	462a      	mov	r2, r5
 80a0ed4:	2114      	movs	r1, #20
 80a0ed6:	9b08      	ldr	r3, [sp, #32]
 80a0ed8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80a0edc:	3b01      	subs	r3, #1
 80a0ede:	9300      	str	r3, [sp, #0]
 80a0ee0:	9b07      	ldr	r3, [sp, #28]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a0ee2:	4638      	mov	r0, r7
 80a0ee4:	f000 fae8 	bl	80a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
 80a0ee8:	e013      	b.n	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        if (++it >= param.end())
 80a0eea:	a805      	add	r0, sp, #20
 80a0eec:	f7ff fd46 	bl	80a097c <_ZN10BlynkParam8iteratorppEv>
 80a0ef0:	6803      	ldr	r3, [r0, #0]
 80a0ef2:	4598      	cmp	r8, r3
 80a0ef4:	d90d      	bls.n	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        pinMode(pin, OUTPUT);
 80a0ef6:	b2a4      	uxth	r4, r4
 80a0ef8:	2101      	movs	r1, #1
 80a0efa:	4620      	mov	r0, r4
 80a0efc:	f004 fb70 	bl	80a55e0 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
 80a0f00:	a805      	add	r0, sp, #20
 80a0f02:	f7ff fd31 	bl	80a0968 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0f06:	1e01      	subs	r1, r0, #0
 80a0f08:	bf18      	it	ne
 80a0f0a:	2101      	movne	r1, #1
 80a0f0c:	4620      	mov	r0, r4
 80a0f0e:	f004 fb78 	bl	80a5602 <digitalWrite>
    }
}
 80a0f12:	b00f      	add	sp, #60	; 0x3c
 80a0f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0f18:	ab0a      	add	r3, sp, #40	; 0x28
 80a0f1a:	9307      	str	r3, [sp, #28]
 80a0f1c:	2500      	movs	r5, #0
 80a0f1e:	2310      	movs	r3, #16
        rsp.add("aw");
 80a0f20:	a807      	add	r0, sp, #28
 80a0f22:	492a      	ldr	r1, [pc, #168]	; (80a0fcc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
 80a0f24:	e9cd 5308 	strd	r5, r3, [sp, #32]
 80a0f28:	f7ff fd37 	bl	80a099a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
 80a0f2c:	a807      	add	r0, sp, #28
 80a0f2e:	4621      	mov	r1, r4
 80a0f30:	f7ff fd50 	bl	80a09d4 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
 80a0f34:	4620      	mov	r0, r4
 80a0f36:	f004 fb90 	bl	80a565a <analogRead>
 80a0f3a:	e7c6      	b.n	80a0eca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
        if (++it >= param.end())
 80a0f3c:	a805      	add	r0, sp, #20
 80a0f3e:	f7ff fd1d 	bl	80a097c <_ZN10BlynkParam8iteratorppEv>
 80a0f42:	6803      	ldr	r3, [r0, #0]
 80a0f44:	4598      	cmp	r8, r3
 80a0f46:	d9e4      	bls.n	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        pinMode(pin, OUTPUT);
 80a0f48:	b2a4      	uxth	r4, r4
 80a0f4a:	2101      	movs	r1, #1
 80a0f4c:	4620      	mov	r0, r4
 80a0f4e:	f004 fb47 	bl	80a55e0 <pinMode>
        analogWrite(pin, it.asInt());
 80a0f52:	a805      	add	r0, sp, #20
 80a0f54:	f7ff fd08 	bl	80a0968 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0f58:	4601      	mov	r1, r0
 80a0f5a:	4620      	mov	r0, r4
 80a0f5c:	f004 fb94 	bl	80a5688 <_Z11analogWritetm>
    } break;
 80a0f60:	e7d7      	b.n	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0f62:	4620      	mov	r0, r4
        BlynkReq req = { pin };
 80a0f64:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0f68:	f002 fb74 	bl	80a3654 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
 80a0f6c:	4603      	mov	r3, r0
            handler(req);
 80a0f6e:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
 80a0f70:	b123      	cbz	r3, 80a0f7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c0>
 80a0f72:	4a17      	ldr	r2, [pc, #92]	; (80a0fd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x214>)
 80a0f74:	4293      	cmp	r3, r2
 80a0f76:	d001      	beq.n	80a0f7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c0>
            handler(req);
 80a0f78:	4798      	blx	r3
 80a0f7a:	e7ca      	b.n	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
            BlynkWidgetReadDefault(req);
 80a0f7c:	f002 fb66 	bl	80a364c <BlynkWidgetRead>
    } break;
 80a0f80:	e7c7      	b.n	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
        ++it;
 80a0f82:	a805      	add	r0, sp, #20
 80a0f84:	f7ff fcfa 	bl	80a097c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
 80a0f88:	9b05      	ldr	r3, [sp, #20]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0f8a:	4620      	mov	r0, r4
        BlynkParam param2(start, len - (start - (char*)buff));
 80a0f8c:	1b5d      	subs	r5, r3, r5
 80a0f8e:	eba9 0505 	sub.w	r5, r9, r5
        : buff((char*)addr), len(length), buff_size(length)
 80a0f92:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
 80a0f96:	950c      	str	r5, [sp, #48]	; 0x30
        BlynkReq req = { pin };
 80a0f98:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0f9c:	f002 fb64 	bl	80a3668 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0fa0:	4603      	mov	r3, r0
            handler(req, param2);
 80a0fa2:	a90a      	add	r1, sp, #40	; 0x28
 80a0fa4:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0fa6:	b123      	cbz	r3, 80a0fb2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f6>
 80a0fa8:	4a0a      	ldr	r2, [pc, #40]	; (80a0fd4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x218>)
 80a0faa:	4293      	cmp	r3, r2
 80a0fac:	d001      	beq.n	80a0fb2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f6>
            handler(req, param2);
 80a0fae:	4798      	blx	r3
 80a0fb0:	e7af      	b.n	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
            BlynkWidgetWriteDefault(req, param2);
 80a0fb2:	f002 fb4c 	bl	80a364e <BlynkWidgetWrite>
    } break;
 80a0fb6:	e7ac      	b.n	80a0f12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x156>
 80a0fb8:	080a7bec 	.word	0x080a7bec
 80a0fbc:	080a7c93 	.word	0x080a7c93
 80a0fc0:	080a7bef 	.word	0x080a7bef
 80a0fc4:	080a7bf9 	.word	0x080a7bf9
 80a0fc8:	080a7bf3 	.word	0x080a7bf3
 80a0fcc:	080a7bf6 	.word	0x080a7bf6
 80a0fd0:	080a364d 	.word	0x080a364d
 80a0fd4:	080a364f 	.word	0x080a364f

080a0fd8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
 80a0fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0fdc:	b08c      	sub	sp, #48	; 0x30
 80a0fde:	af04      	add	r7, sp, #16
 80a0fe0:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
 80a0fe2:	2205      	movs	r2, #5
 80a0fe4:	6800      	ldr	r0, [r0, #0]
 80a0fe6:	1d39      	adds	r1, r7, #4
 80a0fe8:	f003 fb3e 	bl	80a4668 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
 80a0fec:	2800      	cmp	r0, #0
 80a0fee:	d049      	beq.n	80a1084 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xac>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
 80a0ff0:	2805      	cmp	r0, #5
 80a0ff2:	d004      	beq.n	80a0ffe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26>
        return false;
 80a0ff4:	2000      	movs	r0, #0
}
 80a0ff6:	3720      	adds	r7, #32
 80a0ff8:	46bd      	mov	sp, r7
 80a0ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
 80a0ffe:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 80a1002:	ba5b      	rev16	r3, r3
 80a1004:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a1006:	f8a7 3005 	strh.w	r3, [r7, #5]
 80a100a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a100e:	ba5b      	rev16	r3, r3
 80a1010:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
 80a1014:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
 80a1018:	2a00      	cmp	r2, #0
 80a101a:	d0eb      	beq.n	80a0ff4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
 80a101c:	793b      	ldrb	r3, [r7, #4]
 80a101e:	2b00      	cmp	r3, #0
 80a1020:	d153      	bne.n	80a10ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
        lastActivityIn = BlynkMillis();
 80a1022:	f002 fb11 	bl	80a3648 <_Z11BlynkMillisv>
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a1026:	7f65      	ldrb	r5, [r4, #29]
        lastActivityIn = BlynkMillis();
 80a1028:	60e0      	str	r0, [r4, #12]
 80a102a:	f8b7 0007 	ldrh.w	r0, [r7, #7]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a102e:	2d00      	cmp	r5, #0
 80a1030:	d147      	bne.n	80a10c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
 80a1032:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 80a1036:	2b01      	cmp	r3, #1
 80a1038:	d143      	bne.n	80a10c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
            switch (hdr.length) {
 80a103a:	2809      	cmp	r0, #9
 80a103c:	d024      	beq.n	80a1088 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xb0>
 80a103e:	28c8      	cmp	r0, #200	; 0xc8
 80a1040:	d001      	beq.n	80a1046 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
 80a1042:	2804      	cmp	r0, #4
 80a1044:	d12a      	bne.n	80a109c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xc4>
                state = CONNECTED;
 80a1046:	2501      	movs	r5, #1
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
 80a1048:	f7ff fc52 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a104c:	f004 f870 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1050:	49b5      	ldr	r1, [pc, #724]	; (80a1328 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x350>)
 80a1052:	f003 fa89 	bl	80a4568 <_ZN5Print5printEPKc>
 80a1056:	f004 f86b 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a105a:	6963      	ldr	r3, [r4, #20]
 80a105c:	68e1      	ldr	r1, [r4, #12]
        return printNumber(val, base) + t;
 80a105e:	220a      	movs	r2, #10
 80a1060:	1ac9      	subs	r1, r1, r3
 80a1062:	f003 fa9e 	bl	80a45a2 <_ZN5Print11printNumberEmh>
 80a1066:	f004 f863 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a106a:	49b0      	ldr	r1, [pc, #704]	; (80a132c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x354>)
 80a106c:	f003 fa8f 	bl	80a458e <_ZN5Print7printlnEPKc>
                lastHeartbeat = lastActivityIn;
 80a1070:	68e3      	ldr	r3, [r4, #12]
                this->sendInfo();
 80a1072:	4620      	mov	r0, r4
                lastHeartbeat = lastActivityIn;
 80a1074:	6163      	str	r3, [r4, #20]
                state = CONNECTED;
 80a1076:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
 80a1078:	f000 fe58 	bl	80a1d2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
 80a107c:	f7ff fc68 	bl	80a0950 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
 80a1080:	f002 fae6 	bl	80a3650 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
 80a1084:	2001      	movs	r0, #1
 80a1086:	e7b6      	b.n	80a0ff6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e>
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
 80a1088:	f7ff fc32 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a108c:	f004 f850 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1090:	49a7      	ldr	r1, [pc, #668]	; (80a1330 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x358>)
 80a1092:	f003 fa7c 	bl	80a458e <_ZN5Print7printlnEPKc>
                state = TOKEN_INVALID;
 80a1096:	2303      	movs	r3, #3
 80a1098:	7763      	strb	r3, [r4, #29]
 80a109a:	e7ab      	b.n	80a0ff4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
 80a109c:	f7ff fc28 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a10a0:	f004 f846 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a10a4:	49a3      	ldr	r1, [pc, #652]	; (80a1334 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x35c>)
 80a10a6:	f003 fa5f 	bl	80a4568 <_ZN5Print5printEPKc>
 80a10aa:	f004 f841 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a10ae:	4604      	mov	r4, r0
 80a10b0:	220a      	movs	r2, #10
 80a10b2:	f8b7 1007 	ldrh.w	r1, [r7, #7]
 80a10b6:	f003 fa74 	bl	80a45a2 <_ZN5Print11printNumberEmh>
        n += println();
 80a10ba:	4620      	mov	r0, r4
 80a10bc:	f003 fa5b 	bl	80a4576 <_ZN5Print7printlnEv>
 80a10c0:	e798      	b.n	80a0ff4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
 80a10c2:	3805      	subs	r0, #5
 80a10c4:	bf18      	it	ne
 80a10c6:	2001      	movne	r0, #1
 80a10c8:	e795      	b.n	80a0ff6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e>
    if (hdr.length > BLYNK_MAX_READBYTES) {
 80a10ca:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 80a10ce:	d915      	bls.n	80a10fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
 80a10d0:	f7ff fc0e 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a10d4:	f004 f82c 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a10d8:	4997      	ldr	r1, [pc, #604]	; (80a1338 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x360>)
 80a10da:	f003 fa45 	bl	80a4568 <_ZN5Print5printEPKc>
 80a10de:	f004 f827 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a10e2:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80a10e4:	220a      	movs	r2, #10
 80a10e6:	f8b7 1007 	ldrh.w	r1, [r7, #7]
 80a10ea:	f003 fa5a 	bl	80a45a2 <_ZN5Print11printNumberEmh>
        n += println();
 80a10ee:	4628      	mov	r0, r5
 80a10f0:	f003 fa41 	bl	80a4576 <_ZN5Print7printlnEv>
        internalReconnect();
 80a10f4:	4620      	mov	r0, r4
 80a10f6:	f7ff fe57 	bl	80a0da8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a10fa:	e7c3      	b.n	80a1084 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xac>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
 80a10fc:	466e      	mov	r6, sp
 80a10fe:	f108 0308 	add.w	r3, r8, #8
 80a1102:	08db      	lsrs	r3, r3, #3
 80a1104:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 80a1108:	469d      	mov	sp, r3
 80a110a:	ad04      	add	r5, sp, #16
 80a110c:	4642      	mov	r2, r8
 80a110e:	4629      	mov	r1, r5
 80a1110:	6820      	ldr	r0, [r4, #0]
 80a1112:	f003 faa9 	bl	80a4668 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
 80a1116:	4580      	cmp	r8, r0
 80a1118:	f04f 0000 	mov.w	r0, #0
 80a111c:	d177      	bne.n	80a120e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x236>
    inputBuffer[hdr.length] = '\0';
 80a111e:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a1122:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
 80a1124:	f002 fa90 	bl	80a3648 <_Z11BlynkMillisv>
    switch (hdr.type)
 80a1128:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
 80a112a:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
 80a112c:	2b14      	cmp	r3, #20
 80a112e:	f000 80b8 	beq.w	80a12a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ca>
 80a1132:	d838      	bhi.n	80a11a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ce>
 80a1134:	2b0f      	cmp	r3, #15
 80a1136:	f000 80b4 	beq.w	80a12a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ca>
 80a113a:	d807      	bhi.n	80a114c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
 80a113c:	2b02      	cmp	r3, #2
 80a113e:	d039      	beq.n	80a11b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1dc>
 80a1140:	2b06      	cmp	r3, #6
 80a1142:	d049      	beq.n	80a11d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x200>
        internalReconnect();
 80a1144:	4620      	mov	r0, r4
 80a1146:	f7ff fe2f 	bl	80a0da8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a114a:	e050      	b.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
    switch (hdr.type)
 80a114c:	2b11      	cmp	r3, #17
 80a114e:	d1f9      	bne.n	80a1144 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
        BlynkReq req = { 0 };
 80a1150:	2300      	movs	r3, #0
 80a1152:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
 80a1154:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
 80a1158:	442b      	add	r3, r5
        if (it >= param.end())
 80a115a:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a115c:	e9c7 5303 	strd	r5, r3, [r7, #12]
 80a1160:	d245      	bcs.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        ++it;
 80a1162:	f107 000c 	add.w	r0, r7, #12
 80a1166:	682c      	ldr	r4, [r5, #0]
 80a1168:	f7ff fc08 	bl	80a097c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
 80a116c:	68fa      	ldr	r2, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
 80a116e:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a1172:	1b55      	subs	r5, r2, r5
 80a1174:	1b5d      	subs	r5, r3, r5
    BlynkParam(const void* addr, size_t length)
 80a1176:	4b71      	ldr	r3, [pc, #452]	; (80a133c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x364>)
        : buff((char*)addr), len(length), buff_size(length)
 80a1178:	e9c7 2505 	strd	r2, r5, [r7, #20]
 80a117c:	429c      	cmp	r4, r3
 80a117e:	61fd      	str	r5, [r7, #28]
 80a1180:	f000 80b9 	beq.w	80a12f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31e>
 80a1184:	f200 809a 	bhi.w	80a12bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2e4>
 80a1188:	4b6d      	ldr	r3, [pc, #436]	; (80a1340 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x368>)
 80a118a:	429c      	cmp	r4, r3
 80a118c:	f000 80a7 	beq.w	80a12de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x306>
 80a1190:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80a1194:	3303      	adds	r3, #3
 80a1196:	429c      	cmp	r4, r3
 80a1198:	d129      	bne.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
 80a119a:	4638      	mov	r0, r7
 80a119c:	f107 0114 	add.w	r1, r7, #20
 80a11a0:	f002 fa55 	bl	80a364e <BlynkWidgetWrite>
 80a11a4:	e023      	b.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
    switch (hdr.type)
 80a11a6:	2b29      	cmp	r3, #41	; 0x29
 80a11a8:	d023      	beq.n	80a11f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21a>
 80a11aa:	2b37      	cmp	r3, #55	; 0x37
 80a11ac:	f000 80a9 	beq.w	80a1302 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x32a>
 80a11b0:	2b1d      	cmp	r3, #29
 80a11b2:	d1c7      	bne.n	80a1144 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
        if (state == CONNECTING) {
 80a11b4:	7f63      	ldrb	r3, [r4, #29]
 80a11b6:	b97b      	cbnz	r3, 80a11d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x200>
            BLYNK_LOG1(BLYNK_F("Ready"));
 80a11b8:	f7ff fb9a 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a11bc:	f003 ffb8 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a11c0:	4960      	ldr	r1, [pc, #384]	; (80a1344 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x36c>)
 80a11c2:	f003 f9e4 	bl	80a458e <_ZN5Print7printlnEPKc>
            state = CONNECTED;
 80a11c6:	2301      	movs	r3, #1
            this->sendInfo();
 80a11c8:	4620      	mov	r0, r4
            state = CONNECTED;
 80a11ca:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
 80a11cc:	f000 fdae 	bl	80a1d2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
 80a11d0:	f7ff fbbe 	bl	80a0950 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
 80a11d4:	f002 fa3c 	bl	80a3650 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a11d8:	2300      	movs	r3, #0
 80a11da:	21c8      	movs	r1, #200	; 0xc8
 80a11dc:	f8b7 2005 	ldrh.w	r2, [r7, #5]
 80a11e0:	4620      	mov	r0, r4
 80a11e2:	9100      	str	r1, [sp, #0]
 80a11e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a11e8:	4619      	mov	r1, r3
 80a11ea:	f000 f965 	bl	80a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    return true;
 80a11ee:	2001      	movs	r0, #1
 80a11f0:	e00d      	b.n	80a120e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x236>
        if (!redir_serv) {
 80a11f2:	68a3      	ldr	r3, [r4, #8]
 80a11f4:	b91b      	cbnz	r3, 80a11fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x226>
             redir_serv = (char*)malloc(32);
 80a11f6:	2020      	movs	r0, #32
 80a11f8:	f002 fd18 	bl	80a3c2c <malloc>
 80a11fc:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
 80a11fe:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
 80a1202:	44a8      	add	r8, r5
        if (it >= param.end())
 80a1204:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a1206:	e9c7 5805 	strd	r5, r8, [r7, #20]
 80a120a:	d302      	bcc.n	80a1212 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
            return false;
 80a120c:	2000      	movs	r0, #0
 80a120e:	46b5      	mov	sp, r6
 80a1210:	e6f1      	b.n	80a0ff6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e>
        strncpy(redir_serv, it.asStr(), 32);
 80a1212:	4629      	mov	r1, r5
        redir_serv[31] = '\0';
 80a1214:	2500      	movs	r5, #0
        strncpy(redir_serv, it.asStr(), 32);
 80a1216:	2220      	movs	r2, #32
 80a1218:	68a0      	ldr	r0, [r4, #8]
 80a121a:	f005 fe56 	bl	80a6eca <strncpy>
        redir_serv[31] = '\0';
 80a121e:	68a3      	ldr	r3, [r4, #8]
        if (++it < param.end())
 80a1220:	f107 0014 	add.w	r0, r7, #20
        redir_serv[31] = '\0';
 80a1224:	77dd      	strb	r5, [r3, #31]
        if (++it < param.end())
 80a1226:	f7ff fba9 	bl	80a097c <_ZN10BlynkParam8iteratorppEv>
 80a122a:	6803      	ldr	r3, [r0, #0]
 80a122c:	4598      	cmp	r8, r3
 80a122e:	d936      	bls.n	80a129e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c6>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a1230:	6978      	ldr	r0, [r7, #20]
 80a1232:	b120      	cbz	r0, 80a123e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x266>
 80a1234:	69bb      	ldr	r3, [r7, #24]
 80a1236:	4298      	cmp	r0, r3
 80a1238:	d22f      	bcs.n	80a129a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c2>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a123a:	f005 fcb5 	bl	80a6ba8 <atol>
            redir_port = it.asLong();
 80a123e:	b285      	uxth	r5, r0
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
 80a1240:	f7ff fb56 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a1244:	f003 ff74 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1248:	493f      	ldr	r1, [pc, #252]	; (80a1348 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x370>)
 80a124a:	f003 f98d 	bl	80a4568 <_ZN5Print5printEPKc>
 80a124e:	f003 ff6f 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1252:	68a1      	ldr	r1, [r4, #8]
 80a1254:	f003 f988 	bl	80a4568 <_ZN5Print5printEPKc>
 80a1258:	f003 ff6a 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a125c:	213a      	movs	r1, #58	; 0x3a
 80a125e:	f003 f987 	bl	80a4570 <_ZN5Print5printEc>
 80a1262:	f003 ff65 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1266:	4680      	mov	r8, r0
        return printNumber(val, base) + t;
 80a1268:	220a      	movs	r2, #10
 80a126a:	4629      	mov	r1, r5
 80a126c:	f003 f999 	bl	80a45a2 <_ZN5Print11printNumberEmh>
        n += println();
 80a1270:	4640      	mov	r0, r8
 80a1272:	f003 f980 	bl	80a4576 <_ZN5Print7printlnEv>
    void disconnect() { client.stop(); }
 80a1276:	6820      	ldr	r0, [r4, #0]
 80a1278:	f002 ff74 	bl	80a4164 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
 80a127c:	6823      	ldr	r3, [r4, #0]
 80a127e:	68a2      	ldr	r2, [r4, #8]
        port = p;
 80a1280:	871d      	strh	r5, [r3, #56]	; 0x38
        domain = d;
 80a1282:	635a      	str	r2, [r3, #52]	; 0x34
        state = CONNECTING;
 80a1284:	2300      	movs	r3, #0
 80a1286:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a1288:	f002 f9de 	bl	80a3648 <_Z11BlynkMillisv>
 80a128c:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a1290:	3808      	subs	r0, #8
 80a1292:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80a1296:	6160      	str	r0, [r4, #20]
 80a1298:	e7a9      	b.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
 80a129a:	4628      	mov	r0, r5
 80a129c:	e7cf      	b.n	80a123e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x266>
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
 80a129e:	2550      	movs	r5, #80	; 0x50
 80a12a0:	e7ce      	b.n	80a1240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x268>
        msgIdOutOverride = hdr.msg_id;
 80a12a2:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
 80a12a4:	4629      	mov	r1, r5
        msgIdOutOverride = hdr.msg_id;
 80a12a6:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80a12aa:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
 80a12ac:	4620      	mov	r0, r4
 80a12ae:	f8b7 2007 	ldrh.w	r2, [r7, #7]
 80a12b2:	f7ff fd83 	bl	80a0dbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
 80a12b6:	2300      	movs	r3, #0
 80a12b8:	8363      	strh	r3, [r4, #26]
 80a12ba:	e798      	b.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
 80a12bc:	4b23      	ldr	r3, [pc, #140]	; (80a134c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x374>)
 80a12be:	429c      	cmp	r4, r3
 80a12c0:	d013      	beq.n	80a12ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x312>
 80a12c2:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
 80a12c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80a12ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80a12ce:	429c      	cmp	r4, r3
 80a12d0:	d18d      	bne.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
 80a12d2:	4638      	mov	r0, r7
 80a12d4:	f107 0114 	add.w	r1, r7, #20
 80a12d8:	f002 f9b9 	bl	80a364e <BlynkWidgetWrite>
 80a12dc:	e787      	b.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
 80a12de:	4638      	mov	r0, r7
 80a12e0:	f107 0114 	add.w	r1, r7, #20
 80a12e4:	f002 f9b3 	bl	80a364e <BlynkWidgetWrite>
 80a12e8:	e781      	b.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
 80a12ea:	4638      	mov	r0, r7
 80a12ec:	f107 0114 	add.w	r1, r7, #20
 80a12f0:	f002 f9ad 	bl	80a364e <BlynkWidgetWrite>
 80a12f4:	e77b      	b.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
 80a12f6:	4638      	mov	r0, r7
 80a12f8:	f107 0114 	add.w	r1, r7, #20
 80a12fc:	f002 f9a7 	bl	80a364e <BlynkWidgetWrite>
 80a1300:	e775      	b.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
        if (hdr.length) {
 80a1302:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a1306:	2b00      	cmp	r3, #0
 80a1308:	f43f af71 	beq.w	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
 80a130c:	f7ff faf0 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a1310:	f003 ff0e 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1314:	490e      	ldr	r1, [pc, #56]	; (80a1350 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x378>)
 80a1316:	f003 f927 	bl	80a4568 <_ZN5Print5printEPKc>
 80a131a:	f003 ff09 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a131e:	4629      	mov	r1, r5
 80a1320:	f003 f935 	bl	80a458e <_ZN5Print7printlnEPKc>
 80a1324:	e763      	b.n	80a11ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x216>
 80a1326:	bf00      	nop
 80a1328:	080a7c0a 	.word	0x080a7c0a
 80a132c:	080a7c18 	.word	0x080a7c18
 80a1330:	080a7c1d 	.word	0x080a7c1d
 80a1334:	080a7c30 	.word	0x080a7c30
 80a1338:	080a7c47 	.word	0x080a7c47
 80a133c:	6174656d 	.word	0x6174656d
 80a1340:	0061746f 	.word	0x0061746f
 80a1344:	080a7c58 	.word	0x080a7c58
 80a1348:	080a7c5e 	.word	0x080a7c5e
 80a134c:	6e6f6361 	.word	0x6e6f6361
 80a1350:	080a7c6e 	.word	0x080a7c6e

080a1354 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
 80a1354:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1356:	4604      	mov	r4, r0
 80a1358:	b085      	sub	sp, #20
 80a135a:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
 80a135c:	f7ff faf8 	bl	80a0950 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
 80a1360:	7f63      	ldrb	r3, [r4, #29]
 80a1362:	2b02      	cmp	r3, #2
 80a1364:	d01e      	beq.n	80a13a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
 80a1366:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
 80a1368:	8b62      	ldrh	r2, [r4, #26]
 80a136a:	3301      	adds	r3, #1
 80a136c:	b2db      	uxtb	r3, r3
 80a136e:	7723      	strb	r3, [r4, #28]
 80a1370:	b9aa      	cbnz	r2, 80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
 80a1372:	2b02      	cmp	r3, #2
 80a1374:	d813      	bhi.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a1376:	6820      	ldr	r0, [r4, #0]
 80a1378:	f002 ff4b 	bl	80a4212 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
 80a137c:	b1a0      	cbz	r0, 80a13a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x54>
        while (avail || conn.available() > 0) {
 80a137e:	b925      	cbnz	r5, 80a138a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x36>
    int available() { return client.available(); }
 80a1380:	6820      	ldr	r0, [r4, #0]
 80a1382:	f002 feb5 	bl	80a40f0 <_ZN9TCPClient9availableEv>
 80a1386:	2800      	cmp	r0, #0
 80a1388:	dd0e      	ble.n	80a13a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x54>
            if (!processInput()) {
 80a138a:	4620      	mov	r0, r4
 80a138c:	f7ff fe24 	bl	80a0fd8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
 80a1390:	2800      	cmp	r0, #0
 80a1392:	d1f5      	bne.n	80a1380 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2c>
    void disconnect() { client.stop(); }
 80a1394:	6820      	ldr	r0, [r4, #0]
 80a1396:	f002 fee5 	bl	80a4164 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
 80a139a:	f002 f959 	bl	80a3650 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
 80a139e:	7f23      	ldrb	r3, [r4, #28]
 80a13a0:	3b01      	subs	r3, #1
 80a13a2:	7723      	strb	r3, [r4, #28]
}
 80a13a4:	b005      	add	sp, #20
 80a13a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const millis_time_t t = BlynkMillis();
 80a13a8:	f002 f94e 	bl	80a3648 <_Z11BlynkMillisv>
 80a13ac:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
 80a13ae:	6820      	ldr	r0, [r4, #0]
 80a13b0:	f002 ff2f 	bl	80a4212 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
 80a13b4:	7f67      	ldrb	r7, [r4, #29]
 80a13b6:	4606      	mov	r6, r0
 80a13b8:	2f01      	cmp	r7, #1
 80a13ba:	d12c      	bne.n	80a1416 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xc2>
        if (!tconn) {
 80a13bc:	b920      	cbnz	r0, 80a13c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x74>
            lastHeartbeat = t;
 80a13be:	6165      	str	r5, [r4, #20]
            internalReconnect();
 80a13c0:	4620      	mov	r0, r4
 80a13c2:	f7ff fcf1 	bl	80a0da8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a13c6:	e7ea      	b.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
 80a13c8:	f644 2238 	movw	r2, #19000	; 0x4a38
 80a13cc:	68e3      	ldr	r3, [r4, #12]
 80a13ce:	1aeb      	subs	r3, r5, r3
 80a13d0:	4293      	cmp	r3, r2
 80a13d2:	d907      	bls.n	80a13e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x90>
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
 80a13d4:	f7ff fa8c 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a13d8:	f003 feaa 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a13dc:	4927      	ldr	r1, [pc, #156]	; (80a147c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x128>)
 80a13de:	f003 f8d6 	bl	80a458e <_ZN5Print7printlnEPKc>
 80a13e2:	e7ed      	b.n	80a13c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x6c>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a13e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80a13e8:	4293      	cmp	r3, r2
 80a13ea:	d803      	bhi.n	80a13f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xa0>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a13ec:	6923      	ldr	r3, [r4, #16]
 80a13ee:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a13f0:	4293      	cmp	r3, r2
 80a13f2:	d9d4      	bls.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a13f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
 80a13f8:	6963      	ldr	r3, [r4, #20]
 80a13fa:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a13fc:	4293      	cmp	r3, r2
 80a13fe:	d9ce      	bls.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
            sendCmd(BLYNK_CMD_PING);
 80a1400:	2300      	movs	r3, #0
 80a1402:	2106      	movs	r1, #6
 80a1404:	461a      	mov	r2, r3
 80a1406:	4620      	mov	r0, r4
 80a1408:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a140c:	9300      	str	r3, [sp, #0]
 80a140e:	f000 f853 	bl	80a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
 80a1412:	6165      	str	r5, [r4, #20]
                return false;
 80a1414:	e7c3      	b.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
    } else if (state == CONNECTING) {
 80a1416:	2f00      	cmp	r7, #0
 80a1418:	d1c1      	bne.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
 80a141a:	6963      	ldr	r3, [r4, #20]
 80a141c:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
 80a141e:	b178      	cbz	r0, 80a1440 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xec>
 80a1420:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a1424:	4293      	cmp	r3, r2
 80a1426:	d9ba      	bls.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
 80a1428:	f7ff fa62 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a142c:	f003 fe80 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1430:	4913      	ldr	r1, [pc, #76]	; (80a1480 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12c>)
 80a1432:	f003 f8ac 	bl	80a458e <_ZN5Print7printlnEPKc>
    void disconnect() { client.stop(); }
 80a1436:	6820      	ldr	r0, [r4, #0]
 80a1438:	f002 fe94 	bl	80a4164 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
 80a143c:	7767      	strb	r7, [r4, #29]
            return false;
 80a143e:	e7ae      	b.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
 80a1440:	f241 3288 	movw	r2, #5000	; 0x1388
 80a1444:	4293      	cmp	r3, r2
 80a1446:	d9aa      	bls.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
 80a1448:	6820      	ldr	r0, [r4, #0]
 80a144a:	f002 fe8b 	bl	80a4164 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
 80a144e:	6820      	ldr	r0, [r4, #0]
 80a1450:	f7ff fae4 	bl	80a0a1c <_ZN22BlynkTransportParticle7connectEv>
 80a1454:	2800      	cmp	r0, #0
 80a1456:	d0dc      	beq.n	80a1412 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xbe>
            msgIdOut = 1;
 80a1458:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a145a:	6867      	ldr	r7, [r4, #4]
            msgIdOut = 1;
 80a145c:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a145e:	4638      	mov	r0, r7
 80a1460:	f005 fd17 	bl	80a6e92 <strlen>
 80a1464:	463b      	mov	r3, r7
 80a1466:	9000      	str	r0, [sp, #0]
 80a1468:	462a      	mov	r2, r5
 80a146a:	211d      	movs	r1, #29
 80a146c:	4620      	mov	r0, r4
 80a146e:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80a1472:	f000 f821 	bl	80a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
 80a1476:	6923      	ldr	r3, [r4, #16]
 80a1478:	6163      	str	r3, [r4, #20]
            return true;
 80a147a:	e790      	b.n	80a139e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4a>
 80a147c:	080a7c77 	.word	0x080a7c77
 80a1480:	080a7c89 	.word	0x080a7c89

080a1484 <_Z7myDelayi>:
{
 80a1484:	b570      	push	{r4, r5, r6, lr}
for (int i = 0; i<(20*seconds); i++)
 80a1486:	2514      	movs	r5, #20
 80a1488:	2400      	movs	r4, #0
 80a148a:	4345      	muls	r5, r0
    Blynk.run();  
 80a148c:	4e06      	ldr	r6, [pc, #24]	; (80a14a8 <_Z7myDelayi+0x24>)
for (int i = 0; i<(20*seconds); i++)
 80a148e:	42a5      	cmp	r5, r4
 80a1490:	dd08      	ble.n	80a14a4 <_Z7myDelayi+0x20>
    delay(50);
 80a1492:	2032      	movs	r0, #50	; 0x32
 80a1494:	f003 fa00 	bl	80a4898 <delay>
    Blynk.run();  
 80a1498:	2100      	movs	r1, #0
 80a149a:	4630      	mov	r0, r6
 80a149c:	f7ff ff5a 	bl	80a1354 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
for (int i = 0; i<(20*seconds); i++)
 80a14a0:	3401      	adds	r4, #1
 80a14a2:	e7f4      	b.n	80a148e <_Z7myDelayi+0xa>
}
 80a14a4:	bd70      	pop	{r4, r5, r6, pc}
 80a14a6:	bf00      	nop
 80a14a8:	200001ac 	.word	0x200001ac

080a14ac <_Z9run_blynkv>:
  Blynk.run();
 80a14ac:	2100      	movs	r1, #0
 80a14ae:	4801      	ldr	r0, [pc, #4]	; (80a14b4 <_Z9run_blynkv+0x8>)
 80a14b0:	f7ff bf50 	b.w	80a1354 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
 80a14b4:	200001ac 	.word	0x200001ac

080a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a14b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a14bc:	b083      	sub	sp, #12
 80a14be:	4604      	mov	r4, r0
 80a14c0:	af00      	add	r7, sp, #0
    bool connected() { return client.connected(); }
 80a14c2:	6800      	ldr	r0, [r0, #0]
 80a14c4:	4688      	mov	r8, r1
 80a14c6:	4616      	mov	r6, r2
 80a14c8:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
 80a14ca:	46eb      	mov	fp, sp
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a14cc:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80a14ce:	f002 fea0 	bl	80a4212 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
 80a14d2:	2800      	cmp	r0, #0
 80a14d4:	d07f      	beq.n	80a15d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
 80a14d6:	f1b8 0f1d 	cmp.w	r8, #29
 80a14da:	d804      	bhi.n	80a14e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
 80a14dc:	4b4c      	ldr	r3, [pc, #304]	; (80a1610 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
 80a14de:	fa23 f308 	lsr.w	r3, r3, r8
 80a14e2:	07db      	lsls	r3, r3, #31
 80a14e4:	d402      	bmi.n	80a14ec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
 80a14e6:	7f63      	ldrb	r3, [r4, #29]
 80a14e8:	2b01      	cmp	r3, #1
 80a14ea:	d174      	bne.n	80a15d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
 80a14ec:	b946      	cbnz	r6, 80a1500 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
 80a14ee:	8b66      	ldrh	r6, [r4, #26]
 80a14f0:	b936      	cbnz	r6, 80a1500 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
 80a14f2:	8b23      	ldrh	r3, [r4, #24]
 80a14f4:	3301      	adds	r3, #1
 80a14f6:	b29b      	uxth	r3, r3
 80a14f8:	2b00      	cmp	r3, #0
 80a14fa:	d071      	beq.n	80a15e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
 80a14fc:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
 80a14fe:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
 80a1500:	f1a8 030c 	sub.w	r3, r8, #12
 80a1504:	2b08      	cmp	r3, #8
 80a1506:	d816      	bhi.n	80a1536 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
 80a1508:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80a150c:	4293      	cmp	r3, r2
 80a150e:	bf38      	it	cc
 80a1510:	4613      	movcc	r3, r2
 80a1512:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
 80a1516:	f002 f897 	bl	80a3648 <_Z11BlynkMillisv>
 80a151a:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
 80a151e:	2800      	cmp	r0, #0
 80a1520:	db60      	blt.n	80a15e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
 80a1522:	2100      	movs	r1, #0
 80a1524:	4620      	mov	r0, r4
 80a1526:	f7ff ff15 	bl	80a1354 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
 80a152a:	f002 f88d 	bl	80a3648 <_Z11BlynkMillisv>
 80a152e:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
 80a1532:	2800      	cmp	r0, #0
 80a1534:	daf5      	bge.n	80a1522 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a1536:	f1b9 0f00 	cmp.w	r9, #0
 80a153a:	d05a      	beq.n	80a15f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
 80a153c:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
 80a153e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    hdr->msg_id = htons(id);
 80a1540:	ba76      	rev16	r6, r6
                               (data2 ? length2 : 0);
 80a1542:	2a00      	cmp	r2, #0
 80a1544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a1546:	bf08      	it	eq
 80a1548:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a154a:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
 80a154e:	f10a 0307 	add.w	r3, sl, #7
 80a1552:	f023 0307 	bic.w	r3, r3, #7
 80a1556:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
 80a155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
 80a155c:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
 80a1560:	18ea      	adds	r2, r5, r3
 80a1562:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80a1566:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
 80a156a:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
 80a156e:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
 80a1572:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
 80a1576:	f1b9 0f00 	cmp.w	r9, #0
 80a157a:	d03c      	beq.n	80a15f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
 80a157c:	2d00      	cmp	r5, #0
 80a157e:	d03a      	beq.n	80a15f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
 80a1580:	462a      	mov	r2, r5
 80a1582:	4649      	mov	r1, r9
 80a1584:	f10d 0005 	add.w	r0, sp, #5
 80a1588:	f005 fc12 	bl	80a6db0 <memcpy>
        pos += length;
 80a158c:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
 80a158e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a1590:	b13b      	cbz	r3, 80a15a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
 80a1592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a1594:	b12b      	cbz	r3, 80a15a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
 80a1596:	461a      	mov	r2, r3
 80a1598:	687b      	ldr	r3, [r7, #4]
 80a159a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80a159c:	4418      	add	r0, r3
 80a159e:	f005 fc07 	bl	80a6db0 <memcpy>
    size_t pos = sizeof(BlynkHeader);
 80a15a2:	2500      	movs	r5, #0
    while (wlen < full_length) {
 80a15a4:	4555      	cmp	r5, sl
 80a15a6:	d22a      	bcs.n	80a15fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
 80a15a8:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
 80a15ac:	687b      	ldr	r3, [r7, #4]
 80a15ae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80a15b2:	bf28      	it	cs
 80a15b4:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80a15b8:	6820      	ldr	r0, [r4, #0]
 80a15ba:	1959      	adds	r1, r3, r5
 80a15bc:	f002 fc5d 	bl	80a3e7a <_ZN9TCPClient5writeEPKhj>
 80a15c0:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
 80a15c2:	2000      	movs	r0, #0
 80a15c4:	f002 f83e 	bl	80a3644 <_Z10BlynkDelaym>
        if (w == 0) {
 80a15c8:	b9be      	cbnz	r6, 80a15fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
 80a15ca:	6820      	ldr	r0, [r4, #0]
 80a15cc:	f002 fdca 	bl	80a4164 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
 80a15d0:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
 80a15d2:	f002 f83d 	bl	80a3650 <BlynkNoOpCbk>
 80a15d6:	46dd      	mov	sp, fp
}
 80a15d8:	370c      	adds	r7, #12
 80a15da:	46bd      	mov	sp, r7
 80a15dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
 80a15e0:	2301      	movs	r3, #1
 80a15e2:	e78b      	b.n	80a14fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
 80a15e4:	7f21      	ldrb	r1, [r4, #28]
 80a15e6:	2900      	cmp	r1, #0
 80a15e8:	d1a5      	bne.n	80a1536 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
 80a15ea:	4620      	mov	r0, r4
 80a15ec:	f7ff feb2 	bl	80a1354 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
 80a15f0:	e7a1      	b.n	80a1536 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a15f2:	2305      	movs	r3, #5
 80a15f4:	e7a3      	b.n	80a153e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
 80a15f6:	2005      	movs	r0, #5
 80a15f8:	e7c9      	b.n	80a158e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
 80a15fa:	4435      	add	r5, r6
    while (wlen < full_length) {
 80a15fc:	e7d2      	b.n	80a15a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
 80a15fe:	d003      	beq.n	80a1608 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
 80a1600:	4620      	mov	r0, r4
 80a1602:	f7ff fbd1 	bl	80a0da8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
 80a1606:	e7e6      	b.n	80a15d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
 80a1608:	f002 f81e 	bl	80a3648 <_Z11BlynkMillisv>
 80a160c:	6120      	str	r0, [r4, #16]
 80a160e:	e7e2      	b.n	80a15d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
 80a1610:	20000045 	.word	0x20000045

080a1614 <_ZN14WidgetTerminal5flushEv>:
    virtual void flush() {
 80a1614:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (mOutQty) {
 80a1616:	f890 6049 	ldrb.w	r6, [r0, #73]	; 0x49
    virtual void flush() {
 80a161a:	4604      	mov	r4, r0
 80a161c:	b08b      	sub	sp, #44	; 0x2c
        if (mOutQty) {
 80a161e:	b1e6      	cbz	r6, 80a165a <_ZN14WidgetTerminal5flushEv+0x46>
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a1620:	ab05      	add	r3, sp, #20
 80a1622:	2500      	movs	r5, #0
 80a1624:	9307      	str	r3, [sp, #28]
 80a1626:	2308      	movs	r3, #8
            Blynk.virtualWriteBinary(mPin, mOutBuf, mOutQty);
 80a1628:	7a07      	ldrb	r7, [r0, #8]
     * @param len  Length of data
     */
    void virtualWriteBinary(int pin, const void* buff, size_t len) {
        char mem[8];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
 80a162a:	490d      	ldr	r1, [pc, #52]	; (80a1660 <_ZN14WidgetTerminal5flushEv+0x4c>)
 80a162c:	a807      	add	r0, sp, #28
 80a162e:	e9cd 5308 	strd	r5, r3, [sp, #32]
 80a1632:	f7ff f9b2 	bl	80a099a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a1636:	4639      	mov	r1, r7
 80a1638:	a807      	add	r0, sp, #28
 80a163a:	f7ff f9cb 	bl	80a09d4 <_ZN10BlynkParam3addEi>
 80a163e:	f104 0309 	add.w	r3, r4, #9
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength(), buff, len);
 80a1642:	9301      	str	r3, [sp, #4]
 80a1644:	9b08      	ldr	r3, [sp, #32]
 80a1646:	462a      	mov	r2, r5
 80a1648:	9300      	str	r3, [sp, #0]
 80a164a:	2114      	movs	r1, #20
 80a164c:	9b07      	ldr	r3, [sp, #28]
 80a164e:	4805      	ldr	r0, [pc, #20]	; (80a1664 <_ZN14WidgetTerminal5flushEv+0x50>)
 80a1650:	9602      	str	r6, [sp, #8]
 80a1652:	f7ff ff31 	bl	80a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            mOutQty = 0;
 80a1656:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
    }
 80a165a:	b00b      	add	sp, #44	; 0x2c
 80a165c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a165e:	bf00      	nop
 80a1660:	080a7c97 	.word	0x080a7c97
 80a1664:	200001ac 	.word	0x200001ac

080a1668 <_Z7printlnPc>:
{
 80a1668:	b510      	push	{r4, lr}
 80a166a:	4604      	mov	r4, r0
  timeStamp();
 80a166c:	f7ff fb4a 	bl	80a0d04 <_Z9timeStampv>
  Serial.println(text);
 80a1670:	f003 fd5e 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1674:	4621      	mov	r1, r4
 80a1676:	f002 ff8a 	bl	80a458e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a167a:	4b06      	ldr	r3, [pc, #24]	; (80a1694 <_Z7printlnPc+0x2c>)
 80a167c:	681b      	ldr	r3, [r3, #0]
 80a167e:	2b01      	cmp	r3, #1
 80a1680:	d106      	bne.n	80a1690 <_Z7printlnPc+0x28>
    terminal.println(text); // Ausgabe an BLYNK APP terminal
 80a1682:	4621      	mov	r1, r4
 80a1684:	4804      	ldr	r0, [pc, #16]	; (80a1698 <_Z7printlnPc+0x30>)
 80a1686:	f002 ff82 	bl	80a458e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a168a:	4803      	ldr	r0, [pc, #12]	; (80a1698 <_Z7printlnPc+0x30>)
 80a168c:	f7ff ffc2 	bl	80a1614 <_ZN14WidgetTerminal5flushEv>
}
 80a1690:	bd10      	pop	{r4, pc}
 80a1692:	bf00      	nop
 80a1694:	2000036c 	.word	0x2000036c
 80a1698:	20000370 	.word	0x20000370

080a169c <_Z4helpv>:
{
 80a169c:	b508      	push	{r3, lr}
  println(" Hello ");
 80a169e:	4811      	ldr	r0, [pc, #68]	; (80a16e4 <_Z4helpv+0x48>)
 80a16a0:	f7ff ffe2 	bl	80a1668 <_Z7printlnPc>
  println(" a : Status");
 80a16a4:	4810      	ldr	r0, [pc, #64]	; (80a16e8 <_Z4helpv+0x4c>)
 80a16a6:	f7ff ffdf 	bl	80a1668 <_Z7printlnPc>
  println(" b : Blumen giessen");
 80a16aa:	4810      	ldr	r0, [pc, #64]	; (80a16ec <_Z4helpv+0x50>)
 80a16ac:	f7ff ffdc 	bl	80a1668 <_Z7printlnPc>
  println(" d : Zeitdauer Giessen verringern");
 80a16b0:	480f      	ldr	r0, [pc, #60]	; (80a16f0 <_Z4helpv+0x54>)
 80a16b2:	f7ff ffd9 	bl	80a1668 <_Z7printlnPc>
  println(" i : Zeitdauer Giessen erhoehen");
 80a16b6:	480f      	ldr	r0, [pc, #60]	; (80a16f4 <_Z4helpv+0x58>)
 80a16b8:	f7ff ffd6 	bl	80a1668 <_Z7printlnPc>
  println(" s : sleep enabled ");
 80a16bc:	480e      	ldr	r0, [pc, #56]	; (80a16f8 <_Z4helpv+0x5c>)
 80a16be:	f7ff ffd3 	bl	80a1668 <_Z7printlnPc>
  println(" p : sleep disabled ");
 80a16c2:	480e      	ldr	r0, [pc, #56]	; (80a16fc <_Z4helpv+0x60>)
 80a16c4:	f7ff ffd0 	bl	80a1668 <_Z7printlnPc>
  println(" u : clear reserve repetition counter ");  
 80a16c8:	480d      	ldr	r0, [pc, #52]	; (80a1700 <_Z4helpv+0x64>)
 80a16ca:	f7ff ffcd 	bl	80a1668 <_Z7printlnPc>
  println(" w : store config to EEPROM ");
 80a16ce:	480d      	ldr	r0, [pc, #52]	; (80a1704 <_Z4helpv+0x68>)
 80a16d0:	f7ff ffca 	bl	80a1668 <_Z7printlnPc>
  println(" y : goto sleep ");  
 80a16d4:	480c      	ldr	r0, [pc, #48]	; (80a1708 <_Z4helpv+0x6c>)
 80a16d6:	f7ff ffc7 	bl	80a1668 <_Z7printlnPc>
}
 80a16da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  println(" x : ultra sonic measurement ");
 80a16de:	480b      	ldr	r0, [pc, #44]	; (80a170c <_Z4helpv+0x70>)
 80a16e0:	f7ff bfc2 	b.w	80a1668 <_Z7printlnPc>
 80a16e4:	080a7c9a 	.word	0x080a7c9a
 80a16e8:	080a7ca2 	.word	0x080a7ca2
 80a16ec:	080a7cae 	.word	0x080a7cae
 80a16f0:	080a7cc2 	.word	0x080a7cc2
 80a16f4:	080a7ce4 	.word	0x080a7ce4
 80a16f8:	080a7d04 	.word	0x080a7d04
 80a16fc:	080a7d18 	.word	0x080a7d18
 80a1700:	080a7d2d 	.word	0x080a7d2d
 80a1704:	080a7d54 	.word	0x080a7d54
 80a1708:	080a7d71 	.word	0x080a7d71
 80a170c:	080a7d82 	.word	0x080a7d82

080a1710 <BlynkWidgetWrite13>:
{
 80a1710:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1712:	6808      	ldr	r0, [r1, #0]
 80a1714:	f7ff f8e9 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a1718:	2801      	cmp	r0, #1
 80a171a:	d10d      	bne.n	80a1738 <BlynkWidgetWrite13+0x28>
    println(" Terminal disabled  ");
 80a171c:	4807      	ldr	r0, [pc, #28]	; (80a173c <BlynkWidgetWrite13+0x2c>)
 80a171e:	f7ff ffa3 	bl	80a1668 <_Z7printlnPc>
    termEnabled = 0;
 80a1722:	2300      	movs	r3, #0
 80a1724:	4a06      	ldr	r2, [pc, #24]	; (80a1740 <BlynkWidgetWrite13+0x30>)
    WriteToDatabase("CONTROL","TERMINAL disabled by Blynk Button");
 80a1726:	4907      	ldr	r1, [pc, #28]	; (80a1744 <BlynkWidgetWrite13+0x34>)
    termEnabled = 0;
 80a1728:	6013      	str	r3, [r2, #0]
    termCounter = 0;
 80a172a:	4a07      	ldr	r2, [pc, #28]	; (80a1748 <BlynkWidgetWrite13+0x38>)
    WriteToDatabase("CONTROL","TERMINAL disabled by Blynk Button");
 80a172c:	4807      	ldr	r0, [pc, #28]	; (80a174c <BlynkWidgetWrite13+0x3c>)
    termCounter = 0;
 80a172e:	6013      	str	r3, [r2, #0]
}
 80a1730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WriteToDatabase("CONTROL","TERMINAL disabled by Blynk Button");
 80a1734:	f7fe bce2 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
}
 80a1738:	bd08      	pop	{r3, pc}
 80a173a:	bf00      	nop
 80a173c:	080a7da0 	.word	0x080a7da0
 80a1740:	2000036c 	.word	0x2000036c
 80a1744:	080a7db5 	.word	0x080a7db5
 80a1748:	20000368 	.word	0x20000368
 80a174c:	080a7b9b 	.word	0x080a7b9b

080a1750 <BlynkWidgetWrite25>:

BLYNK_WRITE(V25)
{
 80a1750:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1752:	6808      	ldr	r0, [r1, #0]
 80a1754:	f7ff f8c9 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a1758:	2801      	cmp	r0, #1
 80a175a:	d111      	bne.n	80a1780 <BlynkWidgetWrite25+0x30>
  {
    control.dontSleepSW = 1;
 80a175c:	4c09      	ldr	r4, [pc, #36]	; (80a1784 <BlynkWidgetWrite25+0x34>)
 80a175e:	6060      	str	r0, [r4, #4]
    EEPROM.put(0, control);
 80a1760:	f003 ffba 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a1764:	4621      	mov	r1, r4
 80a1766:	2214      	movs	r2, #20
 80a1768:	2000      	movs	r0, #0
 80a176a:	f002 f80f 	bl	80a378c <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "SLEEP DISABLED BY BLYNK BUTTON ");
 80a176e:	4806      	ldr	r0, [pc, #24]	; (80a1788 <BlynkWidgetWrite25+0x38>)
 80a1770:	4906      	ldr	r1, [pc, #24]	; (80a178c <BlynkWidgetWrite25+0x3c>)
 80a1772:	f7fe fcc3 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Sleep Mode Disabled by blynk button ");
  }
}
 80a1776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    println(" Sleep Mode Disabled by blynk button ");
 80a177a:	4805      	ldr	r0, [pc, #20]	; (80a1790 <BlynkWidgetWrite25+0x40>)
 80a177c:	f7ff bf74 	b.w	80a1668 <_Z7printlnPc>
}
 80a1780:	bd10      	pop	{r4, pc}
 80a1782:	bf00      	nop
 80a1784:	20000314 	.word	0x20000314
 80a1788:	080a7b9b 	.word	0x080a7b9b
 80a178c:	080a7dd7 	.word	0x080a7dd7
 80a1790:	080a7df7 	.word	0x080a7df7

080a1794 <BlynkWidgetWrite26>:

BLYNK_WRITE(V26)
{
 80a1794:	b538      	push	{r3, r4, r5, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1796:	6808      	ldr	r0, [r1, #0]
 80a1798:	f7ff f8a7 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a179c:	2801      	cmp	r0, #1
 80a179e:	d112      	bne.n	80a17c6 <BlynkWidgetWrite26+0x32>
  {
    control.dontSleepSW = 0;
 80a17a0:	2400      	movs	r4, #0
 80a17a2:	4d09      	ldr	r5, [pc, #36]	; (80a17c8 <BlynkWidgetWrite26+0x34>)
 80a17a4:	606c      	str	r4, [r5, #4]
    EEPROM.put(0, control);
 80a17a6:	f003 ff97 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a17aa:	4629      	mov	r1, r5
 80a17ac:	4620      	mov	r0, r4
 80a17ae:	2214      	movs	r2, #20
 80a17b0:	f001 ffec 	bl	80a378c <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "SLEEP ENABLED BY BLYNK BUTTON ");
 80a17b4:	4805      	ldr	r0, [pc, #20]	; (80a17cc <BlynkWidgetWrite26+0x38>)
 80a17b6:	4906      	ldr	r1, [pc, #24]	; (80a17d0 <BlynkWidgetWrite26+0x3c>)
 80a17b8:	f7fe fca0 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Sleep Mode Enabled by blynk button ");
  }
}
 80a17bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    println(" Sleep Mode Enabled by blynk button ");
 80a17c0:	4804      	ldr	r0, [pc, #16]	; (80a17d4 <BlynkWidgetWrite26+0x40>)
 80a17c2:	f7ff bf51 	b.w	80a1668 <_Z7printlnPc>
}
 80a17c6:	bd38      	pop	{r3, r4, r5, pc}
 80a17c8:	20000314 	.word	0x20000314
 80a17cc:	080a7b9b 	.word	0x080a7b9b
 80a17d0:	080a7e1d 	.word	0x080a7e1d
 80a17d4:	080a7e3c 	.word	0x080a7e3c

080a17d8 <BlynkWidgetWrite27>:

BLYNK_WRITE(V27)
{
 80a17d8:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a17da:	6808      	ldr	r0, [r1, #0]
 80a17dc:	f7ff f885 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a17e0:	2801      	cmp	r0, #1
 80a17e2:	d10b      	bne.n	80a17fc <BlynkWidgetWrite27+0x24>
  {
    WriteToDatabase("CONTROL", "Tankfuellen gestartet by BLYNK button ");   
 80a17e4:	4906      	ldr	r1, [pc, #24]	; (80a1800 <BlynkWidgetWrite27+0x28>)
 80a17e6:	4807      	ldr	r0, [pc, #28]	; (80a1804 <BlynkWidgetWrite27+0x2c>)
 80a17e8:	f7fe fc88 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    TankFuellen(250);
 80a17ec:	20fa      	movs	r0, #250	; 0xfa
 80a17ee:	f001 fe73 	bl	80a34d8 <_Z11TankFuelleni>

    println(" Tank fuellen by BLYNK button  ");
  }
}
 80a17f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Tank fuellen by BLYNK button  ");
 80a17f6:	4804      	ldr	r0, [pc, #16]	; (80a1808 <BlynkWidgetWrite27+0x30>)
 80a17f8:	f7ff bf36 	b.w	80a1668 <_Z7printlnPc>
}
 80a17fc:	bd08      	pop	{r3, pc}
 80a17fe:	bf00      	nop
 80a1800:	080a7e61 	.word	0x080a7e61
 80a1804:	080a7b9b 	.word	0x080a7b9b
 80a1808:	080a7e88 	.word	0x080a7e88

080a180c <BlynkWidgetWrite28>:

BLYNK_WRITE(V28)
{
 80a180c:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a180e:	6808      	ldr	r0, [r1, #0]
 80a1810:	f7ff f86b 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a1814:	2801      	cmp	r0, #1
 80a1816:	d10e      	bne.n	80a1836 <BlynkWidgetWrite28+0x2a>
  {
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1818:	2100      	movs	r1, #0
 80a181a:	4608      	mov	r0, r1
 80a181c:	f001 fd54 	bl	80a32c8 <_Z20switch_pumpe_reserveii>
 80a1820:	4b05      	ldr	r3, [pc, #20]	; (80a1838 <BlynkWidgetWrite28+0x2c>)
    WriteToDatabase("CONTROL", "Reserve Pumpe off by BLYNK button ");
 80a1822:	4906      	ldr	r1, [pc, #24]	; (80a183c <BlynkWidgetWrite28+0x30>)
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1824:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "Reserve Pumpe off by BLYNK button ");
 80a1826:	4806      	ldr	r0, [pc, #24]	; (80a1840 <BlynkWidgetWrite28+0x34>)
 80a1828:	f7fe fc68 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Reserve Pumpe ausgeschaltet by button ");
  }
}
 80a182c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Reserve Pumpe ausgeschaltet by button ");
 80a1830:	4804      	ldr	r0, [pc, #16]	; (80a1844 <BlynkWidgetWrite28+0x38>)
 80a1832:	f7ff bf19 	b.w	80a1668 <_Z7printlnPc>
}
 80a1836:	bd08      	pop	{r3, pc}
 80a1838:	2000035c 	.word	0x2000035c
 80a183c:	080a7ea8 	.word	0x080a7ea8
 80a1840:	080a7b9b 	.word	0x080a7b9b
 80a1844:	080a7ecb 	.word	0x080a7ecb

080a1848 <BlynkWidgetWrite29>:

BLYNK_WRITE(V29)
{
 80a1848:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a184a:	6808      	ldr	r0, [r1, #0]
 80a184c:	f7ff f84d 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a1850:	2801      	cmp	r0, #1
 80a1852:	d111      	bne.n	80a1878 <BlynkWidgetWrite29+0x30>
  {
    control.dontGiessen = 1;
 80a1854:	4c09      	ldr	r4, [pc, #36]	; (80a187c <BlynkWidgetWrite29+0x34>)
 80a1856:	60a0      	str	r0, [r4, #8]
    EEPROM.put(0, control);
 80a1858:	f003 ff3e 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a185c:	4621      	mov	r1, r4
 80a185e:	2214      	movs	r2, #20
 80a1860:	2000      	movs	r0, #0
 80a1862:	f001 ff93 	bl	80a378c <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "Blumen giessen deaktiviert by Blynk Button ");
 80a1866:	4806      	ldr	r0, [pc, #24]	; (80a1880 <BlynkWidgetWrite29+0x38>)
 80a1868:	4906      	ldr	r1, [pc, #24]	; (80a1884 <BlynkWidgetWrite29+0x3c>)
 80a186a:	f7fe fc47 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println("Blumen giessen deaktiviert ");
  }
}
 80a186e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    println("Blumen giessen deaktiviert ");
 80a1872:	4805      	ldr	r0, [pc, #20]	; (80a1888 <BlynkWidgetWrite29+0x40>)
 80a1874:	f7ff bef8 	b.w	80a1668 <_Z7printlnPc>
}
 80a1878:	bd10      	pop	{r4, pc}
 80a187a:	bf00      	nop
 80a187c:	20000314 	.word	0x20000314
 80a1880:	080a7b9b 	.word	0x080a7b9b
 80a1884:	080a7ef3 	.word	0x080a7ef3
 80a1888:	080a7f1f 	.word	0x080a7f1f

080a188c <BlynkWidgetWrite30>:

BLYNK_WRITE(V30)
{
 80a188c:	b538      	push	{r3, r4, r5, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a188e:	6808      	ldr	r0, [r1, #0]
 80a1890:	f7ff f82b 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a1894:	2801      	cmp	r0, #1
 80a1896:	d112      	bne.n	80a18be <BlynkWidgetWrite30+0x32>
  {
    control.dontGiessen = 0;
 80a1898:	2400      	movs	r4, #0
 80a189a:	4d09      	ldr	r5, [pc, #36]	; (80a18c0 <BlynkWidgetWrite30+0x34>)
 80a189c:	60ac      	str	r4, [r5, #8]
    EEPROM.put(0, control);
 80a189e:	f003 ff1b 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a18a2:	4629      	mov	r1, r5
 80a18a4:	4620      	mov	r0, r4
 80a18a6:	2214      	movs	r2, #20
 80a18a8:	f001 ff70 	bl	80a378c <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "Blumen giessen aktiviert by Blynk Button ");
 80a18ac:	4805      	ldr	r0, [pc, #20]	; (80a18c4 <BlynkWidgetWrite30+0x38>)
 80a18ae:	4906      	ldr	r1, [pc, #24]	; (80a18c8 <BlynkWidgetWrite30+0x3c>)
 80a18b0:	f7fe fc24 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println("Blumen giessen aktiviert ");
  }
}
 80a18b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    println("Blumen giessen aktiviert ");
 80a18b8:	4804      	ldr	r0, [pc, #16]	; (80a18cc <BlynkWidgetWrite30+0x40>)
 80a18ba:	f7ff bed5 	b.w	80a1668 <_Z7printlnPc>
}
 80a18be:	bd38      	pop	{r3, r4, r5, pc}
 80a18c0:	20000314 	.word	0x20000314
 80a18c4:	080a7b9b 	.word	0x080a7b9b
 80a18c8:	080a7f3b 	.word	0x080a7f3b
 80a18cc:	080a7f65 	.word	0x080a7f65

080a18d0 <BlynkWidgetWrite31>:

BLYNK_WRITE(V31)
{
 80a18d0:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a18d2:	6808      	ldr	r0, [r1, #0]
 80a18d4:	f7ff f809 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a18d8:	2801      	cmp	r0, #1
 80a18da:	d10e      	bne.n	80a18fa <BlynkWidgetWrite31+0x2a>
  {
    st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a18dc:	4b07      	ldr	r3, [pc, #28]	; (80a18fc <BlynkWidgetWrite31+0x2c>)
 80a18de:	68d9      	ldr	r1, [r3, #12]
 80a18e0:	f001 fc34 	bl	80a314c <_Z17switch_pumpe_mainii>
 80a18e4:	4b06      	ldr	r3, [pc, #24]	; (80a1900 <BlynkWidgetWrite31+0x30>)
    WriteToDatabase("CONTROL", "Main Pumpe eingeschaltet by BLYNK by button ");
 80a18e6:	4907      	ldr	r1, [pc, #28]	; (80a1904 <BlynkWidgetWrite31+0x34>)
    st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a18e8:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "Main Pumpe eingeschaltet by BLYNK by button ");
 80a18ea:	4807      	ldr	r0, [pc, #28]	; (80a1908 <BlynkWidgetWrite31+0x38>)
 80a18ec:	f7fe fc06 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Main Pumpe eingeschaltet by BLYNK button  ");
  }
}
 80a18f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Main Pumpe eingeschaltet by BLYNK button  ");
 80a18f4:	4805      	ldr	r0, [pc, #20]	; (80a190c <BlynkWidgetWrite31+0x3c>)
 80a18f6:	f7ff beb7 	b.w	80a1668 <_Z7printlnPc>
}
 80a18fa:	bd08      	pop	{r3, pc}
 80a18fc:	20000314 	.word	0x20000314
 80a1900:	20000358 	.word	0x20000358
 80a1904:	080a7f7f 	.word	0x080a7f7f
 80a1908:	080a7b9b 	.word	0x080a7b9b
 80a190c:	080a7fac 	.word	0x080a7fac

080a1910 <BlynkWidgetWrite32>:

BLYNK_WRITE(V32)
{
 80a1910:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a1912:	6808      	ldr	r0, [r1, #0]
 80a1914:	f7fe ffe9 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a1918:	2801      	cmp	r0, #1
 80a191a:	d10e      	bne.n	80a193a <BlynkWidgetWrite32+0x2a>
  {
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a191c:	2100      	movs	r1, #0
 80a191e:	4608      	mov	r0, r1
 80a1920:	f001 fc14 	bl	80a314c <_Z17switch_pumpe_mainii>
 80a1924:	4b05      	ldr	r3, [pc, #20]	; (80a193c <BlynkWidgetWrite32+0x2c>)
    WriteToDatabase("CONTROL", "Main Pumpe ausgeschaltet by BLYNK button ");
 80a1926:	4906      	ldr	r1, [pc, #24]	; (80a1940 <BlynkWidgetWrite32+0x30>)
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a1928:	6018      	str	r0, [r3, #0]
    WriteToDatabase("CONTROL", "Main Pumpe ausgeschaltet by BLYNK button ");
 80a192a:	4806      	ldr	r0, [pc, #24]	; (80a1944 <BlynkWidgetWrite32+0x34>)
 80a192c:	f7fe fbe6 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    println(" Main Pumpe ausgeschaltet by BLYNK button ");
  }
}
 80a1930:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    println(" Main Pumpe ausgeschaltet by BLYNK button ");
 80a1934:	4804      	ldr	r0, [pc, #16]	; (80a1948 <BlynkWidgetWrite32+0x38>)
 80a1936:	f7ff be97 	b.w	80a1668 <_Z7printlnPc>
}
 80a193a:	bd08      	pop	{r3, pc}
 80a193c:	20000358 	.word	0x20000358
 80a1940:	080a7fd9 	.word	0x080a7fd9
 80a1944:	080a7b9b 	.word	0x080a7b9b
 80a1948:	080a7fd8 	.word	0x080a7fd8

080a194c <_Z7printlnPc6String>:
{
 80a194c:	b538      	push	{r3, r4, r5, lr}
 80a194e:	4604      	mov	r4, r0
 80a1950:	460d      	mov	r5, r1
  timeStamp();
 80a1952:	f7ff f9d7 	bl	80a0d04 <_Z9timeStampv>
  sprintf(buffer, "%s %d", text, data.c_str());
 80a1956:	682b      	ldr	r3, [r5, #0]
 80a1958:	4622      	mov	r2, r4
 80a195a:	490a      	ldr	r1, [pc, #40]	; (80a1984 <_Z7printlnPc6String+0x38>)
 80a195c:	480a      	ldr	r0, [pc, #40]	; (80a1988 <_Z7printlnPc6String+0x3c>)
 80a195e:	f002 f97d 	bl	80a3c5c <sprintf>
  Serial.println(buffer);
 80a1962:	f003 fbe5 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1966:	4908      	ldr	r1, [pc, #32]	; (80a1988 <_Z7printlnPc6String+0x3c>)
 80a1968:	f002 fe11 	bl	80a458e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a196c:	4b07      	ldr	r3, [pc, #28]	; (80a198c <_Z7printlnPc6String+0x40>)
 80a196e:	681b      	ldr	r3, [r3, #0]
 80a1970:	2b01      	cmp	r3, #1
 80a1972:	d106      	bne.n	80a1982 <_Z7printlnPc6String+0x36>
    terminal.println(buffer); // Ausgabe an BLYNK APP terminal
 80a1974:	4904      	ldr	r1, [pc, #16]	; (80a1988 <_Z7printlnPc6String+0x3c>)
 80a1976:	4806      	ldr	r0, [pc, #24]	; (80a1990 <_Z7printlnPc6String+0x44>)
 80a1978:	f002 fe09 	bl	80a458e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a197c:	4804      	ldr	r0, [pc, #16]	; (80a1990 <_Z7printlnPc6String+0x44>)
 80a197e:	f7ff fe49 	bl	80a1614 <_ZN14WidgetTerminal5flushEv>
}
 80a1982:	bd38      	pop	{r3, r4, r5, pc}
 80a1984:	080a8003 	.word	0x080a8003
 80a1988:	2000021a 	.word	0x2000021a
 80a198c:	2000036c 	.word	0x2000036c
 80a1990:	20000370 	.word	0x20000370

080a1994 <_Z7println6String>:
{
 80a1994:	b510      	push	{r4, lr}
 80a1996:	4604      	mov	r4, r0
  timeStamp();
 80a1998:	f7ff f9b4 	bl	80a0d04 <_Z9timeStampv>
  Serial.println(text);
 80a199c:	f003 fbc8 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a19a0:	6821      	ldr	r1, [r4, #0]
 80a19a2:	f002 fdf4 	bl	80a458e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a19a6:	4b06      	ldr	r3, [pc, #24]	; (80a19c0 <_Z7println6String+0x2c>)
 80a19a8:	681b      	ldr	r3, [r3, #0]
 80a19aa:	2b01      	cmp	r3, #1
 80a19ac:	d106      	bne.n	80a19bc <_Z7println6String+0x28>
    terminal.println(text); // Ausgabe an BLYNK APP terminal
 80a19ae:	6821      	ldr	r1, [r4, #0]
 80a19b0:	4804      	ldr	r0, [pc, #16]	; (80a19c4 <_Z7println6String+0x30>)
 80a19b2:	f002 fdec 	bl	80a458e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a19b6:	4803      	ldr	r0, [pc, #12]	; (80a19c4 <_Z7println6String+0x30>)
 80a19b8:	f7ff fe2c 	bl	80a1614 <_ZN14WidgetTerminal5flushEv>
}
 80a19bc:	bd10      	pop	{r4, pc}
 80a19be:	bf00      	nop
 80a19c0:	2000036c 	.word	0x2000036c
 80a19c4:	20000370 	.word	0x20000370

080a19c8 <_Z17deviceNameHandlerPKcS0_>:
{
 80a19c8:	b570      	push	{r4, r5, r6, lr}
 80a19ca:	4605      	mov	r5, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a19cc:	4e1e      	ldr	r6, [pc, #120]	; (80a1a48 <_Z17deviceNameHandlerPKcS0_+0x80>)
 80a19ce:	b08c      	sub	sp, #48	; 0x30
 80a19d0:	460c      	mov	r4, r1
 80a19d2:	a804      	add	r0, sp, #16
 80a19d4:	4631      	mov	r1, r6
 80a19d6:	f002 fd0d 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
  println("received  : " + String(topic));
 80a19da:	4629      	mov	r1, r5
 80a19dc:	4668      	mov	r0, sp
 80a19de:	f002 fd09 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a19e2:	4669      	mov	r1, sp
 80a19e4:	a804      	add	r0, sp, #16
 80a19e6:	f002 fd6e 	bl	80a44c6 <_ZplRK15StringSumHelperRK6String>
 80a19ea:	4601      	mov	r1, r0
 80a19ec:	a808      	add	r0, sp, #32
 80a19ee:	f002 fd40 	bl	80a4472 <_ZN6StringC1ERKS_>
 80a19f2:	a808      	add	r0, sp, #32
 80a19f4:	f7ff ffce 	bl	80a1994 <_Z7println6String>
 80a19f8:	a808      	add	r0, sp, #32
 80a19fa:	f002 fcb1 	bl	80a4360 <_ZN6StringD1Ev>
 80a19fe:	4668      	mov	r0, sp
 80a1a00:	f002 fcae 	bl	80a4360 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1a04:	a804      	add	r0, sp, #16
 80a1a06:	f002 fcab 	bl	80a4360 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a1a0a:	4631      	mov	r1, r6
 80a1a0c:	a804      	add	r0, sp, #16
 80a1a0e:	f002 fcf1 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
  println("received  : " + String(data));
 80a1a12:	4621      	mov	r1, r4
 80a1a14:	4668      	mov	r0, sp
 80a1a16:	f002 fced 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a1a:	4669      	mov	r1, sp
 80a1a1c:	a804      	add	r0, sp, #16
 80a1a1e:	f002 fd52 	bl	80a44c6 <_ZplRK15StringSumHelperRK6String>
 80a1a22:	4601      	mov	r1, r0
 80a1a24:	a808      	add	r0, sp, #32
 80a1a26:	f002 fd24 	bl	80a4472 <_ZN6StringC1ERKS_>
 80a1a2a:	a808      	add	r0, sp, #32
 80a1a2c:	f7ff ffb2 	bl	80a1994 <_Z7println6String>
 80a1a30:	a808      	add	r0, sp, #32
 80a1a32:	f002 fc95 	bl	80a4360 <_ZN6StringD1Ev>
 80a1a36:	4668      	mov	r0, sp
 80a1a38:	f002 fc92 	bl	80a4360 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1a3c:	a804      	add	r0, sp, #16
 80a1a3e:	f002 fc8f 	bl	80a4360 <_ZN6StringD1Ev>
}
 80a1a42:	b00c      	add	sp, #48	; 0x30
 80a1a44:	bd70      	pop	{r4, r5, r6, pc}
 80a1a46:	bf00      	nop
 80a1a48:	080a8009 	.word	0x080a8009

080a1a4c <_Z16myWebHookHandlerPKcS0_>:
{
 80a1a4c:	b570      	push	{r4, r5, r6, lr}
 80a1a4e:	460d      	mov	r5, r1
 80a1a50:	b08c      	sub	sp, #48	; 0x30
	StringSumHelper(const char *p) : String(p) {}
 80a1a52:	4937      	ldr	r1, [pc, #220]	; (80a1b30 <_Z16myWebHookHandlerPKcS0_+0xe4>)
 80a1a54:	a804      	add	r0, sp, #16
 80a1a56:	f002 fccd 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
  println("received  : " + String(data));
 80a1a5a:	4629      	mov	r1, r5
 80a1a5c:	4668      	mov	r0, sp
 80a1a5e:	f002 fcc9 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a62:	4669      	mov	r1, sp
 80a1a64:	a804      	add	r0, sp, #16
 80a1a66:	f002 fd2e 	bl	80a44c6 <_ZplRK15StringSumHelperRK6String>
 80a1a6a:	4601      	mov	r1, r0
 80a1a6c:	a808      	add	r0, sp, #32
 80a1a6e:	f002 fd00 	bl	80a4472 <_ZN6StringC1ERKS_>
 80a1a72:	a808      	add	r0, sp, #32
 80a1a74:	f7ff ff8e 	bl	80a1994 <_Z7println6String>
 80a1a78:	a808      	add	r0, sp, #32
 80a1a7a:	f002 fc71 	bl	80a4360 <_ZN6StringD1Ev>
 80a1a7e:	4668      	mov	r0, sp
 80a1a80:	f002 fc6e 	bl	80a4360 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1a84:	a804      	add	r0, sp, #16
 80a1a86:	f002 fc6b 	bl	80a4360 <_ZN6StringD1Ev>
  if ((String(data).startsWith("off")) & (control.dontGiessen == 0))
 80a1a8a:	4629      	mov	r1, r5
 80a1a8c:	a804      	add	r0, sp, #16
 80a1a8e:	f002 fcb1 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a92:	4928      	ldr	r1, [pc, #160]	; (80a1b34 <_Z16myWebHookHandlerPKcS0_+0xe8>)
 80a1a94:	a808      	add	r0, sp, #32
 80a1a96:	f002 fcad 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a9a:	a908      	add	r1, sp, #32
 80a1a9c:	a804      	add	r0, sp, #16
 80a1a9e:	f002 fd34 	bl	80a450a <_ZNK6String10startsWithERKS_>
 80a1aa2:	4c25      	ldr	r4, [pc, #148]	; (80a1b38 <_Z16myWebHookHandlerPKcS0_+0xec>)
 80a1aa4:	68a3      	ldr	r3, [r4, #8]
 80a1aa6:	2b00      	cmp	r3, #0
 80a1aa8:	bf14      	ite	ne
 80a1aaa:	2600      	movne	r6, #0
 80a1aac:	f000 0601 	andeq.w	r6, r0, #1
 80a1ab0:	a808      	add	r0, sp, #32
 80a1ab2:	f002 fc55 	bl	80a4360 <_ZN6StringD1Ev>
 80a1ab6:	a804      	add	r0, sp, #16
 80a1ab8:	f002 fc52 	bl	80a4360 <_ZN6StringD1Ev>
 80a1abc:	b166      	cbz	r6, 80a1ad8 <_Z16myWebHookHandlerPKcS0_+0x8c>
    control.dontGiessen = 1;
 80a1abe:	2301      	movs	r3, #1
 80a1ac0:	60a3      	str	r3, [r4, #8]
    EEPROM.put(0, control);
 80a1ac2:	f003 fe09 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a1ac6:	4621      	mov	r1, r4
 80a1ac8:	2000      	movs	r0, #0
 80a1aca:	2214      	movs	r2, #20
 80a1acc:	f001 fe5e 	bl	80a378c <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN DEAKTIVIERT by WebHook");
 80a1ad0:	491a      	ldr	r1, [pc, #104]	; (80a1b3c <_Z16myWebHookHandlerPKcS0_+0xf0>)
 80a1ad2:	481b      	ldr	r0, [pc, #108]	; (80a1b40 <_Z16myWebHookHandlerPKcS0_+0xf4>)
 80a1ad4:	f7fe fb12 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if ((String(data).startsWith("on")) & (control.dontGiessen == 1))
 80a1ad8:	4629      	mov	r1, r5
 80a1ada:	a804      	add	r0, sp, #16
 80a1adc:	f002 fc8a 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1ae0:	4918      	ldr	r1, [pc, #96]	; (80a1b44 <_Z16myWebHookHandlerPKcS0_+0xf8>)
 80a1ae2:	a808      	add	r0, sp, #32
 80a1ae4:	f002 fc86 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1ae8:	a908      	add	r1, sp, #32
 80a1aea:	a804      	add	r0, sp, #16
 80a1aec:	f002 fd0d 	bl	80a450a <_ZNK6String10startsWithERKS_>
 80a1af0:	68a3      	ldr	r3, [r4, #8]
 80a1af2:	2b01      	cmp	r3, #1
 80a1af4:	bf14      	ite	ne
 80a1af6:	2500      	movne	r5, #0
 80a1af8:	f000 0501 	andeq.w	r5, r0, #1
 80a1afc:	a808      	add	r0, sp, #32
 80a1afe:	f002 fc2f 	bl	80a4360 <_ZN6StringD1Ev>
 80a1b02:	a804      	add	r0, sp, #16
 80a1b04:	f002 fc2c 	bl	80a4360 <_ZN6StringD1Ev>
 80a1b08:	b17d      	cbz	r5, 80a1b2a <_Z16myWebHookHandlerPKcS0_+0xde>
    control.dontGiessen = 0;
 80a1b0a:	2500      	movs	r5, #0
 80a1b0c:	60a5      	str	r5, [r4, #8]
    EEPROM.put(0, control);
 80a1b0e:	f003 fde3 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a1b12:	4628      	mov	r0, r5
 80a1b14:	2214      	movs	r2, #20
 80a1b16:	4908      	ldr	r1, [pc, #32]	; (80a1b38 <_Z16myWebHookHandlerPKcS0_+0xec>)
 80a1b18:	f001 fe38 	bl	80a378c <HAL_EEPROM_Put>
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN AKTIVIERT by WebHook");
 80a1b1c:	490a      	ldr	r1, [pc, #40]	; (80a1b48 <_Z16myWebHookHandlerPKcS0_+0xfc>)
 80a1b1e:	4808      	ldr	r0, [pc, #32]	; (80a1b40 <_Z16myWebHookHandlerPKcS0_+0xf4>)
}
 80a1b20:	b00c      	add	sp, #48	; 0x30
 80a1b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WriteToDatabase("CONTROL", "WASSERSTAND : GIESSEN AKTIVIERT by WebHook");
 80a1b26:	f7fe bae9 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
}
 80a1b2a:	b00c      	add	sp, #48	; 0x30
 80a1b2c:	bd70      	pop	{r4, r5, r6, pc}
 80a1b2e:	bf00      	nop
 80a1b30:	080a8009 	.word	0x080a8009
 80a1b34:	080a8016 	.word	0x080a8016
 80a1b38:	20000314 	.word	0x20000314
 80a1b3c:	080a801a 	.word	0x080a801a
 80a1b40:	080a7b9b 	.word	0x080a7b9b
 80a1b44:	080a83ba 	.word	0x080a83ba
 80a1b48:	080a8047 	.word	0x080a8047

080a1b4c <_Z7printlnPci>:
{
 80a1b4c:	b538      	push	{r3, r4, r5, lr}
 80a1b4e:	4604      	mov	r4, r0
 80a1b50:	460d      	mov	r5, r1
  timeStamp();
 80a1b52:	f7ff f8d7 	bl	80a0d04 <_Z9timeStampv>
  sprintf(buffer, "%s %d", text, data);
 80a1b56:	462b      	mov	r3, r5
 80a1b58:	4622      	mov	r2, r4
 80a1b5a:	490a      	ldr	r1, [pc, #40]	; (80a1b84 <_Z7printlnPci+0x38>)
 80a1b5c:	480a      	ldr	r0, [pc, #40]	; (80a1b88 <_Z7printlnPci+0x3c>)
 80a1b5e:	f002 f87d 	bl	80a3c5c <sprintf>
  Serial.println(buffer);
 80a1b62:	f003 fae5 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1b66:	4908      	ldr	r1, [pc, #32]	; (80a1b88 <_Z7printlnPci+0x3c>)
 80a1b68:	f002 fd11 	bl	80a458e <_ZN5Print7printlnEPKc>
  if (termEnabled == 1)
 80a1b6c:	4b07      	ldr	r3, [pc, #28]	; (80a1b8c <_Z7printlnPci+0x40>)
 80a1b6e:	681b      	ldr	r3, [r3, #0]
 80a1b70:	2b01      	cmp	r3, #1
 80a1b72:	d106      	bne.n	80a1b82 <_Z7printlnPci+0x36>
    terminal.println(buffer); // Ausgabe an BLYNK APP terminal
 80a1b74:	4904      	ldr	r1, [pc, #16]	; (80a1b88 <_Z7printlnPci+0x3c>)
 80a1b76:	4806      	ldr	r0, [pc, #24]	; (80a1b90 <_Z7printlnPci+0x44>)
 80a1b78:	f002 fd09 	bl	80a458e <_ZN5Print7printlnEPKc>
    terminal.flush();
 80a1b7c:	4804      	ldr	r0, [pc, #16]	; (80a1b90 <_Z7printlnPci+0x44>)
 80a1b7e:	f7ff fd49 	bl	80a1614 <_ZN14WidgetTerminal5flushEv>
}
 80a1b82:	bd38      	pop	{r3, r4, r5, pc}
 80a1b84:	080a8003 	.word	0x080a8003
 80a1b88:	2000021a 	.word	0x2000021a
 80a1b8c:	2000036c 	.word	0x2000036c
 80a1b90:	20000370 	.word	0x20000370

080a1b94 <_Z11printStatusv>:
{
 80a1b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return network_ready(*this, 0, NULL);
 80a1b96:	2200      	movs	r2, #0
 80a1b98:	4b43      	ldr	r3, [pc, #268]	; (80a1ca8 <_Z11printStatusv+0x114>)
 80a1b9a:	4611      	mov	r1, r2
 80a1b9c:	6858      	ldr	r0, [r3, #4]
 80a1b9e:	f001 ffa5 	bl	80a3aec <network_ready>
 80a1ba2:	4606      	mov	r6, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1ba4:	f002 f812 	bl	80a3bcc <spark_cloud_flag_connected>
 80a1ba8:	4607      	mov	r7, r0
  timeStamp();
 80a1baa:	f7ff f8ab 	bl	80a0d04 <_Z9timeStampv>
  if (termEnabled == 1)
 80a1bae:	4b3f      	ldr	r3, [pc, #252]	; (80a1cac <_Z11printStatusv+0x118>)
 80a1bb0:	681b      	ldr	r3, [r3, #0]
 80a1bb2:	2b01      	cmp	r3, #1
 80a1bb4:	d103      	bne.n	80a1bbe <_Z11printStatusv+0x2a>
    terminal.println(timebuffer);
 80a1bb6:	493e      	ldr	r1, [pc, #248]	; (80a1cb0 <_Z11printStatusv+0x11c>)
 80a1bb8:	483e      	ldr	r0, [pc, #248]	; (80a1cb4 <_Z11printStatusv+0x120>)
 80a1bba:	f002 fce8 	bl	80a458e <_ZN5Print7printlnEPKc>
  println(" tnow: ", tnow);
 80a1bbe:	4b3e      	ldr	r3, [pc, #248]	; (80a1cb8 <_Z11printStatusv+0x124>)
  println("Main    [mV] : ", AiPumpeMain);
 80a1bc0:	4d3e      	ldr	r5, [pc, #248]	; (80a1cbc <_Z11printStatusv+0x128>)
  println(" tnow: ", tnow);
 80a1bc2:	6819      	ldr	r1, [r3, #0]
 80a1bc4:	483e      	ldr	r0, [pc, #248]	; (80a1cc0 <_Z11printStatusv+0x12c>)
  println("Reserve [mV] : ", AiPumpeReserve);
 80a1bc6:	4c3f      	ldr	r4, [pc, #252]	; (80a1cc4 <_Z11printStatusv+0x130>)
  println(" tnow: ", tnow);
 80a1bc8:	f7ff ffc0 	bl	80a1b4c <_Z7printlnPci>
  readAdcChannels();
 80a1bcc:	f7fe fff8 	bl	80a0bc0 <_Z15readAdcChannelsv>
  println("Main    [mV] : ", AiPumpeMain);
 80a1bd0:	6829      	ldr	r1, [r5, #0]
 80a1bd2:	483d      	ldr	r0, [pc, #244]	; (80a1cc8 <_Z11printStatusv+0x134>)
 80a1bd4:	f7ff ffba 	bl	80a1b4c <_Z7printlnPci>
  println("Reserve [mV] : ", AiPumpeReserve);
 80a1bd8:	6821      	ldr	r1, [r4, #0]
 80a1bda:	483c      	ldr	r0, [pc, #240]	; (80a1ccc <_Z11printStatusv+0x138>)
 80a1bdc:	f7ff ffb6 	bl	80a1b4c <_Z7printlnPci>
  println("12V     [mV] : ", Ai12V);
 80a1be0:	4b3b      	ldr	r3, [pc, #236]	; (80a1cd0 <_Z11printStatusv+0x13c>)
 80a1be2:	483c      	ldr	r0, [pc, #240]	; (80a1cd4 <_Z11printStatusv+0x140>)
 80a1be4:	6819      	ldr	r1, [r3, #0]
 80a1be6:	f7ff ffb1 	bl	80a1b4c <_Z7printlnPci>
   if (AiPumpeMain > 1000)
 80a1bea:	682b      	ldr	r3, [r5, #0]
 80a1bec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a1bf0:	d90a      	bls.n	80a1c08 <_Z11printStatusv+0x74>
      Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a1bf2:	f003 fa9d 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1bf6:	682a      	ldr	r2, [r5, #0]
 80a1bf8:	4937      	ldr	r1, [pc, #220]	; (80a1cd8 <_Z11printStatusv+0x144>)
 80a1bfa:	f7fe fa5a 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      WriteToDatabase("ADC", "AiPumpeMain    [mV] : ", AiPumpeMain);
 80a1bfe:	682a      	ldr	r2, [r5, #0]
 80a1c00:	4936      	ldr	r1, [pc, #216]	; (80a1cdc <_Z11printStatusv+0x148>)
 80a1c02:	4837      	ldr	r0, [pc, #220]	; (80a1ce0 <_Z11printStatusv+0x14c>)
 80a1c04:	f7fe face 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  if (AiPumpeReserve > 1000)
 80a1c08:	6823      	ldr	r3, [r4, #0]
 80a1c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a1c0e:	d90a      	bls.n	80a1c26 <_Z11printStatusv+0x92>
      Serial.printlnf(" AiPumpeReserve : %d [mV]", AiPumpeReserve);
 80a1c10:	f003 fa8e 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1c14:	6822      	ldr	r2, [r4, #0]
 80a1c16:	4933      	ldr	r1, [pc, #204]	; (80a1ce4 <_Z11printStatusv+0x150>)
 80a1c18:	f7fe fa4b 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
      WriteToDatabase("ADC", "AiPumpeReserve [mV] : ", AiPumpeReserve);
 80a1c1c:	6822      	ldr	r2, [r4, #0]
 80a1c1e:	4932      	ldr	r1, [pc, #200]	; (80a1ce8 <_Z11printStatusv+0x154>)
 80a1c20:	482f      	ldr	r0, [pc, #188]	; (80a1ce0 <_Z11printStatusv+0x14c>)
 80a1c22:	f7fe fabf 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1c26:	2001      	movs	r0, #1
 80a1c28:	f003 fd04 	bl	80a5634 <digitalRead>
 80a1c2c:	4b2f      	ldr	r3, [pc, #188]	; (80a1cec <_Z11printStatusv+0x158>)
  if (st_main_pumpe == HIGH)
 80a1c2e:	2801      	cmp	r0, #1
  st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a1c30:	6018      	str	r0, [r3, #0]
  if (st_main_pumpe == HIGH)
 80a1c32:	d106      	bne.n	80a1c42 <_Z11printStatusv+0xae>
    println("MAIN Pumpe is ON");
 80a1c34:	482e      	ldr	r0, [pc, #184]	; (80a1cf0 <_Z11printStatusv+0x15c>)
 80a1c36:	f7ff fd17 	bl	80a1668 <_Z7printlnPc>
    WriteToDatabase("STATUS", "MAIN Pumpe is ON ");
 80a1c3a:	492e      	ldr	r1, [pc, #184]	; (80a1cf4 <_Z11printStatusv+0x160>)
 80a1c3c:	482e      	ldr	r0, [pc, #184]	; (80a1cf8 <_Z11printStatusv+0x164>)
 80a1c3e:	f7fe fa5d 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1c42:	2002      	movs	r0, #2
 80a1c44:	f003 fcf6 	bl	80a5634 <digitalRead>
 80a1c48:	4b2c      	ldr	r3, [pc, #176]	; (80a1cfc <_Z11printStatusv+0x168>)
  if (st_reserve_pumpe == HIGH)
 80a1c4a:	2801      	cmp	r0, #1
  st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a1c4c:	6018      	str	r0, [r3, #0]
  if (st_reserve_pumpe == HIGH)
 80a1c4e:	d106      	bne.n	80a1c5e <_Z11printStatusv+0xca>
    println("RESERVE Pumpe ist ON");
 80a1c50:	482b      	ldr	r0, [pc, #172]	; (80a1d00 <_Z11printStatusv+0x16c>)
 80a1c52:	f7ff fd09 	bl	80a1668 <_Z7printlnPc>
    WriteToDatabase("STATUS", "RESERVE Pumpe is ON ");
 80a1c56:	492b      	ldr	r1, [pc, #172]	; (80a1d04 <_Z11printStatusv+0x170>)
 80a1c58:	4827      	ldr	r0, [pc, #156]	; (80a1cf8 <_Z11printStatusv+0x164>)
 80a1c5a:	f7fe fa4f 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if (st_funk_pumpe == ON)
 80a1c5e:	4b2a      	ldr	r3, [pc, #168]	; (80a1d08 <_Z11printStatusv+0x174>)
 80a1c60:	681b      	ldr	r3, [r3, #0]
 80a1c62:	2b01      	cmp	r3, #1
 80a1c64:	d106      	bne.n	80a1c74 <_Z11printStatusv+0xe0>
    println("FUNK Pumpe ist ON");
 80a1c66:	4829      	ldr	r0, [pc, #164]	; (80a1d0c <_Z11printStatusv+0x178>)
 80a1c68:	f7ff fcfe 	bl	80a1668 <_Z7printlnPc>
    WriteToDatabase("STATUS", "FUNK Pumpe is ON ");
 80a1c6c:	4928      	ldr	r1, [pc, #160]	; (80a1d10 <_Z11printStatusv+0x17c>)
 80a1c6e:	4822      	ldr	r0, [pc, #136]	; (80a1cf8 <_Z11printStatusv+0x164>)
 80a1c70:	f7fe fa44 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  Serial.printlnf(" waterlevel: %d ", waterlevel);
 80a1c74:	f003 fa5c 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1c78:	4b26      	ldr	r3, [pc, #152]	; (80a1d14 <_Z11printStatusv+0x180>)
 80a1c7a:	4927      	ldr	r1, [pc, #156]	; (80a1d18 <_Z11printStatusv+0x184>)
 80a1c7c:	681a      	ldr	r2, [r3, #0]
 80a1c7e:	f7fe fa18 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf(" wifi=%s cloud=%s fast_counter=%d ", (wifiReady ? "on" : "off"), (cloudReady ? "on" : "off"), fast_counter);
 80a1c82:	f003 fa55 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a1c86:	4b25      	ldr	r3, [pc, #148]	; (80a1d1c <_Z11printStatusv+0x188>)
 80a1c88:	4925      	ldr	r1, [pc, #148]	; (80a1d20 <_Z11printStatusv+0x18c>)
 80a1c8a:	681b      	ldr	r3, [r3, #0]
 80a1c8c:	4a25      	ldr	r2, [pc, #148]	; (80a1d24 <_Z11printStatusv+0x190>)
 80a1c8e:	9300      	str	r3, [sp, #0]
 80a1c90:	2f00      	cmp	r7, #0
 80a1c92:	bf14      	ite	ne
 80a1c94:	460b      	movne	r3, r1
 80a1c96:	4613      	moveq	r3, r2
 80a1c98:	2e00      	cmp	r6, #0
 80a1c9a:	bf18      	it	ne
 80a1c9c:	460a      	movne	r2, r1
 80a1c9e:	4922      	ldr	r1, [pc, #136]	; (80a1d28 <_Z11printStatusv+0x194>)
 80a1ca0:	f7fe fa07 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
}
 80a1ca4:	b003      	add	sp, #12
 80a1ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1ca8:	200008d4 	.word	0x200008d4
 80a1cac:	2000036c 	.word	0x2000036c
 80a1cb0:	200003c0 	.word	0x200003c0
 80a1cb4:	20000370 	.word	0x20000370
 80a1cb8:	200003f8 	.word	0x200003f8
 80a1cbc:	200001a4 	.word	0x200001a4
 80a1cc0:	080a8072 	.word	0x080a8072
 80a1cc4:	200001a8 	.word	0x200001a8
 80a1cc8:	080a80ab 	.word	0x080a80ab
 80a1ccc:	080a80e0 	.word	0x080a80e0
 80a1cd0:	200001a0 	.word	0x200001a0
 80a1cd4:	080a807a 	.word	0x080a807a
 80a1cd8:	080a808a 	.word	0x080a808a
 80a1cdc:	080a80a4 	.word	0x080a80a4
 80a1ce0:	080a80bb 	.word	0x080a80bb
 80a1ce4:	080a80bf 	.word	0x080a80bf
 80a1ce8:	080a80d9 	.word	0x080a80d9
 80a1cec:	20000358 	.word	0x20000358
 80a1cf0:	080a80f0 	.word	0x080a80f0
 80a1cf4:	080a8101 	.word	0x080a8101
 80a1cf8:	080a8113 	.word	0x080a8113
 80a1cfc:	2000035c 	.word	0x2000035c
 80a1d00:	080a811a 	.word	0x080a811a
 80a1d04:	080a812f 	.word	0x080a812f
 80a1d08:	20000354 	.word	0x20000354
 80a1d0c:	080a8144 	.word	0x080a8144
 80a1d10:	080a8156 	.word	0x080a8156
 80a1d14:	20000028 	.word	0x20000028
 80a1d18:	080a8168 	.word	0x080a8168
 80a1d1c:	20000330 	.word	0x20000330
 80a1d20:	080a83ba 	.word	0x080a83ba
 80a1d24:	080a8016 	.word	0x080a8016
 80a1d28:	080a8179 	.word	0x080a8179

080a1d2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
 80a1d2c:	b500      	push	{lr}
 80a1d2e:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
 80a1d30:	ab04      	add	r3, sp, #16
 80a1d32:	2200      	movs	r2, #0
 80a1d34:	9301      	str	r3, [sp, #4]
 80a1d36:	2350      	movs	r3, #80	; 0x50
 80a1d38:	2111      	movs	r1, #17
 80a1d3a:	9300      	str	r3, [sp, #0]
 80a1d3c:	9202      	str	r2, [sp, #8]
 80a1d3e:	4b03      	ldr	r3, [pc, #12]	; (80a1d4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
 80a1d40:	f7ff fbba 	bl	80a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
 80a1d44:	b015      	add	sp, #84	; 0x54
 80a1d46:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1d4a:	bf00      	nop
 80a1d4c:	080a85b4 	.word	0x080a85b4

080a1d50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a1d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1d52:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 80a1d56:	ab08      	add	r3, sp, #32
 80a1d58:	2400      	movs	r4, #0
 80a1d5a:	460f      	mov	r7, r1
 80a1d5c:	9305      	str	r3, [sp, #20]
 80a1d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a1d62:	4616      	mov	r6, r2
 80a1d64:	4605      	mov	r5, r0
        cmd.add("vw");
 80a1d66:	490e      	ldr	r1, [pc, #56]	; (80a1da0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_+0x50>)
 80a1d68:	a805      	add	r0, sp, #20
 80a1d6a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80a1d6e:	f7fe fe14 	bl	80a099a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a1d72:	4639      	mov	r1, r7
 80a1d74:	a805      	add	r0, sp, #20
 80a1d76:	f7fe fe2d 	bl	80a09d4 <_ZN10BlynkParam3addEi>
        add(last);
 80a1d7a:	4631      	mov	r1, r6
 80a1d7c:	a805      	add	r0, sp, #20
 80a1d7e:	f7fe fe0c 	bl	80a099a <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a1d82:	9b06      	ldr	r3, [sp, #24]
 80a1d84:	4622      	mov	r2, r4
 80a1d86:	3b01      	subs	r3, #1
 80a1d88:	9300      	str	r3, [sp, #0]
 80a1d8a:	2114      	movs	r1, #20
 80a1d8c:	4628      	mov	r0, r5
 80a1d8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80a1d92:	9b05      	ldr	r3, [sp, #20]
 80a1d94:	f7ff fb90 	bl	80a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a1d98:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 80a1d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1d9e:	bf00      	nop
 80a1da0:	080a7c97 	.word	0x080a7c97

080a1da4 <_Z15printSlowStatusv>:
{
 80a1da4:	b530      	push	{r4, r5, lr}
        flush();
 80a1da6:	4c4f      	ldr	r4, [pc, #316]	; (80a1ee4 <_Z15printSlowStatusv+0x140>)
 80a1da8:	b087      	sub	sp, #28
 80a1daa:	4620      	mov	r0, r4
 80a1dac:	f7ff fc32 	bl	80a1614 <_ZN14WidgetTerminal5flushEv>
        Blynk.virtualWrite(mPin, "clr");
 80a1db0:	4a4d      	ldr	r2, [pc, #308]	; (80a1ee8 <_Z15printSlowStatusv+0x144>)
 80a1db2:	7a21      	ldrb	r1, [r4, #8]
 80a1db4:	484d      	ldr	r0, [pc, #308]	; (80a1eec <_Z15printSlowStatusv+0x148>)
 80a1db6:	f7ff ffcb 	bl	80a1d50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  timeStamp();
 80a1dba:	f7fe ffa3 	bl	80a0d04 <_Z9timeStampv>
  if (termEnabled == 1)
 80a1dbe:	4b4c      	ldr	r3, [pc, #304]	; (80a1ef0 <_Z15printSlowStatusv+0x14c>)
 80a1dc0:	681b      	ldr	r3, [r3, #0]
 80a1dc2:	2b01      	cmp	r3, #1
 80a1dc4:	d103      	bne.n	80a1dce <_Z15printSlowStatusv+0x2a>
    terminal.println(timebuffer);
 80a1dc6:	4620      	mov	r0, r4
 80a1dc8:	494a      	ldr	r1, [pc, #296]	; (80a1ef4 <_Z15printSlowStatusv+0x150>)
 80a1dca:	f002 fbe0 	bl	80a458e <_ZN5Print7printlnEPKc>
  getSleepTime(55); // time to wake up at minute = 55
 80a1dce:	2037      	movs	r0, #55	; 0x37
 80a1dd0:	f7fe fee4 	bl	80a0b9c <_Z12getSleepTimei>
  println(" Photon HW ID ", hwID);
 80a1dd4:	4948      	ldr	r1, [pc, #288]	; (80a1ef8 <_Z15printSlowStatusv+0x154>)
 80a1dd6:	a802      	add	r0, sp, #8
 80a1dd8:	f002 fb4b 	bl	80a4472 <_ZN6StringC1ERKS_>
 80a1ddc:	a902      	add	r1, sp, #8
 80a1dde:	4847      	ldr	r0, [pc, #284]	; (80a1efc <_Z15printSlowStatusv+0x158>)
 80a1de0:	f7ff fdb4 	bl	80a194c <_Z7printlnPc6String>
 80a1de4:	a802      	add	r0, sp, #8
 80a1de6:	f002 fabb 	bl	80a4360 <_ZN6StringD1Ev>
  Particle.publish("particle/device/name");
 80a1dea:	4945      	ldr	r1, [pc, #276]	; (80a1f00 <_Z15printSlowStatusv+0x15c>)
 80a1dec:	a802      	add	r0, sp, #8
 80a1dee:	f7fe fd99 	bl	80a0924 <_ZN10CloudClass7publishEPKc.isra.0>
 80a1df2:	a803      	add	r0, sp, #12
 80a1df4:	f7fe f96b 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(500);
 80a1df8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1dfc:	f002 fd4c 	bl	80a4898 <delay>
  checkDontSleepPin();
 80a1e00:	f7fe ff6a 	bl	80a0cd8 <_Z17checkDontSleepPinv>
  reportDontSleepPin();
 80a1e04:	f7fe ff44 	bl	80a0c90 <_Z18reportDontSleepPinv>
 80a1e08:	4b3e      	ldr	r3, [pc, #248]	; (80a1f04 <_Z15printSlowStatusv+0x160>)
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a1e0a:	4c3f      	ldr	r4, [pc, #252]	; (80a1f08 <_Z15printSlowStatusv+0x164>)
 80a1e0c:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a1e0e:	4a3f      	ldr	r2, [pc, #252]	; (80a1f0c <_Z15printSlowStatusv+0x168>)
 80a1e10:	493f      	ldr	r1, [pc, #252]	; (80a1f10 <_Z15printSlowStatusv+0x16c>)
 80a1e12:	f88d 3000 	strb.w	r3, [sp]
 80a1e16:	a802      	add	r0, sp, #8
 80a1e18:	233c      	movs	r3, #60	; 0x3c
 80a1e1a:	f002 ff4b 	bl	80a4cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a1e1e:	a803      	add	r0, sp, #12
 80a1e20:	f7fe f955 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  EEPROM.get(0, control);
 80a1e24:	f003 fc58 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a1e28:	2214      	movs	r2, #20
 80a1e2a:	4621      	mov	r1, r4
 80a1e2c:	2000      	movs	r0, #0
 80a1e2e:	f001 fca5 	bl	80a377c <HAL_EEPROM_Get>
  println("version            : ", control.version);
 80a1e32:	6821      	ldr	r1, [r4, #0]
 80a1e34:	4837      	ldr	r0, [pc, #220]	; (80a1f14 <_Z15printSlowStatusv+0x170>)
 80a1e36:	f7ff fe89 	bl	80a1b4c <_Z7printlnPci>
  println("dontSleep          : ", control.dontSleepSW);
 80a1e3a:	6861      	ldr	r1, [r4, #4]
 80a1e3c:	4836      	ldr	r0, [pc, #216]	; (80a1f18 <_Z15printSlowStatusv+0x174>)
 80a1e3e:	f7ff fe85 	bl	80a1b4c <_Z7printlnPci>
  println("dontGiessen        : ", control.dontGiessen);
 80a1e42:	68a1      	ldr	r1, [r4, #8]
 80a1e44:	4835      	ldr	r0, [pc, #212]	; (80a1f1c <_Z15printSlowStatusv+0x178>)
 80a1e46:	f7ff fe81 	bl	80a1b4c <_Z7printlnPci>
  println("pumpe_count_down   : ", control.pumpe_count_down);
 80a1e4a:	68e1      	ldr	r1, [r4, #12]
 80a1e4c:	4834      	ldr	r0, [pc, #208]	; (80a1f20 <_Z15printSlowStatusv+0x17c>)
 80a1e4e:	f7ff fe7d 	bl	80a1b4c <_Z7printlnPci>
  println("reserve_repetitions: ", control.reserve_repetitions);
 80a1e52:	6921      	ldr	r1, [r4, #16]
 80a1e54:	4833      	ldr	r0, [pc, #204]	; (80a1f24 <_Z15printSlowStatusv+0x180>)
 80a1e56:	f7ff fe79 	bl	80a1b4c <_Z7printlnPci>
  WriteToDatabase("WASSER","dontGiessen:", control.dontGiessen);
 80a1e5a:	68a2      	ldr	r2, [r4, #8]
 80a1e5c:	4932      	ldr	r1, [pc, #200]	; (80a1f28 <_Z15printSlowStatusv+0x184>)
 80a1e5e:	4833      	ldr	r0, [pc, #204]	; (80a1f2c <_Z15printSlowStatusv+0x188>)
 80a1e60:	f7fe f9a0 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  WriteToDatabase("WASSER","pumpe count down:", control.pumpe_count_down);
 80a1e64:	68e2      	ldr	r2, [r4, #12]
 80a1e66:	4932      	ldr	r1, [pc, #200]	; (80a1f30 <_Z15printSlowStatusv+0x18c>)
 80a1e68:	4830      	ldr	r0, [pc, #192]	; (80a1f2c <_Z15printSlowStatusv+0x188>)
 80a1e6a:	f7fe f99b 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  WriteToDatabase("WASSER","reserve_repetitions: ", control.reserve_repetitions);
 80a1e6e:	6922      	ldr	r2, [r4, #16]
 80a1e70:	492c      	ldr	r1, [pc, #176]	; (80a1f24 <_Z15printSlowStatusv+0x180>)
 80a1e72:	482e      	ldr	r0, [pc, #184]	; (80a1f2c <_Z15printSlowStatusv+0x188>)
 80a1e74:	f7fe f996 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  waterlevel = ultra_sonic_measure();
 80a1e78:	f7fe fc1c 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a1e7c:	4b2d      	ldr	r3, [pc, #180]	; (80a1f34 <_Z15printSlowStatusv+0x190>)
 80a1e7e:	4602      	mov	r2, r0
 80a1e80:	6018      	str	r0, [r3, #0]
  WriteToDatabase("WASSER","WASSERSTAND : ",waterlevel);
 80a1e82:	492d      	ldr	r1, [pc, #180]	; (80a1f38 <_Z15printSlowStatusv+0x194>)
 80a1e84:	4829      	ldr	r0, [pc, #164]	; (80a1f2c <_Z15printSlowStatusv+0x188>)
 80a1e86:	f7fe f98d 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
   if (control.dontGiessen == 1)
 80a1e8a:	68a3      	ldr	r3, [r4, #8]
 80a1e8c:	2b01      	cmp	r3, #1
 80a1e8e:	d103      	bne.n	80a1e98 <_Z15printSlowStatusv+0xf4>
    WriteToDatabase("WASSER", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a1e90:	492a      	ldr	r1, [pc, #168]	; (80a1f3c <_Z15printSlowStatusv+0x198>)
 80a1e92:	4826      	ldr	r0, [pc, #152]	; (80a1f2c <_Z15printSlowStatusv+0x188>)
 80a1e94:	f7fe f932 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  if(control.reserve_repetitions > MAX_NACHFUELL_REPETITIONS)
 80a1e98:	6922      	ldr	r2, [r4, #16]
 80a1e9a:	2a05      	cmp	r2, #5
 80a1e9c:	d906      	bls.n	80a1eac <_Z15printSlowStatusv+0x108>
        WriteToDatabase("WASSER", "WARNING : Wiederholungen des Tankfuellens ueberschritten = ",control.reserve_repetitions);    
 80a1e9e:	4928      	ldr	r1, [pc, #160]	; (80a1f40 <_Z15printSlowStatusv+0x19c>)
 80a1ea0:	4822      	ldr	r0, [pc, #136]	; (80a1f2c <_Z15printSlowStatusv+0x188>)
}
 80a1ea2:	b007      	add	sp, #28
 80a1ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        WriteToDatabase("WASSER", "WARNING : Wiederholungen des Tankfuellens ueberschritten = ",control.reserve_repetitions);    
 80a1ea8:	f7fe b97c 	b.w	80a01a4 <_Z15WriteToDatabasePcS_i>
  println("temp in  : ", temp_in);
 80a1eac:	4c25      	ldr	r4, [pc, #148]	; (80a1f44 <_Z15printSlowStatusv+0x1a0>)
  println("temp out : ", temp_out);
 80a1eae:	4d26      	ldr	r5, [pc, #152]	; (80a1f48 <_Z15printSlowStatusv+0x1a4>)
  get_Temperature(); 
 80a1eb0:	f7fe fc98 	bl	80a07e4 <_Z15get_Temperaturev>
  println("temp in  : ", temp_in);
 80a1eb4:	6821      	ldr	r1, [r4, #0]
 80a1eb6:	4825      	ldr	r0, [pc, #148]	; (80a1f4c <_Z15printSlowStatusv+0x1a8>)
 80a1eb8:	f7ff fe48 	bl	80a1b4c <_Z7printlnPci>
  println("temp out : ", temp_out);
 80a1ebc:	6829      	ldr	r1, [r5, #0]
 80a1ebe:	4824      	ldr	r0, [pc, #144]	; (80a1f50 <_Z15printSlowStatusv+0x1ac>)
 80a1ec0:	f7ff fe44 	bl	80a1b4c <_Z7printlnPci>
  sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a1ec4:	682b      	ldr	r3, [r5, #0]
 80a1ec6:	6822      	ldr	r2, [r4, #0]
 80a1ec8:	4922      	ldr	r1, [pc, #136]	; (80a1f54 <_Z15printSlowStatusv+0x1b0>)
 80a1eca:	480a      	ldr	r0, [pc, #40]	; (80a1ef4 <_Z15printSlowStatusv+0x150>)
 80a1ecc:	f001 fec6 	bl	80a3c5c <sprintf>
  WriteToDatabase("CONTROL", timebuffer);
 80a1ed0:	4908      	ldr	r1, [pc, #32]	; (80a1ef4 <_Z15printSlowStatusv+0x150>)
 80a1ed2:	4821      	ldr	r0, [pc, #132]	; (80a1f58 <_Z15printSlowStatusv+0x1b4>)
 80a1ed4:	f7fe f912 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  println(" ----------------------- ");
 80a1ed8:	4820      	ldr	r0, [pc, #128]	; (80a1f5c <_Z15printSlowStatusv+0x1b8>)
}
 80a1eda:	b007      	add	sp, #28
 80a1edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  println(" ----------------------- ");
 80a1ee0:	f7ff bbc2 	b.w	80a1668 <_Z7printlnPc>
 80a1ee4:	20000370 	.word	0x20000370
 80a1ee8:	080a819c 	.word	0x080a819c
 80a1eec:	200001ac 	.word	0x200001ac
 80a1ef0:	2000036c 	.word	0x2000036c
 80a1ef4:	200003c0 	.word	0x200003c0
 80a1ef8:	20000334 	.word	0x20000334
 80a1efc:	080a79f6 	.word	0x080a79f6
 80a1f00:	080a7a05 	.word	0x080a7a05
 80a1f04:	20000219 	.word	0x20000219
 80a1f08:	20000314 	.word	0x20000314
 80a1f0c:	2000021a 	.word	0x2000021a
 80a1f10:	080a835e 	.word	0x080a835e
 80a1f14:	080a81a0 	.word	0x080a81a0
 80a1f18:	080a81b6 	.word	0x080a81b6
 80a1f1c:	080a81cc 	.word	0x080a81cc
 80a1f20:	080a81e2 	.word	0x080a81e2
 80a1f24:	080a81f8 	.word	0x080a81f8
 80a1f28:	080a820e 	.word	0x080a820e
 80a1f2c:	080a7a73 	.word	0x080a7a73
 80a1f30:	080a821b 	.word	0x080a821b
 80a1f34:	20000028 	.word	0x20000028
 80a1f38:	080a822d 	.word	0x080a822d
 80a1f3c:	080a823c 	.word	0x080a823c
 80a1f40:	080a826a 	.word	0x080a826a
 80a1f44:	20000360 	.word	0x20000360
 80a1f48:	20000364 	.word	0x20000364
 80a1f4c:	080a82a6 	.word	0x080a82a6
 80a1f50:	080a82b2 	.word	0x080a82b2
 80a1f54:	080a79ad 	.word	0x080a79ad
 80a1f58:	080a7b9b 	.word	0x080a7b9b
 80a1f5c:	080a82be 	.word	0x080a82be

080a1f60 <_Z5sleepi>:
{
 80a1f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (minutes < 1)
 80a1f64:	1e05      	subs	r5, r0, #0
{
 80a1f66:	b088      	sub	sp, #32
  if (minutes < 1)
 80a1f68:	f340 80df 	ble.w	80a212a <_Z5sleepi+0x1ca>
  if (minutes > 120)
 80a1f6c:	2d78      	cmp	r5, #120	; 0x78
 80a1f6e:	bfa8      	it	ge
 80a1f70:	2578      	movge	r5, #120	; 0x78
  if ((dontSleepHW == 0) & (control.dontSleepSW == 0) & (st_funk_pumpe == 0))
 80a1f72:	4f6f      	ldr	r7, [pc, #444]	; (80a2130 <_Z5sleepi+0x1d0>)
 80a1f74:	4b6f      	ldr	r3, [pc, #444]	; (80a2134 <_Z5sleepi+0x1d4>)
 80a1f76:	687c      	ldr	r4, [r7, #4]
 80a1f78:	681b      	ldr	r3, [r3, #0]
 80a1f7a:	4e6f      	ldr	r6, [pc, #444]	; (80a2138 <_Z5sleepi+0x1d8>)
 80a1f7c:	431c      	orrs	r4, r3
 80a1f7e:	6833      	ldr	r3, [r6, #0]
 80a1f80:	431c      	orrs	r4, r3
 80a1f82:	f040 80cf 	bne.w	80a2124 <_Z5sleepi+0x1c4>
    println(" *** PREPARE SLEEP *** ");
 80a1f86:	486d      	ldr	r0, [pc, #436]	; (80a213c <_Z5sleepi+0x1dc>)
 80a1f88:	f7ff fb6e 	bl	80a1668 <_Z7printlnPc>
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a1f8c:	4621      	mov	r1, r4
 80a1f8e:	4620      	mov	r0, r4
 80a1f90:	f001 f8dc 	bl	80a314c <_Z17switch_pumpe_mainii>
 80a1f94:	4b6a      	ldr	r3, [pc, #424]	; (80a2140 <_Z5sleepi+0x1e0>)
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1f96:	4621      	mov	r1, r4
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a1f98:	6018      	str	r0, [r3, #0]
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1f9a:	4620      	mov	r0, r4
 80a1f9c:	f001 f994 	bl	80a32c8 <_Z20switch_pumpe_reserveii>
 80a1fa0:	4b68      	ldr	r3, [pc, #416]	; (80a2144 <_Z5sleepi+0x1e4>)
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a1fa2:	4621      	mov	r1, r4
    st_reserve_pumpe = switch_pumpe_reserve(OFF, 0);
 80a1fa4:	6018      	str	r0, [r3, #0]
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a1fa6:	4620      	mov	r0, r4
 80a1fa8:	f001 fa34 	bl	80a3414 <_Z17switch_pumpe_funkii>
    System.sleep(D1, RISING, 60 * minutes); // no reset of device after wakeup
 80a1fac:	f04f 083c 	mov.w	r8, #60	; 0x3c
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a1fb0:	6030      	str	r0, [r6, #0]
    digitalWrite(DO_PUMPE_MAIN, 0);
 80a1fb2:	2601      	movs	r6, #1
 80a1fb4:	4621      	mov	r1, r4
 80a1fb6:	2001      	movs	r0, #1
 80a1fb8:	f003 fb23 	bl	80a5602 <digitalWrite>
    digitalWrite(DO_PUMPE_RESERVE, 0);
 80a1fbc:	4621      	mov	r1, r4
 80a1fbe:	2002      	movs	r0, #2
 80a1fc0:	f003 fb1f 	bl	80a5602 <digitalWrite>
    WriteToDatabase("WASSER", "#### SLEEP Minutes #### : ", minutes);
 80a1fc4:	462a      	mov	r2, r5
 80a1fc6:	4960      	ldr	r1, [pc, #384]	; (80a2148 <_Z5sleepi+0x1e8>)
 80a1fc8:	4860      	ldr	r0, [pc, #384]	; (80a214c <_Z5sleepi+0x1ec>)
 80a1fca:	f7fe f8eb 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
    delay(1000);
 80a1fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1fd2:	f002 fc61 	bl	80a4898 <delay>
    System.sleep(D1, RISING, 60 * minutes); // no reset of device after wakeup
 80a1fd6:	fb08 f505 	mul.w	r5, r8, r5
 80a1fda:	4b5d      	ldr	r3, [pc, #372]	; (80a2150 <_Z5sleepi+0x1f0>)
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 80a1fdc:	4632      	mov	r2, r6
 80a1fde:	681b      	ldr	r3, [r3, #0]
 80a1fe0:	f10d 0116 	add.w	r1, sp, #22
 80a1fe4:	9302      	str	r3, [sp, #8]
 80a1fe6:	a806      	add	r0, sp, #24
 80a1fe8:	f10d 0315 	add.w	r3, sp, #21
 80a1fec:	e9cd 6500 	strd	r6, r5, [sp]
 80a1ff0:	f8ad 6016 	strh.w	r6, [sp, #22]
 80a1ff4:	f88d 6015 	strb.w	r6, [sp, #21]
 80a1ff8:	f001 fedc 	bl	80a3db4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    println(" *** WAKE UP *** ");
 80a1ffc:	4855      	ldr	r0, [pc, #340]	; (80a2154 <_Z5sleepi+0x1f4>)
 80a1ffe:	f7ff fb33 	bl	80a1668 <_Z7printlnPc>
    WiFi.on();
 80a2002:	4855      	ldr	r0, [pc, #340]	; (80a2158 <_Z5sleepi+0x1f8>)
 80a2004:	f7fe fc9e 	bl	80a0944 <_ZN5spark9WiFiClass2onEv>
    delay(5000);
 80a2008:	f241 3088 	movw	r0, #5000	; 0x1388
 80a200c:	f002 fc44 	bl	80a4898 <delay>
        spark_cloud_flag_connect();
 80a2010:	f001 fdd4 	bl	80a3bbc <spark_cloud_flag_connect>
    delay(5000);
 80a2014:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2018:	f002 fc3e 	bl	80a4898 <delay>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a201c:	f001 fdd6 	bl	80a3bcc <spark_cloud_flag_connected>
    if (Particle.connected() == true)
 80a2020:	2800      	cmp	r0, #0
 80a2022:	d034      	beq.n	80a208e <_Z5sleepi+0x12e>
    WriteToDatabase("WAKE UP", "#### WAKE UP ####");
 80a2024:	494d      	ldr	r1, [pc, #308]	; (80a215c <_Z5sleepi+0x1fc>)
 80a2026:	484e      	ldr	r0, [pc, #312]	; (80a2160 <_Z5sleepi+0x200>)
 80a2028:	f7fe f868 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    WriteToDatabase("WAKE UP", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a202c:	68fa      	ldr	r2, [r7, #12]
 80a202e:	494d      	ldr	r1, [pc, #308]	; (80a2164 <_Z5sleepi+0x204>)
 80a2030:	484b      	ldr	r0, [pc, #300]	; (80a2160 <_Z5sleepi+0x200>)
 80a2032:	f7fe f8b7 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a2036:	4633      	mov	r3, r6
 80a2038:	4622      	mov	r2, r4
 80a203a:	494b      	ldr	r1, [pc, #300]	; (80a2168 <_Z5sleepi+0x208>)
 80a203c:	e9cd 4400 	strd	r4, r4, [sp]
 80a2040:	484a      	ldr	r0, [pc, #296]	; (80a216c <_Z5sleepi+0x20c>)
 80a2042:	f001 fddb 	bl	80a3bfc <spark_subscribe>
 80a2046:	4623      	mov	r3, r4
 80a2048:	4622      	mov	r2, r4
 80a204a:	4949      	ldr	r1, [pc, #292]	; (80a2170 <_Z5sleepi+0x210>)
 80a204c:	e9cd 4400 	strd	r4, r4, [sp]
 80a2050:	4848      	ldr	r0, [pc, #288]	; (80a2174 <_Z5sleepi+0x214>)
 80a2052:	f001 fdd3 	bl	80a3bfc <spark_subscribe>
    delay(500);
 80a2056:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a205a:	f002 fc1d 	bl	80a4898 <delay>
    Particle.publish("particle/device/name");
 80a205e:	4943      	ldr	r1, [pc, #268]	; (80a216c <_Z5sleepi+0x20c>)
 80a2060:	a806      	add	r0, sp, #24
 80a2062:	f7fe fc5f 	bl	80a0924 <_ZN10CloudClass7publishEPKc.isra.0>
 80a2066:	a807      	add	r0, sp, #28
 80a2068:	f7fe f831 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(500);
 80a206c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a2070:	f002 fc12 	bl	80a4898 <delay>
 80a2074:	4b40      	ldr	r3, [pc, #256]	; (80a2178 <_Z5sleepi+0x218>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a2076:	a806      	add	r0, sp, #24
 80a2078:	781b      	ldrb	r3, [r3, #0]
 80a207a:	4a40      	ldr	r2, [pc, #256]	; (80a217c <_Z5sleepi+0x21c>)
 80a207c:	f88d 3000 	strb.w	r3, [sp]
 80a2080:	493f      	ldr	r1, [pc, #252]	; (80a2180 <_Z5sleepi+0x220>)
 80a2082:	4643      	mov	r3, r8
 80a2084:	f002 fe16 	bl	80a4cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a2088:	a807      	add	r0, sp, #28
 80a208a:	f7fe f820 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    tnow = getTime();
 80a208e:	f7fe fd6f 	bl	80a0b70 <_Z7getTimev>
 80a2092:	4b3c      	ldr	r3, [pc, #240]	; (80a2184 <_Z5sleepi+0x224>)
 80a2094:	6018      	str	r0, [r3, #0]
    hwInit();
 80a2096:	f7fe fdb9 	bl	80a0c0c <_Z6hwInitv>
    EEPROM.get(0, control);
 80a209a:	f003 fb1d 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a209e:	2214      	movs	r2, #20
 80a20a0:	2000      	movs	r0, #0
 80a20a2:	4923      	ldr	r1, [pc, #140]	; (80a2130 <_Z5sleepi+0x1d0>)
 80a20a4:	f001 fb6a 	bl	80a377c <HAL_EEPROM_Get>
    if ((control.pumpe_count_down < 30) | (control.pumpe_count_down > 240))
 80a20a8:	68fb      	ldr	r3, [r7, #12]
 80a20aa:	3b1e      	subs	r3, #30
 80a20ac:	2bd2      	cmp	r3, #210	; 0xd2
 80a20ae:	d908      	bls.n	80a20c2 <_Z5sleepi+0x162>
      control.pumpe_count_down = 90;
 80a20b0:	235a      	movs	r3, #90	; 0x5a
 80a20b2:	60fb      	str	r3, [r7, #12]
      EEPROM.put(0, control);
 80a20b4:	f003 fb10 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a20b8:	2214      	movs	r2, #20
 80a20ba:	2000      	movs	r0, #0
 80a20bc:	491c      	ldr	r1, [pc, #112]	; (80a2130 <_Z5sleepi+0x1d0>)
 80a20be:	f001 fb65 	bl	80a378c <HAL_EEPROM_Put>
    if (control.dontGiessen == 1)
 80a20c2:	68bb      	ldr	r3, [r7, #8]
 80a20c4:	2b01      	cmp	r3, #1
 80a20c6:	d103      	bne.n	80a20d0 <_Z5sleepi+0x170>
      WriteToDatabase("WAKE UP", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a20c8:	492f      	ldr	r1, [pc, #188]	; (80a2188 <_Z5sleepi+0x228>)
 80a20ca:	4825      	ldr	r0, [pc, #148]	; (80a2160 <_Z5sleepi+0x200>)
 80a20cc:	f7fe f816 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    Serial.printlnf("temp in : %d  temp out : %d ", temp_in, temp_out);
 80a20d0:	4c2e      	ldr	r4, [pc, #184]	; (80a218c <_Z5sleepi+0x22c>)
 80a20d2:	4d2f      	ldr	r5, [pc, #188]	; (80a2190 <_Z5sleepi+0x230>)
    get_Temperature(); 
 80a20d4:	f7fe fb86 	bl	80a07e4 <_Z15get_Temperaturev>
    Serial.printlnf("temp in : %d  temp out : %d ", temp_in, temp_out);
 80a20d8:	f003 f82a 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a20dc:	6822      	ldr	r2, [r4, #0]
 80a20de:	682b      	ldr	r3, [r5, #0]
 80a20e0:	492c      	ldr	r1, [pc, #176]	; (80a2194 <_Z5sleepi+0x234>)
 80a20e2:	f7fd ffe6 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    sprintf(timebuffer, "TEMP IN:%d OUT:%d", temp_in, temp_out);
 80a20e6:	6822      	ldr	r2, [r4, #0]
 80a20e8:	682b      	ldr	r3, [r5, #0]
 80a20ea:	492b      	ldr	r1, [pc, #172]	; (80a2198 <_Z5sleepi+0x238>)
 80a20ec:	482b      	ldr	r0, [pc, #172]	; (80a219c <_Z5sleepi+0x23c>)
 80a20ee:	f001 fdb5 	bl	80a3c5c <sprintf>
    WriteToDatabase("WAKE UP", timebuffer);
 80a20f2:	492a      	ldr	r1, [pc, #168]	; (80a219c <_Z5sleepi+0x23c>)
 80a20f4:	481a      	ldr	r0, [pc, #104]	; (80a2160 <_Z5sleepi+0x200>)
 80a20f6:	f7fe f801 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    printSlowStatus();
 80a20fa:	f7ff fe53 	bl	80a1da4 <_Z15printSlowStatusv>
    if ((Time.hour()>8) & (Time.hour()<11))
 80a20fe:	f002 fb75 	bl	80a47ec <_ZN9TimeClass4hourEv>
 80a2102:	4604      	mov	r4, r0
 80a2104:	f002 fb72 	bl	80a47ec <_ZN9TimeClass4hourEv>
 80a2108:	2c08      	cmp	r4, #8
 80a210a:	dd04      	ble.n	80a2116 <_Z5sleepi+0x1b6>
 80a210c:	280a      	cmp	r0, #10
 80a210e:	dc02      	bgt.n	80a2116 <_Z5sleepi+0x1b6>
      TankFuellen(LOW_LEVEL_TANKFUELLEN);
 80a2110:	205f      	movs	r0, #95	; 0x5f
 80a2112:	f001 f9e1 	bl	80a34d8 <_Z11TankFuelleni>
    slow_counter = 0;
 80a2116:	2300      	movs	r3, #0
 80a2118:	4a21      	ldr	r2, [pc, #132]	; (80a21a0 <_Z5sleepi+0x240>)
 80a211a:	6013      	str	r3, [r2, #0]
    fast_counter = 0;
 80a211c:	4a21      	ldr	r2, [pc, #132]	; (80a21a4 <_Z5sleepi+0x244>)
 80a211e:	6013      	str	r3, [r2, #0]
    termEnabled = 0;
 80a2120:	4a21      	ldr	r2, [pc, #132]	; (80a21a8 <_Z5sleepi+0x248>)
 80a2122:	6013      	str	r3, [r2, #0]
}
 80a2124:	b008      	add	sp, #32
 80a2126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    minutes = 5;
 80a212a:	2505      	movs	r5, #5
 80a212c:	e721      	b.n	80a1f72 <_Z5sleepi+0x12>
 80a212e:	bf00      	nop
 80a2130:	20000314 	.word	0x20000314
 80a2134:	2000032c 	.word	0x2000032c
 80a2138:	20000354 	.word	0x20000354
 80a213c:	080a82d8 	.word	0x080a82d8
 80a2140:	20000358 	.word	0x20000358
 80a2144:	2000035c 	.word	0x2000035c
 80a2148:	080a82f0 	.word	0x080a82f0
 80a214c:	080a7a73 	.word	0x080a7a73
 80a2150:	20000214 	.word	0x20000214
 80a2154:	080a830b 	.word	0x080a830b
 80a2158:	200008d4 	.word	0x200008d4
 80a215c:	080a831d 	.word	0x080a831d
 80a2160:	080a832f 	.word	0x080a832f
 80a2164:	080a8337 	.word	0x080a8337
 80a2168:	080a19c9 	.word	0x080a19c9
 80a216c:	080a7a05 	.word	0x080a7a05
 80a2170:	080a1a4d 	.word	0x080a1a4d
 80a2174:	080a8350 	.word	0x080a8350
 80a2178:	20000219 	.word	0x20000219
 80a217c:	2000021a 	.word	0x2000021a
 80a2180:	080a835e 	.word	0x080a835e
 80a2184:	200003f8 	.word	0x200003f8
 80a2188:	080a823c 	.word	0x080a823c
 80a218c:	20000360 	.word	0x20000360
 80a2190:	20000364 	.word	0x20000364
 80a2194:	080a836b 	.word	0x080a836b
 80a2198:	080a79ad 	.word	0x080a79ad
 80a219c:	200003c0 	.word	0x200003c0
 80a21a0:	20000350 	.word	0x20000350
 80a21a4:	20000330 	.word	0x20000330
 80a21a8:	2000036c 	.word	0x2000036c

080a21ac <BlynkWidgetWrite14>:
{
 80a21ac:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a21ae:	6808      	ldr	r0, [r1, #0]
 80a21b0:	f7fe fb9b 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a21b4:	2801      	cmp	r0, #1
 80a21b6:	d111      	bne.n	80a21dc <BlynkWidgetWrite14+0x30>
    termEnabled = 1;
 80a21b8:	4b09      	ldr	r3, [pc, #36]	; (80a21e0 <BlynkWidgetWrite14+0x34>)
 80a21ba:	6018      	str	r0, [r3, #0]
    println(" Terminal enabled  ");
 80a21bc:	4809      	ldr	r0, [pc, #36]	; (80a21e4 <BlynkWidgetWrite14+0x38>)
 80a21be:	f7ff fa53 	bl	80a1668 <_Z7printlnPc>
    WriteToDatabase("CONTROL","TERMINAL enabled by Blynk Button");    
 80a21c2:	4909      	ldr	r1, [pc, #36]	; (80a21e8 <BlynkWidgetWrite14+0x3c>)
 80a21c4:	4809      	ldr	r0, [pc, #36]	; (80a21ec <BlynkWidgetWrite14+0x40>)
 80a21c6:	f7fd ff99 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    termCounter = 3;
 80a21ca:	2203      	movs	r2, #3
 80a21cc:	4b08      	ldr	r3, [pc, #32]	; (80a21f0 <BlynkWidgetWrite14+0x44>)
 80a21ce:	601a      	str	r2, [r3, #0]
    printSlowStatus();
 80a21d0:	f7ff fde8 	bl	80a1da4 <_Z15printSlowStatusv>
}
 80a21d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printStatus();
 80a21d8:	f7ff bcdc 	b.w	80a1b94 <_Z11printStatusv>
}
 80a21dc:	bd08      	pop	{r3, pc}
 80a21de:	bf00      	nop
 80a21e0:	2000036c 	.word	0x2000036c
 80a21e4:	080a8388 	.word	0x080a8388
 80a21e8:	080a839c 	.word	0x080a839c
 80a21ec:	080a7b9b 	.word	0x080a7b9b
 80a21f0:	20000368 	.word	0x20000368

080a21f4 <setup>:
{
 80a21f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a21f6:	b087      	sub	sp, #28
  Serial.begin(115200);
 80a21f8:	f002 ff9a 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a21fc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a2200:	f002 ff7c 	bl	80a50fc <_ZN9USBSerial5beginEl>
  delay(2000); // Allow board to settle
 80a2204:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a2208:	f002 fb46 	bl	80a4898 <delay>
  setupWifi();
 80a220c:	f7fe fc7a 	bl	80a0b04 <_Z9setupWifiv>
  Time.zone(+2); // Sommerzeit
 80a2210:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80a2214:	f002 fa9e 	bl	80a4754 <_ZN9TimeClass4zoneEf>
  Serial.printlnf(" ");
 80a2218:	f002 ff8a 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a221c:	4962      	ldr	r1, [pc, #392]	; (80a23a8 <setup+0x1b4>)
 80a221e:	f7fd ff48 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf(" ");
 80a2222:	f002 ff85 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2226:	4960      	ldr	r1, [pc, #384]	; (80a23a8 <setup+0x1b4>)
 80a2228:	f7fd ff43 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("----------------------");
 80a222c:	f002 ff80 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2230:	495e      	ldr	r1, [pc, #376]	; (80a23ac <setup+0x1b8>)
 80a2232:	f7fd ff3e 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("      Welcome");
 80a2236:	f002 ff7b 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a223a:	495d      	ldr	r1, [pc, #372]	; (80a23b0 <setup+0x1bc>)
 80a223c:	f7fd ff39 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  hwID = System.deviceID();
 80a2240:	4c5c      	ldr	r4, [pc, #368]	; (80a23b4 <setup+0x1c0>)
  Serial.printlnf("----------------------");
 80a2242:	f002 ff75 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2246:	4959      	ldr	r1, [pc, #356]	; (80a23ac <setup+0x1b8>)
 80a2248:	f7fd ff33 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
        return spark_deviceID();
 80a224c:	a802      	add	r0, sp, #8
 80a224e:	f001 fcc5 	bl	80a3bdc <spark_deviceID>
  hwID = System.deviceID();
 80a2252:	a902      	add	r1, sp, #8
 80a2254:	4620      	mov	r0, r4
 80a2256:	f002 f917 	bl	80a4488 <_ZN6StringaSEOS_>
 80a225a:	a802      	add	r0, sp, #8
 80a225c:	f002 f880 	bl	80a4360 <_ZN6StringD1Ev>
  Serial.printlnf(hwID);
 80a2260:	f002 ff66 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2264:	6821      	ldr	r1, [r4, #0]
 80a2266:	f7fd ff24 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
  delay(3000);
 80a226a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a226e:	f002 fb13 	bl	80a4898 <delay>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2272:	f001 fcab 	bl	80a3bcc <spark_cloud_flag_connected>
  if (Particle.connected() == true)
 80a2276:	b320      	cbz	r0, 80a22c2 <setup+0xce>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a2278:	2400      	movs	r4, #0
 80a227a:	2301      	movs	r3, #1
 80a227c:	4622      	mov	r2, r4
 80a227e:	494e      	ldr	r1, [pc, #312]	; (80a23b8 <setup+0x1c4>)
 80a2280:	e9cd 4400 	strd	r4, r4, [sp]
 80a2284:	484d      	ldr	r0, [pc, #308]	; (80a23bc <setup+0x1c8>)
 80a2286:	f001 fcb9 	bl	80a3bfc <spark_subscribe>
    Particle.publish("particle/device/name");
 80a228a:	494c      	ldr	r1, [pc, #304]	; (80a23bc <setup+0x1c8>)
 80a228c:	a802      	add	r0, sp, #8
 80a228e:	f7fe fb49 	bl	80a0924 <_ZN10CloudClass7publishEPKc.isra.0>
 80a2292:	a803      	add	r0, sp, #12
 80a2294:	f7fd ff1b 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2298:	4623      	mov	r3, r4
 80a229a:	4622      	mov	r2, r4
 80a229c:	4948      	ldr	r1, [pc, #288]	; (80a23c0 <setup+0x1cc>)
 80a229e:	e9cd 4400 	strd	r4, r4, [sp]
 80a22a2:	4848      	ldr	r0, [pc, #288]	; (80a23c4 <setup+0x1d0>)
 80a22a4:	f001 fcaa 	bl	80a3bfc <spark_subscribe>
 80a22a8:	4b47      	ldr	r3, [pc, #284]	; (80a23c8 <setup+0x1d4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a22aa:	a802      	add	r0, sp, #8
 80a22ac:	781b      	ldrb	r3, [r3, #0]
 80a22ae:	4a47      	ldr	r2, [pc, #284]	; (80a23cc <setup+0x1d8>)
 80a22b0:	f88d 3000 	strb.w	r3, [sp]
 80a22b4:	4946      	ldr	r1, [pc, #280]	; (80a23d0 <setup+0x1dc>)
 80a22b6:	233c      	movs	r3, #60	; 0x3c
 80a22b8:	f002 fcfc 	bl	80a4cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a22bc:	a803      	add	r0, sp, #12
 80a22be:	f7fd ff06 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
 80a22c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a22c6:	f001 f9bd 	bl	80a3644 <_Z10BlynkDelaym>
        this->authkey = auth;
 80a22ca:	4c42      	ldr	r4, [pc, #264]	; (80a23d4 <setup+0x1e0>)
 80a22cc:	4b42      	ldr	r3, [pc, #264]	; (80a23d8 <setup+0x1e4>)
        state = CONNECTING;
 80a22ce:	2600      	movs	r6, #0
        this->authkey = auth;
 80a22d0:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a22d2:	f001 f9b9 	bl	80a3648 <_Z11BlynkMillisv>
 80a22d6:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a22da:	3808      	subs	r0, #8
 80a22dc:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80a22e0:	6160      	str	r0, [r4, #20]
        BLYNK_LOG1(BLYNK_F(BLYNK_NEWLINE
 80a22e2:	f7fe fb05 	bl	80a08f0 <_ZL14BLYNK_LOG_TIMEv>
 80a22e6:	f002 ff23 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a22ea:	493c      	ldr	r1, [pc, #240]	; (80a23dc <setup+0x1e8>)
 80a22ec:	f002 f94f 	bl	80a458e <_ZN5Print7printlnEPKc>
        this->conn.begin(domain, port);
 80a22f0:	6823      	ldr	r3, [r4, #0]
        domain = d;
 80a22f2:	4a3b      	ldr	r2, [pc, #236]	; (80a23e0 <setup+0x1ec>)
        while ((state != CONNECTED) &&
 80a22f4:	f242 3727 	movw	r7, #8999	; 0x2327
 80a22f8:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
 80a22fa:	2250      	movs	r2, #80	; 0x50
 80a22fc:	871a      	strh	r2, [r3, #56]	; 0x38
    void disconnect() { client.stop(); }
 80a22fe:	6820      	ldr	r0, [r4, #0]
 80a2300:	f001 ff30 	bl	80a4164 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
 80a2304:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
 80a2306:	f001 f99f 	bl	80a3648 <_Z11BlynkMillisv>
 80a230a:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
 80a230c:	7f63      	ldrb	r3, [r4, #29]
 80a230e:	2b01      	cmp	r3, #1
 80a2310:	d00c      	beq.n	80a232c <setup+0x138>
               (BlynkMillis() - started < timeout))
 80a2312:	f001 f999 	bl	80a3648 <_Z11BlynkMillisv>
 80a2316:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
 80a2318:	42b8      	cmp	r0, r7
 80a231a:	d804      	bhi.n	80a2326 <setup+0x132>
            run();
 80a231c:	2100      	movs	r1, #0
 80a231e:	4620      	mov	r0, r4
 80a2320:	f7ff f818 	bl	80a1354 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
 80a2324:	e7f2      	b.n	80a230c <setup+0x118>
        config(auth, domain, port);
        while(this->connect() != true) {}
 80a2326:	7f63      	ldrb	r3, [r4, #29]
 80a2328:	2b01      	cmp	r3, #1
 80a232a:	d1e8      	bne.n	80a22fe <setup+0x10a>
  delay(3000);
 80a232c:	f640 30b8 	movw	r0, #3000	; 0xbb8
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a2330:	4c2c      	ldr	r4, [pc, #176]	; (80a23e4 <setup+0x1f0>)
 80a2332:	f002 fab1 	bl	80a4898 <delay>
  WriteToDatabase("RESET", "#### SETUP/RESET Version ",SW_VERSION);
 80a2336:	221a      	movs	r2, #26
 80a2338:	492b      	ldr	r1, [pc, #172]	; (80a23e8 <setup+0x1f4>)
 80a233a:	482c      	ldr	r0, [pc, #176]	; (80a23ec <setup+0x1f8>)
 80a233c:	f7fd ff32 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  hwInit();
 80a2340:	f7fe fc64 	bl	80a0c0c <_Z6hwInitv>
  EEPROM.get(0, control);
 80a2344:	f003 f9c8 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a2348:	2214      	movs	r2, #20
 80a234a:	4621      	mov	r1, r4
 80a234c:	2000      	movs	r0, #0
 80a234e:	f001 fa15 	bl	80a377c <HAL_EEPROM_Get>
  if ((control.pumpe_count_down < 30) | (control.pumpe_count_down > 240))
 80a2352:	68e3      	ldr	r3, [r4, #12]
 80a2354:	3b1e      	subs	r3, #30
 80a2356:	2bd2      	cmp	r3, #210	; 0xd2
 80a2358:	d908      	bls.n	80a236c <setup+0x178>
    control.pumpe_count_down = 90;
 80a235a:	235a      	movs	r3, #90	; 0x5a
 80a235c:	60e3      	str	r3, [r4, #12]
    EEPROM.put(0, control);
 80a235e:	f003 f9bb 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a2362:	2214      	movs	r2, #20
 80a2364:	4621      	mov	r1, r4
 80a2366:	2000      	movs	r0, #0
 80a2368:	f001 fa10 	bl	80a378c <HAL_EEPROM_Put>
  WriteToDatabase("RESET", "PUMPE MAIN COUNTDOWN IS ", control.pumpe_count_down);
 80a236c:	68e2      	ldr	r2, [r4, #12]
 80a236e:	4920      	ldr	r1, [pc, #128]	; (80a23f0 <setup+0x1fc>)
 80a2370:	481e      	ldr	r0, [pc, #120]	; (80a23ec <setup+0x1f8>)
 80a2372:	f7fd ff17 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
  if (control.dontGiessen == 1)
 80a2376:	68a3      	ldr	r3, [r4, #8]
 80a2378:	2b01      	cmp	r3, #1
 80a237a:	d103      	bne.n	80a2384 <setup+0x190>
    WriteToDatabase("RESET", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a237c:	491d      	ldr	r1, [pc, #116]	; (80a23f4 <setup+0x200>)
 80a237e:	481b      	ldr	r0, [pc, #108]	; (80a23ec <setup+0x1f8>)
 80a2380:	f7fd febc 	bl	80a00fc <_Z15WriteToDatabasePcS_>
  printSlowStatus();
 80a2384:	f7ff fd0e 	bl	80a1da4 <_Z15printSlowStatusv>
  help();
 80a2388:	f7ff f988 	bl	80a169c <_Z4helpv>
  tnow = getTime();
 80a238c:	f7fe fbf0 	bl	80a0b70 <_Z7getTimev>
  fast_counter = 60000;
 80a2390:	f64e 2260 	movw	r2, #60000	; 0xea60
  tnow = getTime();
 80a2394:	4b18      	ldr	r3, [pc, #96]	; (80a23f8 <setup+0x204>)
 80a2396:	6018      	str	r0, [r3, #0]
  fast_counter = 60000;
 80a2398:	4b18      	ldr	r3, [pc, #96]	; (80a23fc <setup+0x208>)
 80a239a:	601a      	str	r2, [r3, #0]
  termEnabled = 0;
 80a239c:	2200      	movs	r2, #0
 80a239e:	4b18      	ldr	r3, [pc, #96]	; (80a2400 <setup+0x20c>)
 80a23a0:	601a      	str	r2, [r3, #0]
}
 80a23a2:	b007      	add	sp, #28
 80a23a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a23a6:	bf00      	nop
 80a23a8:	080a8786 	.word	0x080a8786
 80a23ac:	080a83bd 	.word	0x080a83bd
 80a23b0:	080a83d4 	.word	0x080a83d4
 80a23b4:	20000334 	.word	0x20000334
 80a23b8:	080a19c9 	.word	0x080a19c9
 80a23bc:	080a7a05 	.word	0x080a7a05
 80a23c0:	080a1a4d 	.word	0x080a1a4d
 80a23c4:	080a8350 	.word	0x080a8350
 80a23c8:	20000219 	.word	0x20000219
 80a23cc:	2000021a 	.word	0x2000021a
 80a23d0:	080a835e 	.word	0x080a835e
 80a23d4:	200001ac 	.word	0x200001ac
 80a23d8:	20000000 	.word	0x20000000
 80a23dc:	080a83e2 	.word	0x080a83e2
 80a23e0:	080a8477 	.word	0x080a8477
 80a23e4:	20000314 	.word	0x20000314
 80a23e8:	080a8487 	.word	0x080a8487
 80a23ec:	080a84a1 	.word	0x080a84a1
 80a23f0:	080a8337 	.word	0x080a8337
 80a23f4:	080a823c 	.word	0x080a823c
 80a23f8:	200003f8 	.word	0x200003f8
 80a23fc:	20000330 	.word	0x20000330
 80a2400:	2000036c 	.word	0x2000036c

080a2404 <loop>:
{
 80a2404:	b570      	push	{r4, r5, r6, lr}
  Blynk.run();
 80a2406:	2100      	movs	r1, #0
 80a2408:	4840      	ldr	r0, [pc, #256]	; (80a250c <loop+0x108>)
 80a240a:	f7fe ffa3 	bl	80a1354 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  fast_counter++;
 80a240e:	4a40      	ldr	r2, [pc, #256]	; (80a2510 <loop+0x10c>)
  delay(10);
 80a2410:	200a      	movs	r0, #10
  fast_counter++;
 80a2412:	6813      	ldr	r3, [r2, #0]
  tnow = getTime();
 80a2414:	4e3f      	ldr	r6, [pc, #252]	; (80a2514 <loop+0x110>)
  fast_counter++;
 80a2416:	3301      	adds	r3, #1
 80a2418:	6013      	str	r3, [r2, #0]
  delay(10);
 80a241a:	f002 fa3d 	bl	80a4898 <delay>
  tnow = getTime();
 80a241e:	f7fe fba7 	bl	80a0b70 <_Z7getTimev>
 80a2422:	6030      	str	r0, [r6, #0]
  utime = Time.now();
 80a2424:	f002 f9d1 	bl	80a47ca <_ZN9TimeClass3nowEv>
  if ((utime % 2) == 0) // every 2 seconds
 80a2428:	f010 0001 	ands.w	r0, r0, #1
 80a242c:	4c3a      	ldr	r4, [pc, #232]	; (80a2518 <loop+0x114>)
 80a242e:	d11e      	bne.n	80a246e <loop+0x6a>
    slow_counter++; 
 80a2430:	6823      	ldr	r3, [r4, #0]
 80a2432:	3301      	adds	r3, #1
 80a2434:	6023      	str	r3, [r4, #0]
    BlumenGiessen(0, ts_giessen);    
 80a2436:	4b39      	ldr	r3, [pc, #228]	; (80a251c <loop+0x118>)
 80a2438:	6819      	ldr	r1, [r3, #0]
 80a243a:	f001 f80d 	bl	80a3458 <_Z13BlumenGiessenii>
    CountDown();
 80a243e:	f001 f893 	bl	80a3568 <_Z9CountDownv>
    if (Time.minute() == 10)     // wir schlafen bis zur nächsten Stunde
 80a2442:	f002 f9df 	bl	80a4804 <_ZN9TimeClass6minuteEv>
 80a2446:	280a      	cmp	r0, #10
 80a2448:	d10e      	bne.n	80a2468 <loop+0x64>
      if ((Time.hour() > 9) | (Time.hour() < 5))
 80a244a:	f002 f9cf 	bl	80a47ec <_ZN9TimeClass4hourEv>
 80a244e:	4605      	mov	r5, r0
 80a2450:	f002 f9cc 	bl	80a47ec <_ZN9TimeClass4hourEv>
 80a2454:	2d09      	cmp	r5, #9
 80a2456:	dc01      	bgt.n	80a245c <loop+0x58>
 80a2458:	2804      	cmp	r0, #4
 80a245a:	dc51      	bgt.n	80a2500 <loop+0xfc>
        sleep(60+getSleepTime(55));
 80a245c:	2037      	movs	r0, #55	; 0x37
 80a245e:	f7fe fb9d 	bl	80a0b9c <_Z12getSleepTimei>
 80a2462:	303c      	adds	r0, #60	; 0x3c
        sleep(getSleepTime(55));
 80a2464:	f7ff fd7c 	bl	80a1f60 <_Z5sleepi>
    myDelay(1);
 80a2468:	2001      	movs	r0, #1
 80a246a:	f7ff f80b 	bl	80a1484 <_Z7myDelayi>
  if ((slow_counter % 10) == 0) // every 20 seconds
 80a246e:	210a      	movs	r1, #10
 80a2470:	6825      	ldr	r5, [r4, #0]
 80a2472:	fb95 f3f1 	sdiv	r3, r5, r1
 80a2476:	fb01 5513 	mls	r5, r1, r3, r5
 80a247a:	bb0d      	cbnz	r5, 80a24c0 <loop+0xbc>
    printStatus();
 80a247c:	f7ff fb8a 	bl	80a1b94 <_Z11printStatusv>
    dontSleepHW = checkDontSleepPin();
 80a2480:	f7fe fc2a 	bl	80a0cd8 <_Z17checkDontSleepPinv>
 80a2484:	4b26      	ldr	r3, [pc, #152]	; (80a2520 <loop+0x11c>)
    if (tnow == (5*60 + 1))
 80a2486:	6832      	ldr	r2, [r6, #0]
    dontSleepHW = checkDontSleepPin();
 80a2488:	6018      	str	r0, [r3, #0]
    if (tnow == (5*60 + 1))
 80a248a:	f240 132d 	movw	r3, #301	; 0x12d
 80a248e:	429a      	cmp	r2, r3
 80a2490:	d107      	bne.n	80a24a2 <loop+0x9e>
      conrad_rsl_switch_code(RSL4,0);
 80a2492:	4629      	mov	r1, r5
 80a2494:	2004      	movs	r0, #4
 80a2496:	f000 fd21 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
      WriteToDatabase ( "CONTROL", "RSL4 abgeschaltet");      
 80a249a:	4922      	ldr	r1, [pc, #136]	; (80a2524 <loop+0x120>)
 80a249c:	4822      	ldr	r0, [pc, #136]	; (80a2528 <loop+0x124>)
 80a249e:	f7fd fe2d 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    if (tnow == (5*60 + 2))
 80a24a2:	6833      	ldr	r3, [r6, #0]
 80a24a4:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 80a24a8:	d107      	bne.n	80a24ba <loop+0xb6>
      conrad_rsl_switch_code(RSL4,1);
 80a24aa:	2101      	movs	r1, #1
 80a24ac:	2004      	movs	r0, #4
 80a24ae:	f000 fd15 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
      WriteToDatabase ( "CONTROL", "RSL4 eingeschaltet");     
 80a24b2:	491e      	ldr	r1, [pc, #120]	; (80a252c <loop+0x128>)
 80a24b4:	481c      	ldr	r0, [pc, #112]	; (80a2528 <loop+0x124>)
 80a24b6:	f7fd fe21 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    slow_counter++;
 80a24ba:	6823      	ldr	r3, [r4, #0]
 80a24bc:	3301      	adds	r3, #1
 80a24be:	6023      	str	r3, [r4, #0]
  if (slow_counter > 300) // once per 10 minutes
 80a24c0:	6823      	ldr	r3, [r4, #0]
 80a24c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80a24c6:	dd1f      	ble.n	80a2508 <loop+0x104>
    slow_counter = 0;
 80a24c8:	2500      	movs	r5, #0
 80a24ca:	6025      	str	r5, [r4, #0]
    printSlowStatus();
 80a24cc:	f7ff fc6a 	bl	80a1da4 <_Z15printSlowStatusv>
    if (tnow > (22*60) + 30)
 80a24d0:	f240 5346 	movw	r3, #1350	; 0x546
 80a24d4:	6832      	ldr	r2, [r6, #0]
 80a24d6:	429a      	cmp	r2, r3
      done_giessen = 0; // armed for the next day
 80a24d8:	bfc8      	it	gt
 80a24da:	4b15      	ldrgt	r3, [pc, #84]	; (80a2530 <loop+0x12c>)
    if (termCounter > 0)
 80a24dc:	4a15      	ldr	r2, [pc, #84]	; (80a2534 <loop+0x130>)
      done_giessen = 0; // armed for the next day
 80a24de:	bfc8      	it	gt
 80a24e0:	601d      	strgt	r5, [r3, #0]
    if (termCounter > 0)
 80a24e2:	6813      	ldr	r3, [r2, #0]
 80a24e4:	2b00      	cmp	r3, #0
 80a24e6:	dd0f      	ble.n	80a2508 <loop+0x104>
      termCounter--;
 80a24e8:	3b01      	subs	r3, #1
 80a24ea:	6013      	str	r3, [r2, #0]
      if (termCounter == 0)
 80a24ec:	b963      	cbnz	r3, 80a2508 <loop+0x104>
        println("Terminal disabled");      
 80a24ee:	4812      	ldr	r0, [pc, #72]	; (80a2538 <loop+0x134>)
 80a24f0:	f7ff f8ba 	bl	80a1668 <_Z7printlnPc>
} // loop
 80a24f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        WriteToDatabase("CONTROL","TERMINAL disabled by timeout");
 80a24f8:	4910      	ldr	r1, [pc, #64]	; (80a253c <loop+0x138>)
 80a24fa:	480b      	ldr	r0, [pc, #44]	; (80a2528 <loop+0x124>)
 80a24fc:	f7fd bdfe 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
        sleep(getSleepTime(55));
 80a2500:	2037      	movs	r0, #55	; 0x37
 80a2502:	f7fe fb4b 	bl	80a0b9c <_Z12getSleepTimei>
 80a2506:	e7ad      	b.n	80a2464 <loop+0x60>
} // loop
 80a2508:	bd70      	pop	{r4, r5, r6, pc}
 80a250a:	bf00      	nop
 80a250c:	200001ac 	.word	0x200001ac
 80a2510:	20000330 	.word	0x20000330
 80a2514:	200003f8 	.word	0x200003f8
 80a2518:	20000350 	.word	0x20000350
 80a251c:	20000024 	.word	0x20000024
 80a2520:	2000032c 	.word	0x2000032c
 80a2524:	080a84a7 	.word	0x080a84a7
 80a2528:	080a7b9b 	.word	0x080a7b9b
 80a252c:	080a84b9 	.word	0x080a84b9
 80a2530:	20000328 	.word	0x20000328
 80a2534:	20000368 	.word	0x20000368
 80a2538:	080a84cc 	.word	0x080a84cc
 80a253c:	080a84de 	.word	0x080a84de

080a2540 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcS6_EEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a2540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2544:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80a2548:	461e      	mov	r6, r3
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a254a:	ab08      	add	r3, sp, #32
 80a254c:	2400      	movs	r4, #0
 80a254e:	4688      	mov	r8, r1
 80a2550:	9305      	str	r3, [sp, #20]
 80a2552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a2556:	4617      	mov	r7, r2
 80a2558:	4605      	mov	r5, r0
        cmd.add("vw");
 80a255a:	4910      	ldr	r1, [pc, #64]	; (80a259c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcS6_EEEviDpT_+0x5c>)
 80a255c:	a805      	add	r0, sp, #20
 80a255e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80a2562:	f7fe fa1a 	bl	80a099a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a2566:	4641      	mov	r1, r8
 80a2568:	a805      	add	r0, sp, #20
 80a256a:	f7fe fa33 	bl	80a09d4 <_ZN10BlynkParam3addEi>
        add(head);
 80a256e:	4639      	mov	r1, r7
 80a2570:	a805      	add	r0, sp, #20
 80a2572:	f7fe fa12 	bl	80a099a <_ZN10BlynkParam3addEPKc>
        add(last);
 80a2576:	4631      	mov	r1, r6
 80a2578:	a805      	add	r0, sp, #20
 80a257a:	f7fe fa0e 	bl	80a099a <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a257e:	9b06      	ldr	r3, [sp, #24]
 80a2580:	4622      	mov	r2, r4
 80a2582:	3b01      	subs	r3, #1
 80a2584:	9300      	str	r3, [sp, #0]
 80a2586:	2114      	movs	r1, #20
 80a2588:	4628      	mov	r0, r5
 80a258a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80a258e:	9b05      	ldr	r3, [sp, #20]
 80a2590:	f7fe ff92 	bl	80a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a2594:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 80a2598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a259c:	080a7c97 	.word	0x080a7c97

080a25a0 <BlynkWidgetWrite22>:
{
 80a25a0:	b510      	push	{r4, lr}
 80a25a2:	460c      	mov	r4, r1
  Blynk.virtualWrite(V22, "\nYou said:", param.asStr());
 80a25a4:	680b      	ldr	r3, [r1, #0]
 80a25a6:	4805      	ldr	r0, [pc, #20]	; (80a25bc <BlynkWidgetWrite22+0x1c>)
 80a25a8:	2116      	movs	r1, #22
 80a25aa:	4a05      	ldr	r2, [pc, #20]	; (80a25c0 <BlynkWidgetWrite22+0x20>)
 80a25ac:	f7ff ffc8 	bl	80a2540 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcS6_EEEviDpT_>
  c = *param.asStr();
 80a25b0:	6823      	ldr	r3, [r4, #0]
}
 80a25b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dispatchCommand(c);
 80a25b6:	7818      	ldrb	r0, [r3, #0]
 80a25b8:	f7fd be5a 	b.w	80a0270 <_Z15dispatchCommandc>
 80a25bc:	200001ac 	.word	0x200001ac
 80a25c0:	080a84fb 	.word	0x080a84fb

080a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a25c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a25c6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a25ca:	ab08      	add	r3, sp, #32
 80a25cc:	2400      	movs	r4, #0
 80a25ce:	460f      	mov	r7, r1
 80a25d0:	9305      	str	r3, [sp, #20]
 80a25d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a25d6:	4616      	mov	r6, r2
 80a25d8:	4605      	mov	r5, r0
        cmd.add("vw");
 80a25da:	490e      	ldr	r1, [pc, #56]	; (80a2614 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
 80a25dc:	a805      	add	r0, sp, #20
 80a25de:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80a25e2:	f7fe f9da 	bl	80a099a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a25e6:	4639      	mov	r1, r7
 80a25e8:	a805      	add	r0, sp, #20
 80a25ea:	f7fe f9f3 	bl	80a09d4 <_ZN10BlynkParam3addEi>
        add(last);
 80a25ee:	4631      	mov	r1, r6
 80a25f0:	a805      	add	r0, sp, #20
 80a25f2:	f7fe f9ef 	bl	80a09d4 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a25f6:	9b06      	ldr	r3, [sp, #24]
 80a25f8:	4622      	mov	r2, r4
 80a25fa:	3b01      	subs	r3, #1
 80a25fc:	9300      	str	r3, [sp, #0]
 80a25fe:	2114      	movs	r1, #20
 80a2600:	4628      	mov	r0, r5
 80a2602:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80a2606:	9b05      	ldr	r3, [sp, #20]
 80a2608:	f7fe ff56 	bl	80a14b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a260c:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 80a2610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2612:	bf00      	nop
 80a2614:	080a7c97 	.word	0x080a7c97

080a2618 <BlynkWidgetWrite1>:
{
 80a2618:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a261a:	6808      	ldr	r0, [r1, #0]
 80a261c:	f7fe f965 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2620:	2801      	cmp	r0, #1
 80a2622:	4604      	mov	r4, r0
 80a2624:	d10b      	bne.n	80a263e <BlynkWidgetWrite1+0x26>
    println(" rsl 9 ein ");
 80a2626:	4806      	ldr	r0, [pc, #24]	; (80a2640 <BlynkWidgetWrite1+0x28>)
 80a2628:	f7ff f81e 	bl	80a1668 <_Z7printlnPc>
    conrad_rsl_switch_code(9, EIN);
 80a262c:	4621      	mov	r1, r4
 80a262e:	2009      	movs	r0, #9
 80a2630:	f000 fc54 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V1, 255);
 80a2634:	22ff      	movs	r2, #255	; 0xff
 80a2636:	4621      	mov	r1, r4
 80a2638:	4802      	ldr	r0, [pc, #8]	; (80a2644 <BlynkWidgetWrite1+0x2c>)
 80a263a:	f7ff ffc3 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a263e:	bd10      	pop	{r4, pc}
 80a2640:	080a8506 	.word	0x080a8506
 80a2644:	200001ac 	.word	0x200001ac

080a2648 <BlynkWidgetWrite2>:
{
 80a2648:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a264a:	6808      	ldr	r0, [r1, #0]
 80a264c:	f7fe f94d 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2650:	2801      	cmp	r0, #1
 80a2652:	d10b      	bne.n	80a266c <BlynkWidgetWrite2+0x24>
    println(" rsl 9 aus ");
 80a2654:	4806      	ldr	r0, [pc, #24]	; (80a2670 <BlynkWidgetWrite2+0x28>)
 80a2656:	f7ff f807 	bl	80a1668 <_Z7printlnPc>
    conrad_rsl_switch_code(9, AUS);
 80a265a:	2100      	movs	r1, #0
 80a265c:	2009      	movs	r0, #9
 80a265e:	f000 fc3d 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V2, 255);
 80a2662:	22ff      	movs	r2, #255	; 0xff
 80a2664:	2102      	movs	r1, #2
 80a2666:	4803      	ldr	r0, [pc, #12]	; (80a2674 <BlynkWidgetWrite2+0x2c>)
 80a2668:	f7ff ffac 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a266c:	bd08      	pop	{r3, pc}
 80a266e:	bf00      	nop
 80a2670:	080a8512 	.word	0x080a8512
 80a2674:	200001ac 	.word	0x200001ac

080a2678 <BlynkWidgetWrite3>:
{
 80a2678:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a267a:	6808      	ldr	r0, [r1, #0]
 80a267c:	f7fe f935 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2680:	2801      	cmp	r0, #1
 80a2682:	4604      	mov	r4, r0
 80a2684:	d10b      	bne.n	80a269e <BlynkWidgetWrite3+0x26>
    println(" rsl 8 ein ");
 80a2686:	4806      	ldr	r0, [pc, #24]	; (80a26a0 <BlynkWidgetWrite3+0x28>)
 80a2688:	f7fe ffee 	bl	80a1668 <_Z7printlnPc>
    conrad_rsl_switch_code(8, EIN);
 80a268c:	4621      	mov	r1, r4
 80a268e:	2008      	movs	r0, #8
 80a2690:	f000 fc24 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 255);
 80a2694:	22ff      	movs	r2, #255	; 0xff
 80a2696:	2114      	movs	r1, #20
 80a2698:	4802      	ldr	r0, [pc, #8]	; (80a26a4 <BlynkWidgetWrite3+0x2c>)
 80a269a:	f7ff ff93 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a269e:	bd10      	pop	{r4, pc}
 80a26a0:	080a851e 	.word	0x080a851e
 80a26a4:	200001ac 	.word	0x200001ac

080a26a8 <BlynkWidgetWrite4>:
{
 80a26a8:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a26aa:	6808      	ldr	r0, [r1, #0]
 80a26ac:	f7fe f91d 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a26b0:	2801      	cmp	r0, #1
 80a26b2:	d10d      	bne.n	80a26d0 <BlynkWidgetWrite4+0x28>
    timeStamp();
 80a26b4:	f7fe fb26 	bl	80a0d04 <_Z9timeStampv>
    println(" rsl 8 aus ");
 80a26b8:	4806      	ldr	r0, [pc, #24]	; (80a26d4 <BlynkWidgetWrite4+0x2c>)
 80a26ba:	f7fe ffd5 	bl	80a1668 <_Z7printlnPc>
    conrad_rsl_switch_code(8, AUS);
 80a26be:	2100      	movs	r1, #0
 80a26c0:	2008      	movs	r0, #8
 80a26c2:	f000 fc0b 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 0);
 80a26c6:	2200      	movs	r2, #0
 80a26c8:	2114      	movs	r1, #20
 80a26ca:	4803      	ldr	r0, [pc, #12]	; (80a26d8 <BlynkWidgetWrite4+0x30>)
 80a26cc:	f7ff ff7a 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a26d0:	bd08      	pop	{r3, pc}
 80a26d2:	bf00      	nop
 80a26d4:	080a852a 	.word	0x080a852a
 80a26d8:	200001ac 	.word	0x200001ac

080a26dc <BlynkWidgetWrite5>:
{
 80a26dc:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a26de:	6808      	ldr	r0, [r1, #0]
 80a26e0:	f7fe f903 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a26e4:	2801      	cmp	r0, #1
 80a26e6:	4604      	mov	r4, r0
 80a26e8:	d10b      	bne.n	80a2702 <BlynkWidgetWrite5+0x26>
    println(" rsl 1 ein ");
 80a26ea:	4806      	ldr	r0, [pc, #24]	; (80a2704 <BlynkWidgetWrite5+0x28>)
 80a26ec:	f7fe ffbc 	bl	80a1668 <_Z7printlnPc>
    conrad_rsl_switch_code(RSL1, EIN);
 80a26f0:	4621      	mov	r1, r4
 80a26f2:	4620      	mov	r0, r4
 80a26f4:	f000 fbf2 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 255);
 80a26f8:	22ff      	movs	r2, #255	; 0xff
 80a26fa:	2114      	movs	r1, #20
 80a26fc:	4802      	ldr	r0, [pc, #8]	; (80a2708 <BlynkWidgetWrite5+0x2c>)
 80a26fe:	f7ff ff61 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2702:	bd10      	pop	{r4, pc}
 80a2704:	080a8536 	.word	0x080a8536
 80a2708:	200001ac 	.word	0x200001ac

080a270c <BlynkWidgetWrite6>:
{
 80a270c:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a270e:	6808      	ldr	r0, [r1, #0]
 80a2710:	f7fe f8eb 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2714:	2801      	cmp	r0, #1
 80a2716:	4604      	mov	r4, r0
 80a2718:	d10b      	bne.n	80a2732 <BlynkWidgetWrite6+0x26>
    println(" rsl 1 aus ");
 80a271a:	4806      	ldr	r0, [pc, #24]	; (80a2734 <BlynkWidgetWrite6+0x28>)
 80a271c:	f7fe ffa4 	bl	80a1668 <_Z7printlnPc>
    conrad_rsl_switch_code(RSL1, AUS);
 80a2720:	2100      	movs	r1, #0
 80a2722:	4620      	mov	r0, r4
 80a2724:	f000 fbda 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 0);
 80a2728:	2200      	movs	r2, #0
 80a272a:	2114      	movs	r1, #20
 80a272c:	4802      	ldr	r0, [pc, #8]	; (80a2738 <BlynkWidgetWrite6+0x2c>)
 80a272e:	f7ff ff49 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2732:	bd10      	pop	{r4, pc}
 80a2734:	080a8542 	.word	0x080a8542
 80a2738:	200001ac 	.word	0x200001ac

080a273c <BlynkWidgetWrite7>:
{
 80a273c:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a273e:	6808      	ldr	r0, [r1, #0]
 80a2740:	f7fe f8d3 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2744:	2801      	cmp	r0, #1
 80a2746:	d10b      	bne.n	80a2760 <BlynkWidgetWrite7+0x24>
    done_giessen = 0;
 80a2748:	2200      	movs	r2, #0
 80a274a:	4b06      	ldr	r3, [pc, #24]	; (80a2764 <BlynkWidgetWrite7+0x28>)
 80a274c:	601a      	str	r2, [r3, #0]
    BlumenGiessen(1, ts_giessen);
 80a274e:	4b06      	ldr	r3, [pc, #24]	; (80a2768 <BlynkWidgetWrite7+0x2c>)
 80a2750:	6819      	ldr	r1, [r3, #0]
 80a2752:	f000 fe81 	bl	80a3458 <_Z13BlumenGiessenii>
    Blynk.virtualWrite(V20, 255);
 80a2756:	22ff      	movs	r2, #255	; 0xff
 80a2758:	2114      	movs	r1, #20
 80a275a:	4804      	ldr	r0, [pc, #16]	; (80a276c <BlynkWidgetWrite7+0x30>)
 80a275c:	f7ff ff32 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2760:	bd08      	pop	{r3, pc}
 80a2762:	bf00      	nop
 80a2764:	20000328 	.word	0x20000328
 80a2768:	20000024 	.word	0x20000024
 80a276c:	200001ac 	.word	0x200001ac

080a2770 <BlynkWidgetWrite8>:
{
 80a2770:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a2772:	6808      	ldr	r0, [r1, #0]
 80a2774:	f7fe f8b9 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2778:	2801      	cmp	r0, #1
 80a277a:	d110      	bne.n	80a279e <BlynkWidgetWrite8+0x2e>
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a277c:	2100      	movs	r1, #0
 80a277e:	4608      	mov	r0, r1
 80a2780:	f000 fe48 	bl	80a3414 <_Z17switch_pumpe_funkii>
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a2784:	2100      	movs	r1, #0
    st_funk_pumpe = switch_pumpe_funk(OFF, 0);
 80a2786:	4b06      	ldr	r3, [pc, #24]	; (80a27a0 <BlynkWidgetWrite8+0x30>)
 80a2788:	6018      	str	r0, [r3, #0]
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a278a:	4608      	mov	r0, r1
 80a278c:	f000 fcde 	bl	80a314c <_Z17switch_pumpe_mainii>
 80a2790:	4b04      	ldr	r3, [pc, #16]	; (80a27a4 <BlynkWidgetWrite8+0x34>)
    Blynk.virtualWrite(V20, 0);
 80a2792:	2200      	movs	r2, #0
    st_main_pumpe = switch_pumpe_main(OFF, 0);
 80a2794:	6018      	str	r0, [r3, #0]
    Blynk.virtualWrite(V20, 0);
 80a2796:	2114      	movs	r1, #20
 80a2798:	4803      	ldr	r0, [pc, #12]	; (80a27a8 <BlynkWidgetWrite8+0x38>)
 80a279a:	f7ff ff13 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a279e:	bd08      	pop	{r3, pc}
 80a27a0:	20000354 	.word	0x20000354
 80a27a4:	20000358 	.word	0x20000358
 80a27a8:	200001ac 	.word	0x200001ac

080a27ac <BlynkWidgetWrite9>:
{
 80a27ac:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a27ae:	6808      	ldr	r0, [r1, #0]
 80a27b0:	f7fe f89b 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a27b4:	2801      	cmp	r0, #1
 80a27b6:	4604      	mov	r4, r0
 80a27b8:	d10b      	bne.n	80a27d2 <BlynkWidgetWrite9+0x26>
    println(" rsl 3 ein ");
 80a27ba:	4806      	ldr	r0, [pc, #24]	; (80a27d4 <BlynkWidgetWrite9+0x28>)
 80a27bc:	f7fe ff54 	bl	80a1668 <_Z7printlnPc>
    conrad_rsl_switch_code(RSL3, EIN);
 80a27c0:	4621      	mov	r1, r4
 80a27c2:	2003      	movs	r0, #3
 80a27c4:	f000 fb8a 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 255);
 80a27c8:	22ff      	movs	r2, #255	; 0xff
 80a27ca:	2114      	movs	r1, #20
 80a27cc:	4802      	ldr	r0, [pc, #8]	; (80a27d8 <BlynkWidgetWrite9+0x2c>)
 80a27ce:	f7ff fef9 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a27d2:	bd10      	pop	{r4, pc}
 80a27d4:	080a854e 	.word	0x080a854e
 80a27d8:	200001ac 	.word	0x200001ac

080a27dc <BlynkWidgetWrite10>:
{
 80a27dc:	b508      	push	{r3, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a27de:	6808      	ldr	r0, [r1, #0]
 80a27e0:	f7fe f883 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a27e4:	2801      	cmp	r0, #1
 80a27e6:	d10b      	bne.n	80a2800 <BlynkWidgetWrite10+0x24>
    println(" rsl 3 aus ");
 80a27e8:	4806      	ldr	r0, [pc, #24]	; (80a2804 <BlynkWidgetWrite10+0x28>)
 80a27ea:	f7fe ff3d 	bl	80a1668 <_Z7printlnPc>
    conrad_rsl_switch_code(RSL3, AUS);
 80a27ee:	2100      	movs	r1, #0
 80a27f0:	2003      	movs	r0, #3
 80a27f2:	f000 fb73 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
    Blynk.virtualWrite(V20, 0);
 80a27f6:	2200      	movs	r2, #0
 80a27f8:	2114      	movs	r1, #20
 80a27fa:	4803      	ldr	r0, [pc, #12]	; (80a2808 <BlynkWidgetWrite10+0x2c>)
 80a27fc:	f7ff fee2 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2800:	bd08      	pop	{r3, pc}
 80a2802:	bf00      	nop
 80a2804:	080a855a 	.word	0x080a855a
 80a2808:	200001ac 	.word	0x200001ac

080a280c <BlynkWidgetWrite11>:
{
 80a280c:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a280e:	6808      	ldr	r0, [r1, #0]
 80a2810:	f7fe f86b 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2814:	2801      	cmp	r0, #1
 80a2816:	4604      	mov	r4, r0
 80a2818:	d113      	bne.n	80a2842 <BlynkWidgetWrite11+0x36>
    println(" weihnachten ein  ");
 80a281a:	480a      	ldr	r0, [pc, #40]	; (80a2844 <BlynkWidgetWrite11+0x38>)
 80a281c:	f7fe ff24 	bl	80a1668 <_Z7printlnPc>
    elro_switch(1, EIN);
 80a2820:	4621      	mov	r1, r4
 80a2822:	4620      	mov	r0, r4
 80a2824:	f000 fbfc 	bl	80a3020 <_Z11elro_switchii>
    elro_switch(2, EIN);
 80a2828:	4621      	mov	r1, r4
 80a282a:	2002      	movs	r0, #2
 80a282c:	f000 fbf8 	bl	80a3020 <_Z11elro_switchii>
    elro_switch(3, EIN);
 80a2830:	4621      	mov	r1, r4
 80a2832:	2003      	movs	r0, #3
 80a2834:	f000 fbf4 	bl	80a3020 <_Z11elro_switchii>
    Blynk.virtualWrite(V20, 255);
 80a2838:	22ff      	movs	r2, #255	; 0xff
 80a283a:	2114      	movs	r1, #20
 80a283c:	4802      	ldr	r0, [pc, #8]	; (80a2848 <BlynkWidgetWrite11+0x3c>)
 80a283e:	f7ff fec1 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2842:	bd10      	pop	{r4, pc}
 80a2844:	080a8566 	.word	0x080a8566
 80a2848:	200001ac 	.word	0x200001ac

080a284c <BlynkWidgetWrite12>:
{
 80a284c:	b510      	push	{r4, lr}
  if (param.asInt() == 1) // Schalter nieder gedrückt ?
 80a284e:	6808      	ldr	r0, [r1, #0]
 80a2850:	f7fe f84b 	bl	80a08ea <_ZNK10BlynkParam5asIntEv.isra.0>
 80a2854:	2801      	cmp	r0, #1
 80a2856:	4604      	mov	r4, r0
 80a2858:	d113      	bne.n	80a2882 <BlynkWidgetWrite12+0x36>
    println(" weihnachten aus  ");
 80a285a:	480a      	ldr	r0, [pc, #40]	; (80a2884 <BlynkWidgetWrite12+0x38>)
 80a285c:	f7fe ff04 	bl	80a1668 <_Z7printlnPc>
    elro_switch(1, AUS);
 80a2860:	2100      	movs	r1, #0
 80a2862:	4620      	mov	r0, r4
 80a2864:	f000 fbdc 	bl	80a3020 <_Z11elro_switchii>
    elro_switch(2, AUS);
 80a2868:	2100      	movs	r1, #0
 80a286a:	2002      	movs	r0, #2
 80a286c:	f000 fbd8 	bl	80a3020 <_Z11elro_switchii>
    elro_switch(3, AUS);
 80a2870:	2100      	movs	r1, #0
 80a2872:	2003      	movs	r0, #3
 80a2874:	f000 fbd4 	bl	80a3020 <_Z11elro_switchii>
    Blynk.virtualWrite(V20, 0);
 80a2878:	2200      	movs	r2, #0
 80a287a:	2114      	movs	r1, #20
 80a287c:	4802      	ldr	r0, [pc, #8]	; (80a2888 <BlynkWidgetWrite12+0x3c>)
 80a287e:	f7ff fea1 	bl	80a25c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
 80a2882:	bd10      	pop	{r4, pc}
 80a2884:	080a8579 	.word	0x080a8579
 80a2888:	200001ac 	.word	0x200001ac

080a288c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz>:
}
 80a288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 80a288e:	2400      	movs	r4, #0
 80a2890:	2701      	movs	r7, #1
 80a2892:	4b24      	ldr	r3, [pc, #144]	; (80a2924 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x98>)
        : domain(NULL), port(0)
 80a2894:	4d24      	ldr	r5, [pc, #144]	; (80a2928 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x9c>)
 80a2896:	601c      	str	r4, [r3, #0]
 80a2898:	4b24      	ldr	r3, [pc, #144]	; (80a292c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xa0>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
 80a289a:	4e25      	ldr	r6, [pc, #148]	; (80a2930 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xa4>)
 80a289c:	701c      	strb	r4, [r3, #0]
 80a289e:	4b25      	ldr	r3, [pc, #148]	; (80a2934 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xa8>)
 80a28a0:	4628      	mov	r0, r5
 80a28a2:	701f      	strb	r7, [r3, #0]
 80a28a4:	f001 fd0e 	bl	80a42c4 <_ZN9TCPClientC1Ev>
 80a28a8:	f105 001c 	add.w	r0, r5, #28
 80a28ac:	f002 fb94 	bl	80a4fd8 <_ZN9IPAddressC1Ev>
 80a28b0:	4632      	mov	r2, r6
 80a28b2:	4921      	ldr	r1, [pc, #132]	; (80a2938 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xac>)
 80a28b4:	636c      	str	r4, [r5, #52]	; 0x34
 80a28b6:	872c      	strh	r4, [r5, #56]	; 0x38
 80a28b8:	4628      	mov	r0, r5
 80a28ba:	f002 ff79 	bl	80a57b0 <__aeabi_atexit>
        , state(CONNECTING)
 80a28be:	4b1f      	ldr	r3, [pc, #124]	; (80a293c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xb0>)
        set_system_mode(mode);
 80a28c0:	2003      	movs	r0, #3
 80a28c2:	e9c3 5400 	strd	r5, r4, [r3]
 80a28c6:	e9c3 4402 	strd	r4, r4, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 80a28ca:	4d1d      	ldr	r5, [pc, #116]	; (80a2940 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xb4>)
 80a28cc:	e9c3 4404 	strd	r4, r4, [r3, #16]
 80a28d0:	619c      	str	r4, [r3, #24]
 80a28d2:	839c      	strh	r4, [r3, #28]
    SleepResult() {}
 80a28d4:	4b1b      	ldr	r3, [pc, #108]	; (80a2944 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 80a28d6:	e9c5 4400 	strd	r4, r4, [r5]
    SleepResult() {}
 80a28da:	60ab      	str	r3, [r5, #8]
        set_system_mode(mode);
 80a28dc:	f001 f8a0 	bl	80a3a20 <set_system_mode>
SYSTEM_MODE(MANUAL);
 80a28e0:	4632      	mov	r2, r6
 80a28e2:	4628      	mov	r0, r5
 80a28e4:	4918      	ldr	r1, [pc, #96]	; (80a2948 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xbc>)
String hwID;
 80a28e6:	4d19      	ldr	r5, [pc, #100]	; (80a294c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xc0>)
SYSTEM_MODE(MANUAL);
 80a28e8:	f002 ff62 	bl	80a57b0 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 80a28ec:	4621      	mov	r1, r4
 80a28ee:	4638      	mov	r0, r7
 80a28f0:	f001 f8a6 	bl	80a3a40 <system_thread_set_state>
String hwID;
 80a28f4:	4628      	mov	r0, r5
 80a28f6:	4916      	ldr	r1, [pc, #88]	; (80a2950 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xc4>)
 80a28f8:	f001 fd7c 	bl	80a43f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a28fc:	4632      	mov	r2, r6
 80a28fe:	4628      	mov	r0, r5
 80a2900:	4914      	ldr	r1, [pc, #80]	; (80a2954 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xc8>)
 80a2902:	f002 ff55 	bl	80a57b0 <__aeabi_atexit>
#include <Blynk/BlynkApi.h>

class BlynkWidgetBase
{
public:
    BlynkWidgetBase(uint8_t vPin) : mPin(vPin) {}
 80a2906:	2316      	movs	r3, #22
 80a2908:	4813      	ldr	r0, [pc, #76]	; (80a2958 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xcc>)
WidgetTerminal terminal(V22);
 80a290a:	4632      	mov	r2, r6
 80a290c:	7203      	strb	r3, [r0, #8]
        , mOutQty(0)
 80a290e:	4b13      	ldr	r3, [pc, #76]	; (80a295c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xd0>)
    Print() : write_error(0) {}
 80a2910:	6044      	str	r4, [r0, #4]
 80a2912:	6003      	str	r3, [r0, #0]
 80a2914:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
 80a2918:	4911      	ldr	r1, [pc, #68]	; (80a2960 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0xd4>)
}
 80a291a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
WidgetTerminal terminal(V22);
 80a291e:	f002 bf47 	b.w	80a57b0 <__aeabi_atexit>
 80a2922:	bf00      	nop
 80a2924:	20000214 	.word	0x20000214
 80a2928:	200001d8 	.word	0x200001d8
 80a292c:	20000218 	.word	0x20000218
 80a2930:	20000150 	.word	0x20000150
 80a2934:	20000219 	.word	0x20000219
 80a2938:	080a0d91 	.word	0x080a0d91
 80a293c:	200001ac 	.word	0x200001ac
 80a2940:	200001cc 	.word	0x200001cc
 80a2944:	ffff0000 	.word	0xffff0000
 80a2948:	080a08bb 	.word	0x080a08bb
 80a294c:	20000334 	.word	0x20000334
 80a2950:	080a8476 	.word	0x080a8476
 80a2954:	080a4361 	.word	0x080a4361
 80a2958:	20000370 	.word	0x20000370
 80a295c:	080a8594 	.word	0x080a8594
 80a2960:	080a08ab 	.word	0x080a08ab

080a2964 <digitalWriteFast>:
#endif

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
 80a2964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2966:	4d27      	ldr	r5, [pc, #156]	; (80a2a04 <digitalWriteFast+0xa0>)
 80a2968:	4604      	mov	r4, r0
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a296a:	782b      	ldrb	r3, [r5, #0]
 80a296c:	4e26      	ldr	r6, [pc, #152]	; (80a2a08 <digitalWriteFast+0xa4>)
 80a296e:	f3bf 8f5b 	dmb	ish
    if (value)
 80a2972:	b319      	cbz	r1, 80a29bc <digitalWriteFast+0x58>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a2974:	07d8      	lsls	r0, r3, #31
 80a2976:	d409      	bmi.n	80a298c <digitalWriteFast+0x28>
 80a2978:	4628      	mov	r0, r5
 80a297a:	f7fd fb92 	bl	80a00a2 <__cxa_guard_acquire>
 80a297e:	b128      	cbz	r0, 80a298c <digitalWriteFast+0x28>
 80a2980:	f000 fe7c 	bl	80a367c <HAL_Pin_Map>
 80a2984:	6030      	str	r0, [r6, #0]
 80a2986:	4628      	mov	r0, r5
 80a2988:	f7fd fb90 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a298c:	201c      	movs	r0, #28
 80a298e:	4344      	muls	r4, r0
 80a2990:	6837      	ldr	r7, [r6, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a2992:	782b      	ldrb	r3, [r5, #0]
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a2994:	4427      	add	r7, r4
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a2996:	07d9      	lsls	r1, r3, #31
 80a2998:	f3bf 8f5b 	dmb	ish
 80a299c:	d409      	bmi.n	80a29b2 <digitalWriteFast+0x4e>
 80a299e:	4819      	ldr	r0, [pc, #100]	; (80a2a04 <digitalWriteFast+0xa0>)
 80a29a0:	f7fd fb7f 	bl	80a00a2 <__cxa_guard_acquire>
 80a29a4:	b128      	cbz	r0, 80a29b2 <digitalWriteFast+0x4e>
 80a29a6:	f000 fe69 	bl	80a367c <HAL_Pin_Map>
 80a29aa:	6030      	str	r0, [r6, #0]
 80a29ac:	4815      	ldr	r0, [pc, #84]	; (80a2a04 <digitalWriteFast+0xa0>)
 80a29ae:	f7fd fb7d 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a29b2:	6833      	ldr	r3, [r6, #0]
 80a29b4:	88ba      	ldrh	r2, [r7, #4]
 80a29b6:	591b      	ldr	r3, [r3, r4]
 80a29b8:	831a      	strh	r2, [r3, #24]
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
 80a29ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a29bc:	07da      	lsls	r2, r3, #31
 80a29be:	d409      	bmi.n	80a29d4 <digitalWriteFast+0x70>
 80a29c0:	4628      	mov	r0, r5
 80a29c2:	f7fd fb6e 	bl	80a00a2 <__cxa_guard_acquire>
 80a29c6:	b128      	cbz	r0, 80a29d4 <digitalWriteFast+0x70>
 80a29c8:	f000 fe58 	bl	80a367c <HAL_Pin_Map>
 80a29cc:	6030      	str	r0, [r6, #0]
 80a29ce:	4628      	mov	r0, r5
 80a29d0:	f7fd fb6c 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a29d4:	201c      	movs	r0, #28
 80a29d6:	4344      	muls	r4, r0
 80a29d8:	6837      	ldr	r7, [r6, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a29da:	782b      	ldrb	r3, [r5, #0]
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a29dc:	4427      	add	r7, r4
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a29de:	07db      	lsls	r3, r3, #31
 80a29e0:	f3bf 8f5b 	dmb	ish
 80a29e4:	d409      	bmi.n	80a29fa <digitalWriteFast+0x96>
 80a29e6:	4807      	ldr	r0, [pc, #28]	; (80a2a04 <digitalWriteFast+0xa0>)
 80a29e8:	f7fd fb5b 	bl	80a00a2 <__cxa_guard_acquire>
 80a29ec:	b128      	cbz	r0, 80a29fa <digitalWriteFast+0x96>
 80a29ee:	f000 fe45 	bl	80a367c <HAL_Pin_Map>
 80a29f2:	6030      	str	r0, [r6, #0]
 80a29f4:	4803      	ldr	r0, [pc, #12]	; (80a2a04 <digitalWriteFast+0xa0>)
 80a29f6:	f7fd fb59 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a29fa:	6833      	ldr	r3, [r6, #0]
 80a29fc:	88ba      	ldrh	r2, [r7, #4]
 80a29fe:	591b      	ldr	r3, [r3, r4]
 80a2a00:	835a      	strh	r2, [r3, #26]
}
 80a2a02:	e7da      	b.n	80a29ba <digitalWriteFast+0x56>
 80a2a04:	20000404 	.word	0x20000404
 80a2a08:	20000408 	.word	0x20000408

080a2a0c <_Z17ultra_sonic_setupv>:


#include "05_ultrasonic.h"

 void ultra_sonic_setup()
 {
 80a2a0c:	b508      	push	{r3, lr}
   	// Initialize pins for sensor
   	pinMode(trigPin, OUTPUT);
 80a2a0e:	2101      	movs	r1, #1
 80a2a10:	2003      	movs	r0, #3
 80a2a12:	f002 fde5 	bl	80a55e0 <pinMode>
   	digitalWriteFast(trigPin, LOW);
 80a2a16:	2003      	movs	r0, #3
 80a2a18:	2100      	movs	r1, #0
 80a2a1a:	f7ff ffa3 	bl	80a2964 <digitalWriteFast>
   	delay(50);
 }
 80a2a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	delay(50);
 80a2a22:	2032      	movs	r0, #50	; 0x32
 80a2a24:	f001 bf38 	b.w	80a4898 <delay>

080a2a28 <_Z16ultra_sonic_pingv>:


 uint32_t ultra_sonic_ping()
 {
 80a2a28:	b508      	push	{r3, lr}
   	uint32_t duration;
   	pinMode(echoPin, INPUT);
 80a2a2a:	2100      	movs	r1, #0
 80a2a2c:	2004      	movs	r0, #4
 80a2a2e:	f002 fdd7 	bl	80a55e0 <pinMode>
   	pinMode(trigPin, OUTPUT);
 80a2a32:	2101      	movs	r1, #1
 80a2a34:	2003      	movs	r0, #3
 80a2a36:	f002 fdd3 	bl	80a55e0 <pinMode>

   	// The sensor is triggered by a HIGH pulse of 10 or more microseconds.
   	digitalWriteFast(trigPin, HIGH);
 80a2a3a:	2101      	movs	r1, #1
 80a2a3c:	2003      	movs	r0, #3
 80a2a3e:	f7ff ff91 	bl	80a2964 <digitalWriteFast>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a2a42:	200a      	movs	r0, #10
 80a2a44:	f000 fe82 	bl	80a374c <HAL_Delay_Microseconds>
   	delayMicroseconds(10);
   	digitalWriteFast(trigPin, LOW);
 80a2a48:	2100      	movs	r1, #0
 80a2a4a:	2003      	movs	r0, #3
 80a2a4c:	f7ff ff8a 	bl	80a2964 <digitalWriteFast>

   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin

   	return duration;
 }
 80a2a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	duration = pulseIn(echoPin, HIGH); // Time in microseconds to recieve a ping back on the echo pin
 80a2a54:	2101      	movs	r1, #1
 80a2a56:	2004      	movs	r0, #4
 80a2a58:	f002 be3c 	b.w	80a56d4 <pulseIn>

080a2a5c <_Z6uMillim>:
uint32_t uMilli(uint32_t microseconds)
{
     // The speed of sound is 340 m/s or 29 microseconds per centimeter.
     // The ping travels out and back, so to find the distance of the
     // object we take half of the distance travelled.
     return ( 10 * microseconds / 29 / 2);
 80a2a5c:	230a      	movs	r3, #10
 80a2a5e:	4358      	muls	r0, r3
}
 80a2a60:	233a      	movs	r3, #58	; 0x3a
 80a2a62:	fbb0 f0f3 	udiv	r0, r0, r3
 80a2a66:	4770      	bx	lr

080a2a68 <_ZN7OneWire16pinModeFastInputEv.isra.0>:
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a2a68:	2100      	movs	r1, #0
 80a2a6a:	f000 be17 	b.w	80a369c <HAL_Pin_Mode>

080a2a6e <_ZN7OneWire17pinModeFastOutputEv.isra.0>:
      HAL_Pin_Mode(_pin, OUTPUT);
 80a2a6e:	2101      	movs	r1, #1
 80a2a70:	f000 be14 	b.w	80a369c <HAL_Pin_Mode>

080a2a74 <_ZN7OneWire11write_bytesEPKhtb.part.0>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
 80a2a74:	b510      	push	{r4, lr}
 80a2a76:	4604      	mov	r4, r0
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
        noInterrupts();
 80a2a78:	f002 fbc0 	bl	80a51fc <_Z12noInterruptsv>
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a2a7c:	221c      	movs	r2, #28
 80a2a7e:	8823      	ldrh	r3, [r4, #0]
 80a2a80:	4353      	muls	r3, r2
 80a2a82:	6862      	ldr	r2, [r4, #4]
 80a2a84:	18d1      	adds	r1, r2, r3
 80a2a86:	58d3      	ldr	r3, [r2, r3]
 80a2a88:	888a      	ldrh	r2, [r1, #4]
 80a2a8a:	831a      	strh	r2, [r3, #24]

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True
 80a2a8c:	8820      	ldrh	r0, [r4, #0]
 80a2a8e:	f7ff ffee 	bl	80a2a6e <_ZN7OneWire17pinModeFastOutputEv.isra.0>

        interrupts();
    }
}
 80a2a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        interrupts();
 80a2a96:	f002 bbb3 	b.w	80a5200 <_Z10interruptsv>

080a2a9a <_ZN7OneWire19digitalWriteFastLowEv>:
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a2a9a:	221c      	movs	r2, #28
 80a2a9c:	8803      	ldrh	r3, [r0, #0]
 80a2a9e:	4353      	muls	r3, r2
 80a2aa0:	6842      	ldr	r2, [r0, #4]
 80a2aa2:	18d1      	adds	r1, r2, r3
 80a2aa4:	58d3      	ldr	r3, [r2, r3]
 80a2aa6:	888a      	ldrh	r2, [r1, #4]
 80a2aa8:	835a      	strh	r2, [r3, #26]
    }
 80a2aaa:	4770      	bx	lr

080a2aac <_ZN7OneWireC1Et>:
OneWire::OneWire(uint16_t pin)
 80a2aac:	b538      	push	{r3, r4, r5, lr}
 80a2aae:	4604      	mov	r4, r0
 80a2ab0:	460d      	mov	r5, r1
 80a2ab2:	f000 fde3 	bl	80a367c <HAL_Pin_Map>
    pinMode(pin, INPUT);
 80a2ab6:	2100      	movs	r1, #0
OneWire::OneWire(uint16_t pin)
 80a2ab8:	6060      	str	r0, [r4, #4]
    pinMode(pin, INPUT);
 80a2aba:	4628      	mov	r0, r5
 80a2abc:	f002 fd90 	bl	80a55e0 <pinMode>
}
 80a2ac0:	4620      	mov	r0, r4
    _pin = pin;
 80a2ac2:	8025      	strh	r5, [r4, #0]
}
 80a2ac4:	bd38      	pop	{r3, r4, r5, pc}

080a2ac6 <_ZN7OneWire5resetEv>:
{
 80a2ac6:	b538      	push	{r3, r4, r5, lr}
 80a2ac8:	4605      	mov	r5, r0
    noInterrupts();
 80a2aca:	f002 fb97 	bl	80a51fc <_Z12noInterruptsv>
    pinModeFastInput();
 80a2ace:	8828      	ldrh	r0, [r5, #0]
 80a2ad0:	f7ff ffca 	bl	80a2a68 <_ZN7OneWire16pinModeFastInputEv.isra.0>
    interrupts();
 80a2ad4:	247d      	movs	r4, #125	; 0x7d
 80a2ad6:	f002 fb93 	bl	80a5200 <_Z10interruptsv>
        if (--retries == 0) return 0;
 80a2ada:	3c01      	subs	r4, #1
 80a2adc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a2ae0:	d02b      	beq.n	80a2b3a <_ZN7OneWire5resetEv+0x74>
 80a2ae2:	2002      	movs	r0, #2
 80a2ae4:	f000 fe32 	bl	80a374c <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a2ae8:	8828      	ldrh	r0, [r5, #0]
 80a2aea:	f000 fdef 	bl	80a36cc <HAL_GPIO_Read>
    } while ( !digitalReadFast());
 80a2aee:	b2c0      	uxtb	r0, r0
 80a2af0:	2800      	cmp	r0, #0
 80a2af2:	d0f2      	beq.n	80a2ada <_ZN7OneWire5resetEv+0x14>
    noInterrupts();
 80a2af4:	f002 fb82 	bl	80a51fc <_Z12noInterruptsv>
    digitalWriteFastLow();
 80a2af8:	4628      	mov	r0, r5
 80a2afa:	f7ff ffce 	bl	80a2a9a <_ZN7OneWire19digitalWriteFastLowEv>
    pinModeFastOutput();   // drive output low
 80a2afe:	8828      	ldrh	r0, [r5, #0]
 80a2b00:	f7ff ffb5 	bl	80a2a6e <_ZN7OneWire17pinModeFastOutputEv.isra.0>
    interrupts();
 80a2b04:	f002 fb7c 	bl	80a5200 <_Z10interruptsv>
 80a2b08:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a2b0c:	f000 fe1e 	bl	80a374c <HAL_Delay_Microseconds>
    noInterrupts();
 80a2b10:	f002 fb74 	bl	80a51fc <_Z12noInterruptsv>
    pinModeFastInput();    // allow it to float
 80a2b14:	8828      	ldrh	r0, [r5, #0]
 80a2b16:	f7ff ffa7 	bl	80a2a68 <_ZN7OneWire16pinModeFastInputEv.isra.0>
 80a2b1a:	2046      	movs	r0, #70	; 0x46
 80a2b1c:	f000 fe16 	bl	80a374c <HAL_Delay_Microseconds>
 80a2b20:	8828      	ldrh	r0, [r5, #0]
 80a2b22:	f000 fdd3 	bl	80a36cc <HAL_GPIO_Read>
    r =! digitalReadFast();
 80a2b26:	b2c4      	uxtb	r4, r0
 80a2b28:	fab4 f484 	clz	r4, r4
    interrupts();
 80a2b2c:	f002 fb68 	bl	80a5200 <_Z10interruptsv>
 80a2b30:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    r =! digitalReadFast();
 80a2b34:	0964      	lsrs	r4, r4, #5
 80a2b36:	f000 fe09 	bl	80a374c <HAL_Delay_Microseconds>
}
 80a2b3a:	4620      	mov	r0, r4
 80a2b3c:	bd38      	pop	{r3, r4, r5, pc}

080a2b3e <_ZN7OneWire9write_bitEh>:
    if (v & 1) {
 80a2b3e:	07cb      	lsls	r3, r1, #31
{
 80a2b40:	b510      	push	{r4, lr}
 80a2b42:	4604      	mov	r4, r0
    if (v & 1) {
 80a2b44:	d514      	bpl.n	80a2b70 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 80a2b46:	f002 fb59 	bl	80a51fc <_Z12noInterruptsv>
        digitalWriteFastLow();
 80a2b4a:	4620      	mov	r0, r4
 80a2b4c:	f7ff ffa5 	bl	80a2a9a <_ZN7OneWire19digitalWriteFastLowEv>
        pinModeFastOutput();   // drive output low
 80a2b50:	8820      	ldrh	r0, [r4, #0]
 80a2b52:	f7ff ff8c 	bl	80a2a6e <_ZN7OneWire17pinModeFastOutputEv.isra.0>
 80a2b56:	200a      	movs	r0, #10
 80a2b58:	f000 fdf8 	bl	80a374c <HAL_Delay_Microseconds>
        pinModeFastInput();    // float high
 80a2b5c:	8820      	ldrh	r0, [r4, #0]
 80a2b5e:	f7ff ff83 	bl	80a2a68 <_ZN7OneWire16pinModeFastInputEv.isra.0>
        interrupts();
 80a2b62:	f002 fb4d 	bl	80a5200 <_Z10interruptsv>
 80a2b66:	2037      	movs	r0, #55	; 0x37
}
 80a2b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2b6c:	f000 bdee 	b.w	80a374c <HAL_Delay_Microseconds>
        noInterrupts();
 80a2b70:	f002 fb44 	bl	80a51fc <_Z12noInterruptsv>
        digitalWriteFastLow();
 80a2b74:	4620      	mov	r0, r4
 80a2b76:	f7ff ff90 	bl	80a2a9a <_ZN7OneWire19digitalWriteFastLowEv>
        pinModeFastOutput();   // drive output low
 80a2b7a:	8820      	ldrh	r0, [r4, #0]
 80a2b7c:	f7ff ff77 	bl	80a2a6e <_ZN7OneWire17pinModeFastOutputEv.isra.0>
 80a2b80:	2041      	movs	r0, #65	; 0x41
 80a2b82:	f000 fde3 	bl	80a374c <HAL_Delay_Microseconds>
        pinModeFastInput();    // float high
 80a2b86:	8820      	ldrh	r0, [r4, #0]
 80a2b88:	f7ff ff6e 	bl	80a2a68 <_ZN7OneWire16pinModeFastInputEv.isra.0>
        interrupts();
 80a2b8c:	f002 fb38 	bl	80a5200 <_Z10interruptsv>
 80a2b90:	2005      	movs	r0, #5
 80a2b92:	e7e9      	b.n	80a2b68 <_ZN7OneWire9write_bitEh+0x2a>

080a2b94 <_ZN7OneWire8read_bitEv>:
{
 80a2b94:	b510      	push	{r4, lr}
 80a2b96:	4604      	mov	r4, r0
    noInterrupts();
 80a2b98:	f002 fb30 	bl	80a51fc <_Z12noInterruptsv>
    digitalWriteFastLow();
 80a2b9c:	4620      	mov	r0, r4
 80a2b9e:	f7ff ff7c 	bl	80a2a9a <_ZN7OneWire19digitalWriteFastLowEv>
    pinModeFastOutput();
 80a2ba2:	8820      	ldrh	r0, [r4, #0]
 80a2ba4:	f7ff ff63 	bl	80a2a6e <_ZN7OneWire17pinModeFastOutputEv.isra.0>
 80a2ba8:	2003      	movs	r0, #3
 80a2baa:	f000 fdcf 	bl	80a374c <HAL_Delay_Microseconds>
    pinModeFastInput();    // let pin float, pull up will raise
 80a2bae:	8820      	ldrh	r0, [r4, #0]
 80a2bb0:	f7ff ff5a 	bl	80a2a68 <_ZN7OneWire16pinModeFastInputEv.isra.0>
 80a2bb4:	200a      	movs	r0, #10
 80a2bb6:	f000 fdc9 	bl	80a374c <HAL_Delay_Microseconds>
 80a2bba:	8820      	ldrh	r0, [r4, #0]
 80a2bbc:	f000 fd86 	bl	80a36cc <HAL_GPIO_Read>
 80a2bc0:	4604      	mov	r4, r0
    interrupts();
 80a2bc2:	f002 fb1d 	bl	80a5200 <_Z10interruptsv>
 80a2bc6:	2035      	movs	r0, #53	; 0x35
 80a2bc8:	f000 fdc0 	bl	80a374c <HAL_Delay_Microseconds>
}
 80a2bcc:	b2e0      	uxtb	r0, r4
 80a2bce:	bd10      	pop	{r4, pc}

080a2bd0 <_ZN7OneWire5writeEhh>:
{
 80a2bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2bd4:	4605      	mov	r5, r0
 80a2bd6:	4688      	mov	r8, r1
 80a2bd8:	4616      	mov	r6, r2
 80a2bda:	2708      	movs	r7, #8
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2bdc:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a2bde:	ea18 0f04 	tst.w	r8, r4
 80a2be2:	bf14      	ite	ne
 80a2be4:	2101      	movne	r1, #1
 80a2be6:	2100      	moveq	r1, #0
 80a2be8:	4628      	mov	r0, r5
 80a2bea:	f7ff ffa8 	bl	80a2b3e <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2bee:	0064      	lsls	r4, r4, #1
 80a2bf0:	3f01      	subs	r7, #1
 80a2bf2:	b2e4      	uxtb	r4, r4
 80a2bf4:	d1f3      	bne.n	80a2bde <_ZN7OneWire5writeEhh+0xe>
    if ( power) {
 80a2bf6:	b126      	cbz	r6, 80a2c02 <_ZN7OneWire5writeEhh+0x32>
 80a2bf8:	4628      	mov	r0, r5
}
 80a2bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2bfe:	f7ff bf39 	b.w	80a2a74 <_ZN7OneWire11write_bytesEPKhtb.part.0>
 80a2c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2c06 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
 80a2c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2c08:	4607      	mov	r7, r0
 80a2c0a:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a2c0c:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2c0e:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a2c10:	4638      	mov	r0, r7
 80a2c12:	f7ff ffbf 	bl	80a2b94 <_ZN7OneWire8read_bitEv>
 80a2c16:	b100      	cbz	r0, 80a2c1a <_ZN7OneWire4readEv+0x14>
 80a2c18:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a2c1a:	0064      	lsls	r4, r4, #1
 80a2c1c:	3e01      	subs	r6, #1
 80a2c1e:	b2e4      	uxtb	r4, r4
 80a2c20:	d1f6      	bne.n	80a2c10 <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
 80a2c22:	4628      	mov	r0, r5
 80a2c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2c26 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a2c26:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a2c28:	2200      	movs	r2, #0
{
 80a2c2a:	460c      	mov	r4, r1
    write(0x55);           // Choose ROM
 80a2c2c:	2155      	movs	r1, #85	; 0x55
{
 80a2c2e:	4606      	mov	r6, r0
    write(0x55);           // Choose ROM
 80a2c30:	f7ff ffce 	bl	80a2bd0 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++) write(rom[i]);
 80a2c34:	1e65      	subs	r5, r4, #1
 80a2c36:	3407      	adds	r4, #7
 80a2c38:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a2c3c:	2200      	movs	r2, #0
 80a2c3e:	4630      	mov	r0, r6
 80a2c40:	f7ff ffc6 	bl	80a2bd0 <_ZN7OneWire5writeEhh>
 80a2c44:	42a5      	cmp	r5, r4
 80a2c46:	d1f7      	bne.n	80a2c38 <_ZN7OneWire6selectEPKh+0x12>
}
 80a2c48:	bd70      	pop	{r4, r5, r6, pc}

080a2c4a <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a2c4a:	2300      	movs	r3, #0
 80a2c4c:	8203      	strh	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a2c4e:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a2c50:	6083      	str	r3, [r0, #8]
 80a2c52:	60c3      	str	r3, [r0, #12]
        if ( i == 0) break;
    }
}
 80a2c54:	4770      	bx	lr

080a2c56 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a2c56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a2c5a:	7c85      	ldrb	r5, [r0, #18]
{
 80a2c5c:	4604      	mov	r4, r0
 80a2c5e:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
 80a2c60:	b175      	cbz	r5, 80a2c80 <_ZN7OneWire6searchEPh+0x2a>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a2c62:	2000      	movs	r0, #0
 80a2c64:	8220      	strh	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a2c66:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a2c68:	f104 0308 	add.w	r3, r4, #8
 80a2c6c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a2c70:	3410      	adds	r4, #16
 80a2c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2c76:	429c      	cmp	r4, r3
 80a2c78:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a2c7c:	d1f9      	bne.n	80a2c72 <_ZN7OneWire6searchEPh+0x1c>
 80a2c7e:	e004      	b.n	80a2c8a <_ZN7OneWire6searchEPh+0x34>
        if (!reset()){
 80a2c80:	f7ff ff21 	bl	80a2ac6 <_ZN7OneWire5resetEv>
 80a2c84:	b918      	cbnz	r0, 80a2c8e <_ZN7OneWire6searchEPh+0x38>
            LastDiscrepancy = 0;
 80a2c86:	8220      	strh	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a2c88:	74a0      	strb	r0, [r4, #18]

    return search_result;
}
 80a2c8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rom_byte_mask = 1;
 80a2c8e:	2701      	movs	r7, #1
        write(0xF0);
 80a2c90:	462a      	mov	r2, r5
 80a2c92:	21f0      	movs	r1, #240	; 0xf0
 80a2c94:	4620      	mov	r0, r4
 80a2c96:	f7ff ff9b 	bl	80a2bd0 <_ZN7OneWire5writeEhh>
    last_zero = 0;
 80a2c9a:	46aa      	mov	sl, r5
    id_bit_number = 1;
 80a2c9c:	463e      	mov	r6, r7
            id_bit = read_bit();
 80a2c9e:	4620      	mov	r0, r4
 80a2ca0:	f7ff ff78 	bl	80a2b94 <_ZN7OneWire8read_bitEv>
 80a2ca4:	4681      	mov	r9, r0
 80a2ca6:	4683      	mov	fp, r0
            cmp_id_bit = read_bit();
 80a2ca8:	4620      	mov	r0, r4
 80a2caa:	f7ff ff73 	bl	80a2b94 <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a2cae:	f1b9 0f01 	cmp.w	r9, #1
 80a2cb2:	d10f      	bne.n	80a2cd4 <_ZN7OneWire6searchEPh+0x7e>
 80a2cb4:	2801      	cmp	r0, #1
 80a2cb6:	d117      	bne.n	80a2ce8 <_ZN7OneWire6searchEPh+0x92>
        if (!(id_bit_number < 65))
 80a2cb8:	2e40      	cmp	r6, #64	; 0x40
 80a2cba:	d9d2      	bls.n	80a2c62 <_ZN7OneWire6searchEPh+0xc>
            LastDiscrepancy = last_zero;
 80a2cbc:	f884 a010 	strb.w	sl, [r4, #16]
            if (LastDiscrepancy == 0)
 80a2cc0:	f1ba 0f00 	cmp.w	sl, #0
 80a2cc4:	d101      	bne.n	80a2cca <_ZN7OneWire6searchEPh+0x74>
                LastDeviceFlag = TRUE;
 80a2cc6:	2301      	movs	r3, #1
 80a2cc8:	74a3      	strb	r3, [r4, #18]
    if (!search_result || !ROM_NO[0]){
 80a2cca:	7a23      	ldrb	r3, [r4, #8]
 80a2ccc:	2b00      	cmp	r3, #0
 80a2cce:	d0c8      	beq.n	80a2c62 <_ZN7OneWire6searchEPh+0xc>
            search_result = TRUE;
 80a2cd0:	2001      	movs	r0, #1
 80a2cd2:	e7c9      	b.n	80a2c68 <_ZN7OneWire6searchEPh+0x12>
                if (id_bit != cmp_id_bit){
 80a2cd4:	4581      	cmp	r9, r0
 80a2cd6:	eb04 0305 	add.w	r3, r4, r5
 80a2cda:	d122      	bne.n	80a2d22 <_ZN7OneWire6searchEPh+0xcc>
                    if (id_bit_number < LastDiscrepancy)
 80a2cdc:	7c22      	ldrb	r2, [r4, #16]
 80a2cde:	42b2      	cmp	r2, r6
 80a2ce0:	d918      	bls.n	80a2d14 <_ZN7OneWire6searchEPh+0xbe>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a2ce2:	7a1a      	ldrb	r2, [r3, #8]
                    if (search_direction == 0){
 80a2ce4:	4217      	tst	r7, r2
 80a2ce6:	d016      	beq.n	80a2d16 <_ZN7OneWire6searchEPh+0xc0>
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a2ce8:	f04f 0b01 	mov.w	fp, #1
 80a2cec:	1962      	adds	r2, r4, r5
 80a2cee:	7a13      	ldrb	r3, [r2, #8]
 80a2cf0:	433b      	orrs	r3, r7
 80a2cf2:	7213      	strb	r3, [r2, #8]
                write_bit(search_direction);
 80a2cf4:	4659      	mov	r1, fp
 80a2cf6:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
 80a2cf8:	007f      	lsls	r7, r7, #1
                write_bit(search_direction);
 80a2cfa:	f7ff ff20 	bl	80a2b3e <_ZN7OneWire9write_bitEh>
                id_bit_number++;
 80a2cfe:	3601      	adds	r6, #1
                if (rom_byte_mask == 0)
 80a2d00:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
                id_bit_number++;
 80a2d04:	b2f6      	uxtb	r6, r6
                if (rom_byte_mask == 0)
 80a2d06:	d1ca      	bne.n	80a2c9e <_ZN7OneWire6searchEPh+0x48>
                    rom_byte_number++;
 80a2d08:	3501      	adds	r5, #1
 80a2d0a:	b2ed      	uxtb	r5, r5
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a2d0c:	2d08      	cmp	r5, #8
 80a2d0e:	d0d3      	beq.n	80a2cb8 <_ZN7OneWire6searchEPh+0x62>
                    rom_byte_mask = 1;
 80a2d10:	2701      	movs	r7, #1
 80a2d12:	e7c4      	b.n	80a2c9e <_ZN7OneWire6searchEPh+0x48>
                    if (search_direction == 0){
 80a2d14:	d0e8      	beq.n	80a2ce8 <_ZN7OneWire6searchEPh+0x92>
                        if (last_zero < 9)
 80a2d16:	2e08      	cmp	r6, #8
 80a2d18:	d800      	bhi.n	80a2d1c <_ZN7OneWire6searchEPh+0xc6>
                            LastFamilyDiscrepancy = last_zero;
 80a2d1a:	7466      	strb	r6, [r4, #17]
                if (search_direction == 1)
 80a2d1c:	f04f 0b00 	mov.w	fp, #0
 80a2d20:	46b2      	mov	sl, r6
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a2d22:	7a1a      	ldrb	r2, [r3, #8]
 80a2d24:	ea22 0207 	bic.w	r2, r2, r7
 80a2d28:	721a      	strb	r2, [r3, #8]
 80a2d2a:	e7e3      	b.n	80a2cf4 <_ZN7OneWire6searchEPh+0x9e>

080a2d2c <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a2d2c:	4603      	mov	r3, r0
    uint8_t crc = 0;
 80a2d2e:	4401      	add	r1, r0
 80a2d30:	2000      	movs	r0, #0
{
 80a2d32:	b530      	push	{r4, r5, lr}

    while (len--) {
 80a2d34:	428b      	cmp	r3, r1
 80a2d36:	d015      	beq.n	80a2d64 <_ZN7OneWire4crc8EPhh+0x38>
        uint8_t inbyte = *addr++;
 80a2d38:	2208      	movs	r2, #8
 80a2d3a:	f813 4b01 	ldrb.w	r4, [r3], #1
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a2d3e:	ea80 0504 	eor.w	r5, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a2d42:	f015 0f01 	tst.w	r5, #1
 80a2d46:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a2d4a:	bf18      	it	ne
 80a2d4c:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
        for (uint8_t i = 8; i; i--) {
 80a2d50:	f102 32ff 	add.w	r2, r2, #4294967295
            if (mix) crc ^= 0x8C;
 80a2d54:	bf18      	it	ne
 80a2d56:	b2c0      	uxtbne	r0, r0
        for (uint8_t i = 8; i; i--) {
 80a2d58:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                inbyte >>= 1;
 80a2d5c:	ea4f 0454 	mov.w	r4, r4, lsr #1
        for (uint8_t i = 8; i; i--) {
 80a2d60:	d1ed      	bne.n	80a2d3e <_ZN7OneWire4crc8EPhh+0x12>
 80a2d62:	e7e7      	b.n	80a2d34 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
 80a2d64:	bd30      	pop	{r4, r5, pc}
	...

080a2d68 <_Z15conrad_rsl_initv>:
/*--------------------------------------------------------------------
Diese Funktion muss einmal von setup() aufgerufen werden
call this function once from setup()
--------------------------------------------------------------------*/
void conrad_rsl_init()  
{
 80a2d68:	b510      	push	{r4, lr}
  pinMode(dpin,OUTPUT);
 80a2d6a:	4c07      	ldr	r4, [pc, #28]	; (80a2d88 <_Z15conrad_rsl_initv+0x20>)
 80a2d6c:	2101      	movs	r1, #1
 80a2d6e:	8820      	ldrh	r0, [r4, #0]
 80a2d70:	f002 fc36 	bl	80a55e0 <pinMode>
  digitalWrite(dpin,LOW);
 80a2d74:	8820      	ldrh	r0, [r4, #0]
 80a2d76:	2100      	movs	r1, #0
 80a2d78:	f002 fc43 	bl	80a5602 <digitalWrite>
  delay(500);
}
 80a2d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
 80a2d80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a2d84:	f001 bd88 	b.w	80a4898 <delay>
 80a2d88:	2000040c 	.word	0x2000040c

080a2d8c <_Z19conrad_rsl_transmitPi>:

The next value sets transmitter pin HIGH
------------------------------------------------------------------------------*/
  void conrad_rsl_transmit (int* code)

  {
 80a2d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int rep;
  int i;

   digitalWrite(dpin,LOW);
 80a2d90:	4c2d      	ldr	r4, [pc, #180]	; (80a2e48 <_Z19conrad_rsl_transmitPi+0xbc>)
 80a2d92:	2100      	movs	r1, #0
  {
 80a2d94:	4607      	mov	r7, r0
   digitalWrite(dpin,LOW);
 80a2d96:	8820      	ldrh	r0, [r4, #0]
 80a2d98:	f002 fc33 	bl	80a5602 <digitalWrite>
 80a2d9c:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2da0:	f000 fcd4 	bl	80a374c <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a2da4:	2100      	movs	r1, #0
 80a2da6:	8820      	ldrh	r0, [r4, #0]
 80a2da8:	f002 fc2b 	bl	80a5602 <digitalWrite>
 80a2dac:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2db0:	f000 fccc 	bl	80a374c <HAL_Delay_Microseconds>
   delayMicroseconds(5000);

   digitalWrite(dpin,LOW);
 80a2db4:	2100      	movs	r1, #0
 80a2db6:	8820      	ldrh	r0, [r4, #0]
 80a2db8:	f002 fc23 	bl	80a5602 <digitalWrite>
 80a2dbc:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2dc0:	f000 fcc4 	bl	80a374c <HAL_Delay_Microseconds>
 80a2dc4:	2608      	movs	r6, #8

    for (rep=0; rep<8; rep++)
     {
       // send the bits from data array

     for (i=0; i < code[0]; i = i+4)
 80a2dc6:	f04f 0800 	mov.w	r8, #0
 80a2dca:	1d3d      	adds	r5, r7, #4
 80a2dcc:	683b      	ldr	r3, [r7, #0]
         digitalWrite(dpin,LOW);
         delayMicroseconds(code[i+4]);
     }

        // for RSL switch
    digitalWrite(dpin,HIGH);
 80a2dce:	2101      	movs	r1, #1
     for (i=0; i < code[0]; i = i+4)
 80a2dd0:	4543      	cmp	r3, r8
         digitalWrite(dpin,HIGH);
 80a2dd2:	8820      	ldrh	r0, [r4, #0]
     for (i=0; i < code[0]; i = i+4)
 80a2dd4:	f105 0510 	add.w	r5, r5, #16
 80a2dd8:	dd20      	ble.n	80a2e1c <_Z19conrad_rsl_transmitPi+0x90>
         digitalWrite(dpin,HIGH);
 80a2dda:	f002 fc12 	bl	80a5602 <digitalWrite>
 80a2dde:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80a2de2:	f000 fcb3 	bl	80a374c <HAL_Delay_Microseconds>
         digitalWrite(dpin,LOW);
 80a2de6:	2100      	movs	r1, #0
 80a2de8:	8820      	ldrh	r0, [r4, #0]
 80a2dea:	f002 fc0a 	bl	80a5602 <digitalWrite>
 80a2dee:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 80a2df2:	f000 fcab 	bl	80a374c <HAL_Delay_Microseconds>
         digitalWrite(dpin,HIGH);
 80a2df6:	2101      	movs	r1, #1
 80a2df8:	8820      	ldrh	r0, [r4, #0]
 80a2dfa:	f002 fc02 	bl	80a5602 <digitalWrite>
 80a2dfe:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80a2e02:	f000 fca3 	bl	80a374c <HAL_Delay_Microseconds>
         digitalWrite(dpin,LOW);
 80a2e06:	2100      	movs	r1, #0
 80a2e08:	8820      	ldrh	r0, [r4, #0]
 80a2e0a:	f002 fbfa 	bl	80a5602 <digitalWrite>
 80a2e0e:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a2e12:	f000 fc9b 	bl	80a374c <HAL_Delay_Microseconds>
     for (i=0; i < code[0]; i = i+4)
 80a2e16:	f108 0804 	add.w	r8, r8, #4
 80a2e1a:	e7d7      	b.n	80a2dcc <_Z19conrad_rsl_transmitPi+0x40>
    digitalWrite(dpin,HIGH);
 80a2e1c:	f002 fbf1 	bl	80a5602 <digitalWrite>
 80a2e20:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80a2e24:	f000 fc92 	bl	80a374c <HAL_Delay_Microseconds>
    delayMicroseconds(ST);

    // repeat transmitting after given gap

    digitalWrite(dpin,LOW);
 80a2e28:	2100      	movs	r1, #0
 80a2e2a:	8820      	ldrh	r0, [r4, #0]
 80a2e2c:	f002 fbe9 	bl	80a5602 <digitalWrite>
 80a2e30:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80a2e34:	f000 fc8a 	bl	80a374c <HAL_Delay_Microseconds>
    for (rep=0; rep<8; rep++)
 80a2e38:	3e01      	subs	r6, #1
 80a2e3a:	d1c4      	bne.n	80a2dc6 <_Z19conrad_rsl_transmitPi+0x3a>
    delayMicroseconds(8000);
    }
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a2e3c:	4631      	mov	r1, r6
 80a2e3e:	8820      	ldrh	r0, [r4, #0]
  }
 80a2e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  digitalWrite(dpin,LOW); // IMPORTANT : Switch transmitter OFF
 80a2e44:	f002 bbdd 	b.w	80a5602 <digitalWrite>
 80a2e48:	2000040c 	.word	0x2000040c

080a2e4c <_Z15conrad_rsl_sendjii>:

  SHORT : dauer des kurzen Pulses in milliseconds
  LONG : dauer des langen Pulses in milliseconds
  --------------------------------------------------------------------*/
  void conrad_rsl_send(unsigned int code, int SHORT, int LONG)
  {
 80a2e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2e50:	b0c6      	sub	sp, #280	; 0x118
 80a2e52:	4605      	mov	r5, r0
 80a2e54:	460e      	mov	r6, r1
 80a2e56:	4617      	mov	r7, r2
    int i = 0;
    int k = 1;
    int tx_code[70];  // speicher tx code sequenz

    Serial.println(code);
 80a2e58:	f002 f96a 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2e5c:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 80a2e5e:	220a      	movs	r2, #10
 80a2e60:	4629      	mov	r1, r5
 80a2e62:	f001 fb9e 	bl	80a45a2 <_ZN5Print11printNumberEmh>
        n += println();
 80a2e66:	4620      	mov	r0, r4
 80a2e68:	f001 fb85 	bl	80a4576 <_ZN5Print7printlnEv>

    memset(tx_code,0,64);
 80a2e6c:	223c      	movs	r2, #60	; 0x3c
 80a2e6e:	2100      	movs	r1, #0
 80a2e70:	a801      	add	r0, sp, #4
 80a2e72:	f003 ffab 	bl	80a6dcc <memset>
    tx_code[0]=64;   // die laenge des tx codes
 80a2e76:	2340      	movs	r3, #64	; 0x40
 80a2e78:	466c      	mov	r4, sp
    int k = 1;
 80a2e7a:	f04f 0801 	mov.w	r8, #1
      }
      else
      {
        tx_code[k] = SHORT;
        tx_code[k+1] = LONG;
        Serial.print("0");
 80a2e7e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80a2ed0 <_Z15conrad_rsl_sendjii+0x84>
        Serial.print("1");
 80a2e82:	f8df a050 	ldr.w	sl, [pc, #80]	; 80a2ed4 <_Z15conrad_rsl_sendjii+0x88>
    tx_code[0]=64;   // die laenge des tx codes
 80a2e86:	9300      	str	r3, [sp, #0]
      if ( (code & 0x80000000) == 0x80000000)
 80a2e88:	2d00      	cmp	r5, #0
 80a2e8a:	da1a      	bge.n	80a2ec2 <_Z15conrad_rsl_sendjii+0x76>
        tx_code[k+1] = SHORT;
 80a2e8c:	e9c4 7601 	strd	r7, r6, [r4, #4]
        Serial.print("1");
 80a2e90:	f002 f94e 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2e94:	4651      	mov	r1, sl
      }
      code = code << 1;
      k=k+2;
 80a2e96:	f108 0802 	add.w	r8, r8, #2
        Serial.print("0");
 80a2e9a:	f001 fb65 	bl	80a4568 <_ZN5Print5printEPKc>
    for(i=0; i<32; i++)
 80a2e9e:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
      code = code << 1;
 80a2ea2:	ea4f 0545 	mov.w	r5, r5, lsl #1
    for(i=0; i<32; i++)
 80a2ea6:	f104 0408 	add.w	r4, r4, #8
 80a2eaa:	d1ed      	bne.n	80a2e88 <_Z15conrad_rsl_sendjii+0x3c>
    }
    Serial.println(" ");
 80a2eac:	f002 f940 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2eb0:	4909      	ldr	r1, [pc, #36]	; (80a2ed8 <_Z15conrad_rsl_sendjii+0x8c>)
 80a2eb2:	f001 fb6c 	bl	80a458e <_ZN5Print7printlnEPKc>
    conrad_rsl_transmit(&tx_code[0]);
 80a2eb6:	4668      	mov	r0, sp
 80a2eb8:	f7ff ff68 	bl	80a2d8c <_Z19conrad_rsl_transmitPi>
  }
 80a2ebc:	b046      	add	sp, #280	; 0x118
 80a2ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tx_code[k+1] = LONG;
 80a2ec2:	e9c4 6701 	strd	r6, r7, [r4, #4]
        Serial.print("0");
 80a2ec6:	f002 f933 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2eca:	4649      	mov	r1, r9
 80a2ecc:	e7e3      	b.n	80a2e96 <_Z15conrad_rsl_sendjii+0x4a>
 80a2ece:	bf00      	nop
 80a2ed0:	080a86b1 	.word	0x080a86b1
 80a2ed4:	080a86fc 	.word	0x080a86fc
 80a2ed8:	080a8786 	.word	0x080a8786

080a2edc <_Z22conrad_rsl_switch_codeii>:
  void conrad_rsl_switch_code ( int which, int state )
  {

    unsigned int code = 0;

    if (which>11)
 80a2edc:	280b      	cmp	r0, #11
  {
 80a2ede:	b570      	push	{r4, r5, r6, lr}
 80a2ee0:	4604      	mov	r4, r0
 80a2ee2:	460d      	mov	r5, r1
    if (which>11)
 80a2ee4:	dd04      	ble.n	80a2ef0 <_Z22conrad_rsl_switch_codeii+0x14>
    {
      Serial.println(" ERROR which not valid ");
 80a2ee6:	f002 f923 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2eea:	4918      	ldr	r1, [pc, #96]	; (80a2f4c <_Z22conrad_rsl_switch_codeii+0x70>)
 80a2eec:	f001 fb4f 	bl	80a458e <_ZN5Print7printlnEPKc>
    }

    if (state>1)
 80a2ef0:	2d01      	cmp	r5, #1
 80a2ef2:	dd04      	ble.n	80a2efe <_Z22conrad_rsl_switch_codeii+0x22>
    {
      Serial.println(" ERROR state not valid ");
 80a2ef4:	f002 f91c 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2ef8:	4915      	ldr	r1, [pc, #84]	; (80a2f50 <_Z22conrad_rsl_switch_codeii+0x74>)
 80a2efa:	f001 fb48 	bl	80a458e <_ZN5Print7printlnEPKc>
    }

    code = codes[state][which];
 80a2efe:	260a      	movs	r6, #10
 80a2f00:	fb06 4405 	mla	r4, r6, r5, r4
 80a2f04:	4b13      	ldr	r3, [pc, #76]	; (80a2f54 <_Z22conrad_rsl_switch_codeii+0x78>)
 80a2f06:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

    if (code != 0)
 80a2f0a:	b1bc      	cbz	r4, 80a2f3c <_Z22conrad_rsl_switch_codeii+0x60>
    {
      Serial.print("Sende Code : ");
 80a2f0c:	f002 f910 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2f10:	4911      	ldr	r1, [pc, #68]	; (80a2f58 <_Z22conrad_rsl_switch_codeii+0x7c>)
 80a2f12:	f001 fb29 	bl	80a4568 <_ZN5Print5printEPKc>
      Serial.println(code);
 80a2f16:	f002 f90b 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a2f1a:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80a2f1c:	4632      	mov	r2, r6
 80a2f1e:	4621      	mov	r1, r4
 80a2f20:	f001 fb3f 	bl	80a45a2 <_ZN5Print11printNumberEmh>
        n += println();
 80a2f24:	4628      	mov	r0, r5
 80a2f26:	f001 fb26 	bl	80a4576 <_ZN5Print7printlnEv>
      conrad_rsl_send(code,430,1150);
 80a2f2a:	4620      	mov	r0, r4
    else
    {
      Serial.print(" Fehler : konnte Code nicht finden ");
    }

  }
 80a2f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      conrad_rsl_send(code,430,1150);
 80a2f30:	f240 427e 	movw	r2, #1150	; 0x47e
 80a2f34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80a2f38:	f7ff bf88 	b.w	80a2e4c <_Z15conrad_rsl_sendjii>
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a2f3c:	f002 f8f8 	bl	80a5130 <_Z16_fetch_usbserialv>
  }
 80a2f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Serial.print(" Fehler : konnte Code nicht finden ");
 80a2f44:	4905      	ldr	r1, [pc, #20]	; (80a2f5c <_Z22conrad_rsl_switch_codeii+0x80>)
 80a2f46:	f001 bb0f 	b.w	80a4568 <_ZN5Print5printEPKc>
 80a2f4a:	bf00      	nop
 80a2f4c:	080a8606 	.word	0x080a8606
 80a2f50:	080a861e 	.word	0x080a861e
 80a2f54:	2000002c 	.word	0x2000002c
 80a2f58:	080a8636 	.word	0x080a8636
 80a2f5c:	080a8644 	.word	0x080a8644

080a2f60 <_Z13elro_transmitPi>:
/*--------------------------------------------------------------------
toggle transmitter data using the given data array
--------------------------------------------------------------------*/
  void elro_transmit (int* data)

  {
 80a2f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	   int rep;
	   int i;

 	   digitalWrite(datapin,LOW);
 80a2f64:	4c20      	ldr	r4, [pc, #128]	; (80a2fe8 <_Z13elro_transmitPi+0x88>)
 80a2f66:	2100      	movs	r1, #0
  {
 80a2f68:	4606      	mov	r6, r0
 	   digitalWrite(datapin,LOW);
 80a2f6a:	8820      	ldrh	r0, [r4, #0]
 80a2f6c:	f002 fb49 	bl	80a5602 <digitalWrite>
 80a2f70:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2f74:	f000 fbea 	bl	80a374c <HAL_Delay_Microseconds>
	   delayMicroseconds(5000);

	   digitalWrite(datapin,LOW);
 80a2f78:	2100      	movs	r1, #0
 80a2f7a:	8820      	ldrh	r0, [r4, #0]
 80a2f7c:	f002 fb41 	bl	80a5602 <digitalWrite>
 80a2f80:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2f84:	f000 fbe2 	bl	80a374c <HAL_Delay_Microseconds>
	   delayMicroseconds(5000);

	   digitalWrite(datapin,LOW);
 80a2f88:	2100      	movs	r1, #0
 80a2f8a:	8820      	ldrh	r0, [r4, #0]
 80a2f8c:	f002 fb39 	bl	80a5602 <digitalWrite>
 80a2f90:	f241 3088 	movw	r0, #5000	; 0x1388
 80a2f94:	f000 fbda 	bl	80a374c <HAL_Delay_Microseconds>
 80a2f98:	2508      	movs	r5, #8

	  for (rep=0; rep<8; rep++)
		 {
			 // send the bits from data array

			 for (i=0; i < data[0]; i = i+2)
 80a2f9a:	f04f 0800 	mov.w	r8, #0
 80a2f9e:	1d37      	adds	r7, r6, #4
 80a2fa0:	6833      	ldr	r3, [r6, #0]
 80a2fa2:	3708      	adds	r7, #8
 80a2fa4:	4543      	cmp	r3, r8
 80a2fa6:	dd12      	ble.n	80a2fce <_Z13elro_transmitPi+0x6e>
			 {
			   digitalWrite(datapin,HIGH);
 80a2fa8:	2101      	movs	r1, #1
 80a2faa:	8820      	ldrh	r0, [r4, #0]
 80a2fac:	f002 fb29 	bl	80a5602 <digitalWrite>
 80a2fb0:	f857 0c08 	ldr.w	r0, [r7, #-8]
 80a2fb4:	f000 fbca 	bl	80a374c <HAL_Delay_Microseconds>
			   delayMicroseconds(data[i+1]);
			   digitalWrite(datapin,LOW);
 80a2fb8:	2100      	movs	r1, #0
 80a2fba:	8820      	ldrh	r0, [r4, #0]
 80a2fbc:	f002 fb21 	bl	80a5602 <digitalWrite>
 80a2fc0:	f857 0c04 	ldr.w	r0, [r7, #-4]
 80a2fc4:	f000 fbc2 	bl	80a374c <HAL_Delay_Microseconds>
			 for (i=0; i < data[0]; i = i+2)
 80a2fc8:	f108 0802 	add.w	r8, r8, #2
 80a2fcc:	e7e8      	b.n	80a2fa0 <_Z13elro_transmitPi+0x40>
 80a2fce:	f242 60ac 	movw	r0, #9900	; 0x26ac
 80a2fd2:	f000 fbbb 	bl	80a374c <HAL_Delay_Microseconds>
	  for (rep=0; rep<8; rep++)
 80a2fd6:	3d01      	subs	r5, #1
 80a2fd8:	d1df      	bne.n	80a2f9a <_Z13elro_transmitPi+0x3a>
			   delayMicroseconds(data[i+2]);
			 }

	    delayMicroseconds(9900);
  		}
    digitalWrite(datapin,LOW);
 80a2fda:	4629      	mov	r1, r5
 80a2fdc:	8820      	ldrh	r0, [r4, #0]
  }
 80a2fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    digitalWrite(datapin,LOW);
 80a2fe2:	f002 bb0e 	b.w	80a5602 <digitalWrite>
 80a2fe6:	bf00      	nop
 80a2fe8:	20000410 	.word	0x20000410

080a2fec <_Z9elro_sendPcii>:
{
	int i = 0;
	int k = 1;
  int ed[90];  // tx code sequenz

	ed[0]=50;
 80a2fec:	2332      	movs	r3, #50	; 0x32
{
 80a2fee:	b530      	push	{r4, r5, lr}
 80a2ff0:	b0db      	sub	sp, #364	; 0x16c
	ed[0]=50;
 80a2ff2:	9300      	str	r3, [sp, #0]

	for(i=0; i<24; i++)
 80a2ff4:	466b      	mov	r3, sp
 80a2ff6:	1e44      	subs	r4, r0, #1
 80a2ff8:	3017      	adds	r0, #23
	{
		if (code[i]==0x30)
 80a2ffa:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80a2ffe:	2d30      	cmp	r5, #48	; 0x30
		{
			ed[k] = SHORT;
			ed[k+1] = LONG;
 80a3000:	bf0c      	ite	eq
 80a3002:	e9c3 1201 	strdeq	r1, r2, [r3, #4]
		}
		else
		{
			ed[k] = LONG;
			ed[k+1] = SHORT;
 80a3006:	e9c3 2101 	strdne	r2, r1, [r3, #4]
	for(i=0; i<24; i++)
 80a300a:	4284      	cmp	r4, r0
 80a300c:	f103 0308 	add.w	r3, r3, #8
 80a3010:	d1f3      	bne.n	80a2ffa <_Z9elro_sendPcii+0xe>
		}
		k=k+2;
	}
	ed[k] = SHORT;
	ed[k+1] = LONG;
  elro_transmit(&ed[0]);
 80a3012:	4668      	mov	r0, sp
	ed[k+1] = LONG;
 80a3014:	e9cd 1231 	strd	r1, r2, [sp, #196]	; 0xc4
  elro_transmit(&ed[0]);
 80a3018:	f7ff ffa2 	bl	80a2f60 <_Z13elro_transmitPi>
}
 80a301c:	b05b      	add	sp, #364	; 0x16c
 80a301e:	bd30      	pop	{r4, r5, pc}

080a3020 <_Z11elro_switchii>:

/*--------------------------------------------------------------------
Control ELRO rc switch
--------------------------------------------------------------------*/
void elro_switch ( int which, int state )
{
 80a3020:	b530      	push	{r4, r5, lr}
	char es[34];

	if (which==1)
 80a3022:	2801      	cmp	r0, #1
{
 80a3024:	b08b      	sub	sp, #44	; 0x2c
	if (which==1)
 80a3026:	d123      	bne.n	80a3070 <_Z11elro_switchii+0x50>
	{
		if (state==AUS)  strncpy(es,"000100010000010101010010",24);
 80a3028:	b999      	cbnz	r1, 80a3052 <_Z11elro_switchii+0x32>
 80a302a:	4b30      	ldr	r3, [pc, #192]	; (80a30ec <_Z11elro_switchii+0xcc>)
 80a302c:	ac01      	add	r4, sp, #4
 80a302e:	f103 0518 	add.w	r5, r3, #24
 80a3032:	4622      	mov	r2, r4
 80a3034:	6818      	ldr	r0, [r3, #0]
 80a3036:	6859      	ldr	r1, [r3, #4]
 80a3038:	3308      	adds	r3, #8
 80a303a:	c203      	stmia	r2!, {r0, r1}
 80a303c:	42ab      	cmp	r3, r5
 80a303e:	4614      	mov	r4, r2
 80a3040:	d1f7      	bne.n	80a3032 <_Z11elro_switchii+0x12>
		if (state==EIN)  strncpy(es,"000100010000010101010001",24);
   	elro_send(es,220,940);
 80a3042:	f44f 726b 	mov.w	r2, #940	; 0x3ac
 80a3046:	21dc      	movs	r1, #220	; 0xdc
 80a3048:	a801      	add	r0, sp, #4
 80a304a:	f7ff ffcf 	bl	80a2fec <_Z9elro_sendPcii>
		if (state==AUS)  strncpy(es,"000100010001010001010010",24);
		if (state==EIN)  strncpy(es,"000100010001010001010001",24);
   	elro_send(es,220,940);
	}

}
 80a304e:	b00b      	add	sp, #44	; 0x2c
 80a3050:	bd30      	pop	{r4, r5, pc}
		if (state==EIN)  strncpy(es,"000100010000010101010001",24);
 80a3052:	2901      	cmp	r1, #1
 80a3054:	d1f5      	bne.n	80a3042 <_Z11elro_switchii+0x22>
 80a3056:	4b26      	ldr	r3, [pc, #152]	; (80a30f0 <_Z11elro_switchii+0xd0>)
 80a3058:	aa01      	add	r2, sp, #4
 80a305a:	f103 0518 	add.w	r5, r3, #24
 80a305e:	4614      	mov	r4, r2
 80a3060:	6818      	ldr	r0, [r3, #0]
 80a3062:	6859      	ldr	r1, [r3, #4]
 80a3064:	3308      	adds	r3, #8
 80a3066:	c403      	stmia	r4!, {r0, r1}
 80a3068:	42ab      	cmp	r3, r5
 80a306a:	4622      	mov	r2, r4
 80a306c:	d1f7      	bne.n	80a305e <_Z11elro_switchii+0x3e>
 80a306e:	e7e8      	b.n	80a3042 <_Z11elro_switchii+0x22>
	if (which==2)
 80a3070:	2802      	cmp	r0, #2
 80a3072:	d00f      	beq.n	80a3094 <_Z11elro_switchii+0x74>
	if (which==3)
 80a3074:	2803      	cmp	r0, #3
 80a3076:	d1ea      	bne.n	80a304e <_Z11elro_switchii+0x2e>
		if (state==AUS)  strncpy(es,"000100010001010001010010",24);
 80a3078:	bb49      	cbnz	r1, 80a30ce <_Z11elro_switchii+0xae>
 80a307a:	4b1e      	ldr	r3, [pc, #120]	; (80a30f4 <_Z11elro_switchii+0xd4>)
 80a307c:	ac01      	add	r4, sp, #4
 80a307e:	f103 0518 	add.w	r5, r3, #24
 80a3082:	4622      	mov	r2, r4
 80a3084:	6818      	ldr	r0, [r3, #0]
 80a3086:	6859      	ldr	r1, [r3, #4]
 80a3088:	3308      	adds	r3, #8
 80a308a:	c203      	stmia	r2!, {r0, r1}
 80a308c:	42ab      	cmp	r3, r5
 80a308e:	4614      	mov	r4, r2
 80a3090:	d1f7      	bne.n	80a3082 <_Z11elro_switchii+0x62>
 80a3092:	e7d6      	b.n	80a3042 <_Z11elro_switchii+0x22>
		if (state==AUS)  strncpy(es,"000100010001000101010100",24);
 80a3094:	b961      	cbnz	r1, 80a30b0 <_Z11elro_switchii+0x90>
 80a3096:	4b18      	ldr	r3, [pc, #96]	; (80a30f8 <_Z11elro_switchii+0xd8>)
 80a3098:	ac01      	add	r4, sp, #4
 80a309a:	f103 0518 	add.w	r5, r3, #24
 80a309e:	4622      	mov	r2, r4
 80a30a0:	6818      	ldr	r0, [r3, #0]
 80a30a2:	6859      	ldr	r1, [r3, #4]
 80a30a4:	3308      	adds	r3, #8
 80a30a6:	c203      	stmia	r2!, {r0, r1}
 80a30a8:	42ab      	cmp	r3, r5
 80a30aa:	4614      	mov	r4, r2
 80a30ac:	d1f7      	bne.n	80a309e <_Z11elro_switchii+0x7e>
 80a30ae:	e7c8      	b.n	80a3042 <_Z11elro_switchii+0x22>
		if (state==EIN)  strncpy(es,"000100010001000101010001",24);
 80a30b0:	2901      	cmp	r1, #1
 80a30b2:	d1c6      	bne.n	80a3042 <_Z11elro_switchii+0x22>
 80a30b4:	4b11      	ldr	r3, [pc, #68]	; (80a30fc <_Z11elro_switchii+0xdc>)
 80a30b6:	aa01      	add	r2, sp, #4
 80a30b8:	f103 0518 	add.w	r5, r3, #24
 80a30bc:	4614      	mov	r4, r2
 80a30be:	6818      	ldr	r0, [r3, #0]
 80a30c0:	6859      	ldr	r1, [r3, #4]
 80a30c2:	3308      	adds	r3, #8
 80a30c4:	c403      	stmia	r4!, {r0, r1}
 80a30c6:	42ab      	cmp	r3, r5
 80a30c8:	4622      	mov	r2, r4
 80a30ca:	d1f7      	bne.n	80a30bc <_Z11elro_switchii+0x9c>
 80a30cc:	e7b9      	b.n	80a3042 <_Z11elro_switchii+0x22>
		if (state==EIN)  strncpy(es,"000100010001010001010001",24);
 80a30ce:	2901      	cmp	r1, #1
 80a30d0:	d1b7      	bne.n	80a3042 <_Z11elro_switchii+0x22>
 80a30d2:	4b0b      	ldr	r3, [pc, #44]	; (80a3100 <_Z11elro_switchii+0xe0>)
 80a30d4:	aa01      	add	r2, sp, #4
 80a30d6:	f103 0518 	add.w	r5, r3, #24
 80a30da:	4614      	mov	r4, r2
 80a30dc:	6818      	ldr	r0, [r3, #0]
 80a30de:	6859      	ldr	r1, [r3, #4]
 80a30e0:	3308      	adds	r3, #8
 80a30e2:	c403      	stmia	r4!, {r0, r1}
 80a30e4:	42ab      	cmp	r3, r5
 80a30e6:	4622      	mov	r2, r4
 80a30e8:	d1f7      	bne.n	80a30da <_Z11elro_switchii+0xba>
 80a30ea:	e7aa      	b.n	80a3042 <_Z11elro_switchii+0x22>
 80a30ec:	080a8668 	.word	0x080a8668
 80a30f0:	080a8681 	.word	0x080a8681
 80a30f4:	080a86cc 	.word	0x080a86cc
 80a30f8:	080a869a 	.word	0x080a869a
 80a30fc:	080a86b3 	.word	0x080a86b3
 80a3100:	080a86e5 	.word	0x080a86e5

080a3104 <_Z17switch_pumpe_funkii.part.0>:
}

/*---------------------------------------------------------------------
Funk-Pumpe eines weiteren Wassertanks einschalten bzw. ausschalten
---------------------------------------------------------------------*/
int switch_pumpe_funk(int newState, int laufzeit) // pumpe ein- oder aus
 80a3104:	b510      	push	{r4, lr}

{
    if (newState == ON)
    {
        conrad_rsl_switch_code(RSL2, EIN); // Dosen-Label RSL2
 80a3106:	2101      	movs	r1, #1
int switch_pumpe_funk(int newState, int laufzeit) // pumpe ein- oder aus
 80a3108:	4604      	mov	r4, r0
        conrad_rsl_switch_code(RSL2, EIN); // Dosen-Label RSL2
 80a310a:	2002      	movs	r0, #2
 80a310c:	f7ff fee6 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
        st_funk_pumpe = ON;
 80a3110:	2201      	movs	r2, #1
 80a3112:	4b08      	ldr	r3, [pc, #32]	; (80a3134 <_Z17switch_pumpe_funkii.part.0+0x30>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 EINGESCHALTET ");
 80a3114:	4908      	ldr	r1, [pc, #32]	; (80a3138 <_Z17switch_pumpe_funkii.part.0+0x34>)
 80a3116:	4809      	ldr	r0, [pc, #36]	; (80a313c <_Z17switch_pumpe_funkii.part.0+0x38>)
        st_funk_pumpe = ON;
 80a3118:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 EINGESCHALTET ");
 80a311a:	f7fc ffef 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        tnow = getTime();
 80a311e:	f7fd fd27 	bl	80a0b70 <_Z7getTimev>
 80a3122:	4b07      	ldr	r3, [pc, #28]	; (80a3140 <_Z17switch_pumpe_funkii.part.0+0x3c>)
 80a3124:	6018      	str	r0, [r3, #0]
        tfunk_stop = tsec + laufzeit;
 80a3126:	4b07      	ldr	r3, [pc, #28]	; (80a3144 <_Z17switch_pumpe_funkii.part.0+0x40>)
 80a3128:	681b      	ldr	r3, [r3, #0]
 80a312a:	441c      	add	r4, r3
 80a312c:	4b06      	ldr	r3, [pc, #24]	; (80a3148 <_Z17switch_pumpe_funkii.part.0+0x44>)
 80a312e:	601c      	str	r4, [r3, #0]
        st_funk_pumpe = OFF;
        tfunk_stop = 4000;
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
    }
    return (newState);
}
 80a3130:	bd10      	pop	{r4, pc}
 80a3132:	bf00      	nop
 80a3134:	20000354 	.word	0x20000354
 80a3138:	080a86fe 	.word	0x080a86fe
 80a313c:	080a7a73 	.word	0x080a7a73
 80a3140:	200003f8 	.word	0x200003f8
 80a3144:	20000400 	.word	0x20000400
 80a3148:	200003bc 	.word	0x200003bc

080a314c <_Z17switch_pumpe_mainii>:
{
 80a314c:	b570      	push	{r4, r5, r6, lr}
 80a314e:	4605      	mov	r5, r0
 80a3150:	460e      	mov	r6, r1
    Serial.printlnf(" --------------------------------------------- ");
 80a3152:	f001 ffed 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a3156:	4945      	ldr	r1, [pc, #276]	; (80a326c <_Z17switch_pumpe_mainii+0x120>)
 80a3158:	f7fc ffab 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(" MAIN Pumpe schalten : %d Zeit %d", new_state, laufzeit);
 80a315c:	f001 ffe8 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a3160:	4633      	mov	r3, r6
 80a3162:	462a      	mov	r2, r5
 80a3164:	4942      	ldr	r1, [pc, #264]	; (80a3270 <_Z17switch_pumpe_mainii+0x124>)
 80a3166:	f7fc ffa4 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    pinMode(DO_PUMPE_MAIN, OUTPUT);
 80a316a:	2101      	movs	r1, #1
 80a316c:	4608      	mov	r0, r1
 80a316e:	f002 fa37 	bl	80a55e0 <pinMode>
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a3172:	2001      	movs	r0, #1
 80a3174:	f002 fa5e 	bl	80a5634 <digitalRead>
 80a3178:	4c3e      	ldr	r4, [pc, #248]	; (80a3274 <_Z17switch_pumpe_mainii+0x128>)
    if ((new_state == ON) & (st_main_pumpe == OFF))
 80a317a:	2d01      	cmp	r5, #1
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a317c:	6020      	str	r0, [r4, #0]
    if ((new_state == ON) & (st_main_pumpe == OFF))
 80a317e:	d14b      	bne.n	80a3218 <_Z17switch_pumpe_mainii+0xcc>
 80a3180:	2800      	cmp	r0, #0
 80a3182:	d149      	bne.n	80a3218 <_Z17switch_pumpe_mainii+0xcc>
        WriteToDatabase("WASSER", "BLUMEN GIESSEN BEGINNT  ");
 80a3184:	493c      	ldr	r1, [pc, #240]	; (80a3278 <_Z17switch_pumpe_mainii+0x12c>)
 80a3186:	483d      	ldr	r0, [pc, #244]	; (80a327c <_Z17switch_pumpe_mainii+0x130>)
 80a3188:	f7fc ffb8 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        old_level = ultra_sonic_measure();
 80a318c:	f7fd fa92 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a3190:	4d3b      	ldr	r5, [pc, #236]	; (80a3280 <_Z17switch_pumpe_mainii+0x134>)
 80a3192:	4602      	mov	r2, r0
 80a3194:	6028      	str	r0, [r5, #0]
        WriteToDatabase("WASSER", "WASSERSTAND before pumpe ON : ", old_level);
 80a3196:	493b      	ldr	r1, [pc, #236]	; (80a3284 <_Z17switch_pumpe_mainii+0x138>)
 80a3198:	4838      	ldr	r0, [pc, #224]	; (80a327c <_Z17switch_pumpe_mainii+0x130>)
 80a319a:	f7fd f803 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        if (old_level < TROCKENLAUF_SCHUTZ_LEVEL)
 80a319e:	682b      	ldr	r3, [r5, #0]
 80a31a0:	2b3b      	cmp	r3, #59	; 0x3b
 80a31a2:	dc05      	bgt.n	80a31b0 <_Z17switch_pumpe_mainii+0x64>
            WriteToDatabase("WASSER", "WASSERSTAND TROCKEN-LAUF-SCHUTZ. PUMPE NICHT EINSCHALTEN");
 80a31a4:	4938      	ldr	r1, [pc, #224]	; (80a3288 <_Z17switch_pumpe_mainii+0x13c>)
 80a31a6:	4835      	ldr	r0, [pc, #212]	; (80a327c <_Z17switch_pumpe_mainii+0x130>)
 80a31a8:	f7fc ffa8 	bl	80a00fc <_Z15WriteToDatabasePcS_>
    return (st_main_pumpe);
 80a31ac:	6820      	ldr	r0, [r4, #0]
}
 80a31ae:	bd70      	pop	{r4, r5, r6, pc}
        tnow = getTime();
 80a31b0:	f7fd fcde 	bl	80a0b70 <_Z7getTimev>
 80a31b4:	4b35      	ldr	r3, [pc, #212]	; (80a328c <_Z17switch_pumpe_mainii+0x140>)
 80a31b6:	6018      	str	r0, [r3, #0]
        tmain_stop = tsec + laufzeit;
 80a31b8:	4b35      	ldr	r3, [pc, #212]	; (80a3290 <_Z17switch_pumpe_mainii+0x144>)
 80a31ba:	6819      	ldr	r1, [r3, #0]
 80a31bc:	4b35      	ldr	r3, [pc, #212]	; (80a3294 <_Z17switch_pumpe_mainii+0x148>)
 80a31be:	440e      	add	r6, r1
        digitalWrite(DO_PUMPE_MAIN, 1);
 80a31c0:	2101      	movs	r1, #1
 80a31c2:	4608      	mov	r0, r1
        tmain_stop = tsec + laufzeit;
 80a31c4:	601e      	str	r6, [r3, #0]
        digitalWrite(DO_PUMPE_MAIN, 1);
 80a31c6:	f002 fa1c 	bl	80a5602 <digitalWrite>
        WriteToDatabase("WASSER", "HAUPT-PUMPE EINGESCHALTET : ", main_countDown);
 80a31ca:	4b33      	ldr	r3, [pc, #204]	; (80a3298 <_Z17switch_pumpe_mainii+0x14c>)
 80a31cc:	4933      	ldr	r1, [pc, #204]	; (80a329c <_Z17switch_pumpe_mainii+0x150>)
 80a31ce:	681a      	ldr	r2, [r3, #0]
 80a31d0:	482a      	ldr	r0, [pc, #168]	; (80a327c <_Z17switch_pumpe_mainii+0x130>)
 80a31d2:	f7fc ffe7 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
    delay(250);
 80a31d6:	20fa      	movs	r0, #250	; 0xfa
 80a31d8:	f001 fb5e 	bl	80a4898 <delay>
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a31dc:	2001      	movs	r0, #1
 80a31de:	f002 fa29 	bl	80a5634 <digitalRead>
    Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a31e2:	4d2f      	ldr	r5, [pc, #188]	; (80a32a0 <_Z17switch_pumpe_mainii+0x154>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a31e4:	6020      	str	r0, [r4, #0]
    Serial.printlnf(" DoPumpeMain    : %d ", st_main_pumpe);
 80a31e6:	f001 ffa3 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a31ea:	6822      	ldr	r2, [r4, #0]
 80a31ec:	492d      	ldr	r1, [pc, #180]	; (80a32a4 <_Z17switch_pumpe_mainii+0x158>)
 80a31ee:	f7fc ff60 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    readAdcChannels();
 80a31f2:	f7fd fce5 	bl	80a0bc0 <_Z15readAdcChannelsv>
    Serial.printlnf(" AiPumpeMain    : %d [mV]", AiPumpeMain);
 80a31f6:	f001 ff9b 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a31fa:	682a      	ldr	r2, [r5, #0]
 80a31fc:	492a      	ldr	r1, [pc, #168]	; (80a32a8 <_Z17switch_pumpe_mainii+0x15c>)
 80a31fe:	f7fc ff58 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeMain [mV] : ", AiPumpeMain);
 80a3202:	682a      	ldr	r2, [r5, #0]
 80a3204:	4929      	ldr	r1, [pc, #164]	; (80a32ac <_Z17switch_pumpe_mainii+0x160>)
 80a3206:	482a      	ldr	r0, [pc, #168]	; (80a32b0 <_Z17switch_pumpe_mainii+0x164>)
 80a3208:	f7fc ffcc 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
    Serial.printlnf(" --------------------------------------------- ");
 80a320c:	f001 ff90 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a3210:	4916      	ldr	r1, [pc, #88]	; (80a326c <_Z17switch_pumpe_mainii+0x120>)
 80a3212:	f7fc ff4e 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
 80a3216:	e7c9      	b.n	80a31ac <_Z17switch_pumpe_mainii+0x60>
    if ((new_state == OFF) & (st_main_pumpe == ON))
 80a3218:	2d00      	cmp	r5, #0
 80a321a:	d1dc      	bne.n	80a31d6 <_Z17switch_pumpe_mainii+0x8a>
 80a321c:	2801      	cmp	r0, #1
 80a321e:	d1da      	bne.n	80a31d6 <_Z17switch_pumpe_mainii+0x8a>
        digitalWrite(DO_PUMPE_MAIN, 0);
 80a3220:	2100      	movs	r1, #0
 80a3222:	f002 f9ee 	bl	80a5602 <digitalWrite>
        main_countDown = 0;
 80a3226:	2200      	movs	r2, #0
 80a3228:	4b1b      	ldr	r3, [pc, #108]	; (80a3298 <_Z17switch_pumpe_mainii+0x14c>)
        WriteToDatabase("WASSER", "HAUPT-PUMPE AUSGESCHALTET ");
 80a322a:	4922      	ldr	r1, [pc, #136]	; (80a32b4 <_Z17switch_pumpe_mainii+0x168>)
 80a322c:	4813      	ldr	r0, [pc, #76]	; (80a327c <_Z17switch_pumpe_mainii+0x130>)
        main_countDown = 0;
 80a322e:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "HAUPT-PUMPE AUSGESCHALTET ");
 80a3230:	f7fc ff64 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        new_level = ultra_sonic_measure();
 80a3234:	f7fd fa3e 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a3238:	4d1f      	ldr	r5, [pc, #124]	; (80a32b8 <_Z17switch_pumpe_mainii+0x16c>)
        WriteToDatabase("WASSER", "WASSERSTAND gefallen um [mm] : ", old_level - new_level);
 80a323a:	4e11      	ldr	r6, [pc, #68]	; (80a3280 <_Z17switch_pumpe_mainii+0x134>)
        new_level = ultra_sonic_measure();
 80a323c:	4602      	mov	r2, r0
        WriteToDatabase("WASSER", "WASSERSTAND after pumpe OFF : ", new_level);
 80a323e:	491f      	ldr	r1, [pc, #124]	; (80a32bc <_Z17switch_pumpe_mainii+0x170>)
        new_level = ultra_sonic_measure();
 80a3240:	6028      	str	r0, [r5, #0]
        WriteToDatabase("WASSER", "WASSERSTAND after pumpe OFF : ", new_level);
 80a3242:	480e      	ldr	r0, [pc, #56]	; (80a327c <_Z17switch_pumpe_mainii+0x130>)
 80a3244:	f7fc ffae 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        WriteToDatabase("WASSER", "WASSERSTAND gefallen um [mm] : ", old_level - new_level);
 80a3248:	682b      	ldr	r3, [r5, #0]
 80a324a:	6832      	ldr	r2, [r6, #0]
 80a324c:	491c      	ldr	r1, [pc, #112]	; (80a32c0 <_Z17switch_pumpe_mainii+0x174>)
 80a324e:	1ad2      	subs	r2, r2, r3
 80a3250:	480a      	ldr	r0, [pc, #40]	; (80a327c <_Z17switch_pumpe_mainii+0x130>)
 80a3252:	f7fc ffa7 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        if ((old_level - new_level) > 3)
 80a3256:	6833      	ldr	r3, [r6, #0]
 80a3258:	682a      	ldr	r2, [r5, #0]
 80a325a:	1a9b      	subs	r3, r3, r2
 80a325c:	2b03      	cmp	r3, #3
 80a325e:	ddba      	ble.n	80a31d6 <_Z17switch_pumpe_mainii+0x8a>
            WriteToDatabase("WASSER", "WASSERSTAND BLUMEN GIESSEN ERFOLGREICH BEENDET");
 80a3260:	4918      	ldr	r1, [pc, #96]	; (80a32c4 <_Z17switch_pumpe_mainii+0x178>)
 80a3262:	4806      	ldr	r0, [pc, #24]	; (80a327c <_Z17switch_pumpe_mainii+0x130>)
 80a3264:	f7fc ff4a 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a3268:	e7b5      	b.n	80a31d6 <_Z17switch_pumpe_mainii+0x8a>
 80a326a:	bf00      	nop
 80a326c:	080a871d 	.word	0x080a871d
 80a3270:	080a874d 	.word	0x080a874d
 80a3274:	20000358 	.word	0x20000358
 80a3278:	080a876f 	.word	0x080a876f
 80a327c:	080a7a73 	.word	0x080a7a73
 80a3280:	2000034c 	.word	0x2000034c
 80a3284:	080a8788 	.word	0x080a8788
 80a3288:	080a87a7 	.word	0x080a87a7
 80a328c:	200003f8 	.word	0x200003f8
 80a3290:	20000400 	.word	0x20000400
 80a3294:	200003f4 	.word	0x200003f4
 80a3298:	20000344 	.word	0x20000344
 80a329c:	080a87e0 	.word	0x080a87e0
 80a32a0:	200001a4 	.word	0x200001a4
 80a32a4:	080a8886 	.word	0x080a8886
 80a32a8:	080a808a 	.word	0x080a808a
 80a32ac:	080a889c 	.word	0x080a889c
 80a32b0:	080a80bb 	.word	0x080a80bb
 80a32b4:	080a87fd 	.word	0x080a87fd
 80a32b8:	20000348 	.word	0x20000348
 80a32bc:	080a8818 	.word	0x080a8818
 80a32c0:	080a8837 	.word	0x080a8837
 80a32c4:	080a8857 	.word	0x080a8857

080a32c8 <_Z20switch_pumpe_reserveii>:
{
 80a32c8:	b570      	push	{r4, r5, r6, lr}
 80a32ca:	4604      	mov	r4, r0
 80a32cc:	460e      	mov	r6, r1
    Serial.printlnf(" --------------------------------------------- ");
 80a32ce:	f001 ff2f 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a32d2:	493b      	ldr	r1, [pc, #236]	; (80a33c0 <_Z20switch_pumpe_reserveii+0xf8>)
 80a32d4:	f7fc feed 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf(" RESERVE Pumpe schalten : %d Zeit %d", new_state, laufzeit);
 80a32d8:	f001 ff2a 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a32dc:	4633      	mov	r3, r6
 80a32de:	4622      	mov	r2, r4
 80a32e0:	4938      	ldr	r1, [pc, #224]	; (80a33c4 <_Z20switch_pumpe_reserveii+0xfc>)
 80a32e2:	f7fc fee6 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    pinMode(DO_PUMPE_RESERVE, OUTPUT);
 80a32e6:	2101      	movs	r1, #1
 80a32e8:	2002      	movs	r0, #2
 80a32ea:	f002 f979 	bl	80a55e0 <pinMode>
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a32ee:	2002      	movs	r0, #2
 80a32f0:	f002 f9a0 	bl	80a5634 <digitalRead>
 80a32f4:	4d34      	ldr	r5, [pc, #208]	; (80a33c8 <_Z20switch_pumpe_reserveii+0x100>)
    if ((new_state == ON) & (st_reserve_pumpe == OFF))
 80a32f6:	2c01      	cmp	r4, #1
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a32f8:	6028      	str	r0, [r5, #0]
    if ((new_state == ON) & (st_reserve_pumpe == OFF))
 80a32fa:	d13d      	bne.n	80a3378 <_Z20switch_pumpe_reserveii+0xb0>
 80a32fc:	2800      	cmp	r0, #0
 80a32fe:	d13b      	bne.n	80a3378 <_Z20switch_pumpe_reserveii+0xb0>
        old_level = ultra_sonic_measure();
 80a3300:	f7fd f9d8 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a3304:	4b31      	ldr	r3, [pc, #196]	; (80a33cc <_Z20switch_pumpe_reserveii+0x104>)
 80a3306:	4602      	mov	r2, r0
 80a3308:	6018      	str	r0, [r3, #0]
        WriteToDatabase("WASSER", "WASSERSTAND before res-pumpe ON : ", old_level);
 80a330a:	4931      	ldr	r1, [pc, #196]	; (80a33d0 <_Z20switch_pumpe_reserveii+0x108>)
 80a330c:	4831      	ldr	r0, [pc, #196]	; (80a33d4 <_Z20switch_pumpe_reserveii+0x10c>)
 80a330e:	f7fc ff49 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        digitalWrite(DO_PUMPE_RESERVE, 1);
 80a3312:	2101      	movs	r1, #1
 80a3314:	2002      	movs	r0, #2
 80a3316:	f002 f974 	bl	80a5602 <digitalWrite>
        WriteToDatabase("WASSER", "RESERVE-PUMPE EINGESCHALTET ");
 80a331a:	492f      	ldr	r1, [pc, #188]	; (80a33d8 <_Z20switch_pumpe_reserveii+0x110>)
 80a331c:	482d      	ldr	r0, [pc, #180]	; (80a33d4 <_Z20switch_pumpe_reserveii+0x10c>)
 80a331e:	f7fc feed 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        tnow = getTime();
 80a3322:	f7fd fc25 	bl	80a0b70 <_Z7getTimev>
 80a3326:	4b2d      	ldr	r3, [pc, #180]	; (80a33dc <_Z20switch_pumpe_reserveii+0x114>)
 80a3328:	6018      	str	r0, [r3, #0]
        tres_stop = tsec + laufzeit;
 80a332a:	4b2d      	ldr	r3, [pc, #180]	; (80a33e0 <_Z20switch_pumpe_reserveii+0x118>)
 80a332c:	6819      	ldr	r1, [r3, #0]
 80a332e:	4b2d      	ldr	r3, [pc, #180]	; (80a33e4 <_Z20switch_pumpe_reserveii+0x11c>)
 80a3330:	440e      	add	r6, r1
 80a3332:	601e      	str	r6, [r3, #0]
    delay(250);
 80a3334:	20fa      	movs	r0, #250	; 0xfa
 80a3336:	f001 faaf 	bl	80a4898 <delay>
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a333a:	2002      	movs	r0, #2
 80a333c:	f002 f97a 	bl	80a5634 <digitalRead>
    Serial.printlnf(" AiPumpeReserve    : %d [mV]", AiPumpeReserve);
 80a3340:	4c29      	ldr	r4, [pc, #164]	; (80a33e8 <_Z20switch_pumpe_reserveii+0x120>)
    st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);
 80a3342:	6028      	str	r0, [r5, #0]
    Serial.printlnf(" DoPumpeReserve    : %d ", st_reserve_pumpe);
 80a3344:	f001 fef4 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a3348:	682a      	ldr	r2, [r5, #0]
 80a334a:	4928      	ldr	r1, [pc, #160]	; (80a33ec <_Z20switch_pumpe_reserveii+0x124>)
 80a334c:	f7fc feb1 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    readAdcChannels();
 80a3350:	f7fd fc36 	bl	80a0bc0 <_Z15readAdcChannelsv>
    Serial.printlnf(" AiPumpeReserve    : %d [mV]", AiPumpeReserve);
 80a3354:	f001 feec 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a3358:	6822      	ldr	r2, [r4, #0]
 80a335a:	4925      	ldr	r1, [pc, #148]	; (80a33f0 <_Z20switch_pumpe_reserveii+0x128>)
 80a335c:	f7fc fea9 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
    WriteToDatabase("ADC", "AiPumpeReserve [mV] : ", AiPumpeReserve);
 80a3360:	6822      	ldr	r2, [r4, #0]
 80a3362:	4924      	ldr	r1, [pc, #144]	; (80a33f4 <_Z20switch_pumpe_reserveii+0x12c>)
 80a3364:	4824      	ldr	r0, [pc, #144]	; (80a33f8 <_Z20switch_pumpe_reserveii+0x130>)
 80a3366:	f7fc ff1d 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
    Serial.printlnf(" --------------------------------------------- ");
 80a336a:	f001 fee1 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a336e:	4914      	ldr	r1, [pc, #80]	; (80a33c0 <_Z20switch_pumpe_reserveii+0xf8>)
 80a3370:	f7fc fe9f 	bl	80a00b2 <_ZN5Print8printlnfEPKcz>
}
 80a3374:	6828      	ldr	r0, [r5, #0]
 80a3376:	bd70      	pop	{r4, r5, r6, pc}
    if ((new_state == OFF) & (st_reserve_pumpe == ON))
 80a3378:	2c00      	cmp	r4, #0
 80a337a:	d1db      	bne.n	80a3334 <_Z20switch_pumpe_reserveii+0x6c>
 80a337c:	2801      	cmp	r0, #1
 80a337e:	d1d9      	bne.n	80a3334 <_Z20switch_pumpe_reserveii+0x6c>
        digitalWrite(DO_PUMPE_RESERVE, 0);
 80a3380:	2100      	movs	r1, #0
 80a3382:	2002      	movs	r0, #2
 80a3384:	f002 f93d 	bl	80a5602 <digitalWrite>
        WriteToDatabase("WASSER", "RESERVE-PUMPE AUSGESCHALTET. FUELLUNG NR. ",control.reserve_repetitions);
 80a3388:	4b1c      	ldr	r3, [pc, #112]	; (80a33fc <_Z20switch_pumpe_reserveii+0x134>)
 80a338a:	491d      	ldr	r1, [pc, #116]	; (80a3400 <_Z20switch_pumpe_reserveii+0x138>)
 80a338c:	691a      	ldr	r2, [r3, #16]
 80a338e:	4811      	ldr	r0, [pc, #68]	; (80a33d4 <_Z20switch_pumpe_reserveii+0x10c>)
 80a3390:	f7fc ff08 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        new_level = ultra_sonic_measure();
 80a3394:	f7fd f98e 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a3398:	4c1a      	ldr	r4, [pc, #104]	; (80a3404 <_Z20switch_pumpe_reserveii+0x13c>)
        WriteToDatabase("WASSER", "WASSERSTAND after res-pumpe OFF : ", new_level);
 80a339a:	491b      	ldr	r1, [pc, #108]	; (80a3408 <_Z20switch_pumpe_reserveii+0x140>)
        new_level = ultra_sonic_measure();
 80a339c:	4602      	mov	r2, r0
 80a339e:	6020      	str	r0, [r4, #0]
        WriteToDatabase("WASSER", "WASSERSTAND after res-pumpe OFF : ", new_level);
 80a33a0:	480c      	ldr	r0, [pc, #48]	; (80a33d4 <_Z20switch_pumpe_reserveii+0x10c>)
 80a33a2:	f7fc feff 	bl	80a01a4 <_Z15WriteToDatabasePcS_i>
        if ((new_level - old_level) > 5)
 80a33a6:	4a09      	ldr	r2, [pc, #36]	; (80a33cc <_Z20switch_pumpe_reserveii+0x104>)
 80a33a8:	6823      	ldr	r3, [r4, #0]
 80a33aa:	6812      	ldr	r2, [r2, #0]
            WriteToDatabase("WASSER", " WASSERSTAND ERROR: TANK FUELLEN fehlgeschlagen");
 80a33ac:	4809      	ldr	r0, [pc, #36]	; (80a33d4 <_Z20switch_pumpe_reserveii+0x10c>)
        if ((new_level - old_level) > 5)
 80a33ae:	1a9b      	subs	r3, r3, r2
 80a33b0:	2b05      	cmp	r3, #5
            WriteToDatabase("WASSER", " WASSERSTAND TANK FUELLEN ERFOLGREICH BEENDET");
 80a33b2:	bfcc      	ite	gt
 80a33b4:	4915      	ldrgt	r1, [pc, #84]	; (80a340c <_Z20switch_pumpe_reserveii+0x144>)
            WriteToDatabase("WASSER", " WASSERSTAND ERROR: TANK FUELLEN fehlgeschlagen");
 80a33b6:	4916      	ldrle	r1, [pc, #88]	; (80a3410 <_Z20switch_pumpe_reserveii+0x148>)
 80a33b8:	f7fc fea0 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a33bc:	e7ba      	b.n	80a3334 <_Z20switch_pumpe_reserveii+0x6c>
 80a33be:	bf00      	nop
 80a33c0:	080a871d 	.word	0x080a871d
 80a33c4:	080a88b0 	.word	0x080a88b0
 80a33c8:	2000035c 	.word	0x2000035c
 80a33cc:	2000034c 	.word	0x2000034c
 80a33d0:	080a88d5 	.word	0x080a88d5
 80a33d4:	080a7a73 	.word	0x080a7a73
 80a33d8:	080a88f8 	.word	0x080a88f8
 80a33dc:	200003f8 	.word	0x200003f8
 80a33e0:	20000400 	.word	0x20000400
 80a33e4:	200003fc 	.word	0x200003fc
 80a33e8:	200001a8 	.word	0x200001a8
 80a33ec:	080a89c1 	.word	0x080a89c1
 80a33f0:	080a89da 	.word	0x080a89da
 80a33f4:	080a80d9 	.word	0x080a80d9
 80a33f8:	080a80bb 	.word	0x080a80bb
 80a33fc:	20000314 	.word	0x20000314
 80a3400:	080a8915 	.word	0x080a8915
 80a3404:	20000348 	.word	0x20000348
 80a3408:	080a8940 	.word	0x080a8940
 80a340c:	080a8963 	.word	0x080a8963
 80a3410:	080a8991 	.word	0x080a8991

080a3414 <_Z17switch_pumpe_funkii>:
{
 80a3414:	b510      	push	{r4, lr}
 80a3416:	4604      	mov	r4, r0
    if (newState == ON)
 80a3418:	2c01      	cmp	r4, #1
{
 80a341a:	4608      	mov	r0, r1
    if (newState == ON)
 80a341c:	d103      	bne.n	80a3426 <_Z17switch_pumpe_funkii+0x12>
 80a341e:	f7ff fe71 	bl	80a3104 <_Z17switch_pumpe_funkii.part.0>
}
 80a3422:	4620      	mov	r0, r4
 80a3424:	bd10      	pop	{r4, pc}
        conrad_rsl_switch_code(RSL2, AUS); // Dosen-Label RSL2
 80a3426:	2100      	movs	r1, #0
 80a3428:	2002      	movs	r0, #2
 80a342a:	f7ff fd57 	bl	80a2edc <_Z22conrad_rsl_switch_codeii>
        st_funk_pumpe = OFF;
 80a342e:	2200      	movs	r2, #0
 80a3430:	4b05      	ldr	r3, [pc, #20]	; (80a3448 <_Z17switch_pumpe_funkii+0x34>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
 80a3432:	4906      	ldr	r1, [pc, #24]	; (80a344c <_Z17switch_pumpe_funkii+0x38>)
        st_funk_pumpe = OFF;
 80a3434:	601a      	str	r2, [r3, #0]
        tfunk_stop = 4000;
 80a3436:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80a343a:	4b05      	ldr	r3, [pc, #20]	; (80a3450 <_Z17switch_pumpe_funkii+0x3c>)
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
 80a343c:	4805      	ldr	r0, [pc, #20]	; (80a3454 <_Z17switch_pumpe_funkii+0x40>)
        tfunk_stop = 4000;
 80a343e:	601a      	str	r2, [r3, #0]
        WriteToDatabase("WASSER", "FUNK-PUMPE RSL2 AUSGESCHALTET ");
 80a3440:	f7fc fe5c 	bl	80a00fc <_Z15WriteToDatabasePcS_>
 80a3444:	e7ed      	b.n	80a3422 <_Z17switch_pumpe_funkii+0xe>
 80a3446:	bf00      	nop
 80a3448:	20000354 	.word	0x20000354
 80a344c:	080a89f7 	.word	0x080a89f7
 80a3450:	200003bc 	.word	0x200003bc
 80a3454:	080a7a73 	.word	0x080a7a73

080a3458 <_Z13BlumenGiessenii>:
now = 1 : jetzt sofort Giessen
now = 0 : giesse wenn tnow = ts zur geplanten Zeit
done_giessen muß 0 sein
---------------------------------------------------------------------*/
void BlumenGiessen(int now, int ts)
{
 80a3458:	b538      	push	{r3, r4, r5, lr}
    int day = 0;

    if (done_giessen == 1) return;
 80a345a:	4c18      	ldr	r4, [pc, #96]	; (80a34bc <_Z13BlumenGiessenii+0x64>)
 80a345c:	6823      	ldr	r3, [r4, #0]
 80a345e:	2b01      	cmp	r3, #1
 80a3460:	d00e      	beq.n	80a3480 <_Z13BlumenGiessenii+0x28>
    
    if (tnow == ts || now == 1)
 80a3462:	4b17      	ldr	r3, [pc, #92]	; (80a34c0 <_Z13BlumenGiessenii+0x68>)
 80a3464:	681b      	ldr	r3, [r3, #0]
 80a3466:	428b      	cmp	r3, r1
 80a3468:	d001      	beq.n	80a346e <_Z13BlumenGiessenii+0x16>
 80a346a:	2801      	cmp	r0, #1
 80a346c:	d108      	bne.n	80a3480 <_Z13BlumenGiessenii+0x28>
    {
        if (control.dontGiessen == 1)
 80a346e:	4b15      	ldr	r3, [pc, #84]	; (80a34c4 <_Z13BlumenGiessenii+0x6c>)
 80a3470:	689d      	ldr	r5, [r3, #8]
 80a3472:	2d01      	cmp	r5, #1
 80a3474:	d105      	bne.n	80a3482 <_Z13BlumenGiessenii+0x2a>
        {
            WriteToDatabase("WASSER", "WASSERSTAND : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a3476:	4914      	ldr	r1, [pc, #80]	; (80a34c8 <_Z13BlumenGiessenii+0x70>)
 80a3478:	4814      	ldr	r0, [pc, #80]	; (80a34cc <_Z13BlumenGiessenii+0x74>)
 80a347a:	f7fc fe3f 	bl	80a00fc <_Z15WriteToDatabasePcS_>
            done_giessen = 1;
 80a347e:	6025      	str	r5, [r4, #0]
            delay(1000);
            st_funk_pumpe = switch_pumpe_funk(ON, 10);
        }
        done_giessen = 1;
    }
}
 80a3480:	bd38      	pop	{r3, r4, r5, pc}
        st_main_pumpe = switch_pumpe_main(ON, control.pumpe_count_down);
 80a3482:	68d9      	ldr	r1, [r3, #12]
 80a3484:	2001      	movs	r0, #1
 80a3486:	f7ff fe61 	bl	80a314c <_Z17switch_pumpe_mainii>
 80a348a:	4b11      	ldr	r3, [pc, #68]	; (80a34d0 <_Z13BlumenGiessenii+0x78>)
 80a348c:	6018      	str	r0, [r3, #0]
        day = Time.weekday(); // North American implementation : Sunday is day number one, Monday is day numer two
 80a348e:	f001 f9dd 	bl	80a484c <_ZN9TimeClass7weekdayEv>
        if ( (day %2) == 0) // Monday, Wednesday, Friday, Sunday 
 80a3492:	f010 0101 	ands.w	r1, r0, #1
 80a3496:	d10d      	bne.n	80a34b4 <_Z13BlumenGiessenii+0x5c>
            st_funk_pumpe = switch_pumpe_funk(OFF,0);
 80a3498:	4608      	mov	r0, r1
 80a349a:	f7ff ffbb 	bl	80a3414 <_Z17switch_pumpe_funkii>
 80a349e:	4d0d      	ldr	r5, [pc, #52]	; (80a34d4 <_Z13BlumenGiessenii+0x7c>)
 80a34a0:	6028      	str	r0, [r5, #0]
            delay(1000);
 80a34a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a34a6:	f001 f9f7 	bl	80a4898 <delay>
    if (newState == ON)
 80a34aa:	200a      	movs	r0, #10
 80a34ac:	f7ff fe2a 	bl	80a3104 <_Z17switch_pumpe_funkii.part.0>
            st_funk_pumpe = switch_pumpe_funk(ON, 10);
 80a34b0:	2301      	movs	r3, #1
 80a34b2:	602b      	str	r3, [r5, #0]
        done_giessen = 1;
 80a34b4:	2301      	movs	r3, #1
 80a34b6:	6023      	str	r3, [r4, #0]
 80a34b8:	e7e2      	b.n	80a3480 <_Z13BlumenGiessenii+0x28>
 80a34ba:	bf00      	nop
 80a34bc:	20000328 	.word	0x20000328
 80a34c0:	200003f8 	.word	0x200003f8
 80a34c4:	20000314 	.word	0x20000314
 80a34c8:	080a823c 	.word	0x080a823c
 80a34cc:	080a7a73 	.word	0x080a7a73
 80a34d0:	20000358 	.word	0x20000358
 80a34d4:	20000354 	.word	0x20000354

080a34d8 <_Z11TankFuelleni>:
/*---------------------------------------------------------------------
Tank fuellen -> schalte reserve pumpe ein wenn der Wasserstand 
kleiner als der critical level ist
---------------------------------------------------------------------*/
void TankFuellen(int critical_level)
{
 80a34d8:	b510      	push	{r4, lr}
 80a34da:	4604      	mov	r4, r0
    println(" Tankfuellen() ");
 80a34dc:	4819      	ldr	r0, [pc, #100]	; (80a3544 <_Z11TankFuelleni+0x6c>)
 80a34de:	f7fe f8c3 	bl	80a1668 <_Z7printlnPc>

    waterlevel = ultra_sonic_measure();
 80a34e2:	f7fd f8e7 	bl	80a06b4 <_Z19ultra_sonic_measurev>
 80a34e6:	4b18      	ldr	r3, [pc, #96]	; (80a3548 <_Z11TankFuelleni+0x70>)

    if (waterlevel > critical_level)
 80a34e8:	42a0      	cmp	r0, r4
    waterlevel = ultra_sonic_measure();
 80a34ea:	6018      	str	r0, [r3, #0]
    if (waterlevel > critical_level)
 80a34ec:	dd05      	ble.n	80a34fa <_Z11TankFuelleni+0x22>
    {
            WriteToDatabase("WASSER", " TANKFUELLEN : NICHT NOTWENDIG ");
 80a34ee:	4917      	ldr	r1, [pc, #92]	; (80a354c <_Z11TankFuelleni+0x74>)
    if ((waterlevel > 0) & (waterlevel < critical_level) & (st_reserve_pumpe == OFF))
    {

        if (control.dontGiessen == 1)
        {
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a34f0:	4817      	ldr	r0, [pc, #92]	; (80a3550 <_Z11TankFuelleni+0x78>)
        }

        WriteToDatabase("WASSER", "WASSERSTAND TANK FUELLEN gestartet ");
        st_reserve_pumpe = switch_pumpe_reserve(1, RESERVE_PUMPE_LAUFZEIT);
    }
}
 80a34f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a34f6:	f7fc be01 	b.w	80a00fc <_Z15WriteToDatabasePcS_>
    if(control.reserve_repetitions > MAX_NACHFUELL_REPETITIONS)
 80a34fa:	4b16      	ldr	r3, [pc, #88]	; (80a3554 <_Z11TankFuelleni+0x7c>)
 80a34fc:	691a      	ldr	r2, [r3, #16]
 80a34fe:	2a05      	cmp	r2, #5
 80a3500:	d905      	bls.n	80a350e <_Z11TankFuelleni+0x36>
}
 80a3502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WriteToDatabase("WASSER", "ERROR - ABORT: Wiederholungen des Tankfuellens ueberschritten = ",control.reserve_repetitions);    
 80a3506:	4914      	ldr	r1, [pc, #80]	; (80a3558 <_Z11TankFuelleni+0x80>)
 80a3508:	4811      	ldr	r0, [pc, #68]	; (80a3550 <_Z11TankFuelleni+0x78>)
 80a350a:	f7fc be4b 	b.w	80a01a4 <_Z15WriteToDatabasePcS_i>
    if ((waterlevel > 0) & (waterlevel < critical_level) & (st_reserve_pumpe == OFF))
 80a350e:	2800      	cmp	r0, #0
 80a3510:	bfd4      	ite	le
 80a3512:	2200      	movle	r2, #0
 80a3514:	2201      	movgt	r2, #1
 80a3516:	42a0      	cmp	r0, r4
 80a3518:	bfa8      	it	ge
 80a351a:	2200      	movge	r2, #0
 80a351c:	b182      	cbz	r2, 80a3540 <_Z11TankFuelleni+0x68>
 80a351e:	4c0f      	ldr	r4, [pc, #60]	; (80a355c <_Z11TankFuelleni+0x84>)
 80a3520:	6822      	ldr	r2, [r4, #0]
 80a3522:	b96a      	cbnz	r2, 80a3540 <_Z11TankFuelleni+0x68>
        if (control.dontGiessen == 1)
 80a3524:	689b      	ldr	r3, [r3, #8]
 80a3526:	2b01      	cmp	r3, #1
 80a3528:	d101      	bne.n	80a352e <_Z11TankFuelleni+0x56>
            WriteToDatabase("WASSER", "WASSERSTAND TANKFUELLEN : BLUMEN GIESSEN IST DEAKTIVIERT ");
 80a352a:	490d      	ldr	r1, [pc, #52]	; (80a3560 <_Z11TankFuelleni+0x88>)
 80a352c:	e7e0      	b.n	80a34f0 <_Z11TankFuelleni+0x18>
        WriteToDatabase("WASSER", "WASSERSTAND TANK FUELLEN gestartet ");
 80a352e:	490d      	ldr	r1, [pc, #52]	; (80a3564 <_Z11TankFuelleni+0x8c>)
 80a3530:	4807      	ldr	r0, [pc, #28]	; (80a3550 <_Z11TankFuelleni+0x78>)
 80a3532:	f7fc fde3 	bl	80a00fc <_Z15WriteToDatabasePcS_>
        st_reserve_pumpe = switch_pumpe_reserve(1, RESERVE_PUMPE_LAUFZEIT);
 80a3536:	215a      	movs	r1, #90	; 0x5a
 80a3538:	2001      	movs	r0, #1
 80a353a:	f7ff fec5 	bl	80a32c8 <_Z20switch_pumpe_reserveii>
 80a353e:	6020      	str	r0, [r4, #0]
}
 80a3540:	bd10      	pop	{r4, pc}
 80a3542:	bf00      	nop
 80a3544:	080a8a16 	.word	0x080a8a16
 80a3548:	20000028 	.word	0x20000028
 80a354c:	080a8a26 	.word	0x080a8a26
 80a3550:	080a7a73 	.word	0x080a7a73
 80a3554:	20000314 	.word	0x20000314
 80a3558:	080a8a46 	.word	0x080a8a46
 80a355c:	2000035c 	.word	0x2000035c
 80a3560:	080a8a87 	.word	0x080a8a87
 80a3564:	080a8ac1 	.word	0x080a8ac1

080a3568 <_Z9CountDownv>:
{
 80a3568:	b570      	push	{r4, r5, r6, lr}
    tnow = getTime();
 80a356a:	f7fd fb01 	bl	80a0b70 <_Z7getTimev>
 80a356e:	4b2a      	ldr	r3, [pc, #168]	; (80a3618 <_Z9CountDownv+0xb0>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a3570:	4e2a      	ldr	r6, [pc, #168]	; (80a361c <_Z9CountDownv+0xb4>)
    tnow = getTime();
 80a3572:	6018      	str	r0, [r3, #0]
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a3574:	2001      	movs	r0, #1
 80a3576:	f002 f85d 	bl	80a5634 <digitalRead>
    if (st_main_pumpe == ON)
 80a357a:	2801      	cmp	r0, #1
 80a357c:	4c28      	ldr	r4, [pc, #160]	; (80a3620 <_Z9CountDownv+0xb8>)
    st_main_pumpe = digitalRead(DO_PUMPE_MAIN);
 80a357e:	6030      	str	r0, [r6, #0]
    if (st_main_pumpe == ON)
 80a3580:	d119      	bne.n	80a35b6 <_Z9CountDownv+0x4e>
        println("tmain stop", tmain_stop);
 80a3582:	4d28      	ldr	r5, [pc, #160]	; (80a3624 <_Z9CountDownv+0xbc>)
        println("tsec", tsec);
 80a3584:	6821      	ldr	r1, [r4, #0]
 80a3586:	4828      	ldr	r0, [pc, #160]	; (80a3628 <_Z9CountDownv+0xc0>)
 80a3588:	f7fe fae0 	bl	80a1b4c <_Z7printlnPci>
        println("tmain stop", tmain_stop);
 80a358c:	6829      	ldr	r1, [r5, #0]
 80a358e:	4827      	ldr	r0, [pc, #156]	; (80a362c <_Z9CountDownv+0xc4>)
 80a3590:	f7fe fadc 	bl	80a1b4c <_Z7printlnPci>
    if ((st_main_pumpe == ON) & (tsec > tmain_stop ))
 80a3594:	6822      	ldr	r2, [r4, #0]
 80a3596:	682b      	ldr	r3, [r5, #0]
 80a3598:	429a      	cmp	r2, r3
 80a359a:	dd0c      	ble.n	80a35b6 <_Z9CountDownv+0x4e>
 80a359c:	6833      	ldr	r3, [r6, #0]
 80a359e:	2b01      	cmp	r3, #1
 80a35a0:	d109      	bne.n	80a35b6 <_Z9CountDownv+0x4e>
        switch_pumpe_main(OFF, 0);
 80a35a2:	2100      	movs	r1, #0
        tmain_stop = 4000;
 80a35a4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
        switch_pumpe_main(OFF, 0);
 80a35a8:	4608      	mov	r0, r1
        tmain_stop = 4000;
 80a35aa:	602b      	str	r3, [r5, #0]
        switch_pumpe_main(OFF, 0);
 80a35ac:	f7ff fdce 	bl	80a314c <_Z17switch_pumpe_mainii>
        TankFuellen(LOW_LEVEL_TANKFUELLEN);
 80a35b0:	205f      	movs	r0, #95	; 0x5f
 80a35b2:	f7ff ff91 	bl	80a34d8 <_Z11TankFuelleni>
     st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);   
 80a35b6:	2002      	movs	r0, #2
 80a35b8:	f002 f83c 	bl	80a5634 <digitalRead>
 80a35bc:	4b1c      	ldr	r3, [pc, #112]	; (80a3630 <_Z9CountDownv+0xc8>)
    if ((st_reserve_pumpe == ON) & (tsec > tres_stop))
 80a35be:	6821      	ldr	r1, [r4, #0]
     st_reserve_pumpe = digitalRead(DO_PUMPE_RESERVE);   
 80a35c0:	6018      	str	r0, [r3, #0]
    if ((st_reserve_pumpe == ON) & (tsec > tres_stop))
 80a35c2:	4b1c      	ldr	r3, [pc, #112]	; (80a3634 <_Z9CountDownv+0xcc>)
 80a35c4:	681a      	ldr	r2, [r3, #0]
 80a35c6:	4291      	cmp	r1, r2
 80a35c8:	dd13      	ble.n	80a35f2 <_Z9CountDownv+0x8a>
 80a35ca:	2801      	cmp	r0, #1
 80a35cc:	d111      	bne.n	80a35f2 <_Z9CountDownv+0x8a>
        tres_stop = 4000;
 80a35ce:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
        control.reserve_repetitions++;
 80a35d2:	4d19      	ldr	r5, [pc, #100]	; (80a3638 <_Z9CountDownv+0xd0>)
        tres_stop = 4000;
 80a35d4:	601a      	str	r2, [r3, #0]
        control.reserve_repetitions++;
 80a35d6:	692b      	ldr	r3, [r5, #16]
 80a35d8:	3301      	adds	r3, #1
 80a35da:	612b      	str	r3, [r5, #16]
        EEPROM.put(0, control);            
 80a35dc:	f002 f87c 	bl	80a56d8 <_Z21__fetch_global_EEPROMv>
 80a35e0:	4629      	mov	r1, r5
 80a35e2:	2000      	movs	r0, #0
 80a35e4:	2214      	movs	r2, #20
 80a35e6:	f000 f8d1 	bl	80a378c <HAL_EEPROM_Put>
        switch_pumpe_reserve(OFF, 0);
 80a35ea:	2100      	movs	r1, #0
 80a35ec:	4608      	mov	r0, r1
 80a35ee:	f7ff fe6b 	bl	80a32c8 <_Z20switch_pumpe_reserveii>
    if ((st_funk_pumpe == ON) & (tsec > tfunk_stop ))
 80a35f2:	4b12      	ldr	r3, [pc, #72]	; (80a363c <_Z9CountDownv+0xd4>)
 80a35f4:	6821      	ldr	r1, [r4, #0]
 80a35f6:	681a      	ldr	r2, [r3, #0]
 80a35f8:	4291      	cmp	r1, r2
 80a35fa:	dd0c      	ble.n	80a3616 <_Z9CountDownv+0xae>
 80a35fc:	4a10      	ldr	r2, [pc, #64]	; (80a3640 <_Z9CountDownv+0xd8>)
 80a35fe:	6812      	ldr	r2, [r2, #0]
 80a3600:	2a01      	cmp	r2, #1
 80a3602:	d108      	bne.n	80a3616 <_Z9CountDownv+0xae>
        tfunk_stop = 4000;
 80a3604:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
        switch_pumpe_funk(OFF, 0);
 80a3608:	2100      	movs	r1, #0
        tfunk_stop = 4000;
 80a360a:	601a      	str	r2, [r3, #0]
        switch_pumpe_funk(OFF, 0);
 80a360c:	4608      	mov	r0, r1
}
 80a360e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        switch_pumpe_funk(OFF, 0);
 80a3612:	f7ff beff 	b.w	80a3414 <_Z17switch_pumpe_funkii>
}
 80a3616:	bd70      	pop	{r4, r5, r6, pc}
 80a3618:	200003f8 	.word	0x200003f8
 80a361c:	20000358 	.word	0x20000358
 80a3620:	20000400 	.word	0x20000400
 80a3624:	200003f4 	.word	0x200003f4
 80a3628:	080a8ae5 	.word	0x080a8ae5
 80a362c:	080a8aea 	.word	0x080a8aea
 80a3630:	2000035c 	.word	0x2000035c
 80a3634:	200003fc 	.word	0x200003fc
 80a3638:	20000314 	.word	0x20000314
 80a363c:	200003bc 	.word	0x200003bc
 80a3640:	20000354 	.word	0x20000354

080a3644 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
 80a3644:	f001 b928 	b.w	80a4898 <delay>

080a3648 <_Z11BlynkMillisv>:
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a3648:	f000 b888 	b.w	80a375c <HAL_Timer_Get_Milli_Seconds>

080a364c <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
 80a364c:	4770      	bx	lr

080a364e <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
 80a364e:	4770      	bx	lr

080a3650 <BlynkNoOpCbk>:
{}
 80a3650:	4770      	bx	lr
	...

080a3654 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
 80a3654:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
 80a3656:	bf5a      	itte	pl
 80a3658:	4b02      	ldrpl	r3, [pc, #8]	; (80a3664 <GetReadHandler+0x10>)
 80a365a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
 80a365e:	2000      	movmi	r0, #0
#endif
}
 80a3660:	4770      	bx	lr
 80a3662:	bf00      	nop
 80a3664:	080a8af8 	.word	0x080a8af8

080a3668 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
 80a3668:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
 80a366a:	bf5a      	itte	pl
 80a366c:	4b02      	ldrpl	r3, [pc, #8]	; (80a3678 <GetWriteHandler+0x10>)
 80a366e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
 80a3672:	2000      	movmi	r0, #0
#endif
}
 80a3674:	4770      	bx	lr
 80a3676:	bf00      	nop
 80a3678:	080a8cf8 	.word	0x080a8cf8

080a367c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a367c:	b508      	push	{r3, lr}
 80a367e:	4b02      	ldr	r3, [pc, #8]	; (80a3688 <HAL_Pin_Map+0xc>)
 80a3680:	681b      	ldr	r3, [r3, #0]
 80a3682:	681b      	ldr	r3, [r3, #0]
 80a3684:	9301      	str	r3, [sp, #4]
 80a3686:	bd08      	pop	{r3, pc}
 80a3688:	080601b0 	.word	0x080601b0

080a368c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a368c:	b508      	push	{r3, lr}
 80a368e:	4b02      	ldr	r3, [pc, #8]	; (80a3698 <HAL_Validate_Pin_Function+0xc>)
 80a3690:	681b      	ldr	r3, [r3, #0]
 80a3692:	685b      	ldr	r3, [r3, #4]
 80a3694:	9301      	str	r3, [sp, #4]
 80a3696:	bd08      	pop	{r3, pc}
 80a3698:	080601b0 	.word	0x080601b0

080a369c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a369c:	b508      	push	{r3, lr}
 80a369e:	4b02      	ldr	r3, [pc, #8]	; (80a36a8 <HAL_Pin_Mode+0xc>)
 80a36a0:	681b      	ldr	r3, [r3, #0]
 80a36a2:	689b      	ldr	r3, [r3, #8]
 80a36a4:	9301      	str	r3, [sp, #4]
 80a36a6:	bd08      	pop	{r3, pc}
 80a36a8:	080601b0 	.word	0x080601b0

080a36ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a36ac:	b508      	push	{r3, lr}
 80a36ae:	4b02      	ldr	r3, [pc, #8]	; (80a36b8 <HAL_Get_Pin_Mode+0xc>)
 80a36b0:	681b      	ldr	r3, [r3, #0]
 80a36b2:	68db      	ldr	r3, [r3, #12]
 80a36b4:	9301      	str	r3, [sp, #4]
 80a36b6:	bd08      	pop	{r3, pc}
 80a36b8:	080601b0 	.word	0x080601b0

080a36bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a36bc:	b508      	push	{r3, lr}
 80a36be:	4b02      	ldr	r3, [pc, #8]	; (80a36c8 <HAL_GPIO_Write+0xc>)
 80a36c0:	681b      	ldr	r3, [r3, #0]
 80a36c2:	691b      	ldr	r3, [r3, #16]
 80a36c4:	9301      	str	r3, [sp, #4]
 80a36c6:	bd08      	pop	{r3, pc}
 80a36c8:	080601b0 	.word	0x080601b0

080a36cc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a36cc:	b508      	push	{r3, lr}
 80a36ce:	4b02      	ldr	r3, [pc, #8]	; (80a36d8 <HAL_GPIO_Read+0xc>)
 80a36d0:	681b      	ldr	r3, [r3, #0]
 80a36d2:	695b      	ldr	r3, [r3, #20]
 80a36d4:	9301      	str	r3, [sp, #4]
 80a36d6:	bd08      	pop	{r3, pc}
 80a36d8:	080601b0 	.word	0x080601b0

080a36dc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a36dc:	b508      	push	{r3, lr}
 80a36de:	4b02      	ldr	r3, [pc, #8]	; (80a36e8 <HAL_Interrupts_Enable_All+0xc>)
 80a36e0:	681b      	ldr	r3, [r3, #0]
 80a36e2:	6a1b      	ldr	r3, [r3, #32]
 80a36e4:	9301      	str	r3, [sp, #4]
 80a36e6:	bd08      	pop	{r3, pc}
 80a36e8:	080601b0 	.word	0x080601b0

080a36ec <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a36ec:	b508      	push	{r3, lr}
 80a36ee:	4b02      	ldr	r3, [pc, #8]	; (80a36f8 <HAL_Interrupts_Disable_All+0xc>)
 80a36f0:	681b      	ldr	r3, [r3, #0]
 80a36f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a36f4:	9301      	str	r3, [sp, #4]
 80a36f6:	bd08      	pop	{r3, pc}
 80a36f8:	080601b0 	.word	0x080601b0

080a36fc <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a36fc:	b508      	push	{r3, lr}
 80a36fe:	4b02      	ldr	r3, [pc, #8]	; (80a3708 <HAL_DAC_Write+0xc>)
 80a3700:	681b      	ldr	r3, [r3, #0]
 80a3702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3704:	9301      	str	r3, [sp, #4]
 80a3706:	bd08      	pop	{r3, pc}
 80a3708:	080601b0 	.word	0x080601b0

080a370c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a370c:	b508      	push	{r3, lr}
 80a370e:	4b02      	ldr	r3, [pc, #8]	; (80a3718 <hal_adc_read+0xc>)
 80a3710:	681b      	ldr	r3, [r3, #0]
 80a3712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3714:	9301      	str	r3, [sp, #4]
 80a3716:	bd08      	pop	{r3, pc}
 80a3718:	080601b0 	.word	0x080601b0

080a371c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a371c:	b508      	push	{r3, lr}
 80a371e:	4b02      	ldr	r3, [pc, #8]	; (80a3728 <HAL_Pulse_In+0xc>)
 80a3720:	681b      	ldr	r3, [r3, #0]
 80a3722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3724:	9301      	str	r3, [sp, #4]
 80a3726:	bd08      	pop	{r3, pc}
 80a3728:	080601b0 	.word	0x080601b0

080a372c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 80a372c:	b508      	push	{r3, lr}
 80a372e:	4b02      	ldr	r3, [pc, #8]	; (80a3738 <hal_pwm_write_ext+0xc>)
 80a3730:	681b      	ldr	r3, [r3, #0]
 80a3732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a3734:	9301      	str	r3, [sp, #4]
 80a3736:	bd08      	pop	{r3, pc}
 80a3738:	080601b0 	.word	0x080601b0

080a373c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a373c:	b508      	push	{r3, lr}
 80a373e:	4b02      	ldr	r3, [pc, #8]	; (80a3748 <HAL_RNG_GetRandomNumber+0xc>)
 80a3740:	681b      	ldr	r3, [r3, #0]
 80a3742:	685b      	ldr	r3, [r3, #4]
 80a3744:	9301      	str	r3, [sp, #4]
 80a3746:	bd08      	pop	{r3, pc}
 80a3748:	0806019c 	.word	0x0806019c

080a374c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a374c:	b508      	push	{r3, lr}
 80a374e:	4b02      	ldr	r3, [pc, #8]	; (80a3758 <HAL_Delay_Microseconds+0xc>)
 80a3750:	681b      	ldr	r3, [r3, #0]
 80a3752:	68db      	ldr	r3, [r3, #12]
 80a3754:	9301      	str	r3, [sp, #4]
 80a3756:	bd08      	pop	{r3, pc}
 80a3758:	0806019c 	.word	0x0806019c

080a375c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a375c:	b508      	push	{r3, lr}
 80a375e:	4b02      	ldr	r3, [pc, #8]	; (80a3768 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a3760:	681b      	ldr	r3, [r3, #0]
 80a3762:	695b      	ldr	r3, [r3, #20]
 80a3764:	9301      	str	r3, [sp, #4]
 80a3766:	bd08      	pop	{r3, pc}
 80a3768:	0806019c 	.word	0x0806019c

080a376c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a376c:	b508      	push	{r3, lr}
 80a376e:	4b02      	ldr	r3, [pc, #8]	; (80a3778 <HAL_EEPROM_Init+0xc>)
 80a3770:	681b      	ldr	r3, [r3, #0]
 80a3772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3774:	9301      	str	r3, [sp, #4]
 80a3776:	bd08      	pop	{r3, pc}
 80a3778:	0806019c 	.word	0x0806019c

080a377c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a377c:	b508      	push	{r3, lr}
 80a377e:	4b02      	ldr	r3, [pc, #8]	; (80a3788 <HAL_EEPROM_Get+0xc>)
 80a3780:	681b      	ldr	r3, [r3, #0]
 80a3782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3784:	9301      	str	r3, [sp, #4]
 80a3786:	bd08      	pop	{r3, pc}
 80a3788:	0806019c 	.word	0x0806019c

080a378c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a378c:	b508      	push	{r3, lr}
 80a378e:	4b02      	ldr	r3, [pc, #8]	; (80a3798 <HAL_EEPROM_Put+0xc>)
 80a3790:	681b      	ldr	r3, [r3, #0]
 80a3792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3794:	9301      	str	r3, [sp, #4]
 80a3796:	bd08      	pop	{r3, pc}
 80a3798:	0806019c 	.word	0x0806019c

080a379c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a379c:	b508      	push	{r3, lr}
 80a379e:	4b02      	ldr	r3, [pc, #8]	; (80a37a8 <hal_rtc_time_is_valid+0xc>)
 80a37a0:	681b      	ldr	r3, [r3, #0]
 80a37a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a37a4:	9301      	str	r3, [sp, #4]
 80a37a6:	bd08      	pop	{r3, pc}
 80a37a8:	0806019c 	.word	0x0806019c

080a37ac <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a37ac:	b508      	push	{r3, lr}
 80a37ae:	4b02      	ldr	r3, [pc, #8]	; (80a37b8 <hal_rtc_get_time+0xc>)
 80a37b0:	681b      	ldr	r3, [r3, #0]
 80a37b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a37b4:	9301      	str	r3, [sp, #4]
 80a37b6:	bd08      	pop	{r3, pc}
 80a37b8:	0806019c 	.word	0x0806019c

080a37bc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a37bc:	b508      	push	{r3, lr}
 80a37be:	4b02      	ldr	r3, [pc, #8]	; (80a37c8 <os_mutex_recursive_create+0xc>)
 80a37c0:	681b      	ldr	r3, [r3, #0]
 80a37c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a37c4:	9301      	str	r3, [sp, #4]
 80a37c6:	bd08      	pop	{r3, pc}
 80a37c8:	080601d0 	.word	0x080601d0

080a37cc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a37cc:	b508      	push	{r3, lr}
 80a37ce:	4b02      	ldr	r3, [pc, #8]	; (80a37d8 <os_mutex_recursive_destroy+0xc>)
 80a37d0:	681b      	ldr	r3, [r3, #0]
 80a37d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a37d4:	9301      	str	r3, [sp, #4]
 80a37d6:	bd08      	pop	{r3, pc}
 80a37d8:	080601d0 	.word	0x080601d0

080a37dc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a37dc:	b508      	push	{r3, lr}
 80a37de:	4b02      	ldr	r3, [pc, #8]	; (80a37e8 <hal_usart_init+0xc>)
 80a37e0:	681b      	ldr	r3, [r3, #0]
 80a37e2:	699b      	ldr	r3, [r3, #24]
 80a37e4:	9301      	str	r3, [sp, #4]
 80a37e6:	bd08      	pop	{r3, pc}
 80a37e8:	080601c4 	.word	0x080601c4

080a37ec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a37ec:	b508      	push	{r3, lr}
 80a37ee:	4b02      	ldr	r3, [pc, #8]	; (80a37f8 <hal_usart_write+0xc>)
 80a37f0:	681b      	ldr	r3, [r3, #0]
 80a37f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a37f4:	9301      	str	r3, [sp, #4]
 80a37f6:	bd08      	pop	{r3, pc}
 80a37f8:	080601c4 	.word	0x080601c4

080a37fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a37fc:	b508      	push	{r3, lr}
 80a37fe:	4b02      	ldr	r3, [pc, #8]	; (80a3808 <hal_usart_available+0xc>)
 80a3800:	681b      	ldr	r3, [r3, #0]
 80a3802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3804:	9301      	str	r3, [sp, #4]
 80a3806:	bd08      	pop	{r3, pc}
 80a3808:	080601c4 	.word	0x080601c4

080a380c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a380c:	b508      	push	{r3, lr}
 80a380e:	4b02      	ldr	r3, [pc, #8]	; (80a3818 <hal_usart_read+0xc>)
 80a3810:	681b      	ldr	r3, [r3, #0]
 80a3812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3814:	9301      	str	r3, [sp, #4]
 80a3816:	bd08      	pop	{r3, pc}
 80a3818:	080601c4 	.word	0x080601c4

080a381c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a381c:	b508      	push	{r3, lr}
 80a381e:	4b02      	ldr	r3, [pc, #8]	; (80a3828 <hal_usart_peek+0xc>)
 80a3820:	681b      	ldr	r3, [r3, #0]
 80a3822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3824:	9301      	str	r3, [sp, #4]
 80a3826:	bd08      	pop	{r3, pc}
 80a3828:	080601c4 	.word	0x080601c4

080a382c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a382c:	b508      	push	{r3, lr}
 80a382e:	4b02      	ldr	r3, [pc, #8]	; (80a3838 <hal_usart_flush+0xc>)
 80a3830:	681b      	ldr	r3, [r3, #0]
 80a3832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3834:	9301      	str	r3, [sp, #4]
 80a3836:	bd08      	pop	{r3, pc}
 80a3838:	080601c4 	.word	0x080601c4

080a383c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a383c:	b508      	push	{r3, lr}
 80a383e:	4b02      	ldr	r3, [pc, #8]	; (80a3848 <hal_usart_is_enabled+0xc>)
 80a3840:	681b      	ldr	r3, [r3, #0]
 80a3842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3844:	9301      	str	r3, [sp, #4]
 80a3846:	bd08      	pop	{r3, pc}
 80a3848:	080601c4 	.word	0x080601c4

080a384c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a384c:	b508      	push	{r3, lr}
 80a384e:	4b02      	ldr	r3, [pc, #8]	; (80a3858 <hal_usart_available_data_for_write+0xc>)
 80a3850:	681b      	ldr	r3, [r3, #0]
 80a3852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3854:	9301      	str	r3, [sp, #4]
 80a3856:	bd08      	pop	{r3, pc}
 80a3858:	080601c4 	.word	0x080601c4

080a385c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a385c:	b508      	push	{r3, lr}
 80a385e:	4b02      	ldr	r3, [pc, #8]	; (80a3868 <hal_i2c_write+0xc>)
 80a3860:	681b      	ldr	r3, [r3, #0]
 80a3862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3864:	9301      	str	r3, [sp, #4]
 80a3866:	bd08      	pop	{r3, pc}
 80a3868:	080601ac 	.word	0x080601ac

080a386c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a386c:	b508      	push	{r3, lr}
 80a386e:	4b02      	ldr	r3, [pc, #8]	; (80a3878 <hal_i2c_available+0xc>)
 80a3870:	681b      	ldr	r3, [r3, #0]
 80a3872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3874:	9301      	str	r3, [sp, #4]
 80a3876:	bd08      	pop	{r3, pc}
 80a3878:	080601ac 	.word	0x080601ac

080a387c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a387c:	b508      	push	{r3, lr}
 80a387e:	4b02      	ldr	r3, [pc, #8]	; (80a3888 <hal_i2c_read+0xc>)
 80a3880:	681b      	ldr	r3, [r3, #0]
 80a3882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3884:	9301      	str	r3, [sp, #4]
 80a3886:	bd08      	pop	{r3, pc}
 80a3888:	080601ac 	.word	0x080601ac

080a388c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a388c:	b508      	push	{r3, lr}
 80a388e:	4b02      	ldr	r3, [pc, #8]	; (80a3898 <hal_i2c_peek+0xc>)
 80a3890:	681b      	ldr	r3, [r3, #0]
 80a3892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3894:	9301      	str	r3, [sp, #4]
 80a3896:	bd08      	pop	{r3, pc}
 80a3898:	080601ac 	.word	0x080601ac

080a389c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a389c:	b508      	push	{r3, lr}
 80a389e:	4b02      	ldr	r3, [pc, #8]	; (80a38a8 <hal_i2c_flush+0xc>)
 80a38a0:	681b      	ldr	r3, [r3, #0]
 80a38a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a38a4:	9301      	str	r3, [sp, #4]
 80a38a6:	bd08      	pop	{r3, pc}
 80a38a8:	080601ac 	.word	0x080601ac

080a38ac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a38ac:	b508      	push	{r3, lr}
 80a38ae:	4b02      	ldr	r3, [pc, #8]	; (80a38b8 <hal_i2c_is_enabled+0xc>)
 80a38b0:	681b      	ldr	r3, [r3, #0]
 80a38b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a38b4:	9301      	str	r3, [sp, #4]
 80a38b6:	bd08      	pop	{r3, pc}
 80a38b8:	080601ac 	.word	0x080601ac

080a38bc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a38bc:	b508      	push	{r3, lr}
 80a38be:	4b03      	ldr	r3, [pc, #12]	; (80a38cc <hal_i2c_init+0x10>)
 80a38c0:	681b      	ldr	r3, [r3, #0]
 80a38c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a38c6:	9301      	str	r3, [sp, #4]
 80a38c8:	bd08      	pop	{r3, pc}
 80a38ca:	0000      	.short	0x0000
 80a38cc:	080601ac 	.word	0x080601ac

080a38d0 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a38d0:	b508      	push	{r3, lr}
 80a38d2:	4b02      	ldr	r3, [pc, #8]	; (80a38dc <socket_active_status+0xc>)
 80a38d4:	681b      	ldr	r3, [r3, #0]
 80a38d6:	681b      	ldr	r3, [r3, #0]
 80a38d8:	9301      	str	r3, [sp, #4]
 80a38da:	bd08      	pop	{r3, pc}
 80a38dc:	080601bc 	.word	0x080601bc

080a38e0 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a38e0:	b508      	push	{r3, lr}
 80a38e2:	4b02      	ldr	r3, [pc, #8]	; (80a38ec <socket_handle_valid+0xc>)
 80a38e4:	681b      	ldr	r3, [r3, #0]
 80a38e6:	685b      	ldr	r3, [r3, #4]
 80a38e8:	9301      	str	r3, [sp, #4]
 80a38ea:	bd08      	pop	{r3, pc}
 80a38ec:	080601bc 	.word	0x080601bc

080a38f0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a38f0:	b508      	push	{r3, lr}
 80a38f2:	4b02      	ldr	r3, [pc, #8]	; (80a38fc <socket_create+0xc>)
 80a38f4:	681b      	ldr	r3, [r3, #0]
 80a38f6:	689b      	ldr	r3, [r3, #8]
 80a38f8:	9301      	str	r3, [sp, #4]
 80a38fa:	bd08      	pop	{r3, pc}
 80a38fc:	080601bc 	.word	0x080601bc

080a3900 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a3900:	b508      	push	{r3, lr}
 80a3902:	4b02      	ldr	r3, [pc, #8]	; (80a390c <socket_connect+0xc>)
 80a3904:	681b      	ldr	r3, [r3, #0]
 80a3906:	68db      	ldr	r3, [r3, #12]
 80a3908:	9301      	str	r3, [sp, #4]
 80a390a:	bd08      	pop	{r3, pc}
 80a390c:	080601bc 	.word	0x080601bc

080a3910 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a3910:	b508      	push	{r3, lr}
 80a3912:	4b02      	ldr	r3, [pc, #8]	; (80a391c <socket_receive+0xc>)
 80a3914:	681b      	ldr	r3, [r3, #0]
 80a3916:	691b      	ldr	r3, [r3, #16]
 80a3918:	9301      	str	r3, [sp, #4]
 80a391a:	bd08      	pop	{r3, pc}
 80a391c:	080601bc 	.word	0x080601bc

080a3920 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a3920:	b508      	push	{r3, lr}
 80a3922:	4b02      	ldr	r3, [pc, #8]	; (80a392c <socket_close+0xc>)
 80a3924:	681b      	ldr	r3, [r3, #0]
 80a3926:	6a1b      	ldr	r3, [r3, #32]
 80a3928:	9301      	str	r3, [sp, #4]
 80a392a:	bd08      	pop	{r3, pc}
 80a392c:	080601bc 	.word	0x080601bc

080a3930 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a3930:	b508      	push	{r3, lr}
 80a3932:	4b02      	ldr	r3, [pc, #8]	; (80a393c <socket_handle_invalid+0xc>)
 80a3934:	681b      	ldr	r3, [r3, #0]
 80a3936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3938:	9301      	str	r3, [sp, #4]
 80a393a:	bd08      	pop	{r3, pc}
 80a393c:	080601bc 	.word	0x080601bc

080a3940 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a3940:	b508      	push	{r3, lr}
 80a3942:	4b02      	ldr	r3, [pc, #8]	; (80a394c <socket_send_ex+0xc>)
 80a3944:	681b      	ldr	r3, [r3, #0]
 80a3946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3948:	9301      	str	r3, [sp, #4]
 80a394a:	bd08      	pop	{r3, pc}
 80a394c:	080601bc 	.word	0x080601bc

080a3950 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a3950:	b508      	push	{r3, lr}
 80a3952:	4b02      	ldr	r3, [pc, #8]	; (80a395c <hal_spi_init+0xc>)
 80a3954:	681b      	ldr	r3, [r3, #0]
 80a3956:	69db      	ldr	r3, [r3, #28]
 80a3958:	9301      	str	r3, [sp, #4]
 80a395a:	bd08      	pop	{r3, pc}
 80a395c:	080601b4 	.word	0x080601b4

080a3960 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a3960:	b508      	push	{r3, lr}
 80a3962:	4b02      	ldr	r3, [pc, #8]	; (80a396c <hal_spi_is_enabled+0xc>)
 80a3964:	681b      	ldr	r3, [r3, #0]
 80a3966:	6a1b      	ldr	r3, [r3, #32]
 80a3968:	9301      	str	r3, [sp, #4]
 80a396a:	bd08      	pop	{r3, pc}
 80a396c:	080601b4 	.word	0x080601b4

080a3970 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3970:	b508      	push	{r3, lr}
 80a3972:	4b02      	ldr	r3, [pc, #8]	; (80a397c <HAL_USB_USART_Init+0xc>)
 80a3974:	681b      	ldr	r3, [r3, #0]
 80a3976:	681b      	ldr	r3, [r3, #0]
 80a3978:	9301      	str	r3, [sp, #4]
 80a397a:	bd08      	pop	{r3, pc}
 80a397c:	080601d8 	.word	0x080601d8

080a3980 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3980:	b508      	push	{r3, lr}
 80a3982:	4b02      	ldr	r3, [pc, #8]	; (80a398c <HAL_USB_USART_Begin+0xc>)
 80a3984:	681b      	ldr	r3, [r3, #0]
 80a3986:	685b      	ldr	r3, [r3, #4]
 80a3988:	9301      	str	r3, [sp, #4]
 80a398a:	bd08      	pop	{r3, pc}
 80a398c:	080601d8 	.word	0x080601d8

080a3990 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3990:	b508      	push	{r3, lr}
 80a3992:	4b02      	ldr	r3, [pc, #8]	; (80a399c <HAL_USB_USART_Available_Data+0xc>)
 80a3994:	681b      	ldr	r3, [r3, #0]
 80a3996:	691b      	ldr	r3, [r3, #16]
 80a3998:	9301      	str	r3, [sp, #4]
 80a399a:	bd08      	pop	{r3, pc}
 80a399c:	080601d8 	.word	0x080601d8

080a39a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a39a0:	b508      	push	{r3, lr}
 80a39a2:	4b02      	ldr	r3, [pc, #8]	; (80a39ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a39a4:	681b      	ldr	r3, [r3, #0]
 80a39a6:	695b      	ldr	r3, [r3, #20]
 80a39a8:	9301      	str	r3, [sp, #4]
 80a39aa:	bd08      	pop	{r3, pc}
 80a39ac:	080601d8 	.word	0x080601d8

080a39b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a39b0:	b508      	push	{r3, lr}
 80a39b2:	4b02      	ldr	r3, [pc, #8]	; (80a39bc <HAL_USB_USART_Receive_Data+0xc>)
 80a39b4:	681b      	ldr	r3, [r3, #0]
 80a39b6:	699b      	ldr	r3, [r3, #24]
 80a39b8:	9301      	str	r3, [sp, #4]
 80a39ba:	bd08      	pop	{r3, pc}
 80a39bc:	080601d8 	.word	0x080601d8

080a39c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a39c0:	b508      	push	{r3, lr}
 80a39c2:	4b02      	ldr	r3, [pc, #8]	; (80a39cc <HAL_USB_USART_Send_Data+0xc>)
 80a39c4:	681b      	ldr	r3, [r3, #0]
 80a39c6:	69db      	ldr	r3, [r3, #28]
 80a39c8:	9301      	str	r3, [sp, #4]
 80a39ca:	bd08      	pop	{r3, pc}
 80a39cc:	080601d8 	.word	0x080601d8

080a39d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a39d0:	b508      	push	{r3, lr}
 80a39d2:	4b02      	ldr	r3, [pc, #8]	; (80a39dc <HAL_USB_USART_Flush_Data+0xc>)
 80a39d4:	681b      	ldr	r3, [r3, #0]
 80a39d6:	6a1b      	ldr	r3, [r3, #32]
 80a39d8:	9301      	str	r3, [sp, #4]
 80a39da:	bd08      	pop	{r3, pc}
 80a39dc:	080601d8 	.word	0x080601d8

080a39e0 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a39e0:	b508      	push	{r3, lr}
 80a39e2:	4b02      	ldr	r3, [pc, #8]	; (80a39ec <HAL_NET_SetNetWatchDog+0xc>)
 80a39e4:	681b      	ldr	r3, [r3, #0]
 80a39e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a39e8:	9301      	str	r3, [sp, #4]
 80a39ea:	bd08      	pop	{r3, pc}
 80a39ec:	080601c0 	.word	0x080601c0

080a39f0 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a39f0:	b508      	push	{r3, lr}
 80a39f2:	4b02      	ldr	r3, [pc, #8]	; (80a39fc <inet_gethostbyname+0xc>)
 80a39f4:	681b      	ldr	r3, [r3, #0]
 80a39f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a39f8:	9301      	str	r3, [sp, #4]
 80a39fa:	bd08      	pop	{r3, pc}
 80a39fc:	080601c0 	.word	0x080601c0

080a3a00 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a3a00:	b508      	push	{r3, lr}
 80a3a02:	4b02      	ldr	r3, [pc, #8]	; (80a3a0c <log_message+0xc>)
 80a3a04:	681b      	ldr	r3, [r3, #0]
 80a3a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3a08:	9301      	str	r3, [sp, #4]
 80a3a0a:	bd08      	pop	{r3, pc}
 80a3a0c:	080201a8 	.word	0x080201a8

080a3a10 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a3a10:	b508      	push	{r3, lr}
 80a3a12:	4b02      	ldr	r3, [pc, #8]	; (80a3a1c <system_mode+0xc>)
 80a3a14:	681b      	ldr	r3, [r3, #0]
 80a3a16:	681b      	ldr	r3, [r3, #0]
 80a3a18:	9301      	str	r3, [sp, #4]
 80a3a1a:	bd08      	pop	{r3, pc}
 80a3a1c:	080601a4 	.word	0x080601a4

080a3a20 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3a20:	b508      	push	{r3, lr}
 80a3a22:	4b02      	ldr	r3, [pc, #8]	; (80a3a2c <set_system_mode+0xc>)
 80a3a24:	681b      	ldr	r3, [r3, #0]
 80a3a26:	685b      	ldr	r3, [r3, #4]
 80a3a28:	9301      	str	r3, [sp, #4]
 80a3a2a:	bd08      	pop	{r3, pc}
 80a3a2c:	080601a4 	.word	0x080601a4

080a3a30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3a30:	b508      	push	{r3, lr}
 80a3a32:	4b02      	ldr	r3, [pc, #8]	; (80a3a3c <system_delay_ms+0xc>)
 80a3a34:	681b      	ldr	r3, [r3, #0]
 80a3a36:	695b      	ldr	r3, [r3, #20]
 80a3a38:	9301      	str	r3, [sp, #4]
 80a3a3a:	bd08      	pop	{r3, pc}
 80a3a3c:	080601a4 	.word	0x080601a4

080a3a40 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a3a40:	b508      	push	{r3, lr}
 80a3a42:	4b02      	ldr	r3, [pc, #8]	; (80a3a4c <system_thread_set_state+0xc>)
 80a3a44:	681b      	ldr	r3, [r3, #0]
 80a3a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3a48:	9301      	str	r3, [sp, #4]
 80a3a4a:	bd08      	pop	{r3, pc}
 80a3a4c:	080601a4 	.word	0x080601a4

080a3a50 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a3a50:	b508      	push	{r3, lr}
 80a3a52:	4b02      	ldr	r3, [pc, #8]	; (80a3a5c <application_thread_current+0xc>)
 80a3a54:	681b      	ldr	r3, [r3, #0]
 80a3a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3a58:	9301      	str	r3, [sp, #4]
 80a3a5a:	bd08      	pop	{r3, pc}
 80a3a5c:	080601a4 	.word	0x080601a4

080a3a60 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a3a60:	b508      	push	{r3, lr}
 80a3a62:	4b02      	ldr	r3, [pc, #8]	; (80a3a6c <application_thread_invoke+0xc>)
 80a3a64:	681b      	ldr	r3, [r3, #0]
 80a3a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3a68:	9301      	str	r3, [sp, #4]
 80a3a6a:	bd08      	pop	{r3, pc}
 80a3a6c:	080601a4 	.word	0x080601a4

080a3a70 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a3a70:	b508      	push	{r3, lr}
 80a3a72:	4b02      	ldr	r3, [pc, #8]	; (80a3a7c <system_thread_get_state+0xc>)
 80a3a74:	681b      	ldr	r3, [r3, #0]
 80a3a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3a78:	9301      	str	r3, [sp, #4]
 80a3a7a:	bd08      	pop	{r3, pc}
 80a3a7c:	080601a4 	.word	0x080601a4

080a3a80 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3a80:	b508      	push	{r3, lr}
 80a3a82:	4b03      	ldr	r3, [pc, #12]	; (80a3a90 <system_ctrl_set_app_request_handler+0x10>)
 80a3a84:	681b      	ldr	r3, [r3, #0]
 80a3a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a3a8a:	9301      	str	r3, [sp, #4]
 80a3a8c:	bd08      	pop	{r3, pc}
 80a3a8e:	0000      	.short	0x0000
 80a3a90:	080601a4 	.word	0x080601a4

080a3a94 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a3a94:	b508      	push	{r3, lr}
 80a3a96:	4b03      	ldr	r3, [pc, #12]	; (80a3aa4 <system_ctrl_set_result+0x10>)
 80a3a98:	681b      	ldr	r3, [r3, #0]
 80a3a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3a9e:	9301      	str	r3, [sp, #4]
 80a3aa0:	bd08      	pop	{r3, pc}
 80a3aa2:	0000      	.short	0x0000
 80a3aa4:	080601a4 	.word	0x080601a4

080a3aa8 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80a3aa8:	b508      	push	{r3, lr}
 80a3aaa:	4b03      	ldr	r3, [pc, #12]	; (80a3ab8 <system_sleep_pins+0x10>)
 80a3aac:	681b      	ldr	r3, [r3, #0]
 80a3aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80a3ab2:	9301      	str	r3, [sp, #4]
 80a3ab4:	bd08      	pop	{r3, pc}
 80a3ab6:	0000      	.short	0x0000
 80a3ab8:	080601a4 	.word	0x080601a4

080a3abc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3abc:	b508      	push	{r3, lr}
 80a3abe:	4b02      	ldr	r3, [pc, #8]	; (80a3ac8 <network_connect+0xc>)
 80a3ac0:	681b      	ldr	r3, [r3, #0]
 80a3ac2:	685b      	ldr	r3, [r3, #4]
 80a3ac4:	9301      	str	r3, [sp, #4]
 80a3ac6:	bd08      	pop	{r3, pc}
 80a3ac8:	080601c8 	.word	0x080601c8

080a3acc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3acc:	b508      	push	{r3, lr}
 80a3ace:	4b02      	ldr	r3, [pc, #8]	; (80a3ad8 <network_connecting+0xc>)
 80a3ad0:	681b      	ldr	r3, [r3, #0]
 80a3ad2:	689b      	ldr	r3, [r3, #8]
 80a3ad4:	9301      	str	r3, [sp, #4]
 80a3ad6:	bd08      	pop	{r3, pc}
 80a3ad8:	080601c8 	.word	0x080601c8

080a3adc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3adc:	b508      	push	{r3, lr}
 80a3ade:	4b02      	ldr	r3, [pc, #8]	; (80a3ae8 <network_disconnect+0xc>)
 80a3ae0:	681b      	ldr	r3, [r3, #0]
 80a3ae2:	68db      	ldr	r3, [r3, #12]
 80a3ae4:	9301      	str	r3, [sp, #4]
 80a3ae6:	bd08      	pop	{r3, pc}
 80a3ae8:	080601c8 	.word	0x080601c8

080a3aec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3aec:	b508      	push	{r3, lr}
 80a3aee:	4b02      	ldr	r3, [pc, #8]	; (80a3af8 <network_ready+0xc>)
 80a3af0:	681b      	ldr	r3, [r3, #0]
 80a3af2:	691b      	ldr	r3, [r3, #16]
 80a3af4:	9301      	str	r3, [sp, #4]
 80a3af6:	bd08      	pop	{r3, pc}
 80a3af8:	080601c8 	.word	0x080601c8

080a3afc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3afc:	b508      	push	{r3, lr}
 80a3afe:	4b02      	ldr	r3, [pc, #8]	; (80a3b08 <network_on+0xc>)
 80a3b00:	681b      	ldr	r3, [r3, #0]
 80a3b02:	695b      	ldr	r3, [r3, #20]
 80a3b04:	9301      	str	r3, [sp, #4]
 80a3b06:	bd08      	pop	{r3, pc}
 80a3b08:	080601c8 	.word	0x080601c8

080a3b0c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3b0c:	b508      	push	{r3, lr}
 80a3b0e:	4b02      	ldr	r3, [pc, #8]	; (80a3b18 <network_off+0xc>)
 80a3b10:	681b      	ldr	r3, [r3, #0]
 80a3b12:	699b      	ldr	r3, [r3, #24]
 80a3b14:	9301      	str	r3, [sp, #4]
 80a3b16:	bd08      	pop	{r3, pc}
 80a3b18:	080601c8 	.word	0x080601c8

080a3b1c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3b1c:	b508      	push	{r3, lr}
 80a3b1e:	4b02      	ldr	r3, [pc, #8]	; (80a3b28 <network_listen+0xc>)
 80a3b20:	681b      	ldr	r3, [r3, #0]
 80a3b22:	69db      	ldr	r3, [r3, #28]
 80a3b24:	9301      	str	r3, [sp, #4]
 80a3b26:	bd08      	pop	{r3, pc}
 80a3b28:	080601c8 	.word	0x080601c8

080a3b2c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3b2c:	b508      	push	{r3, lr}
 80a3b2e:	4b02      	ldr	r3, [pc, #8]	; (80a3b38 <network_listening+0xc>)
 80a3b30:	681b      	ldr	r3, [r3, #0]
 80a3b32:	6a1b      	ldr	r3, [r3, #32]
 80a3b34:	9301      	str	r3, [sp, #4]
 80a3b36:	bd08      	pop	{r3, pc}
 80a3b38:	080601c8 	.word	0x080601c8

080a3b3c <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
 80a3b3c:	b508      	push	{r3, lr}
 80a3b3e:	4b02      	ldr	r3, [pc, #8]	; (80a3b48 <network_has_credentials+0xc>)
 80a3b40:	681b      	ldr	r3, [r3, #0]
 80a3b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3b44:	9301      	str	r3, [sp, #4]
 80a3b46:	bd08      	pop	{r3, pc}
 80a3b48:	080601c8 	.word	0x080601c8

080a3b4c <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 80a3b4c:	b508      	push	{r3, lr}
 80a3b4e:	4b02      	ldr	r3, [pc, #8]	; (80a3b58 <network_set_credentials+0xc>)
 80a3b50:	681b      	ldr	r3, [r3, #0]
 80a3b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3b54:	9301      	str	r3, [sp, #4]
 80a3b56:	bd08      	pop	{r3, pc}
 80a3b58:	080601c8 	.word	0x080601c8

080a3b5c <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
 80a3b5c:	b508      	push	{r3, lr}
 80a3b5e:	4b02      	ldr	r3, [pc, #8]	; (80a3b68 <network_clear_credentials+0xc>)
 80a3b60:	681b      	ldr	r3, [r3, #0]
 80a3b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3b64:	9301      	str	r3, [sp, #4]
 80a3b66:	bd08      	pop	{r3, pc}
 80a3b68:	080601c8 	.word	0x080601c8

080a3b6c <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3b6c:	b508      	push	{r3, lr}
 80a3b6e:	4b02      	ldr	r3, [pc, #8]	; (80a3b78 <network_set_listen_timeout+0xc>)
 80a3b70:	681b      	ldr	r3, [r3, #0]
 80a3b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3b74:	9301      	str	r3, [sp, #4]
 80a3b76:	bd08      	pop	{r3, pc}
 80a3b78:	080601c8 	.word	0x080601c8

080a3b7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a3b7c:	b508      	push	{r3, lr}
 80a3b7e:	4b02      	ldr	r3, [pc, #8]	; (80a3b88 <network_get_listen_timeout+0xc>)
 80a3b80:	681b      	ldr	r3, [r3, #0]
 80a3b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3b84:	9301      	str	r3, [sp, #4]
 80a3b86:	bd08      	pop	{r3, pc}
 80a3b88:	080601c8 	.word	0x080601c8

080a3b8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a3b8c:	b508      	push	{r3, lr}
 80a3b8e:	4b02      	ldr	r3, [pc, #8]	; (80a3b98 <network_is_on+0xc>)
 80a3b90:	681b      	ldr	r3, [r3, #0]
 80a3b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3b94:	9301      	str	r3, [sp, #4]
 80a3b96:	bd08      	pop	{r3, pc}
 80a3b98:	080601c8 	.word	0x080601c8

080a3b9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a3b9c:	b508      	push	{r3, lr}
 80a3b9e:	4b02      	ldr	r3, [pc, #8]	; (80a3ba8 <network_is_off+0xc>)
 80a3ba0:	681b      	ldr	r3, [r3, #0]
 80a3ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3ba4:	9301      	str	r3, [sp, #4]
 80a3ba6:	bd08      	pop	{r3, pc}
 80a3ba8:	080601c8 	.word	0x080601c8

080a3bac <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3bac:	b508      	push	{r3, lr}
 80a3bae:	4b02      	ldr	r3, [pc, #8]	; (80a3bb8 <spark_process+0xc>)
 80a3bb0:	681b      	ldr	r3, [r3, #0]
 80a3bb2:	689b      	ldr	r3, [r3, #8]
 80a3bb4:	9301      	str	r3, [sp, #4]
 80a3bb6:	bd08      	pop	{r3, pc}
 80a3bb8:	080601cc 	.word	0x080601cc

080a3bbc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a3bbc:	b508      	push	{r3, lr}
 80a3bbe:	4b02      	ldr	r3, [pc, #8]	; (80a3bc8 <spark_cloud_flag_connect+0xc>)
 80a3bc0:	681b      	ldr	r3, [r3, #0]
 80a3bc2:	68db      	ldr	r3, [r3, #12]
 80a3bc4:	9301      	str	r3, [sp, #4]
 80a3bc6:	bd08      	pop	{r3, pc}
 80a3bc8:	080601cc 	.word	0x080601cc

080a3bcc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a3bcc:	b508      	push	{r3, lr}
 80a3bce:	4b02      	ldr	r3, [pc, #8]	; (80a3bd8 <spark_cloud_flag_connected+0xc>)
 80a3bd0:	681b      	ldr	r3, [r3, #0]
 80a3bd2:	695b      	ldr	r3, [r3, #20]
 80a3bd4:	9301      	str	r3, [sp, #4]
 80a3bd6:	bd08      	pop	{r3, pc}
 80a3bd8:	080601cc 	.word	0x080601cc

080a3bdc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a3bdc:	b508      	push	{r3, lr}
 80a3bde:	4b02      	ldr	r3, [pc, #8]	; (80a3be8 <spark_deviceID+0xc>)
 80a3be0:	681b      	ldr	r3, [r3, #0]
 80a3be2:	69db      	ldr	r3, [r3, #28]
 80a3be4:	9301      	str	r3, [sp, #4]
 80a3be6:	bd08      	pop	{r3, pc}
 80a3be8:	080601cc 	.word	0x080601cc

080a3bec <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a3bec:	b508      	push	{r3, lr}
 80a3bee:	4b02      	ldr	r3, [pc, #8]	; (80a3bf8 <spark_send_event+0xc>)
 80a3bf0:	681b      	ldr	r3, [r3, #0]
 80a3bf2:	6a1b      	ldr	r3, [r3, #32]
 80a3bf4:	9301      	str	r3, [sp, #4]
 80a3bf6:	bd08      	pop	{r3, pc}
 80a3bf8:	080601cc 	.word	0x080601cc

080a3bfc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a3bfc:	b508      	push	{r3, lr}
 80a3bfe:	4b02      	ldr	r3, [pc, #8]	; (80a3c08 <spark_subscribe+0xc>)
 80a3c00:	681b      	ldr	r3, [r3, #0]
 80a3c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3c04:	9301      	str	r3, [sp, #4]
 80a3c06:	bd08      	pop	{r3, pc}
 80a3c08:	080601cc 	.word	0x080601cc

080a3c0c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a3c0c:	b508      	push	{r3, lr}
 80a3c0e:	4b02      	ldr	r3, [pc, #8]	; (80a3c18 <spark_sync_time_pending+0xc>)
 80a3c10:	681b      	ldr	r3, [r3, #0]
 80a3c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3c14:	9301      	str	r3, [sp, #4]
 80a3c16:	bd08      	pop	{r3, pc}
 80a3c18:	080601cc 	.word	0x080601cc

080a3c1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3c1c:	b508      	push	{r3, lr}
 80a3c1e:	4b02      	ldr	r3, [pc, #8]	; (80a3c28 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3c20:	681b      	ldr	r3, [r3, #0]
 80a3c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3c24:	9301      	str	r3, [sp, #4]
 80a3c26:	bd08      	pop	{r3, pc}
 80a3c28:	080601cc 	.word	0x080601cc

080a3c2c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3c2c:	b508      	push	{r3, lr}
 80a3c2e:	4b02      	ldr	r3, [pc, #8]	; (80a3c38 <malloc+0xc>)
 80a3c30:	681b      	ldr	r3, [r3, #0]
 80a3c32:	681b      	ldr	r3, [r3, #0]
 80a3c34:	9301      	str	r3, [sp, #4]
 80a3c36:	bd08      	pop	{r3, pc}
 80a3c38:	080601a0 	.word	0x080601a0

080a3c3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3c3c:	b508      	push	{r3, lr}
 80a3c3e:	4b02      	ldr	r3, [pc, #8]	; (80a3c48 <free+0xc>)
 80a3c40:	681b      	ldr	r3, [r3, #0]
 80a3c42:	685b      	ldr	r3, [r3, #4]
 80a3c44:	9301      	str	r3, [sp, #4]
 80a3c46:	bd08      	pop	{r3, pc}
 80a3c48:	080601a0 	.word	0x080601a0

080a3c4c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3c4c:	b508      	push	{r3, lr}
 80a3c4e:	4b02      	ldr	r3, [pc, #8]	; (80a3c58 <realloc+0xc>)
 80a3c50:	681b      	ldr	r3, [r3, #0]
 80a3c52:	689b      	ldr	r3, [r3, #8]
 80a3c54:	9301      	str	r3, [sp, #4]
 80a3c56:	bd08      	pop	{r3, pc}
 80a3c58:	080601a0 	.word	0x080601a0

080a3c5c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a3c5c:	b508      	push	{r3, lr}
 80a3c5e:	4b02      	ldr	r3, [pc, #8]	; (80a3c68 <sprintf+0xc>)
 80a3c60:	681b      	ldr	r3, [r3, #0]
 80a3c62:	68db      	ldr	r3, [r3, #12]
 80a3c64:	9301      	str	r3, [sp, #4]
 80a3c66:	bd08      	pop	{r3, pc}
 80a3c68:	080601a0 	.word	0x080601a0

080a3c6c <siscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a3c6c:	b508      	push	{r3, lr}
 80a3c6e:	4b02      	ldr	r3, [pc, #8]	; (80a3c78 <siscanf+0xc>)
 80a3c70:	681b      	ldr	r3, [r3, #0]
 80a3c72:	699b      	ldr	r3, [r3, #24]
 80a3c74:	9301      	str	r3, [sp, #4]
 80a3c76:	bd08      	pop	{r3, pc}
 80a3c78:	080601a0 	.word	0x080601a0

080a3c7c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a3c7c:	b508      	push	{r3, lr}
 80a3c7e:	4b02      	ldr	r3, [pc, #8]	; (80a3c88 <snprintf+0xc>)
 80a3c80:	681b      	ldr	r3, [r3, #0]
 80a3c82:	69db      	ldr	r3, [r3, #28]
 80a3c84:	9301      	str	r3, [sp, #4]
 80a3c86:	bd08      	pop	{r3, pc}
 80a3c88:	080601a0 	.word	0x080601a0

080a3c8c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a3c8c:	b508      	push	{r3, lr}
 80a3c8e:	4b02      	ldr	r3, [pc, #8]	; (80a3c98 <vsnprintf+0xc>)
 80a3c90:	681b      	ldr	r3, [r3, #0]
 80a3c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3c94:	9301      	str	r3, [sp, #4]
 80a3c96:	bd08      	pop	{r3, pc}
 80a3c98:	080601a0 	.word	0x080601a0

080a3c9c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a3c9c:	b508      	push	{r3, lr}
 80a3c9e:	4b02      	ldr	r3, [pc, #8]	; (80a3ca8 <abort+0xc>)
 80a3ca0:	681b      	ldr	r3, [r3, #0]
 80a3ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3ca4:	9301      	str	r3, [sp, #4]
 80a3ca6:	bd08      	pop	{r3, pc}
 80a3ca8:	080601a0 	.word	0x080601a0

080a3cac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a3cac:	b508      	push	{r3, lr}
 80a3cae:	4b02      	ldr	r3, [pc, #8]	; (80a3cb8 <_malloc_r+0xc>)
 80a3cb0:	681b      	ldr	r3, [r3, #0]
 80a3cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3cb4:	9301      	str	r3, [sp, #4]
 80a3cb6:	bd08      	pop	{r3, pc}
 80a3cb8:	080601a0 	.word	0x080601a0

080a3cbc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a3cbc:	b508      	push	{r3, lr}
 80a3cbe:	4b02      	ldr	r3, [pc, #8]	; (80a3cc8 <__errno+0xc>)
 80a3cc0:	681b      	ldr	r3, [r3, #0]
 80a3cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3cc4:	9301      	str	r3, [sp, #4]
 80a3cc6:	bd08      	pop	{r3, pc}
 80a3cc8:	080601a0 	.word	0x080601a0

080a3ccc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a3ccc:	b508      	push	{r3, lr}
 80a3cce:	4b02      	ldr	r3, [pc, #8]	; (80a3cd8 <__assert_func+0xc>)
 80a3cd0:	681b      	ldr	r3, [r3, #0]
 80a3cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3cd4:	9301      	str	r3, [sp, #4]
 80a3cd6:	bd08      	pop	{r3, pc}
 80a3cd8:	080601a0 	.word	0x080601a0

080a3cdc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a3cdc:	b508      	push	{r3, lr}
 80a3cde:	4b02      	ldr	r3, [pc, #8]	; (80a3ce8 <newlib_impure_ptr_callback+0xc>)
 80a3ce0:	681b      	ldr	r3, [r3, #0]
 80a3ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3ce4:	9301      	str	r3, [sp, #4]
 80a3ce6:	bd08      	pop	{r3, pc}
 80a3ce8:	080601a0 	.word	0x080601a0

080a3cec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a3cec:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a3cee:	2600      	movs	r6, #0
 80a3cf0:	4604      	mov	r4, r0
 80a3cf2:	460d      	mov	r5, r1
 80a3cf4:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a3cf8:	f7ff fd60 	bl	80a37bc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a3cfc:	4628      	mov	r0, r5
    _spi = spi;
 80a3cfe:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a3d00:	f7ff fe26 	bl	80a3950 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a3d04:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a3d06:	6066      	str	r6, [r4, #4]
}
 80a3d08:	bd70      	pop	{r4, r5, r6, pc}

080a3d0a <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 80a3d0a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80a3d0e:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 80a3d10:	680a      	ldr	r2, [r1, #0]
 80a3d12:	b933      	cbnz	r3, 80a3d22 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 80a3d14:	b932      	cbnz	r2, 80a3d24 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
                    break;
                }
            }
        }
        return compatResult_;
 80a3d16:	f8d1 3006 	ldr.w	r3, [r1, #6]
 80a3d1a:	6003      	str	r3, [r0, #0]
 80a3d1c:	894b      	ldrh	r3, [r1, #10]
 80a3d1e:	8083      	strh	r3, [r0, #4]
    }
 80a3d20:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 80a3d22:	b122      	cbz	r2, 80a3d2e <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 80a3d24:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 80a3d26:	2c01      	cmp	r4, #1
 80a3d28:	d003      	beq.n	80a3d32 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 80a3d2a:	2c04      	cmp	r4, #4
 80a3d2c:	d006      	beq.n	80a3d3c <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a3d2e:	2204      	movs	r2, #4
 80a3d30:	e005      	b.n	80a3d3e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80a3d32:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80a3d34:	718c      	strb	r4, [r1, #6]
 80a3d36:	810b      	strh	r3, [r1, #8]
 80a3d38:	814a      	strh	r2, [r1, #10]
                    break;
 80a3d3a:	e7ec      	b.n	80a3d16 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80a3d3c:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a3d3e:	810b      	strh	r3, [r1, #8]
 80a3d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3d44:	718a      	strb	r2, [r1, #6]
 80a3d46:	814b      	strh	r3, [r1, #10]
                    break;
 80a3d48:	e7e5      	b.n	80a3d16 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

080a3d4a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3d4a:	b510      	push	{r4, lr}
 80a3d4c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3d4e:	6800      	ldr	r0, [r0, #0]
 80a3d50:	b118      	cbz	r0, 80a3d5a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
 80a3d52:	f7ff ff73 	bl	80a3c3c <free>
            wakeupSource_ = nullptr;
 80a3d56:	2300      	movs	r3, #0
 80a3d58:	6023      	str	r3, [r4, #0]
        }
    }
 80a3d5a:	bd10      	pop	{r4, pc}

080a3d5c <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a3d5c:	b538      	push	{r3, r4, r5, lr}
 80a3d5e:	460c      	mov	r4, r1
        error_ = result.error_;
 80a3d60:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a3d64:	4605      	mov	r5, r0
        error_ = result.error_;
 80a3d66:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80a3d68:	f8d1 3006 	ldr.w	r3, [r1, #6]
 80a3d6c:	f8c0 3006 	str.w	r3, [r0, #6]
 80a3d70:	894b      	ldrh	r3, [r1, #10]
 80a3d72:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80a3d74:	f7ff ffe9 	bl	80a3d4a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
 80a3d78:	6823      	ldr	r3, [r4, #0]
 80a3d7a:	b113      	cbz	r3, 80a3d82 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
 80a3d7c:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
 80a3d7e:	2300      	movs	r3, #0
 80a3d80:	6023      	str	r3, [r4, #0]
    }
 80a3d82:	bd38      	pop	{r3, r4, r5, pc}

080a3d84 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a3d84:	b510      	push	{r4, lr}
 80a3d86:	2400      	movs	r4, #0
 80a3d88:	7004      	strb	r4, [r0, #0]
 80a3d8a:	8044      	strh	r4, [r0, #2]
 80a3d8c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80a3d90:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a3d92:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80a3d94:	dd08      	ble.n	80a3da8 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 80a3d96:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 80a3d98:	428b      	cmp	r3, r1
 80a3d9a:	d904      	bls.n	80a3da6 <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 80a3d9c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80a3da0:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80a3da2:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 80a3da4:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 80a3da6:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 80a3da8:	d101      	bne.n	80a3dae <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80a3daa:	2302      	movs	r3, #2
 80a3dac:	e7fa      	b.n	80a3da4 <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 80a3dae:	8041      	strh	r1, [r0, #2]
 80a3db0:	e7f9      	b.n	80a3da6 <_ZN11SleepResultC1EiPKtj+0x22>
	...

080a3db4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3db6:	460d      	mov	r5, r1
 80a3db8:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3dba:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3dbc:	b08b      	sub	sp, #44	; 0x2c
 80a3dbe:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a3dc2:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3dc4:	9301      	str	r3, [sp, #4]
 80a3dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a3dc8:	4631      	mov	r1, r6
 80a3dca:	9300      	str	r3, [sp, #0]
 80a3dcc:	4628      	mov	r0, r5
 80a3dce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a3dd0:	9702      	str	r7, [sp, #8]
 80a3dd2:	f7ff fe69 	bl	80a3aa8 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a3dd6:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a3dd8:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a3dda:	462a      	mov	r2, r5
 80a3ddc:	a805      	add	r0, sp, #20
 80a3dde:	f7ff ffd1 	bl	80a3d84 <_ZN11SleepResultC1EiPKtj>
 80a3de2:	4d0f      	ldr	r5, [pc, #60]	; (80a3e20 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 80a3de4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80a3de8:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80a3dec:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a3df0:	4628      	mov	r0, r5
              compatResult_(r) {
 80a3df2:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 80a3df6:	a907      	add	r1, sp, #28
 80a3df8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80a3dfc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80a3e00:	9707      	str	r7, [sp, #28]
 80a3e02:	f8ad 7020 	strh.w	r7, [sp, #32]
 80a3e06:	f7ff ffa9 	bl	80a3d5c <_ZN17SystemSleepResultaSEOS_.isra.0>
        freeWakeupSourceMemory();
 80a3e0a:	a807      	add	r0, sp, #28
 80a3e0c:	f7ff ff9d 	bl	80a3d4a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        return toSleepResult();
 80a3e10:	4620      	mov	r0, r4
 80a3e12:	4629      	mov	r1, r5
 80a3e14:	f7ff ff79 	bl	80a3d0a <_ZN17SystemSleepResult13toSleepResultEv>
}
 80a3e18:	4620      	mov	r0, r4
 80a3e1a:	b00b      	add	sp, #44	; 0x2c
 80a3e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3e1e:	bf00      	nop
 80a3e20:	20000414 	.word	0x20000414

080a3e24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a3e24:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a3e26:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3e28:	b510      	push	{r4, lr}
 80a3e2a:	4b08      	ldr	r3, [pc, #32]	; (80a3e4c <_GLOBAL__sub_I_System+0x28>)
 80a3e2c:	4c08      	ldr	r4, [pc, #32]	; (80a3e50 <_GLOBAL__sub_I_System+0x2c>)
 80a3e2e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a3e30:	4b08      	ldr	r3, [pc, #32]	; (80a3e54 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a3e32:	e9c4 0000 	strd	r0, r0, [r4]
    SleepResult() {}
 80a3e36:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3e38:	f7ff fdf2 	bl	80a3a20 <set_system_mode>
SystemClass System;
 80a3e3c:	4620      	mov	r0, r4
 80a3e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a3e42:	4a05      	ldr	r2, [pc, #20]	; (80a3e58 <_GLOBAL__sub_I_System+0x34>)
 80a3e44:	4905      	ldr	r1, [pc, #20]	; (80a3e5c <_GLOBAL__sub_I_System+0x38>)
 80a3e46:	f001 bcb3 	b.w	80a57b0 <__aeabi_atexit>
 80a3e4a:	bf00      	nop
 80a3e4c:	20000420 	.word	0x20000420
 80a3e50:	20000414 	.word	0x20000414
 80a3e54:	ffff0000 	.word	0xffff0000
 80a3e58:	20000150 	.word	0x20000150
 80a3e5c:	080a08bb 	.word	0x080a08bb

080a3e60 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3e60:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3e62:	6803      	ldr	r3, [r0, #0]
{
 80a3e64:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3e68:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3e6a:	2201      	movs	r2, #1
 80a3e6c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3e70:	f10d 0107 	add.w	r1, sp, #7
 80a3e74:	47a0      	blx	r4
}
 80a3e76:	b002      	add	sp, #8
 80a3e78:	bd10      	pop	{r4, pc}

080a3e7a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3e7a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3e7c:	6803      	ldr	r3, [r0, #0]
 80a3e7e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3e80:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3e84:	46a4      	mov	ip, r4
}
 80a3e86:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3e88:	4760      	bx	ip

080a3e8a <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3e8a:	b513      	push	{r0, r1, r4, lr}
 80a3e8c:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a3e8e:	6802      	ldr	r2, [r0, #0]
{
 80a3e90:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3e94:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3e96:	f10d 0107 	add.w	r1, sp, #7
 80a3e9a:	2201      	movs	r2, #1
 80a3e9c:	47a0      	blx	r4
}
 80a3e9e:	b002      	add	sp, #8
 80a3ea0:	bd10      	pop	{r4, pc}

080a3ea2 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a3ea2:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a3ea4:	6943      	ldr	r3, [r0, #20]
 80a3ea6:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3ea8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3eac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3eb0:	429a      	cmp	r2, r3
 80a3eb2:	d008      	beq.n	80a3ec6 <_ZN9TCPClient4readEv+0x24>
 80a3eb4:	6963      	ldr	r3, [r4, #20]
 80a3eb6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3eba:	1c51      	adds	r1, r2, #1
 80a3ebc:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3ec0:	4413      	add	r3, r2
 80a3ec2:	7918      	ldrb	r0, [r3, #4]
}
 80a3ec4:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3ec6:	6803      	ldr	r3, [r0, #0]
 80a3ec8:	691b      	ldr	r3, [r3, #16]
 80a3eca:	4798      	blx	r3
 80a3ecc:	2800      	cmp	r0, #0
 80a3ece:	d1f1      	bne.n	80a3eb4 <_ZN9TCPClient4readEv+0x12>
 80a3ed0:	f04f 30ff 	mov.w	r0, #4294967295
 80a3ed4:	e7f6      	b.n	80a3ec4 <_ZN9TCPClient4readEv+0x22>

080a3ed6 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a3ed6:	4770      	bx	lr

080a3ed8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3ed8:	4770      	bx	lr
	...

080a3edc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3edc:	b510      	push	{r4, lr}
 80a3ede:	4604      	mov	r4, r0
	    ||
 80a3ee0:	4b06      	ldr	r3, [pc, #24]	; (80a3efc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3ee2:	4608      	mov	r0, r1
	    ||
 80a3ee4:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a3ee6:	f104 040c 	add.w	r4, r4, #12
 80a3eea:	d004      	beq.n	80a3ef6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a3eec:	f001 fc6c 	bl	80a57c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 80a3ef0:	2800      	cmp	r0, #0
 80a3ef2:	bf08      	it	eq
 80a3ef4:	2400      	moveq	r4, #0
      }
 80a3ef6:	4620      	mov	r0, r4
 80a3ef8:	bd10      	pop	{r4, pc}
 80a3efa:	bf00      	nop
 80a3efc:	080a8f30 	.word	0x080a8f30

080a3f00 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3f00:	b510      	push	{r4, lr}
 80a3f02:	4604      	mov	r4, r0
 80a3f04:	21ac      	movs	r1, #172	; 0xac
 80a3f06:	f001 fc58 	bl	80a57ba <_ZdlPvj>
 80a3f0a:	4620      	mov	r0, r4
 80a3f0c:	bd10      	pop	{r4, pc}

080a3f0e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80a3f0e:	21ac      	movs	r1, #172	; 0xac
 80a3f10:	f001 bc53 	b.w	80a57ba <_ZdlPvj>

080a3f14 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3f14:	b538      	push	{r3, r4, r5, lr}
 80a3f16:	4b0b      	ldr	r3, [pc, #44]	; (80a3f44 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3f18:	6984      	ldr	r4, [r0, #24]
 80a3f1a:	4605      	mov	r5, r0
 80a3f1c:	6003      	str	r3, [r0, #0]
 80a3f1e:	b17c      	cbz	r4, 80a3f40 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a3f20:	6863      	ldr	r3, [r4, #4]
 80a3f22:	3b01      	subs	r3, #1
 80a3f24:	6063      	str	r3, [r4, #4]
 80a3f26:	b95b      	cbnz	r3, 80a3f40 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3f28:	6823      	ldr	r3, [r4, #0]
 80a3f2a:	4620      	mov	r0, r4
 80a3f2c:	689b      	ldr	r3, [r3, #8]
 80a3f2e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3f30:	68a3      	ldr	r3, [r4, #8]
 80a3f32:	3b01      	subs	r3, #1
 80a3f34:	60a3      	str	r3, [r4, #8]
 80a3f36:	b91b      	cbnz	r3, 80a3f40 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3f38:	6823      	ldr	r3, [r4, #0]
 80a3f3a:	4620      	mov	r0, r4
 80a3f3c:	68db      	ldr	r3, [r3, #12]
 80a3f3e:	4798      	blx	r3
 80a3f40:	4628      	mov	r0, r5
 80a3f42:	bd38      	pop	{r3, r4, r5, pc}
 80a3f44:	080a8f40 	.word	0x080a8f40

080a3f48 <_ZN9TCPClientD0Ev>:
 80a3f48:	b510      	push	{r4, lr}
 80a3f4a:	4604      	mov	r4, r0
 80a3f4c:	f7ff ffe2 	bl	80a3f14 <_ZN9TCPClientD1Ev>
 80a3f50:	4620      	mov	r0, r4
 80a3f52:	211c      	movs	r1, #28
 80a3f54:	f001 fc31 	bl	80a57ba <_ZdlPvj>
 80a3f58:	4620      	mov	r0, r4
 80a3f5a:	bd10      	pop	{r4, pc}

080a3f5c <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3f5c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3f5e:	4604      	mov	r4, r0
 80a3f60:	4606      	mov	r6, r0
      { return _M_ptr; }
 80a3f62:	694d      	ldr	r5, [r1, #20]
 80a3f64:	4b04      	ldr	r3, [pc, #16]	; (80a3f78 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3f66:	358c      	adds	r5, #140	; 0x8c
 80a3f68:	f844 3b04 	str.w	r3, [r4], #4
 80a3f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3f70:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3f72:	4630      	mov	r0, r6
 80a3f74:	7023      	strb	r3, [r4, #0]
 80a3f76:	bd70      	pop	{r4, r5, r6, pc}
 80a3f78:	080a8fc8 	.word	0x080a8fc8

080a3f7c <_ZN9TCPClient4peekEv>:
{
 80a3f7c:	b510      	push	{r4, lr}
 80a3f7e:	6943      	ldr	r3, [r0, #20]
 80a3f80:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3f82:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3f86:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3f8a:	429a      	cmp	r2, r3
 80a3f8c:	d005      	beq.n	80a3f9a <_ZN9TCPClient4peekEv+0x1e>
 80a3f8e:	6963      	ldr	r3, [r4, #20]
 80a3f90:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3f94:	4413      	add	r3, r2
 80a3f96:	7918      	ldrb	r0, [r3, #4]
}
 80a3f98:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3f9a:	6803      	ldr	r3, [r0, #0]
 80a3f9c:	691b      	ldr	r3, [r3, #16]
 80a3f9e:	4798      	blx	r3
 80a3fa0:	2800      	cmp	r0, #0
 80a3fa2:	d1f4      	bne.n	80a3f8e <_ZN9TCPClient4peekEv+0x12>
 80a3fa4:	f04f 30ff 	mov.w	r0, #4294967295
 80a3fa8:	e7f6      	b.n	80a3f98 <_ZN9TCPClient4peekEv+0x1c>

080a3faa <_ZN9TCPClient4readEPhj>:
{
 80a3faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3fac:	6943      	ldr	r3, [r0, #20]
 80a3fae:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a3fb0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3fb4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a3fb8:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a3fba:	429a      	cmp	r2, r3
{
 80a3fbc:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a3fbe:	d016      	beq.n	80a3fee <_ZN9TCPClient4readEPhj+0x44>
 80a3fc0:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3fc2:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3fc4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3fc8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a3fcc:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3fce:	42bc      	cmp	r4, r7
 80a3fd0:	bf28      	it	cs
 80a3fd2:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3fd4:	3304      	adds	r3, #4
 80a3fd6:	4622      	mov	r2, r4
 80a3fd8:	4419      	add	r1, r3
 80a3fda:	f002 fee9 	bl	80a6db0 <memcpy>
 80a3fde:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3fe0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3fe4:	4423      	add	r3, r4
 80a3fe6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a3fea:	4620      	mov	r0, r4
 80a3fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a3fee:	6803      	ldr	r3, [r0, #0]
 80a3ff0:	691b      	ldr	r3, [r3, #16]
 80a3ff2:	4798      	blx	r3
 80a3ff4:	2800      	cmp	r0, #0
 80a3ff6:	d1e3      	bne.n	80a3fc0 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a3ff8:	f04f 34ff 	mov.w	r4, #4294967295
 80a3ffc:	e7f5      	b.n	80a3fea <_ZN9TCPClient4readEPhj+0x40>

080a3ffe <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a3ffe:	2300      	movs	r3, #0
 80a4000:	6942      	ldr	r2, [r0, #20]
 80a4002:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a4006:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a4008:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a400c:	4770      	bx	lr
	...

080a4010 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a4010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4014:	461f      	mov	r7, r3
    stop();
 80a4016:	6803      	ldr	r3, [r0, #0]
{
 80a4018:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a401c:	4605      	mov	r5, r0
 80a401e:	460c      	mov	r4, r1
 80a4020:	4616      	mov	r6, r2
    stop();
 80a4022:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a4024:	4638      	mov	r0, r7
 80a4026:	f001 fa77 	bl	80a5518 <_ZN5spark12NetworkClass4fromEm>
 80a402a:	6803      	ldr	r3, [r0, #0]
 80a402c:	68db      	ldr	r3, [r3, #12]
 80a402e:	4798      	blx	r3
 80a4030:	2800      	cmp	r0, #0
 80a4032:	d054      	beq.n	80a40de <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a4034:	4633      	mov	r3, r6
 80a4036:	2206      	movs	r2, #6
 80a4038:	2101      	movs	r1, #1
 80a403a:	2002      	movs	r0, #2
 80a403c:	9700      	str	r7, [sp, #0]
 80a403e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a4042:	f7ff fc55 	bl	80a38f0 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a4046:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a4048:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a404c:	f04f 0800 	mov.w	r8, #0
 80a4050:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a4054:	696b      	ldr	r3, [r5, #20]
 80a4056:	2001      	movs	r0, #1
 80a4058:	681b      	ldr	r3, [r3, #0]
 80a405a:	4923      	ldr	r1, [pc, #140]	; (80a40e8 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a405c:	9301      	str	r3, [sp, #4]
 80a405e:	4b23      	ldr	r3, [pc, #140]	; (80a40ec <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a4060:	aa02      	add	r2, sp, #8
 80a4062:	9300      	str	r3, [sp, #0]
 80a4064:	4643      	mov	r3, r8
 80a4066:	f7ff fccb 	bl	80a3a00 <log_message>
          if (socket_handle_valid(d_->sock))
 80a406a:	696b      	ldr	r3, [r5, #20]
 80a406c:	6818      	ldr	r0, [r3, #0]
 80a406e:	f7ff fc37 	bl	80a38e0 <socket_handle_valid>
 80a4072:	2800      	cmp	r0, #0
 80a4074:	d033      	beq.n	80a40de <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a4076:	4628      	mov	r0, r5
 80a4078:	f7ff ffc1 	bl	80a3ffe <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a407c:	2302      	movs	r3, #2
 80a407e:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a4082:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a4084:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a4086:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a408a:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a408c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a4090:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a4094:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a4096:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a409a:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a409e:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a40a2:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a40a6:	f7ff fc9b 	bl	80a39e0 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a40aa:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a40ac:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a40ae:	2210      	movs	r2, #16
 80a40b0:	6818      	ldr	r0, [r3, #0]
 80a40b2:	a902      	add	r1, sp, #8
 80a40b4:	f7ff fc24 	bl	80a3900 <socket_connect>
 80a40b8:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a40ba:	4630      	mov	r0, r6
 80a40bc:	f7ff fc90 	bl	80a39e0 <HAL_NET_SetNetWatchDog>
 80a40c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a40c2:	696e      	ldr	r6, [r5, #20]
 80a40c4:	368c      	adds	r6, #140	; 0x8c
 80a40c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a40c8:	6823      	ldr	r3, [r4, #0]
 80a40ca:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a40cc:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a40ce:	f1b9 0f00 	cmp.w	r9, #0
 80a40d2:	d007      	beq.n	80a40e4 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a40d4:	682b      	ldr	r3, [r5, #0]
 80a40d6:	4628      	mov	r0, r5
 80a40d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a40da:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a40dc:	4640      	mov	r0, r8
}
 80a40de:	b00b      	add	sp, #44	; 0x2c
 80a40e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a40e4:	2001      	movs	r0, #1
 80a40e6:	e7fa      	b.n	80a40de <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a40e8:	080a8ef8 	.word	0x080a8ef8
 80a40ec:	080a8eff 	.word	0x080a8eff

080a40f0 <_ZN9TCPClient9availableEv>:
{
 80a40f0:	b538      	push	{r3, r4, r5, lr}
 80a40f2:	6942      	ldr	r2, [r0, #20]
 80a40f4:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a40f6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a40fa:	b12b      	cbz	r3, 80a4108 <_ZN9TCPClient9availableEv+0x18>
 80a40fc:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a4100:	429a      	cmp	r2, r3
 80a4102:	d101      	bne.n	80a4108 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a4104:	f7ff ff7b 	bl	80a3ffe <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a4108:	6920      	ldr	r0, [r4, #16]
 80a410a:	f001 fa05 	bl	80a5518 <_ZN5spark12NetworkClass4fromEm>
 80a410e:	6803      	ldr	r3, [r0, #0]
 80a4110:	68db      	ldr	r3, [r3, #12]
 80a4112:	4798      	blx	r3
 80a4114:	b1f8      	cbz	r0, 80a4156 <_ZN9TCPClient9availableEv+0x66>
 80a4116:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a4118:	6818      	ldr	r0, [r3, #0]
 80a411a:	f7ff fbe1 	bl	80a38e0 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a411e:	b1d0      	cbz	r0, 80a4156 <_ZN9TCPClient9availableEv+0x66>
 80a4120:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a4122:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a4126:	297f      	cmp	r1, #127	; 0x7f
 80a4128:	d815      	bhi.n	80a4156 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a412a:	1d05      	adds	r5, r0, #4
 80a412c:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a4130:	2300      	movs	r3, #0
 80a4132:	6800      	ldr	r0, [r0, #0]
 80a4134:	4429      	add	r1, r5
 80a4136:	f7ff fbeb 	bl	80a3910 <socket_receive>
            if (ret > 0)
 80a413a:	2800      	cmp	r0, #0
 80a413c:	dd0b      	ble.n	80a4156 <_ZN9TCPClient9availableEv+0x66>
 80a413e:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a4140:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a4144:	b90a      	cbnz	r2, 80a414a <_ZN9TCPClient9availableEv+0x5a>
 80a4146:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a414a:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a414c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a4150:	4410      	add	r0, r2
 80a4152:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a4156:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a4158:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a415c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a4160:	1ac0      	subs	r0, r0, r3
 80a4162:	bd38      	pop	{r3, r4, r5, pc}

080a4164 <_ZN9TCPClient4stopEv>:
{
 80a4164:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a4166:	6943      	ldr	r3, [r0, #20]
{
 80a4168:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a416a:	6818      	ldr	r0, [r3, #0]
 80a416c:	f7ff fbb8 	bl	80a38e0 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a4170:	b118      	cbz	r0, 80a417a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a4172:	6963      	ldr	r3, [r4, #20]
 80a4174:	6818      	ldr	r0, [r3, #0]
 80a4176:	f7ff fbd3 	bl	80a3920 <socket_close>
 80a417a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a417c:	f7ff fbd8 	bl	80a3930 <socket_handle_invalid>
 80a4180:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a4182:	6960      	ldr	r0, [r4, #20]
 80a4184:	2211      	movs	r2, #17
 80a4186:	2100      	movs	r1, #0
 80a4188:	308c      	adds	r0, #140	; 0x8c
 80a418a:	f002 fe1f 	bl	80a6dcc <memset>
  flush_buffer();
 80a418e:	4620      	mov	r0, r4
}
 80a4190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a4194:	f7ff bf33 	b.w	80a3ffe <_ZN9TCPClient12flush_bufferEv>

080a4198 <_ZN9TCPClient6statusEv>:
{
 80a4198:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a419a:	6943      	ldr	r3, [r0, #20]
{
 80a419c:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a419e:	6818      	ldr	r0, [r3, #0]
 80a41a0:	f7ff fb9e 	bl	80a38e0 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a41a4:	b908      	cbnz	r0, 80a41aa <_ZN9TCPClient6statusEv+0x12>
 80a41a6:	2000      	movs	r0, #0
}
 80a41a8:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a41aa:	6920      	ldr	r0, [r4, #16]
 80a41ac:	f001 f9b4 	bl	80a5518 <_ZN5spark12NetworkClass4fromEm>
 80a41b0:	6803      	ldr	r3, [r0, #0]
 80a41b2:	68db      	ldr	r3, [r3, #12]
 80a41b4:	4798      	blx	r3
 80a41b6:	2800      	cmp	r0, #0
 80a41b8:	d0f5      	beq.n	80a41a6 <_ZN9TCPClient6statusEv+0xe>
 80a41ba:	6963      	ldr	r3, [r4, #20]
 80a41bc:	6818      	ldr	r0, [r3, #0]
 80a41be:	f7ff fb87 	bl	80a38d0 <socket_active_status>
 80a41c2:	fab0 f080 	clz	r0, r0
 80a41c6:	0940      	lsrs	r0, r0, #5
 80a41c8:	e7ee      	b.n	80a41a8 <_ZN9TCPClient6statusEv+0x10>

080a41ca <_ZN9TCPClientcvbEv>:
{
 80a41ca:	b508      	push	{r3, lr}
   return (status()!=0);
 80a41cc:	f7ff ffe4 	bl	80a4198 <_ZN9TCPClient6statusEv>
}
 80a41d0:	3800      	subs	r0, #0
 80a41d2:	bf18      	it	ne
 80a41d4:	2001      	movne	r0, #1
 80a41d6:	bd08      	pop	{r3, pc}

080a41d8 <_ZN9TCPClient5writeEPKhjm>:
{
 80a41d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a41dc:	2700      	movs	r7, #0
 80a41de:	6047      	str	r7, [r0, #4]
 80a41e0:	4604      	mov	r4, r0
 80a41e2:	460d      	mov	r5, r1
 80a41e4:	4616      	mov	r6, r2
 80a41e6:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a41e8:	f7ff ffd6 	bl	80a4198 <_ZN9TCPClient6statusEv>
 80a41ec:	b170      	cbz	r0, 80a420c <_ZN9TCPClient5writeEPKhjm+0x34>
 80a41ee:	e9cd 8700 	strd	r8, r7, [sp]
 80a41f2:	6960      	ldr	r0, [r4, #20]
 80a41f4:	463b      	mov	r3, r7
 80a41f6:	4632      	mov	r2, r6
 80a41f8:	4629      	mov	r1, r5
 80a41fa:	6800      	ldr	r0, [r0, #0]
 80a41fc:	f7ff fba0 	bl	80a3940 <socket_send_ex>
    if (ret < 0) {
 80a4200:	2800      	cmp	r0, #0
 80a4202:	da00      	bge.n	80a4206 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a4204:	6060      	str	r0, [r4, #4]
}
 80a4206:	b002      	add	sp, #8
 80a4208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a420c:	f04f 30ff 	mov.w	r0, #4294967295
 80a4210:	e7f8      	b.n	80a4204 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a4212 <_ZN9TCPClient9connectedEv>:
{
 80a4212:	b570      	push	{r4, r5, r6, lr}
 80a4214:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a4216:	f7ff ffbf 	bl	80a4198 <_ZN9TCPClient6statusEv>
 80a421a:	b9e8      	cbnz	r0, 80a4258 <_ZN9TCPClient9connectedEv+0x46>
 80a421c:	696b      	ldr	r3, [r5, #20]
 80a421e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a4222:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a4226:	4291      	cmp	r1, r2
 80a4228:	d116      	bne.n	80a4258 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a422a:	6818      	ldr	r0, [r3, #0]
 80a422c:	f7ff fb58 	bl	80a38e0 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a4230:	b908      	cbnz	r0, 80a4236 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a4232:	2000      	movs	r0, #0
}
 80a4234:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a4236:	696b      	ldr	r3, [r5, #20]
 80a4238:	6818      	ldr	r0, [r3, #0]
 80a423a:	f7ff fb49 	bl	80a38d0 <socket_active_status>
 80a423e:	2801      	cmp	r0, #1
 80a4240:	4604      	mov	r4, r0
 80a4242:	d1f6      	bne.n	80a4232 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a4244:	682b      	ldr	r3, [r5, #0]
 80a4246:	4628      	mov	r0, r5
 80a4248:	691b      	ldr	r3, [r3, #16]
 80a424a:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a424c:	b930      	cbnz	r0, 80a425c <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a424e:	682b      	ldr	r3, [r5, #0]
 80a4250:	4628      	mov	r0, r5
 80a4252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a4254:	4798      	blx	r3
 80a4256:	e7ec      	b.n	80a4232 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a4258:	2001      	movs	r0, #1
 80a425a:	e7eb      	b.n	80a4234 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a425c:	4620      	mov	r0, r4
 80a425e:	e7e9      	b.n	80a4234 <_ZN9TCPClient9connectedEv+0x22>

080a4260 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a4260:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a4262:	b510      	push	{r4, lr}
 80a4264:	4604      	mov	r4, r0
          total(0) {
 80a4266:	6001      	str	r1, [r0, #0]
 80a4268:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a426c:	3088      	adds	r0, #136	; 0x88
 80a426e:	f000 feb3 	bl	80a4fd8 <_ZN9IPAddressC1Ev>
}
 80a4272:	4620      	mov	r0, r4
 80a4274:	bd10      	pop	{r4, pc}
	...

080a4278 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a4278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a427a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a427e:	2300      	movs	r3, #0
 80a4280:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a4284:	4a0d      	ldr	r2, [pc, #52]	; (80a42bc <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a4286:	6103      	str	r3, [r0, #16]
 80a4288:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a428a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a428c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a428e:	20ac      	movs	r0, #172	; 0xac
 80a4290:	460e      	mov	r6, r1
 80a4292:	f7fb ff00 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a4296:	1e05      	subs	r5, r0, #0
 80a4298:	f105 070c 	add.w	r7, r5, #12
 80a429c:	d008      	beq.n	80a42b0 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a429e:	2301      	movs	r3, #1
 80a42a0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a42a4:	4b06      	ldr	r3, [pc, #24]	; (80a42c0 <_ZN9TCPClientC1Em+0x48>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a42a6:	4631      	mov	r1, r6
 80a42a8:	4638      	mov	r0, r7
 80a42aa:	602b      	str	r3, [r5, #0]
 80a42ac:	f7ff ffd8 	bl	80a4260 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a42b0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a42b2:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a42b6:	f7ff fea2 	bl	80a3ffe <_ZN9TCPClient12flush_bufferEv>
}
 80a42ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a42bc:	080a8f40 	.word	0x080a8f40
 80a42c0:	080a8f1c 	.word	0x080a8f1c

080a42c4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a42c4:	b510      	push	{r4, lr}
 80a42c6:	4604      	mov	r4, r0
 80a42c8:	f7ff fb32 	bl	80a3930 <socket_handle_invalid>
 80a42cc:	4601      	mov	r1, r0
 80a42ce:	4620      	mov	r0, r4
 80a42d0:	f7ff ffd2 	bl	80a4278 <_ZN9TCPClientC1Em>
}
 80a42d4:	4620      	mov	r0, r4
 80a42d6:	bd10      	pop	{r4, pc}

080a42d8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a42d8:	b510      	push	{r4, lr}
 80a42da:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a42dc:	6800      	ldr	r0, [r0, #0]
 80a42de:	f7ff faff 	bl	80a38e0 <socket_handle_valid>
 80a42e2:	b110      	cbz	r0, 80a42ea <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a42e4:	6820      	ldr	r0, [r4, #0]
 80a42e6:	f7ff fb1b 	bl	80a3920 <socket_close>
    }
}
 80a42ea:	4620      	mov	r0, r4
 80a42ec:	bd10      	pop	{r4, pc}

080a42ee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80a42ee:	300c      	adds	r0, #12
 80a42f0:	f7ff bff2 	b.w	80a42d8 <_ZN9TCPClient4DataD1Ev>

080a42f4 <_ZN9TCPClient7connectEPKctm>:
{
 80a42f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a42f8:	461f      	mov	r7, r3
    stop();
 80a42fa:	6803      	ldr	r3, [r0, #0]
{
 80a42fc:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a42fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a4300:	4606      	mov	r6, r0
 80a4302:	460d      	mov	r5, r1
 80a4304:	4690      	mov	r8, r2
    stop();
 80a4306:	4798      	blx	r3
    if (Network.ready())
 80a4308:	4813      	ldr	r0, [pc, #76]	; (80a4358 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a430a:	f001 f8b0 	bl	80a546e <_ZN5spark12NetworkClass5readyEv>
 80a430e:	b1f0      	cbz	r0, 80a434e <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a4310:	a802      	add	r0, sp, #8
 80a4312:	f000 fe61 	bl	80a4fd8 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a4316:	4628      	mov	r0, r5
 80a4318:	f002 fdbb 	bl	80a6e92 <strlen>
 80a431c:	2400      	movs	r4, #0
 80a431e:	b281      	uxth	r1, r0
 80a4320:	463b      	mov	r3, r7
 80a4322:	4628      	mov	r0, r5
 80a4324:	9400      	str	r4, [sp, #0]
 80a4326:	aa03      	add	r2, sp, #12
 80a4328:	f7ff fb62 	bl	80a39f0 <inet_gethostbyname>
 80a432c:	b990      	cbnz	r0, 80a4354 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a432e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a4330:	ad09      	add	r5, sp, #36	; 0x24
 80a4332:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a4336:	4b09      	ldr	r3, [pc, #36]	; (80a435c <_ZN9TCPClient7connectEPKctm+0x68>)
 80a4338:	ac03      	add	r4, sp, #12
 80a433a:	9308      	str	r3, [sp, #32]
 80a433c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a433e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4340:	6823      	ldr	r3, [r4, #0]
 80a4342:	4642      	mov	r2, r8
 80a4344:	702b      	strb	r3, [r5, #0]
 80a4346:	4630      	mov	r0, r6
 80a4348:	463b      	mov	r3, r7
 80a434a:	a908      	add	r1, sp, #32
 80a434c:	47c8      	blx	r9
}
 80a434e:	b00f      	add	sp, #60	; 0x3c
 80a4350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a4354:	4620      	mov	r0, r4
 80a4356:	e7fa      	b.n	80a434e <_ZN9TCPClient7connectEPKctm+0x5a>
 80a4358:	200008dc 	.word	0x200008dc
 80a435c:	080a8fc8 	.word	0x080a8fc8

080a4360 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a4360:	b510      	push	{r4, lr}
 80a4362:	4604      	mov	r4, r0
{
	free(buffer);
 80a4364:	6800      	ldr	r0, [r0, #0]
 80a4366:	f7ff fc69 	bl	80a3c3c <free>
}
 80a436a:	4620      	mov	r0, r4
 80a436c:	bd10      	pop	{r4, pc}

080a436e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a436e:	b510      	push	{r4, lr}
 80a4370:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a4372:	6800      	ldr	r0, [r0, #0]
 80a4374:	b108      	cbz	r0, 80a437a <_ZN6String10invalidateEv+0xc>
 80a4376:	f7ff fc61 	bl	80a3c3c <free>
	buffer = NULL;
 80a437a:	2300      	movs	r3, #0
	capacity = len = 0;
 80a437c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a4380:	6023      	str	r3, [r4, #0]
}
 80a4382:	bd10      	pop	{r4, pc}

080a4384 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a4384:	b538      	push	{r3, r4, r5, lr}
 80a4386:	4604      	mov	r4, r0
 80a4388:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a438a:	6800      	ldr	r0, [r0, #0]
 80a438c:	3101      	adds	r1, #1
 80a438e:	f7ff fc5d 	bl	80a3c4c <realloc>
	if (newbuffer) {
 80a4392:	b110      	cbz	r0, 80a439a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a4394:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a4398:	2001      	movs	r0, #1
	}
	return 0;
}
 80a439a:	bd38      	pop	{r3, r4, r5, pc}

080a439c <_ZN6String7reserveEj>:
{
 80a439c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a439e:	6803      	ldr	r3, [r0, #0]
{
 80a43a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a43a2:	b123      	cbz	r3, 80a43ae <_ZN6String7reserveEj+0x12>
 80a43a4:	6843      	ldr	r3, [r0, #4]
 80a43a6:	428b      	cmp	r3, r1
 80a43a8:	d301      	bcc.n	80a43ae <_ZN6String7reserveEj+0x12>
 80a43aa:	2001      	movs	r0, #1
}
 80a43ac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a43ae:	4620      	mov	r0, r4
 80a43b0:	f7ff ffe8 	bl	80a4384 <_ZN6String12changeBufferEj>
 80a43b4:	2800      	cmp	r0, #0
 80a43b6:	d0f9      	beq.n	80a43ac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a43b8:	68a3      	ldr	r3, [r4, #8]
 80a43ba:	2b00      	cmp	r3, #0
 80a43bc:	d1f5      	bne.n	80a43aa <_ZN6String7reserveEj+0xe>
 80a43be:	6822      	ldr	r2, [r4, #0]
 80a43c0:	7013      	strb	r3, [r2, #0]
 80a43c2:	e7f2      	b.n	80a43aa <_ZN6String7reserveEj+0xe>

080a43c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a43c4:	b570      	push	{r4, r5, r6, lr}
 80a43c6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a43c8:	4611      	mov	r1, r2
{
 80a43ca:	4604      	mov	r4, r0
 80a43cc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a43ce:	f7ff ffe5 	bl	80a439c <_ZN6String7reserveEj>
 80a43d2:	b920      	cbnz	r0, 80a43de <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a43d4:	4620      	mov	r0, r4
 80a43d6:	f7ff ffca 	bl	80a436e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a43da:	4620      	mov	r0, r4
 80a43dc:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a43de:	462a      	mov	r2, r5
 80a43e0:	4631      	mov	r1, r6
 80a43e2:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a43e4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a43e6:	f002 fce3 	bl	80a6db0 <memcpy>
	buffer[len] = 0;
 80a43ea:	2100      	movs	r1, #0
 80a43ec:	6822      	ldr	r2, [r4, #0]
 80a43ee:	68a3      	ldr	r3, [r4, #8]
 80a43f0:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a43f2:	e7f2      	b.n	80a43da <_ZN6String4copyEPKcj+0x16>

080a43f4 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a43f4:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a43f6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a43f8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a43fa:	460d      	mov	r5, r1
	capacity = 0;
 80a43fc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4400:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4402:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a4404:	b139      	cbz	r1, 80a4416 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a4406:	4608      	mov	r0, r1
 80a4408:	f002 fd43 	bl	80a6e92 <strlen>
 80a440c:	4629      	mov	r1, r5
 80a440e:	4602      	mov	r2, r0
 80a4410:	4620      	mov	r0, r4
 80a4412:	f7ff ffd7 	bl	80a43c4 <_ZN6String4copyEPKcj>
}
 80a4416:	4620      	mov	r0, r4
 80a4418:	bd38      	pop	{r3, r4, r5, pc}

080a441a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a441a:	b538      	push	{r3, r4, r5, lr}
 80a441c:	4605      	mov	r5, r0
	if (buffer) {
 80a441e:	6800      	ldr	r0, [r0, #0]
{
 80a4420:	460c      	mov	r4, r1
	if (buffer) {
 80a4422:	b168      	cbz	r0, 80a4440 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a4424:	686a      	ldr	r2, [r5, #4]
 80a4426:	688b      	ldr	r3, [r1, #8]
 80a4428:	429a      	cmp	r2, r3
 80a442a:	d307      	bcc.n	80a443c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a442c:	6809      	ldr	r1, [r1, #0]
 80a442e:	f002 fd0d 	bl	80a6e4c <strcpy>
			len = rhs.len;
 80a4432:	68a3      	ldr	r3, [r4, #8]
 80a4434:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a4436:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a4438:	60a3      	str	r3, [r4, #8]
}
 80a443a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a443c:	f7ff fbfe 	bl	80a3c3c <free>
	buffer = rhs.buffer;
 80a4440:	6823      	ldr	r3, [r4, #0]
 80a4442:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a4444:	6863      	ldr	r3, [r4, #4]
 80a4446:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a4448:	68a3      	ldr	r3, [r4, #8]
 80a444a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a444c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a444e:	e9c4 3300 	strd	r3, r3, [r4]
 80a4452:	e7f1      	b.n	80a4438 <_ZN6String4moveERS_+0x1e>

080a4454 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a4454:	4288      	cmp	r0, r1
{
 80a4456:	b510      	push	{r4, lr}
 80a4458:	460b      	mov	r3, r1
 80a445a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a445c:	d004      	beq.n	80a4468 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a445e:	6809      	ldr	r1, [r1, #0]
 80a4460:	b121      	cbz	r1, 80a446c <_ZN6StringaSERKS_+0x18>
 80a4462:	689a      	ldr	r2, [r3, #8]
 80a4464:	f7ff ffae 	bl	80a43c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a4468:	4620      	mov	r0, r4
 80a446a:	bd10      	pop	{r4, pc}
	else invalidate();
 80a446c:	f7ff ff7f 	bl	80a436e <_ZN6String10invalidateEv>
 80a4470:	e7fa      	b.n	80a4468 <_ZN6StringaSERKS_+0x14>

080a4472 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a4472:	2300      	movs	r3, #0
String::String(const String &value)
 80a4474:	b510      	push	{r4, lr}
 80a4476:	4604      	mov	r4, r0
	capacity = 0;
 80a4478:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a447c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a447e:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a4480:	f7ff ffe8 	bl	80a4454 <_ZN6StringaSERKS_>
}
 80a4484:	4620      	mov	r0, r4
 80a4486:	bd10      	pop	{r4, pc}

080a4488 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a4488:	4288      	cmp	r0, r1
{
 80a448a:	b510      	push	{r4, lr}
 80a448c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a448e:	d001      	beq.n	80a4494 <_ZN6StringaSEOS_+0xc>
 80a4490:	f7ff ffc3 	bl	80a441a <_ZN6String4moveERS_>
	return *this;
}
 80a4494:	4620      	mov	r0, r4
 80a4496:	bd10      	pop	{r4, pc}

080a4498 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a4498:	b570      	push	{r4, r5, r6, lr}
 80a449a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a449c:	460e      	mov	r6, r1
 80a449e:	b909      	cbnz	r1, 80a44a4 <_ZN6String6concatEPKcj+0xc>
 80a44a0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a44a2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a44a4:	b16a      	cbz	r2, 80a44c2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a44a6:	6884      	ldr	r4, [r0, #8]
 80a44a8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a44aa:	4621      	mov	r1, r4
 80a44ac:	f7ff ff76 	bl	80a439c <_ZN6String7reserveEj>
 80a44b0:	2800      	cmp	r0, #0
 80a44b2:	d0f5      	beq.n	80a44a0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a44b4:	6828      	ldr	r0, [r5, #0]
 80a44b6:	68ab      	ldr	r3, [r5, #8]
 80a44b8:	4631      	mov	r1, r6
 80a44ba:	4418      	add	r0, r3
 80a44bc:	f002 fcc6 	bl	80a6e4c <strcpy>
	len = newlen;
 80a44c0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a44c2:	2001      	movs	r0, #1
 80a44c4:	e7ed      	b.n	80a44a2 <_ZN6String6concatEPKcj+0xa>

080a44c6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a44c6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a44c8:	688a      	ldr	r2, [r1, #8]
 80a44ca:	6809      	ldr	r1, [r1, #0]
{
 80a44cc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a44ce:	f7ff ffe3 	bl	80a4498 <_ZN6String6concatEPKcj>
 80a44d2:	b910      	cbnz	r0, 80a44da <_ZplRK15StringSumHelperRK6String+0x14>
 80a44d4:	4620      	mov	r0, r4
 80a44d6:	f7ff ff4a 	bl	80a436e <_ZN6String10invalidateEv>
	return a;
}
 80a44da:	4620      	mov	r0, r4
 80a44dc:	bd10      	pop	{r4, pc}

080a44de <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 80a44de:	4613      	mov	r3, r2
 80a44e0:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a44e2:	688a      	ldr	r2, [r1, #8]
 80a44e4:	6884      	ldr	r4, [r0, #8]
 80a44e6:	1aa4      	subs	r4, r4, r2
 80a44e8:	429c      	cmp	r4, r3
 80a44ea:	d30a      	bcc.n	80a4502 <_ZNK6String10startsWithERKS_j+0x24>
 80a44ec:	6800      	ldr	r0, [r0, #0]
 80a44ee:	b138      	cbz	r0, 80a4500 <_ZNK6String10startsWithERKS_j+0x22>
 80a44f0:	6809      	ldr	r1, [r1, #0]
 80a44f2:	b141      	cbz	r1, 80a4506 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80a44f4:	4418      	add	r0, r3
 80a44f6:	f002 fcd4 	bl	80a6ea2 <strncmp>
 80a44fa:	fab0 f080 	clz	r0, r0
 80a44fe:	0940      	lsrs	r0, r0, #5
}
 80a4500:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a4502:	2000      	movs	r0, #0
 80a4504:	e7fc      	b.n	80a4500 <_ZNK6String10startsWithERKS_j+0x22>
 80a4506:	4608      	mov	r0, r1
 80a4508:	e7fa      	b.n	80a4500 <_ZNK6String10startsWithERKS_j+0x22>

080a450a <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 80a450a:	6882      	ldr	r2, [r0, #8]
 80a450c:	688b      	ldr	r3, [r1, #8]
 80a450e:	429a      	cmp	r2, r3
 80a4510:	d302      	bcc.n	80a4518 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 80a4512:	2200      	movs	r2, #0
 80a4514:	f7ff bfe3 	b.w	80a44de <_ZNK6String10startsWithERKS_j>
}
 80a4518:	2000      	movs	r0, #0
 80a451a:	4770      	bx	lr

080a451c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a451e:	4606      	mov	r6, r0
 80a4520:	460d      	mov	r5, r1
  size_t n = 0;
 80a4522:	2400      	movs	r4, #0
 80a4524:	188f      	adds	r7, r1, r2
  while (size--) {
 80a4526:	42bd      	cmp	r5, r7
 80a4528:	d00c      	beq.n	80a4544 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a452a:	6833      	ldr	r3, [r6, #0]
 80a452c:	4630      	mov	r0, r6
 80a452e:	689b      	ldr	r3, [r3, #8]
 80a4530:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4534:	4798      	blx	r3
     if (chunk>=0)
 80a4536:	1e03      	subs	r3, r0, #0
 80a4538:	db01      	blt.n	80a453e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a453a:	441c      	add	r4, r3
  while (size--) {
 80a453c:	e7f3      	b.n	80a4526 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a453e:	2c00      	cmp	r4, #0
 80a4540:	bf08      	it	eq
 80a4542:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a4544:	4620      	mov	r0, r4
 80a4546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4548 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a4548:	b570      	push	{r4, r5, r6, lr}
 80a454a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a454c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a454e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a4550:	b149      	cbz	r1, 80a4566 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a4552:	f002 fc9e 	bl	80a6e92 <strlen>
 80a4556:	682b      	ldr	r3, [r5, #0]
 80a4558:	4602      	mov	r2, r0
 80a455a:	4621      	mov	r1, r4
 80a455c:	4628      	mov	r0, r5
    }
 80a455e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a4562:	68db      	ldr	r3, [r3, #12]
 80a4564:	4718      	bx	r3
    }
 80a4566:	bd70      	pop	{r4, r5, r6, pc}

080a4568 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a4568:	b508      	push	{r3, lr}
  return write(str);
 80a456a:	f7ff ffed 	bl	80a4548 <_ZN5Print5writeEPKc>
}
 80a456e:	bd08      	pop	{r3, pc}

080a4570 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a4570:	6803      	ldr	r3, [r0, #0]
 80a4572:	689b      	ldr	r3, [r3, #8]
 80a4574:	4718      	bx	r3

080a4576 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a4576:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a4578:	210d      	movs	r1, #13
{
 80a457a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a457c:	f7ff fff8 	bl	80a4570 <_ZN5Print5printEc>
  n += print('\n');
 80a4580:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a4582:	4604      	mov	r4, r0
  n += print('\n');
 80a4584:	4628      	mov	r0, r5
 80a4586:	f7ff fff3 	bl	80a4570 <_ZN5Print5printEc>
  return n;
}
 80a458a:	4420      	add	r0, r4
 80a458c:	bd38      	pop	{r3, r4, r5, pc}

080a458e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a458e:	b538      	push	{r3, r4, r5, lr}
 80a4590:	4605      	mov	r5, r0
  return write(str);
 80a4592:	f7ff ffd9 	bl	80a4548 <_ZN5Print5writeEPKc>
 80a4596:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a4598:	4628      	mov	r0, r5
 80a459a:	f7ff ffec 	bl	80a4576 <_ZN5Print7printlnEv>
  return n;
}
 80a459e:	4420      	add	r0, r4
 80a45a0:	bd38      	pop	{r3, r4, r5, pc}

080a45a2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a45a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a45a4:	2a01      	cmp	r2, #1
 80a45a6:	bf98      	it	ls
 80a45a8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a45aa:	b530      	push	{r4, r5, lr}
 80a45ac:	b08b      	sub	sp, #44	; 0x2c
 80a45ae:	460c      	mov	r4, r1
  *str = '\0';
 80a45b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a45b4:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a45b6:	4625      	mov	r5, r4
 80a45b8:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a45bc:	fb04 5312 	mls	r3, r4, r2, r5
 80a45c0:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a45c2:	2b09      	cmp	r3, #9
 80a45c4:	bf94      	ite	ls
 80a45c6:	3330      	addls	r3, #48	; 0x30
 80a45c8:	3337      	addhi	r3, #55	; 0x37
 80a45ca:	b2db      	uxtb	r3, r3
  } while(n);
 80a45cc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a45ce:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a45d2:	d9f0      	bls.n	80a45b6 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a45d4:	f7ff ffb8 	bl	80a4548 <_ZN5Print5writeEPKc>
}
 80a45d8:	b00b      	add	sp, #44	; 0x2c
 80a45da:	bd30      	pop	{r4, r5, pc}

080a45dc <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a45dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a45e0:	b086      	sub	sp, #24
 80a45e2:	af00      	add	r7, sp, #0
 80a45e4:	4605      	mov	r5, r0
 80a45e6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a45e8:	1d38      	adds	r0, r7, #4
 80a45ea:	2114      	movs	r1, #20
{
 80a45ec:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a45ee:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a45f0:	f7ff fb4c 	bl	80a3c8c <vsnprintf>

    if (n<bufsize)
 80a45f4:	2813      	cmp	r0, #19
 80a45f6:	d80e      	bhi.n	80a4616 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a45f8:	4628      	mov	r0, r5
 80a45fa:	1d39      	adds	r1, r7, #4
 80a45fc:	f7ff ffa4 	bl	80a4548 <_ZN5Print5writeEPKc>
 80a4600:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a4602:	b11e      	cbz	r6, 80a460c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a4604:	4628      	mov	r0, r5
 80a4606:	f7ff ffb6 	bl	80a4576 <_ZN5Print7printlnEv>
 80a460a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a460c:	4620      	mov	r0, r4
 80a460e:	3718      	adds	r7, #24
 80a4610:	46bd      	mov	sp, r7
 80a4612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a4616:	f100 0308 	add.w	r3, r0, #8
 80a461a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a461e:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a4620:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a4624:	4622      	mov	r2, r4
 80a4626:	1c41      	adds	r1, r0, #1
 80a4628:	683b      	ldr	r3, [r7, #0]
 80a462a:	4668      	mov	r0, sp
 80a462c:	f7ff fb2e 	bl	80a3c8c <vsnprintf>
  return write(str);
 80a4630:	4669      	mov	r1, sp
 80a4632:	4628      	mov	r0, r5
 80a4634:	f7ff ff88 	bl	80a4548 <_ZN5Print5writeEPKc>
 80a4638:	4604      	mov	r4, r0
 80a463a:	46c5      	mov	sp, r8
 80a463c:	e7e1      	b.n	80a4602 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a463e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80a463e:	b510      	push	{r4, lr}
 80a4640:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a4642:	f7ff f88b 	bl	80a375c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80a4646:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80a4648:	6823      	ldr	r3, [r4, #0]
 80a464a:	4620      	mov	r0, r4
 80a464c:	695b      	ldr	r3, [r3, #20]
 80a464e:	4798      	blx	r3
    if (c >= 0) return c;
 80a4650:	2800      	cmp	r0, #0
 80a4652:	da08      	bge.n	80a4666 <_ZN6Stream9timedReadEv+0x28>
 80a4654:	f7ff f882 	bl	80a375c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 80a4658:	68e3      	ldr	r3, [r4, #12]
 80a465a:	1ac0      	subs	r0, r0, r3
 80a465c:	68a3      	ldr	r3, [r4, #8]
 80a465e:	4298      	cmp	r0, r3
 80a4660:	d3f2      	bcc.n	80a4648 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 80a4662:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a4666:	bd10      	pop	{r4, pc}

080a4668 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 80a4668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a466c:	4607      	mov	r7, r0
 80a466e:	460c      	mov	r4, r1
 80a4670:	460d      	mov	r5, r1
 80a4672:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 80a4674:	42b5      	cmp	r5, r6
 80a4676:	eba5 0804 	sub.w	r8, r5, r4
 80a467a:	d007      	beq.n	80a468c <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 80a467c:	4638      	mov	r0, r7
 80a467e:	f7ff ffde 	bl	80a463e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 80a4682:	1e03      	subs	r3, r0, #0
 80a4684:	db02      	blt.n	80a468c <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 80a4686:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 80a468a:	e7f3      	b.n	80a4674 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 80a468c:	4640      	mov	r0, r8
 80a468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a4694 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4694:	4b01      	ldr	r3, [pc, #4]	; (80a469c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a4696:	4a02      	ldr	r2, [pc, #8]	; (80a46a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4698:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a469a:	4770      	bx	lr
 80a469c:	20000424 	.word	0x20000424
 80a46a0:	080a8f84 	.word	0x080a8f84

080a46a4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a46a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a46a8:	4b15      	ldr	r3, [pc, #84]	; (80a4700 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a46aa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a4704 <_ZL22Refresh_UnixTime_Cachex+0x60>
    unix_time += time_zone_cache;
 80a46ae:	e9d3 6700 	ldrd	r6, r7, [r3]
    unix_time += dst_current_cache;
 80a46b2:	4b15      	ldr	r3, [pc, #84]	; (80a4708 <_ZL22Refresh_UnixTime_Cachex+0x64>)
    unix_time += time_zone_cache;
 80a46b4:	1980      	adds	r0, r0, r6
 80a46b6:	eb47 0701 	adc.w	r7, r7, r1
    unix_time += dst_current_cache;
 80a46ba:	e9d3 6100 	ldrd	r6, r1, [r3]
 80a46be:	1986      	adds	r6, r0, r6
 80a46c0:	eb47 0701 	adc.w	r7, r7, r1
    if(unix_time != unix_time_cache)
 80a46c4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a46c8:	42bb      	cmp	r3, r7
 80a46ca:	bf08      	it	eq
 80a46cc:	42b2      	cmpeq	r2, r6
{
 80a46ce:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
 80a46d0:	d013      	beq.n	80a46fa <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a46d2:	a903      	add	r1, sp, #12
 80a46d4:	4668      	mov	r0, sp
 80a46d6:	e9cd 6700 	strd	r6, r7, [sp]
 80a46da:	f002 fa77 	bl	80a6bcc <localtime_r>
	calendar_time.tm_year += 1900;
 80a46de:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a46e0:	4d0a      	ldr	r5, [pc, #40]	; (80a470c <_ZL22Refresh_UnixTime_Cachex+0x68>)
	calendar_time.tm_year += 1900;
 80a46e2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a46e6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a46e8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a46ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a46ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a46ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a46f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a46f2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a46f6:	6823      	ldr	r3, [r4, #0]
 80a46f8:	602b      	str	r3, [r5, #0]
    }
}
 80a46fa:	b00c      	add	sp, #48	; 0x30
 80a46fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4700:	20000458 	.word	0x20000458
 80a4704:	20000460 	.word	0x20000460
 80a4708:	20000450 	.word	0x20000450
 80a470c:	2000042c 	.word	0x2000042c

080a4710 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a4710:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4712:	2000      	movs	r0, #0
 80a4714:	f7ff fa7a 	bl	80a3c0c <spark_sync_time_pending>
 80a4718:	b128      	cbz	r0, 80a4726 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a471a:	f7ff fa57 	bl	80a3bcc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a471e:	f080 0001 	eor.w	r0, r0, #1
 80a4722:	b2c0      	uxtb	r0, r0
    }
 80a4724:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4726:	2001      	movs	r0, #1
 80a4728:	e7fc      	b.n	80a4724 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a472c <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 80a472c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a472e:	f7ff ffb9 	bl	80a46a4 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 80a4732:	4b02      	ldr	r3, [pc, #8]	; (80a473c <_ZN9TimeClass7weekdayEx+0x10>)
 80a4734:	6998      	ldr	r0, [r3, #24]
}
 80a4736:	3001      	adds	r0, #1
 80a4738:	bd08      	pop	{r3, pc}
 80a473a:	bf00      	nop
 80a473c:	2000042c 	.word	0x2000042c

080a4740 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a4740:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a4742:	f7ff ffaf 	bl	80a46a4 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a4746:	4b02      	ldr	r3, [pc, #8]	; (80a4750 <_ZN9TimeClass5monthEx+0x10>)
 80a4748:	6918      	ldr	r0, [r3, #16]
}
 80a474a:	3001      	adds	r0, #1
 80a474c:	bd08      	pop	{r3, pc}
 80a474e:	bf00      	nop
 80a4750:	2000042c 	.word	0x2000042c

080a4754 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a4754:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a4756:	490a      	ldr	r1, [pc, #40]	; (80a4780 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a4758:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a475a:	f002 f833 	bl	80a67c4 <__aeabi_fcmplt>
 80a475e:	b968      	cbnz	r0, 80a477c <_ZN9TimeClass4zoneEf+0x28>
 80a4760:	4620      	mov	r0, r4
 80a4762:	4908      	ldr	r1, [pc, #32]	; (80a4784 <_ZN9TimeClass4zoneEf+0x30>)
 80a4764:	f002 f84c 	bl	80a6800 <__aeabi_fcmpgt>
 80a4768:	b940      	cbnz	r0, 80a477c <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a476a:	4907      	ldr	r1, [pc, #28]	; (80a4788 <_ZN9TimeClass4zoneEf+0x34>)
 80a476c:	4620      	mov	r0, r4
 80a476e:	f001 fe8b 	bl	80a6488 <__aeabi_fmul>
 80a4772:	f002 f875 	bl	80a6860 <__aeabi_f2lz>
 80a4776:	4b05      	ldr	r3, [pc, #20]	; (80a478c <_ZN9TimeClass4zoneEf+0x38>)
 80a4778:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a477c:	bd10      	pop	{r4, pc}
 80a477e:	bf00      	nop
 80a4780:	c1400000 	.word	0xc1400000
 80a4784:	41600000 	.word	0x41600000
 80a4788:	45610000 	.word	0x45610000
 80a478c:	20000458 	.word	0x20000458

080a4790 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a4790:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a4792:	2000      	movs	r0, #0
 80a4794:	f7ff f802 	bl	80a379c <hal_rtc_time_is_valid>
    if (rtcstate)
 80a4798:	4604      	mov	r4, r0
 80a479a:	b9a0      	cbnz	r0, 80a47c6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a479c:	f7ff f938 	bl	80a3a10 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a47a0:	2801      	cmp	r0, #1
 80a47a2:	d110      	bne.n	80a47c6 <_ZN9TimeClass7isValidEv+0x36>
 80a47a4:	4620      	mov	r0, r4
 80a47a6:	f7ff f963 	bl	80a3a70 <system_thread_get_state>
 80a47aa:	b960      	cbnz	r0, 80a47c6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a47ac:	f7ff ffb0 	bl	80a4710 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a47b0:	b910      	cbnz	r0, 80a47b8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a47b2:	f7ff f9fb 	bl	80a3bac <spark_process>
        while (_while() && !_condition()) {
 80a47b6:	e7f9      	b.n	80a47ac <_ZN9TimeClass7isValidEv+0x1c>
 80a47b8:	f7ff ffaa 	bl	80a4710 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a47bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a47c0:	2000      	movs	r0, #0
 80a47c2:	f7fe bfeb 	b.w	80a379c <hal_rtc_time_is_valid>
}
 80a47c6:	4620      	mov	r0, r4
 80a47c8:	bd10      	pop	{r4, pc}

080a47ca <_ZN9TimeClass3nowEv>:
{
 80a47ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a47cc:	f7ff ffe0 	bl	80a4790 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a47d0:	2210      	movs	r2, #16
 80a47d2:	2100      	movs	r1, #0
 80a47d4:	4668      	mov	r0, sp
 80a47d6:	f002 faf9 	bl	80a6dcc <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a47da:	2100      	movs	r1, #0
 80a47dc:	4668      	mov	r0, sp
 80a47de:	f7fe ffe5 	bl	80a37ac <hal_rtc_get_time>
}
 80a47e2:	9800      	ldr	r0, [sp, #0]
 80a47e4:	b005      	add	sp, #20
 80a47e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a47ec <_ZN9TimeClass4hourEv>:
{
 80a47ec:	b508      	push	{r3, lr}
	return hour(now());
 80a47ee:	f7ff ffec 	bl	80a47ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a47f2:	17c1      	asrs	r1, r0, #31
 80a47f4:	f7ff ff56 	bl	80a46a4 <_ZL22Refresh_UnixTime_Cachex>
}
 80a47f8:	4b01      	ldr	r3, [pc, #4]	; (80a4800 <_ZN9TimeClass4hourEv+0x14>)
 80a47fa:	6898      	ldr	r0, [r3, #8]
 80a47fc:	bd08      	pop	{r3, pc}
 80a47fe:	bf00      	nop
 80a4800:	2000042c 	.word	0x2000042c

080a4804 <_ZN9TimeClass6minuteEv>:
{
 80a4804:	b508      	push	{r3, lr}
	return minute(now());
 80a4806:	f7ff ffe0 	bl	80a47ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a480a:	17c1      	asrs	r1, r0, #31
 80a480c:	f7ff ff4a 	bl	80a46a4 <_ZL22Refresh_UnixTime_Cachex>
}
 80a4810:	4b01      	ldr	r3, [pc, #4]	; (80a4818 <_ZN9TimeClass6minuteEv+0x14>)
 80a4812:	6858      	ldr	r0, [r3, #4]
 80a4814:	bd08      	pop	{r3, pc}
 80a4816:	bf00      	nop
 80a4818:	2000042c 	.word	0x2000042c

080a481c <_ZN9TimeClass6secondEv>:
{
 80a481c:	b508      	push	{r3, lr}
	return second(now());
 80a481e:	f7ff ffd4 	bl	80a47ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a4822:	17c1      	asrs	r1, r0, #31
 80a4824:	f7ff ff3e 	bl	80a46a4 <_ZL22Refresh_UnixTime_Cachex>
}
 80a4828:	4b01      	ldr	r3, [pc, #4]	; (80a4830 <_ZN9TimeClass6secondEv+0x14>)
 80a482a:	6818      	ldr	r0, [r3, #0]
 80a482c:	bd08      	pop	{r3, pc}
 80a482e:	bf00      	nop
 80a4830:	2000042c 	.word	0x2000042c

080a4834 <_ZN9TimeClass3dayEv>:
{
 80a4834:	b508      	push	{r3, lr}
	return day(now());
 80a4836:	f7ff ffc8 	bl	80a47ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a483a:	17c1      	asrs	r1, r0, #31
 80a483c:	f7ff ff32 	bl	80a46a4 <_ZL22Refresh_UnixTime_Cachex>
}
 80a4840:	4b01      	ldr	r3, [pc, #4]	; (80a4848 <_ZN9TimeClass3dayEv+0x14>)
 80a4842:	68d8      	ldr	r0, [r3, #12]
 80a4844:	bd08      	pop	{r3, pc}
 80a4846:	bf00      	nop
 80a4848:	2000042c 	.word	0x2000042c

080a484c <_ZN9TimeClass7weekdayEv>:
{
 80a484c:	b508      	push	{r3, lr}
	return weekday(now());
 80a484e:	f7ff ffbc 	bl	80a47ca <_ZN9TimeClass3nowEv>
}
 80a4852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 80a4856:	17c1      	asrs	r1, r0, #31
 80a4858:	f7ff bf68 	b.w	80a472c <_ZN9TimeClass7weekdayEx>

080a485c <_ZN9TimeClass5monthEv>:
{
 80a485c:	b508      	push	{r3, lr}
	return month(now());
 80a485e:	f7ff ffb4 	bl	80a47ca <_ZN9TimeClass3nowEv>
}
 80a4862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a4866:	17c1      	asrs	r1, r0, #31
 80a4868:	f7ff bf6a 	b.w	80a4740 <_ZN9TimeClass5monthEx>

080a486c <_ZN9TimeClass4yearEv>:
{
 80a486c:	b508      	push	{r3, lr}
	return year(now());
 80a486e:	f7ff ffac 	bl	80a47ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a4872:	17c1      	asrs	r1, r0, #31
 80a4874:	f7ff ff16 	bl	80a46a4 <_ZL22Refresh_UnixTime_Cachex>
}
 80a4878:	4b01      	ldr	r3, [pc, #4]	; (80a4880 <_ZN9TimeClass4yearEv+0x14>)
 80a487a:	6958      	ldr	r0, [r3, #20]
 80a487c:	bd08      	pop	{r3, pc}
 80a487e:	bf00      	nop
 80a4880:	2000042c 	.word	0x2000042c

080a4884 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a4884:	4b02      	ldr	r3, [pc, #8]	; (80a4890 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a4886:	681a      	ldr	r2, [r3, #0]
 80a4888:	4b02      	ldr	r3, [pc, #8]	; (80a4894 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a488a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a488c:	4770      	bx	lr
 80a488e:	bf00      	nop
 80a4890:	2000007c 	.word	0x2000007c
 80a4894:	20000428 	.word	0x20000428

080a4898 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a4898:	2100      	movs	r1, #0
 80a489a:	f7ff b8c9 	b.w	80a3a30 <system_delay_ms>

080a489e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a489e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a48a0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a48a2:	4604      	mov	r4, r0
      if (_M_manager)
 80a48a4:	b113      	cbz	r3, 80a48ac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a48a6:	2203      	movs	r2, #3
 80a48a8:	4601      	mov	r1, r0
 80a48aa:	4798      	blx	r3
    }
 80a48ac:	4620      	mov	r0, r4
 80a48ae:	bd10      	pop	{r4, pc}

080a48b0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a48b0:	b510      	push	{r4, lr}
 80a48b2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a48b4:	f7ff fff3 	bl	80a489e <_ZNSt14_Function_baseD1Ev>
 80a48b8:	4620      	mov	r0, r4
 80a48ba:	bd10      	pop	{r4, pc}

080a48bc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80a48bc:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a48be:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a48c0:	460b      	mov	r3, r1
 80a48c2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a48c4:	c803      	ldmia	r0, {r0, r1}
 80a48c6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a48ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a48ce:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a48d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a48d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a48da:	b002      	add	sp, #8
 80a48dc:	bd10      	pop	{r4, pc}
	...

080a48e0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a48e0:	2300      	movs	r3, #0
 80a48e2:	4803      	ldr	r0, [pc, #12]	; (80a48f0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a48e4:	4a03      	ldr	r2, [pc, #12]	; (80a48f4 <_GLOBAL__sub_I_RGB+0x14>)
 80a48e6:	4904      	ldr	r1, [pc, #16]	; (80a48f8 <_GLOBAL__sub_I_RGB+0x18>)
 80a48e8:	6083      	str	r3, [r0, #8]
 80a48ea:	f000 bf61 	b.w	80a57b0 <__aeabi_atexit>
 80a48ee:	bf00      	nop
 80a48f0:	20000468 	.word	0x20000468
 80a48f4:	20000150 	.word	0x20000150
 80a48f8:	080a48b1 	.word	0x080a48b1

080a48fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a48fc:	4b01      	ldr	r3, [pc, #4]	; (80a4904 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a48fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a4900:	4770      	bx	lr
 80a4902:	bf00      	nop
 80a4904:	20000080 	.word	0x20000080

080a4908 <serialEventRun>:
{
 80a4908:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a490a:	4b13      	ldr	r3, [pc, #76]	; (80a4958 <serialEventRun+0x50>)
 80a490c:	b143      	cbz	r3, 80a4920 <serialEventRun+0x18>
 80a490e:	f000 fc0f 	bl	80a5130 <_Z16_fetch_usbserialv>
 80a4912:	6803      	ldr	r3, [r0, #0]
 80a4914:	691b      	ldr	r3, [r3, #16]
 80a4916:	4798      	blx	r3
 80a4918:	2800      	cmp	r0, #0
 80a491a:	dd01      	ble.n	80a4920 <serialEventRun+0x18>
        serialEvent();
 80a491c:	f7fb fd92 	bl	80a0444 <_Z11serialEventv>
    if (serialEvent1 && Serial1.available()>0)
 80a4920:	4b0e      	ldr	r3, [pc, #56]	; (80a495c <serialEventRun+0x54>)
 80a4922:	b143      	cbz	r3, 80a4936 <serialEventRun+0x2e>
 80a4924:	f000 fcc0 	bl	80a52a8 <_Z22__fetch_global_Serial1v>
 80a4928:	6803      	ldr	r3, [r0, #0]
 80a492a:	691b      	ldr	r3, [r3, #16]
 80a492c:	4798      	blx	r3
 80a492e:	2800      	cmp	r0, #0
 80a4930:	dd01      	ble.n	80a4936 <serialEventRun+0x2e>
        serialEvent1();
 80a4932:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a4936:	4b0a      	ldr	r3, [pc, #40]	; (80a4960 <serialEventRun+0x58>)
 80a4938:	b10b      	cbz	r3, 80a493e <serialEventRun+0x36>
 80a493a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a493e:	4b09      	ldr	r3, [pc, #36]	; (80a4964 <serialEventRun+0x5c>)
 80a4940:	b143      	cbz	r3, 80a4954 <serialEventRun+0x4c>
 80a4942:	f000 fc33 	bl	80a51ac <_Z17_fetch_usbserial1v>
 80a4946:	6803      	ldr	r3, [r0, #0]
 80a4948:	691b      	ldr	r3, [r3, #16]
 80a494a:	4798      	blx	r3
 80a494c:	2800      	cmp	r0, #0
 80a494e:	dd01      	ble.n	80a4954 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a4950:	f3af 8000 	nop.w
}
 80a4954:	bd08      	pop	{r3, pc}
 80a4956:	bf00      	nop
 80a4958:	080a0445 	.word	0x080a0445
	...

080a4968 <_post_loop>:
{
 80a4968:	b508      	push	{r3, lr}
	serialEventRun();
 80a496a:	f7ff ffcd 	bl	80a4908 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a496e:	f7fe fef5 	bl	80a375c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a4972:	4b01      	ldr	r3, [pc, #4]	; (80a4978 <_post_loop+0x10>)
 80a4974:	6018      	str	r0, [r3, #0]
}
 80a4976:	bd08      	pop	{r3, pc}
 80a4978:	200008f4 	.word	0x200008f4

080a497c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a497c:	4805      	ldr	r0, [pc, #20]	; (80a4994 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a497e:	4a06      	ldr	r2, [pc, #24]	; (80a4998 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a4980:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4982:	1a12      	subs	r2, r2, r0
 80a4984:	4905      	ldr	r1, [pc, #20]	; (80a499c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a4986:	f002 fa13 	bl	80a6db0 <memcpy>
    __backup_sram_signature = signature;
 80a498a:	4b05      	ldr	r3, [pc, #20]	; (80a49a0 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a498c:	4a05      	ldr	r2, [pc, #20]	; (80a49a4 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a498e:	601a      	str	r2, [r3, #0]
}
 80a4990:	bd08      	pop	{r3, pc}
 80a4992:	bf00      	nop
 80a4994:	40024000 	.word	0x40024000
 80a4998:	40024004 	.word	0x40024004
 80a499c:	080a9438 	.word	0x080a9438
 80a49a0:	40024000 	.word	0x40024000
 80a49a4:	9a271c1e 	.word	0x9a271c1e

080a49a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a49a8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a49aa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a49ac:	461a      	mov	r2, r3
 80a49ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a49b2:	9300      	str	r3, [sp, #0]
 80a49b4:	f7ff f86e 	bl	80a3a94 <system_ctrl_set_result>
}
 80a49b8:	b003      	add	sp, #12
 80a49ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a49c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a49c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a49c2:	8843      	ldrh	r3, [r0, #2]
 80a49c4:	2b0a      	cmp	r3, #10
 80a49c6:	d008      	beq.n	80a49da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a49c8:	2b50      	cmp	r3, #80	; 0x50
 80a49ca:	d10b      	bne.n	80a49e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a49cc:	4b09      	ldr	r3, [pc, #36]	; (80a49f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a49ce:	681b      	ldr	r3, [r3, #0]
 80a49d0:	b14b      	cbz	r3, 80a49e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a49d2:	b003      	add	sp, #12
 80a49d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a49d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a49da:	f7ff ffe5 	bl	80a49a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a49de:	b003      	add	sp, #12
 80a49e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a49e4:	2300      	movs	r3, #0
 80a49e6:	461a      	mov	r2, r3
 80a49e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a49ec:	9300      	str	r3, [sp, #0]
 80a49ee:	f7ff f851 	bl	80a3a94 <system_ctrl_set_result>
}
 80a49f2:	e7f4      	b.n	80a49de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a49f4:	2000047c 	.word	0x2000047c

080a49f8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a49f8:	2100      	movs	r1, #0
{
 80a49fa:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a49fc:	4811      	ldr	r0, [pc, #68]	; (80a4a44 <module_user_init_hook+0x4c>)
 80a49fe:	f7ff f96d 	bl	80a3cdc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a4a02:	4b11      	ldr	r3, [pc, #68]	; (80a4a48 <module_user_init_hook+0x50>)
 80a4a04:	681a      	ldr	r2, [r3, #0]
 80a4a06:	4b11      	ldr	r3, [pc, #68]	; (80a4a4c <module_user_init_hook+0x54>)
 80a4a08:	429a      	cmp	r2, r3
 80a4a0a:	bf0c      	ite	eq
 80a4a0c:	2201      	moveq	r2, #1
 80a4a0e:	2200      	movne	r2, #0
 80a4a10:	4b0f      	ldr	r3, [pc, #60]	; (80a4a50 <module_user_init_hook+0x58>)
 80a4a12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4a14:	d001      	beq.n	80a4a1a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a4a16:	f7ff ffb1 	bl	80a497c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4a1a:	f7fe fe8f 	bl	80a373c <HAL_RNG_GetRandomNumber>
 80a4a1e:	4604      	mov	r4, r0
    srand(seed);
 80a4a20:	f002 f9dc 	bl	80a6ddc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a4a24:	4b0b      	ldr	r3, [pc, #44]	; (80a4a54 <module_user_init_hook+0x5c>)
 80a4a26:	b113      	cbz	r3, 80a4a2e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a4a28:	4620      	mov	r0, r4
 80a4a2a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4a2e:	2100      	movs	r1, #0
 80a4a30:	4808      	ldr	r0, [pc, #32]	; (80a4a54 <module_user_init_hook+0x5c>)
 80a4a32:	f7ff f8f3 	bl	80a3c1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a4a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4a3a:	2100      	movs	r1, #0
 80a4a3c:	4806      	ldr	r0, [pc, #24]	; (80a4a58 <module_user_init_hook+0x60>)
 80a4a3e:	f7ff b81f 	b.w	80a3a80 <system_ctrl_set_app_request_handler>
 80a4a42:	bf00      	nop
 80a4a44:	080a48fd 	.word	0x080a48fd
 80a4a48:	40024000 	.word	0x40024000
 80a4a4c:	9a271c1e 	.word	0x9a271c1e
 80a4a50:	20000478 	.word	0x20000478
 80a4a54:	00000000 	.word	0x00000000
 80a4a58:	080a49c1 	.word	0x080a49c1

080a4a5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a4a5c:	4770      	bx	lr

080a4a5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a4a5e:	2000      	movs	r0, #0
 80a4a60:	4770      	bx	lr

080a4a62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a4a62:	b510      	push	{r4, lr}
 80a4a64:	4604      	mov	r4, r0
 80a4a66:	2110      	movs	r1, #16
 80a4a68:	f000 fea7 	bl	80a57ba <_ZdlPvj>
 80a4a6c:	4620      	mov	r0, r4
 80a4a6e:	bd10      	pop	{r4, pc}

080a4a70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a4a70:	b508      	push	{r3, lr}
      { delete this; }
 80a4a72:	f7ff fff6 	bl	80a4a62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a4a76:	bd08      	pop	{r3, pc}

080a4a78 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a4a78:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a4a7a:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a4a7c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a4a80:	6002      	str	r2, [r0, #0]
 80a4a82:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a4a84:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4a86:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a4a88:	680c      	ldr	r4, [r1, #0]
 80a4a8a:	8085      	strh	r5, [r0, #4]
 80a4a8c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4a8e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a4a90:	bd30      	pop	{r4, r5, pc}

080a4a92 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a4a92:	b510      	push	{r4, lr}
 80a4a94:	4604      	mov	r4, r0
    free((void*)msg_);
 80a4a96:	6800      	ldr	r0, [r0, #0]
 80a4a98:	f7ff f8d0 	bl	80a3c3c <free>
}
 80a4a9c:	4620      	mov	r0, r4
 80a4a9e:	bd10      	pop	{r4, pc}

080a4aa0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a4aa0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a4aa2:	68c4      	ldr	r4, [r0, #12]
 80a4aa4:	b1f4      	cbz	r4, 80a4ae4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a4aa6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a4aa8:	2b02      	cmp	r3, #2
 80a4aaa:	d103      	bne.n	80a4ab4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a4aac:	f104 000c 	add.w	r0, r4, #12
 80a4ab0:	f7ff ffef 	bl	80a4a92 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a4ab4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a4ab6:	b135      	cbz	r5, 80a4ac6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a4ab8:	4628      	mov	r0, r5
 80a4aba:	f7ff fef0 	bl	80a489e <_ZNSt14_Function_baseD1Ev>
 80a4abe:	2110      	movs	r1, #16
 80a4ac0:	4628      	mov	r0, r5
 80a4ac2:	f000 fe7a 	bl	80a57ba <_ZdlPvj>
 80a4ac6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a4ac8:	b135      	cbz	r5, 80a4ad8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a4aca:	4628      	mov	r0, r5
 80a4acc:	f7ff fee7 	bl	80a489e <_ZNSt14_Function_baseD1Ev>
 80a4ad0:	2110      	movs	r1, #16
 80a4ad2:	4628      	mov	r0, r5
 80a4ad4:	f000 fe71 	bl	80a57ba <_ZdlPvj>
 80a4ad8:	4620      	mov	r0, r4
 80a4ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4ade:	2114      	movs	r1, #20
 80a4ae0:	f000 be6b 	b.w	80a57ba <_ZdlPvj>
 80a4ae4:	bd38      	pop	{r3, r4, r5, pc}

080a4ae6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4ae6:	680b      	ldr	r3, [r1, #0]
 80a4ae8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a4aea:	684b      	ldr	r3, [r1, #4]
 80a4aec:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a4aee:	b113      	cbz	r3, 80a4af6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a4af0:	685a      	ldr	r2, [r3, #4]
 80a4af2:	3201      	adds	r2, #1
 80a4af4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4af6:	4770      	bx	lr

080a4af8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a4af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4afa:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a4afc:	4668      	mov	r0, sp
 80a4afe:	460d      	mov	r5, r1
 80a4b00:	f7ff fff1 	bl	80a4ae6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4b04:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4b06:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4b08:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a4b0a:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a4b0c:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a4b0e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a4b10:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 80a4b12:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a4b14:	f7fb fadb 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a4b18:	b135      	cbz	r5, 80a4b28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a4b1a:	1d28      	adds	r0, r5, #4
 80a4b1c:	f7fb fad7 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4b20:	2108      	movs	r1, #8
 80a4b22:	4628      	mov	r0, r5
 80a4b24:	f000 fe49 	bl	80a57ba <_ZdlPvj>
        return p;
    }
 80a4b28:	4620      	mov	r0, r4
 80a4b2a:	b003      	add	sp, #12
 80a4b2c:	bd30      	pop	{r4, r5, pc}

080a4b2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4b2e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a4b30:	b510      	push	{r4, lr}
      if (_M_empty())
 80a4b32:	b90a      	cbnz	r2, 80a4b38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a4b34:	f000 fe45 	bl	80a57c2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4b38:	68c3      	ldr	r3, [r0, #12]
    }
 80a4b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4b3e:	4718      	bx	r3

080a4b40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a4b40:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a4b42:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a4b44:	f100 0110 	add.w	r1, r0, #16
 80a4b48:	f7ff fff1 	bl	80a4b2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a4b4c:	bd08      	pop	{r3, pc}

080a4b4e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a4b4e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a4b50:	b510      	push	{r4, lr}
      if (_M_empty())
 80a4b52:	b90a      	cbnz	r2, 80a4b58 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a4b54:	f000 fe35 	bl	80a57c2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4b58:	68c3      	ldr	r3, [r0, #12]
    }
 80a4b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4b5e:	4718      	bx	r3

080a4b60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a4b60:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a4b62:	6800      	ldr	r0, [r0, #0]
 80a4b64:	f100 0110 	add.w	r1, r0, #16
 80a4b68:	f7ff fff1 	bl	80a4b4e <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a4b6c:	bd08      	pop	{r3, pc}
	...

080a4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4b70:	b538      	push	{r3, r4, r5, lr}
 80a4b72:	2300      	movs	r3, #0
 80a4b74:	4604      	mov	r4, r0
 80a4b76:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4b78:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4b7a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4b7c:	f7fb fa8b 	bl	80a0096 <_Znwj>
 80a4b80:	b128      	cbz	r0, 80a4b8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a4b82:	2301      	movs	r3, #1
 80a4b84:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a4b88:	4b02      	ldr	r3, [pc, #8]	; (80a4b94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a4b8a:	60c5      	str	r5, [r0, #12]
 80a4b8c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4b8e:	6020      	str	r0, [r4, #0]
	}
 80a4b90:	4620      	mov	r0, r4
 80a4b92:	bd38      	pop	{r3, r4, r5, pc}
 80a4b94:	080a8fac 	.word	0x080a8fac

080a4b98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a4b98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a4b9a:	2300      	movs	r3, #0
 80a4b9c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a4b9e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a4ba0:	4604      	mov	r4, r0
 80a4ba2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a4ba4:	b12b      	cbz	r3, 80a4bb2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4ba6:	2202      	movs	r2, #2
 80a4ba8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4baa:	68eb      	ldr	r3, [r5, #12]
 80a4bac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4bae:	68ab      	ldr	r3, [r5, #8]
 80a4bb0:	60a3      	str	r3, [r4, #8]
    }
 80a4bb2:	4620      	mov	r0, r4
 80a4bb4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a4bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a4bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4bba:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
 80a4bbc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a4bbe:	4668      	mov	r0, sp
 80a4bc0:	f7ff ff5a 	bl	80a4a78 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a4bc4:	f04f 0302 	mov.w	r3, #2
 80a4bc8:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a4bcc:	2a00      	cmp	r2, #0
 80a4bce:	d103      	bne.n	80a4bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a4bd0:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a4bd4:	2900      	cmp	r1, #0
 80a4bd6:	d1f7      	bne.n	80a4bc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a4bd8:	d125      	bne.n	80a4c26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a4bda:	f104 050c 	add.w	r5, r4, #12
 80a4bde:	4669      	mov	r1, sp
 80a4be0:	4628      	mov	r0, r5
 80a4be2:	f7ff ff49 	bl	80a4a78 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4be6:	2301      	movs	r3, #1
 80a4be8:	f3bf 8f5b 	dmb	ish
 80a4bec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a4bee:	2000      	movs	r0, #0
 80a4bf0:	f3bf 8f5b 	dmb	ish
 80a4bf4:	f104 0308 	add.w	r3, r4, #8
 80a4bf8:	e853 6f00 	ldrex	r6, [r3]
 80a4bfc:	e843 0200 	strex	r2, r0, [r3]
 80a4c00:	2a00      	cmp	r2, #0
 80a4c02:	d1f9      	bne.n	80a4bf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a4c04:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4c08:	b16e      	cbz	r6, 80a4c26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a4c0a:	f7fe ff21 	bl	80a3a50 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a4c0e:	b178      	cbz	r0, 80a4c30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4c10:	4629      	mov	r1, r5
 80a4c12:	4630      	mov	r0, r6
 80a4c14:	f7ff ff8b 	bl	80a4b2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a4c18:	4630      	mov	r0, r6
 80a4c1a:	f7ff fe40 	bl	80a489e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a4c1e:	2110      	movs	r1, #16
 80a4c20:	4630      	mov	r0, r6
 80a4c22:	f000 fdca 	bl	80a57ba <_ZdlPvj>
        p_->setError(std::move(error));
 80a4c26:	4668      	mov	r0, sp
 80a4c28:	f7ff ff33 	bl	80a4a92 <_ZN8particle5ErrorD1Ev>
    }
 80a4c2c:	b009      	add	sp, #36	; 0x24
 80a4c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4c30:	4631      	mov	r1, r6
 80a4c32:	a802      	add	r0, sp, #8
 80a4c34:	f7ff ffb0 	bl	80a4b98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a4c38:	68e0      	ldr	r0, [r4, #12]
 80a4c3a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4c3e:	b108      	cbz	r0, 80a4c44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a4c40:	f002 f90c 	bl	80a6e5c <strdup>
        type_(type) {
 80a4c44:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4c46:	2010      	movs	r0, #16
 80a4c48:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a4c4c:	f7fb fa23 	bl	80a0096 <_Znwj>
 80a4c50:	4605      	mov	r5, r0
 80a4c52:	b1e8      	cbz	r0, 80a4c90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a4c54:	2700      	movs	r7, #0
 80a4c56:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4c58:	2018      	movs	r0, #24
 80a4c5a:	f7fb fa1c 	bl	80a0096 <_Znwj>
 80a4c5e:	4604      	mov	r4, r0
 80a4c60:	b188      	cbz	r0, 80a4c86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a4c62:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a4c64:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4c66:	a802      	add	r0, sp, #8
 80a4c68:	f7ff fe28 	bl	80a48bc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4c6c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a4c6e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4c70:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4c72:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4c74:	9204      	str	r2, [sp, #16]
 80a4c76:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4c78:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a4c7a:	60e3      	str	r3, [r4, #12]
 80a4c7c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a4c80:	9205      	str	r2, [sp, #20]
 80a4c82:	f7ff fef9 	bl	80a4a78 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a4c86:	4b08      	ldr	r3, [pc, #32]	; (80a4ca8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4c88:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4c8a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a4c8c:	4b07      	ldr	r3, [pc, #28]	; (80a4cac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a4c8e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a4c90:	a806      	add	r0, sp, #24
 80a4c92:	f7ff fefe 	bl	80a4a92 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a4c96:	a802      	add	r0, sp, #8
 80a4c98:	f7ff fe01 	bl	80a489e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4c9c:	2200      	movs	r2, #0
 80a4c9e:	4629      	mov	r1, r5
 80a4ca0:	4803      	ldr	r0, [pc, #12]	; (80a4cb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a4ca2:	f7fe fedd 	bl	80a3a60 <application_thread_invoke>
 80a4ca6:	e7b7      	b.n	80a4c18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a4ca8:	080a4b41 	.word	0x080a4b41
 80a4cac:	080a4dcd 	.word	0x080a4dcd
 80a4cb0:	080a52f9 	.word	0x080a52f9

080a4cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a4cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4cb8:	b08a      	sub	sp, #40	; 0x28
 80a4cba:	4605      	mov	r5, r0
 80a4cbc:	460c      	mov	r4, r1
 80a4cbe:	4617      	mov	r7, r2
 80a4cc0:	4698      	mov	r8, r3
 80a4cc2:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4cc6:	f7fe ff81 	bl	80a3bcc <spark_cloud_flag_connected>
 80a4cca:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a4ccc:	4682      	mov	sl, r0
 80a4cce:	bb38      	cbnz	r0, 80a4d20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a4cd0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a4cd4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4cd6:	a905      	add	r1, sp, #20
 80a4cd8:	4630      	mov	r0, r6
 80a4cda:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a4cde:	f7ff fecb 	bl	80a4a78 <_ZN8particle5ErrorC1EOS0_>
 80a4ce2:	2014      	movs	r0, #20
 80a4ce4:	f7fb f9d7 	bl	80a0096 <_Znwj>
 80a4ce8:	4604      	mov	r4, r0
 80a4cea:	b148      	cbz	r0, 80a4d00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a4cec:	2302      	movs	r3, #2
 80a4cee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4cf0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a4cf2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4cf6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a4cf8:	4631      	mov	r1, r6
 80a4cfa:	300c      	adds	r0, #12
 80a4cfc:	f7ff febc 	bl	80a4a78 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4d00:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a4d02:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4d04:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a4d08:	f7ff ff32 	bl	80a4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4d0c:	4630      	mov	r0, r6
 80a4d0e:	f7ff fec0 	bl	80a4a92 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a4d12:	a805      	add	r0, sp, #20
 80a4d14:	f7ff febd 	bl	80a4a92 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a4d18:	4628      	mov	r0, r5
 80a4d1a:	b00a      	add	sp, #40	; 0x28
 80a4d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a4d20:	230c      	movs	r3, #12
 80a4d22:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a4d26:	2014      	movs	r0, #20
 80a4d28:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a4d2c:	9307      	str	r3, [sp, #28]
 80a4d2e:	f7fb f9b2 	bl	80a0096 <_Znwj>
 80a4d32:	4601      	mov	r1, r0
 80a4d34:	b128      	cbz	r0, 80a4d42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a4d36:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a4d3a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4d3e:	f880 a001 	strb.w	sl, [r0, #1]
 80a4d42:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4d44:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a4d46:	f7ff ff13 	bl	80a4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a4d4a:	4b1f      	ldr	r3, [pc, #124]	; (80a4dc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a4d4c:	2008      	movs	r0, #8
 80a4d4e:	9308      	str	r3, [sp, #32]
 80a4d50:	f7fb f9a1 	bl	80a0096 <_Znwj>
 80a4d54:	4682      	mov	sl, r0
 80a4d56:	b110      	cbz	r0, 80a4d5e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a4d58:	a903      	add	r1, sp, #12
 80a4d5a:	f7ff fec4 	bl	80a4ae6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4d5e:	4642      	mov	r2, r8
 80a4d60:	4639      	mov	r1, r7
 80a4d62:	4620      	mov	r0, r4
 80a4d64:	9600      	str	r6, [sp, #0]
 80a4d66:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a4d6a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4d6e:	f7fe ff3d 	bl	80a3bec <spark_send_event>
 80a4d72:	b9b8      	cbnz	r0, 80a4da4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a4d74:	9b03      	ldr	r3, [sp, #12]
 80a4d76:	785b      	ldrb	r3, [r3, #1]
 80a4d78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a4d7c:	b993      	cbnz	r3, 80a4da4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a4d7e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a4d82:	a905      	add	r1, sp, #20
 80a4d84:	a803      	add	r0, sp, #12
 80a4d86:	9205      	str	r2, [sp, #20]
 80a4d88:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a4d8c:	f7ff ff14 	bl	80a4bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a4d90:	a805      	add	r0, sp, #20
 80a4d92:	f7ff fe7e 	bl	80a4a92 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a4d96:	a805      	add	r0, sp, #20
 80a4d98:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a4d9a:	f7ff fead 	bl	80a4af8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a4d9e:	a806      	add	r0, sp, #24
 80a4da0:	f7fb f995 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4da4:	a903      	add	r1, sp, #12
 80a4da6:	a805      	add	r0, sp, #20
 80a4da8:	f7ff fe9d 	bl	80a4ae6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4dac:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4dae:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4db0:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a4db2:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a4db4:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a4db6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a4db8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a4dba:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a4dbc:	f7fb f987 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4dc0:	a804      	add	r0, sp, #16
 80a4dc2:	f7fb f984 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a4dc6:	e7a7      	b.n	80a4d18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a4dc8:	080a4e49 	.word	0x080a4e49

080a4dcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a4dcc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4dd0:	4605      	mov	r5, r0
	switch (__op)
 80a4dd2:	d103      	bne.n	80a4ddc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a4dd4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a4dd6:	6003      	str	r3, [r0, #0]
      }
 80a4dd8:	2000      	movs	r0, #0
 80a4dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a4ddc:	2a02      	cmp	r2, #2
 80a4dde:	d010      	beq.n	80a4e02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a4de0:	2a03      	cmp	r2, #3
 80a4de2:	d1f9      	bne.n	80a4dd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a4de4:	6804      	ldr	r4, [r0, #0]
 80a4de6:	2c00      	cmp	r4, #0
 80a4de8:	d0f6      	beq.n	80a4dd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a4dea:	f104 0010 	add.w	r0, r4, #16
 80a4dee:	f7ff fe50 	bl	80a4a92 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a4df2:	4620      	mov	r0, r4
 80a4df4:	f7ff fd53 	bl	80a489e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a4df8:	2118      	movs	r1, #24
 80a4dfa:	4620      	mov	r0, r4
 80a4dfc:	f000 fcdd 	bl	80a57ba <_ZdlPvj>
 80a4e00:	e7ea      	b.n	80a4dd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4e02:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a4e04:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4e06:	f7fb f946 	bl	80a0096 <_Znwj>
 80a4e0a:	4604      	mov	r4, r0
 80a4e0c:	b150      	cbz	r0, 80a4e24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a4e0e:	4631      	mov	r1, r6
 80a4e10:	f7ff fec2 	bl	80a4b98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a4e14:	6930      	ldr	r0, [r6, #16]
 80a4e16:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4e1a:	b108      	cbz	r0, 80a4e20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a4e1c:	f002 f81e 	bl	80a6e5c <strdup>
        type_(type) {
 80a4e20:	6120      	str	r0, [r4, #16]
 80a4e22:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a4e24:	602c      	str	r4, [r5, #0]
	}
 80a4e26:	e7d7      	b.n	80a4dd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a4e28 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a4e28:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a4e2a:	2300      	movs	r3, #0
 80a4e2c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a4e2e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a4e30:	4604      	mov	r4, r0
 80a4e32:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a4e34:	b12b      	cbz	r3, 80a4e42 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4e36:	2202      	movs	r2, #2
 80a4e38:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4e3a:	68eb      	ldr	r3, [r5, #12]
 80a4e3c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4e3e:	68ab      	ldr	r3, [r5, #8]
 80a4e40:	60a3      	str	r3, [r4, #8]
    }
 80a4e42:	4620      	mov	r0, r4
 80a4e44:	bd38      	pop	{r3, r4, r5, pc}
	...

080a4e48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a4e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4e4a:	4604      	mov	r4, r0
 80a4e4c:	b089      	sub	sp, #36	; 0x24
 80a4e4e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a4e50:	a801      	add	r0, sp, #4
 80a4e52:	4611      	mov	r1, r2
 80a4e54:	f7ff fe50 	bl	80a4af8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a4e58:	b1a4      	cbz	r4, 80a4e84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a4e5a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4e5c:	b11d      	cbz	r5, 80a4e66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a4e5e:	4628      	mov	r0, r5
 80a4e60:	f001 fffc 	bl	80a6e5c <strdup>
 80a4e64:	4605      	mov	r5, r0
 80a4e66:	a801      	add	r0, sp, #4
 80a4e68:	a903      	add	r1, sp, #12
        type_(type) {
 80a4e6a:	9503      	str	r5, [sp, #12]
 80a4e6c:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a4e70:	f7ff fea2 	bl	80a4bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a4e74:	a803      	add	r0, sp, #12
 80a4e76:	f7ff fe0c 	bl	80a4a92 <_ZN8particle5ErrorD1Ev>
 80a4e7a:	a802      	add	r0, sp, #8
 80a4e7c:	f7fb f927 	bl	80a00ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a4e80:	b009      	add	sp, #36	; 0x24
 80a4e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a4e84:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a4e86:	9d01      	ldr	r5, [sp, #4]
 80a4e88:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a4e8c:	2a00      	cmp	r2, #0
 80a4e8e:	d103      	bne.n	80a4e98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a4e90:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a4e94:	2900      	cmp	r1, #0
 80a4e96:	d1f7      	bne.n	80a4e88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a4e98:	d1ef      	bne.n	80a4e7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a4e9a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4e9c:	f3bf 8f5b 	dmb	ish
 80a4ea0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a4ea2:	f3bf 8f5b 	dmb	ish
 80a4ea6:	1d2b      	adds	r3, r5, #4
 80a4ea8:	e853 6f00 	ldrex	r6, [r3]
 80a4eac:	e843 4200 	strex	r2, r4, [r3]
 80a4eb0:	2a00      	cmp	r2, #0
 80a4eb2:	d1f9      	bne.n	80a4ea8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a4eb4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4eb8:	2e00      	cmp	r6, #0
 80a4eba:	d0de      	beq.n	80a4e7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a4ebc:	4620      	mov	r0, r4
 80a4ebe:	f7fe fdc7 	bl	80a3a50 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a4ec2:	4607      	mov	r7, r0
 80a4ec4:	b160      	cbz	r0, 80a4ee0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4ec6:	4630      	mov	r0, r6
 80a4ec8:	f105 010c 	add.w	r1, r5, #12
 80a4ecc:	f7ff fe3f 	bl	80a4b4e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a4ed0:	4630      	mov	r0, r6
 80a4ed2:	f7ff fce4 	bl	80a489e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a4ed6:	2110      	movs	r1, #16
 80a4ed8:	4630      	mov	r0, r6
 80a4eda:	f000 fc6e 	bl	80a57ba <_ZdlPvj>
 80a4ede:	e7cc      	b.n	80a4e7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4ee0:	4631      	mov	r1, r6
 80a4ee2:	a803      	add	r0, sp, #12
 80a4ee4:	f7ff ffa0 	bl	80a4e28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4ee8:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4eea:	2010      	movs	r0, #16
 80a4eec:	f88d 301c 	strb.w	r3, [sp, #28]
 80a4ef0:	f7fb f8d1 	bl	80a0096 <_Znwj>
 80a4ef4:	4605      	mov	r5, r0
 80a4ef6:	b1d0      	cbz	r0, 80a4f2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a4ef8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4efa:	2014      	movs	r0, #20
 80a4efc:	f7fb f8cb 	bl	80a0096 <_Znwj>
 80a4f00:	4604      	mov	r4, r0
 80a4f02:	b178      	cbz	r0, 80a4f24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a4f04:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a4f06:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4f08:	a803      	add	r0, sp, #12
 80a4f0a:	f7ff fcd7 	bl	80a48bc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4f0e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4f10:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4f12:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4f14:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a4f16:	9205      	str	r2, [sp, #20]
 80a4f18:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4f1a:	60e3      	str	r3, [r4, #12]
 80a4f1c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a4f20:	9206      	str	r2, [sp, #24]
 80a4f22:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4f24:	4b06      	ldr	r3, [pc, #24]	; (80a4f40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4f26:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4f28:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a4f2a:	4b06      	ldr	r3, [pc, #24]	; (80a4f44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a4f2c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a4f2e:	a803      	add	r0, sp, #12
 80a4f30:	f7ff fcb5 	bl	80a489e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4f34:	2200      	movs	r2, #0
 80a4f36:	4629      	mov	r1, r5
 80a4f38:	4803      	ldr	r0, [pc, #12]	; (80a4f48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a4f3a:	f7fe fd91 	bl	80a3a60 <application_thread_invoke>
 80a4f3e:	e7c7      	b.n	80a4ed0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a4f40:	080a4b61 	.word	0x080a4b61
 80a4f44:	080a4f4d 	.word	0x080a4f4d
 80a4f48:	080a52f9 	.word	0x080a52f9

080a4f4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a4f4c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4f4e:	b570      	push	{r4, r5, r6, lr}
 80a4f50:	4604      	mov	r4, r0
	switch (__op)
 80a4f52:	d103      	bne.n	80a4f5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a4f54:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a4f56:	6003      	str	r3, [r0, #0]
      }
 80a4f58:	2000      	movs	r0, #0
 80a4f5a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a4f5c:	2a02      	cmp	r2, #2
 80a4f5e:	d00c      	beq.n	80a4f7a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a4f60:	2a03      	cmp	r2, #3
 80a4f62:	d1f9      	bne.n	80a4f58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a4f64:	6804      	ldr	r4, [r0, #0]
 80a4f66:	2c00      	cmp	r4, #0
 80a4f68:	d0f6      	beq.n	80a4f58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a4f6a:	4620      	mov	r0, r4
 80a4f6c:	f7ff fc97 	bl	80a489e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a4f70:	2114      	movs	r1, #20
 80a4f72:	4620      	mov	r0, r4
 80a4f74:	f000 fc21 	bl	80a57ba <_ZdlPvj>
 80a4f78:	e7ee      	b.n	80a4f58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4f7a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a4f7c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4f7e:	f7fb f88a 	bl	80a0096 <_Znwj>
 80a4f82:	4605      	mov	r5, r0
 80a4f84:	b120      	cbz	r0, 80a4f90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a4f86:	4631      	mov	r1, r6
 80a4f88:	f7ff ff4e 	bl	80a4e28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a4f8c:	7c33      	ldrb	r3, [r6, #16]
 80a4f8e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a4f90:	6025      	str	r5, [r4, #0]
	}
 80a4f92:	e7e1      	b.n	80a4f58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a4f94 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 80a4f94:	4770      	bx	lr

080a4f96 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4f98:	460e      	mov	r6, r1
 80a4f9a:	2400      	movs	r4, #0
 80a4f9c:	f100 0708 	add.w	r7, r0, #8
 80a4fa0:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a4fa2:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a4fa6:	220a      	movs	r2, #10
 80a4fa8:	4630      	mov	r0, r6
 80a4faa:	f7ff fafa 	bl	80a45a2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4fae:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4fb0:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4fb2:	d101      	bne.n	80a4fb8 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4fb4:	4620      	mov	r0, r4
 80a4fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a4fb8:	2c00      	cmp	r4, #0
 80a4fba:	d0f2      	beq.n	80a4fa2 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4fbc:	212e      	movs	r1, #46	; 0x2e
 80a4fbe:	4630      	mov	r0, r6
 80a4fc0:	f7ff fad6 	bl	80a4570 <_ZN5Print5printEc>
 80a4fc4:	4404      	add	r4, r0
 80a4fc6:	e7ec      	b.n	80a4fa2 <_ZNK9IPAddress7printToER5Print+0xc>

080a4fc8 <_ZN9IPAddressD0Ev>:
 80a4fc8:	b510      	push	{r4, lr}
 80a4fca:	4604      	mov	r4, r0
 80a4fcc:	2118      	movs	r1, #24
 80a4fce:	f000 fbf4 	bl	80a57ba <_ZdlPvj>
 80a4fd2:	4620      	mov	r0, r4
 80a4fd4:	bd10      	pop	{r4, pc}
	...

080a4fd8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a4fd8:	b510      	push	{r4, lr}
 80a4fda:	4604      	mov	r4, r0
 80a4fdc:	4b04      	ldr	r3, [pc, #16]	; (80a4ff0 <_ZN9IPAddressC1Ev+0x18>)
    void clear() { memset(&address, 0, sizeof (address)); }
 80a4fde:	2211      	movs	r2, #17
 80a4fe0:	2100      	movs	r1, #0
 80a4fe2:	f840 3b04 	str.w	r3, [r0], #4
 80a4fe6:	f001 fef1 	bl	80a6dcc <memset>
}
 80a4fea:	4620      	mov	r0, r4
 80a4fec:	bd10      	pop	{r4, pc}
 80a4fee:	bf00      	nop
 80a4ff0:	080a8fc8 	.word	0x080a8fc8

080a4ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4ff4:	4603      	mov	r3, r0
 80a4ff6:	4a07      	ldr	r2, [pc, #28]	; (80a5014 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4ff8:	b510      	push	{r4, lr}
 80a4ffa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4ffe:	f101 0210 	add.w	r2, r1, #16
 80a5002:	f851 4b04 	ldr.w	r4, [r1], #4
 80a5006:	4291      	cmp	r1, r2
 80a5008:	f843 4b04 	str.w	r4, [r3], #4
 80a500c:	d1f9      	bne.n	80a5002 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a500e:	780a      	ldrb	r2, [r1, #0]
 80a5010:	701a      	strb	r2, [r3, #0]
}
 80a5012:	bd10      	pop	{r4, pc}
 80a5014:	080a8fc8 	.word	0x080a8fc8

080a5018 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a5018:	4a02      	ldr	r2, [pc, #8]	; (80a5024 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a501a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a501e:	2204      	movs	r2, #4
 80a5020:	7502      	strb	r2, [r0, #20]
}
 80a5022:	4770      	bx	lr
 80a5024:	080a8fc8 	.word	0x080a8fc8

080a5028 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a5028:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a502a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a502e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a5032:	2304      	movs	r3, #4
 80a5034:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a5038:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a503c:	6044      	str	r4, [r0, #4]
 80a503e:	7503      	strb	r3, [r0, #20]
}
 80a5040:	bd10      	pop	{r4, pc}
	...

080a5044 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a5044:	b513      	push	{r0, r1, r4, lr}
 80a5046:	4c04      	ldr	r4, [pc, #16]	; (80a5058 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a5048:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a504a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a504e:	9400      	str	r4, [sp, #0]
 80a5050:	f7ff ffea 	bl	80a5028 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a5054:	b002      	add	sp, #8
 80a5056:	bd10      	pop	{r4, pc}
 80a5058:	080a8fc8 	.word	0x080a8fc8

080a505c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a505c:	7441      	strb	r1, [r0, #17]
}
 80a505e:	4770      	bx	lr

080a5060 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a5060:	4770      	bx	lr

080a5062 <_ZN9USBSerial4readEv>:
{
 80a5062:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a5064:	2100      	movs	r1, #0
 80a5066:	7c00      	ldrb	r0, [r0, #16]
 80a5068:	f7fe fca2 	bl	80a39b0 <HAL_USB_USART_Receive_Data>
}
 80a506c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5070:	bd08      	pop	{r3, pc}

080a5072 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a5072:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a5074:	2101      	movs	r1, #1
 80a5076:	7c00      	ldrb	r0, [r0, #16]
 80a5078:	f7fe fc9a 	bl	80a39b0 <HAL_USB_USART_Receive_Data>
}
 80a507c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5080:	bd08      	pop	{r3, pc}

080a5082 <_ZN9USBSerial17availableForWriteEv>:
{
 80a5082:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a5084:	7c00      	ldrb	r0, [r0, #16]
 80a5086:	f7fe fc8b 	bl	80a39a0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a508a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a508e:	bd08      	pop	{r3, pc}

080a5090 <_ZN9USBSerial9availableEv>:
{
 80a5090:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a5092:	7c00      	ldrb	r0, [r0, #16]
 80a5094:	f7fe fc7c 	bl	80a3990 <HAL_USB_USART_Available_Data>
}
 80a5098:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a509c:	bd08      	pop	{r3, pc}

080a509e <_ZN9USBSerial5writeEh>:
{
 80a509e:	b538      	push	{r3, r4, r5, lr}
 80a50a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a50a2:	7c00      	ldrb	r0, [r0, #16]
{
 80a50a4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a50a6:	f7fe fc7b 	bl	80a39a0 <HAL_USB_USART_Available_Data_For_Write>
 80a50aa:	2800      	cmp	r0, #0
 80a50ac:	dc01      	bgt.n	80a50b2 <_ZN9USBSerial5writeEh+0x14>
 80a50ae:	7c60      	ldrb	r0, [r4, #17]
 80a50b0:	b128      	cbz	r0, 80a50be <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a50b2:	4629      	mov	r1, r5
 80a50b4:	7c20      	ldrb	r0, [r4, #16]
 80a50b6:	f7fe fc83 	bl	80a39c0 <HAL_USB_USART_Send_Data>
 80a50ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a50be:	bd38      	pop	{r3, r4, r5, pc}

080a50c0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a50c0:	7c00      	ldrb	r0, [r0, #16]
 80a50c2:	f7fe bc85 	b.w	80a39d0 <HAL_USB_USART_Flush_Data>

080a50c6 <_ZN9USBSerialD0Ev>:
 80a50c6:	b510      	push	{r4, lr}
 80a50c8:	4604      	mov	r4, r0
 80a50ca:	2114      	movs	r1, #20
 80a50cc:	f000 fb75 	bl	80a57ba <_ZdlPvj>
 80a50d0:	4620      	mov	r0, r4
 80a50d2:	bd10      	pop	{r4, pc}

080a50d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a50d4:	b510      	push	{r4, lr}
 80a50d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a50da:	4604      	mov	r4, r0
 80a50dc:	4608      	mov	r0, r1
 80a50de:	2100      	movs	r1, #0
 80a50e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a50e4:	4b04      	ldr	r3, [pc, #16]	; (80a50f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a50e6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a50e8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a50ea:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a50ec:	4611      	mov	r1, r2
  _blocking = true;
 80a50ee:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a50f0:	f7fe fc3e 	bl	80a3970 <HAL_USB_USART_Init>
}
 80a50f4:	4620      	mov	r0, r4
 80a50f6:	bd10      	pop	{r4, pc}
 80a50f8:	080a8fdc 	.word	0x080a8fdc

080a50fc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a50fc:	2200      	movs	r2, #0
 80a50fe:	7c00      	ldrb	r0, [r0, #16]
 80a5100:	f7fe bc3e 	b.w	80a3980 <HAL_USB_USART_Begin>

080a5104 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a5104:	b510      	push	{r4, lr}
 80a5106:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a5108:	2214      	movs	r2, #20
 80a510a:	2100      	movs	r1, #0
 80a510c:	f001 fe5e 	bl	80a6dcc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a5110:	4b05      	ldr	r3, [pc, #20]	; (80a5128 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a5112:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a5114:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a5116:	4b05      	ldr	r3, [pc, #20]	; (80a512c <_Z19acquireSerialBufferv+0x28>)
 80a5118:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a511a:	f240 1301 	movw	r3, #257	; 0x101
 80a511e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a5120:	2381      	movs	r3, #129	; 0x81
 80a5122:	8223      	strh	r3, [r4, #16]
}
 80a5124:	bd10      	pop	{r4, pc}
 80a5126:	bf00      	nop
 80a5128:	200004b0 	.word	0x200004b0
 80a512c:	200005b1 	.word	0x200005b1

080a5130 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a5130:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a5132:	4d0f      	ldr	r5, [pc, #60]	; (80a5170 <_Z16_fetch_usbserialv+0x40>)
{
 80a5134:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a5136:	a801      	add	r0, sp, #4
 80a5138:	f7ff ffe4 	bl	80a5104 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a513c:	7829      	ldrb	r1, [r5, #0]
 80a513e:	f3bf 8f5b 	dmb	ish
 80a5142:	f011 0401 	ands.w	r4, r1, #1
 80a5146:	d110      	bne.n	80a516a <_Z16_fetch_usbserialv+0x3a>
 80a5148:	4628      	mov	r0, r5
 80a514a:	f7fa ffaa 	bl	80a00a2 <__cxa_guard_acquire>
 80a514e:	b160      	cbz	r0, 80a516a <_Z16_fetch_usbserialv+0x3a>
 80a5150:	4621      	mov	r1, r4
 80a5152:	aa01      	add	r2, sp, #4
 80a5154:	4807      	ldr	r0, [pc, #28]	; (80a5174 <_Z16_fetch_usbserialv+0x44>)
 80a5156:	f7ff ffbd 	bl	80a50d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a515a:	4628      	mov	r0, r5
 80a515c:	f7fa ffa6 	bl	80a00ac <__cxa_guard_release>
 80a5160:	4a05      	ldr	r2, [pc, #20]	; (80a5178 <_Z16_fetch_usbserialv+0x48>)
 80a5162:	4906      	ldr	r1, [pc, #24]	; (80a517c <_Z16_fetch_usbserialv+0x4c>)
 80a5164:	4803      	ldr	r0, [pc, #12]	; (80a5174 <_Z16_fetch_usbserialv+0x44>)
 80a5166:	f000 fb23 	bl	80a57b0 <__aeabi_atexit>
	return _usbserial;
}
 80a516a:	4802      	ldr	r0, [pc, #8]	; (80a5174 <_Z16_fetch_usbserialv+0x44>)
 80a516c:	b007      	add	sp, #28
 80a516e:	bd30      	pop	{r4, r5, pc}
 80a5170:	20000480 	.word	0x20000480
 80a5174:	20000488 	.word	0x20000488
 80a5178:	20000150 	.word	0x20000150
 80a517c:	080a5061 	.word	0x080a5061

080a5180 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a5180:	b510      	push	{r4, lr}
 80a5182:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a5184:	2214      	movs	r2, #20
 80a5186:	2100      	movs	r1, #0
 80a5188:	f001 fe20 	bl	80a6dcc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a518c:	4b05      	ldr	r3, [pc, #20]	; (80a51a4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a518e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a5190:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a5192:	4b05      	ldr	r3, [pc, #20]	; (80a51a8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a5194:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a5196:	f240 1301 	movw	r3, #257	; 0x101
 80a519a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a519c:	2381      	movs	r3, #129	; 0x81
 80a519e:	8223      	strh	r3, [r4, #16]
}
 80a51a0:	bd10      	pop	{r4, pc}
 80a51a2:	bf00      	nop
 80a51a4:	20000632 	.word	0x20000632
 80a51a8:	20000733 	.word	0x20000733

080a51ac <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a51ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a51ae:	4c0f      	ldr	r4, [pc, #60]	; (80a51ec <_Z17_fetch_usbserial1v+0x40>)
{
 80a51b0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a51b2:	a801      	add	r0, sp, #4
 80a51b4:	f7ff ffe4 	bl	80a5180 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a51b8:	7823      	ldrb	r3, [r4, #0]
 80a51ba:	f3bf 8f5b 	dmb	ish
 80a51be:	07db      	lsls	r3, r3, #31
 80a51c0:	d410      	bmi.n	80a51e4 <_Z17_fetch_usbserial1v+0x38>
 80a51c2:	4620      	mov	r0, r4
 80a51c4:	f7fa ff6d 	bl	80a00a2 <__cxa_guard_acquire>
 80a51c8:	b160      	cbz	r0, 80a51e4 <_Z17_fetch_usbserial1v+0x38>
 80a51ca:	2101      	movs	r1, #1
 80a51cc:	aa01      	add	r2, sp, #4
 80a51ce:	4808      	ldr	r0, [pc, #32]	; (80a51f0 <_Z17_fetch_usbserial1v+0x44>)
 80a51d0:	f7ff ff80 	bl	80a50d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a51d4:	4620      	mov	r0, r4
 80a51d6:	f7fa ff69 	bl	80a00ac <__cxa_guard_release>
 80a51da:	4a06      	ldr	r2, [pc, #24]	; (80a51f4 <_Z17_fetch_usbserial1v+0x48>)
 80a51dc:	4906      	ldr	r1, [pc, #24]	; (80a51f8 <_Z17_fetch_usbserial1v+0x4c>)
 80a51de:	4804      	ldr	r0, [pc, #16]	; (80a51f0 <_Z17_fetch_usbserial1v+0x44>)
 80a51e0:	f000 fae6 	bl	80a57b0 <__aeabi_atexit>
  return _usbserial1;
}
 80a51e4:	4802      	ldr	r0, [pc, #8]	; (80a51f0 <_Z17_fetch_usbserial1v+0x44>)
 80a51e6:	b006      	add	sp, #24
 80a51e8:	bd10      	pop	{r4, pc}
 80a51ea:	bf00      	nop
 80a51ec:	20000484 	.word	0x20000484
 80a51f0:	2000049c 	.word	0x2000049c
 80a51f4:	20000150 	.word	0x20000150
 80a51f8:	080a5061 	.word	0x080a5061

080a51fc <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a51fc:	f7fe ba76 	b.w	80a36ec <HAL_Interrupts_Disable_All>

080a5200 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a5200:	f7fe ba6c 	b.w	80a36dc <HAL_Interrupts_Enable_All>

080a5204 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a5204:	4770      	bx	lr

080a5206 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a5206:	7441      	strb	r1, [r0, #17]
}
 80a5208:	4770      	bx	lr

080a520a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a520a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a520c:	7c00      	ldrb	r0, [r0, #16]
 80a520e:	f7fe fb1d 	bl	80a384c <hal_usart_available_data_for_write>
}
 80a5212:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a5216:	bd08      	pop	{r3, pc}

080a5218 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a5218:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a521a:	7c00      	ldrb	r0, [r0, #16]
 80a521c:	f7fe faee 	bl	80a37fc <hal_usart_available>
}
 80a5220:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a5224:	bd08      	pop	{r3, pc}

080a5226 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a5226:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a5228:	7c00      	ldrb	r0, [r0, #16]
 80a522a:	f7fe faf7 	bl	80a381c <hal_usart_peek>
}
 80a522e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5232:	bd08      	pop	{r3, pc}

080a5234 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a5234:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a5236:	7c00      	ldrb	r0, [r0, #16]
 80a5238:	f7fe fae8 	bl	80a380c <hal_usart_read>
}
 80a523c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5240:	bd08      	pop	{r3, pc}

080a5242 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a5242:	7c00      	ldrb	r0, [r0, #16]
 80a5244:	f7fe baf2 	b.w	80a382c <hal_usart_flush>

080a5248 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a5248:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a524a:	7c46      	ldrb	r6, [r0, #17]
{
 80a524c:	4604      	mov	r4, r0
 80a524e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a5250:	b12e      	cbz	r6, 80a525e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a5252:	4629      	mov	r1, r5
 80a5254:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a5256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a525a:	f7fe bac7 	b.w	80a37ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a525e:	7c00      	ldrb	r0, [r0, #16]
 80a5260:	f7fe faf4 	bl	80a384c <hal_usart_available_data_for_write>
 80a5264:	2800      	cmp	r0, #0
 80a5266:	dcf4      	bgt.n	80a5252 <_ZN11USARTSerial5writeEh+0xa>
}
 80a5268:	4630      	mov	r0, r6
 80a526a:	bd70      	pop	{r4, r5, r6, pc}

080a526c <_ZN11USARTSerialD0Ev>:
 80a526c:	b510      	push	{r4, lr}
 80a526e:	4604      	mov	r4, r0
 80a5270:	2114      	movs	r1, #20
 80a5272:	f000 faa2 	bl	80a57ba <_ZdlPvj>
 80a5276:	4620      	mov	r0, r4
 80a5278:	bd10      	pop	{r4, pc}
	...

080a527c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a527c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a5280:	b510      	push	{r4, lr}
 80a5282:	4604      	mov	r4, r0
 80a5284:	4608      	mov	r0, r1
 80a5286:	4611      	mov	r1, r2
 80a5288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a528c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a5290:	4a04      	ldr	r2, [pc, #16]	; (80a52a4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a5292:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a5294:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a5296:	2201      	movs	r2, #1
 80a5298:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a529a:	461a      	mov	r2, r3
 80a529c:	f7fe fa9e 	bl	80a37dc <hal_usart_init>
}
 80a52a0:	4620      	mov	r0, r4
 80a52a2:	bd10      	pop	{r4, pc}
 80a52a4:	080a900c 	.word	0x080a900c

080a52a8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a52a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a52aa:	4d0d      	ldr	r5, [pc, #52]	; (80a52e0 <_Z22__fetch_global_Serial1v+0x38>)
 80a52ac:	7829      	ldrb	r1, [r5, #0]
 80a52ae:	f3bf 8f5b 	dmb	ish
 80a52b2:	f011 0401 	ands.w	r4, r1, #1
 80a52b6:	d111      	bne.n	80a52dc <_Z22__fetch_global_Serial1v+0x34>
 80a52b8:	4628      	mov	r0, r5
 80a52ba:	f7fa fef2 	bl	80a00a2 <__cxa_guard_acquire>
 80a52be:	b168      	cbz	r0, 80a52dc <_Z22__fetch_global_Serial1v+0x34>
 80a52c0:	4621      	mov	r1, r4
 80a52c2:	4a08      	ldr	r2, [pc, #32]	; (80a52e4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a52c4:	4b08      	ldr	r3, [pc, #32]	; (80a52e8 <_Z22__fetch_global_Serial1v+0x40>)
 80a52c6:	4809      	ldr	r0, [pc, #36]	; (80a52ec <_Z22__fetch_global_Serial1v+0x44>)
 80a52c8:	f7ff ffd8 	bl	80a527c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a52cc:	4628      	mov	r0, r5
 80a52ce:	f7fa feed 	bl	80a00ac <__cxa_guard_release>
 80a52d2:	4a07      	ldr	r2, [pc, #28]	; (80a52f0 <_Z22__fetch_global_Serial1v+0x48>)
 80a52d4:	4907      	ldr	r1, [pc, #28]	; (80a52f4 <_Z22__fetch_global_Serial1v+0x4c>)
 80a52d6:	4805      	ldr	r0, [pc, #20]	; (80a52ec <_Z22__fetch_global_Serial1v+0x44>)
 80a52d8:	f000 fa6a 	bl	80a57b0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a52dc:	4803      	ldr	r0, [pc, #12]	; (80a52ec <_Z22__fetch_global_Serial1v+0x44>)
 80a52de:	bd38      	pop	{r3, r4, r5, pc}
 80a52e0:	200007b4 	.word	0x200007b4
 80a52e4:	200007b8 	.word	0x200007b8
 80a52e8:	2000083c 	.word	0x2000083c
 80a52ec:	200008c0 	.word	0x200008c0
 80a52f0:	20000150 	.word	0x20000150
 80a52f4:	080a5205 	.word	0x080a5205

080a52f8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a52f8:	b510      	push	{r4, lr}
      if (_M_empty())
 80a52fa:	6883      	ldr	r3, [r0, #8]
 80a52fc:	4604      	mov	r4, r0
 80a52fe:	b90b      	cbnz	r3, 80a5304 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a5300:	f000 fa5f 	bl	80a57c2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a5304:	68c3      	ldr	r3, [r0, #12]
 80a5306:	4798      	blx	r3
      if (_M_manager)
 80a5308:	68a3      	ldr	r3, [r4, #8]
 80a530a:	b11b      	cbz	r3, 80a5314 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a530c:	2203      	movs	r2, #3
 80a530e:	4621      	mov	r1, r4
 80a5310:	4620      	mov	r0, r4
 80a5312:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a5314:	4620      	mov	r0, r4
}
 80a5316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a531a:	2110      	movs	r1, #16
 80a531c:	f000 ba4d 	b.w	80a57ba <_ZdlPvj>

080a5320 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a5320:	4770      	bx	lr

080a5322 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a5322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5324:	4606      	mov	r6, r0
 80a5326:	4615      	mov	r5, r2
 80a5328:	460c      	mov	r4, r1
 80a532a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a532c:	42bc      	cmp	r4, r7
 80a532e:	d006      	beq.n	80a533e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a5330:	6833      	ldr	r3, [r6, #0]
 80a5332:	4630      	mov	r0, r6
 80a5334:	689b      	ldr	r3, [r3, #8]
 80a5336:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a533a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a533c:	e7f6      	b.n	80a532c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a533e:	4628      	mov	r0, r5
 80a5340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a5342 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a5342:	2200      	movs	r2, #0
 80a5344:	7c00      	ldrb	r0, [r0, #16]
 80a5346:	f7fe ba89 	b.w	80a385c <hal_i2c_write>

080a534a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a534a:	2100      	movs	r1, #0
 80a534c:	7c00      	ldrb	r0, [r0, #16]
 80a534e:	f7fe ba8d 	b.w	80a386c <hal_i2c_available>

080a5352 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a5352:	2100      	movs	r1, #0
 80a5354:	7c00      	ldrb	r0, [r0, #16]
 80a5356:	f7fe ba91 	b.w	80a387c <hal_i2c_read>

080a535a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a535a:	2100      	movs	r1, #0
 80a535c:	7c00      	ldrb	r0, [r0, #16]
 80a535e:	f7fe ba95 	b.w	80a388c <hal_i2c_peek>

080a5362 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a5362:	2100      	movs	r1, #0
 80a5364:	7c00      	ldrb	r0, [r0, #16]
 80a5366:	f7fe ba99 	b.w	80a389c <hal_i2c_flush>

080a536a <_ZN7TwoWireD0Ev>:
 80a536a:	b510      	push	{r4, lr}
 80a536c:	4604      	mov	r4, r0
 80a536e:	2114      	movs	r1, #20
 80a5370:	f000 fa23 	bl	80a57ba <_ZdlPvj>
 80a5374:	4620      	mov	r0, r4
 80a5376:	bd10      	pop	{r4, pc}

080a5378 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a5378:	b510      	push	{r4, lr}
 80a537a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a537e:	4604      	mov	r4, r0
 80a5380:	4608      	mov	r0, r1
 80a5382:	2100      	movs	r1, #0
 80a5384:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a5388:	4b03      	ldr	r3, [pc, #12]	; (80a5398 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a538a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a538c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a538e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a5390:	f7fe fa94 	bl	80a38bc <hal_i2c_init>
}
 80a5394:	4620      	mov	r0, r4
 80a5396:	bd10      	pop	{r4, pc}
 80a5398:	080a903c 	.word	0x080a903c

080a539c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a539c:	2200      	movs	r2, #0
 80a539e:	6840      	ldr	r0, [r0, #4]
 80a53a0:	4611      	mov	r1, r2
 80a53a2:	f7fe bba3 	b.w	80a3aec <network_ready>

080a53a6 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a53a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a53a8:	4615      	mov	r5, r2
 80a53aa:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a53ac:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a53ae:	460e      	mov	r6, r1
 80a53b0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a53b2:	2100      	movs	r1, #0
 80a53b4:	a803      	add	r0, sp, #12
 80a53b6:	f001 fd09 	bl	80a6dcc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a53ba:	4628      	mov	r0, r5
 80a53bc:	f001 fd69 	bl	80a6e92 <strlen>
 80a53c0:	2700      	movs	r7, #0
 80a53c2:	b281      	uxth	r1, r0
 80a53c4:	6873      	ldr	r3, [r6, #4]
 80a53c6:	4628      	mov	r0, r5
 80a53c8:	9700      	str	r7, [sp, #0]
 80a53ca:	aa03      	add	r2, sp, #12
 80a53cc:	f7fe fb10 	bl	80a39f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a53d0:	b130      	cbz	r0, 80a53e0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a53d2:	4639      	mov	r1, r7
 80a53d4:	4620      	mov	r0, r4
 80a53d6:	f7ff fe1f 	bl	80a5018 <_ZN9IPAddressC1Em>
    }
 80a53da:	4620      	mov	r0, r4
 80a53dc:	b009      	add	sp, #36	; 0x24
 80a53de:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a53e0:	4620      	mov	r0, r4
 80a53e2:	a903      	add	r1, sp, #12
 80a53e4:	f7ff fe06 	bl	80a4ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a53e8:	e7f7      	b.n	80a53da <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a53ea <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a53ea:	2200      	movs	r2, #0
 80a53ec:	6840      	ldr	r0, [r0, #4]
 80a53ee:	4611      	mov	r1, r2
 80a53f0:	f7fe bb9c 	b.w	80a3b2c <network_listening>

080a53f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a53f4:	2200      	movs	r2, #0
 80a53f6:	6840      	ldr	r0, [r0, #4]
 80a53f8:	4611      	mov	r1, r2
 80a53fa:	f7fe bbbf 	b.w	80a3b7c <network_get_listen_timeout>

080a53fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a53fe:	2200      	movs	r2, #0
 80a5400:	6840      	ldr	r0, [r0, #4]
 80a5402:	f7fe bbb3 	b.w	80a3b6c <network_set_listen_timeout>

080a5406 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a5406:	2200      	movs	r2, #0
 80a5408:	6840      	ldr	r0, [r0, #4]
 80a540a:	f081 0101 	eor.w	r1, r1, #1
 80a540e:	f7fe bb85 	b.w	80a3b1c <network_listen>

080a5412 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a5412:	2300      	movs	r3, #0
 80a5414:	6840      	ldr	r0, [r0, #4]
 80a5416:	461a      	mov	r2, r3
 80a5418:	4619      	mov	r1, r3
 80a541a:	f7fe bb77 	b.w	80a3b0c <network_off>

080a541e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a541e:	2200      	movs	r2, #0
 80a5420:	6840      	ldr	r0, [r0, #4]
 80a5422:	4611      	mov	r1, r2
 80a5424:	f7fe bb52 	b.w	80a3acc <network_connecting>

080a5428 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a5428:	2200      	movs	r2, #0
 80a542a:	2102      	movs	r1, #2
 80a542c:	6840      	ldr	r0, [r0, #4]
 80a542e:	f7fe bb55 	b.w	80a3adc <network_disconnect>

080a5432 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a5432:	2300      	movs	r3, #0
 80a5434:	6840      	ldr	r0, [r0, #4]
 80a5436:	461a      	mov	r2, r3
 80a5438:	f7fe bb40 	b.w	80a3abc <network_connect>

080a543c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a543c:	2204      	movs	r2, #4
 80a543e:	4b02      	ldr	r3, [pc, #8]	; (80a5448 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a5440:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a5442:	4a02      	ldr	r2, [pc, #8]	; (80a544c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a5444:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a5446:	4770      	bx	lr
 80a5448:	200008d4 	.word	0x200008d4
 80a544c:	080a9064 	.word	0x080a9064

080a5450 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a5450:	2300      	movs	r3, #0
 80a5452:	6840      	ldr	r0, [r0, #4]
 80a5454:	461a      	mov	r2, r3
 80a5456:	f7fe bb31 	b.w	80a3abc <network_connect>

080a545a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a545a:	2200      	movs	r2, #0
 80a545c:	2102      	movs	r1, #2
 80a545e:	6840      	ldr	r0, [r0, #4]
 80a5460:	f7fe bb3c 	b.w	80a3adc <network_disconnect>

080a5464 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a5464:	2200      	movs	r2, #0
 80a5466:	6840      	ldr	r0, [r0, #4]
 80a5468:	4611      	mov	r1, r2
 80a546a:	f7fe bb2f 	b.w	80a3acc <network_connecting>

080a546e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a546e:	2200      	movs	r2, #0
 80a5470:	6840      	ldr	r0, [r0, #4]
 80a5472:	4611      	mov	r1, r2
 80a5474:	f7fe bb3a 	b.w	80a3aec <network_ready>

080a5478 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a5478:	2300      	movs	r3, #0
 80a547a:	6840      	ldr	r0, [r0, #4]
 80a547c:	461a      	mov	r2, r3
 80a547e:	4619      	mov	r1, r3
 80a5480:	f7fe bb3c 	b.w	80a3afc <network_on>

080a5484 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a5484:	2300      	movs	r3, #0
 80a5486:	6840      	ldr	r0, [r0, #4]
 80a5488:	461a      	mov	r2, r3
 80a548a:	4619      	mov	r1, r3
 80a548c:	f7fe bb3e 	b.w	80a3b0c <network_off>

080a5490 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a5490:	2100      	movs	r1, #0
 80a5492:	6840      	ldr	r0, [r0, #4]
 80a5494:	f7fe bb7a 	b.w	80a3b8c <network_is_on>

080a5498 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a5498:	2100      	movs	r1, #0
 80a549a:	6840      	ldr	r0, [r0, #4]
 80a549c:	f7fe bb7e 	b.w	80a3b9c <network_is_off>

080a54a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a54a0:	2200      	movs	r2, #0
 80a54a2:	6840      	ldr	r0, [r0, #4]
 80a54a4:	f081 0101 	eor.w	r1, r1, #1
 80a54a8:	f7fe bb38 	b.w	80a3b1c <network_listen>

080a54ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a54ac:	2200      	movs	r2, #0
 80a54ae:	6840      	ldr	r0, [r0, #4]
 80a54b0:	f7fe bb5c 	b.w	80a3b6c <network_set_listen_timeout>

080a54b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a54b4:	2200      	movs	r2, #0
 80a54b6:	6840      	ldr	r0, [r0, #4]
 80a54b8:	4611      	mov	r1, r2
 80a54ba:	f7fe bb5f 	b.w	80a3b7c <network_get_listen_timeout>

080a54be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a54be:	2200      	movs	r2, #0
 80a54c0:	6840      	ldr	r0, [r0, #4]
 80a54c2:	4611      	mov	r1, r2
 80a54c4:	f7fe bb32 	b.w	80a3b2c <network_listening>

080a54c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a54c8:	b570      	push	{r4, r5, r6, lr}
 80a54ca:	4615      	mov	r5, r2
 80a54cc:	b08e      	sub	sp, #56	; 0x38
 80a54ce:	4604      	mov	r4, r0
    IPAddress addr;
 80a54d0:	a808      	add	r0, sp, #32
 80a54d2:	f7ff fd81 	bl	80a4fd8 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a54d6:	2211      	movs	r2, #17
 80a54d8:	2100      	movs	r1, #0
 80a54da:	a803      	add	r0, sp, #12
 80a54dc:	f001 fc76 	bl	80a6dcc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a54e0:	2600      	movs	r6, #0
 80a54e2:	4628      	mov	r0, r5
 80a54e4:	f001 fcd5 	bl	80a6e92 <strlen>
 80a54e8:	4b0a      	ldr	r3, [pc, #40]	; (80a5514 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a54ea:	9600      	str	r6, [sp, #0]
 80a54ec:	b281      	uxth	r1, r0
 80a54ee:	685b      	ldr	r3, [r3, #4]
 80a54f0:	4628      	mov	r0, r5
 80a54f2:	aa03      	add	r2, sp, #12
 80a54f4:	f7fe fa7c 	bl	80a39f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a54f8:	b130      	cbz	r0, 80a5508 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a54fa:	4631      	mov	r1, r6
 80a54fc:	4620      	mov	r0, r4
 80a54fe:	f7ff fd8b 	bl	80a5018 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a5502:	4620      	mov	r0, r4
 80a5504:	b00e      	add	sp, #56	; 0x38
 80a5506:	bd70      	pop	{r4, r5, r6, pc}
 80a5508:	4620      	mov	r0, r4
 80a550a:	a903      	add	r1, sp, #12
 80a550c:	f7ff fd72 	bl	80a4ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a5510:	e7f7      	b.n	80a5502 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a5512:	bf00      	nop
 80a5514:	200008d4 	.word	0x200008d4

080a5518 <_ZN5spark12NetworkClass4fromEm>:
}
 80a5518:	4a03      	ldr	r2, [pc, #12]	; (80a5528 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a551a:	4b04      	ldr	r3, [pc, #16]	; (80a552c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a551c:	2804      	cmp	r0, #4
 80a551e:	bf14      	ite	ne
 80a5520:	4610      	movne	r0, r2
 80a5522:	4618      	moveq	r0, r3
 80a5524:	4770      	bx	lr
 80a5526:	bf00      	nop
 80a5528:	200008dc 	.word	0x200008dc
 80a552c:	200008d4 	.word	0x200008d4

080a5530 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a5530:	4b02      	ldr	r3, [pc, #8]	; (80a553c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a5532:	4a03      	ldr	r2, [pc, #12]	; (80a5540 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a5534:	601a      	str	r2, [r3, #0]
 80a5536:	2200      	movs	r2, #0
 80a5538:	605a      	str	r2, [r3, #4]

} // spark
 80a553a:	4770      	bx	lr
 80a553c:	200008dc 	.word	0x200008dc
 80a5540:	080a90a0 	.word	0x080a90a0

080a5544 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a5544:	b510      	push	{r4, lr}
 80a5546:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a5548:	6880      	ldr	r0, [r0, #8]
 80a554a:	b108      	cbz	r0, 80a5550 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a554c:	f7fe f93e 	bl	80a37cc <os_mutex_recursive_destroy>
 80a5550:	4620      	mov	r0, r4
 80a5552:	bd10      	pop	{r4, pc}

080a5554 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a5554:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a5556:	b570      	push	{r4, r5, r6, lr}
 80a5558:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a555a:	d901      	bls.n	80a5560 <pinAvailable+0xc>
    return false;
 80a555c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a555e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5560:	f1a0 030d 	sub.w	r3, r0, #13
 80a5564:	2b02      	cmp	r3, #2
 80a5566:	d90b      	bls.n	80a5580 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a5568:	2801      	cmp	r0, #1
 80a556a:	d826      	bhi.n	80a55ba <pinAvailable+0x66>
 80a556c:	f000 f8f8 	bl	80a5760 <_Z19__fetch_global_Wirev>
 80a5570:	2100      	movs	r1, #0
 80a5572:	7c00      	ldrb	r0, [r0, #16]
 80a5574:	f7fe f99a 	bl	80a38ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a5578:	f080 0001 	eor.w	r0, r0, #1
 80a557c:	b2c0      	uxtb	r0, r0
 80a557e:	e7ee      	b.n	80a555e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a5580:	4e13      	ldr	r6, [pc, #76]	; (80a55d0 <pinAvailable+0x7c>)
 80a5582:	7831      	ldrb	r1, [r6, #0]
 80a5584:	f3bf 8f5b 	dmb	ish
 80a5588:	f011 0501 	ands.w	r5, r1, #1
 80a558c:	d10f      	bne.n	80a55ae <pinAvailable+0x5a>
 80a558e:	4630      	mov	r0, r6
 80a5590:	f7fa fd87 	bl	80a00a2 <__cxa_guard_acquire>
 80a5594:	b158      	cbz	r0, 80a55ae <pinAvailable+0x5a>
 80a5596:	4629      	mov	r1, r5
 80a5598:	480e      	ldr	r0, [pc, #56]	; (80a55d4 <pinAvailable+0x80>)
 80a559a:	f7fe fba7 	bl	80a3cec <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a559e:	4630      	mov	r0, r6
 80a55a0:	f7fa fd84 	bl	80a00ac <__cxa_guard_release>
 80a55a4:	4a0c      	ldr	r2, [pc, #48]	; (80a55d8 <pinAvailable+0x84>)
 80a55a6:	490d      	ldr	r1, [pc, #52]	; (80a55dc <pinAvailable+0x88>)
 80a55a8:	480a      	ldr	r0, [pc, #40]	; (80a55d4 <pinAvailable+0x80>)
 80a55aa:	f000 f901 	bl	80a57b0 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a55ae:	4b09      	ldr	r3, [pc, #36]	; (80a55d4 <pinAvailable+0x80>)
 80a55b0:	7818      	ldrb	r0, [r3, #0]
 80a55b2:	f7fe f9d5 	bl	80a3960 <hal_spi_is_enabled>
 80a55b6:	2800      	cmp	r0, #0
 80a55b8:	d1d0      	bne.n	80a555c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a55ba:	3c12      	subs	r4, #18
 80a55bc:	2c01      	cmp	r4, #1
 80a55be:	d805      	bhi.n	80a55cc <pinAvailable+0x78>
 80a55c0:	f7ff fe72 	bl	80a52a8 <_Z22__fetch_global_Serial1v>
 80a55c4:	7c00      	ldrb	r0, [r0, #16]
 80a55c6:	f7fe f939 	bl	80a383c <hal_usart_is_enabled>
 80a55ca:	e7d5      	b.n	80a5578 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a55cc:	2001      	movs	r0, #1
 80a55ce:	e7c6      	b.n	80a555e <pinAvailable+0xa>
 80a55d0:	200008e4 	.word	0x200008e4
 80a55d4:	200008e8 	.word	0x200008e8
 80a55d8:	20000150 	.word	0x20000150
 80a55dc:	080a5545 	.word	0x080a5545

080a55e0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a55e0:	2817      	cmp	r0, #23
{
 80a55e2:	b538      	push	{r3, r4, r5, lr}
 80a55e4:	4604      	mov	r4, r0
 80a55e6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a55e8:	d80a      	bhi.n	80a5600 <pinMode+0x20>
 80a55ea:	29ff      	cmp	r1, #255	; 0xff
 80a55ec:	d008      	beq.n	80a5600 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a55ee:	f7ff ffb1 	bl	80a5554 <pinAvailable>
 80a55f2:	b128      	cbz	r0, 80a5600 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a55f4:	4629      	mov	r1, r5
 80a55f6:	4620      	mov	r0, r4
}
 80a55f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a55fc:	f7fe b84e 	b.w	80a369c <HAL_Pin_Mode>
}
 80a5600:	bd38      	pop	{r3, r4, r5, pc}

080a5602 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a5602:	b538      	push	{r3, r4, r5, lr}
 80a5604:	4604      	mov	r4, r0
 80a5606:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5608:	f7fe f850 	bl	80a36ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a560c:	28ff      	cmp	r0, #255	; 0xff
 80a560e:	d010      	beq.n	80a5632 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a5610:	2806      	cmp	r0, #6
 80a5612:	d804      	bhi.n	80a561e <digitalWrite+0x1c>
 80a5614:	234d      	movs	r3, #77	; 0x4d
 80a5616:	fa23 f000 	lsr.w	r0, r3, r0
 80a561a:	07c3      	lsls	r3, r0, #31
 80a561c:	d409      	bmi.n	80a5632 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a561e:	4620      	mov	r0, r4
 80a5620:	f7ff ff98 	bl	80a5554 <pinAvailable>
 80a5624:	b128      	cbz	r0, 80a5632 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a5626:	4629      	mov	r1, r5
 80a5628:	4620      	mov	r0, r4
}
 80a562a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a562e:	f7fe b845 	b.w	80a36bc <HAL_GPIO_Write>
}
 80a5632:	bd38      	pop	{r3, r4, r5, pc}

080a5634 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a5634:	b510      	push	{r4, lr}
 80a5636:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5638:	f7fe f838 	bl	80a36ac <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a563c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a563e:	b2db      	uxtb	r3, r3
 80a5640:	2b01      	cmp	r3, #1
 80a5642:	d908      	bls.n	80a5656 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a5644:	4620      	mov	r0, r4
 80a5646:	f7ff ff85 	bl	80a5554 <pinAvailable>
 80a564a:	b120      	cbz	r0, 80a5656 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a564c:	4620      	mov	r0, r4
}
 80a564e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a5652:	f7fe b83b 	b.w	80a36cc <HAL_GPIO_Read>
}
 80a5656:	2000      	movs	r0, #0
 80a5658:	bd10      	pop	{r4, pc}

080a565a <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a565a:	b510      	push	{r4, lr}
 80a565c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a565e:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a5660:	bf9c      	itt	ls
 80a5662:	340a      	addls	r4, #10
 80a5664:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a5666:	4620      	mov	r0, r4
 80a5668:	f7ff ff74 	bl	80a5554 <pinAvailable>
 80a566c:	b150      	cbz	r0, 80a5684 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a566e:	2103      	movs	r1, #3
 80a5670:	4620      	mov	r0, r4
 80a5672:	f7fe f80b 	bl	80a368c <HAL_Validate_Pin_Function>
 80a5676:	2803      	cmp	r0, #3
 80a5678:	d104      	bne.n	80a5684 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a567a:	4620      	mov	r0, r4
}
 80a567c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a5680:	f7fe b844 	b.w	80a370c <hal_adc_read>
}
 80a5684:	2000      	movs	r0, #0
 80a5686:	bd10      	pop	{r4, pc}

080a5688 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a5688:	b538      	push	{r3, r4, r5, lr}
 80a568a:	4604      	mov	r4, r0
 80a568c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a568e:	f7ff ff61 	bl	80a5554 <pinAvailable>
 80a5692:	b1f0      	cbz	r0, 80a56d2 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a5694:	2104      	movs	r1, #4
 80a5696:	4620      	mov	r0, r4
 80a5698:	f7fd fff8 	bl	80a368c <HAL_Validate_Pin_Function>
 80a569c:	2804      	cmp	r0, #4
 80a569e:	d105      	bne.n	80a56ac <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a56a0:	4620      	mov	r0, r4
 80a56a2:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 80a56a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 80a56a8:	f7fe b828 	b.w	80a36fc <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a56ac:	2102      	movs	r1, #2
 80a56ae:	4620      	mov	r0, r4
 80a56b0:	f7fd ffec 	bl	80a368c <HAL_Validate_Pin_Function>
 80a56b4:	2802      	cmp	r0, #2
 80a56b6:	d10c      	bne.n	80a56d2 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a56b8:	4620      	mov	r0, r4
 80a56ba:	f7fd fff7 	bl	80a36ac <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a56be:	2801      	cmp	r0, #1
 80a56c0:	d001      	beq.n	80a56c6 <_Z11analogWritetm+0x3e>
 80a56c2:	2804      	cmp	r0, #4
 80a56c4:	d105      	bne.n	80a56d2 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 80a56c6:	4629      	mov	r1, r5
 80a56c8:	4620      	mov	r0, r4
}
 80a56ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 80a56ce:	f7fe b82d 	b.w	80a372c <hal_pwm_write_ext>
}
 80a56d2:	bd38      	pop	{r3, r4, r5, pc}

080a56d4 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a56d4:	f7fe b822 	b.w	80a371c <HAL_Pulse_In>

080a56d8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a56d8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a56da:	4c08      	ldr	r4, [pc, #32]	; (80a56fc <_Z21__fetch_global_EEPROMv+0x24>)
 80a56dc:	7823      	ldrb	r3, [r4, #0]
 80a56de:	f3bf 8f5b 	dmb	ish
 80a56e2:	07db      	lsls	r3, r3, #31
 80a56e4:	d408      	bmi.n	80a56f8 <_Z21__fetch_global_EEPROMv+0x20>
 80a56e6:	4620      	mov	r0, r4
 80a56e8:	f7fa fcdb 	bl	80a00a2 <__cxa_guard_acquire>
 80a56ec:	b120      	cbz	r0, 80a56f8 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a56ee:	f7fe f83d 	bl	80a376c <HAL_EEPROM_Init>
 80a56f2:	4620      	mov	r0, r4
 80a56f4:	f7fa fcda 	bl	80a00ac <__cxa_guard_release>
	return eeprom;
}
 80a56f8:	4801      	ldr	r0, [pc, #4]	; (80a5700 <_Z21__fetch_global_EEPROMv+0x28>)
 80a56fa:	bd10      	pop	{r4, pc}
 80a56fc:	200008f8 	.word	0x200008f8
 80a5700:	200008fc 	.word	0x200008fc

080a5704 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a5704:	2300      	movs	r3, #0
 80a5706:	b513      	push	{r0, r1, r4, lr}
 80a5708:	4c07      	ldr	r4, [pc, #28]	; (80a5728 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a570a:	461a      	mov	r2, r3
 80a570c:	4619      	mov	r1, r3
 80a570e:	4620      	mov	r0, r4
 80a5710:	9300      	str	r3, [sp, #0]
 80a5712:	f7ff fc97 	bl	80a5044 <_ZN9IPAddressC1Ehhhh>
 80a5716:	4620      	mov	r0, r4
 80a5718:	4a04      	ldr	r2, [pc, #16]	; (80a572c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a571a:	4905      	ldr	r1, [pc, #20]	; (80a5730 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a571c:	b002      	add	sp, #8
 80a571e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a5722:	f000 b845 	b.w	80a57b0 <__aeabi_atexit>
 80a5726:	bf00      	nop
 80a5728:	20000900 	.word	0x20000900
 80a572c:	20000150 	.word	0x20000150
 80a5730:	080a4f95 	.word	0x080a4f95

080a5734 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a5734:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a5736:	2314      	movs	r3, #20
 80a5738:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a573a:	4e08      	ldr	r6, [pc, #32]	; (80a575c <_Z17acquireWireBufferv+0x28>)
{
 80a573c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a573e:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5740:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a5742:	6085      	str	r5, [r0, #8]
 80a5744:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5746:	4628      	mov	r0, r5
 80a5748:	f000 f839 	bl	80a57be <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a574c:	4631      	mov	r1, r6
	};
 80a574e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5750:	4628      	mov	r0, r5
 80a5752:	f000 f834 	bl	80a57be <_ZnajRKSt9nothrow_t>
	};
 80a5756:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a5758:	4620      	mov	r0, r4
 80a575a:	bd70      	pop	{r4, r5, r6, pc}
 80a575c:	080a90d4 	.word	0x080a90d4

080a5760 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a5760:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5762:	4d0f      	ldr	r5, [pc, #60]	; (80a57a0 <_Z19__fetch_global_Wirev+0x40>)
{
 80a5764:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5766:	7829      	ldrb	r1, [r5, #0]
 80a5768:	f3bf 8f5b 	dmb	ish
 80a576c:	f011 0401 	ands.w	r4, r1, #1
 80a5770:	d113      	bne.n	80a579a <_Z19__fetch_global_Wirev+0x3a>
 80a5772:	4628      	mov	r0, r5
 80a5774:	f7fa fc95 	bl	80a00a2 <__cxa_guard_acquire>
 80a5778:	b178      	cbz	r0, 80a579a <_Z19__fetch_global_Wirev+0x3a>
 80a577a:	a801      	add	r0, sp, #4
 80a577c:	f7ff ffda 	bl	80a5734 <_Z17acquireWireBufferv>
 80a5780:	4621      	mov	r1, r4
 80a5782:	aa01      	add	r2, sp, #4
 80a5784:	4807      	ldr	r0, [pc, #28]	; (80a57a4 <_Z19__fetch_global_Wirev+0x44>)
 80a5786:	f7ff fdf7 	bl	80a5378 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a578a:	4628      	mov	r0, r5
 80a578c:	f7fa fc8e 	bl	80a00ac <__cxa_guard_release>
 80a5790:	4a05      	ldr	r2, [pc, #20]	; (80a57a8 <_Z19__fetch_global_Wirev+0x48>)
 80a5792:	4906      	ldr	r1, [pc, #24]	; (80a57ac <_Z19__fetch_global_Wirev+0x4c>)
 80a5794:	4803      	ldr	r0, [pc, #12]	; (80a57a4 <_Z19__fetch_global_Wirev+0x44>)
 80a5796:	f000 f80b 	bl	80a57b0 <__aeabi_atexit>
	return wire;
}
 80a579a:	4802      	ldr	r0, [pc, #8]	; (80a57a4 <_Z19__fetch_global_Wirev+0x44>)
 80a579c:	b007      	add	sp, #28
 80a579e:	bd30      	pop	{r4, r5, pc}
 80a57a0:	20000918 	.word	0x20000918
 80a57a4:	2000091c 	.word	0x2000091c
 80a57a8:	20000150 	.word	0x20000150
 80a57ac:	080a5321 	.word	0x080a5321

080a57b0 <__aeabi_atexit>:
 80a57b0:	460b      	mov	r3, r1
 80a57b2:	4601      	mov	r1, r0
 80a57b4:	4618      	mov	r0, r3
 80a57b6:	f001 b9fb 	b.w	80a6bb0 <__cxa_atexit>

080a57ba <_ZdlPvj>:
 80a57ba:	f7fa bc70 	b.w	80a009e <_ZdlPv>

080a57be <_ZnajRKSt9nothrow_t>:
 80a57be:	f7fa bc6c 	b.w	80a009a <_Znaj>

080a57c2 <_ZSt25__throw_bad_function_callv>:
 80a57c2:	b508      	push	{r3, lr}
 80a57c4:	f7fe fa6a 	bl	80a3c9c <abort>

080a57c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a57c8:	4901      	ldr	r1, [pc, #4]	; (80a57d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a57ca:	f000 b8fb 	b.w	80a59c4 <_ZNKSt9type_infoeqERKS_>
 80a57ce:	bf00      	nop
 80a57d0:	080a90f0 	.word	0x080a90f0

080a57d4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a57d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a57d6:	2400      	movs	r4, #0
 80a57d8:	2310      	movs	r3, #16
 80a57da:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a57de:	6803      	ldr	r3, [r0, #0]
 80a57e0:	4615      	mov	r5, r2
 80a57e2:	699e      	ldr	r6, [r3, #24]
 80a57e4:	e9cd 4400 	strd	r4, r4, [sp]
 80a57e8:	466b      	mov	r3, sp
 80a57ea:	6812      	ldr	r2, [r2, #0]
 80a57ec:	47b0      	blx	r6
 80a57ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a57f2:	f003 0306 	and.w	r3, r3, #6
 80a57f6:	2b06      	cmp	r3, #6
 80a57f8:	bf09      	itett	eq
 80a57fa:	2001      	moveq	r0, #1
 80a57fc:	4620      	movne	r0, r4
 80a57fe:	9b00      	ldreq	r3, [sp, #0]
 80a5800:	602b      	streq	r3, [r5, #0]
 80a5802:	b004      	add	sp, #16
 80a5804:	bd70      	pop	{r4, r5, r6, pc}

080a5806 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a5806:	9800      	ldr	r0, [sp, #0]
 80a5808:	4290      	cmp	r0, r2
 80a580a:	bf14      	ite	ne
 80a580c:	2001      	movne	r0, #1
 80a580e:	2006      	moveq	r0, #6
 80a5810:	4770      	bx	lr
	...

080a5814 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a5814:	b510      	push	{r4, lr}
 80a5816:	4604      	mov	r4, r0
 80a5818:	4b02      	ldr	r3, [pc, #8]	; (80a5824 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a581a:	6003      	str	r3, [r0, #0]
 80a581c:	f000 f8cf 	bl	80a59be <_ZNSt9type_infoD1Ev>
 80a5820:	4620      	mov	r0, r4
 80a5822:	bd10      	pop	{r4, pc}
 80a5824:	080a9130 	.word	0x080a9130

080a5828 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a5828:	b510      	push	{r4, lr}
 80a582a:	4604      	mov	r4, r0
 80a582c:	f7ff fff2 	bl	80a5814 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a5830:	4620      	mov	r0, r4
 80a5832:	2108      	movs	r1, #8
 80a5834:	f7ff ffc1 	bl	80a57ba <_ZdlPvj>
 80a5838:	4620      	mov	r0, r4
 80a583a:	bd10      	pop	{r4, pc}

080a583c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5840:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a5844:	461f      	mov	r7, r3
 80a5846:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a584a:	4598      	cmp	r8, r3
 80a584c:	4606      	mov	r6, r0
 80a584e:	4615      	mov	r5, r2
 80a5850:	d107      	bne.n	80a5862 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a5852:	9907      	ldr	r1, [sp, #28]
 80a5854:	f000 f8b6 	bl	80a59c4 <_ZNKSt9type_infoeqERKS_>
 80a5858:	b118      	cbz	r0, 80a5862 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a585a:	7165      	strb	r5, [r4, #5]
 80a585c:	2000      	movs	r0, #0
 80a585e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5862:	4639      	mov	r1, r7
 80a5864:	4630      	mov	r0, r6
 80a5866:	f000 f8ad 	bl	80a59c4 <_ZNKSt9type_infoeqERKS_>
 80a586a:	2800      	cmp	r0, #0
 80a586c:	d0f6      	beq.n	80a585c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a586e:	2301      	movs	r3, #1
 80a5870:	f8c4 8000 	str.w	r8, [r4]
 80a5874:	7125      	strb	r5, [r4, #4]
 80a5876:	71a3      	strb	r3, [r4, #6]
 80a5878:	e7f0      	b.n	80a585c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a587a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a587a:	b538      	push	{r3, r4, r5, lr}
 80a587c:	4615      	mov	r5, r2
 80a587e:	461c      	mov	r4, r3
 80a5880:	f000 f8a0 	bl	80a59c4 <_ZNKSt9type_infoeqERKS_>
 80a5884:	b120      	cbz	r0, 80a5890 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a5886:	2308      	movs	r3, #8
 80a5888:	60e3      	str	r3, [r4, #12]
 80a588a:	2306      	movs	r3, #6
 80a588c:	6025      	str	r5, [r4, #0]
 80a588e:	7123      	strb	r3, [r4, #4]
 80a5890:	bd38      	pop	{r3, r4, r5, pc}

080a5892 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a5892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5896:	4605      	mov	r5, r0
 80a5898:	460c      	mov	r4, r1
 80a589a:	4616      	mov	r6, r2
 80a589c:	461f      	mov	r7, r3
 80a589e:	f000 f891 	bl	80a59c4 <_ZNKSt9type_infoeqERKS_>
 80a58a2:	b948      	cbnz	r0, 80a58b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a58a4:	2f03      	cmp	r7, #3
 80a58a6:	d807      	bhi.n	80a58b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a58a8:	6823      	ldr	r3, [r4, #0]
 80a58aa:	4632      	mov	r2, r6
 80a58ac:	4629      	mov	r1, r5
 80a58ae:	4620      	mov	r0, r4
 80a58b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a58b4:	695b      	ldr	r3, [r3, #20]
 80a58b6:	4718      	bx	r3
 80a58b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a58bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a58bc:	b510      	push	{r4, lr}
 80a58be:	4604      	mov	r4, r0
 80a58c0:	4b02      	ldr	r3, [pc, #8]	; (80a58cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a58c2:	6003      	str	r3, [r0, #0]
 80a58c4:	f7ff ffa6 	bl	80a5814 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a58c8:	4620      	mov	r0, r4
 80a58ca:	bd10      	pop	{r4, pc}
 80a58cc:	080a9190 	.word	0x080a9190

080a58d0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a58d0:	b510      	push	{r4, lr}
 80a58d2:	4604      	mov	r4, r0
 80a58d4:	f7ff fff2 	bl	80a58bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a58d8:	4620      	mov	r0, r4
 80a58da:	210c      	movs	r1, #12
 80a58dc:	f7ff ff6d 	bl	80a57ba <_ZdlPvj>
 80a58e0:	4620      	mov	r0, r4
 80a58e2:	bd10      	pop	{r4, pc}

080a58e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a58e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a58e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a58ec:	4606      	mov	r6, r0
 80a58ee:	4590      	cmp	r8, r2
 80a58f0:	460f      	mov	r7, r1
 80a58f2:	4615      	mov	r5, r2
 80a58f4:	461c      	mov	r4, r3
 80a58f6:	d00b      	beq.n	80a5910 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a58f8:	68b0      	ldr	r0, [r6, #8]
 80a58fa:	462a      	mov	r2, r5
 80a58fc:	6803      	ldr	r3, [r0, #0]
 80a58fe:	f8cd 8018 	str.w	r8, [sp, #24]
 80a5902:	6a1e      	ldr	r6, [r3, #32]
 80a5904:	4639      	mov	r1, r7
 80a5906:	4623      	mov	r3, r4
 80a5908:	46b4      	mov	ip, r6
 80a590a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a590e:	4760      	bx	ip
 80a5910:	4619      	mov	r1, r3
 80a5912:	f000 f857 	bl	80a59c4 <_ZNKSt9type_infoeqERKS_>
 80a5916:	2800      	cmp	r0, #0
 80a5918:	d0ee      	beq.n	80a58f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a591a:	2006      	movs	r0, #6
 80a591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5920 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a5920:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5924:	460d      	mov	r5, r1
 80a5926:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a592a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a592e:	4619      	mov	r1, r3
 80a5930:	4681      	mov	r9, r0
 80a5932:	4617      	mov	r7, r2
 80a5934:	4698      	mov	r8, r3
 80a5936:	f000 f845 	bl	80a59c4 <_ZNKSt9type_infoeqERKS_>
 80a593a:	b190      	cbz	r0, 80a5962 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a593c:	2d00      	cmp	r5, #0
 80a593e:	6034      	str	r4, [r6, #0]
 80a5940:	7137      	strb	r7, [r6, #4]
 80a5942:	db09      	blt.n	80a5958 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a5944:	442c      	add	r4, r5
 80a5946:	45a2      	cmp	sl, r4
 80a5948:	bf0c      	ite	eq
 80a594a:	2406      	moveq	r4, #6
 80a594c:	2401      	movne	r4, #1
 80a594e:	71b4      	strb	r4, [r6, #6]
 80a5950:	2000      	movs	r0, #0
 80a5952:	b001      	add	sp, #4
 80a5954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5958:	3502      	adds	r5, #2
 80a595a:	d1f9      	bne.n	80a5950 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a595c:	2301      	movs	r3, #1
 80a595e:	71b3      	strb	r3, [r6, #6]
 80a5960:	e7f6      	b.n	80a5950 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5962:	4554      	cmp	r4, sl
 80a5964:	d106      	bne.n	80a5974 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a5966:	4659      	mov	r1, fp
 80a5968:	4648      	mov	r0, r9
 80a596a:	f000 f82b 	bl	80a59c4 <_ZNKSt9type_infoeqERKS_>
 80a596e:	b108      	cbz	r0, 80a5974 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a5970:	7177      	strb	r7, [r6, #5]
 80a5972:	e7ed      	b.n	80a5950 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5974:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a5978:	463a      	mov	r2, r7
 80a597a:	6803      	ldr	r3, [r0, #0]
 80a597c:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a5980:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a5984:	69dc      	ldr	r4, [r3, #28]
 80a5986:	4629      	mov	r1, r5
 80a5988:	4643      	mov	r3, r8
 80a598a:	46a4      	mov	ip, r4
 80a598c:	b001      	add	sp, #4
 80a598e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5992:	4760      	bx	ip

080a5994 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a5994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5998:	4607      	mov	r7, r0
 80a599a:	460c      	mov	r4, r1
 80a599c:	4615      	mov	r5, r2
 80a599e:	461e      	mov	r6, r3
 80a59a0:	f7ff ff6b 	bl	80a587a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a59a4:	b948      	cbnz	r0, 80a59ba <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a59a6:	68b8      	ldr	r0, [r7, #8]
 80a59a8:	462a      	mov	r2, r5
 80a59aa:	6803      	ldr	r3, [r0, #0]
 80a59ac:	4621      	mov	r1, r4
 80a59ae:	699f      	ldr	r7, [r3, #24]
 80a59b0:	4633      	mov	r3, r6
 80a59b2:	46bc      	mov	ip, r7
 80a59b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a59b8:	4760      	bx	ip
 80a59ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a59be <_ZNSt9type_infoD1Ev>:
 80a59be:	4770      	bx	lr

080a59c0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a59c0:	2000      	movs	r0, #0
 80a59c2:	4770      	bx	lr

080a59c4 <_ZNKSt9type_infoeqERKS_>:
 80a59c4:	4281      	cmp	r1, r0
 80a59c6:	b508      	push	{r3, lr}
 80a59c8:	d00e      	beq.n	80a59e8 <_ZNKSt9type_infoeqERKS_+0x24>
 80a59ca:	6840      	ldr	r0, [r0, #4]
 80a59cc:	7803      	ldrb	r3, [r0, #0]
 80a59ce:	2b2a      	cmp	r3, #42	; 0x2a
 80a59d0:	d00c      	beq.n	80a59ec <_ZNKSt9type_infoeqERKS_+0x28>
 80a59d2:	6849      	ldr	r1, [r1, #4]
 80a59d4:	780b      	ldrb	r3, [r1, #0]
 80a59d6:	2b2a      	cmp	r3, #42	; 0x2a
 80a59d8:	bf08      	it	eq
 80a59da:	3101      	addeq	r1, #1
 80a59dc:	f001 fa2c 	bl	80a6e38 <strcmp>
 80a59e0:	fab0 f080 	clz	r0, r0
 80a59e4:	0940      	lsrs	r0, r0, #5
 80a59e6:	bd08      	pop	{r3, pc}
 80a59e8:	2001      	movs	r0, #1
 80a59ea:	e7fc      	b.n	80a59e6 <_ZNKSt9type_infoeqERKS_+0x22>
 80a59ec:	2000      	movs	r0, #0
 80a59ee:	e7fa      	b.n	80a59e6 <_ZNKSt9type_infoeqERKS_+0x22>

080a59f0 <__aeabi_drsub>:
 80a59f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a59f4:	e002      	b.n	80a59fc <__adddf3>
 80a59f6:	bf00      	nop

080a59f8 <__aeabi_dsub>:
 80a59f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a59fc <__adddf3>:
 80a59fc:	b530      	push	{r4, r5, lr}
 80a59fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a5a02:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a5a06:	ea94 0f05 	teq	r4, r5
 80a5a0a:	bf08      	it	eq
 80a5a0c:	ea90 0f02 	teqeq	r0, r2
 80a5a10:	bf1f      	itttt	ne
 80a5a12:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a5a16:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a5a1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a5a1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5a22:	f000 80e2 	beq.w	80a5bea <__adddf3+0x1ee>
 80a5a26:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a5a2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a5a2e:	bfb8      	it	lt
 80a5a30:	426d      	neglt	r5, r5
 80a5a32:	dd0c      	ble.n	80a5a4e <__adddf3+0x52>
 80a5a34:	442c      	add	r4, r5
 80a5a36:	ea80 0202 	eor.w	r2, r0, r2
 80a5a3a:	ea81 0303 	eor.w	r3, r1, r3
 80a5a3e:	ea82 0000 	eor.w	r0, r2, r0
 80a5a42:	ea83 0101 	eor.w	r1, r3, r1
 80a5a46:	ea80 0202 	eor.w	r2, r0, r2
 80a5a4a:	ea81 0303 	eor.w	r3, r1, r3
 80a5a4e:	2d36      	cmp	r5, #54	; 0x36
 80a5a50:	bf88      	it	hi
 80a5a52:	bd30      	pophi	{r4, r5, pc}
 80a5a54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5a58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5a5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a5a60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a5a64:	d002      	beq.n	80a5a6c <__adddf3+0x70>
 80a5a66:	4240      	negs	r0, r0
 80a5a68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5a6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a5a70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5a74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a5a78:	d002      	beq.n	80a5a80 <__adddf3+0x84>
 80a5a7a:	4252      	negs	r2, r2
 80a5a7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5a80:	ea94 0f05 	teq	r4, r5
 80a5a84:	f000 80a7 	beq.w	80a5bd6 <__adddf3+0x1da>
 80a5a88:	f1a4 0401 	sub.w	r4, r4, #1
 80a5a8c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5a90:	db0d      	blt.n	80a5aae <__adddf3+0xb2>
 80a5a92:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a5a96:	fa22 f205 	lsr.w	r2, r2, r5
 80a5a9a:	1880      	adds	r0, r0, r2
 80a5a9c:	f141 0100 	adc.w	r1, r1, #0
 80a5aa0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a5aa4:	1880      	adds	r0, r0, r2
 80a5aa6:	fa43 f305 	asr.w	r3, r3, r5
 80a5aaa:	4159      	adcs	r1, r3
 80a5aac:	e00e      	b.n	80a5acc <__adddf3+0xd0>
 80a5aae:	f1a5 0520 	sub.w	r5, r5, #32
 80a5ab2:	f10e 0e20 	add.w	lr, lr, #32
 80a5ab6:	2a01      	cmp	r2, #1
 80a5ab8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a5abc:	bf28      	it	cs
 80a5abe:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a5ac2:	fa43 f305 	asr.w	r3, r3, r5
 80a5ac6:	18c0      	adds	r0, r0, r3
 80a5ac8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a5acc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5ad0:	d507      	bpl.n	80a5ae2 <__adddf3+0xe6>
 80a5ad2:	f04f 0e00 	mov.w	lr, #0
 80a5ad6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a5ada:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a5ade:	eb6e 0101 	sbc.w	r1, lr, r1
 80a5ae2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a5ae6:	d31b      	bcc.n	80a5b20 <__adddf3+0x124>
 80a5ae8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5aec:	d30c      	bcc.n	80a5b08 <__adddf3+0x10c>
 80a5aee:	0849      	lsrs	r1, r1, #1
 80a5af0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a5af4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a5af8:	f104 0401 	add.w	r4, r4, #1
 80a5afc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5b00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5b04:	f080 809a 	bcs.w	80a5c3c <__adddf3+0x240>
 80a5b08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5b0c:	bf08      	it	eq
 80a5b0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5b12:	f150 0000 	adcs.w	r0, r0, #0
 80a5b16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5b1a:	ea41 0105 	orr.w	r1, r1, r5
 80a5b1e:	bd30      	pop	{r4, r5, pc}
 80a5b20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5b24:	4140      	adcs	r0, r0
 80a5b26:	eb41 0101 	adc.w	r1, r1, r1
 80a5b2a:	3c01      	subs	r4, #1
 80a5b2c:	bf28      	it	cs
 80a5b2e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a5b32:	d2e9      	bcs.n	80a5b08 <__adddf3+0x10c>
 80a5b34:	f091 0f00 	teq	r1, #0
 80a5b38:	bf04      	itt	eq
 80a5b3a:	4601      	moveq	r1, r0
 80a5b3c:	2000      	moveq	r0, #0
 80a5b3e:	fab1 f381 	clz	r3, r1
 80a5b42:	bf08      	it	eq
 80a5b44:	3320      	addeq	r3, #32
 80a5b46:	f1a3 030b 	sub.w	r3, r3, #11
 80a5b4a:	f1b3 0220 	subs.w	r2, r3, #32
 80a5b4e:	da0c      	bge.n	80a5b6a <__adddf3+0x16e>
 80a5b50:	320c      	adds	r2, #12
 80a5b52:	dd08      	ble.n	80a5b66 <__adddf3+0x16a>
 80a5b54:	f102 0c14 	add.w	ip, r2, #20
 80a5b58:	f1c2 020c 	rsb	r2, r2, #12
 80a5b5c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a5b60:	fa21 f102 	lsr.w	r1, r1, r2
 80a5b64:	e00c      	b.n	80a5b80 <__adddf3+0x184>
 80a5b66:	f102 0214 	add.w	r2, r2, #20
 80a5b6a:	bfd8      	it	le
 80a5b6c:	f1c2 0c20 	rsble	ip, r2, #32
 80a5b70:	fa01 f102 	lsl.w	r1, r1, r2
 80a5b74:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5b78:	bfdc      	itt	le
 80a5b7a:	ea41 010c 	orrle.w	r1, r1, ip
 80a5b7e:	4090      	lslle	r0, r2
 80a5b80:	1ae4      	subs	r4, r4, r3
 80a5b82:	bfa2      	ittt	ge
 80a5b84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a5b88:	4329      	orrge	r1, r5
 80a5b8a:	bd30      	popge	{r4, r5, pc}
 80a5b8c:	ea6f 0404 	mvn.w	r4, r4
 80a5b90:	3c1f      	subs	r4, #31
 80a5b92:	da1c      	bge.n	80a5bce <__adddf3+0x1d2>
 80a5b94:	340c      	adds	r4, #12
 80a5b96:	dc0e      	bgt.n	80a5bb6 <__adddf3+0x1ba>
 80a5b98:	f104 0414 	add.w	r4, r4, #20
 80a5b9c:	f1c4 0220 	rsb	r2, r4, #32
 80a5ba0:	fa20 f004 	lsr.w	r0, r0, r4
 80a5ba4:	fa01 f302 	lsl.w	r3, r1, r2
 80a5ba8:	ea40 0003 	orr.w	r0, r0, r3
 80a5bac:	fa21 f304 	lsr.w	r3, r1, r4
 80a5bb0:	ea45 0103 	orr.w	r1, r5, r3
 80a5bb4:	bd30      	pop	{r4, r5, pc}
 80a5bb6:	f1c4 040c 	rsb	r4, r4, #12
 80a5bba:	f1c4 0220 	rsb	r2, r4, #32
 80a5bbe:	fa20 f002 	lsr.w	r0, r0, r2
 80a5bc2:	fa01 f304 	lsl.w	r3, r1, r4
 80a5bc6:	ea40 0003 	orr.w	r0, r0, r3
 80a5bca:	4629      	mov	r1, r5
 80a5bcc:	bd30      	pop	{r4, r5, pc}
 80a5bce:	fa21 f004 	lsr.w	r0, r1, r4
 80a5bd2:	4629      	mov	r1, r5
 80a5bd4:	bd30      	pop	{r4, r5, pc}
 80a5bd6:	f094 0f00 	teq	r4, #0
 80a5bda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a5bde:	bf06      	itte	eq
 80a5be0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a5be4:	3401      	addeq	r4, #1
 80a5be6:	3d01      	subne	r5, #1
 80a5be8:	e74e      	b.n	80a5a88 <__adddf3+0x8c>
 80a5bea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5bee:	bf18      	it	ne
 80a5bf0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5bf4:	d029      	beq.n	80a5c4a <__adddf3+0x24e>
 80a5bf6:	ea94 0f05 	teq	r4, r5
 80a5bfa:	bf08      	it	eq
 80a5bfc:	ea90 0f02 	teqeq	r0, r2
 80a5c00:	d005      	beq.n	80a5c0e <__adddf3+0x212>
 80a5c02:	ea54 0c00 	orrs.w	ip, r4, r0
 80a5c06:	bf04      	itt	eq
 80a5c08:	4619      	moveq	r1, r3
 80a5c0a:	4610      	moveq	r0, r2
 80a5c0c:	bd30      	pop	{r4, r5, pc}
 80a5c0e:	ea91 0f03 	teq	r1, r3
 80a5c12:	bf1e      	ittt	ne
 80a5c14:	2100      	movne	r1, #0
 80a5c16:	2000      	movne	r0, #0
 80a5c18:	bd30      	popne	{r4, r5, pc}
 80a5c1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a5c1e:	d105      	bne.n	80a5c2c <__adddf3+0x230>
 80a5c20:	0040      	lsls	r0, r0, #1
 80a5c22:	4149      	adcs	r1, r1
 80a5c24:	bf28      	it	cs
 80a5c26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a5c2a:	bd30      	pop	{r4, r5, pc}
 80a5c2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a5c30:	bf3c      	itt	cc
 80a5c32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a5c36:	bd30      	popcc	{r4, r5, pc}
 80a5c38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5c3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a5c40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5c44:	f04f 0000 	mov.w	r0, #0
 80a5c48:	bd30      	pop	{r4, r5, pc}
 80a5c4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5c4e:	bf1a      	itte	ne
 80a5c50:	4619      	movne	r1, r3
 80a5c52:	4610      	movne	r0, r2
 80a5c54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a5c58:	bf1c      	itt	ne
 80a5c5a:	460b      	movne	r3, r1
 80a5c5c:	4602      	movne	r2, r0
 80a5c5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5c62:	bf06      	itte	eq
 80a5c64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5c68:	ea91 0f03 	teqeq	r1, r3
 80a5c6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5c70:	bd30      	pop	{r4, r5, pc}
 80a5c72:	bf00      	nop

080a5c74 <__aeabi_ui2d>:
 80a5c74:	f090 0f00 	teq	r0, #0
 80a5c78:	bf04      	itt	eq
 80a5c7a:	2100      	moveq	r1, #0
 80a5c7c:	4770      	bxeq	lr
 80a5c7e:	b530      	push	{r4, r5, lr}
 80a5c80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5c84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5c88:	f04f 0500 	mov.w	r5, #0
 80a5c8c:	f04f 0100 	mov.w	r1, #0
 80a5c90:	e750      	b.n	80a5b34 <__adddf3+0x138>
 80a5c92:	bf00      	nop

080a5c94 <__aeabi_i2d>:
 80a5c94:	f090 0f00 	teq	r0, #0
 80a5c98:	bf04      	itt	eq
 80a5c9a:	2100      	moveq	r1, #0
 80a5c9c:	4770      	bxeq	lr
 80a5c9e:	b530      	push	{r4, r5, lr}
 80a5ca0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5ca4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5ca8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5cac:	bf48      	it	mi
 80a5cae:	4240      	negmi	r0, r0
 80a5cb0:	f04f 0100 	mov.w	r1, #0
 80a5cb4:	e73e      	b.n	80a5b34 <__adddf3+0x138>
 80a5cb6:	bf00      	nop

080a5cb8 <__aeabi_f2d>:
 80a5cb8:	0042      	lsls	r2, r0, #1
 80a5cba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a5cbe:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5cc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a5cc6:	bf1f      	itttt	ne
 80a5cc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5ccc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5cd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a5cd4:	4770      	bxne	lr
 80a5cd6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a5cda:	bf08      	it	eq
 80a5cdc:	4770      	bxeq	lr
 80a5cde:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a5ce2:	bf04      	itt	eq
 80a5ce4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a5ce8:	4770      	bxeq	lr
 80a5cea:	b530      	push	{r4, r5, lr}
 80a5cec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5cf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5cf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5cf8:	e71c      	b.n	80a5b34 <__adddf3+0x138>
 80a5cfa:	bf00      	nop

080a5cfc <__aeabi_ul2d>:
 80a5cfc:	ea50 0201 	orrs.w	r2, r0, r1
 80a5d00:	bf08      	it	eq
 80a5d02:	4770      	bxeq	lr
 80a5d04:	b530      	push	{r4, r5, lr}
 80a5d06:	f04f 0500 	mov.w	r5, #0
 80a5d0a:	e00a      	b.n	80a5d22 <__aeabi_l2d+0x16>

080a5d0c <__aeabi_l2d>:
 80a5d0c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5d10:	bf08      	it	eq
 80a5d12:	4770      	bxeq	lr
 80a5d14:	b530      	push	{r4, r5, lr}
 80a5d16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a5d1a:	d502      	bpl.n	80a5d22 <__aeabi_l2d+0x16>
 80a5d1c:	4240      	negs	r0, r0
 80a5d1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5d22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5d26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5d2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a5d2e:	f43f aed8 	beq.w	80a5ae2 <__adddf3+0xe6>
 80a5d32:	f04f 0203 	mov.w	r2, #3
 80a5d36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5d3a:	bf18      	it	ne
 80a5d3c:	3203      	addne	r2, #3
 80a5d3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5d42:	bf18      	it	ne
 80a5d44:	3203      	addne	r2, #3
 80a5d46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a5d4a:	f1c2 0320 	rsb	r3, r2, #32
 80a5d4e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a5d52:	fa20 f002 	lsr.w	r0, r0, r2
 80a5d56:	fa01 fe03 	lsl.w	lr, r1, r3
 80a5d5a:	ea40 000e 	orr.w	r0, r0, lr
 80a5d5e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5d62:	4414      	add	r4, r2
 80a5d64:	e6bd      	b.n	80a5ae2 <__adddf3+0xe6>
 80a5d66:	bf00      	nop

080a5d68 <__aeabi_dmul>:
 80a5d68:	b570      	push	{r4, r5, r6, lr}
 80a5d6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5d6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5d72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5d76:	bf1d      	ittte	ne
 80a5d78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5d7c:	ea94 0f0c 	teqne	r4, ip
 80a5d80:	ea95 0f0c 	teqne	r5, ip
 80a5d84:	f000 f8de 	bleq	80a5f44 <__aeabi_dmul+0x1dc>
 80a5d88:	442c      	add	r4, r5
 80a5d8a:	ea81 0603 	eor.w	r6, r1, r3
 80a5d8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5d92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5d96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5d9a:	bf18      	it	ne
 80a5d9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5da0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5da8:	d038      	beq.n	80a5e1c <__aeabi_dmul+0xb4>
 80a5daa:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5dae:	f04f 0500 	mov.w	r5, #0
 80a5db2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5db6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5dba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5dbe:	f04f 0600 	mov.w	r6, #0
 80a5dc2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5dc6:	f09c 0f00 	teq	ip, #0
 80a5dca:	bf18      	it	ne
 80a5dcc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5dd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5dd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5dd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5ddc:	d204      	bcs.n	80a5de8 <__aeabi_dmul+0x80>
 80a5dde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5de2:	416d      	adcs	r5, r5
 80a5de4:	eb46 0606 	adc.w	r6, r6, r6
 80a5de8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5dec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5df0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5df4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5df8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5dfc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5e00:	bf88      	it	hi
 80a5e02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5e06:	d81e      	bhi.n	80a5e46 <__aeabi_dmul+0xde>
 80a5e08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5e0c:	bf08      	it	eq
 80a5e0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5e12:	f150 0000 	adcs.w	r0, r0, #0
 80a5e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5e1a:	bd70      	pop	{r4, r5, r6, pc}
 80a5e1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5e20:	ea46 0101 	orr.w	r1, r6, r1
 80a5e24:	ea40 0002 	orr.w	r0, r0, r2
 80a5e28:	ea81 0103 	eor.w	r1, r1, r3
 80a5e2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5e30:	bfc2      	ittt	gt
 80a5e32:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5e36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5e3a:	bd70      	popgt	{r4, r5, r6, pc}
 80a5e3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5e40:	f04f 0e00 	mov.w	lr, #0
 80a5e44:	3c01      	subs	r4, #1
 80a5e46:	f300 80ab 	bgt.w	80a5fa0 <__aeabi_dmul+0x238>
 80a5e4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5e4e:	bfde      	ittt	le
 80a5e50:	2000      	movle	r0, #0
 80a5e52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5e56:	bd70      	pople	{r4, r5, r6, pc}
 80a5e58:	f1c4 0400 	rsb	r4, r4, #0
 80a5e5c:	3c20      	subs	r4, #32
 80a5e5e:	da35      	bge.n	80a5ecc <__aeabi_dmul+0x164>
 80a5e60:	340c      	adds	r4, #12
 80a5e62:	dc1b      	bgt.n	80a5e9c <__aeabi_dmul+0x134>
 80a5e64:	f104 0414 	add.w	r4, r4, #20
 80a5e68:	f1c4 0520 	rsb	r5, r4, #32
 80a5e6c:	fa00 f305 	lsl.w	r3, r0, r5
 80a5e70:	fa20 f004 	lsr.w	r0, r0, r4
 80a5e74:	fa01 f205 	lsl.w	r2, r1, r5
 80a5e78:	ea40 0002 	orr.w	r0, r0, r2
 80a5e7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5e80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5e84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5e88:	fa21 f604 	lsr.w	r6, r1, r4
 80a5e8c:	eb42 0106 	adc.w	r1, r2, r6
 80a5e90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5e94:	bf08      	it	eq
 80a5e96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5e9a:	bd70      	pop	{r4, r5, r6, pc}
 80a5e9c:	f1c4 040c 	rsb	r4, r4, #12
 80a5ea0:	f1c4 0520 	rsb	r5, r4, #32
 80a5ea4:	fa00 f304 	lsl.w	r3, r0, r4
 80a5ea8:	fa20 f005 	lsr.w	r0, r0, r5
 80a5eac:	fa01 f204 	lsl.w	r2, r1, r4
 80a5eb0:	ea40 0002 	orr.w	r0, r0, r2
 80a5eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5eb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5ebc:	f141 0100 	adc.w	r1, r1, #0
 80a5ec0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5ec4:	bf08      	it	eq
 80a5ec6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5eca:	bd70      	pop	{r4, r5, r6, pc}
 80a5ecc:	f1c4 0520 	rsb	r5, r4, #32
 80a5ed0:	fa00 f205 	lsl.w	r2, r0, r5
 80a5ed4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5ed8:	fa20 f304 	lsr.w	r3, r0, r4
 80a5edc:	fa01 f205 	lsl.w	r2, r1, r5
 80a5ee0:	ea43 0302 	orr.w	r3, r3, r2
 80a5ee4:	fa21 f004 	lsr.w	r0, r1, r4
 80a5ee8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5eec:	fa21 f204 	lsr.w	r2, r1, r4
 80a5ef0:	ea20 0002 	bic.w	r0, r0, r2
 80a5ef4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5ef8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5efc:	bf08      	it	eq
 80a5efe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5f02:	bd70      	pop	{r4, r5, r6, pc}
 80a5f04:	f094 0f00 	teq	r4, #0
 80a5f08:	d10f      	bne.n	80a5f2a <__aeabi_dmul+0x1c2>
 80a5f0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a5f0e:	0040      	lsls	r0, r0, #1
 80a5f10:	eb41 0101 	adc.w	r1, r1, r1
 80a5f14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5f18:	bf08      	it	eq
 80a5f1a:	3c01      	subeq	r4, #1
 80a5f1c:	d0f7      	beq.n	80a5f0e <__aeabi_dmul+0x1a6>
 80a5f1e:	ea41 0106 	orr.w	r1, r1, r6
 80a5f22:	f095 0f00 	teq	r5, #0
 80a5f26:	bf18      	it	ne
 80a5f28:	4770      	bxne	lr
 80a5f2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a5f2e:	0052      	lsls	r2, r2, #1
 80a5f30:	eb43 0303 	adc.w	r3, r3, r3
 80a5f34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5f38:	bf08      	it	eq
 80a5f3a:	3d01      	subeq	r5, #1
 80a5f3c:	d0f7      	beq.n	80a5f2e <__aeabi_dmul+0x1c6>
 80a5f3e:	ea43 0306 	orr.w	r3, r3, r6
 80a5f42:	4770      	bx	lr
 80a5f44:	ea94 0f0c 	teq	r4, ip
 80a5f48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5f4c:	bf18      	it	ne
 80a5f4e:	ea95 0f0c 	teqne	r5, ip
 80a5f52:	d00c      	beq.n	80a5f6e <__aeabi_dmul+0x206>
 80a5f54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5f58:	bf18      	it	ne
 80a5f5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5f5e:	d1d1      	bne.n	80a5f04 <__aeabi_dmul+0x19c>
 80a5f60:	ea81 0103 	eor.w	r1, r1, r3
 80a5f64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5f68:	f04f 0000 	mov.w	r0, #0
 80a5f6c:	bd70      	pop	{r4, r5, r6, pc}
 80a5f6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5f72:	bf06      	itte	eq
 80a5f74:	4610      	moveq	r0, r2
 80a5f76:	4619      	moveq	r1, r3
 80a5f78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5f7c:	d019      	beq.n	80a5fb2 <__aeabi_dmul+0x24a>
 80a5f7e:	ea94 0f0c 	teq	r4, ip
 80a5f82:	d102      	bne.n	80a5f8a <__aeabi_dmul+0x222>
 80a5f84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5f88:	d113      	bne.n	80a5fb2 <__aeabi_dmul+0x24a>
 80a5f8a:	ea95 0f0c 	teq	r5, ip
 80a5f8e:	d105      	bne.n	80a5f9c <__aeabi_dmul+0x234>
 80a5f90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5f94:	bf1c      	itt	ne
 80a5f96:	4610      	movne	r0, r2
 80a5f98:	4619      	movne	r1, r3
 80a5f9a:	d10a      	bne.n	80a5fb2 <__aeabi_dmul+0x24a>
 80a5f9c:	ea81 0103 	eor.w	r1, r1, r3
 80a5fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5fa4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5fa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5fac:	f04f 0000 	mov.w	r0, #0
 80a5fb0:	bd70      	pop	{r4, r5, r6, pc}
 80a5fb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5fb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5fba:	bd70      	pop	{r4, r5, r6, pc}

080a5fbc <__aeabi_ddiv>:
 80a5fbc:	b570      	push	{r4, r5, r6, lr}
 80a5fbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5fc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5fc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5fca:	bf1d      	ittte	ne
 80a5fcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5fd0:	ea94 0f0c 	teqne	r4, ip
 80a5fd4:	ea95 0f0c 	teqne	r5, ip
 80a5fd8:	f000 f8a7 	bleq	80a612a <__aeabi_ddiv+0x16e>
 80a5fdc:	eba4 0405 	sub.w	r4, r4, r5
 80a5fe0:	ea81 0e03 	eor.w	lr, r1, r3
 80a5fe4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5fe8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5fec:	f000 8088 	beq.w	80a6100 <__aeabi_ddiv+0x144>
 80a5ff0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5ff4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5ff8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5ffc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a6000:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a6004:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a6008:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a600c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a6010:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a6014:	429d      	cmp	r5, r3
 80a6016:	bf08      	it	eq
 80a6018:	4296      	cmpeq	r6, r2
 80a601a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a601e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a6022:	d202      	bcs.n	80a602a <__aeabi_ddiv+0x6e>
 80a6024:	085b      	lsrs	r3, r3, #1
 80a6026:	ea4f 0232 	mov.w	r2, r2, rrx
 80a602a:	1ab6      	subs	r6, r6, r2
 80a602c:	eb65 0503 	sbc.w	r5, r5, r3
 80a6030:	085b      	lsrs	r3, r3, #1
 80a6032:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6036:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a603a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a603e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6042:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6046:	bf22      	ittt	cs
 80a6048:	1ab6      	subcs	r6, r6, r2
 80a604a:	4675      	movcs	r5, lr
 80a604c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6050:	085b      	lsrs	r3, r3, #1
 80a6052:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6056:	ebb6 0e02 	subs.w	lr, r6, r2
 80a605a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a605e:	bf22      	ittt	cs
 80a6060:	1ab6      	subcs	r6, r6, r2
 80a6062:	4675      	movcs	r5, lr
 80a6064:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a6068:	085b      	lsrs	r3, r3, #1
 80a606a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a606e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6072:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6076:	bf22      	ittt	cs
 80a6078:	1ab6      	subcs	r6, r6, r2
 80a607a:	4675      	movcs	r5, lr
 80a607c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6080:	085b      	lsrs	r3, r3, #1
 80a6082:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6086:	ebb6 0e02 	subs.w	lr, r6, r2
 80a608a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a608e:	bf22      	ittt	cs
 80a6090:	1ab6      	subcs	r6, r6, r2
 80a6092:	4675      	movcs	r5, lr
 80a6094:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a6098:	ea55 0e06 	orrs.w	lr, r5, r6
 80a609c:	d018      	beq.n	80a60d0 <__aeabi_ddiv+0x114>
 80a609e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a60a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a60a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a60aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a60ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a60b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a60b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a60ba:	d1c0      	bne.n	80a603e <__aeabi_ddiv+0x82>
 80a60bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a60c0:	d10b      	bne.n	80a60da <__aeabi_ddiv+0x11e>
 80a60c2:	ea41 0100 	orr.w	r1, r1, r0
 80a60c6:	f04f 0000 	mov.w	r0, #0
 80a60ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a60ce:	e7b6      	b.n	80a603e <__aeabi_ddiv+0x82>
 80a60d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a60d4:	bf04      	itt	eq
 80a60d6:	4301      	orreq	r1, r0
 80a60d8:	2000      	moveq	r0, #0
 80a60da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a60de:	bf88      	it	hi
 80a60e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a60e4:	f63f aeaf 	bhi.w	80a5e46 <__aeabi_dmul+0xde>
 80a60e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a60ec:	bf04      	itt	eq
 80a60ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a60f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a60f6:	f150 0000 	adcs.w	r0, r0, #0
 80a60fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a60fe:	bd70      	pop	{r4, r5, r6, pc}
 80a6100:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a6104:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a6108:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a610c:	bfc2      	ittt	gt
 80a610e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a6112:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a6116:	bd70      	popgt	{r4, r5, r6, pc}
 80a6118:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a611c:	f04f 0e00 	mov.w	lr, #0
 80a6120:	3c01      	subs	r4, #1
 80a6122:	e690      	b.n	80a5e46 <__aeabi_dmul+0xde>
 80a6124:	ea45 0e06 	orr.w	lr, r5, r6
 80a6128:	e68d      	b.n	80a5e46 <__aeabi_dmul+0xde>
 80a612a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a612e:	ea94 0f0c 	teq	r4, ip
 80a6132:	bf08      	it	eq
 80a6134:	ea95 0f0c 	teqeq	r5, ip
 80a6138:	f43f af3b 	beq.w	80a5fb2 <__aeabi_dmul+0x24a>
 80a613c:	ea94 0f0c 	teq	r4, ip
 80a6140:	d10a      	bne.n	80a6158 <__aeabi_ddiv+0x19c>
 80a6142:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a6146:	f47f af34 	bne.w	80a5fb2 <__aeabi_dmul+0x24a>
 80a614a:	ea95 0f0c 	teq	r5, ip
 80a614e:	f47f af25 	bne.w	80a5f9c <__aeabi_dmul+0x234>
 80a6152:	4610      	mov	r0, r2
 80a6154:	4619      	mov	r1, r3
 80a6156:	e72c      	b.n	80a5fb2 <__aeabi_dmul+0x24a>
 80a6158:	ea95 0f0c 	teq	r5, ip
 80a615c:	d106      	bne.n	80a616c <__aeabi_ddiv+0x1b0>
 80a615e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a6162:	f43f aefd 	beq.w	80a5f60 <__aeabi_dmul+0x1f8>
 80a6166:	4610      	mov	r0, r2
 80a6168:	4619      	mov	r1, r3
 80a616a:	e722      	b.n	80a5fb2 <__aeabi_dmul+0x24a>
 80a616c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a6170:	bf18      	it	ne
 80a6172:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a6176:	f47f aec5 	bne.w	80a5f04 <__aeabi_dmul+0x19c>
 80a617a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a617e:	f47f af0d 	bne.w	80a5f9c <__aeabi_dmul+0x234>
 80a6182:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a6186:	f47f aeeb 	bne.w	80a5f60 <__aeabi_dmul+0x1f8>
 80a618a:	e712      	b.n	80a5fb2 <__aeabi_dmul+0x24a>

080a618c <__aeabi_d2uiz>:
 80a618c:	004a      	lsls	r2, r1, #1
 80a618e:	d211      	bcs.n	80a61b4 <__aeabi_d2uiz+0x28>
 80a6190:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a6194:	d211      	bcs.n	80a61ba <__aeabi_d2uiz+0x2e>
 80a6196:	d50d      	bpl.n	80a61b4 <__aeabi_d2uiz+0x28>
 80a6198:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a619c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a61a0:	d40e      	bmi.n	80a61c0 <__aeabi_d2uiz+0x34>
 80a61a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a61a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a61aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a61ae:	fa23 f002 	lsr.w	r0, r3, r2
 80a61b2:	4770      	bx	lr
 80a61b4:	f04f 0000 	mov.w	r0, #0
 80a61b8:	4770      	bx	lr
 80a61ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a61be:	d102      	bne.n	80a61c6 <__aeabi_d2uiz+0x3a>
 80a61c0:	f04f 30ff 	mov.w	r0, #4294967295
 80a61c4:	4770      	bx	lr
 80a61c6:	f04f 0000 	mov.w	r0, #0
 80a61ca:	4770      	bx	lr

080a61cc <__aeabi_d2f>:
 80a61cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a61d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a61d4:	bf24      	itt	cs
 80a61d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a61da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a61de:	d90d      	bls.n	80a61fc <__aeabi_d2f+0x30>
 80a61e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a61e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a61e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a61ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a61f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a61f4:	bf08      	it	eq
 80a61f6:	f020 0001 	biceq.w	r0, r0, #1
 80a61fa:	4770      	bx	lr
 80a61fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a6200:	d121      	bne.n	80a6246 <__aeabi_d2f+0x7a>
 80a6202:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a6206:	bfbc      	itt	lt
 80a6208:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a620c:	4770      	bxlt	lr
 80a620e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6212:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a6216:	f1c2 0218 	rsb	r2, r2, #24
 80a621a:	f1c2 0c20 	rsb	ip, r2, #32
 80a621e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a6222:	fa20 f002 	lsr.w	r0, r0, r2
 80a6226:	bf18      	it	ne
 80a6228:	f040 0001 	orrne.w	r0, r0, #1
 80a622c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a6230:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a6234:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a6238:	ea40 000c 	orr.w	r0, r0, ip
 80a623c:	fa23 f302 	lsr.w	r3, r3, r2
 80a6240:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a6244:	e7cc      	b.n	80a61e0 <__aeabi_d2f+0x14>
 80a6246:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a624a:	d107      	bne.n	80a625c <__aeabi_d2f+0x90>
 80a624c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a6250:	bf1e      	ittt	ne
 80a6252:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a6256:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a625a:	4770      	bxne	lr
 80a625c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a6260:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6264:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6268:	4770      	bx	lr
 80a626a:	bf00      	nop

080a626c <__aeabi_frsub>:
 80a626c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a6270:	e002      	b.n	80a6278 <__addsf3>
 80a6272:	bf00      	nop

080a6274 <__aeabi_fsub>:
 80a6274:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a6278 <__addsf3>:
 80a6278:	0042      	lsls	r2, r0, #1
 80a627a:	bf1f      	itttt	ne
 80a627c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a6280:	ea92 0f03 	teqne	r2, r3
 80a6284:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a6288:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a628c:	d06a      	beq.n	80a6364 <__addsf3+0xec>
 80a628e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a6292:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a6296:	bfc1      	itttt	gt
 80a6298:	18d2      	addgt	r2, r2, r3
 80a629a:	4041      	eorgt	r1, r0
 80a629c:	4048      	eorgt	r0, r1
 80a629e:	4041      	eorgt	r1, r0
 80a62a0:	bfb8      	it	lt
 80a62a2:	425b      	neglt	r3, r3
 80a62a4:	2b19      	cmp	r3, #25
 80a62a6:	bf88      	it	hi
 80a62a8:	4770      	bxhi	lr
 80a62aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a62ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a62b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a62b6:	bf18      	it	ne
 80a62b8:	4240      	negne	r0, r0
 80a62ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a62be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a62c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a62c6:	bf18      	it	ne
 80a62c8:	4249      	negne	r1, r1
 80a62ca:	ea92 0f03 	teq	r2, r3
 80a62ce:	d03f      	beq.n	80a6350 <__addsf3+0xd8>
 80a62d0:	f1a2 0201 	sub.w	r2, r2, #1
 80a62d4:	fa41 fc03 	asr.w	ip, r1, r3
 80a62d8:	eb10 000c 	adds.w	r0, r0, ip
 80a62dc:	f1c3 0320 	rsb	r3, r3, #32
 80a62e0:	fa01 f103 	lsl.w	r1, r1, r3
 80a62e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a62e8:	d502      	bpl.n	80a62f0 <__addsf3+0x78>
 80a62ea:	4249      	negs	r1, r1
 80a62ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a62f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a62f4:	d313      	bcc.n	80a631e <__addsf3+0xa6>
 80a62f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a62fa:	d306      	bcc.n	80a630a <__addsf3+0x92>
 80a62fc:	0840      	lsrs	r0, r0, #1
 80a62fe:	ea4f 0131 	mov.w	r1, r1, rrx
 80a6302:	f102 0201 	add.w	r2, r2, #1
 80a6306:	2afe      	cmp	r2, #254	; 0xfe
 80a6308:	d251      	bcs.n	80a63ae <__addsf3+0x136>
 80a630a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a630e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6312:	bf08      	it	eq
 80a6314:	f020 0001 	biceq.w	r0, r0, #1
 80a6318:	ea40 0003 	orr.w	r0, r0, r3
 80a631c:	4770      	bx	lr
 80a631e:	0049      	lsls	r1, r1, #1
 80a6320:	eb40 0000 	adc.w	r0, r0, r0
 80a6324:	3a01      	subs	r2, #1
 80a6326:	bf28      	it	cs
 80a6328:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a632c:	d2ed      	bcs.n	80a630a <__addsf3+0x92>
 80a632e:	fab0 fc80 	clz	ip, r0
 80a6332:	f1ac 0c08 	sub.w	ip, ip, #8
 80a6336:	ebb2 020c 	subs.w	r2, r2, ip
 80a633a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a633e:	bfaa      	itet	ge
 80a6340:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a6344:	4252      	neglt	r2, r2
 80a6346:	4318      	orrge	r0, r3
 80a6348:	bfbc      	itt	lt
 80a634a:	40d0      	lsrlt	r0, r2
 80a634c:	4318      	orrlt	r0, r3
 80a634e:	4770      	bx	lr
 80a6350:	f092 0f00 	teq	r2, #0
 80a6354:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a6358:	bf06      	itte	eq
 80a635a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a635e:	3201      	addeq	r2, #1
 80a6360:	3b01      	subne	r3, #1
 80a6362:	e7b5      	b.n	80a62d0 <__addsf3+0x58>
 80a6364:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6368:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a636c:	bf18      	it	ne
 80a636e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6372:	d021      	beq.n	80a63b8 <__addsf3+0x140>
 80a6374:	ea92 0f03 	teq	r2, r3
 80a6378:	d004      	beq.n	80a6384 <__addsf3+0x10c>
 80a637a:	f092 0f00 	teq	r2, #0
 80a637e:	bf08      	it	eq
 80a6380:	4608      	moveq	r0, r1
 80a6382:	4770      	bx	lr
 80a6384:	ea90 0f01 	teq	r0, r1
 80a6388:	bf1c      	itt	ne
 80a638a:	2000      	movne	r0, #0
 80a638c:	4770      	bxne	lr
 80a638e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a6392:	d104      	bne.n	80a639e <__addsf3+0x126>
 80a6394:	0040      	lsls	r0, r0, #1
 80a6396:	bf28      	it	cs
 80a6398:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a639c:	4770      	bx	lr
 80a639e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a63a2:	bf3c      	itt	cc
 80a63a4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a63a8:	4770      	bxcc	lr
 80a63aa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a63ae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a63b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a63b6:	4770      	bx	lr
 80a63b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a63bc:	bf16      	itet	ne
 80a63be:	4608      	movne	r0, r1
 80a63c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a63c4:	4601      	movne	r1, r0
 80a63c6:	0242      	lsls	r2, r0, #9
 80a63c8:	bf06      	itte	eq
 80a63ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a63ce:	ea90 0f01 	teqeq	r0, r1
 80a63d2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a63d6:	4770      	bx	lr

080a63d8 <__aeabi_ui2f>:
 80a63d8:	f04f 0300 	mov.w	r3, #0
 80a63dc:	e004      	b.n	80a63e8 <__aeabi_i2f+0x8>
 80a63de:	bf00      	nop

080a63e0 <__aeabi_i2f>:
 80a63e0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a63e4:	bf48      	it	mi
 80a63e6:	4240      	negmi	r0, r0
 80a63e8:	ea5f 0c00 	movs.w	ip, r0
 80a63ec:	bf08      	it	eq
 80a63ee:	4770      	bxeq	lr
 80a63f0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a63f4:	4601      	mov	r1, r0
 80a63f6:	f04f 0000 	mov.w	r0, #0
 80a63fa:	e01c      	b.n	80a6436 <__aeabi_l2f+0x2a>

080a63fc <__aeabi_ul2f>:
 80a63fc:	ea50 0201 	orrs.w	r2, r0, r1
 80a6400:	bf08      	it	eq
 80a6402:	4770      	bxeq	lr
 80a6404:	f04f 0300 	mov.w	r3, #0
 80a6408:	e00a      	b.n	80a6420 <__aeabi_l2f+0x14>
 80a640a:	bf00      	nop

080a640c <__aeabi_l2f>:
 80a640c:	ea50 0201 	orrs.w	r2, r0, r1
 80a6410:	bf08      	it	eq
 80a6412:	4770      	bxeq	lr
 80a6414:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a6418:	d502      	bpl.n	80a6420 <__aeabi_l2f+0x14>
 80a641a:	4240      	negs	r0, r0
 80a641c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6420:	ea5f 0c01 	movs.w	ip, r1
 80a6424:	bf02      	ittt	eq
 80a6426:	4684      	moveq	ip, r0
 80a6428:	4601      	moveq	r1, r0
 80a642a:	2000      	moveq	r0, #0
 80a642c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a6430:	bf08      	it	eq
 80a6432:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a6436:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a643a:	fabc f28c 	clz	r2, ip
 80a643e:	3a08      	subs	r2, #8
 80a6440:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a6444:	db10      	blt.n	80a6468 <__aeabi_l2f+0x5c>
 80a6446:	fa01 fc02 	lsl.w	ip, r1, r2
 80a644a:	4463      	add	r3, ip
 80a644c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6450:	f1c2 0220 	rsb	r2, r2, #32
 80a6454:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a6458:	fa20 f202 	lsr.w	r2, r0, r2
 80a645c:	eb43 0002 	adc.w	r0, r3, r2
 80a6460:	bf08      	it	eq
 80a6462:	f020 0001 	biceq.w	r0, r0, #1
 80a6466:	4770      	bx	lr
 80a6468:	f102 0220 	add.w	r2, r2, #32
 80a646c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6470:	f1c2 0220 	rsb	r2, r2, #32
 80a6474:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a6478:	fa21 f202 	lsr.w	r2, r1, r2
 80a647c:	eb43 0002 	adc.w	r0, r3, r2
 80a6480:	bf08      	it	eq
 80a6482:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6486:	4770      	bx	lr

080a6488 <__aeabi_fmul>:
 80a6488:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a648c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6490:	bf1e      	ittt	ne
 80a6492:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a6496:	ea92 0f0c 	teqne	r2, ip
 80a649a:	ea93 0f0c 	teqne	r3, ip
 80a649e:	d06f      	beq.n	80a6580 <__aeabi_fmul+0xf8>
 80a64a0:	441a      	add	r2, r3
 80a64a2:	ea80 0c01 	eor.w	ip, r0, r1
 80a64a6:	0240      	lsls	r0, r0, #9
 80a64a8:	bf18      	it	ne
 80a64aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a64ae:	d01e      	beq.n	80a64ee <__aeabi_fmul+0x66>
 80a64b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a64b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a64b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a64bc:	fba0 3101 	umull	r3, r1, r0, r1
 80a64c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a64c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a64c8:	bf3e      	ittt	cc
 80a64ca:	0049      	lslcc	r1, r1, #1
 80a64cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a64d0:	005b      	lslcc	r3, r3, #1
 80a64d2:	ea40 0001 	orr.w	r0, r0, r1
 80a64d6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a64da:	2afd      	cmp	r2, #253	; 0xfd
 80a64dc:	d81d      	bhi.n	80a651a <__aeabi_fmul+0x92>
 80a64de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a64e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a64e6:	bf08      	it	eq
 80a64e8:	f020 0001 	biceq.w	r0, r0, #1
 80a64ec:	4770      	bx	lr
 80a64ee:	f090 0f00 	teq	r0, #0
 80a64f2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a64f6:	bf08      	it	eq
 80a64f8:	0249      	lsleq	r1, r1, #9
 80a64fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a64fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a6502:	3a7f      	subs	r2, #127	; 0x7f
 80a6504:	bfc2      	ittt	gt
 80a6506:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a650a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a650e:	4770      	bxgt	lr
 80a6510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6514:	f04f 0300 	mov.w	r3, #0
 80a6518:	3a01      	subs	r2, #1
 80a651a:	dc5d      	bgt.n	80a65d8 <__aeabi_fmul+0x150>
 80a651c:	f112 0f19 	cmn.w	r2, #25
 80a6520:	bfdc      	itt	le
 80a6522:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a6526:	4770      	bxle	lr
 80a6528:	f1c2 0200 	rsb	r2, r2, #0
 80a652c:	0041      	lsls	r1, r0, #1
 80a652e:	fa21 f102 	lsr.w	r1, r1, r2
 80a6532:	f1c2 0220 	rsb	r2, r2, #32
 80a6536:	fa00 fc02 	lsl.w	ip, r0, r2
 80a653a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a653e:	f140 0000 	adc.w	r0, r0, #0
 80a6542:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a6546:	bf08      	it	eq
 80a6548:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a654c:	4770      	bx	lr
 80a654e:	f092 0f00 	teq	r2, #0
 80a6552:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a6556:	bf02      	ittt	eq
 80a6558:	0040      	lsleq	r0, r0, #1
 80a655a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a655e:	3a01      	subeq	r2, #1
 80a6560:	d0f9      	beq.n	80a6556 <__aeabi_fmul+0xce>
 80a6562:	ea40 000c 	orr.w	r0, r0, ip
 80a6566:	f093 0f00 	teq	r3, #0
 80a656a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a656e:	bf02      	ittt	eq
 80a6570:	0049      	lsleq	r1, r1, #1
 80a6572:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a6576:	3b01      	subeq	r3, #1
 80a6578:	d0f9      	beq.n	80a656e <__aeabi_fmul+0xe6>
 80a657a:	ea41 010c 	orr.w	r1, r1, ip
 80a657e:	e78f      	b.n	80a64a0 <__aeabi_fmul+0x18>
 80a6580:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6584:	ea92 0f0c 	teq	r2, ip
 80a6588:	bf18      	it	ne
 80a658a:	ea93 0f0c 	teqne	r3, ip
 80a658e:	d00a      	beq.n	80a65a6 <__aeabi_fmul+0x11e>
 80a6590:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6594:	bf18      	it	ne
 80a6596:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a659a:	d1d8      	bne.n	80a654e <__aeabi_fmul+0xc6>
 80a659c:	ea80 0001 	eor.w	r0, r0, r1
 80a65a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a65a4:	4770      	bx	lr
 80a65a6:	f090 0f00 	teq	r0, #0
 80a65aa:	bf17      	itett	ne
 80a65ac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a65b0:	4608      	moveq	r0, r1
 80a65b2:	f091 0f00 	teqne	r1, #0
 80a65b6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a65ba:	d014      	beq.n	80a65e6 <__aeabi_fmul+0x15e>
 80a65bc:	ea92 0f0c 	teq	r2, ip
 80a65c0:	d101      	bne.n	80a65c6 <__aeabi_fmul+0x13e>
 80a65c2:	0242      	lsls	r2, r0, #9
 80a65c4:	d10f      	bne.n	80a65e6 <__aeabi_fmul+0x15e>
 80a65c6:	ea93 0f0c 	teq	r3, ip
 80a65ca:	d103      	bne.n	80a65d4 <__aeabi_fmul+0x14c>
 80a65cc:	024b      	lsls	r3, r1, #9
 80a65ce:	bf18      	it	ne
 80a65d0:	4608      	movne	r0, r1
 80a65d2:	d108      	bne.n	80a65e6 <__aeabi_fmul+0x15e>
 80a65d4:	ea80 0001 	eor.w	r0, r0, r1
 80a65d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a65dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a65e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a65e4:	4770      	bx	lr
 80a65e6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a65ea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a65ee:	4770      	bx	lr

080a65f0 <__aeabi_fdiv>:
 80a65f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a65f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a65f8:	bf1e      	ittt	ne
 80a65fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a65fe:	ea92 0f0c 	teqne	r2, ip
 80a6602:	ea93 0f0c 	teqne	r3, ip
 80a6606:	d069      	beq.n	80a66dc <__aeabi_fdiv+0xec>
 80a6608:	eba2 0203 	sub.w	r2, r2, r3
 80a660c:	ea80 0c01 	eor.w	ip, r0, r1
 80a6610:	0249      	lsls	r1, r1, #9
 80a6612:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a6616:	d037      	beq.n	80a6688 <__aeabi_fdiv+0x98>
 80a6618:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a661c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a6620:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a6624:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6628:	428b      	cmp	r3, r1
 80a662a:	bf38      	it	cc
 80a662c:	005b      	lslcc	r3, r3, #1
 80a662e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a6632:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a6636:	428b      	cmp	r3, r1
 80a6638:	bf24      	itt	cs
 80a663a:	1a5b      	subcs	r3, r3, r1
 80a663c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6640:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a6644:	bf24      	itt	cs
 80a6646:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a664a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a664e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a6652:	bf24      	itt	cs
 80a6654:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a6658:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a665c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a6660:	bf24      	itt	cs
 80a6662:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a6666:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a666a:	011b      	lsls	r3, r3, #4
 80a666c:	bf18      	it	ne
 80a666e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a6672:	d1e0      	bne.n	80a6636 <__aeabi_fdiv+0x46>
 80a6674:	2afd      	cmp	r2, #253	; 0xfd
 80a6676:	f63f af50 	bhi.w	80a651a <__aeabi_fmul+0x92>
 80a667a:	428b      	cmp	r3, r1
 80a667c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6680:	bf08      	it	eq
 80a6682:	f020 0001 	biceq.w	r0, r0, #1
 80a6686:	4770      	bx	lr
 80a6688:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a668c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6690:	327f      	adds	r2, #127	; 0x7f
 80a6692:	bfc2      	ittt	gt
 80a6694:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6698:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a669c:	4770      	bxgt	lr
 80a669e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a66a2:	f04f 0300 	mov.w	r3, #0
 80a66a6:	3a01      	subs	r2, #1
 80a66a8:	e737      	b.n	80a651a <__aeabi_fmul+0x92>
 80a66aa:	f092 0f00 	teq	r2, #0
 80a66ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a66b2:	bf02      	ittt	eq
 80a66b4:	0040      	lsleq	r0, r0, #1
 80a66b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a66ba:	3a01      	subeq	r2, #1
 80a66bc:	d0f9      	beq.n	80a66b2 <__aeabi_fdiv+0xc2>
 80a66be:	ea40 000c 	orr.w	r0, r0, ip
 80a66c2:	f093 0f00 	teq	r3, #0
 80a66c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a66ca:	bf02      	ittt	eq
 80a66cc:	0049      	lsleq	r1, r1, #1
 80a66ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a66d2:	3b01      	subeq	r3, #1
 80a66d4:	d0f9      	beq.n	80a66ca <__aeabi_fdiv+0xda>
 80a66d6:	ea41 010c 	orr.w	r1, r1, ip
 80a66da:	e795      	b.n	80a6608 <__aeabi_fdiv+0x18>
 80a66dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a66e0:	ea92 0f0c 	teq	r2, ip
 80a66e4:	d108      	bne.n	80a66f8 <__aeabi_fdiv+0x108>
 80a66e6:	0242      	lsls	r2, r0, #9
 80a66e8:	f47f af7d 	bne.w	80a65e6 <__aeabi_fmul+0x15e>
 80a66ec:	ea93 0f0c 	teq	r3, ip
 80a66f0:	f47f af70 	bne.w	80a65d4 <__aeabi_fmul+0x14c>
 80a66f4:	4608      	mov	r0, r1
 80a66f6:	e776      	b.n	80a65e6 <__aeabi_fmul+0x15e>
 80a66f8:	ea93 0f0c 	teq	r3, ip
 80a66fc:	d104      	bne.n	80a6708 <__aeabi_fdiv+0x118>
 80a66fe:	024b      	lsls	r3, r1, #9
 80a6700:	f43f af4c 	beq.w	80a659c <__aeabi_fmul+0x114>
 80a6704:	4608      	mov	r0, r1
 80a6706:	e76e      	b.n	80a65e6 <__aeabi_fmul+0x15e>
 80a6708:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a670c:	bf18      	it	ne
 80a670e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6712:	d1ca      	bne.n	80a66aa <__aeabi_fdiv+0xba>
 80a6714:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a6718:	f47f af5c 	bne.w	80a65d4 <__aeabi_fmul+0x14c>
 80a671c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a6720:	f47f af3c 	bne.w	80a659c <__aeabi_fmul+0x114>
 80a6724:	e75f      	b.n	80a65e6 <__aeabi_fmul+0x15e>
 80a6726:	bf00      	nop

080a6728 <__gesf2>:
 80a6728:	f04f 3cff 	mov.w	ip, #4294967295
 80a672c:	e006      	b.n	80a673c <__cmpsf2+0x4>
 80a672e:	bf00      	nop

080a6730 <__lesf2>:
 80a6730:	f04f 0c01 	mov.w	ip, #1
 80a6734:	e002      	b.n	80a673c <__cmpsf2+0x4>
 80a6736:	bf00      	nop

080a6738 <__cmpsf2>:
 80a6738:	f04f 0c01 	mov.w	ip, #1
 80a673c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6740:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6744:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6748:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a674c:	bf18      	it	ne
 80a674e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6752:	d011      	beq.n	80a6778 <__cmpsf2+0x40>
 80a6754:	b001      	add	sp, #4
 80a6756:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a675a:	bf18      	it	ne
 80a675c:	ea90 0f01 	teqne	r0, r1
 80a6760:	bf58      	it	pl
 80a6762:	ebb2 0003 	subspl.w	r0, r2, r3
 80a6766:	bf88      	it	hi
 80a6768:	17c8      	asrhi	r0, r1, #31
 80a676a:	bf38      	it	cc
 80a676c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a6770:	bf18      	it	ne
 80a6772:	f040 0001 	orrne.w	r0, r0, #1
 80a6776:	4770      	bx	lr
 80a6778:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a677c:	d102      	bne.n	80a6784 <__cmpsf2+0x4c>
 80a677e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a6782:	d105      	bne.n	80a6790 <__cmpsf2+0x58>
 80a6784:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a6788:	d1e4      	bne.n	80a6754 <__cmpsf2+0x1c>
 80a678a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a678e:	d0e1      	beq.n	80a6754 <__cmpsf2+0x1c>
 80a6790:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6794:	4770      	bx	lr
 80a6796:	bf00      	nop

080a6798 <__aeabi_cfrcmple>:
 80a6798:	4684      	mov	ip, r0
 80a679a:	4608      	mov	r0, r1
 80a679c:	4661      	mov	r1, ip
 80a679e:	e7ff      	b.n	80a67a0 <__aeabi_cfcmpeq>

080a67a0 <__aeabi_cfcmpeq>:
 80a67a0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a67a2:	f7ff ffc9 	bl	80a6738 <__cmpsf2>
 80a67a6:	2800      	cmp	r0, #0
 80a67a8:	bf48      	it	mi
 80a67aa:	f110 0f00 	cmnmi.w	r0, #0
 80a67ae:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a67b0 <__aeabi_fcmpeq>:
 80a67b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a67b4:	f7ff fff4 	bl	80a67a0 <__aeabi_cfcmpeq>
 80a67b8:	bf0c      	ite	eq
 80a67ba:	2001      	moveq	r0, #1
 80a67bc:	2000      	movne	r0, #0
 80a67be:	f85d fb08 	ldr.w	pc, [sp], #8
 80a67c2:	bf00      	nop

080a67c4 <__aeabi_fcmplt>:
 80a67c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a67c8:	f7ff ffea 	bl	80a67a0 <__aeabi_cfcmpeq>
 80a67cc:	bf34      	ite	cc
 80a67ce:	2001      	movcc	r0, #1
 80a67d0:	2000      	movcs	r0, #0
 80a67d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a67d6:	bf00      	nop

080a67d8 <__aeabi_fcmple>:
 80a67d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a67dc:	f7ff ffe0 	bl	80a67a0 <__aeabi_cfcmpeq>
 80a67e0:	bf94      	ite	ls
 80a67e2:	2001      	movls	r0, #1
 80a67e4:	2000      	movhi	r0, #0
 80a67e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a67ea:	bf00      	nop

080a67ec <__aeabi_fcmpge>:
 80a67ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a67f0:	f7ff ffd2 	bl	80a6798 <__aeabi_cfrcmple>
 80a67f4:	bf94      	ite	ls
 80a67f6:	2001      	movls	r0, #1
 80a67f8:	2000      	movhi	r0, #0
 80a67fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a67fe:	bf00      	nop

080a6800 <__aeabi_fcmpgt>:
 80a6800:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6804:	f7ff ffc8 	bl	80a6798 <__aeabi_cfrcmple>
 80a6808:	bf34      	ite	cc
 80a680a:	2001      	movcc	r0, #1
 80a680c:	2000      	movcs	r0, #0
 80a680e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6812:	bf00      	nop

080a6814 <__aeabi_f2iz>:
 80a6814:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6818:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a681c:	d30f      	bcc.n	80a683e <__aeabi_f2iz+0x2a>
 80a681e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a6822:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a6826:	d90d      	bls.n	80a6844 <__aeabi_f2iz+0x30>
 80a6828:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a682c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6830:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6834:	fa23 f002 	lsr.w	r0, r3, r2
 80a6838:	bf18      	it	ne
 80a683a:	4240      	negne	r0, r0
 80a683c:	4770      	bx	lr
 80a683e:	f04f 0000 	mov.w	r0, #0
 80a6842:	4770      	bx	lr
 80a6844:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a6848:	d101      	bne.n	80a684e <__aeabi_f2iz+0x3a>
 80a684a:	0242      	lsls	r2, r0, #9
 80a684c:	d105      	bne.n	80a685a <__aeabi_f2iz+0x46>
 80a684e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a6852:	bf08      	it	eq
 80a6854:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6858:	4770      	bx	lr
 80a685a:	f04f 0000 	mov.w	r0, #0
 80a685e:	4770      	bx	lr

080a6860 <__aeabi_f2lz>:
 80a6860:	b510      	push	{r4, lr}
 80a6862:	2100      	movs	r1, #0
 80a6864:	4604      	mov	r4, r0
 80a6866:	f7ff ffad 	bl	80a67c4 <__aeabi_fcmplt>
 80a686a:	b920      	cbnz	r0, 80a6876 <__aeabi_f2lz+0x16>
 80a686c:	4620      	mov	r0, r4
 80a686e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a6872:	f000 b809 	b.w	80a6888 <__aeabi_f2ulz>
 80a6876:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a687a:	f000 f805 	bl	80a6888 <__aeabi_f2ulz>
 80a687e:	4240      	negs	r0, r0
 80a6880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6884:	bd10      	pop	{r4, pc}
 80a6886:	bf00      	nop

080a6888 <__aeabi_f2ulz>:
 80a6888:	b5d0      	push	{r4, r6, r7, lr}
 80a688a:	f7ff fa15 	bl	80a5cb8 <__aeabi_f2d>
 80a688e:	2200      	movs	r2, #0
 80a6890:	4b0b      	ldr	r3, [pc, #44]	; (80a68c0 <__aeabi_f2ulz+0x38>)
 80a6892:	4606      	mov	r6, r0
 80a6894:	460f      	mov	r7, r1
 80a6896:	f7ff fa67 	bl	80a5d68 <__aeabi_dmul>
 80a689a:	f7ff fc77 	bl	80a618c <__aeabi_d2uiz>
 80a689e:	4604      	mov	r4, r0
 80a68a0:	f7ff f9e8 	bl	80a5c74 <__aeabi_ui2d>
 80a68a4:	2200      	movs	r2, #0
 80a68a6:	4b07      	ldr	r3, [pc, #28]	; (80a68c4 <__aeabi_f2ulz+0x3c>)
 80a68a8:	f7ff fa5e 	bl	80a5d68 <__aeabi_dmul>
 80a68ac:	4602      	mov	r2, r0
 80a68ae:	460b      	mov	r3, r1
 80a68b0:	4630      	mov	r0, r6
 80a68b2:	4639      	mov	r1, r7
 80a68b4:	f7ff f8a0 	bl	80a59f8 <__aeabi_dsub>
 80a68b8:	f7ff fc68 	bl	80a618c <__aeabi_d2uiz>
 80a68bc:	4621      	mov	r1, r4
 80a68be:	bdd0      	pop	{r4, r6, r7, pc}
 80a68c0:	3df00000 	.word	0x3df00000
 80a68c4:	41f00000 	.word	0x41f00000

080a68c8 <__udivmoddi4>:
 80a68c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a68cc:	9e08      	ldr	r6, [sp, #32]
 80a68ce:	460d      	mov	r5, r1
 80a68d0:	4604      	mov	r4, r0
 80a68d2:	4688      	mov	r8, r1
 80a68d4:	2b00      	cmp	r3, #0
 80a68d6:	d14d      	bne.n	80a6974 <__udivmoddi4+0xac>
 80a68d8:	428a      	cmp	r2, r1
 80a68da:	4694      	mov	ip, r2
 80a68dc:	d968      	bls.n	80a69b0 <__udivmoddi4+0xe8>
 80a68de:	fab2 f282 	clz	r2, r2
 80a68e2:	b152      	cbz	r2, 80a68fa <__udivmoddi4+0x32>
 80a68e4:	fa01 f302 	lsl.w	r3, r1, r2
 80a68e8:	f1c2 0120 	rsb	r1, r2, #32
 80a68ec:	fa20 f101 	lsr.w	r1, r0, r1
 80a68f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80a68f4:	ea41 0803 	orr.w	r8, r1, r3
 80a68f8:	4094      	lsls	r4, r2
 80a68fa:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80a68fe:	fbb8 f7f1 	udiv	r7, r8, r1
 80a6902:	fa1f fe8c 	uxth.w	lr, ip
 80a6906:	fb01 8817 	mls	r8, r1, r7, r8
 80a690a:	fb07 f00e 	mul.w	r0, r7, lr
 80a690e:	0c23      	lsrs	r3, r4, #16
 80a6910:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a6914:	4298      	cmp	r0, r3
 80a6916:	d90a      	bls.n	80a692e <__udivmoddi4+0x66>
 80a6918:	eb1c 0303 	adds.w	r3, ip, r3
 80a691c:	f107 35ff 	add.w	r5, r7, #4294967295
 80a6920:	f080 811e 	bcs.w	80a6b60 <__udivmoddi4+0x298>
 80a6924:	4298      	cmp	r0, r3
 80a6926:	f240 811b 	bls.w	80a6b60 <__udivmoddi4+0x298>
 80a692a:	3f02      	subs	r7, #2
 80a692c:	4463      	add	r3, ip
 80a692e:	1a1b      	subs	r3, r3, r0
 80a6930:	fbb3 f0f1 	udiv	r0, r3, r1
 80a6934:	fb01 3310 	mls	r3, r1, r0, r3
 80a6938:	fb00 fe0e 	mul.w	lr, r0, lr
 80a693c:	b2a4      	uxth	r4, r4
 80a693e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80a6942:	45a6      	cmp	lr, r4
 80a6944:	d90a      	bls.n	80a695c <__udivmoddi4+0x94>
 80a6946:	eb1c 0404 	adds.w	r4, ip, r4
 80a694a:	f100 33ff 	add.w	r3, r0, #4294967295
 80a694e:	f080 8109 	bcs.w	80a6b64 <__udivmoddi4+0x29c>
 80a6952:	45a6      	cmp	lr, r4
 80a6954:	f240 8106 	bls.w	80a6b64 <__udivmoddi4+0x29c>
 80a6958:	4464      	add	r4, ip
 80a695a:	3802      	subs	r0, #2
 80a695c:	2100      	movs	r1, #0
 80a695e:	eba4 040e 	sub.w	r4, r4, lr
 80a6962:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80a6966:	b11e      	cbz	r6, 80a6970 <__udivmoddi4+0xa8>
 80a6968:	2300      	movs	r3, #0
 80a696a:	40d4      	lsrs	r4, r2
 80a696c:	e9c6 4300 	strd	r4, r3, [r6]
 80a6970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6974:	428b      	cmp	r3, r1
 80a6976:	d908      	bls.n	80a698a <__udivmoddi4+0xc2>
 80a6978:	2e00      	cmp	r6, #0
 80a697a:	f000 80ee 	beq.w	80a6b5a <__udivmoddi4+0x292>
 80a697e:	2100      	movs	r1, #0
 80a6980:	e9c6 0500 	strd	r0, r5, [r6]
 80a6984:	4608      	mov	r0, r1
 80a6986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a698a:	fab3 f183 	clz	r1, r3
 80a698e:	2900      	cmp	r1, #0
 80a6990:	d14a      	bne.n	80a6a28 <__udivmoddi4+0x160>
 80a6992:	42ab      	cmp	r3, r5
 80a6994:	d302      	bcc.n	80a699c <__udivmoddi4+0xd4>
 80a6996:	4282      	cmp	r2, r0
 80a6998:	f200 80fc 	bhi.w	80a6b94 <__udivmoddi4+0x2cc>
 80a699c:	1a84      	subs	r4, r0, r2
 80a699e:	eb65 0303 	sbc.w	r3, r5, r3
 80a69a2:	2001      	movs	r0, #1
 80a69a4:	4698      	mov	r8, r3
 80a69a6:	2e00      	cmp	r6, #0
 80a69a8:	d0e2      	beq.n	80a6970 <__udivmoddi4+0xa8>
 80a69aa:	e9c6 4800 	strd	r4, r8, [r6]
 80a69ae:	e7df      	b.n	80a6970 <__udivmoddi4+0xa8>
 80a69b0:	b902      	cbnz	r2, 80a69b4 <__udivmoddi4+0xec>
 80a69b2:	deff      	udf	#255	; 0xff
 80a69b4:	fab2 f282 	clz	r2, r2
 80a69b8:	2a00      	cmp	r2, #0
 80a69ba:	f040 8091 	bne.w	80a6ae0 <__udivmoddi4+0x218>
 80a69be:	eba1 000c 	sub.w	r0, r1, ip
 80a69c2:	2101      	movs	r1, #1
 80a69c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a69c8:	fa1f fe8c 	uxth.w	lr, ip
 80a69cc:	fbb0 f3f7 	udiv	r3, r0, r7
 80a69d0:	fb07 0013 	mls	r0, r7, r3, r0
 80a69d4:	0c25      	lsrs	r5, r4, #16
 80a69d6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a69da:	fb0e f003 	mul.w	r0, lr, r3
 80a69de:	42a8      	cmp	r0, r5
 80a69e0:	d908      	bls.n	80a69f4 <__udivmoddi4+0x12c>
 80a69e2:	eb1c 0505 	adds.w	r5, ip, r5
 80a69e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80a69ea:	d202      	bcs.n	80a69f2 <__udivmoddi4+0x12a>
 80a69ec:	42a8      	cmp	r0, r5
 80a69ee:	f200 80ce 	bhi.w	80a6b8e <__udivmoddi4+0x2c6>
 80a69f2:	4643      	mov	r3, r8
 80a69f4:	1a2d      	subs	r5, r5, r0
 80a69f6:	fbb5 f0f7 	udiv	r0, r5, r7
 80a69fa:	fb07 5510 	mls	r5, r7, r0, r5
 80a69fe:	fb0e fe00 	mul.w	lr, lr, r0
 80a6a02:	b2a4      	uxth	r4, r4
 80a6a04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a6a08:	45a6      	cmp	lr, r4
 80a6a0a:	d908      	bls.n	80a6a1e <__udivmoddi4+0x156>
 80a6a0c:	eb1c 0404 	adds.w	r4, ip, r4
 80a6a10:	f100 35ff 	add.w	r5, r0, #4294967295
 80a6a14:	d202      	bcs.n	80a6a1c <__udivmoddi4+0x154>
 80a6a16:	45a6      	cmp	lr, r4
 80a6a18:	f200 80b6 	bhi.w	80a6b88 <__udivmoddi4+0x2c0>
 80a6a1c:	4628      	mov	r0, r5
 80a6a1e:	eba4 040e 	sub.w	r4, r4, lr
 80a6a22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a6a26:	e79e      	b.n	80a6966 <__udivmoddi4+0x9e>
 80a6a28:	f1c1 0720 	rsb	r7, r1, #32
 80a6a2c:	408b      	lsls	r3, r1
 80a6a2e:	fa22 fc07 	lsr.w	ip, r2, r7
 80a6a32:	ea4c 0c03 	orr.w	ip, ip, r3
 80a6a36:	fa25 fa07 	lsr.w	sl, r5, r7
 80a6a3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a6a3e:	fbba f8f9 	udiv	r8, sl, r9
 80a6a42:	fa20 f307 	lsr.w	r3, r0, r7
 80a6a46:	fb09 aa18 	mls	sl, r9, r8, sl
 80a6a4a:	408d      	lsls	r5, r1
 80a6a4c:	fa1f fe8c 	uxth.w	lr, ip
 80a6a50:	431d      	orrs	r5, r3
 80a6a52:	fa00 f301 	lsl.w	r3, r0, r1
 80a6a56:	fb08 f00e 	mul.w	r0, r8, lr
 80a6a5a:	0c2c      	lsrs	r4, r5, #16
 80a6a5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80a6a60:	42a0      	cmp	r0, r4
 80a6a62:	fa02 f201 	lsl.w	r2, r2, r1
 80a6a66:	d90b      	bls.n	80a6a80 <__udivmoddi4+0x1b8>
 80a6a68:	eb1c 0404 	adds.w	r4, ip, r4
 80a6a6c:	f108 3aff 	add.w	sl, r8, #4294967295
 80a6a70:	f080 8088 	bcs.w	80a6b84 <__udivmoddi4+0x2bc>
 80a6a74:	42a0      	cmp	r0, r4
 80a6a76:	f240 8085 	bls.w	80a6b84 <__udivmoddi4+0x2bc>
 80a6a7a:	f1a8 0802 	sub.w	r8, r8, #2
 80a6a7e:	4464      	add	r4, ip
 80a6a80:	1a24      	subs	r4, r4, r0
 80a6a82:	fbb4 f0f9 	udiv	r0, r4, r9
 80a6a86:	fb09 4410 	mls	r4, r9, r0, r4
 80a6a8a:	fb00 fe0e 	mul.w	lr, r0, lr
 80a6a8e:	b2ad      	uxth	r5, r5
 80a6a90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a6a94:	45a6      	cmp	lr, r4
 80a6a96:	d908      	bls.n	80a6aaa <__udivmoddi4+0x1e2>
 80a6a98:	eb1c 0404 	adds.w	r4, ip, r4
 80a6a9c:	f100 35ff 	add.w	r5, r0, #4294967295
 80a6aa0:	d26c      	bcs.n	80a6b7c <__udivmoddi4+0x2b4>
 80a6aa2:	45a6      	cmp	lr, r4
 80a6aa4:	d96a      	bls.n	80a6b7c <__udivmoddi4+0x2b4>
 80a6aa6:	3802      	subs	r0, #2
 80a6aa8:	4464      	add	r4, ip
 80a6aaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80a6aae:	fba0 9502 	umull	r9, r5, r0, r2
 80a6ab2:	eba4 040e 	sub.w	r4, r4, lr
 80a6ab6:	42ac      	cmp	r4, r5
 80a6ab8:	46c8      	mov	r8, r9
 80a6aba:	46ae      	mov	lr, r5
 80a6abc:	d356      	bcc.n	80a6b6c <__udivmoddi4+0x2a4>
 80a6abe:	d053      	beq.n	80a6b68 <__udivmoddi4+0x2a0>
 80a6ac0:	2e00      	cmp	r6, #0
 80a6ac2:	d069      	beq.n	80a6b98 <__udivmoddi4+0x2d0>
 80a6ac4:	ebb3 0208 	subs.w	r2, r3, r8
 80a6ac8:	eb64 040e 	sbc.w	r4, r4, lr
 80a6acc:	fa22 f301 	lsr.w	r3, r2, r1
 80a6ad0:	fa04 f707 	lsl.w	r7, r4, r7
 80a6ad4:	431f      	orrs	r7, r3
 80a6ad6:	40cc      	lsrs	r4, r1
 80a6ad8:	e9c6 7400 	strd	r7, r4, [r6]
 80a6adc:	2100      	movs	r1, #0
 80a6ade:	e747      	b.n	80a6970 <__udivmoddi4+0xa8>
 80a6ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 80a6ae4:	f1c2 0120 	rsb	r1, r2, #32
 80a6ae8:	fa25 f301 	lsr.w	r3, r5, r1
 80a6aec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a6af0:	fa20 f101 	lsr.w	r1, r0, r1
 80a6af4:	4095      	lsls	r5, r2
 80a6af6:	430d      	orrs	r5, r1
 80a6af8:	fbb3 f1f7 	udiv	r1, r3, r7
 80a6afc:	fb07 3311 	mls	r3, r7, r1, r3
 80a6b00:	fa1f fe8c 	uxth.w	lr, ip
 80a6b04:	0c28      	lsrs	r0, r5, #16
 80a6b06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a6b0a:	fb01 f30e 	mul.w	r3, r1, lr
 80a6b0e:	4283      	cmp	r3, r0
 80a6b10:	fa04 f402 	lsl.w	r4, r4, r2
 80a6b14:	d908      	bls.n	80a6b28 <__udivmoddi4+0x260>
 80a6b16:	eb1c 0000 	adds.w	r0, ip, r0
 80a6b1a:	f101 38ff 	add.w	r8, r1, #4294967295
 80a6b1e:	d22f      	bcs.n	80a6b80 <__udivmoddi4+0x2b8>
 80a6b20:	4283      	cmp	r3, r0
 80a6b22:	d92d      	bls.n	80a6b80 <__udivmoddi4+0x2b8>
 80a6b24:	3902      	subs	r1, #2
 80a6b26:	4460      	add	r0, ip
 80a6b28:	1ac0      	subs	r0, r0, r3
 80a6b2a:	fbb0 f3f7 	udiv	r3, r0, r7
 80a6b2e:	fb07 0013 	mls	r0, r7, r3, r0
 80a6b32:	b2ad      	uxth	r5, r5
 80a6b34:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a6b38:	fb03 f00e 	mul.w	r0, r3, lr
 80a6b3c:	42a8      	cmp	r0, r5
 80a6b3e:	d908      	bls.n	80a6b52 <__udivmoddi4+0x28a>
 80a6b40:	eb1c 0505 	adds.w	r5, ip, r5
 80a6b44:	f103 38ff 	add.w	r8, r3, #4294967295
 80a6b48:	d216      	bcs.n	80a6b78 <__udivmoddi4+0x2b0>
 80a6b4a:	42a8      	cmp	r0, r5
 80a6b4c:	d914      	bls.n	80a6b78 <__udivmoddi4+0x2b0>
 80a6b4e:	3b02      	subs	r3, #2
 80a6b50:	4465      	add	r5, ip
 80a6b52:	1a28      	subs	r0, r5, r0
 80a6b54:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80a6b58:	e738      	b.n	80a69cc <__udivmoddi4+0x104>
 80a6b5a:	4631      	mov	r1, r6
 80a6b5c:	4630      	mov	r0, r6
 80a6b5e:	e707      	b.n	80a6970 <__udivmoddi4+0xa8>
 80a6b60:	462f      	mov	r7, r5
 80a6b62:	e6e4      	b.n	80a692e <__udivmoddi4+0x66>
 80a6b64:	4618      	mov	r0, r3
 80a6b66:	e6f9      	b.n	80a695c <__udivmoddi4+0x94>
 80a6b68:	454b      	cmp	r3, r9
 80a6b6a:	d2a9      	bcs.n	80a6ac0 <__udivmoddi4+0x1f8>
 80a6b6c:	ebb9 0802 	subs.w	r8, r9, r2
 80a6b70:	eb65 0e0c 	sbc.w	lr, r5, ip
 80a6b74:	3801      	subs	r0, #1
 80a6b76:	e7a3      	b.n	80a6ac0 <__udivmoddi4+0x1f8>
 80a6b78:	4643      	mov	r3, r8
 80a6b7a:	e7ea      	b.n	80a6b52 <__udivmoddi4+0x28a>
 80a6b7c:	4628      	mov	r0, r5
 80a6b7e:	e794      	b.n	80a6aaa <__udivmoddi4+0x1e2>
 80a6b80:	4641      	mov	r1, r8
 80a6b82:	e7d1      	b.n	80a6b28 <__udivmoddi4+0x260>
 80a6b84:	46d0      	mov	r8, sl
 80a6b86:	e77b      	b.n	80a6a80 <__udivmoddi4+0x1b8>
 80a6b88:	4464      	add	r4, ip
 80a6b8a:	3802      	subs	r0, #2
 80a6b8c:	e747      	b.n	80a6a1e <__udivmoddi4+0x156>
 80a6b8e:	3b02      	subs	r3, #2
 80a6b90:	4465      	add	r5, ip
 80a6b92:	e72f      	b.n	80a69f4 <__udivmoddi4+0x12c>
 80a6b94:	4608      	mov	r0, r1
 80a6b96:	e706      	b.n	80a69a6 <__udivmoddi4+0xde>
 80a6b98:	4631      	mov	r1, r6
 80a6b9a:	e6e9      	b.n	80a6970 <__udivmoddi4+0xa8>

080a6b9c <__aeabi_idiv0>:
 80a6b9c:	4770      	bx	lr
 80a6b9e:	bf00      	nop

080a6ba0 <atoi>:
 80a6ba0:	220a      	movs	r2, #10
 80a6ba2:	2100      	movs	r1, #0
 80a6ba4:	f000 ba20 	b.w	80a6fe8 <strtol>

080a6ba8 <atol>:
 80a6ba8:	220a      	movs	r2, #10
 80a6baa:	2100      	movs	r1, #0
 80a6bac:	f000 ba1c 	b.w	80a6fe8 <strtol>

080a6bb0 <__cxa_atexit>:
 80a6bb0:	b510      	push	{r4, lr}
 80a6bb2:	4604      	mov	r4, r0
 80a6bb4:	4804      	ldr	r0, [pc, #16]	; (80a6bc8 <__cxa_atexit+0x18>)
 80a6bb6:	4613      	mov	r3, r2
 80a6bb8:	b120      	cbz	r0, 80a6bc4 <__cxa_atexit+0x14>
 80a6bba:	460a      	mov	r2, r1
 80a6bbc:	2002      	movs	r0, #2
 80a6bbe:	4621      	mov	r1, r4
 80a6bc0:	f3af 8000 	nop.w
 80a6bc4:	bd10      	pop	{r4, pc}
 80a6bc6:	bf00      	nop
 80a6bc8:	00000000 	.word	0x00000000

080a6bcc <localtime_r>:
 80a6bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6bd0:	460c      	mov	r4, r1
 80a6bd2:	4680      	mov	r8, r0
 80a6bd4:	f000 fd0a 	bl	80a75ec <__gettzinfo>
 80a6bd8:	4621      	mov	r1, r4
 80a6bda:	4605      	mov	r5, r0
 80a6bdc:	4640      	mov	r0, r8
 80a6bde:	f000 fd09 	bl	80a75f4 <gmtime_r>
 80a6be2:	6943      	ldr	r3, [r0, #20]
 80a6be4:	4604      	mov	r4, r0
 80a6be6:	0799      	lsls	r1, r3, #30
 80a6be8:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80a6bec:	d105      	bne.n	80a6bfa <localtime_r+0x2e>
 80a6bee:	2264      	movs	r2, #100	; 0x64
 80a6bf0:	fb97 f3f2 	sdiv	r3, r7, r2
 80a6bf4:	fb02 7313 	mls	r3, r2, r3, r7
 80a6bf8:	bb73      	cbnz	r3, 80a6c58 <localtime_r+0x8c>
 80a6bfa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6bfe:	fb97 f6f3 	sdiv	r6, r7, r3
 80a6c02:	fb03 7616 	mls	r6, r3, r6, r7
 80a6c06:	fab6 f386 	clz	r3, r6
 80a6c0a:	095b      	lsrs	r3, r3, #5
 80a6c0c:	2230      	movs	r2, #48	; 0x30
 80a6c0e:	4e66      	ldr	r6, [pc, #408]	; (80a6da8 <localtime_r+0x1dc>)
 80a6c10:	fb02 6603 	mla	r6, r2, r3, r6
 80a6c14:	f000 fb12 	bl	80a723c <__tz_lock>
 80a6c18:	f000 fb1c 	bl	80a7254 <_tzset_unlocked>
 80a6c1c:	4b63      	ldr	r3, [pc, #396]	; (80a6dac <localtime_r+0x1e0>)
 80a6c1e:	681b      	ldr	r3, [r3, #0]
 80a6c20:	b34b      	cbz	r3, 80a6c76 <localtime_r+0xaa>
 80a6c22:	686b      	ldr	r3, [r5, #4]
 80a6c24:	42bb      	cmp	r3, r7
 80a6c26:	d119      	bne.n	80a6c5c <localtime_r+0x90>
 80a6c28:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a6c2c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80a6c30:	682f      	ldr	r7, [r5, #0]
 80a6c32:	b9df      	cbnz	r7, 80a6c6c <localtime_r+0xa0>
 80a6c34:	4282      	cmp	r2, r0
 80a6c36:	eb73 0101 	sbcs.w	r1, r3, r1
 80a6c3a:	da23      	bge.n	80a6c84 <localtime_r+0xb8>
 80a6c3c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a6c40:	4282      	cmp	r2, r0
 80a6c42:	eb73 0701 	sbcs.w	r7, r3, r1
 80a6c46:	bfb4      	ite	lt
 80a6c48:	2701      	movlt	r7, #1
 80a6c4a:	2700      	movge	r7, #0
 80a6c4c:	4282      	cmp	r2, r0
 80a6c4e:	418b      	sbcs	r3, r1
 80a6c50:	6227      	str	r7, [r4, #32]
 80a6c52:	db19      	blt.n	80a6c88 <localtime_r+0xbc>
 80a6c54:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a6c56:	e018      	b.n	80a6c8a <localtime_r+0xbe>
 80a6c58:	2301      	movs	r3, #1
 80a6c5a:	e7d7      	b.n	80a6c0c <localtime_r+0x40>
 80a6c5c:	4638      	mov	r0, r7
 80a6c5e:	f000 fa49 	bl	80a70f4 <__tzcalc_limits>
 80a6c62:	2800      	cmp	r0, #0
 80a6c64:	d1e0      	bne.n	80a6c28 <localtime_r+0x5c>
 80a6c66:	f04f 33ff 	mov.w	r3, #4294967295
 80a6c6a:	e004      	b.n	80a6c76 <localtime_r+0xaa>
 80a6c6c:	4282      	cmp	r2, r0
 80a6c6e:	eb73 0101 	sbcs.w	r1, r3, r1
 80a6c72:	da02      	bge.n	80a6c7a <localtime_r+0xae>
 80a6c74:	2300      	movs	r3, #0
 80a6c76:	6223      	str	r3, [r4, #32]
 80a6c78:	e7ec      	b.n	80a6c54 <localtime_r+0x88>
 80a6c7a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a6c7e:	4282      	cmp	r2, r0
 80a6c80:	418b      	sbcs	r3, r1
 80a6c82:	daf7      	bge.n	80a6c74 <localtime_r+0xa8>
 80a6c84:	2301      	movs	r3, #1
 80a6c86:	6223      	str	r3, [r4, #32]
 80a6c88:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a6c8a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80a6c8e:	fb93 f5f2 	sdiv	r5, r3, r2
 80a6c92:	203c      	movs	r0, #60	; 0x3c
 80a6c94:	fb02 3315 	mls	r3, r2, r5, r3
 80a6c98:	fb93 f2f0 	sdiv	r2, r3, r0
 80a6c9c:	fb00 3012 	mls	r0, r0, r2, r3
 80a6ca0:	6861      	ldr	r1, [r4, #4]
 80a6ca2:	6823      	ldr	r3, [r4, #0]
 80a6ca4:	1a89      	subs	r1, r1, r2
 80a6ca6:	68a2      	ldr	r2, [r4, #8]
 80a6ca8:	1a1b      	subs	r3, r3, r0
 80a6caa:	1b52      	subs	r2, r2, r5
 80a6cac:	2b3b      	cmp	r3, #59	; 0x3b
 80a6cae:	6023      	str	r3, [r4, #0]
 80a6cb0:	6061      	str	r1, [r4, #4]
 80a6cb2:	60a2      	str	r2, [r4, #8]
 80a6cb4:	dd34      	ble.n	80a6d20 <localtime_r+0x154>
 80a6cb6:	3101      	adds	r1, #1
 80a6cb8:	6061      	str	r1, [r4, #4]
 80a6cba:	3b3c      	subs	r3, #60	; 0x3c
 80a6cbc:	6023      	str	r3, [r4, #0]
 80a6cbe:	6863      	ldr	r3, [r4, #4]
 80a6cc0:	2b3b      	cmp	r3, #59	; 0x3b
 80a6cc2:	dd33      	ble.n	80a6d2c <localtime_r+0x160>
 80a6cc4:	3201      	adds	r2, #1
 80a6cc6:	60a2      	str	r2, [r4, #8]
 80a6cc8:	3b3c      	subs	r3, #60	; 0x3c
 80a6cca:	6063      	str	r3, [r4, #4]
 80a6ccc:	68a3      	ldr	r3, [r4, #8]
 80a6cce:	2b17      	cmp	r3, #23
 80a6cd0:	dd32      	ble.n	80a6d38 <localtime_r+0x16c>
 80a6cd2:	69e2      	ldr	r2, [r4, #28]
 80a6cd4:	3b18      	subs	r3, #24
 80a6cd6:	3201      	adds	r2, #1
 80a6cd8:	61e2      	str	r2, [r4, #28]
 80a6cda:	69a2      	ldr	r2, [r4, #24]
 80a6cdc:	60a3      	str	r3, [r4, #8]
 80a6cde:	3201      	adds	r2, #1
 80a6ce0:	2a06      	cmp	r2, #6
 80a6ce2:	bfc8      	it	gt
 80a6ce4:	2200      	movgt	r2, #0
 80a6ce6:	61a2      	str	r2, [r4, #24]
 80a6ce8:	68e2      	ldr	r2, [r4, #12]
 80a6cea:	6923      	ldr	r3, [r4, #16]
 80a6cec:	3201      	adds	r2, #1
 80a6cee:	60e2      	str	r2, [r4, #12]
 80a6cf0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80a6cf4:	428a      	cmp	r2, r1
 80a6cf6:	dd0e      	ble.n	80a6d16 <localtime_r+0x14a>
 80a6cf8:	2b0b      	cmp	r3, #11
 80a6cfa:	eba2 0201 	sub.w	r2, r2, r1
 80a6cfe:	60e2      	str	r2, [r4, #12]
 80a6d00:	f103 0201 	add.w	r2, r3, #1
 80a6d04:	bf05      	ittet	eq
 80a6d06:	2200      	moveq	r2, #0
 80a6d08:	6963      	ldreq	r3, [r4, #20]
 80a6d0a:	6122      	strne	r2, [r4, #16]
 80a6d0c:	3301      	addeq	r3, #1
 80a6d0e:	bf02      	ittt	eq
 80a6d10:	6122      	streq	r2, [r4, #16]
 80a6d12:	6163      	streq	r3, [r4, #20]
 80a6d14:	61e2      	streq	r2, [r4, #28]
 80a6d16:	f000 fa97 	bl	80a7248 <__tz_unlock>
 80a6d1a:	4620      	mov	r0, r4
 80a6d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6d20:	2b00      	cmp	r3, #0
 80a6d22:	dacc      	bge.n	80a6cbe <localtime_r+0xf2>
 80a6d24:	3901      	subs	r1, #1
 80a6d26:	6061      	str	r1, [r4, #4]
 80a6d28:	333c      	adds	r3, #60	; 0x3c
 80a6d2a:	e7c7      	b.n	80a6cbc <localtime_r+0xf0>
 80a6d2c:	2b00      	cmp	r3, #0
 80a6d2e:	dacd      	bge.n	80a6ccc <localtime_r+0x100>
 80a6d30:	3a01      	subs	r2, #1
 80a6d32:	60a2      	str	r2, [r4, #8]
 80a6d34:	333c      	adds	r3, #60	; 0x3c
 80a6d36:	e7c8      	b.n	80a6cca <localtime_r+0xfe>
 80a6d38:	2b00      	cmp	r3, #0
 80a6d3a:	daec      	bge.n	80a6d16 <localtime_r+0x14a>
 80a6d3c:	69e2      	ldr	r2, [r4, #28]
 80a6d3e:	3318      	adds	r3, #24
 80a6d40:	3a01      	subs	r2, #1
 80a6d42:	61e2      	str	r2, [r4, #28]
 80a6d44:	69a2      	ldr	r2, [r4, #24]
 80a6d46:	60a3      	str	r3, [r4, #8]
 80a6d48:	3a01      	subs	r2, #1
 80a6d4a:	bf48      	it	mi
 80a6d4c:	2206      	movmi	r2, #6
 80a6d4e:	61a2      	str	r2, [r4, #24]
 80a6d50:	68e2      	ldr	r2, [r4, #12]
 80a6d52:	3a01      	subs	r2, #1
 80a6d54:	60e2      	str	r2, [r4, #12]
 80a6d56:	2a00      	cmp	r2, #0
 80a6d58:	d1dd      	bne.n	80a6d16 <localtime_r+0x14a>
 80a6d5a:	6923      	ldr	r3, [r4, #16]
 80a6d5c:	3b01      	subs	r3, #1
 80a6d5e:	d405      	bmi.n	80a6d6c <localtime_r+0x1a0>
 80a6d60:	6123      	str	r3, [r4, #16]
 80a6d62:	6923      	ldr	r3, [r4, #16]
 80a6d64:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80a6d68:	60e3      	str	r3, [r4, #12]
 80a6d6a:	e7d4      	b.n	80a6d16 <localtime_r+0x14a>
 80a6d6c:	230b      	movs	r3, #11
 80a6d6e:	6123      	str	r3, [r4, #16]
 80a6d70:	6963      	ldr	r3, [r4, #20]
 80a6d72:	1e5a      	subs	r2, r3, #1
 80a6d74:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a6d78:	6162      	str	r2, [r4, #20]
 80a6d7a:	079a      	lsls	r2, r3, #30
 80a6d7c:	d105      	bne.n	80a6d8a <localtime_r+0x1be>
 80a6d7e:	2164      	movs	r1, #100	; 0x64
 80a6d80:	fb93 f2f1 	sdiv	r2, r3, r1
 80a6d84:	fb01 3212 	mls	r2, r1, r2, r3
 80a6d88:	b962      	cbnz	r2, 80a6da4 <localtime_r+0x1d8>
 80a6d8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6d8e:	fb93 f1f2 	sdiv	r1, r3, r2
 80a6d92:	fb02 3311 	mls	r3, r2, r1, r3
 80a6d96:	fab3 f383 	clz	r3, r3
 80a6d9a:	095b      	lsrs	r3, r3, #5
 80a6d9c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a6da0:	61e3      	str	r3, [r4, #28]
 80a6da2:	e7de      	b.n	80a6d62 <localtime_r+0x196>
 80a6da4:	2301      	movs	r3, #1
 80a6da6:	e7f9      	b.n	80a6d9c <localtime_r+0x1d0>
 80a6da8:	080a91cc 	.word	0x080a91cc
 80a6dac:	2000094c 	.word	0x2000094c

080a6db0 <memcpy>:
 80a6db0:	440a      	add	r2, r1
 80a6db2:	4291      	cmp	r1, r2
 80a6db4:	f100 33ff 	add.w	r3, r0, #4294967295
 80a6db8:	d100      	bne.n	80a6dbc <memcpy+0xc>
 80a6dba:	4770      	bx	lr
 80a6dbc:	b510      	push	{r4, lr}
 80a6dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6dc2:	4291      	cmp	r1, r2
 80a6dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6dc8:	d1f9      	bne.n	80a6dbe <memcpy+0xe>
 80a6dca:	bd10      	pop	{r4, pc}

080a6dcc <memset>:
 80a6dcc:	4603      	mov	r3, r0
 80a6dce:	4402      	add	r2, r0
 80a6dd0:	4293      	cmp	r3, r2
 80a6dd2:	d100      	bne.n	80a6dd6 <memset+0xa>
 80a6dd4:	4770      	bx	lr
 80a6dd6:	f803 1b01 	strb.w	r1, [r3], #1
 80a6dda:	e7f9      	b.n	80a6dd0 <memset+0x4>

080a6ddc <srand>:
 80a6ddc:	b538      	push	{r3, r4, r5, lr}
 80a6dde:	4b10      	ldr	r3, [pc, #64]	; (80a6e20 <srand+0x44>)
 80a6de0:	4604      	mov	r4, r0
 80a6de2:	681d      	ldr	r5, [r3, #0]
 80a6de4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6de6:	b9b3      	cbnz	r3, 80a6e16 <srand+0x3a>
 80a6de8:	2018      	movs	r0, #24
 80a6dea:	f7fc ff1f 	bl	80a3c2c <malloc>
 80a6dee:	4602      	mov	r2, r0
 80a6df0:	63a8      	str	r0, [r5, #56]	; 0x38
 80a6df2:	b920      	cbnz	r0, 80a6dfe <srand+0x22>
 80a6df4:	2142      	movs	r1, #66	; 0x42
 80a6df6:	4b0b      	ldr	r3, [pc, #44]	; (80a6e24 <srand+0x48>)
 80a6df8:	480b      	ldr	r0, [pc, #44]	; (80a6e28 <srand+0x4c>)
 80a6dfa:	f7fc ff67 	bl	80a3ccc <__assert_func>
 80a6dfe:	490b      	ldr	r1, [pc, #44]	; (80a6e2c <srand+0x50>)
 80a6e00:	4b0b      	ldr	r3, [pc, #44]	; (80a6e30 <srand+0x54>)
 80a6e02:	e9c0 1300 	strd	r1, r3, [r0]
 80a6e06:	4b0b      	ldr	r3, [pc, #44]	; (80a6e34 <srand+0x58>)
 80a6e08:	2100      	movs	r1, #0
 80a6e0a:	6083      	str	r3, [r0, #8]
 80a6e0c:	230b      	movs	r3, #11
 80a6e0e:	8183      	strh	r3, [r0, #12]
 80a6e10:	2001      	movs	r0, #1
 80a6e12:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a6e16:	2200      	movs	r2, #0
 80a6e18:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6e1a:	611c      	str	r4, [r3, #16]
 80a6e1c:	615a      	str	r2, [r3, #20]
 80a6e1e:	bd38      	pop	{r3, r4, r5, pc}
 80a6e20:	20000080 	.word	0x20000080
 80a6e24:	080a922c 	.word	0x080a922c
 80a6e28:	080a9243 	.word	0x080a9243
 80a6e2c:	abcd330e 	.word	0xabcd330e
 80a6e30:	e66d1234 	.word	0xe66d1234
 80a6e34:	0005deec 	.word	0x0005deec

080a6e38 <strcmp>:
 80a6e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6e40:	2a01      	cmp	r2, #1
 80a6e42:	bf28      	it	cs
 80a6e44:	429a      	cmpcs	r2, r3
 80a6e46:	d0f7      	beq.n	80a6e38 <strcmp>
 80a6e48:	1ad0      	subs	r0, r2, r3
 80a6e4a:	4770      	bx	lr

080a6e4c <strcpy>:
 80a6e4c:	4603      	mov	r3, r0
 80a6e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6e52:	f803 2b01 	strb.w	r2, [r3], #1
 80a6e56:	2a00      	cmp	r2, #0
 80a6e58:	d1f9      	bne.n	80a6e4e <strcpy+0x2>
 80a6e5a:	4770      	bx	lr

080a6e5c <strdup>:
 80a6e5c:	4b02      	ldr	r3, [pc, #8]	; (80a6e68 <strdup+0xc>)
 80a6e5e:	4601      	mov	r1, r0
 80a6e60:	6818      	ldr	r0, [r3, #0]
 80a6e62:	f000 b803 	b.w	80a6e6c <_strdup_r>
 80a6e66:	bf00      	nop
 80a6e68:	20000080 	.word	0x20000080

080a6e6c <_strdup_r>:
 80a6e6c:	b570      	push	{r4, r5, r6, lr}
 80a6e6e:	4604      	mov	r4, r0
 80a6e70:	4608      	mov	r0, r1
 80a6e72:	460d      	mov	r5, r1
 80a6e74:	f000 f80d 	bl	80a6e92 <strlen>
 80a6e78:	1c46      	adds	r6, r0, #1
 80a6e7a:	4631      	mov	r1, r6
 80a6e7c:	4620      	mov	r0, r4
 80a6e7e:	f7fc ff15 	bl	80a3cac <_malloc_r>
 80a6e82:	4604      	mov	r4, r0
 80a6e84:	b118      	cbz	r0, 80a6e8e <_strdup_r+0x22>
 80a6e86:	4632      	mov	r2, r6
 80a6e88:	4629      	mov	r1, r5
 80a6e8a:	f7ff ff91 	bl	80a6db0 <memcpy>
 80a6e8e:	4620      	mov	r0, r4
 80a6e90:	bd70      	pop	{r4, r5, r6, pc}

080a6e92 <strlen>:
 80a6e92:	4603      	mov	r3, r0
 80a6e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6e98:	2a00      	cmp	r2, #0
 80a6e9a:	d1fb      	bne.n	80a6e94 <strlen+0x2>
 80a6e9c:	1a18      	subs	r0, r3, r0
 80a6e9e:	3801      	subs	r0, #1
 80a6ea0:	4770      	bx	lr

080a6ea2 <strncmp>:
 80a6ea2:	4603      	mov	r3, r0
 80a6ea4:	b510      	push	{r4, lr}
 80a6ea6:	b172      	cbz	r2, 80a6ec6 <strncmp+0x24>
 80a6ea8:	3901      	subs	r1, #1
 80a6eaa:	1884      	adds	r4, r0, r2
 80a6eac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a6eb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a6eb4:	4290      	cmp	r0, r2
 80a6eb6:	d101      	bne.n	80a6ebc <strncmp+0x1a>
 80a6eb8:	42a3      	cmp	r3, r4
 80a6eba:	d101      	bne.n	80a6ec0 <strncmp+0x1e>
 80a6ebc:	1a80      	subs	r0, r0, r2
 80a6ebe:	bd10      	pop	{r4, pc}
 80a6ec0:	2800      	cmp	r0, #0
 80a6ec2:	d1f3      	bne.n	80a6eac <strncmp+0xa>
 80a6ec4:	e7fa      	b.n	80a6ebc <strncmp+0x1a>
 80a6ec6:	4610      	mov	r0, r2
 80a6ec8:	e7f9      	b.n	80a6ebe <strncmp+0x1c>

080a6eca <strncpy>:
 80a6eca:	4603      	mov	r3, r0
 80a6ecc:	b510      	push	{r4, lr}
 80a6ece:	3901      	subs	r1, #1
 80a6ed0:	b132      	cbz	r2, 80a6ee0 <strncpy+0x16>
 80a6ed2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a6ed6:	3a01      	subs	r2, #1
 80a6ed8:	f803 4b01 	strb.w	r4, [r3], #1
 80a6edc:	2c00      	cmp	r4, #0
 80a6ede:	d1f7      	bne.n	80a6ed0 <strncpy+0x6>
 80a6ee0:	2100      	movs	r1, #0
 80a6ee2:	441a      	add	r2, r3
 80a6ee4:	4293      	cmp	r3, r2
 80a6ee6:	d100      	bne.n	80a6eea <strncpy+0x20>
 80a6ee8:	bd10      	pop	{r4, pc}
 80a6eea:	f803 1b01 	strb.w	r1, [r3], #1
 80a6eee:	e7f9      	b.n	80a6ee4 <strncpy+0x1a>

080a6ef0 <_strtol_l.constprop.0>:
 80a6ef0:	2b01      	cmp	r3, #1
 80a6ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6ef6:	4680      	mov	r8, r0
 80a6ef8:	d001      	beq.n	80a6efe <_strtol_l.constprop.0+0xe>
 80a6efa:	2b24      	cmp	r3, #36	; 0x24
 80a6efc:	d906      	bls.n	80a6f0c <_strtol_l.constprop.0+0x1c>
 80a6efe:	f7fc fedd 	bl	80a3cbc <__errno>
 80a6f02:	2316      	movs	r3, #22
 80a6f04:	6003      	str	r3, [r0, #0]
 80a6f06:	2000      	movs	r0, #0
 80a6f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6f0c:	460d      	mov	r5, r1
 80a6f0e:	4f35      	ldr	r7, [pc, #212]	; (80a6fe4 <_strtol_l.constprop.0+0xf4>)
 80a6f10:	4628      	mov	r0, r5
 80a6f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6f16:	5de6      	ldrb	r6, [r4, r7]
 80a6f18:	f016 0608 	ands.w	r6, r6, #8
 80a6f1c:	d1f8      	bne.n	80a6f10 <_strtol_l.constprop.0+0x20>
 80a6f1e:	2c2d      	cmp	r4, #45	; 0x2d
 80a6f20:	d12f      	bne.n	80a6f82 <_strtol_l.constprop.0+0x92>
 80a6f22:	2601      	movs	r6, #1
 80a6f24:	782c      	ldrb	r4, [r5, #0]
 80a6f26:	1c85      	adds	r5, r0, #2
 80a6f28:	2b00      	cmp	r3, #0
 80a6f2a:	d057      	beq.n	80a6fdc <_strtol_l.constprop.0+0xec>
 80a6f2c:	2b10      	cmp	r3, #16
 80a6f2e:	d109      	bne.n	80a6f44 <_strtol_l.constprop.0+0x54>
 80a6f30:	2c30      	cmp	r4, #48	; 0x30
 80a6f32:	d107      	bne.n	80a6f44 <_strtol_l.constprop.0+0x54>
 80a6f34:	7828      	ldrb	r0, [r5, #0]
 80a6f36:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a6f3a:	2858      	cmp	r0, #88	; 0x58
 80a6f3c:	d149      	bne.n	80a6fd2 <_strtol_l.constprop.0+0xe2>
 80a6f3e:	2310      	movs	r3, #16
 80a6f40:	786c      	ldrb	r4, [r5, #1]
 80a6f42:	3502      	adds	r5, #2
 80a6f44:	2700      	movs	r7, #0
 80a6f46:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80a6f4a:	f10e 3eff 	add.w	lr, lr, #4294967295
 80a6f4e:	fbbe f9f3 	udiv	r9, lr, r3
 80a6f52:	4638      	mov	r0, r7
 80a6f54:	fb03 ea19 	mls	sl, r3, r9, lr
 80a6f58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a6f5c:	f1bc 0f09 	cmp.w	ip, #9
 80a6f60:	d814      	bhi.n	80a6f8c <_strtol_l.constprop.0+0x9c>
 80a6f62:	4664      	mov	r4, ip
 80a6f64:	42a3      	cmp	r3, r4
 80a6f66:	dd22      	ble.n	80a6fae <_strtol_l.constprop.0+0xbe>
 80a6f68:	2f00      	cmp	r7, #0
 80a6f6a:	db1d      	blt.n	80a6fa8 <_strtol_l.constprop.0+0xb8>
 80a6f6c:	4581      	cmp	r9, r0
 80a6f6e:	d31b      	bcc.n	80a6fa8 <_strtol_l.constprop.0+0xb8>
 80a6f70:	d101      	bne.n	80a6f76 <_strtol_l.constprop.0+0x86>
 80a6f72:	45a2      	cmp	sl, r4
 80a6f74:	db18      	blt.n	80a6fa8 <_strtol_l.constprop.0+0xb8>
 80a6f76:	2701      	movs	r7, #1
 80a6f78:	fb00 4003 	mla	r0, r0, r3, r4
 80a6f7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6f80:	e7ea      	b.n	80a6f58 <_strtol_l.constprop.0+0x68>
 80a6f82:	2c2b      	cmp	r4, #43	; 0x2b
 80a6f84:	bf04      	itt	eq
 80a6f86:	782c      	ldrbeq	r4, [r5, #0]
 80a6f88:	1c85      	addeq	r5, r0, #2
 80a6f8a:	e7cd      	b.n	80a6f28 <_strtol_l.constprop.0+0x38>
 80a6f8c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a6f90:	f1bc 0f19 	cmp.w	ip, #25
 80a6f94:	d801      	bhi.n	80a6f9a <_strtol_l.constprop.0+0xaa>
 80a6f96:	3c37      	subs	r4, #55	; 0x37
 80a6f98:	e7e4      	b.n	80a6f64 <_strtol_l.constprop.0+0x74>
 80a6f9a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a6f9e:	f1bc 0f19 	cmp.w	ip, #25
 80a6fa2:	d804      	bhi.n	80a6fae <_strtol_l.constprop.0+0xbe>
 80a6fa4:	3c57      	subs	r4, #87	; 0x57
 80a6fa6:	e7dd      	b.n	80a6f64 <_strtol_l.constprop.0+0x74>
 80a6fa8:	f04f 37ff 	mov.w	r7, #4294967295
 80a6fac:	e7e6      	b.n	80a6f7c <_strtol_l.constprop.0+0x8c>
 80a6fae:	2f00      	cmp	r7, #0
 80a6fb0:	da07      	bge.n	80a6fc2 <_strtol_l.constprop.0+0xd2>
 80a6fb2:	2322      	movs	r3, #34	; 0x22
 80a6fb4:	4670      	mov	r0, lr
 80a6fb6:	f8c8 3000 	str.w	r3, [r8]
 80a6fba:	2a00      	cmp	r2, #0
 80a6fbc:	d0a4      	beq.n	80a6f08 <_strtol_l.constprop.0+0x18>
 80a6fbe:	1e69      	subs	r1, r5, #1
 80a6fc0:	e005      	b.n	80a6fce <_strtol_l.constprop.0+0xde>
 80a6fc2:	b106      	cbz	r6, 80a6fc6 <_strtol_l.constprop.0+0xd6>
 80a6fc4:	4240      	negs	r0, r0
 80a6fc6:	2a00      	cmp	r2, #0
 80a6fc8:	d09e      	beq.n	80a6f08 <_strtol_l.constprop.0+0x18>
 80a6fca:	2f00      	cmp	r7, #0
 80a6fcc:	d1f7      	bne.n	80a6fbe <_strtol_l.constprop.0+0xce>
 80a6fce:	6011      	str	r1, [r2, #0]
 80a6fd0:	e79a      	b.n	80a6f08 <_strtol_l.constprop.0+0x18>
 80a6fd2:	2430      	movs	r4, #48	; 0x30
 80a6fd4:	2b00      	cmp	r3, #0
 80a6fd6:	d1b5      	bne.n	80a6f44 <_strtol_l.constprop.0+0x54>
 80a6fd8:	2308      	movs	r3, #8
 80a6fda:	e7b3      	b.n	80a6f44 <_strtol_l.constprop.0+0x54>
 80a6fdc:	2c30      	cmp	r4, #48	; 0x30
 80a6fde:	d0a9      	beq.n	80a6f34 <_strtol_l.constprop.0+0x44>
 80a6fe0:	230a      	movs	r3, #10
 80a6fe2:	e7af      	b.n	80a6f44 <_strtol_l.constprop.0+0x54>
 80a6fe4:	080a92fd 	.word	0x080a92fd

080a6fe8 <strtol>:
 80a6fe8:	4613      	mov	r3, r2
 80a6fea:	460a      	mov	r2, r1
 80a6fec:	4601      	mov	r1, r0
 80a6fee:	4802      	ldr	r0, [pc, #8]	; (80a6ff8 <strtol+0x10>)
 80a6ff0:	6800      	ldr	r0, [r0, #0]
 80a6ff2:	f7ff bf7d 	b.w	80a6ef0 <_strtol_l.constprop.0>
 80a6ff6:	bf00      	nop
 80a6ff8:	20000080 	.word	0x20000080

080a6ffc <_strtoul_l.constprop.0>:
 80a6ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a7000:	4686      	mov	lr, r0
 80a7002:	460d      	mov	r5, r1
 80a7004:	4f35      	ldr	r7, [pc, #212]	; (80a70dc <_strtoul_l.constprop.0+0xe0>)
 80a7006:	4628      	mov	r0, r5
 80a7008:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a700c:	5de6      	ldrb	r6, [r4, r7]
 80a700e:	f016 0608 	ands.w	r6, r6, #8
 80a7012:	d1f8      	bne.n	80a7006 <_strtoul_l.constprop.0+0xa>
 80a7014:	2c2d      	cmp	r4, #45	; 0x2d
 80a7016:	d12f      	bne.n	80a7078 <_strtoul_l.constprop.0+0x7c>
 80a7018:	2601      	movs	r6, #1
 80a701a:	782c      	ldrb	r4, [r5, #0]
 80a701c:	1c85      	adds	r5, r0, #2
 80a701e:	2b00      	cmp	r3, #0
 80a7020:	d057      	beq.n	80a70d2 <_strtoul_l.constprop.0+0xd6>
 80a7022:	2b10      	cmp	r3, #16
 80a7024:	d109      	bne.n	80a703a <_strtoul_l.constprop.0+0x3e>
 80a7026:	2c30      	cmp	r4, #48	; 0x30
 80a7028:	d107      	bne.n	80a703a <_strtoul_l.constprop.0+0x3e>
 80a702a:	7828      	ldrb	r0, [r5, #0]
 80a702c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7030:	2858      	cmp	r0, #88	; 0x58
 80a7032:	d149      	bne.n	80a70c8 <_strtoul_l.constprop.0+0xcc>
 80a7034:	2310      	movs	r3, #16
 80a7036:	786c      	ldrb	r4, [r5, #1]
 80a7038:	3502      	adds	r5, #2
 80a703a:	f04f 38ff 	mov.w	r8, #4294967295
 80a703e:	fbb8 f8f3 	udiv	r8, r8, r3
 80a7042:	2700      	movs	r7, #0
 80a7044:	fb03 f908 	mul.w	r9, r3, r8
 80a7048:	4638      	mov	r0, r7
 80a704a:	ea6f 0909 	mvn.w	r9, r9
 80a704e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a7052:	f1bc 0f09 	cmp.w	ip, #9
 80a7056:	d814      	bhi.n	80a7082 <_strtoul_l.constprop.0+0x86>
 80a7058:	4664      	mov	r4, ip
 80a705a:	42a3      	cmp	r3, r4
 80a705c:	dd22      	ble.n	80a70a4 <_strtoul_l.constprop.0+0xa8>
 80a705e:	2f00      	cmp	r7, #0
 80a7060:	db1d      	blt.n	80a709e <_strtoul_l.constprop.0+0xa2>
 80a7062:	4580      	cmp	r8, r0
 80a7064:	d31b      	bcc.n	80a709e <_strtoul_l.constprop.0+0xa2>
 80a7066:	d101      	bne.n	80a706c <_strtoul_l.constprop.0+0x70>
 80a7068:	45a1      	cmp	r9, r4
 80a706a:	db18      	blt.n	80a709e <_strtoul_l.constprop.0+0xa2>
 80a706c:	2701      	movs	r7, #1
 80a706e:	fb00 4003 	mla	r0, r0, r3, r4
 80a7072:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7076:	e7ea      	b.n	80a704e <_strtoul_l.constprop.0+0x52>
 80a7078:	2c2b      	cmp	r4, #43	; 0x2b
 80a707a:	bf04      	itt	eq
 80a707c:	782c      	ldrbeq	r4, [r5, #0]
 80a707e:	1c85      	addeq	r5, r0, #2
 80a7080:	e7cd      	b.n	80a701e <_strtoul_l.constprop.0+0x22>
 80a7082:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a7086:	f1bc 0f19 	cmp.w	ip, #25
 80a708a:	d801      	bhi.n	80a7090 <_strtoul_l.constprop.0+0x94>
 80a708c:	3c37      	subs	r4, #55	; 0x37
 80a708e:	e7e4      	b.n	80a705a <_strtoul_l.constprop.0+0x5e>
 80a7090:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a7094:	f1bc 0f19 	cmp.w	ip, #25
 80a7098:	d804      	bhi.n	80a70a4 <_strtoul_l.constprop.0+0xa8>
 80a709a:	3c57      	subs	r4, #87	; 0x57
 80a709c:	e7dd      	b.n	80a705a <_strtoul_l.constprop.0+0x5e>
 80a709e:	f04f 37ff 	mov.w	r7, #4294967295
 80a70a2:	e7e6      	b.n	80a7072 <_strtoul_l.constprop.0+0x76>
 80a70a4:	2f00      	cmp	r7, #0
 80a70a6:	da07      	bge.n	80a70b8 <_strtoul_l.constprop.0+0xbc>
 80a70a8:	2322      	movs	r3, #34	; 0x22
 80a70aa:	f04f 30ff 	mov.w	r0, #4294967295
 80a70ae:	f8ce 3000 	str.w	r3, [lr]
 80a70b2:	b932      	cbnz	r2, 80a70c2 <_strtoul_l.constprop.0+0xc6>
 80a70b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a70b8:	b106      	cbz	r6, 80a70bc <_strtoul_l.constprop.0+0xc0>
 80a70ba:	4240      	negs	r0, r0
 80a70bc:	2a00      	cmp	r2, #0
 80a70be:	d0f9      	beq.n	80a70b4 <_strtoul_l.constprop.0+0xb8>
 80a70c0:	b107      	cbz	r7, 80a70c4 <_strtoul_l.constprop.0+0xc8>
 80a70c2:	1e69      	subs	r1, r5, #1
 80a70c4:	6011      	str	r1, [r2, #0]
 80a70c6:	e7f5      	b.n	80a70b4 <_strtoul_l.constprop.0+0xb8>
 80a70c8:	2430      	movs	r4, #48	; 0x30
 80a70ca:	2b00      	cmp	r3, #0
 80a70cc:	d1b5      	bne.n	80a703a <_strtoul_l.constprop.0+0x3e>
 80a70ce:	2308      	movs	r3, #8
 80a70d0:	e7b3      	b.n	80a703a <_strtoul_l.constprop.0+0x3e>
 80a70d2:	2c30      	cmp	r4, #48	; 0x30
 80a70d4:	d0a9      	beq.n	80a702a <_strtoul_l.constprop.0+0x2e>
 80a70d6:	230a      	movs	r3, #10
 80a70d8:	e7af      	b.n	80a703a <_strtoul_l.constprop.0+0x3e>
 80a70da:	bf00      	nop
 80a70dc:	080a92fd 	.word	0x080a92fd

080a70e0 <strtoul>:
 80a70e0:	4613      	mov	r3, r2
 80a70e2:	460a      	mov	r2, r1
 80a70e4:	4601      	mov	r1, r0
 80a70e6:	4802      	ldr	r0, [pc, #8]	; (80a70f0 <strtoul+0x10>)
 80a70e8:	6800      	ldr	r0, [r0, #0]
 80a70ea:	f7ff bf87 	b.w	80a6ffc <_strtoul_l.constprop.0>
 80a70ee:	bf00      	nop
 80a70f0:	20000080 	.word	0x20000080

080a70f4 <__tzcalc_limits>:
 80a70f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a70f8:	4605      	mov	r5, r0
 80a70fa:	f000 fa77 	bl	80a75ec <__gettzinfo>
 80a70fe:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a7102:	429d      	cmp	r5, r3
 80a7104:	f340 8094 	ble.w	80a7230 <__tzcalc_limits+0x13c>
 80a7108:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80a710c:	18ac      	adds	r4, r5, r2
 80a710e:	f240 126d 	movw	r2, #365	; 0x16d
 80a7112:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80a7116:	10a4      	asrs	r4, r4, #2
 80a7118:	fb02 4403 	mla	r4, r2, r3, r4
 80a711c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a7120:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80a7124:	fb93 f3f2 	sdiv	r3, r3, r2
 80a7128:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80a712c:	441c      	add	r4, r3
 80a712e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a7132:	186a      	adds	r2, r5, r1
 80a7134:	fbb2 f2f3 	udiv	r2, r2, r3
 80a7138:	fb95 fef3 	sdiv	lr, r5, r3
 80a713c:	4414      	add	r4, r2
 80a713e:	2264      	movs	r2, #100	; 0x64
 80a7140:	fb03 5e1e 	mls	lr, r3, lr, r5
 80a7144:	fb95 fcf2 	sdiv	ip, r5, r2
 80a7148:	fabe f78e 	clz	r7, lr
 80a714c:	4601      	mov	r1, r0
 80a714e:	fb02 5c1c 	mls	ip, r2, ip, r5
 80a7152:	6045      	str	r5, [r0, #4]
 80a7154:	097f      	lsrs	r7, r7, #5
 80a7156:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a715a:	f005 0303 	and.w	r3, r5, #3
 80a715e:	7a0a      	ldrb	r2, [r1, #8]
 80a7160:	694d      	ldr	r5, [r1, #20]
 80a7162:	2a4a      	cmp	r2, #74	; 0x4a
 80a7164:	d12a      	bne.n	80a71bc <__tzcalc_limits+0xc8>
 80a7166:	1962      	adds	r2, r4, r5
 80a7168:	b913      	cbnz	r3, 80a7170 <__tzcalc_limits+0x7c>
 80a716a:	f1bc 0f00 	cmp.w	ip, #0
 80a716e:	d102      	bne.n	80a7176 <__tzcalc_limits+0x82>
 80a7170:	f1be 0f00 	cmp.w	lr, #0
 80a7174:	d120      	bne.n	80a71b8 <__tzcalc_limits+0xc4>
 80a7176:	2d3b      	cmp	r5, #59	; 0x3b
 80a7178:	bfd4      	ite	le
 80a717a:	2500      	movle	r5, #0
 80a717c:	2501      	movgt	r5, #1
 80a717e:	4415      	add	r5, r2
 80a7180:	3d01      	subs	r5, #1
 80a7182:	698e      	ldr	r6, [r1, #24]
 80a7184:	4a2b      	ldr	r2, [pc, #172]	; (80a7234 <__tzcalc_limits+0x140>)
 80a7186:	fb02 6505 	mla	r5, r2, r5, r6
 80a718a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80a718c:	4415      	add	r5, r2
 80a718e:	17ea      	asrs	r2, r5, #31
 80a7190:	e9c1 5208 	strd	r5, r2, [r1, #32]
 80a7194:	3128      	adds	r1, #40	; 0x28
 80a7196:	458b      	cmp	fp, r1
 80a7198:	d1e1      	bne.n	80a715e <__tzcalc_limits+0x6a>
 80a719a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80a719e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80a71a2:	428c      	cmp	r4, r1
 80a71a4:	eb72 0303 	sbcs.w	r3, r2, r3
 80a71a8:	bfb4      	ite	lt
 80a71aa:	2301      	movlt	r3, #1
 80a71ac:	2300      	movge	r3, #0
 80a71ae:	6003      	str	r3, [r0, #0]
 80a71b0:	2001      	movs	r0, #1
 80a71b2:	b003      	add	sp, #12
 80a71b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a71b8:	2500      	movs	r5, #0
 80a71ba:	e7e0      	b.n	80a717e <__tzcalc_limits+0x8a>
 80a71bc:	2a44      	cmp	r2, #68	; 0x44
 80a71be:	d101      	bne.n	80a71c4 <__tzcalc_limits+0xd0>
 80a71c0:	4425      	add	r5, r4
 80a71c2:	e7de      	b.n	80a7182 <__tzcalc_limits+0x8e>
 80a71c4:	bb73      	cbnz	r3, 80a7224 <__tzcalc_limits+0x130>
 80a71c6:	f1bc 0f00 	cmp.w	ip, #0
 80a71ca:	bf0c      	ite	eq
 80a71cc:	463e      	moveq	r6, r7
 80a71ce:	2601      	movne	r6, #1
 80a71d0:	f04f 0830 	mov.w	r8, #48	; 0x30
 80a71d4:	68ca      	ldr	r2, [r1, #12]
 80a71d6:	f04f 0900 	mov.w	r9, #0
 80a71da:	9201      	str	r2, [sp, #4]
 80a71dc:	4622      	mov	r2, r4
 80a71de:	f8df a058 	ldr.w	sl, [pc, #88]	; 80a7238 <__tzcalc_limits+0x144>
 80a71e2:	fb08 a606 	mla	r6, r8, r6, sl
 80a71e6:	3e04      	subs	r6, #4
 80a71e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80a71ec:	f109 0901 	add.w	r9, r9, #1
 80a71f0:	45c8      	cmp	r8, r9
 80a71f2:	f856 a029 	ldr.w	sl, [r6, r9, lsl #2]
 80a71f6:	dc17      	bgt.n	80a7228 <__tzcalc_limits+0x134>
 80a71f8:	f04f 0807 	mov.w	r8, #7
 80a71fc:	1d16      	adds	r6, r2, #4
 80a71fe:	fb96 f9f8 	sdiv	r9, r6, r8
 80a7202:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a7206:	eba6 0909 	sub.w	r9, r6, r9
 80a720a:	ebb5 0909 	subs.w	r9, r5, r9
 80a720e:	690d      	ldr	r5, [r1, #16]
 80a7210:	bf48      	it	mi
 80a7212:	44c1      	addmi	r9, r8
 80a7214:	3d01      	subs	r5, #1
 80a7216:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80a721a:	444d      	add	r5, r9
 80a721c:	4555      	cmp	r5, sl
 80a721e:	da05      	bge.n	80a722c <__tzcalc_limits+0x138>
 80a7220:	4415      	add	r5, r2
 80a7222:	e7ae      	b.n	80a7182 <__tzcalc_limits+0x8e>
 80a7224:	463e      	mov	r6, r7
 80a7226:	e7d3      	b.n	80a71d0 <__tzcalc_limits+0xdc>
 80a7228:	4452      	add	r2, sl
 80a722a:	e7dd      	b.n	80a71e8 <__tzcalc_limits+0xf4>
 80a722c:	3d07      	subs	r5, #7
 80a722e:	e7f5      	b.n	80a721c <__tzcalc_limits+0x128>
 80a7230:	2000      	movs	r0, #0
 80a7232:	e7be      	b.n	80a71b2 <__tzcalc_limits+0xbe>
 80a7234:	00015180 	.word	0x00015180
 80a7238:	080a91cc 	.word	0x080a91cc

080a723c <__tz_lock>:
 80a723c:	4801      	ldr	r0, [pc, #4]	; (80a7244 <__tz_lock+0x8>)
 80a723e:	f000 ba87 	b.w	80a7750 <__retarget_lock_acquire>
 80a7242:	bf00      	nop
 80a7244:	20000955 	.word	0x20000955

080a7248 <__tz_unlock>:
 80a7248:	4801      	ldr	r0, [pc, #4]	; (80a7250 <__tz_unlock+0x8>)
 80a724a:	f000 ba83 	b.w	80a7754 <__retarget_lock_release>
 80a724e:	bf00      	nop
 80a7250:	20000955 	.word	0x20000955

080a7254 <_tzset_unlocked>:
 80a7254:	4b01      	ldr	r3, [pc, #4]	; (80a725c <_tzset_unlocked+0x8>)
 80a7256:	6818      	ldr	r0, [r3, #0]
 80a7258:	f000 b802 	b.w	80a7260 <_tzset_unlocked_r>
 80a725c:	20000080 	.word	0x20000080

080a7260 <_tzset_unlocked_r>:
 80a7260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7264:	b08d      	sub	sp, #52	; 0x34
 80a7266:	4607      	mov	r7, r0
 80a7268:	f000 f9c0 	bl	80a75ec <__gettzinfo>
 80a726c:	49b1      	ldr	r1, [pc, #708]	; (80a7534 <_tzset_unlocked_r+0x2d4>)
 80a726e:	4605      	mov	r5, r0
 80a7270:	4638      	mov	r0, r7
 80a7272:	f000 f9b3 	bl	80a75dc <_getenv_r>
 80a7276:	4eb0      	ldr	r6, [pc, #704]	; (80a7538 <_tzset_unlocked_r+0x2d8>)
 80a7278:	4604      	mov	r4, r0
 80a727a:	b970      	cbnz	r0, 80a729a <_tzset_unlocked_r+0x3a>
 80a727c:	4baf      	ldr	r3, [pc, #700]	; (80a753c <_tzset_unlocked_r+0x2dc>)
 80a727e:	4ab0      	ldr	r2, [pc, #704]	; (80a7540 <_tzset_unlocked_r+0x2e0>)
 80a7280:	6018      	str	r0, [r3, #0]
 80a7282:	4bb0      	ldr	r3, [pc, #704]	; (80a7544 <_tzset_unlocked_r+0x2e4>)
 80a7284:	6018      	str	r0, [r3, #0]
 80a7286:	4bb0      	ldr	r3, [pc, #704]	; (80a7548 <_tzset_unlocked_r+0x2e8>)
 80a7288:	6830      	ldr	r0, [r6, #0]
 80a728a:	e9c3 2200 	strd	r2, r2, [r3]
 80a728e:	f7fc fcd5 	bl	80a3c3c <free>
 80a7292:	6034      	str	r4, [r6, #0]
 80a7294:	b00d      	add	sp, #52	; 0x34
 80a7296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a729a:	6831      	ldr	r1, [r6, #0]
 80a729c:	2900      	cmp	r1, #0
 80a729e:	d162      	bne.n	80a7366 <_tzset_unlocked_r+0x106>
 80a72a0:	6830      	ldr	r0, [r6, #0]
 80a72a2:	f7fc fccb 	bl	80a3c3c <free>
 80a72a6:	4620      	mov	r0, r4
 80a72a8:	f7ff fdf3 	bl	80a6e92 <strlen>
 80a72ac:	1c41      	adds	r1, r0, #1
 80a72ae:	4638      	mov	r0, r7
 80a72b0:	f7fc fcfc 	bl	80a3cac <_malloc_r>
 80a72b4:	6030      	str	r0, [r6, #0]
 80a72b6:	2800      	cmp	r0, #0
 80a72b8:	d15a      	bne.n	80a7370 <_tzset_unlocked_r+0x110>
 80a72ba:	7823      	ldrb	r3, [r4, #0]
 80a72bc:	ae0a      	add	r6, sp, #40	; 0x28
 80a72be:	2b3a      	cmp	r3, #58	; 0x3a
 80a72c0:	bf08      	it	eq
 80a72c2:	3401      	addeq	r4, #1
 80a72c4:	4633      	mov	r3, r6
 80a72c6:	4620      	mov	r0, r4
 80a72c8:	4aa0      	ldr	r2, [pc, #640]	; (80a754c <_tzset_unlocked_r+0x2ec>)
 80a72ca:	49a1      	ldr	r1, [pc, #644]	; (80a7550 <_tzset_unlocked_r+0x2f0>)
 80a72cc:	f7fc fcce 	bl	80a3c6c <siscanf>
 80a72d0:	2800      	cmp	r0, #0
 80a72d2:	dddf      	ble.n	80a7294 <_tzset_unlocked_r+0x34>
 80a72d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a72d6:	18e7      	adds	r7, r4, r3
 80a72d8:	5ce3      	ldrb	r3, [r4, r3]
 80a72da:	2b2d      	cmp	r3, #45	; 0x2d
 80a72dc:	d14c      	bne.n	80a7378 <_tzset_unlocked_r+0x118>
 80a72de:	f04f 38ff 	mov.w	r8, #4294967295
 80a72e2:	3701      	adds	r7, #1
 80a72e4:	2400      	movs	r4, #0
 80a72e6:	f10d 0a20 	add.w	sl, sp, #32
 80a72ea:	f10d 0b1e 	add.w	fp, sp, #30
 80a72ee:	4633      	mov	r3, r6
 80a72f0:	4638      	mov	r0, r7
 80a72f2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a72f6:	4997      	ldr	r1, [pc, #604]	; (80a7554 <_tzset_unlocked_r+0x2f4>)
 80a72f8:	9603      	str	r6, [sp, #12]
 80a72fa:	f8cd b000 	str.w	fp, [sp]
 80a72fe:	aa07      	add	r2, sp, #28
 80a7300:	f8ad 401e 	strh.w	r4, [sp, #30]
 80a7304:	f8ad 4020 	strh.w	r4, [sp, #32]
 80a7308:	f7fc fcb0 	bl	80a3c6c <siscanf>
 80a730c:	42a0      	cmp	r0, r4
 80a730e:	ddc1      	ble.n	80a7294 <_tzset_unlocked_r+0x34>
 80a7310:	213c      	movs	r1, #60	; 0x3c
 80a7312:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a7316:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a731a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a7558 <_tzset_unlocked_r+0x2f8>
 80a731e:	fb01 3302 	mla	r3, r1, r2, r3
 80a7322:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7326:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a732a:	fb01 3302 	mla	r3, r1, r2, r3
 80a732e:	fb08 f303 	mul.w	r3, r8, r3
 80a7332:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80a7548 <_tzset_unlocked_r+0x2e8>
 80a7336:	62ab      	str	r3, [r5, #40]	; 0x28
 80a7338:	4b84      	ldr	r3, [pc, #528]	; (80a754c <_tzset_unlocked_r+0x2ec>)
 80a733a:	464a      	mov	r2, r9
 80a733c:	f8c8 3000 	str.w	r3, [r8]
 80a7340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7342:	4983      	ldr	r1, [pc, #524]	; (80a7550 <_tzset_unlocked_r+0x2f0>)
 80a7344:	441f      	add	r7, r3
 80a7346:	4638      	mov	r0, r7
 80a7348:	4633      	mov	r3, r6
 80a734a:	f7fc fc8f 	bl	80a3c6c <siscanf>
 80a734e:	42a0      	cmp	r0, r4
 80a7350:	dc18      	bgt.n	80a7384 <_tzset_unlocked_r+0x124>
 80a7352:	f8d8 3000 	ldr.w	r3, [r8]
 80a7356:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7358:	f8c8 3004 	str.w	r3, [r8, #4]
 80a735c:	4b77      	ldr	r3, [pc, #476]	; (80a753c <_tzset_unlocked_r+0x2dc>)
 80a735e:	601a      	str	r2, [r3, #0]
 80a7360:	4b78      	ldr	r3, [pc, #480]	; (80a7544 <_tzset_unlocked_r+0x2e4>)
 80a7362:	601c      	str	r4, [r3, #0]
 80a7364:	e796      	b.n	80a7294 <_tzset_unlocked_r+0x34>
 80a7366:	f7ff fd67 	bl	80a6e38 <strcmp>
 80a736a:	2800      	cmp	r0, #0
 80a736c:	d198      	bne.n	80a72a0 <_tzset_unlocked_r+0x40>
 80a736e:	e791      	b.n	80a7294 <_tzset_unlocked_r+0x34>
 80a7370:	4621      	mov	r1, r4
 80a7372:	f7ff fd6b 	bl	80a6e4c <strcpy>
 80a7376:	e7a0      	b.n	80a72ba <_tzset_unlocked_r+0x5a>
 80a7378:	2b2b      	cmp	r3, #43	; 0x2b
 80a737a:	f04f 0801 	mov.w	r8, #1
 80a737e:	bf08      	it	eq
 80a7380:	3701      	addeq	r7, #1
 80a7382:	e7af      	b.n	80a72e4 <_tzset_unlocked_r+0x84>
 80a7384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7386:	f8c8 9004 	str.w	r9, [r8, #4]
 80a738a:	18fc      	adds	r4, r7, r3
 80a738c:	5cfb      	ldrb	r3, [r7, r3]
 80a738e:	2b2d      	cmp	r3, #45	; 0x2d
 80a7390:	f040 808c 	bne.w	80a74ac <_tzset_unlocked_r+0x24c>
 80a7394:	f04f 37ff 	mov.w	r7, #4294967295
 80a7398:	3401      	adds	r4, #1
 80a739a:	2300      	movs	r3, #0
 80a739c:	4620      	mov	r0, r4
 80a739e:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a73a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a73a6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a73aa:	930a      	str	r3, [sp, #40]	; 0x28
 80a73ac:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a73b0:	4633      	mov	r3, r6
 80a73b2:	e9cd b600 	strd	fp, r6, [sp]
 80a73b6:	4967      	ldr	r1, [pc, #412]	; (80a7554 <_tzset_unlocked_r+0x2f4>)
 80a73b8:	aa07      	add	r2, sp, #28
 80a73ba:	f7fc fc57 	bl	80a3c6c <siscanf>
 80a73be:	2800      	cmp	r0, #0
 80a73c0:	dc7a      	bgt.n	80a74b8 <_tzset_unlocked_r+0x258>
 80a73c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a73c4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a73c8:	462f      	mov	r7, r5
 80a73ca:	f04f 0900 	mov.w	r9, #0
 80a73ce:	652b      	str	r3, [r5, #80]	; 0x50
 80a73d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a73d2:	441c      	add	r4, r3
 80a73d4:	7823      	ldrb	r3, [r4, #0]
 80a73d6:	2b2c      	cmp	r3, #44	; 0x2c
 80a73d8:	bf08      	it	eq
 80a73da:	3401      	addeq	r4, #1
 80a73dc:	f894 8000 	ldrb.w	r8, [r4]
 80a73e0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a73e4:	d17a      	bne.n	80a74dc <_tzset_unlocked_r+0x27c>
 80a73e6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a73ea:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a73ee:	ab09      	add	r3, sp, #36	; 0x24
 80a73f0:	9300      	str	r3, [sp, #0]
 80a73f2:	4620      	mov	r0, r4
 80a73f4:	4633      	mov	r3, r6
 80a73f6:	4959      	ldr	r1, [pc, #356]	; (80a755c <_tzset_unlocked_r+0x2fc>)
 80a73f8:	9603      	str	r6, [sp, #12]
 80a73fa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a73fe:	f7fc fc35 	bl	80a3c6c <siscanf>
 80a7402:	2803      	cmp	r0, #3
 80a7404:	f47f af46 	bne.w	80a7294 <_tzset_unlocked_r+0x34>
 80a7408:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a740c:	1e4b      	subs	r3, r1, #1
 80a740e:	2b0b      	cmp	r3, #11
 80a7410:	f63f af40 	bhi.w	80a7294 <_tzset_unlocked_r+0x34>
 80a7414:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a7418:	1e53      	subs	r3, r2, #1
 80a741a:	2b04      	cmp	r3, #4
 80a741c:	f63f af3a 	bhi.w	80a7294 <_tzset_unlocked_r+0x34>
 80a7420:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a7424:	2b06      	cmp	r3, #6
 80a7426:	f63f af35 	bhi.w	80a7294 <_tzset_unlocked_r+0x34>
 80a742a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a742e:	f887 8008 	strb.w	r8, [r7, #8]
 80a7432:	617b      	str	r3, [r7, #20]
 80a7434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7436:	eb04 0803 	add.w	r8, r4, r3
 80a743a:	2302      	movs	r3, #2
 80a743c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7440:	2300      	movs	r3, #0
 80a7442:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7446:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a744a:	930a      	str	r3, [sp, #40]	; 0x28
 80a744c:	f898 3000 	ldrb.w	r3, [r8]
 80a7450:	2b2f      	cmp	r3, #47	; 0x2f
 80a7452:	d109      	bne.n	80a7468 <_tzset_unlocked_r+0x208>
 80a7454:	4633      	mov	r3, r6
 80a7456:	4640      	mov	r0, r8
 80a7458:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a745c:	e9cd b600 	strd	fp, r6, [sp]
 80a7460:	493f      	ldr	r1, [pc, #252]	; (80a7560 <_tzset_unlocked_r+0x300>)
 80a7462:	aa07      	add	r2, sp, #28
 80a7464:	f7fc fc02 	bl	80a3c6c <siscanf>
 80a7468:	213c      	movs	r1, #60	; 0x3c
 80a746a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a746e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a7472:	3728      	adds	r7, #40	; 0x28
 80a7474:	fb01 3302 	mla	r3, r1, r2, r3
 80a7478:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a747c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a7480:	fb01 3302 	mla	r3, r1, r2, r3
 80a7484:	f847 3c10 	str.w	r3, [r7, #-16]
 80a7488:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a748a:	4444      	add	r4, r8
 80a748c:	f1b9 0f00 	cmp.w	r9, #0
 80a7490:	d021      	beq.n	80a74d6 <_tzset_unlocked_r+0x276>
 80a7492:	6868      	ldr	r0, [r5, #4]
 80a7494:	f7ff fe2e 	bl	80a70f4 <__tzcalc_limits>
 80a7498:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a749a:	4b28      	ldr	r3, [pc, #160]	; (80a753c <_tzset_unlocked_r+0x2dc>)
 80a749c:	601a      	str	r2, [r3, #0]
 80a749e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a74a0:	1a9b      	subs	r3, r3, r2
 80a74a2:	bf18      	it	ne
 80a74a4:	2301      	movne	r3, #1
 80a74a6:	4a27      	ldr	r2, [pc, #156]	; (80a7544 <_tzset_unlocked_r+0x2e4>)
 80a74a8:	6013      	str	r3, [r2, #0]
 80a74aa:	e6f3      	b.n	80a7294 <_tzset_unlocked_r+0x34>
 80a74ac:	2b2b      	cmp	r3, #43	; 0x2b
 80a74ae:	f04f 0701 	mov.w	r7, #1
 80a74b2:	bf08      	it	eq
 80a74b4:	3401      	addeq	r4, #1
 80a74b6:	e770      	b.n	80a739a <_tzset_unlocked_r+0x13a>
 80a74b8:	213c      	movs	r1, #60	; 0x3c
 80a74ba:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a74be:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a74c2:	fb01 3302 	mla	r3, r1, r2, r3
 80a74c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a74ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a74ce:	fb01 3302 	mla	r3, r1, r2, r3
 80a74d2:	437b      	muls	r3, r7
 80a74d4:	e778      	b.n	80a73c8 <_tzset_unlocked_r+0x168>
 80a74d6:	f04f 0901 	mov.w	r9, #1
 80a74da:	e77b      	b.n	80a73d4 <_tzset_unlocked_r+0x174>
 80a74dc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a74e0:	bf0a      	itet	eq
 80a74e2:	4643      	moveq	r3, r8
 80a74e4:	2344      	movne	r3, #68	; 0x44
 80a74e6:	3401      	addeq	r4, #1
 80a74e8:	220a      	movs	r2, #10
 80a74ea:	4620      	mov	r0, r4
 80a74ec:	a90b      	add	r1, sp, #44	; 0x2c
 80a74ee:	9305      	str	r3, [sp, #20]
 80a74f0:	f7ff fdf6 	bl	80a70e0 <strtoul>
 80a74f4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a74f8:	9b05      	ldr	r3, [sp, #20]
 80a74fa:	45a0      	cmp	r8, r4
 80a74fc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a7500:	d114      	bne.n	80a752c <_tzset_unlocked_r+0x2cc>
 80a7502:	234d      	movs	r3, #77	; 0x4d
 80a7504:	f1b9 0f00 	cmp.w	r9, #0
 80a7508:	d107      	bne.n	80a751a <_tzset_unlocked_r+0x2ba>
 80a750a:	2103      	movs	r1, #3
 80a750c:	722b      	strb	r3, [r5, #8]
 80a750e:	2302      	movs	r3, #2
 80a7510:	f8c5 9014 	str.w	r9, [r5, #20]
 80a7514:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a7518:	e78f      	b.n	80a743a <_tzset_unlocked_r+0x1da>
 80a751a:	220b      	movs	r2, #11
 80a751c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a7520:	2301      	movs	r3, #1
 80a7522:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a7526:	2300      	movs	r3, #0
 80a7528:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a752a:	e786      	b.n	80a743a <_tzset_unlocked_r+0x1da>
 80a752c:	b280      	uxth	r0, r0
 80a752e:	723b      	strb	r3, [r7, #8]
 80a7530:	6178      	str	r0, [r7, #20]
 80a7532:	e782      	b.n	80a743a <_tzset_unlocked_r+0x1da>
 80a7534:	080a92c0 	.word	0x080a92c0
 80a7538:	20000948 	.word	0x20000948
 80a753c:	20000950 	.word	0x20000950
 80a7540:	080a92c3 	.word	0x080a92c3
 80a7544:	2000094c 	.word	0x2000094c
 80a7548:	200000e4 	.word	0x200000e4
 80a754c:	2000093b 	.word	0x2000093b
 80a7550:	080a92c7 	.word	0x080a92c7
 80a7554:	080a92ea 	.word	0x080a92ea
 80a7558:	20000930 	.word	0x20000930
 80a755c:	080a92d6 	.word	0x080a92d6
 80a7560:	080a92e9 	.word	0x080a92e9

080a7564 <_findenv_r>:
 80a7564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7568:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80a75d8 <_findenv_r+0x74>
 80a756c:	4607      	mov	r7, r0
 80a756e:	4689      	mov	r9, r1
 80a7570:	4616      	mov	r6, r2
 80a7572:	f000 f8f1 	bl	80a7758 <__env_lock>
 80a7576:	f8da 4000 	ldr.w	r4, [sl]
 80a757a:	b134      	cbz	r4, 80a758a <_findenv_r+0x26>
 80a757c:	464b      	mov	r3, r9
 80a757e:	4698      	mov	r8, r3
 80a7580:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a7584:	b13a      	cbz	r2, 80a7596 <_findenv_r+0x32>
 80a7586:	2a3d      	cmp	r2, #61	; 0x3d
 80a7588:	d1f9      	bne.n	80a757e <_findenv_r+0x1a>
 80a758a:	4638      	mov	r0, r7
 80a758c:	f000 f8ea 	bl	80a7764 <__env_unlock>
 80a7590:	2000      	movs	r0, #0
 80a7592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7596:	eba8 0809 	sub.w	r8, r8, r9
 80a759a:	46a3      	mov	fp, r4
 80a759c:	f854 0b04 	ldr.w	r0, [r4], #4
 80a75a0:	2800      	cmp	r0, #0
 80a75a2:	d0f2      	beq.n	80a758a <_findenv_r+0x26>
 80a75a4:	4642      	mov	r2, r8
 80a75a6:	4649      	mov	r1, r9
 80a75a8:	f7ff fc7b 	bl	80a6ea2 <strncmp>
 80a75ac:	2800      	cmp	r0, #0
 80a75ae:	d1f4      	bne.n	80a759a <_findenv_r+0x36>
 80a75b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a75b4:	eb03 0508 	add.w	r5, r3, r8
 80a75b8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a75bc:	2b3d      	cmp	r3, #61	; 0x3d
 80a75be:	d1ec      	bne.n	80a759a <_findenv_r+0x36>
 80a75c0:	f8da 3000 	ldr.w	r3, [sl]
 80a75c4:	4638      	mov	r0, r7
 80a75c6:	ebab 0303 	sub.w	r3, fp, r3
 80a75ca:	109b      	asrs	r3, r3, #2
 80a75cc:	6033      	str	r3, [r6, #0]
 80a75ce:	f000 f8c9 	bl	80a7764 <__env_unlock>
 80a75d2:	1c68      	adds	r0, r5, #1
 80a75d4:	e7dd      	b.n	80a7592 <_findenv_r+0x2e>
 80a75d6:	bf00      	nop
 80a75d8:	20000148 	.word	0x20000148

080a75dc <_getenv_r>:
 80a75dc:	b507      	push	{r0, r1, r2, lr}
 80a75de:	aa01      	add	r2, sp, #4
 80a75e0:	f7ff ffc0 	bl	80a7564 <_findenv_r>
 80a75e4:	b003      	add	sp, #12
 80a75e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a75ec <__gettzinfo>:
 80a75ec:	4800      	ldr	r0, [pc, #0]	; (80a75f0 <__gettzinfo+0x4>)
 80a75ee:	4770      	bx	lr
 80a75f0:	200000f0 	.word	0x200000f0

080a75f4 <gmtime_r>:
 80a75f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a75f8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a75fc:	460c      	mov	r4, r1
 80a75fe:	2300      	movs	r3, #0
 80a7600:	4630      	mov	r0, r6
 80a7602:	4639      	mov	r1, r7
 80a7604:	4a4e      	ldr	r2, [pc, #312]	; (80a7740 <gmtime_r+0x14c>)
 80a7606:	f000 f8b3 	bl	80a7770 <__aeabi_ldivmod>
 80a760a:	4639      	mov	r1, r7
 80a760c:	4605      	mov	r5, r0
 80a760e:	2300      	movs	r3, #0
 80a7610:	4630      	mov	r0, r6
 80a7612:	4a4b      	ldr	r2, [pc, #300]	; (80a7740 <gmtime_r+0x14c>)
 80a7614:	f000 f8ac 	bl	80a7770 <__aeabi_ldivmod>
 80a7618:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a761c:	2a00      	cmp	r2, #0
 80a761e:	bfbc      	itt	lt
 80a7620:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a7624:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a7628:	fbb2 f1f0 	udiv	r1, r2, r0
 80a762c:	fb00 2211 	mls	r2, r0, r1, r2
 80a7630:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a7634:	60a1      	str	r1, [r4, #8]
 80a7636:	fbb2 f1f0 	udiv	r1, r2, r0
 80a763a:	fb00 2211 	mls	r2, r0, r1, r2
 80a763e:	6061      	str	r1, [r4, #4]
 80a7640:	f04f 0107 	mov.w	r1, #7
 80a7644:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 80a7648:	bfac      	ite	ge
 80a764a:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 80a764e:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 80a7652:	6022      	str	r2, [r4, #0]
 80a7654:	1cda      	adds	r2, r3, #3
 80a7656:	fb92 f1f1 	sdiv	r1, r2, r1
 80a765a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80a765e:	1a52      	subs	r2, r2, r1
 80a7660:	bf48      	it	mi
 80a7662:	3207      	addmi	r2, #7
 80a7664:	2b00      	cmp	r3, #0
 80a7666:	4d37      	ldr	r5, [pc, #220]	; (80a7744 <gmtime_r+0x150>)
 80a7668:	61a2      	str	r2, [r4, #24]
 80a766a:	bfbd      	ittte	lt
 80a766c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80a7670:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80a7674:	fb92 f5f5 	sdivlt	r5, r2, r5
 80a7678:	fb93 f5f5 	sdivge	r5, r3, r5
 80a767c:	4832      	ldr	r0, [pc, #200]	; (80a7748 <gmtime_r+0x154>)
 80a767e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a7682:	fb00 3005 	mla	r0, r0, r5, r3
 80a7686:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80a768a:	fbb0 f2f2 	udiv	r2, r0, r2
 80a768e:	fbb0 f1f3 	udiv	r1, r0, r3
 80a7692:	4402      	add	r2, r0
 80a7694:	1a52      	subs	r2, r2, r1
 80a7696:	492d      	ldr	r1, [pc, #180]	; (80a774c <gmtime_r+0x158>)
 80a7698:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a769c:	fbb0 f1f1 	udiv	r1, r0, r1
 80a76a0:	1a52      	subs	r2, r2, r1
 80a76a2:	fbb2 f1fc 	udiv	r1, r2, ip
 80a76a6:	2764      	movs	r7, #100	; 0x64
 80a76a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80a76ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80a76b0:	2299      	movs	r2, #153	; 0x99
 80a76b2:	1af3      	subs	r3, r6, r3
 80a76b4:	4403      	add	r3, r0
 80a76b6:	fb0c 3311 	mls	r3, ip, r1, r3
 80a76ba:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80a76be:	f10e 0e02 	add.w	lr, lr, #2
 80a76c2:	fbbe f0f2 	udiv	r0, lr, r2
 80a76c6:	f04f 0805 	mov.w	r8, #5
 80a76ca:	4342      	muls	r2, r0
 80a76cc:	3202      	adds	r2, #2
 80a76ce:	fbb2 f2f8 	udiv	r2, r2, r8
 80a76d2:	f103 0c01 	add.w	ip, r3, #1
 80a76d6:	ebac 0c02 	sub.w	ip, ip, r2
 80a76da:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80a76de:	4596      	cmp	lr, r2
 80a76e0:	bf94      	ite	ls
 80a76e2:	2202      	movls	r2, #2
 80a76e4:	f06f 0209 	mvnhi.w	r2, #9
 80a76e8:	4410      	add	r0, r2
 80a76ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a76ee:	fb02 1505 	mla	r5, r2, r5, r1
 80a76f2:	2801      	cmp	r0, #1
 80a76f4:	bf98      	it	ls
 80a76f6:	3501      	addls	r5, #1
 80a76f8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a76fc:	d30d      	bcc.n	80a771a <gmtime_r+0x126>
 80a76fe:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a7702:	61e3      	str	r3, [r4, #28]
 80a7704:	2300      	movs	r3, #0
 80a7706:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a770a:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80a770e:	f8c4 c00c 	str.w	ip, [r4, #12]
 80a7712:	4620      	mov	r0, r4
 80a7714:	6223      	str	r3, [r4, #32]
 80a7716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a771a:	078a      	lsls	r2, r1, #30
 80a771c:	d102      	bne.n	80a7724 <gmtime_r+0x130>
 80a771e:	fb07 1616 	mls	r6, r7, r6, r1
 80a7722:	b95e      	cbnz	r6, 80a773c <gmtime_r+0x148>
 80a7724:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a7728:	fbb1 f6f2 	udiv	r6, r1, r2
 80a772c:	fb02 1216 	mls	r2, r2, r6, r1
 80a7730:	fab2 f282 	clz	r2, r2
 80a7734:	0952      	lsrs	r2, r2, #5
 80a7736:	333b      	adds	r3, #59	; 0x3b
 80a7738:	4413      	add	r3, r2
 80a773a:	e7e2      	b.n	80a7702 <gmtime_r+0x10e>
 80a773c:	2201      	movs	r2, #1
 80a773e:	e7fa      	b.n	80a7736 <gmtime_r+0x142>
 80a7740:	00015180 	.word	0x00015180
 80a7744:	00023ab1 	.word	0x00023ab1
 80a7748:	fffdc54f 	.word	0xfffdc54f
 80a774c:	00023ab0 	.word	0x00023ab0

080a7750 <__retarget_lock_acquire>:
 80a7750:	4770      	bx	lr

080a7752 <__retarget_lock_acquire_recursive>:
 80a7752:	4770      	bx	lr

080a7754 <__retarget_lock_release>:
 80a7754:	4770      	bx	lr

080a7756 <__retarget_lock_release_recursive>:
 80a7756:	4770      	bx	lr

080a7758 <__env_lock>:
 80a7758:	4801      	ldr	r0, [pc, #4]	; (80a7760 <__env_lock+0x8>)
 80a775a:	f7ff bffa 	b.w	80a7752 <__retarget_lock_acquire_recursive>
 80a775e:	bf00      	nop
 80a7760:	20000954 	.word	0x20000954

080a7764 <__env_unlock>:
 80a7764:	4801      	ldr	r0, [pc, #4]	; (80a776c <__env_unlock+0x8>)
 80a7766:	f7ff bff6 	b.w	80a7756 <__retarget_lock_release_recursive>
 80a776a:	bf00      	nop
 80a776c:	20000954 	.word	0x20000954

080a7770 <__aeabi_ldivmod>:
 80a7770:	b97b      	cbnz	r3, 80a7792 <__aeabi_ldivmod+0x22>
 80a7772:	b972      	cbnz	r2, 80a7792 <__aeabi_ldivmod+0x22>
 80a7774:	2900      	cmp	r1, #0
 80a7776:	bfbe      	ittt	lt
 80a7778:	2000      	movlt	r0, #0
 80a777a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a777e:	e006      	blt.n	80a778e <__aeabi_ldivmod+0x1e>
 80a7780:	bf08      	it	eq
 80a7782:	2800      	cmpeq	r0, #0
 80a7784:	bf1c      	itt	ne
 80a7786:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a778a:	f04f 30ff 	movne.w	r0, #4294967295
 80a778e:	f7ff ba05 	b.w	80a6b9c <__aeabi_idiv0>
 80a7792:	f1ad 0c08 	sub.w	ip, sp, #8
 80a7796:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a779a:	2900      	cmp	r1, #0
 80a779c:	db09      	blt.n	80a77b2 <__aeabi_ldivmod+0x42>
 80a779e:	2b00      	cmp	r3, #0
 80a77a0:	db1a      	blt.n	80a77d8 <__aeabi_ldivmod+0x68>
 80a77a2:	f7ff f891 	bl	80a68c8 <__udivmoddi4>
 80a77a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a77aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a77ae:	b004      	add	sp, #16
 80a77b0:	4770      	bx	lr
 80a77b2:	4240      	negs	r0, r0
 80a77b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a77b8:	2b00      	cmp	r3, #0
 80a77ba:	db1b      	blt.n	80a77f4 <__aeabi_ldivmod+0x84>
 80a77bc:	f7ff f884 	bl	80a68c8 <__udivmoddi4>
 80a77c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a77c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a77c8:	b004      	add	sp, #16
 80a77ca:	4240      	negs	r0, r0
 80a77cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a77d0:	4252      	negs	r2, r2
 80a77d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a77d6:	4770      	bx	lr
 80a77d8:	4252      	negs	r2, r2
 80a77da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a77de:	f7ff f873 	bl	80a68c8 <__udivmoddi4>
 80a77e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a77e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a77ea:	b004      	add	sp, #16
 80a77ec:	4240      	negs	r0, r0
 80a77ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a77f2:	4770      	bx	lr
 80a77f4:	4252      	negs	r2, r2
 80a77f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a77fa:	f7ff f865 	bl	80a68c8 <__udivmoddi4>
 80a77fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a7802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7806:	b004      	add	sp, #16
 80a7808:	4252      	negs	r2, r2
 80a780a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a780e:	4770      	bx	lr

080a7810 <dynalib_user>:
 80a7810:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a7820:	0000 0000 2323 2023 4157 4e52 4e49 2047     ....### WARNING 
 80a7830:	203a 6f6e 2074 6f63 6e6e 6365 6574 2064     : not connected 
 80a7840:	6f74 6320 6f6c 6475 202e 6163 6e6e 746f     to cloud. cannot
 80a7850:	7720 6972 6574 7420 206f 6164 6174 6162      write to databa
 80a7860:	6573 7b00 7322 6174 7574 2273 223a 7325     se.{"status":"%s
 80a7870:	2c22 7422 6d69 2265 223a 2e25 6432 253a     ","time":"%.2d:%
 80a7880:	322e 3a64 2e25 6432 2c22 6422 7461 2265     .2d:%.2d","date"
 80a7890:	223a 2e25 6432 252e 322e 2e64 2e25 6432     :"%.2d.%.2d.%.2d
 80a78a0:	2c22 6c22 6575 7466 7265 3a22 5022 4f48     ","luefter":"PHO
 80a78b0:	4f54 224e 222c 706f 6974 6e6f 3a22 2522     TON","option":"%
 80a78c0:	2273 007d 6177 7373 7265 7473 6e61 0064     s"}.wasserstand.
 80a78d0:	227b 7473 7461 7375 3a22 2522 2273 222c     {"status":"%s","
 80a78e0:	6974 656d 3a22 2522 322e 3a64 2e25 6432     time":"%.2d:%.2d
 80a78f0:	253a 322e 2264 222c 6164 6574 3a22 2522     :%.2d","date":"%
 80a7900:	322e 2e64 2e25 6432 252e 322e 2264 222c     .2d.%.2d.%.2d","
 80a7910:	756c 6665 6574 2272 223a 4850 544f 4e4f     luefter":"PHOTON
 80a7920:	2c22 6f22 7470 6f69 226e 223a 7325 2520     ","option":"%s %
 80a7930:	6432 7d22 2000 7325 2520 2064 5000 4d55     2d"}. %s %d .PUM
 80a7940:	4550 4d20 4941 204e 4f43 4e55 4454 574f     PE MAIN COUNTDOW
 80a7950:	204e 4f4e 2057 6300 6e6f 7274 6c6f 2000     N NOW .control. 
 80a7960:	6c53 6565 2070 6f4d 6564 6520 616e 6c62     Sleep Mode enabl
 80a7970:	6465 0020 4320 656c 7261 7220 7365 7265     ed . Clear reser
 80a7980:	6576 7220 7065 7465 7469 6f69 206e 6f63     ve repetition co
 80a7990:	6e75 6574 2072 2000 6c53 6565 2070 6f4d     unter . Sleep Mo
 80a79a0:	6564 6420 7369 6261 656c 2064 5400 4d45     de disabled .TEM
 80a79b0:	2050 4e49 253a 2064 554f 3a54 6425 2000     P IN:%d OUT:%d. 
 80a79c0:	7453 726f 2065 4f43 544e 4f52 204c 6e69     Store CONTROL in
 80a79d0:	4520 5045 4f52 204d 2000 6c55 7274 7361      EEPROM . Ultras
 80a79e0:	6e6f 6369 0020 5020 6572 6170 6572 5320     onic . Prepare S
 80a79f0:	656c 7065 0020 5020 6f68 6f74 206e 5748     leep . Photon HW
 80a7a00:	4920 2044 7000 7261 6974 6c63 2f65 6564      ID .particle/de
 80a7a10:	6976 6563 6e2f 6d61 0065 7520 746c 6172     vice/name. ultra
 80a7a20:	7320 6e6f 6369 6420 7369 6174 636e 2065      sonic distance 
 80a7a30:	2000 6c75 7274 2061 6964 7473 6e61 6563     . ultra distance
 80a7a40:	3a20 2520 2064 6d6d 5700 5241 494e 474e      : %d mm.WARNING
 80a7a50:	203a 6146 6c69 6465 7420 206f 6572 6461     : Failed to read
 80a7a60:	7520 746c 6172 6f73 696e 2063 6573 736e      ultrasonic sens
 80a7a70:	726f 5700 5341 4553 0052 7520 746c 6172     or.WASSER. ultra
 80a7a80:	6520 7272 726f 3a20 2520 2064 2000 6c75      error : %d . ul
 80a7a90:	7274 2061 6964 7473 6e61 6563 6120 6576     tra distance ave
 80a7aa0:	6172 6567 3a20 2520 2064 6d6d 6400 7369     rage : %d mm.dis
 80a7ab0:	6174 636e 2065 203a 2000 6c75 7274 2061     tance : . ultra 
 80a7ac0:	656c 6576 206c 7661 7265 6761 2065 203a     level average : 
 80a7ad0:	6425 6d20 006d 4320 4352 4520 7272 726f     %d mm. CRC Error
 80a7ae0:	0020 4720 7465 5420 6d65 6570 6172 7574      . Get Temperatu
 80a7af0:	6572 0020 6553 736e 726f 4920 2044 6425     re .Sensor ID %d
 80a7b00:	6e20 6d75 253d 2064 6554 706d 7265 7461      num=%d Temperat
 80a7b10:	7275 2065 2e25 6632 4320 2020 0d0a 7300     ure %.2f C  ...s
 80a7b20:	6e65 6f73 2072 6469 5d00 0020 6925 2500     ensor id.] .%i.%
 80a7b30:	696c 4300 6e6f 656e 7463 6e69 2067 6f74     li.Connecting to
 80a7b40:	0020 7453 7469 657a 626e 7275 0067 4342      .Stitzenburg.BC
 80a7b50:	5f24 6c63 2475 345f 3732 0037 7020 6f72     $_clu$_4277. pro
 80a7b60:	6f70 6573 2064 6c73 6565 2070 7564 6172     posed sleep dura
 80a7b70:	6974 6e6f 203a 6425 6d20 6e69 7475 7365     tion: %d minutes
 80a7b80:	5300 454c 5045 6420 7369 6261 656c 2064     .SLEEP disabled 
 80a7b90:	7962 4820 2057 6970 206e 4300 4e4f 5254     by HW pin .CONTR
 80a7ba0:	4c4f 5300 454c 5045 6420 7369 6261 656c     OL.SLEEP disable
 80a7bb0:	2064 7962 5320 2057 2000 6f64 746e 6c53     d by SW . dontSl
 80a7bc0:	6565 2070 6970 206e 203a 6425 0020 2520     eep pin : %d . %
 80a7bd0:	322e 2d64 2e25 6432 252d 2064 2e25 6432     .2d-%.2d-%d %.2d
 80a7be0:	253a 322e 3a64 2e25 6432 0020 6e69 7000     :%.2d:%.2d .in.p
 80a7bf0:	6d77 6400 0077 7761 4900 766e 6c61 6469     wm.dw.aw.Invalid
 80a7c00:	4820 2057 6d63 3a64 0020 6552 6461 2079      HW cmd: .Ready 
 80a7c10:	7028 6e69 3a67 0020 736d 2e29 4900 766e     (ping: .ms)..Inv
 80a7c20:	6c61 6469 6120 7475 2068 6f74 656b 006e     alid auth token.
 80a7c30:	6f43 6e6e 6365 2074 6166 6c69 6465 202e     Connect failed. 
 80a7c40:	6f63 6564 203a 5000 6361 656b 2074 6f74     code: .Packet to
 80a7c50:	206f 6962 3a67 0020 6552 6461 0079 6552     o big: .Ready.Re
 80a7c60:	6964 6572 7463 6e69 2067 6f74 0020 6553     directing to .Se
 80a7c70:	7672 7265 203a 4800 6165 7472 6562 7461     rver: .Heartbeat
 80a7c80:	7420 6d69 6f65 7475 4c00 676f 6e69 7420      timeout.Login t
 80a7c90:	6d69 6f65 7475 7600 0077 4820 6c65 6f6c     imeout.vw. Hello
 80a7ca0:	0020 6120 3a20 5320 6174 7574 0073 6220      . a : Status. b
 80a7cb0:	3a20 4220 756c 656d 206e 6967 7365 6573      : Blumen giesse
 80a7cc0:	006e 6420 3a20 5a20 6965 6474 7561 7265     n. d : Zeitdauer
 80a7cd0:	4720 6569 7373 6e65 7620 7265 6972 676e      Giessen verring
 80a7ce0:	7265 006e 6920 3a20 5a20 6965 6474 7561     ern. i : Zeitdau
 80a7cf0:	7265 4720 6569 7373 6e65 6520 6872 656f     er Giessen erhoe
 80a7d00:	6568 006e 7320 3a20 7320 656c 7065 6520     hen. s : sleep e
 80a7d10:	616e 6c62 6465 0020 7020 3a20 7320 656c     nabled . p : sle
 80a7d20:	7065 6420 7369 6261 656c 2064 2000 2075     ep disabled . u 
 80a7d30:	203a 6c63 6165 2072 6572 6573 7672 2065     : clear reserve 
 80a7d40:	6572 6570 6974 6974 6e6f 6320 756f 746e     repetition count
 80a7d50:	7265 0020 7720 3a20 7320 6f74 6572 6320     er . w : store c
 80a7d60:	6e6f 6966 2067 6f74 4520 5045 4f52 204d     onfig to EEPROM 
 80a7d70:	2000 2079 203a 6f67 6f74 7320 656c 7065     . y : goto sleep
 80a7d80:	0020 7820 3a20 7520 746c 6172 7320 6e6f      . x : ultra son
 80a7d90:	6369 6d20 6165 7573 6572 656d 746e 0020     ic measurement .
 80a7da0:	5420 7265 696d 616e 206c 6964 6173 6c62      Terminal disabl
 80a7db0:	6465 2020 5400 5245 494d 414e 204c 6964     ed  .TERMINAL di
 80a7dc0:	6173 6c62 6465 6220 2079 6c42 6e79 206b     sabled by Blynk 
 80a7dd0:	7542 7474 6e6f 5300 454c 5045 4420 5349     Button.SLEEP DIS
 80a7de0:	4241 454c 2044 5942 4220 594c 4b4e 4220     ABLED BY BLYNK B
 80a7df0:	5455 4f54 204e 2000 6c53 6565 2070 6f4d     UTTON . Sleep Mo
 80a7e00:	6564 4420 7369 6261 656c 2064 7962 6220     de Disabled by b
 80a7e10:	796c 6b6e 6220 7475 6f74 206e 5300 454c     lynk button .SLE
 80a7e20:	5045 4520 414e 4c42 4445 4220 2059 4c42     EP ENABLED BY BL
 80a7e30:	4e59 204b 5542 5454 4e4f 0020 5320 656c     YNK BUTTON . Sle
 80a7e40:	7065 4d20 646f 2065 6e45 6261 656c 2064     ep Mode Enabled 
 80a7e50:	7962 6220 796c 6b6e 6220 7475 6f74 206e     by blynk button 
 80a7e60:	5400 6e61 666b 6575 6c6c 6e65 6720 7365     .Tankfuellen ges
 80a7e70:	6174 7472 7465 6220 2079 4c42 4e59 204b     tartet by BLYNK 
 80a7e80:	7562 7474 6e6f 0020 5420 6e61 206b 7566     button . Tank fu
 80a7e90:	6c65 656c 206e 7962 4220 594c 4b4e 6220     ellen by BLYNK b
 80a7ea0:	7475 6f74 206e 0020 6552 6573 7672 2065     utton  .Reserve 
 80a7eb0:	7550 706d 2065 666f 2066 7962 4220 594c     Pumpe off by BLY
 80a7ec0:	4b4e 6220 7475 6f74 206e 2000 6552 6573     NK button . Rese
 80a7ed0:	7672 2065 7550 706d 2065 7561 6773 7365     rve Pumpe ausges
 80a7ee0:	6863 6c61 6574 2074 7962 6220 7475 6f74     chaltet by butto
 80a7ef0:	206e 4200 756c 656d 206e 6967 7365 6573     n .Blumen giesse
 80a7f00:	206e 6564 6b61 6974 6976 7265 2074 7962     n deaktiviert by
 80a7f10:	4220 796c 6b6e 4220 7475 6f74 206e 4200      Blynk Button .B
 80a7f20:	756c 656d 206e 6967 7365 6573 206e 6564     lumen giessen de
 80a7f30:	6b61 6974 6976 7265 2074 4200 756c 656d     aktiviert .Blume
 80a7f40:	206e 6967 7365 6573 206e 6b61 6974 6976     n giessen aktivi
 80a7f50:	7265 2074 7962 4220 796c 6b6e 4220 7475     ert by Blynk But
 80a7f60:	6f74 206e 4200 756c 656d 206e 6967 7365     ton .Blumen gies
 80a7f70:	6573 206e 6b61 6974 6976 7265 2074 4d00     sen aktiviert .M
 80a7f80:	6961 206e 7550 706d 2065 6965 676e 7365     ain Pumpe einges
 80a7f90:	6863 6c61 6574 2074 7962 4220 594c 4b4e     chaltet by BLYNK
 80a7fa0:	6220 2079 7562 7474 6e6f 0020 4d20 6961      by button . Mai
 80a7fb0:	206e 7550 706d 2065 6965 676e 7365 6863     n Pumpe eingesch
 80a7fc0:	6c61 6574 2074 7962 4220 594c 4b4e 6220     altet by BLYNK b
 80a7fd0:	7475 6f74 206e 0020 4d20 6961 206e 7550     utton  . Main Pu
 80a7fe0:	706d 2065 7561 6773 7365 6863 6c61 6574     mpe ausgeschalte
 80a7ff0:	2074 7962 4220 594c 4b4e 6220 7475 6f74     t by BLYNK butto
 80a8000:	206e 2500 2073 6425 7200 6365 6965 6576     n .%s %d.receive
 80a8010:	2064 3a20 0020 666f 0066 4157 5353 5245     d  : .off.WASSER
 80a8020:	5453 4e41 2044 203a 4947 5345 4553 204e     STAND : GIESSEN 
 80a8030:	4544 4b41 4954 4956 5245 2054 7962 5720     DEAKTIVIERT by W
 80a8040:	6265 6f48 6b6f 5700 5341 4553 5352 4154     ebHook.WASSERSTA
 80a8050:	444e 3a20 4720 4549 5353 4e45 4120 544b     ND : GIESSEN AKT
 80a8060:	5649 4549 5452 6220 2079 6557 4862 6f6f     IVIERT by WebHoo
 80a8070:	006b 7420 6f6e 3a77 0020 3231 2056 2020     k. tnow: .12V   
 80a8080:	2020 6d5b 5d56 3a20 0020 4120 5069 6d75       [mV] : . AiPum
 80a8090:	6570 614d 6e69 2020 2020 203a 6425 5b20     peMain    : %d [
 80a80a0:	566d 005d 6941 7550 706d 4d65 6961 206e     mV].AiPumpeMain 
 80a80b0:	2020 5b20 566d 205d 203a 4100 4344 2000        [mV] : .ADC. 
 80a80c0:	6941 7550 706d 5265 7365 7265 6576 3a20     AiPumpeReserve :
 80a80d0:	2520 2064 6d5b 5d56 4100 5069 6d75 6570      %d [mV].AiPumpe
 80a80e0:	6552 6573 7672 2065 6d5b 5d56 3a20 0020     Reserve [mV] : .
 80a80f0:	414d 4e49 5020 6d75 6570 6920 2073 4e4f     MAIN Pumpe is ON
 80a8100:	4d00 4941 204e 7550 706d 2065 7369 4f20     .MAIN Pumpe is O
 80a8110:	204e 5300 4154 5554 0053 4552 4553 5652     N .STATUS.RESERV
 80a8120:	2045 7550 706d 2065 7369 2074 4e4f 5200     E Pumpe ist ON.R
 80a8130:	5345 5245 4556 5020 6d75 6570 6920 2073     ESERVE Pumpe is 
 80a8140:	4e4f 0020 5546 4b4e 5020 6d75 6570 6920     ON .FUNK Pumpe i
 80a8150:	7473 4f20 004e 5546 4b4e 5020 6d75 6570     st ON.FUNK Pumpe
 80a8160:	6920 2073 4e4f 0020 7720 7461 7265 656c      is ON . waterle
 80a8170:	6576 3a6c 2520 2064 2000 6977 6966 253d     vel: %d . wifi=%
 80a8180:	2073 6c63 756f 3d64 7325 6620 7361 5f74     s cloud=%s fast_
 80a8190:	6f63 6e75 6574 3d72 6425 0020 6c63 0072     counter=%d .clr.
 80a81a0:	6576 7372 6f69 206e 2020 2020 2020 2020     version         
 80a81b0:	2020 3a20 0020 6f64 746e 6c53 6565 2070        : .dontSleep 
 80a81c0:	2020 2020 2020 2020 3a20 0020 6f64 746e              : .dont
 80a81d0:	6947 7365 6573 206e 2020 2020 2020 3a20     Giessen        :
 80a81e0:	0020 7570 706d 5f65 6f63 6e75 5f74 6f64      .pumpe_count_do
 80a81f0:	6e77 2020 3a20 0020 6572 6573 7672 5f65     wn   : .reserve_
 80a8200:	6572 6570 6974 6974 6e6f 3a73 0020 6f64     repetitions: .do
 80a8210:	746e 6947 7365 6573 3a6e 7000 6d75 6570     ntGiessen:.pumpe
 80a8220:	6320 756f 746e 6420 776f 3a6e 5700 5341      count down:.WAS
 80a8230:	4553 5352 4154 444e 3a20 0020 4157 5353     SERSTAND : .WASS
 80a8240:	5245 5453 4e41 2044 203a 4c42 4d55 4e45     ERSTAND : BLUMEN
 80a8250:	4720 4549 5353 4e45 4920 5453 4420 4145      GIESSEN IST DEA
 80a8260:	544b 5649 4549 5452 0020 4157 4e52 4e49     KTIVIERT .WARNIN
 80a8270:	2047 203a 6957 6465 7265 6f68 756c 676e     G : Wiederholung
 80a8280:	6e65 6420 7365 5420 6e61 666b 6575 6c6c     en des Tankfuell
 80a8290:	6e65 2073 6575 6562 7372 6863 6972 7474     ens ueberschritt
 80a82a0:	6e65 3d20 0020 6574 706d 6920 206e 3a20     en = .temp in  :
 80a82b0:	0020 6574 706d 6f20 7475 3a20 0020 2d20      .temp out : . -
 80a82c0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a82d0:	2d2d 2d2d 2d2d 0020 2a20 2a2a 5020 4552     ------ . *** PRE
 80a82e0:	4150 4552 5320 454c 5045 2a20 2a2a 0020     PARE SLEEP *** .
 80a82f0:	2323 2323 5320 454c 5045 4d20 6e69 7475     #### SLEEP Minut
 80a8300:	7365 2320 2323 2023 203a 2000 2a2a 202a     es #### : . *** 
 80a8310:	4157 454b 5520 2050 2a2a 202a 2300 2323     WAKE UP *** .###
 80a8320:	2023 4157 454b 5520 2050 2323 2323 5700     # WAKE UP ####.W
 80a8330:	4b41 2045 5055 5000 4d55 4550 4d20 4941     AKE UP.PUMPE MAI
 80a8340:	204e 4f43 4e55 4454 574f 204e 5349 0020     N COUNTDOWN IS .
 80a8350:	6f68 6b6f 722d 7365 6f70 736e 2f65 6177     hook-response/wa
 80a8360:	6574 4372 6e6f 7274 6c6f 7400 6d65 2070     terControl.temp 
 80a8370:	6e69 3a20 2520 2064 7420 6d65 2070 756f     in : %d  temp ou
 80a8380:	2074 203a 6425 0020 5420 7265 696d 616e     t : %d . Termina
 80a8390:	206c 6e65 6261 656c 2064 0020 4554 4d52     l enabled  .TERM
 80a83a0:	4e49 4c41 6520 616e 6c62 6465 6220 2079     INAL enabled by 
 80a83b0:	6c42 6e79 206b 7542 7474 6e6f 2d00 2d2d     Blynk Button.---
 80a83c0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a83d0:	2d2d 002d 2020 2020 2020 6557 636c 6d6f     ---.      Welcom
 80a83e0:	0065 0a0d 2020 2020 5f5f 205f 5f20 205f     e...    ___  __ 
 80a83f0:	2020 2020 2020 2020 5f20 0d5f 200a 2020              __..   
 80a8400:	202f 205f 2f29 2f20 205f 5f5f 5f5f 205f     / _ )/ /_ _____ 
 80a8410:	2f20 2f20 5f5f 0a0d 2020 202f 205f 2f20      / /__..  / _  /
 80a8420:	2f20 2f20 202f 202f 205f 2f5c 2020 5f27      / // / _ \/  '_
 80a8430:	0d2f 200a 5f2f 5f5f 2f5f 2f5f 5f5c 202c     /.. /____/_/\_, 
 80a8440:	5f2f 2f2f 2f5f 2f5f 5f5c 0d5c 200a 2020     /_//_/_/\_\..   
 80a8450:	2020 2020 2f20 5f5f 2f5f 7620 2e30 2e36          /___/ v0.6.
 80a8460:	2031 6e6f 5020 7261 6974 6c63 2065 6850     1 on Particle Ph
 80a8470:	746f 6e6f 0a0d 6200 796c 6b6e 632d 6f6c     oton...blynk-clo
 80a8480:	6475 632e 6d6f 2300 2323 2023 4553 5554     ud.com.#### SETU
 80a8490:	2f50 4552 4553 2054 6556 7372 6f69 206e     P/RESET Version 
 80a84a0:	5200 5345 5445 5200 4c53 2034 6261 6567     .RESET.RSL4 abge
 80a84b0:	6373 6168 746c 7465 5200 4c53 2034 6965     schaltet.RSL4 ei
 80a84c0:	676e 7365 6863 6c61 6574 0074 6554 6d72     ngeschaltet.Term
 80a84d0:	6e69 6c61 6420 7369 6261 656c 0064 4554     inal disabled.TE
 80a84e0:	4d52 4e49 4c41 6420 7369 6261 656c 2064     RMINAL disabled 
 80a84f0:	7962 7420 6d69 6f65 7475 0a00 6f59 2075     by timeout..You 
 80a8500:	6173 6469 003a 7220 6c73 3920 6520 6e69     said:. rsl 9 ein
 80a8510:	0020 7220 6c73 3920 6120 7375 0020 7220      . rsl 9 aus . r
 80a8520:	6c73 3820 6520 6e69 0020 7220 6c73 3820     sl 8 ein . rsl 8
 80a8530:	6120 7375 0020 7220 6c73 3120 6520 6e69      aus . rsl 1 ein
 80a8540:	0020 7220 6c73 3120 6120 7375 0020 7220      . rsl 1 aus . r
 80a8550:	6c73 3320 6520 6e69 0020 7220 6c73 3320     sl 3 ein . rsl 3
 80a8560:	6120 7375 0020 7720 6965 6e68 6361 7468      aus . weihnacht
 80a8570:	6e65 6520 6e69 2020 2000 6577 6869 616e     en ein  . weihna
 80a8580:	6863 6574 206e 7561 2073 0020               chten aus  .

080a858c <_ZTV14WidgetTerminal>:
	...
 80a8594:	08ab 080a 08ad 080a 08cb 080a 451d 080a     .............E..
 80a85a4:	1615 080a 08a5 080a                         ........

080a85ac <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
 80a85ac:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e36     blnkinf.ver.0.6.
 80a85bc:	0031 2d68 6562 7461 3100 0030 7562 6666     1.h-beat.10.buff
 80a85cc:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
 80a85dc:	6974 6c63 2065 6850 746f 6e6f 6200 6975     ticle Photon.bui
 80a85ec:	646c 4d00 7961 2020 2039 3032 3232 3020     ld.May  9 2022 0
 80a85fc:	3a39 3431 353a 0038 0000 4520 5252 524f     9:14:58... ERROR
 80a860c:	7720 6968 6863 6e20 746f 7620 6c61 6469      which not valid
 80a861c:	0020 4520 5252 524f 7320 6174 6574 6e20      . ERROR state n
 80a862c:	746f 7620 6c61 6469 0020 6553 646e 2065     ot valid .Sende 
 80a863c:	6f43 6564 3a20 0020 4620 6865 656c 2072     Code : . Fehler 
 80a864c:	203a 6f6b 6e6e 6574 4320 646f 2065 696e     : konnte Code ni
 80a865c:	6863 2074 6966 646e 6e65 0020 3030 3130     cht finden .0001
 80a866c:	3030 3130 3030 3030 3130 3130 3130 3130     0001000001010101
 80a867c:	3030 3031 3000 3030 3031 3030 3031 3030     0010.00010001000
 80a868c:	3030 3031 3031 3031 3031 3030 0031 3030     0010101010001.00
 80a869c:	3130 3030 3130 3030 3130 3030 3130 3130     0100010001000101
 80a86ac:	3130 3130 3030 3000 3030 3031 3030 3031     010100.000100010
 80a86bc:	3030 3031 3030 3031 3031 3031 3030 0031     001000101010001.
 80a86cc:	3030 3130 3030 3130 3030 3130 3130 3030     0001000100010100
 80a86dc:	3130 3130 3030 3031 3000 3030 3031 3030     01010010.0001000
 80a86ec:	3031 3030 3031 3031 3030 3031 3031 3030     1000101000101000
 80a86fc:	0031 5546 4b4e 502d 4d55 4550 5220 4c53     1.FUNK-PUMPE RSL
 80a870c:	2032 4945 474e 5345 4843 4c41 4554 2054     2 EINGESCHALTET 
 80a871c:	2000 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     . --------------
 80a872c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a873c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 202d     --------------- 
 80a874c:	2000 414d 4e49 5020 6d75 6570 7320 6863     . MAIN Pumpe sch
 80a875c:	6c61 6574 206e 203a 6425 5a20 6965 2074     alten : %d Zeit 
 80a876c:	6425 4200 554c 454d 204e 4947 5345 4553     %d.BLUMEN GIESSE
 80a877c:	204e 4542 4947 4e4e 2054 0020 4157 5353     N BEGINNT  .WASS
 80a878c:	5245 5453 4e41 2044 6562 6f66 6572 7020     ERSTAND before p
 80a879c:	6d75 6570 4f20 204e 203a 5700 5341 4553     umpe ON : .WASSE
 80a87ac:	5352 4154 444e 5420 4f52 4b43 4e45 4c2d     RSTAND TROCKEN-L
 80a87bc:	5541 2d46 4353 5548 5a54 202e 5550 504d     AUF-SCHUTZ. PUMP
 80a87cc:	2045 494e 4843 2054 4945 534e 4843 4c41     E NICHT EINSCHAL
 80a87dc:	4554 004e 4148 5055 2d54 5550 504d 2045     TEN.HAUPT-PUMPE 
 80a87ec:	4945 474e 5345 4843 4c41 4554 2054 203a     EINGESCHALTET : 
 80a87fc:	4800 5541 5450 502d 4d55 4550 4120 5355     .HAUPT-PUMPE AUS
 80a880c:	4547 4353 4148 544c 5445 0020 4157 5353     GESCHALTET .WASS
 80a881c:	5245 5453 4e41 2044 6661 6574 2072 7570     ERSTAND after pu
 80a882c:	706d 2065 464f 2046 203a 5700 5341 4553     mpe OFF : .WASSE
 80a883c:	5352 4154 444e 6720 6665 6c61 656c 206e     RSTAND gefallen 
 80a884c:	6d75 5b20 6d6d 205d 203a 5700 5341 4553     um [mm] : .WASSE
 80a885c:	5352 4154 444e 4220 554c 454d 204e 4947     RSTAND BLUMEN GI
 80a886c:	5345 4553 204e 5245 4f46 474c 4552 4349     ESSEN ERFOLGREIC
 80a887c:	2048 4542 4e45 4544 0054 4420 506f 6d75     H BEENDET. DoPum
 80a888c:	6570 614d 6e69 2020 2020 203a 6425 0020     peMain    : %d .
 80a889c:	6941 7550 706d 4d65 6961 206e 6d5b 5d56     AiPumpeMain [mV]
 80a88ac:	3a20 0020 5220 5345 5245 4556 5020 6d75      : . RESERVE Pum
 80a88bc:	6570 7320 6863 6c61 6574 206e 203a 6425     pe schalten : %d
 80a88cc:	5a20 6965 2074 6425 5700 5341 4553 5352      Zeit %d.WASSERS
 80a88dc:	4154 444e 6220 6665 726f 2065 6572 2d73     TAND before res-
 80a88ec:	7570 706d 2065 4e4f 3a20 0020 4552 4553     pumpe ON : .RESE
 80a88fc:	5652 2d45 5550 504d 2045 4945 474e 5345     RVE-PUMPE EINGES
 80a890c:	4843 4c41 4554 2054 5200 5345 5245 4556     CHALTET .RESERVE
 80a891c:	502d 4d55 4550 4120 5355 4547 4353 4148     -PUMPE AUSGESCHA
 80a892c:	544c 5445 202e 5546 4c45 554c 474e 4e20     LTET. FUELLUNG N
 80a893c:	2e52 0020 4157 5353 5245 5453 4e41 2044     R. .WASSERSTAND 
 80a894c:	6661 6574 2072 6572 2d73 7570 706d 2065     after res-pumpe 
 80a895c:	464f 2046 203a 2000 4157 5353 5245 5453     OFF : . WASSERST
 80a896c:	4e41 2044 4154 4b4e 4620 4555 4c4c 4e45     AND TANK FUELLEN
 80a897c:	4520 4652 4c4f 5247 4945 4843 4220 4545      ERFOLGREICH BEE
 80a898c:	444e 5445 2000 4157 5353 5245 5453 4e41     NDET. WASSERSTAN
 80a899c:	2044 5245 4f52 3a52 5420 4e41 204b 5546     D ERROR: TANK FU
 80a89ac:	4c45 454c 204e 6566 6c68 6567 6373 6c68     ELLEN fehlgeschl
 80a89bc:	6761 6e65 2000 6f44 7550 706d 5265 7365     agen. DoPumpeRes
 80a89cc:	7265 6576 2020 2020 203a 6425 0020 4120     erve    : %d . A
 80a89dc:	5069 6d75 6570 6552 6573 7672 2065 2020     iPumpeReserve   
 80a89ec:	3a20 2520 2064 6d5b 5d56 4600 4e55 2d4b      : %d [mV].FUNK-
 80a89fc:	5550 504d 2045 5352 324c 4120 5355 4547     PUMPE RSL2 AUSGE
 80a8a0c:	4353 4148 544c 5445 0020 5420 6e61 666b     SCHALTET . Tankf
 80a8a1c:	6575 6c6c 6e65 2928 0020 5420 4e41 464b     uellen() . TANKF
 80a8a2c:	4555 4c4c 4e45 3a20 4e20 4349 5448 4e20     UELLEN : NICHT N
 80a8a3c:	544f 4557 444e 4749 0020 5245 4f52 2052     OTWENDIG .ERROR 
 80a8a4c:	202d 4241 524f 3a54 5720 6569 6564 6872     - ABORT: Wiederh
 80a8a5c:	6c6f 6e75 6567 206e 6564 2073 6154 6b6e     olungen des Tank
 80a8a6c:	7566 6c65 656c 736e 7520 6265 7265 6373     fuellens uebersc
 80a8a7c:	7268 7469 6574 206e 203d 5700 5341 4553     hritten = .WASSE
 80a8a8c:	5352 4154 444e 5420 4e41 464b 4555 4c4c     RSTAND TANKFUELL
 80a8a9c:	4e45 3a20 4220 554c 454d 204e 4947 5345     EN : BLUMEN GIES
 80a8aac:	4553 204e 5349 2054 4544 4b41 4954 4956     SEN IST DEAKTIVI
 80a8abc:	5245 2054 5700 5341 4553 5352 4154 444e     ERT .WASSERSTAND
 80a8acc:	5420 4e41 204b 5546 4c45 454c 204e 6567      TANK FUELLEN ge
 80a8adc:	7473 7261 6574 2074 7400 6573 0063 6d74     startet .tsec.tm
 80a8aec:	6961 206e 7473 706f 0000 0000               ain stop....

080a8af8 <_ZL22BlynkReadHandlerVector>:
 80a8af8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b08:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b18:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b28:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b38:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b48:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b58:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b68:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b78:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b88:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8b98:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8ba8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8bb8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8bc8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8bd8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8be8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8bf8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c08:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c18:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c28:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c38:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c48:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c58:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c68:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c78:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c88:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8c98:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8ca8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8cb8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8cc8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8cd8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..
 80a8ce8:	364d 080a 364d 080a 364d 080a 364d 080a     M6..M6..M6..M6..

080a8cf8 <_ZL23BlynkWriteHandlerVector>:
 80a8cf8:	364f 080a 2619 080a 2649 080a 2679 080a     O6...&..I&..y&..
 80a8d08:	26a9 080a 26dd 080a 270d 080a 273d 080a     .&...&...'..='..
 80a8d18:	2771 080a 27ad 080a 27dd 080a 280d 080a     q'...'...'...(..
 80a8d28:	284d 080a 1711 080a 21ad 080a 364f 080a     M(.......!..O6..
 80a8d38:	0d5d 080a 0d77 080a 364f 080a 364f 080a     ]...w...O6..O6..
 80a8d48:	364f 080a 364f 080a 25a1 080a 364f 080a     O6..O6...%..O6..
 80a8d58:	364f 080a 1751 080a 1795 080a 17d9 080a     O6..Q...........
 80a8d68:	180d 080a 1849 080a 188d 080a 18d1 080a     ....I...........
 80a8d78:	1911 080a 364f 080a 364f 080a 364f 080a     ....O6..O6..O6..
 80a8d88:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8d98:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8da8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8db8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8dc8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8dd8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8de8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8df8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e08:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e18:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e28:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e38:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e48:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e58:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e68:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e78:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e88:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8e98:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8ea8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8eb8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8ec8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8ed8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8ee8:	364f 080a 364f 080a 364f 080a 364f 080a     O6..O6..O6..O6..
 80a8ef8:	6977 6972 676e 5400 5043 6c43 6569 746e     wiring.TCPClient
 80a8f08:	7320 636f 656b 3d74 7825 0000                socket=%x..

080a8f14 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a8f1c:	3ed9 080a 3f01 080a 42ef 080a 3f0f 080a     .>...?...B...?..
 80a8f2c:	3edd 080a                                   .>..

080a8f30 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a8f38 <_ZTV9TCPClient>:
	...
 80a8f40:	3f15 080a 3f49 080a 3e61 080a 3e7b 080a     .?..I?..a>..{>..
 80a8f50:	40f1 080a 3ea3 080a 3f7d 080a 3ed7 080a     .@...>..}?...>..
 80a8f60:	4011 080a 42f5 080a 3fab 080a 4165 080a     .@...B...?..eA..
 80a8f70:	4213 080a 41cb 080a 3e8b 080a 41d9 080a     .B...A...>...A..
 80a8f80:	3f5d 080a 7061 0070 5925 252d 2d6d 6425     ]?..app.%Y-%m-%d
 80a8f90:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a8fa0:	6d69 0065                                   ime.

080a8fa4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a8fac:	4a5d 080a 4a63 080a 4aa1 080a 4a71 080a     ]J..cJ...J..qJ..
 80a8fbc:	4a5f 080a                                   _J..

080a8fc0 <_ZTV9IPAddress>:
	...
 80a8fc8:	4f97 080a 4f95 080a 4fc9 080a               .O...O...O..

080a8fd4 <_ZTV9USBSerial>:
	...
 80a8fdc:	5061 080a 50c7 080a 509f 080a 451d 080a     aP...P...P...E..
 80a8fec:	5091 080a 5063 080a 5073 080a 50c1 080a     .P..cP..sP...P..
 80a8ffc:	5083 080a 505d 080a                         .P..]P..

080a9004 <_ZTV11USARTSerial>:
	...
 80a900c:	5205 080a 526d 080a 5249 080a 451d 080a     .R..mR..IR...E..
 80a901c:	5219 080a 5235 080a 5227 080a 5243 080a     .R..5R..'R..CR..
 80a902c:	5207 080a 520b 080a                         .R...R..

080a9034 <_ZTV7TwoWire>:
	...
 80a903c:	5321 080a 536b 080a 5343 080a 5323 080a     !S..kS..CS..#S..
 80a904c:	534b 080a 5353 080a 535b 080a 5363 080a     KS..SS..[S..cS..

080a905c <_ZTVN5spark9WiFiClassE>:
	...
 80a9064:	5433 080a 5429 080a 541f 080a 539d 080a     3T..)T...T...S..
 80a9074:	0945 080a 5413 080a 5491 080a 5499 080a     E....T...T...T..
 80a9084:	5407 080a 53ff 080a 53f5 080a 53eb 080a     .T...S...S...S..
 80a9094:	53a7 080a                                   .S..

080a9098 <_ZTVN5spark12NetworkClassE>:
	...
 80a90a0:	5451 080a 545b 080a 5465 080a 546f 080a     QT..[T..eT..oT..
 80a90b0:	5479 080a 5485 080a 5491 080a 5499 080a     yT...T...T...T..
 80a90c0:	54a1 080a 54ad 080a 54b5 080a 54bf 080a     .T...T...T...T..
 80a90d0:	54c9 080a                                   .T..

080a90d4 <_ZSt7nothrow>:
	...

080a90d5 <_ZTSSt19_Sp_make_shared_tag>:
 80a90d5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a90e5:	6572 5f64 6174 0067 0000                     red_tag....

080a90f0 <_ZTISt19_Sp_make_shared_tag>:
 80a90f0:	9130 080a 90d5 080a                         0.......

080a90f8 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a90f8:	9190 080a 9104 080a 91b4 080a               ............

080a9104 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a9104:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a9114:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a9124:	0045 0000                                   E...

080a9128 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a9128:	0000 0000 90f8 080a 5815 080a 5829 080a     .........X..)X..
 80a9138:	59c1 080a 59c1 080a 5893 080a 57d5 080a     .Y...Y...X...W..
 80a9148:	587b 080a 583d 080a 5807 080a               {X..=X...X..

080a9154 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a9154:	9190 080a 9160 080a 90f8 080a               ....`.......

080a9160 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a9160:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a9170:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a9180:	666e 456f 0000 0000                         nfoE....

080a9188 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a9188:	0000 0000 9154 080a 58bd 080a 58d1 080a     ....T....X...X..
 80a9198:	59c1 080a 59c1 080a 5893 080a 57d5 080a     .Y...Y...X...W..
 80a91a8:	5995 080a 5921 080a 58e5 080a               .Y..!Y...X..

080a91b4 <_ZTISt9type_info>:
 80a91b4:	9130 080a 91bc 080a                         0.......

080a91bc <_ZTSSt9type_info>:
 80a91bc:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

080a91cc <__month_lengths>:
 80a91cc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a91dc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a91ec:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a91fc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a920c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a921c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a922c:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80a923c:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
 80a924c:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
 80a925c:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
 80a926c:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
 80a927c:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
 80a928c:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
 80a929c:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
 80a92ac:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
 80a92bc:	2e64 0063 5a54 4700 544d 2500 3031 5e5b     d.c.TZ.GMT.%10[^
 80a92cc:	2d30 2c39 2d2b 255d 006e 254d 7568 6e25     0-9,+-]%n.M%hu%n
 80a92dc:	252e 7568 6e25 252e 7568 6e25 2f00 6825     .%hu%n.%hu%n./%h
 80a92ec:	2575 3a6e 6825 2575 3a6e 6825 2575 006e     u%n:%hu%n:%hu%n.

080a92fc <_ctype_>:
 80a92fc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a930c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a931c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a932c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a933c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a934c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a935c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a936c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a937c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a93fd <link_const_variable_data_end>:
 80a93fd:	00          	.byte	0x00
	...

080a9400 <link_constructors_location>:
 80a9400:	080a0265 	.word	0x080a0265
 80a9404:	080a045d 	.word	0x080a045d
 80a9408:	080a0895 	.word	0x080a0895
 80a940c:	080a288d 	.word	0x080a288d
 80a9410:	080a3e25 	.word	0x080a3e25
 80a9414:	080a4695 	.word	0x080a4695
 80a9418:	080a4885 	.word	0x080a4885
 80a941c:	080a48e1 	.word	0x080a48e1
 80a9420:	080a543d 	.word	0x080a543d
 80a9424:	080a5531 	.word	0x080a5531
 80a9428:	080a5705 	.word	0x080a5705

080a942c <link_constructors_end>:
 80a942c:	00000000 	.word	0x00000000
